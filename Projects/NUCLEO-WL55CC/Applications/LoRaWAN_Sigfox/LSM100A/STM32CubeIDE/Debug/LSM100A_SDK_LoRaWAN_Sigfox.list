
LSM100A_SDK_LoRaWAN_Sigfox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08002000  08002000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022780  08002140  08002140  00002140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004aa8  080248c0  080248c0  000248c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029368  08029368  000302b4  2**0
                  CONTENTS
  4 .ARM          00000008  08029368  08029368  00029368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029370  08029370  000302b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029370  08029370  00029370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029374  08029374  00029374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 00000030  0803e500  0803e500  0003e500  2**2
                  ALLOC, READONLY
  9 .data         000002b4  20000000  08029378  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000026a0  200002b4  0802962c  000302b4  2**2
                  ALLOC
 11 RAM1_region   00000000  20002954  20002954  000302b4  2**0
                  CONTENTS
 12 RAM2_region   00000000  20008000  20008000  000302b4  2**0
                  CONTENTS
 13 ._user_heap_stack 00001204  20002954  20002954  00032954  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY
 15 .debug_info   000b8cc1  00000000  00000000  000302e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00012e01  00000000  00000000  000e8fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    000324a7  00000000  00000000  000fbda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003c68  00000000  00000000  0012e250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003eb8  00000000  00000000  00131eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00033286  00000000  00000000  00135d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0006dfd4  00000000  00000000  00168ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000db702  00000000  00000000  001d6fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00001770  00000000  00000000  002b26cc  2**0
                  CONTENTS, READONLY
 24 .iar.rtmodel  0000012c  00000000  00000000  002b3e3c  2**0
                  CONTENTS, READONLY
 25 .iar_vfe_header 00000024  00000000  00000000  002b3f68  2**2
                  CONTENTS, READONLY
 26 .debug_frame  0000cf3c  00000000  00000000  002b3f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08002140 <__do_global_dtors_aux>:
 8002140:	b510      	push	{r4, lr}
 8002142:	4c05      	ldr	r4, [pc, #20]	; (8002158 <__do_global_dtors_aux+0x18>)
 8002144:	7823      	ldrb	r3, [r4, #0]
 8002146:	b933      	cbnz	r3, 8002156 <__do_global_dtors_aux+0x16>
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <__do_global_dtors_aux+0x1c>)
 800214a:	b113      	cbz	r3, 8002152 <__do_global_dtors_aux+0x12>
 800214c:	4804      	ldr	r0, [pc, #16]	; (8002160 <__do_global_dtors_aux+0x20>)
 800214e:	f3af 8000 	nop.w
 8002152:	2301      	movs	r3, #1
 8002154:	7023      	strb	r3, [r4, #0]
 8002156:	bd10      	pop	{r4, pc}
 8002158:	200002b4 	.word	0x200002b4
 800215c:	00000000 	.word	0x00000000
 8002160:	080248a8 	.word	0x080248a8

08002164 <frame_dummy>:
 8002164:	b508      	push	{r3, lr}
 8002166:	4b03      	ldr	r3, [pc, #12]	; (8002174 <frame_dummy+0x10>)
 8002168:	b11b      	cbz	r3, 8002172 <frame_dummy+0xe>
 800216a:	4903      	ldr	r1, [pc, #12]	; (8002178 <frame_dummy+0x14>)
 800216c:	4803      	ldr	r0, [pc, #12]	; (800217c <frame_dummy+0x18>)
 800216e:	f3af 8000 	nop.w
 8002172:	bd08      	pop	{r3, pc}
 8002174:	00000000 	.word	0x00000000
 8002178:	200002b8 	.word	0x200002b8
 800217c:	080248a8 	.word	0x080248a8

08002180 <SIGFOX_API_open>:
 8002180:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002182:	0004      	movs	r4, r0
 8002184:	2500      	movs	r5, #0
 8002186:	48c6      	ldr	r0, [pc, #792]	; (80024a0 <.text_15>)
 8002188:	7800      	ldrb	r0, [r0, #0]
 800218a:	2800      	cmp	r0, #0
 800218c:	d001      	beq.n	8002192 <SIGFOX_API_open+0x12>
 800218e:	2011      	movs	r0, #17
 8002190:	e102      	b.n	8002398 <SIGFOX_API_open+0x218>
 8002192:	2c00      	cmp	r4, #0
 8002194:	d101      	bne.n	800219a <SIGFOX_API_open+0x1a>
 8002196:	2013      	movs	r0, #19
 8002198:	e0fe      	b.n	8002398 <SIGFOX_API_open+0x218>
 800219a:	203b      	movs	r0, #59	; 0x3b
 800219c:	4669      	mov	r1, sp
 800219e:	7108      	strb	r0, [r1, #4]
 80021a0:	4668      	mov	r0, sp
 80021a2:	f00b fbb8 	bl	800d916 <MCU_API_get_nv_mem>
 80021a6:	0005      	movs	r5, r0
 80021a8:	b2ed      	uxtb	r5, r5
 80021aa:	2d00      	cmp	r5, #0
 80021ac:	d005      	beq.n	80021ba <SIGFOX_API_open+0x3a>
 80021ae:	2110      	movs	r1, #16
 80021b0:	0028      	movs	r0, r5
 80021b2:	b2c0      	uxtb	r0, r0
 80021b4:	f000 fc95 	bl	8002ae2 <RETURN_CODE>
 80021b8:	e0ee      	b.n	8002398 <SIGFOX_API_open+0x218>
 80021ba:	4668      	mov	r0, sp
 80021bc:	7900      	ldrb	r0, [r0, #4]
 80021be:	283b      	cmp	r0, #59	; 0x3b
 80021c0:	d001      	beq.n	80021c6 <SIGFOX_API_open+0x46>
 80021c2:	2012      	movs	r0, #18
 80021c4:	e0e8      	b.n	8002398 <SIGFOX_API_open+0x218>
 80021c6:	49b7      	ldr	r1, [pc, #732]	; (80024a4 <.text_16>)
 80021c8:	206c      	movs	r0, #108	; 0x6c
 80021ca:	f00b fb2d 	bl	800d828 <MCU_API_malloc>
 80021ce:	0005      	movs	r5, r0
 80021d0:	48b4      	ldr	r0, [pc, #720]	; (80024a4 <.text_16>)
 80021d2:	6800      	ldr	r0, [r0, #0]
 80021d4:	2800      	cmp	r0, #0
 80021d6:	d002      	beq.n	80021de <SIGFOX_API_open+0x5e>
 80021d8:	b2ed      	uxtb	r5, r5
 80021da:	2d00      	cmp	r5, #0
 80021dc:	d005      	beq.n	80021ea <SIGFOX_API_open+0x6a>
 80021de:	2110      	movs	r1, #16
 80021e0:	0028      	movs	r0, r5
 80021e2:	b2c0      	uxtb	r0, r0
 80021e4:	f000 fc7d 	bl	8002ae2 <RETURN_CODE>
 80021e8:	e0d6      	b.n	8002398 <SIGFOX_API_open+0x218>
 80021ea:	48ae      	ldr	r0, [pc, #696]	; (80024a4 <.text_16>)
 80021ec:	6800      	ldr	r0, [r0, #0]
 80021ee:	3064      	adds	r0, #100	; 0x64
 80021f0:	f001 fc62 	bl	8003ab8 <SIGFOX_INT_get_device_id>
 80021f4:	0006      	movs	r6, r0
 80021f6:	b2b6      	uxth	r6, r6
 80021f8:	2e00      	cmp	r6, #0
 80021fa:	d006      	beq.n	800220a <SIGFOX_API_open+0x8a>
 80021fc:	48a9      	ldr	r0, [pc, #676]	; (80024a4 <.text_16>)
 80021fe:	6800      	ldr	r0, [r0, #0]
 8002200:	f00b fb1c 	bl	800d83c <MCU_API_free>
 8002204:	0030      	movs	r0, r6
 8002206:	b280      	uxth	r0, r0
 8002208:	e0c6      	b.n	8002398 <SIGFOX_API_open+0x218>
 800220a:	4668      	mov	r0, sp
 800220c:	7840      	ldrb	r0, [r0, #1]
 800220e:	0200      	lsls	r0, r0, #8
 8002210:	4669      	mov	r1, sp
 8002212:	7809      	ldrb	r1, [r1, #0]
 8002214:	4308      	orrs	r0, r1
 8002216:	49a3      	ldr	r1, [pc, #652]	; (80024a4 <.text_16>)
 8002218:	6809      	ldr	r1, [r1, #0]
 800221a:	8488      	strh	r0, [r1, #36]	; 0x24
 800221c:	7b60      	ldrb	r0, [r4, #13]
 800221e:	2802      	cmp	r0, #2
 8002220:	d12c      	bne.n	800227c <SIGFOX_API_open+0xfc>
 8002222:	2003      	movs	r0, #3
 8002224:	499f      	ldr	r1, [pc, #636]	; (80024a4 <.text_16>)
 8002226:	6809      	ldr	r1, [r1, #0]
 8002228:	6088      	str	r0, [r1, #8]
 800222a:	48b5      	ldr	r0, [pc, #724]	; (8002500 <.text_18>)
 800222c:	499d      	ldr	r1, [pc, #628]	; (80024a4 <.text_16>)
 800222e:	6809      	ldr	r1, [r1, #0]
 8002230:	60c8      	str	r0, [r1, #12]
 8002232:	2000      	movs	r0, #0
 8002234:	499b      	ldr	r1, [pc, #620]	; (80024a4 <.text_16>)
 8002236:	6809      	ldr	r1, [r1, #0]
 8002238:	6108      	str	r0, [r1, #16]
 800223a:	6920      	ldr	r0, [r4, #16]
 800223c:	4999      	ldr	r1, [pc, #612]	; (80024a4 <.text_16>)
 800223e:	6809      	ldr	r1, [r1, #0]
 8002240:	6288      	str	r0, [r1, #40]	; 0x28
 8002242:	7e20      	ldrb	r0, [r4, #24]
 8002244:	4997      	ldr	r1, [pc, #604]	; (80024a4 <.text_16>)
 8002246:	6809      	ldr	r1, [r1, #0]
 8002248:	2230      	movs	r2, #48	; 0x30
 800224a:	5488      	strb	r0, [r1, r2]
 800224c:	6960      	ldr	r0, [r4, #20]
 800224e:	49ad      	ldr	r1, [pc, #692]	; (8002504 <.text_19>)
 8002250:	4288      	cmp	r0, r1
 8002252:	d10a      	bne.n	800226a <SIGFOX_API_open+0xea>
 8002254:	20fa      	movs	r0, #250	; 0xfa
 8002256:	0040      	lsls	r0, r0, #1
 8002258:	4992      	ldr	r1, [pc, #584]	; (80024a4 <.text_16>)
 800225a:	6809      	ldr	r1, [r1, #0]
 800225c:	62c8      	str	r0, [r1, #44]	; 0x2c
 800225e:	2003      	movs	r0, #3
 8002260:	4990      	ldr	r1, [pc, #576]	; (80024a4 <.text_16>)
 8002262:	6809      	ldr	r1, [r1, #0]
 8002264:	2231      	movs	r2, #49	; 0x31
 8002266:	5488      	strb	r0, [r1, r2]
 8002268:	e008      	b.n	800227c <SIGFOX_API_open+0xfc>
 800226a:	2000      	movs	r0, #0
 800226c:	498d      	ldr	r1, [pc, #564]	; (80024a4 <.text_16>)
 800226e:	6809      	ldr	r1, [r1, #0]
 8002270:	62c8      	str	r0, [r1, #44]	; 0x2c
 8002272:	2002      	movs	r0, #2
 8002274:	498b      	ldr	r1, [pc, #556]	; (80024a4 <.text_16>)
 8002276:	6809      	ldr	r1, [r1, #0]
 8002278:	2231      	movs	r2, #49	; 0x31
 800227a:	5488      	strb	r0, [r1, r2]
 800227c:	7b60      	ldrb	r0, [r4, #13]
 800227e:	2801      	cmp	r0, #1
 8002280:	d119      	bne.n	80022b6 <SIGFOX_API_open+0x136>
 8002282:	48a1      	ldr	r0, [pc, #644]	; (8002508 <.text_20>)
 8002284:	4987      	ldr	r1, [pc, #540]	; (80024a4 <.text_16>)
 8002286:	6809      	ldr	r1, [r1, #0]
 8002288:	6088      	str	r0, [r1, #8]
 800228a:	2000      	movs	r0, #0
 800228c:	4985      	ldr	r1, [pc, #532]	; (80024a4 <.text_16>)
 800228e:	6809      	ldr	r1, [r1, #0]
 8002290:	60c8      	str	r0, [r1, #12]
 8002292:	2000      	movs	r0, #0
 8002294:	4983      	ldr	r1, [pc, #524]	; (80024a4 <.text_16>)
 8002296:	6809      	ldr	r1, [r1, #0]
 8002298:	6108      	str	r0, [r1, #16]
 800229a:	2001      	movs	r0, #1
 800229c:	4981      	ldr	r1, [pc, #516]	; (80024a4 <.text_16>)
 800229e:	6809      	ldr	r1, [r1, #0]
 80022a0:	2232      	movs	r2, #50	; 0x32
 80022a2:	5488      	strb	r0, [r1, r2]
 80022a4:	4668      	mov	r0, sp
 80022a6:	78c0      	ldrb	r0, [r0, #3]
 80022a8:	0200      	lsls	r0, r0, #8
 80022aa:	4669      	mov	r1, sp
 80022ac:	7889      	ldrb	r1, [r1, #2]
 80022ae:	4308      	orrs	r0, r1
 80022b0:	497c      	ldr	r1, [pc, #496]	; (80024a4 <.text_16>)
 80022b2:	6809      	ldr	r1, [r1, #0]
 80022b4:	8688      	strh	r0, [r1, #52]	; 0x34
 80022b6:	6820      	ldr	r0, [r4, #0]
 80022b8:	497a      	ldr	r1, [pc, #488]	; (80024a4 <.text_16>)
 80022ba:	6809      	ldr	r1, [r1, #0]
 80022bc:	6008      	str	r0, [r1, #0]
 80022be:	6860      	ldr	r0, [r4, #4]
 80022c0:	4978      	ldr	r1, [pc, #480]	; (80024a4 <.text_16>)
 80022c2:	6809      	ldr	r1, [r1, #0]
 80022c4:	6048      	str	r0, [r1, #4]
 80022c6:	7b60      	ldrb	r0, [r4, #13]
 80022c8:	4976      	ldr	r1, [pc, #472]	; (80024a4 <.text_16>)
 80022ca:	6809      	ldr	r1, [r1, #0]
 80022cc:	2256      	movs	r2, #86	; 0x56
 80022ce:	5488      	strb	r0, [r1, r2]
 80022d0:	68a0      	ldr	r0, [r4, #8]
 80022d2:	4974      	ldr	r1, [pc, #464]	; (80024a4 <.text_16>)
 80022d4:	6809      	ldr	r1, [r1, #0]
 80022d6:	6588      	str	r0, [r1, #88]	; 0x58
 80022d8:	7b20      	ldrb	r0, [r4, #12]
 80022da:	2801      	cmp	r0, #1
 80022dc:	d105      	bne.n	80022ea <SIGFOX_API_open+0x16a>
 80022de:	2064      	movs	r0, #100	; 0x64
 80022e0:	4970      	ldr	r1, [pc, #448]	; (80024a4 <.text_16>)
 80022e2:	6809      	ldr	r1, [r1, #0]
 80022e4:	225c      	movs	r2, #92	; 0x5c
 80022e6:	5288      	strh	r0, [r1, r2]
 80022e8:	e008      	b.n	80022fc <SIGFOX_API_open+0x17c>
 80022ea:	7b20      	ldrb	r0, [r4, #12]
 80022ec:	2802      	cmp	r0, #2
 80022ee:	d105      	bne.n	80022fc <SIGFOX_API_open+0x17c>
 80022f0:	2096      	movs	r0, #150	; 0x96
 80022f2:	0080      	lsls	r0, r0, #2
 80022f4:	496b      	ldr	r1, [pc, #428]	; (80024a4 <.text_16>)
 80022f6:	6809      	ldr	r1, [r1, #0]
 80022f8:	225c      	movs	r2, #92	; 0x5c
 80022fa:	5288      	strh	r0, [r1, r2]
 80022fc:	7b20      	ldrb	r0, [r4, #12]
 80022fe:	4969      	ldr	r1, [pc, #420]	; (80024a4 <.text_16>)
 8002300:	6809      	ldr	r1, [r1, #0]
 8002302:	2268      	movs	r2, #104	; 0x68
 8002304:	5488      	strb	r0, [r1, r2]
 8002306:	68a0      	ldr	r0, [r4, #8]
 8002308:	49a1      	ldr	r1, [pc, #644]	; (8002590 <.text_22>)
 800230a:	4288      	cmp	r0, r1
 800230c:	d10a      	bne.n	8002324 <SIGFOX_API_open+0x1a4>
 800230e:	203c      	movs	r0, #60	; 0x3c
 8002310:	4964      	ldr	r1, [pc, #400]	; (80024a4 <.text_16>)
 8002312:	6809      	ldr	r1, [r1, #0]
 8002314:	225e      	movs	r2, #94	; 0x5e
 8002316:	5288      	strh	r0, [r1, r2]
 8002318:	489e      	ldr	r0, [pc, #632]	; (8002594 <.text_23>)
 800231a:	4962      	ldr	r1, [pc, #392]	; (80024a4 <.text_16>)
 800231c:	6809      	ldr	r1, [r1, #0]
 800231e:	2260      	movs	r2, #96	; 0x60
 8002320:	5288      	strh	r0, [r1, r2]
 8002322:	e029      	b.n	8002378 <SIGFOX_API_open+0x1f8>
 8002324:	68a0      	ldr	r0, [r4, #8]
 8002326:	499c      	ldr	r1, [pc, #624]	; (8002598 <.text_24>)
 8002328:	4288      	cmp	r0, r1
 800232a:	d10b      	bne.n	8002344 <SIGFOX_API_open+0x1c4>
 800232c:	2008      	movs	r0, #8
 800232e:	495d      	ldr	r1, [pc, #372]	; (80024a4 <.text_16>)
 8002330:	6809      	ldr	r1, [r1, #0]
 8002332:	225e      	movs	r2, #94	; 0x5e
 8002334:	5288      	strh	r0, [r1, r2]
 8002336:	20fa      	movs	r0, #250	; 0xfa
 8002338:	00c0      	lsls	r0, r0, #3
 800233a:	495a      	ldr	r1, [pc, #360]	; (80024a4 <.text_16>)
 800233c:	6809      	ldr	r1, [r1, #0]
 800233e:	2260      	movs	r2, #96	; 0x60
 8002340:	5288      	strh	r0, [r1, r2]
 8002342:	e019      	b.n	8002378 <SIGFOX_API_open+0x1f8>
 8002344:	68a0      	ldr	r0, [r4, #8]
 8002346:	4995      	ldr	r1, [pc, #596]	; (800259c <.text_25>)
 8002348:	4288      	cmp	r0, r1
 800234a:	d10a      	bne.n	8002362 <SIGFOX_API_open+0x1e2>
 800234c:	203c      	movs	r0, #60	; 0x3c
 800234e:	4955      	ldr	r1, [pc, #340]	; (80024a4 <.text_16>)
 8002350:	6809      	ldr	r1, [r1, #0]
 8002352:	225e      	movs	r2, #94	; 0x5e
 8002354:	5288      	strh	r0, [r1, r2]
 8002356:	486a      	ldr	r0, [pc, #424]	; (8002500 <.text_18>)
 8002358:	4952      	ldr	r1, [pc, #328]	; (80024a4 <.text_16>)
 800235a:	6809      	ldr	r1, [r1, #0]
 800235c:	2260      	movs	r2, #96	; 0x60
 800235e:	5288      	strh	r0, [r1, r2]
 8002360:	e00a      	b.n	8002378 <SIGFOX_API_open+0x1f8>
 8002362:	4850      	ldr	r0, [pc, #320]	; (80024a4 <.text_16>)
 8002364:	6800      	ldr	r0, [r0, #0]
 8002366:	f00b fa69 	bl	800d83c <MCU_API_free>
 800236a:	0005      	movs	r5, r0
 800236c:	2114      	movs	r1, #20
 800236e:	0028      	movs	r0, r5
 8002370:	b2c0      	uxtb	r0, r0
 8002372:	f000 fbb6 	bl	8002ae2 <RETURN_CODE>
 8002376:	e00f      	b.n	8002398 <SIGFOX_API_open+0x218>
 8002378:	7b60      	ldrb	r0, [r4, #13]
 800237a:	2804      	cmp	r0, #4
 800237c:	d102      	bne.n	8002384 <SIGFOX_API_open+0x204>
 800237e:	2002      	movs	r0, #2
 8002380:	4947      	ldr	r1, [pc, #284]	; (80024a0 <.text_15>)
 8002382:	7008      	strb	r0, [r1, #0]
 8002384:	7b60      	ldrb	r0, [r4, #13]
 8002386:	2801      	cmp	r0, #1
 8002388:	d002      	beq.n	8002390 <SIGFOX_API_open+0x210>
 800238a:	7b60      	ldrb	r0, [r4, #13]
 800238c:	2802      	cmp	r0, #2
 800238e:	d102      	bne.n	8002396 <SIGFOX_API_open+0x216>
 8002390:	2001      	movs	r0, #1
 8002392:	4943      	ldr	r1, [pc, #268]	; (80024a0 <.text_15>)
 8002394:	7008      	strb	r0, [r1, #0]
 8002396:	2000      	movs	r0, #0
 8002398:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800239a <SIGFOX_API_close>:
 800239a:	b538      	push	{r3, r4, r5, lr}
 800239c:	2500      	movs	r5, #0
 800239e:	2400      	movs	r4, #0
 80023a0:	483f      	ldr	r0, [pc, #252]	; (80024a0 <.text_15>)
 80023a2:	7800      	ldrb	r0, [r0, #0]
 80023a4:	2800      	cmp	r0, #0
 80023a6:	d101      	bne.n	80023ac <SIGFOX_API_close+0x12>
 80023a8:	2021      	movs	r0, #33	; 0x21
 80023aa:	e012      	b.n	80023d2 <SIGFOX_API_close+0x38>
 80023ac:	483d      	ldr	r0, [pc, #244]	; (80024a4 <.text_16>)
 80023ae:	6800      	ldr	r0, [r0, #0]
 80023b0:	f00b fa44 	bl	800d83c <MCU_API_free>
 80023b4:	0005      	movs	r5, r0
 80023b6:	b2ed      	uxtb	r5, r5
 80023b8:	2d00      	cmp	r5, #0
 80023ba:	d001      	beq.n	80023c0 <SIGFOX_API_close+0x26>
 80023bc:	2020      	movs	r0, #32
 80023be:	0004      	movs	r4, r0
 80023c0:	2000      	movs	r0, #0
 80023c2:	4937      	ldr	r1, [pc, #220]	; (80024a0 <.text_15>)
 80023c4:	7008      	strb	r0, [r1, #0]
 80023c6:	0021      	movs	r1, r4
 80023c8:	b2c9      	uxtb	r1, r1
 80023ca:	0028      	movs	r0, r5
 80023cc:	b2c0      	uxtb	r0, r0
 80023ce:	f000 fb88 	bl	8002ae2 <RETURN_CODE>
 80023d2:	bd32      	pop	{r1, r4, r5, pc}

080023d4 <SIGFOX_API_send_frame>:
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	0007      	movs	r7, r0
 80023da:	000c      	movs	r4, r1
 80023dc:	0016      	movs	r6, r2
 80023de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80023e0:	b2ed      	uxtb	r5, r5
 80023e2:	2d01      	cmp	r5, #1
 80023e4:	d103      	bne.n	80023ee <SIGFOX_API_send_frame+0x1a>
 80023e6:	2001      	movs	r0, #1
 80023e8:	4669      	mov	r1, sp
 80023ea:	7308      	strb	r0, [r1, #12]
 80023ec:	e002      	b.n	80023f4 <SIGFOX_API_send_frame+0x20>
 80023ee:	2000      	movs	r0, #0
 80023f0:	4669      	mov	r1, sp
 80023f2:	7308      	strb	r0, [r1, #12]
 80023f4:	2f00      	cmp	r7, #0
 80023f6:	d101      	bne.n	80023fc <SIGFOX_API_send_frame+0x28>
 80023f8:	2033      	movs	r0, #51	; 0x33
 80023fa:	e01e      	b.n	800243a <SIGFOX_API_send_frame+0x66>
 80023fc:	b2e4      	uxtb	r4, r4
 80023fe:	2c0d      	cmp	r4, #13
 8002400:	db01      	blt.n	8002406 <SIGFOX_API_send_frame+0x32>
 8002402:	2030      	movs	r0, #48	; 0x30
 8002404:	e019      	b.n	800243a <SIGFOX_API_send_frame+0x66>
 8002406:	2e00      	cmp	r6, #0
 8002408:	d104      	bne.n	8002414 <SIGFOX_API_send_frame+0x40>
 800240a:	b2ed      	uxtb	r5, r5
 800240c:	2d01      	cmp	r5, #1
 800240e:	d101      	bne.n	8002414 <SIGFOX_API_send_frame+0x40>
 8002410:	2031      	movs	r0, #49	; 0x31
 8002412:	e012      	b.n	800243a <SIGFOX_API_send_frame+0x66>
 8002414:	4668      	mov	r0, sp
 8002416:	7b00      	ldrb	r0, [r0, #12]
 8002418:	9002      	str	r0, [sp, #8]
 800241a:	4668      	mov	r0, sp
 800241c:	7c00      	ldrb	r0, [r0, #16]
 800241e:	9001      	str	r0, [sp, #4]
 8002420:	9600      	str	r6, [sp, #0]
 8002422:	0023      	movs	r3, r4
 8002424:	b2db      	uxtb	r3, r3
 8002426:	003a      	movs	r2, r7
 8002428:	2101      	movs	r1, #1
 800242a:	481e      	ldr	r0, [pc, #120]	; (80024a4 <.text_16>)
 800242c:	6800      	ldr	r0, [r0, #0]
 800242e:	f000 fc70 	bl	8002d12 <SIGFOX_INT_execute_communication_sequence>
 8002432:	4669      	mov	r1, sp
 8002434:	81c8      	strh	r0, [r1, #14]
 8002436:	4668      	mov	r0, sp
 8002438:	89c0      	ldrh	r0, [r0, #14]
 800243a:	b005      	add	sp, #20
 800243c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800243e <SIGFOX_API_send_bit>:
 800243e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002440:	b085      	sub	sp, #20
 8002442:	0007      	movs	r7, r0
 8002444:	000d      	movs	r5, r1
 8002446:	0016      	movs	r6, r2
 8002448:	001c      	movs	r4, r3
 800244a:	b2e4      	uxtb	r4, r4
 800244c:	2c01      	cmp	r4, #1
 800244e:	d103      	bne.n	8002458 <SIGFOX_API_send_bit+0x1a>
 8002450:	2001      	movs	r0, #1
 8002452:	4669      	mov	r1, sp
 8002454:	7308      	strb	r0, [r1, #12]
 8002456:	e002      	b.n	800245e <SIGFOX_API_send_bit+0x20>
 8002458:	2000      	movs	r0, #0
 800245a:	4669      	mov	r1, sp
 800245c:	7308      	strb	r0, [r1, #12]
 800245e:	2002      	movs	r0, #2
 8002460:	4338      	orrs	r0, r7
 8002462:	4669      	mov	r1, sp
 8002464:	7348      	strb	r0, [r1, #13]
 8002466:	2d00      	cmp	r5, #0
 8002468:	d104      	bne.n	8002474 <SIGFOX_API_send_bit+0x36>
 800246a:	b2e4      	uxtb	r4, r4
 800246c:	2c01      	cmp	r4, #1
 800246e:	d101      	bne.n	8002474 <SIGFOX_API_send_bit+0x36>
 8002470:	2034      	movs	r0, #52	; 0x34
 8002472:	e012      	b.n	800249a <SIGFOX_API_send_bit+0x5c>
 8002474:	4668      	mov	r0, sp
 8002476:	7b00      	ldrb	r0, [r0, #12]
 8002478:	9002      	str	r0, [sp, #8]
 800247a:	0030      	movs	r0, r6
 800247c:	b2c0      	uxtb	r0, r0
 800247e:	9001      	str	r0, [sp, #4]
 8002480:	9500      	str	r5, [sp, #0]
 8002482:	2300      	movs	r3, #0
 8002484:	aa03      	add	r2, sp, #12
 8002486:	1c52      	adds	r2, r2, #1
 8002488:	2100      	movs	r1, #0
 800248a:	4806      	ldr	r0, [pc, #24]	; (80024a4 <.text_16>)
 800248c:	6800      	ldr	r0, [r0, #0]
 800248e:	f000 fc40 	bl	8002d12 <SIGFOX_INT_execute_communication_sequence>
 8002492:	4669      	mov	r1, sp
 8002494:	81c8      	strh	r0, [r1, #14]
 8002496:	4668      	mov	r0, sp
 8002498:	89c0      	ldrh	r0, [r0, #14]
 800249a:	b005      	add	sp, #20
 800249c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080024a0 <.text_15>:
 80024a0:	200002d0 	.word	0x200002d0

080024a4 <.text_16>:
 80024a4:	200002d8 	.word	0x200002d8

080024a8 <SIGFOX_API_send_outofband>:
 80024a8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80024aa:	0006      	movs	r6, r0
 80024ac:	2505      	movs	r5, #5
 80024ae:	2400      	movs	r4, #0
 80024b0:	b2f6      	uxtb	r6, r6
 80024b2:	2e02      	cmp	r6, #2
 80024b4:	db01      	blt.n	80024ba <SIGFOX_API_send_outofband+0x12>
 80024b6:	2035      	movs	r0, #53	; 0x35
 80024b8:	e020      	b.n	80024fc <SIGFOX_API_send_outofband+0x54>
 80024ba:	b2f6      	uxtb	r6, r6
 80024bc:	2e00      	cmp	r6, #0
 80024be:	d104      	bne.n	80024ca <SIGFOX_API_send_outofband+0x22>
 80024c0:	2003      	movs	r0, #3
 80024c2:	0005      	movs	r5, r0
 80024c4:	2007      	movs	r0, #7
 80024c6:	0004      	movs	r4, r0
 80024c8:	e006      	b.n	80024d8 <SIGFOX_API_send_outofband+0x30>
 80024ca:	b2f6      	uxtb	r6, r6
 80024cc:	2e01      	cmp	r6, #1
 80024ce:	d103      	bne.n	80024d8 <SIGFOX_API_send_outofband+0x30>
 80024d0:	2004      	movs	r0, #4
 80024d2:	0005      	movs	r5, r0
 80024d4:	2005      	movs	r0, #5
 80024d6:	0004      	movs	r4, r0
 80024d8:	2000      	movs	r0, #0
 80024da:	9002      	str	r0, [sp, #8]
 80024dc:	2002      	movs	r0, #2
 80024de:	9001      	str	r0, [sp, #4]
 80024e0:	2000      	movs	r0, #0
 80024e2:	9000      	str	r0, [sp, #0]
 80024e4:	0023      	movs	r3, r4
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2200      	movs	r2, #0
 80024ea:	0029      	movs	r1, r5
 80024ec:	b2c9      	uxtb	r1, r1
 80024ee:	4889      	ldr	r0, [pc, #548]	; (8002714 <.text_29>)
 80024f0:	6800      	ldr	r0, [r0, #0]
 80024f2:	f000 fc0e 	bl	8002d12 <SIGFOX_INT_execute_communication_sequence>
 80024f6:	0007      	movs	r7, r0
 80024f8:	0038      	movs	r0, r7
 80024fa:	b280      	uxth	r0, r0
 80024fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08002500 <.text_18>:
 8002500:	00001388 	.word	0x00001388

08002504 <.text_19>:
 8002504:	000493e0 	.word	0x000493e0

08002508 <.text_20>:
 8002508:	000001ff 	.word	0x000001ff

0800250c <SIGFOX_API_get_version>:
 800250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250e:	0006      	movs	r6, r0
 8002510:	000c      	movs	r4, r1
 8002512:	0017      	movs	r7, r2
 8002514:	2500      	movs	r5, #0
 8002516:	b2ff      	uxtb	r7, r7
 8002518:	0038      	movs	r0, r7
 800251a:	2800      	cmp	r0, #0
 800251c:	d008      	beq.n	8002530 <SIGFOX_API_get_version+0x24>
 800251e:	2801      	cmp	r0, #1
 8002520:	d00d      	beq.n	800253e <SIGFOX_API_get_version+0x32>
 8002522:	2802      	cmp	r0, #2
 8002524:	d011      	beq.n	800254a <SIGFOX_API_get_version+0x3e>
 8002526:	2803      	cmp	r0, #3
 8002528:	d015      	beq.n	8002556 <SIGFOX_API_get_version+0x4a>
 800252a:	2805      	cmp	r0, #5
 800252c:	d019      	beq.n	8002562 <SIGFOX_API_get_version+0x56>
 800252e:	e01e      	b.n	800256e <SIGFOX_API_get_version+0x62>
 8002530:	48b3      	ldr	r0, [pc, #716]	; (8002800 <.text_31>)
 8002532:	6030      	str	r0, [r6, #0]
 8002534:	2c00      	cmp	r4, #0
 8002536:	d001      	beq.n	800253c <SIGFOX_API_get_version+0x30>
 8002538:	2013      	movs	r0, #19
 800253a:	7020      	strb	r0, [r4, #0]
 800253c:	e01d      	b.n	800257a <SIGFOX_API_get_version+0x6e>
 800253e:	0021      	movs	r1, r4
 8002540:	0030      	movs	r0, r6
 8002542:	f00b fab7 	bl	800dab4 <MCU_API_get_version>
 8002546:	0005      	movs	r5, r0
 8002548:	e017      	b.n	800257a <SIGFOX_API_get_version+0x6e>
 800254a:	0021      	movs	r1, r4
 800254c:	0030      	movs	r0, r6
 800254e:	f00b fe7b 	bl	800e248 <RF_API_get_version>
 8002552:	0005      	movs	r5, r0
 8002554:	e011      	b.n	800257a <SIGFOX_API_get_version+0x6e>
 8002556:	0021      	movs	r1, r4
 8002558:	0030      	movs	r0, r6
 800255a:	f002 fc5f 	bl	8004e1c <SE_API_get_version>
 800255e:	0005      	movs	r5, r0
 8002560:	e00b      	b.n	800257a <SIGFOX_API_get_version+0x6e>
 8002562:	0021      	movs	r1, r4
 8002564:	0030      	movs	r0, r6
 8002566:	f002 fef3 	bl	8005350 <MONARCH_API_get_version>
 800256a:	0005      	movs	r5, r0
 800256c:	e005      	b.n	800257a <SIGFOX_API_get_version+0x6e>
 800256e:	215d      	movs	r1, #93	; 0x5d
 8002570:	0028      	movs	r0, r5
 8002572:	b2c0      	uxtb	r0, r0
 8002574:	f000 fab5 	bl	8002ae2 <RETURN_CODE>
 8002578:	e009      	b.n	800258e <SIGFOX_API_get_version+0x82>
 800257a:	b2ed      	uxtb	r5, r5
 800257c:	2d00      	cmp	r5, #0
 800257e:	d005      	beq.n	800258c <SIGFOX_API_get_version+0x80>
 8002580:	215c      	movs	r1, #92	; 0x5c
 8002582:	0028      	movs	r0, r5
 8002584:	b2c0      	uxtb	r0, r0
 8002586:	f000 faac 	bl	8002ae2 <RETURN_CODE>
 800258a:	e000      	b.n	800258e <SIGFOX_API_get_version+0x82>
 800258c:	2000      	movs	r0, #0
 800258e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002590 <.text_22>:
 8002590:	0002ee00 	.word	0x0002ee00

08002594 <.text_23>:
 8002594:	00005208 	.word	0x00005208

08002598 <.text_24>:
 8002598:	000030d4 	.word	0x000030d4

0800259c <.text_25>:
 800259c:	00008ca0 	.word	0x00008ca0

080025a0 <SIGFOX_API_set_std_config>:
 80025a0:	b538      	push	{r3, r4, r5, lr}
 80025a2:	0005      	movs	r5, r0
 80025a4:	000c      	movs	r4, r1
 80025a6:	4897      	ldr	r0, [pc, #604]	; (8002804 <.text_32>)
 80025a8:	7800      	ldrb	r0, [r0, #0]
 80025aa:	2801      	cmp	r0, #1
 80025ac:	d14c      	bne.n	8002648 <SIGFOX_API_set_std_config+0xa8>
 80025ae:	6828      	ldr	r0, [r5, #0]
 80025b0:	4958      	ldr	r1, [pc, #352]	; (8002714 <.text_29>)
 80025b2:	6809      	ldr	r1, [r1, #0]
 80025b4:	6088      	str	r0, [r1, #8]
 80025b6:	6868      	ldr	r0, [r5, #4]
 80025b8:	4956      	ldr	r1, [pc, #344]	; (8002714 <.text_29>)
 80025ba:	6809      	ldr	r1, [r1, #0]
 80025bc:	60c8      	str	r0, [r1, #12]
 80025be:	68a8      	ldr	r0, [r5, #8]
 80025c0:	4954      	ldr	r1, [pc, #336]	; (8002714 <.text_29>)
 80025c2:	6809      	ldr	r1, [r1, #0]
 80025c4:	6108      	str	r0, [r1, #16]
 80025c6:	4853      	ldr	r0, [pc, #332]	; (8002714 <.text_29>)
 80025c8:	6800      	ldr	r0, [r0, #0]
 80025ca:	6900      	ldr	r0, [r0, #16]
 80025cc:	05c0      	lsls	r0, r0, #23
 80025ce:	d50e      	bpl.n	80025ee <SIGFOX_API_set_std_config+0x4e>
 80025d0:	4850      	ldr	r0, [pc, #320]	; (8002714 <.text_29>)
 80025d2:	6800      	ldr	r0, [r0, #0]
 80025d4:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80025d6:	498c      	ldr	r1, [pc, #560]	; (8002808 <.text_33>)
 80025d8:	4288      	cmp	r0, r1
 80025da:	d108      	bne.n	80025ee <SIGFOX_API_set_std_config+0x4e>
 80025dc:	48b9      	ldr	r0, [pc, #740]	; (80028c4 <.text_36>)
 80025de:	494d      	ldr	r1, [pc, #308]	; (8002714 <.text_29>)
 80025e0:	6809      	ldr	r1, [r1, #0]
 80025e2:	6588      	str	r0, [r1, #88]	; 0x58
 80025e4:	48b8      	ldr	r0, [pc, #736]	; (80028c8 <.text_37>)
 80025e6:	494b      	ldr	r1, [pc, #300]	; (8002714 <.text_29>)
 80025e8:	6809      	ldr	r1, [r1, #0]
 80025ea:	2260      	movs	r2, #96	; 0x60
 80025ec:	5288      	strh	r0, [r1, r2]
 80025ee:	4849      	ldr	r0, [pc, #292]	; (8002714 <.text_29>)
 80025f0:	6800      	ldr	r0, [r0, #0]
 80025f2:	2156      	movs	r1, #86	; 0x56
 80025f4:	5c40      	ldrb	r0, [r0, r1]
 80025f6:	2801      	cmp	r0, #1
 80025f8:	d111      	bne.n	800261e <SIGFOX_API_set_std_config+0x7e>
 80025fa:	4846      	ldr	r0, [pc, #280]	; (8002714 <.text_29>)
 80025fc:	6800      	ldr	r0, [r0, #0]
 80025fe:	f000 f9eb 	bl	80029d8 <SIGFOX_INT_get_max_micro_channel>
 8002602:	4944      	ldr	r1, [pc, #272]	; (8002714 <.text_29>)
 8002604:	6809      	ldr	r1, [r1, #0]
 8002606:	86c8      	strh	r0, [r1, #54]	; 0x36
 8002608:	4842      	ldr	r0, [pc, #264]	; (8002714 <.text_29>)
 800260a:	6800      	ldr	r0, [r0, #0]
 800260c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
 800260e:	2800      	cmp	r0, #0
 8002610:	d101      	bne.n	8002616 <SIGFOX_API_set_std_config+0x76>
 8002612:	2041      	movs	r0, #65	; 0x41
 8002614:	e019      	b.n	800264a <SIGFOX_API_set_std_config+0xaa>
 8002616:	483f      	ldr	r0, [pc, #252]	; (8002714 <.text_29>)
 8002618:	6800      	ldr	r0, [r0, #0]
 800261a:	2132      	movs	r1, #50	; 0x32
 800261c:	5444      	strb	r4, [r0, r1]
 800261e:	483d      	ldr	r0, [pc, #244]	; (8002714 <.text_29>)
 8002620:	6800      	ldr	r0, [r0, #0]
 8002622:	2156      	movs	r1, #86	; 0x56
 8002624:	5c40      	ldrb	r0, [r0, r1]
 8002626:	2802      	cmp	r0, #2
 8002628:	d10b      	bne.n	8002642 <SIGFOX_API_set_std_config+0xa2>
 800262a:	483a      	ldr	r0, [pc, #232]	; (8002714 <.text_29>)
 800262c:	6800      	ldr	r0, [r0, #0]
 800262e:	6880      	ldr	r0, [r0, #8]
 8002630:	2800      	cmp	r0, #0
 8002632:	d004      	beq.n	800263e <SIGFOX_API_set_std_config+0x9e>
 8002634:	4837      	ldr	r0, [pc, #220]	; (8002714 <.text_29>)
 8002636:	6800      	ldr	r0, [r0, #0]
 8002638:	68c0      	ldr	r0, [r0, #12]
 800263a:	2806      	cmp	r0, #6
 800263c:	d201      	bcs.n	8002642 <SIGFOX_API_set_std_config+0xa2>
 800263e:	2040      	movs	r0, #64	; 0x40
 8002640:	e003      	b.n	800264a <SIGFOX_API_set_std_config+0xaa>
 8002642:	2002      	movs	r0, #2
 8002644:	496f      	ldr	r1, [pc, #444]	; (8002804 <.text_32>)
 8002646:	7008      	strb	r0, [r1, #0]
 8002648:	2000      	movs	r0, #0
 800264a:	bd32      	pop	{r1, r4, r5, pc}

0800264c <SIGFOX_API_start_continuous_transmission>:
 800264c:	b570      	push	{r4, r5, r6, lr}
 800264e:	0006      	movs	r6, r0
 8002650:	000c      	movs	r4, r1
 8002652:	486c      	ldr	r0, [pc, #432]	; (8002804 <.text_32>)
 8002654:	7800      	ldrb	r0, [r0, #0]
 8002656:	2800      	cmp	r0, #0
 8002658:	d001      	beq.n	800265e <SIGFOX_API_start_continuous_transmission+0x12>
 800265a:	2058      	movs	r0, #88	; 0x58
 800265c:	e02f      	b.n	80026be <SIGFOX_API_start_continuous_transmission+0x72>
 800265e:	2000      	movs	r0, #0
 8002660:	f00b fc08 	bl	800de74 <RF_API_init>
 8002664:	0005      	movs	r5, r0
 8002666:	b2ed      	uxtb	r5, r5
 8002668:	2d00      	cmp	r5, #0
 800266a:	d005      	beq.n	8002678 <SIGFOX_API_start_continuous_transmission+0x2c>
 800266c:	2157      	movs	r1, #87	; 0x57
 800266e:	0028      	movs	r0, r5
 8002670:	b2c0      	uxtb	r0, r0
 8002672:	f000 fa36 	bl	8002ae2 <RETURN_CODE>
 8002676:	e022      	b.n	80026be <SIGFOX_API_start_continuous_transmission+0x72>
 8002678:	0030      	movs	r0, r6
 800267a:	f00b fd61 	bl	800e140 <RF_API_change_frequency>
 800267e:	0005      	movs	r5, r0
 8002680:	b2ed      	uxtb	r5, r5
 8002682:	2d00      	cmp	r5, #0
 8002684:	d007      	beq.n	8002696 <SIGFOX_API_start_continuous_transmission+0x4a>
 8002686:	f00b fc9d 	bl	800dfc4 <RF_API_stop>
 800268a:	2157      	movs	r1, #87	; 0x57
 800268c:	0028      	movs	r0, r5
 800268e:	b2c0      	uxtb	r0, r0
 8002690:	f000 fa27 	bl	8002ae2 <RETURN_CODE>
 8002694:	e013      	b.n	80026be <SIGFOX_API_start_continuous_transmission+0x72>
 8002696:	0020      	movs	r0, r4
 8002698:	b2c0      	uxtb	r0, r0
 800269a:	f00b fcf9 	bl	800e090 <RF_API_start_continuous_transmission>
 800269e:	0005      	movs	r5, r0
 80026a0:	b2ed      	uxtb	r5, r5
 80026a2:	2d00      	cmp	r5, #0
 80026a4:	d007      	beq.n	80026b6 <SIGFOX_API_start_continuous_transmission+0x6a>
 80026a6:	f00b fc8d 	bl	800dfc4 <RF_API_stop>
 80026aa:	2157      	movs	r1, #87	; 0x57
 80026ac:	0028      	movs	r0, r5
 80026ae:	b2c0      	uxtb	r0, r0
 80026b0:	f000 fa17 	bl	8002ae2 <RETURN_CODE>
 80026b4:	e003      	b.n	80026be <SIGFOX_API_start_continuous_transmission+0x72>
 80026b6:	2003      	movs	r0, #3
 80026b8:	4952      	ldr	r1, [pc, #328]	; (8002804 <.text_32>)
 80026ba:	7008      	strb	r0, [r1, #0]
 80026bc:	2000      	movs	r0, #0
 80026be:	bd70      	pop	{r4, r5, r6, pc}

080026c0 <SIGFOX_API_stop_continuous_transmission>:
 80026c0:	b510      	push	{r4, lr}
 80026c2:	4850      	ldr	r0, [pc, #320]	; (8002804 <.text_32>)
 80026c4:	7800      	ldrb	r0, [r0, #0]
 80026c6:	2803      	cmp	r0, #3
 80026c8:	d001      	beq.n	80026ce <SIGFOX_API_stop_continuous_transmission+0xe>
 80026ca:	205a      	movs	r0, #90	; 0x5a
 80026cc:	e021      	b.n	8002712 <SIGFOX_API_stop_continuous_transmission+0x52>
 80026ce:	f00b fd27 	bl	800e120 <RF_API_stop_continuous_transmission>
 80026d2:	0004      	movs	r4, r0
 80026d4:	b2e4      	uxtb	r4, r4
 80026d6:	2c00      	cmp	r4, #0
 80026d8:	d008      	beq.n	80026ec <SIGFOX_API_stop_continuous_transmission+0x2c>
 80026da:	2000      	movs	r0, #0
 80026dc:	4949      	ldr	r1, [pc, #292]	; (8002804 <.text_32>)
 80026de:	7008      	strb	r0, [r1, #0]
 80026e0:	2159      	movs	r1, #89	; 0x59
 80026e2:	0020      	movs	r0, r4
 80026e4:	b2c0      	uxtb	r0, r0
 80026e6:	f000 f9fc 	bl	8002ae2 <RETURN_CODE>
 80026ea:	e012      	b.n	8002712 <SIGFOX_API_stop_continuous_transmission+0x52>
 80026ec:	f00b fc6a 	bl	800dfc4 <RF_API_stop>
 80026f0:	0004      	movs	r4, r0
 80026f2:	b2e4      	uxtb	r4, r4
 80026f4:	2c00      	cmp	r4, #0
 80026f6:	d008      	beq.n	800270a <SIGFOX_API_stop_continuous_transmission+0x4a>
 80026f8:	2000      	movs	r0, #0
 80026fa:	4942      	ldr	r1, [pc, #264]	; (8002804 <.text_32>)
 80026fc:	7008      	strb	r0, [r1, #0]
 80026fe:	2159      	movs	r1, #89	; 0x59
 8002700:	0020      	movs	r0, r4
 8002702:	b2c0      	uxtb	r0, r0
 8002704:	f000 f9ed 	bl	8002ae2 <RETURN_CODE>
 8002708:	e003      	b.n	8002712 <SIGFOX_API_stop_continuous_transmission+0x52>
 800270a:	2000      	movs	r0, #0
 800270c:	493d      	ldr	r1, [pc, #244]	; (8002804 <.text_32>)
 800270e:	7008      	strb	r0, [r1, #0]
 8002710:	2000      	movs	r0, #0
 8002712:	bd10      	pop	{r4, pc}

08002714 <.text_29>:
 8002714:	200002d8 	.word	0x200002d8

08002718 <SIGFOX_API_send_test_frame>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	0006      	movs	r6, r0
 800271e:	000f      	movs	r7, r1
 8002720:	0015      	movs	r5, r2
 8002722:	2400      	movs	r4, #0
 8002724:	a803      	add	r0, sp, #12
 8002726:	499d      	ldr	r1, [pc, #628]	; (800299c <.text_42>)
 8002728:	680a      	ldr	r2, [r1, #0]
 800272a:	6002      	str	r2, [r0, #0]
 800272c:	2f00      	cmp	r7, #0
 800272e:	d101      	bne.n	8002734 <SIGFOX_API_send_test_frame+0x1c>
 8002730:	2053      	movs	r0, #83	; 0x53
 8002732:	e062      	b.n	80027fa <SIGFOX_API_send_test_frame+0xe2>
 8002734:	b2ed      	uxtb	r5, r5
 8002736:	2d0d      	cmp	r5, #13
 8002738:	db01      	blt.n	800273e <SIGFOX_API_send_test_frame+0x26>
 800273a:	2052      	movs	r0, #82	; 0x52
 800273c:	e05d      	b.n	80027fa <SIGFOX_API_send_test_frame+0xe2>
 800273e:	4831      	ldr	r0, [pc, #196]	; (8002804 <.text_32>)
 8002740:	7800      	ldrb	r0, [r0, #0]
 8002742:	2802      	cmp	r0, #2
 8002744:	d001      	beq.n	800274a <SIGFOX_API_send_test_frame+0x32>
 8002746:	2051      	movs	r0, #81	; 0x51
 8002748:	e057      	b.n	80027fa <SIGFOX_API_send_test_frame+0xe2>
 800274a:	2003      	movs	r0, #3
 800274c:	492d      	ldr	r1, [pc, #180]	; (8002804 <.text_32>)
 800274e:	7008      	strb	r0, [r1, #0]
 8002750:	2000      	movs	r0, #0
 8002752:	0004      	movs	r4, r0
 8002754:	b2e4      	uxtb	r4, r4
 8002756:	2c04      	cmp	r4, #4
 8002758:	da0e      	bge.n	8002778 <SIGFOX_API_send_test_frame+0x60>
 800275a:	482c      	ldr	r0, [pc, #176]	; (800280c <.text_34>)
 800275c:	6800      	ldr	r0, [r0, #0]
 800275e:	b2e4      	uxtb	r4, r4
 8002760:	1900      	adds	r0, r0, r4
 8002762:	2164      	movs	r1, #100	; 0x64
 8002764:	5c40      	ldrb	r0, [r0, r1]
 8002766:	a903      	add	r1, sp, #12
 8002768:	b2e4      	uxtb	r4, r4
 800276a:	5d09      	ldrb	r1, [r1, r4]
 800276c:	4288      	cmp	r0, r1
 800276e:	d001      	beq.n	8002774 <SIGFOX_API_send_test_frame+0x5c>
 8002770:	2050      	movs	r0, #80	; 0x50
 8002772:	e042      	b.n	80027fa <SIGFOX_API_send_test_frame+0xe2>
 8002774:	1c64      	adds	r4, r4, #1
 8002776:	e7ed      	b.n	8002754 <SIGFOX_API_send_test_frame+0x3c>
 8002778:	4668      	mov	r0, sp
 800277a:	7c00      	ldrb	r0, [r0, #16]
 800277c:	9001      	str	r0, [sp, #4]
 800277e:	2000      	movs	r0, #0
 8002780:	9000      	str	r0, [sp, #0]
 8002782:	002b      	movs	r3, r5
 8002784:	b2db      	uxtb	r3, r3
 8002786:	003a      	movs	r2, r7
 8002788:	2101      	movs	r1, #1
 800278a:	4820      	ldr	r0, [pc, #128]	; (800280c <.text_34>)
 800278c:	6800      	ldr	r0, [r0, #0]
 800278e:	f000 fbd9 	bl	8002f44 <SIGFOX_INT_prepare_transmission>
 8002792:	4669      	mov	r1, sp
 8002794:	8148      	strh	r0, [r1, #10]
 8002796:	4668      	mov	r0, sp
 8002798:	8940      	ldrh	r0, [r0, #10]
 800279a:	2800      	cmp	r0, #0
 800279c:	d002      	beq.n	80027a4 <SIGFOX_API_send_test_frame+0x8c>
 800279e:	4668      	mov	r0, sp
 80027a0:	8940      	ldrh	r0, [r0, #10]
 80027a2:	e02a      	b.n	80027fa <SIGFOX_API_send_test_frame+0xe2>
 80027a4:	4819      	ldr	r0, [pc, #100]	; (800280c <.text_34>)
 80027a6:	6800      	ldr	r0, [r0, #0]
 80027a8:	f000 fa91 	bl	8002cce <SIGFOX_INT_store_nvm>
 80027ac:	4669      	mov	r1, sp
 80027ae:	7208      	strb	r0, [r1, #8]
 80027b0:	4668      	mov	r0, sp
 80027b2:	7a00      	ldrb	r0, [r0, #8]
 80027b4:	2800      	cmp	r0, #0
 80027b6:	d005      	beq.n	80027c4 <SIGFOX_API_send_test_frame+0xac>
 80027b8:	2154      	movs	r1, #84	; 0x54
 80027ba:	4668      	mov	r0, sp
 80027bc:	7a00      	ldrb	r0, [r0, #8]
 80027be:	f000 f990 	bl	8002ae2 <RETURN_CODE>
 80027c2:	e01a      	b.n	80027fa <SIGFOX_API_send_test_frame+0xe2>
 80027c4:	2e00      	cmp	r6, #0
 80027c6:	d105      	bne.n	80027d4 <SIGFOX_API_send_test_frame+0xbc>
 80027c8:	2100      	movs	r1, #0
 80027ca:	4810      	ldr	r0, [pc, #64]	; (800280c <.text_34>)
 80027cc:	6800      	ldr	r0, [r0, #0]
 80027ce:	f001 f913 	bl	80039f8 <SIGFOX_INT_compute_uplink_frequency>
 80027d2:	0006      	movs	r6, r0
 80027d4:	0032      	movs	r2, r6
 80027d6:	2100      	movs	r1, #0
 80027d8:	480c      	ldr	r0, [pc, #48]	; (800280c <.text_34>)
 80027da:	6800      	ldr	r0, [r0, #0]
 80027dc:	f000 fd38 	bl	8003250 <SIGFOX_INT_send_single_frame>
 80027e0:	4669      	mov	r1, sp
 80027e2:	8148      	strh	r0, [r1, #10]
 80027e4:	4668      	mov	r0, sp
 80027e6:	8940      	ldrh	r0, [r0, #10]
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d002      	beq.n	80027f2 <SIGFOX_API_send_test_frame+0xda>
 80027ec:	4668      	mov	r0, sp
 80027ee:	8940      	ldrh	r0, [r0, #10]
 80027f0:	e003      	b.n	80027fa <SIGFOX_API_send_test_frame+0xe2>
 80027f2:	2002      	movs	r0, #2
 80027f4:	4903      	ldr	r1, [pc, #12]	; (8002804 <.text_32>)
 80027f6:	7008      	strb	r0, [r1, #0]
 80027f8:	2000      	movs	r0, #0
 80027fa:	b005      	add	sp, #20
 80027fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002800 <.text_31>:
 8002800:	08024c44 	.word	0x08024c44

08002804 <.text_32>:
 8002804:	200002d0 	.word	0x200002d0

08002808 <.text_33>:
 8002808:	00008ca0 	.word	0x00008ca0

0800280c <.text_34>:
 800280c:	200002d8 	.word	0x200002d8

08002810 <SIGFOX_API_receive_test_frame>:
 8002810:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	0005      	movs	r5, r0
 8002816:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002818:	2400      	movs	r4, #0
 800281a:	4668      	mov	r0, sp
 800281c:	4960      	ldr	r1, [pc, #384]	; (80029a0 <.text_43>)
 800281e:	680a      	ldr	r2, [r1, #0]
 8002820:	6002      	str	r2, [r0, #0]
 8002822:	4860      	ldr	r0, [pc, #384]	; (80029a4 <.text_44>)
 8002824:	7800      	ldrb	r0, [r0, #0]
 8002826:	2802      	cmp	r0, #2
 8002828:	d001      	beq.n	800282e <SIGFOX_API_receive_test_frame+0x1e>
 800282a:	2056      	movs	r0, #86	; 0x56
 800282c:	e048      	b.n	80028c0 <SIGFOX_API_receive_test_frame+0xb0>
 800282e:	2004      	movs	r0, #4
 8002830:	495c      	ldr	r1, [pc, #368]	; (80029a4 <.text_44>)
 8002832:	7008      	strb	r0, [r1, #0]
 8002834:	2000      	movs	r0, #0
 8002836:	0004      	movs	r4, r0
 8002838:	b2e4      	uxtb	r4, r4
 800283a:	2c04      	cmp	r4, #4
 800283c:	da0e      	bge.n	800285c <SIGFOX_API_receive_test_frame+0x4c>
 800283e:	485a      	ldr	r0, [pc, #360]	; (80029a8 <.text_45>)
 8002840:	6800      	ldr	r0, [r0, #0]
 8002842:	b2e4      	uxtb	r4, r4
 8002844:	1900      	adds	r0, r0, r4
 8002846:	2164      	movs	r1, #100	; 0x64
 8002848:	5c40      	ldrb	r0, [r0, r1]
 800284a:	4669      	mov	r1, sp
 800284c:	b2e4      	uxtb	r4, r4
 800284e:	5d09      	ldrb	r1, [r1, r4]
 8002850:	4288      	cmp	r0, r1
 8002852:	d001      	beq.n	8002858 <SIGFOX_API_receive_test_frame+0x48>
 8002854:	2055      	movs	r0, #85	; 0x55
 8002856:	e033      	b.n	80028c0 <SIGFOX_API_receive_test_frame+0xb0>
 8002858:	1c64      	adds	r4, r4, #1
 800285a:	e7ed      	b.n	8002838 <SIGFOX_API_receive_test_frame+0x28>
 800285c:	2d00      	cmp	r5, #0
 800285e:	d104      	bne.n	800286a <SIGFOX_API_receive_test_frame+0x5a>
 8002860:	4851      	ldr	r0, [pc, #324]	; (80029a8 <.text_45>)
 8002862:	6800      	ldr	r0, [r0, #0]
 8002864:	f001 f926 	bl	8003ab4 <SIGFOX_INT_compute_downlink_frequency>
 8002868:	0005      	movs	r5, r0
 800286a:	002a      	movs	r2, r5
 800286c:	4668      	mov	r0, sp
 800286e:	7c01      	ldrb	r1, [r0, #16]
 8002870:	4668      	mov	r0, sp
 8002872:	7a00      	ldrb	r0, [r0, #8]
 8002874:	f000 ffa4 	bl	80037c0 <SIGFOX_INT_downlink_configuration>
 8002878:	0006      	movs	r6, r0
 800287a:	b2b6      	uxth	r6, r6
 800287c:	2e00      	cmp	r6, #0
 800287e:	d002      	beq.n	8002886 <SIGFOX_API_receive_test_frame+0x76>
 8002880:	0030      	movs	r0, r6
 8002882:	b280      	uxth	r0, r0
 8002884:	e01c      	b.n	80028c0 <SIGFOX_API_receive_test_frame+0xb0>
 8002886:	9a03      	ldr	r2, [sp, #12]
 8002888:	4668      	mov	r0, sp
 800288a:	7a01      	ldrb	r1, [r0, #8]
 800288c:	4846      	ldr	r0, [pc, #280]	; (80029a8 <.text_45>)
 800288e:	6800      	ldr	r0, [r0, #0]
 8002890:	f000 ffda 	bl	8003848 <SIGFOX_INT_get_received_frames>
 8002894:	0006      	movs	r6, r0
 8002896:	b2b6      	uxth	r6, r6
 8002898:	2e9b      	cmp	r6, #155	; 0x9b
 800289a:	d102      	bne.n	80028a2 <SIGFOX_API_receive_test_frame+0x92>
 800289c:	2002      	movs	r0, #2
 800289e:	4941      	ldr	r1, [pc, #260]	; (80029a4 <.text_44>)
 80028a0:	7008      	strb	r0, [r1, #0]
 80028a2:	b2b6      	uxth	r6, r6
 80028a4:	2e00      	cmp	r6, #0
 80028a6:	d002      	beq.n	80028ae <SIGFOX_API_receive_test_frame+0x9e>
 80028a8:	0030      	movs	r0, r6
 80028aa:	b280      	uxth	r0, r0
 80028ac:	e008      	b.n	80028c0 <SIGFOX_API_receive_test_frame+0xb0>
 80028ae:	483e      	ldr	r0, [pc, #248]	; (80029a8 <.text_45>)
 80028b0:	6800      	ldr	r0, [r0, #0]
 80028b2:	2162      	movs	r1, #98	; 0x62
 80028b4:	5a40      	ldrh	r0, [r0, r1]
 80028b6:	8038      	strh	r0, [r7, #0]
 80028b8:	2002      	movs	r0, #2
 80028ba:	493a      	ldr	r1, [pc, #232]	; (80029a4 <.text_44>)
 80028bc:	7008      	strb	r0, [r1, #0]
 80028be:	2000      	movs	r0, #0
 80028c0:	b005      	add	sp, #20
 80028c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028c4 <.text_36>:
 80028c4:	0002ee00 	.word	0x0002ee00

080028c8 <.text_37>:
 80028c8:	00005208 	.word	0x00005208

080028cc <SIGFOX_API_get_info>:
 80028cc:	b500      	push	{lr}
 80028ce:	0001      	movs	r1, r0
 80028d0:	7808      	ldrb	r0, [r1, #0]
 80028d2:	2800      	cmp	r0, #0
 80028d4:	d010      	beq.n	80028f8 <SIGFOX_API_get_info+0x2c>
 80028d6:	2802      	cmp	r0, #2
 80028d8:	d00a      	beq.n	80028f0 <SIGFOX_API_get_info+0x24>
 80028da:	d305      	bcc.n	80028e8 <SIGFOX_API_get_info+0x1c>
 80028dc:	2803      	cmp	r0, #3
 80028de:	d10f      	bne.n	8002900 <SIGFOX_API_get_info+0x34>
 80028e0:	4832      	ldr	r0, [pc, #200]	; (80029ac <.text_46>)
 80028e2:	7800      	ldrb	r0, [r0, #0]
 80028e4:	7008      	strb	r0, [r1, #0]
 80028e6:	e00d      	b.n	8002904 <SIGFOX_API_get_info+0x38>
 80028e8:	4831      	ldr	r0, [pc, #196]	; (80029b0 <.text_47>)
 80028ea:	7800      	ldrb	r0, [r0, #0]
 80028ec:	7008      	strb	r0, [r1, #0]
 80028ee:	e009      	b.n	8002904 <SIGFOX_API_get_info+0x38>
 80028f0:	4830      	ldr	r0, [pc, #192]	; (80029b4 <.text_48>)
 80028f2:	7800      	ldrb	r0, [r0, #0]
 80028f4:	7008      	strb	r0, [r1, #0]
 80028f6:	e005      	b.n	8002904 <SIGFOX_API_get_info+0x38>
 80028f8:	482f      	ldr	r0, [pc, #188]	; (80029b8 <.text_49>)
 80028fa:	7800      	ldrb	r0, [r0, #0]
 80028fc:	7008      	strb	r0, [r1, #0]
 80028fe:	e001      	b.n	8002904 <SIGFOX_API_get_info+0x38>
 8002900:	205f      	movs	r0, #95	; 0x5f
 8002902:	e000      	b.n	8002906 <SIGFOX_API_get_info+0x3a>
 8002904:	2000      	movs	r0, #0
 8002906:	bd00      	pop	{pc}

08002908 <SIGFOX_API_get_device_id>:
 8002908:	b580      	push	{r7, lr}
 800290a:	f001 f8d5 	bl	8003ab8 <SIGFOX_INT_get_device_id>
 800290e:	bd02      	pop	{r1, pc}

08002910 <SIGFOX_API_get_initial_pac>:
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	0004      	movs	r4, r0
 8002914:	f002 fa99 	bl	8004e4a <SE_API_open>
 8002918:	0005      	movs	r5, r0
 800291a:	b2ed      	uxtb	r5, r5
 800291c:	2d00      	cmp	r5, #0
 800291e:	d005      	beq.n	800292c <SIGFOX_API_get_initial_pac+0x1c>
 8002920:	215b      	movs	r1, #91	; 0x5b
 8002922:	0028      	movs	r0, r5
 8002924:	b2c0      	uxtb	r0, r0
 8002926:	f000 f8dc 	bl	8002ae2 <RETURN_CODE>
 800292a:	e01b      	b.n	8002964 <SIGFOX_API_get_initial_pac+0x54>
 800292c:	0020      	movs	r0, r4
 800292e:	f002 fa95 	bl	8004e5c <SE_API_get_initial_pac>
 8002932:	0005      	movs	r5, r0
 8002934:	b2ed      	uxtb	r5, r5
 8002936:	2d00      	cmp	r5, #0
 8002938:	d007      	beq.n	800294a <SIGFOX_API_get_initial_pac+0x3a>
 800293a:	f002 fa88 	bl	8004e4e <SE_API_close>
 800293e:	215b      	movs	r1, #91	; 0x5b
 8002940:	0028      	movs	r0, r5
 8002942:	b2c0      	uxtb	r0, r0
 8002944:	f000 f8cd 	bl	8002ae2 <RETURN_CODE>
 8002948:	e00c      	b.n	8002964 <SIGFOX_API_get_initial_pac+0x54>
 800294a:	f002 fa80 	bl	8004e4e <SE_API_close>
 800294e:	0005      	movs	r5, r0
 8002950:	b2ed      	uxtb	r5, r5
 8002952:	2d00      	cmp	r5, #0
 8002954:	d005      	beq.n	8002962 <SIGFOX_API_get_initial_pac+0x52>
 8002956:	215b      	movs	r1, #91	; 0x5b
 8002958:	0028      	movs	r0, r5
 800295a:	b2c0      	uxtb	r0, r0
 800295c:	f000 f8c1 	bl	8002ae2 <RETURN_CODE>
 8002960:	e000      	b.n	8002964 <SIGFOX_API_get_initial_pac+0x54>
 8002962:	2000      	movs	r0, #0
 8002964:	bd32      	pop	{r1, r4, r5, pc}

08002966 <SIGFOX_API_set_rc_sync_period>:
 8002966:	b538      	push	{r3, r4, r5, lr}
 8002968:	0004      	movs	r4, r0
 800296a:	2500      	movs	r5, #0
 800296c:	b2a4      	uxth	r4, r4
 800296e:	4813      	ldr	r0, [pc, #76]	; (80029bc <.text_50>)
 8002970:	4284      	cmp	r4, r0
 8002972:	db01      	blt.n	8002978 <SIGFOX_API_set_rc_sync_period+0x12>
 8002974:	20b1      	movs	r0, #177	; 0xb1
 8002976:	e00f      	b.n	8002998 <SIGFOX_API_set_rc_sync_period+0x32>
 8002978:	0020      	movs	r0, r4
 800297a:	1c40      	adds	r0, r0, #1
 800297c:	b280      	uxth	r0, r0
 800297e:	f002 fc0f 	bl	80051a0 <SE_API_set_rc_sync_period>
 8002982:	0005      	movs	r5, r0
 8002984:	b2ed      	uxtb	r5, r5
 8002986:	2d00      	cmp	r5, #0
 8002988:	d005      	beq.n	8002996 <SIGFOX_API_set_rc_sync_period+0x30>
 800298a:	21b0      	movs	r1, #176	; 0xb0
 800298c:	0028      	movs	r0, r5
 800298e:	b2c0      	uxtb	r0, r0
 8002990:	f000 f8a7 	bl	8002ae2 <RETURN_CODE>
 8002994:	e000      	b.n	8002998 <SIGFOX_API_set_rc_sync_period+0x32>
 8002996:	2000      	movs	r0, #0
 8002998:	bd32      	pop	{r1, r4, r5, pc}
	...

0800299c <.text_42>:
 800299c:	08024c3c 	.word	0x08024c3c

080029a0 <.text_43>:
 80029a0:	08024c40 	.word	0x08024c40

080029a4 <.text_44>:
 80029a4:	200002d0 	.word	0x200002d0

080029a8 <.text_45>:
 80029a8:	200002d8 	.word	0x200002d8

080029ac <.text_46>:
 80029ac:	200002d1 	.word	0x200002d1

080029b0 <.text_47>:
 80029b0:	200002d2 	.word	0x200002d2

080029b4 <.text_48>:
 80029b4:	200002d3 	.word	0x200002d3

080029b8 <.text_49>:
 80029b8:	200002d4 	.word	0x200002d4

080029bc <.text_50>:
 80029bc:	00000fff 	.word	0x00000fff

080029c0 <SIGFOX_INT_randomize>:
 80029c0:	0001      	movs	r1, r0
 80029c2:	78c8      	ldrb	r0, [r1, #3]
 80029c4:	0202      	lsls	r2, r0, #8
 80029c6:	7888      	ldrb	r0, [r1, #2]
 80029c8:	4302      	orrs	r2, r0
 80029ca:	7848      	ldrb	r0, [r1, #1]
 80029cc:	0200      	lsls	r0, r0, #8
 80029ce:	7809      	ldrb	r1, [r1, #0]
 80029d0:	4308      	orrs	r0, r1
 80029d2:	4050      	eors	r0, r2
 80029d4:	b280      	uxth	r0, r0
 80029d6:	4770      	bx	lr

080029d8 <SIGFOX_INT_get_max_micro_channel>:
 80029d8:	b510      	push	{r4, lr}
 80029da:	0001      	movs	r1, r0
 80029dc:	2000      	movs	r0, #0
 80029de:	2400      	movs	r4, #0
 80029e0:	0023      	movs	r3, r4
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	da11      	bge.n	8002a0c <SIGFOX_INT_get_max_micro_channel+0x34>
 80029e8:	2400      	movs	r4, #0
 80029ea:	0022      	movs	r2, r4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	2a20      	cmp	r2, #32
 80029f0:	da0a      	bge.n	8002a08 <SIGFOX_INT_get_max_micro_channel+0x30>
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2404      	movs	r4, #4
 80029f6:	435c      	muls	r4, r3
 80029f8:	190c      	adds	r4, r1, r4
 80029fa:	68a4      	ldr	r4, [r4, #8]
 80029fc:	40d4      	lsrs	r4, r2
 80029fe:	07e4      	lsls	r4, r4, #31
 8002a00:	d500      	bpl.n	8002a04 <SIGFOX_INT_get_max_micro_channel+0x2c>
 8002a02:	1c40      	adds	r0, r0, #1
 8002a04:	1c52      	adds	r2, r2, #1
 8002a06:	e7f1      	b.n	80029ec <SIGFOX_INT_get_max_micro_channel+0x14>
 8002a08:	1c5b      	adds	r3, r3, #1
 8002a0a:	e7ea      	b.n	80029e2 <SIGFOX_INT_get_max_micro_channel+0xa>
 8002a0c:	2406      	movs	r4, #6
 8002a0e:	4360      	muls	r0, r4
 8002a10:	b280      	uxth	r0, r0
 8002a12:	bd10      	pop	{r4, pc}

08002a14 <SIGFOX_INT_get_macro_channel_index>:
 8002a14:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8002a16:	b081      	sub	sp, #4
 8002a18:	2400      	movs	r4, #0
 8002a1a:	2500      	movs	r5, #0
 8002a1c:	4668      	mov	r0, sp
 8002a1e:	8900      	ldrh	r0, [r0, #8]
 8002a20:	1e40      	subs	r0, r0, #1
 8002a22:	2106      	movs	r1, #6
 8002a24:	f003 f9b6 	bl	8005d94 <__divsi3>
 8002a28:	1c40      	adds	r0, r0, #1
 8002a2a:	4669      	mov	r1, sp
 8002a2c:	7008      	strb	r0, [r1, #0]
 8002a2e:	2000      	movs	r0, #0
 8002a30:	0006      	movs	r6, r0
 8002a32:	b2f6      	uxtb	r6, r6
 8002a34:	2e03      	cmp	r6, #3
 8002a36:	da2a      	bge.n	8002a8e <SIGFOX_INT_get_macro_channel_index+0x7a>
 8002a38:	0028      	movs	r0, r5
 8002a3a:	4669      	mov	r1, sp
 8002a3c:	7809      	ldrb	r1, [r1, #0]
 8002a3e:	b2c0      	uxtb	r0, r0
 8002a40:	4288      	cmp	r0, r1
 8002a42:	d024      	beq.n	8002a8e <SIGFOX_INT_get_macro_channel_index+0x7a>
 8002a44:	2000      	movs	r0, #0
 8002a46:	0007      	movs	r7, r0
 8002a48:	b2ff      	uxtb	r7, r7
 8002a4a:	2f20      	cmp	r7, #32
 8002a4c:	da1d      	bge.n	8002a8a <SIGFOX_INT_get_macro_channel_index+0x76>
 8002a4e:	0028      	movs	r0, r5
 8002a50:	4669      	mov	r1, sp
 8002a52:	7809      	ldrb	r1, [r1, #0]
 8002a54:	b2c0      	uxtb	r0, r0
 8002a56:	4288      	cmp	r0, r1
 8002a58:	d017      	beq.n	8002a8a <SIGFOX_INT_get_macro_channel_index+0x76>
 8002a5a:	9801      	ldr	r0, [sp, #4]
 8002a5c:	b2f6      	uxtb	r6, r6
 8002a5e:	2104      	movs	r1, #4
 8002a60:	4371      	muls	r1, r6
 8002a62:	1840      	adds	r0, r0, r1
 8002a64:	6880      	ldr	r0, [r0, #8]
 8002a66:	40f8      	lsrs	r0, r7
 8002a68:	07c0      	lsls	r0, r0, #31
 8002a6a:	d50c      	bpl.n	8002a86 <SIGFOX_INT_get_macro_channel_index+0x72>
 8002a6c:	1c6d      	adds	r5, r5, #1
 8002a6e:	4668      	mov	r0, sp
 8002a70:	7800      	ldrb	r0, [r0, #0]
 8002a72:	0029      	movs	r1, r5
 8002a74:	b2c9      	uxtb	r1, r1
 8002a76:	4288      	cmp	r0, r1
 8002a78:	d105      	bne.n	8002a86 <SIGFOX_INT_get_macro_channel_index+0x72>
 8002a7a:	b2f6      	uxtb	r6, r6
 8002a7c:	2020      	movs	r0, #32
 8002a7e:	4370      	muls	r0, r6
 8002a80:	b2ff      	uxtb	r7, r7
 8002a82:	19c0      	adds	r0, r0, r7
 8002a84:	0004      	movs	r4, r0
 8002a86:	1c7f      	adds	r7, r7, #1
 8002a88:	e7de      	b.n	8002a48 <SIGFOX_INT_get_macro_channel_index+0x34>
 8002a8a:	1c76      	adds	r6, r6, #1
 8002a8c:	e7d1      	b.n	8002a32 <SIGFOX_INT_get_macro_channel_index+0x1e>
 8002a8e:	0020      	movs	r0, r4
 8002a90:	b2c0      	uxtb	r0, r0
 8002a92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08002a94 <SIGFOX_INT_dc_lbt_channel_pn_max>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	0004      	movs	r4, r0
 8002a98:	000d      	movs	r5, r1
 8002a9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a9c:	215c      	movs	r1, #92	; 0x5c
 8002a9e:	5a61      	ldrh	r1, [r4, r1]
 8002aa0:	f003 f966 	bl	8005d70 <__udivsi3>
 8002aa4:	0006      	movs	r6, r0
 8002aa6:	2060      	movs	r0, #96	; 0x60
 8002aa8:	5a20      	ldrh	r0, [r4, r0]
 8002aaa:	215c      	movs	r1, #92	; 0x5c
 8002aac:	5a61      	ldrh	r1, [r4, r1]
 8002aae:	f003 f971 	bl	8005d94 <__divsi3>
 8002ab2:	1a30      	subs	r0, r6, r0
 8002ab4:	b2ed      	uxtb	r5, r5
 8002ab6:	215e      	movs	r1, #94	; 0x5e
 8002ab8:	5a61      	ldrh	r1, [r4, r1]
 8002aba:	434d      	muls	r5, r1
 8002abc:	1b40      	subs	r0, r0, r5
 8002abe:	b280      	uxth	r0, r0
 8002ac0:	bd70      	pop	{r4, r5, r6, pc}

08002ac2 <SIGFOX_INT_dc_lbt_channel_pn_min>:
 8002ac2:	b530      	push	{r4, r5, lr}
 8002ac4:	0004      	movs	r4, r0
 8002ac6:	000d      	movs	r5, r1
 8002ac8:	2060      	movs	r0, #96	; 0x60
 8002aca:	5a20      	ldrh	r0, [r4, r0]
 8002acc:	215c      	movs	r1, #92	; 0x5c
 8002ace:	5a61      	ldrh	r1, [r4, r1]
 8002ad0:	f003 f960 	bl	8005d94 <__divsi3>
 8002ad4:	b2ed      	uxtb	r5, r5
 8002ad6:	215e      	movs	r1, #94	; 0x5e
 8002ad8:	5a61      	ldrh	r1, [r4, r1]
 8002ada:	434d      	muls	r5, r1
 8002adc:	1940      	adds	r0, r0, r5
 8002ade:	b280      	uxth	r0, r0
 8002ae0:	bd30      	pop	{r4, r5, pc}

08002ae2 <RETURN_CODE>:
 8002ae2:	b2c0      	uxtb	r0, r0
 8002ae4:	0200      	lsls	r0, r0, #8
 8002ae6:	b2c9      	uxtb	r1, r1
 8002ae8:	4308      	orrs	r0, r1
 8002aea:	b280      	uxth	r0, r0
 8002aec:	4770      	bx	lr

08002aee <SIGFOX_INT_msg_counter_mask>:
 8002aee:	0001      	movs	r1, r0
 8002af0:	2001      	movs	r0, #1
 8002af2:	1e49      	subs	r1, r1, #1
 8002af4:	4088      	lsls	r0, r1
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	4348      	muls	r0, r1
 8002afa:	1e40      	subs	r0, r0, #1
 8002afc:	b280      	uxth	r0, r0
 8002afe:	4770      	bx	lr

08002b00 <SIGFOX_INT_compute_channels>:
 8002b00:	b5f4      	push	{r2, r4, r5, r6, r7, lr}
 8002b02:	0004      	movs	r4, r0
 8002b04:	000e      	movs	r6, r1
 8002b06:	2500      	movs	r5, #0
 8002b08:	2056      	movs	r0, #86	; 0x56
 8002b0a:	5c20      	ldrb	r0, [r4, r0]
 8002b0c:	2804      	cmp	r0, #4
 8002b0e:	d003      	beq.n	8002b18 <SIGFOX_INT_compute_channels+0x18>
 8002b10:	2056      	movs	r0, #86	; 0x56
 8002b12:	5c20      	ldrb	r0, [r4, r0]
 8002b14:	2802      	cmp	r0, #2
 8002b16:	d153      	bne.n	8002bc0 <SIGFOX_INT_compute_channels+0xc0>
 8002b18:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002b1a:	2800      	cmp	r0, #0
 8002b1c:	d004      	beq.n	8002b28 <SIGFOX_INT_compute_channels+0x28>
 8002b1e:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	0109      	lsls	r1, r1, #4
 8002b24:	4288      	cmp	r0, r1
 8002b26:	db06      	blt.n	8002b36 <SIGFOX_INT_compute_channels+0x36>
 8002b28:	0020      	movs	r0, r4
 8002b2a:	3064      	adds	r0, #100	; 0x64
 8002b2c:	f7ff ff48 	bl	80029c0 <SIGFOX_INT_randomize>
 8002b30:	0540      	lsls	r0, r0, #21
 8002b32:	0d40      	lsrs	r0, r0, #21
 8002b34:	84a0      	strh	r0, [r4, #36]	; 0x24
 8002b36:	4668      	mov	r0, sp
 8002b38:	7800      	ldrb	r0, [r0, #0]
 8002b3a:	2801      	cmp	r0, #1
 8002b3c:	d11e      	bne.n	8002b7c <SIGFOX_INT_compute_channels+0x7c>
 8002b3e:	2101      	movs	r1, #1
 8002b40:	0020      	movs	r0, r4
 8002b42:	f7ff ffa7 	bl	8002a94 <SIGFOX_INT_dc_lbt_channel_pn_max>
 8002b46:	0007      	movs	r7, r0
 8002b48:	2101      	movs	r1, #1
 8002b4a:	0020      	movs	r0, r4
 8002b4c:	f7ff ffb9 	bl	8002ac2 <SIGFOX_INT_dc_lbt_channel_pn_min>
 8002b50:	2301      	movs	r3, #1
 8002b52:	003a      	movs	r2, r7
 8002b54:	b292      	uxth	r2, r2
 8002b56:	0001      	movs	r1, r0
 8002b58:	b289      	uxth	r1, r1
 8002b5a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002b5c:	f000 ffd8 	bl	8003b10 <SIGFOX_PN_next_pn>
 8002b60:	84a0      	strh	r0, [r4, #36]	; 0x24
 8002b62:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002b64:	8320      	strh	r0, [r4, #24]
 8002b66:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002b68:	215e      	movs	r1, #94	; 0x5e
 8002b6a:	5a61      	ldrh	r1, [r4, r1]
 8002b6c:	1840      	adds	r0, r0, r1
 8002b6e:	8360      	strh	r0, [r4, #26]
 8002b70:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002b72:	215e      	movs	r1, #94	; 0x5e
 8002b74:	5a61      	ldrh	r1, [r4, r1]
 8002b76:	1a40      	subs	r0, r0, r1
 8002b78:	83a0      	strh	r0, [r4, #28]
 8002b7a:	e021      	b.n	8002bc0 <SIGFOX_INT_compute_channels+0xc0>
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	0005      	movs	r5, r0
 8002b80:	b2ed      	uxtb	r5, r5
 8002b82:	b2f6      	uxtb	r6, r6
 8002b84:	0030      	movs	r0, r6
 8002b86:	1c40      	adds	r0, r0, #1
 8002b88:	4285      	cmp	r5, r0
 8002b8a:	da19      	bge.n	8002bc0 <SIGFOX_INT_compute_channels+0xc0>
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	0020      	movs	r0, r4
 8002b90:	f7ff ff80 	bl	8002a94 <SIGFOX_INT_dc_lbt_channel_pn_max>
 8002b94:	0007      	movs	r7, r0
 8002b96:	2100      	movs	r1, #0
 8002b98:	0020      	movs	r0, r4
 8002b9a:	f7ff ff92 	bl	8002ac2 <SIGFOX_INT_dc_lbt_channel_pn_min>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	003a      	movs	r2, r7
 8002ba2:	b292      	uxth	r2, r2
 8002ba4:	0001      	movs	r1, r0
 8002ba6:	b289      	uxth	r1, r1
 8002ba8:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002baa:	f000 ffb1 	bl	8003b10 <SIGFOX_PN_next_pn>
 8002bae:	84a0      	strh	r0, [r4, #36]	; 0x24
 8002bb0:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002bb2:	b2ed      	uxtb	r5, r5
 8002bb4:	2102      	movs	r1, #2
 8002bb6:	4369      	muls	r1, r5
 8002bb8:	1861      	adds	r1, r4, r1
 8002bba:	8308      	strh	r0, [r1, #24]
 8002bbc:	1c6d      	adds	r5, r5, #1
 8002bbe:	e7df      	b.n	8002b80 <SIGFOX_INT_compute_channels+0x80>
 8002bc0:	2056      	movs	r0, #86	; 0x56
 8002bc2:	5c20      	ldrb	r0, [r4, r0]
 8002bc4:	2801      	cmp	r0, #1
 8002bc6:	d164      	bne.n	8002c92 <SIGFOX_INT_compute_channels+0x192>
 8002bc8:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d004      	beq.n	8002bd8 <SIGFOX_INT_compute_channels+0xd8>
 8002bce:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	0109      	lsls	r1, r1, #4
 8002bd4:	4288      	cmp	r0, r1
 8002bd6:	db06      	blt.n	8002be6 <SIGFOX_INT_compute_channels+0xe6>
 8002bd8:	0020      	movs	r0, r4
 8002bda:	3064      	adds	r0, #100	; 0x64
 8002bdc:	f7ff fef0 	bl	80029c0 <SIGFOX_INT_randomize>
 8002be0:	0540      	lsls	r0, r0, #21
 8002be2:	0d40      	lsrs	r0, r0, #21
 8002be4:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002be6:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002be8:	2800      	cmp	r0, #0
 8002bea:	d002      	beq.n	8002bf2 <SIGFOX_INT_compute_channels+0xf2>
 8002bec:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002bee:	2880      	cmp	r0, #128	; 0x80
 8002bf0:	db06      	blt.n	8002c00 <SIGFOX_INT_compute_channels+0x100>
 8002bf2:	0020      	movs	r0, r4
 8002bf4:	3064      	adds	r0, #100	; 0x64
 8002bf6:	f7ff fee3 	bl	80029c0 <SIGFOX_INT_randomize>
 8002bfa:	0640      	lsls	r0, r0, #25
 8002bfc:	0e40      	lsrs	r0, r0, #25
 8002bfe:	84a0      	strh	r0, [r4, #36]	; 0x24
 8002c00:	4668      	mov	r0, sp
 8002c02:	7800      	ldrb	r0, [r0, #0]
 8002c04:	2801      	cmp	r0, #1
 8002c06:	d11e      	bne.n	8002c46 <SIGFOX_INT_compute_channels+0x146>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002c0c:	1d52      	adds	r2, r2, #5
 8002c0e:	b292      	uxth	r2, r2
 8002c10:	2108      	movs	r1, #8
 8002c12:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002c14:	f000 ff7c 	bl	8003b10 <SIGFOX_PN_next_pn>
 8002c18:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2226      	movs	r2, #38	; 0x26
 8002c1e:	2104      	movs	r1, #4
 8002c20:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002c22:	f000 ff75 	bl	8003b10 <SIGFOX_PN_next_pn>
 8002c26:	84a0      	strh	r0, [r4, #36]	; 0x24
 8002c28:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002c2a:	8720      	strh	r0, [r4, #56]	; 0x38
 8002c2c:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002c2e:	1c40      	adds	r0, r0, #1
 8002c30:	8760      	strh	r0, [r4, #58]	; 0x3a
 8002c32:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002c34:	1e40      	subs	r0, r0, #1
 8002c36:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8002c38:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002c3a:	8320      	strh	r0, [r4, #24]
 8002c3c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002c3e:	8360      	strh	r0, [r4, #26]
 8002c40:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002c42:	83a0      	strh	r0, [r4, #28]
 8002c44:	e025      	b.n	8002c92 <SIGFOX_INT_compute_channels+0x192>
 8002c46:	2000      	movs	r0, #0
 8002c48:	0005      	movs	r5, r0
 8002c4a:	b2ed      	uxtb	r5, r5
 8002c4c:	b2f6      	uxtb	r6, r6
 8002c4e:	0030      	movs	r0, r6
 8002c50:	1c40      	adds	r0, r0, #1
 8002c52:	4285      	cmp	r5, r0
 8002c54:	da1d      	bge.n	8002c92 <SIGFOX_INT_compute_channels+0x192>
 8002c56:	2301      	movs	r3, #1
 8002c58:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002c5a:	1d92      	adds	r2, r2, #6
 8002c5c:	b292      	uxth	r2, r2
 8002c5e:	2107      	movs	r1, #7
 8002c60:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002c62:	f000 ff55 	bl	8003b10 <SIGFOX_PN_next_pn>
 8002c66:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002c68:	2300      	movs	r3, #0
 8002c6a:	2226      	movs	r2, #38	; 0x26
 8002c6c:	2104      	movs	r1, #4
 8002c6e:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002c70:	f000 ff4e 	bl	8003b10 <SIGFOX_PN_next_pn>
 8002c74:	84a0      	strh	r0, [r4, #36]	; 0x24
 8002c76:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002c78:	b2ed      	uxtb	r5, r5
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	4369      	muls	r1, r5
 8002c7e:	1861      	adds	r1, r4, r1
 8002c80:	8708      	strh	r0, [r1, #56]	; 0x38
 8002c82:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002c84:	b2ed      	uxtb	r5, r5
 8002c86:	2102      	movs	r1, #2
 8002c88:	4369      	muls	r1, r5
 8002c8a:	1861      	adds	r1, r4, r1
 8002c8c:	8308      	strh	r0, [r1, #24]
 8002c8e:	1c6d      	adds	r5, r5, #1
 8002c90:	e7db      	b.n	8002c4a <SIGFOX_INT_compute_channels+0x14a>
 8002c92:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08002c94 <SIGFOX_INT_compute_carrier_sense_frequency>:
 8002c94:	b570      	push	{r4, r5, r6, lr}
 8002c96:	b2c9      	uxtb	r1, r1
 8002c98:	2502      	movs	r5, #2
 8002c9a:	434d      	muls	r5, r1
 8002c9c:	1945      	adds	r5, r0, r5
 8002c9e:	8b2d      	ldrh	r5, [r5, #24]
 8002ca0:	265c      	movs	r6, #92	; 0x5c
 8002ca2:	5b86      	ldrh	r6, [r0, r6]
 8002ca4:	4375      	muls	r5, r6
 8002ca6:	002a      	movs	r2, r5
 8002ca8:	6805      	ldr	r5, [r0, #0]
 8002caa:	18ad      	adds	r5, r5, r2
 8002cac:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8002cae:	0876      	lsrs	r6, r6, #1
 8002cb0:	1bad      	subs	r5, r5, r6
 8002cb2:	002b      	movs	r3, r5
 8002cb4:	6805      	ldr	r5, [r0, #0]
 8002cb6:	42ab      	cmp	r3, r5
 8002cb8:	d301      	bcc.n	8002cbe <SIGFOX_INT_compute_carrier_sense_frequency+0x2a>
 8002cba:	2401      	movs	r4, #1
 8002cbc:	e001      	b.n	8002cc2 <SIGFOX_INT_compute_carrier_sense_frequency+0x2e>
 8002cbe:	2400      	movs	r4, #0
 8002cc0:	43e4      	mvns	r4, r4
 8002cc2:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8002cc4:	b264      	sxtb	r4, r4
 8002cc6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002cc8:	4344      	muls	r4, r0
 8002cca:	1928      	adds	r0, r5, r4
 8002ccc:	bd70      	pop	{r4, r5, r6, pc}

08002cce <SIGFOX_INT_store_nvm>:
 8002cce:	b538      	push	{r3, r4, r5, lr}
 8002cd0:	0004      	movs	r4, r0
 8002cd2:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002cd4:	4669      	mov	r1, sp
 8002cd6:	7008      	strb	r0, [r1, #0]
 8002cd8:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002cda:	b280      	uxth	r0, r0
 8002cdc:	0a00      	lsrs	r0, r0, #8
 8002cde:	4669      	mov	r1, sp
 8002ce0:	7048      	strb	r0, [r1, #1]
 8002ce2:	2056      	movs	r0, #86	; 0x56
 8002ce4:	5c20      	ldrb	r0, [r4, r0]
 8002ce6:	2801      	cmp	r0, #1
 8002ce8:	d107      	bne.n	8002cfa <SIGFOX_INT_store_nvm+0x2c>
 8002cea:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002cec:	4669      	mov	r1, sp
 8002cee:	7088      	strb	r0, [r1, #2]
 8002cf0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002cf2:	b280      	uxth	r0, r0
 8002cf4:	0a00      	lsrs	r0, r0, #8
 8002cf6:	4669      	mov	r1, sp
 8002cf8:	70c8      	strb	r0, [r1, #3]
 8002cfa:	4668      	mov	r0, sp
 8002cfc:	f00a fe15 	bl	800d92a <MCU_API_set_nv_mem>
 8002d00:	0005      	movs	r5, r0
 8002d02:	b2ed      	uxtb	r5, r5
 8002d04:	2d00      	cmp	r5, #0
 8002d06:	d002      	beq.n	8002d0e <SIGFOX_INT_store_nvm+0x40>
 8002d08:	0028      	movs	r0, r5
 8002d0a:	b2c0      	uxtb	r0, r0
 8002d0c:	e000      	b.n	8002d10 <SIGFOX_INT_store_nvm+0x42>
 8002d0e:	2000      	movs	r0, #0
 8002d10:	bd32      	pop	{r1, r4, r5, pc}

08002d12 <SIGFOX_INT_execute_communication_sequence>:
 8002d12:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	0005      	movs	r5, r0
 8002d18:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	4669      	mov	r1, sp
 8002d1e:	8148      	strh	r0, [r1, #10]
 8002d20:	2000      	movs	r0, #0
 8002d22:	4669      	mov	r1, sp
 8002d24:	7208      	strb	r0, [r1, #8]
 8002d26:	b2ff      	uxtb	r7, r7
 8002d28:	2f01      	cmp	r7, #1
 8002d2a:	d102      	bne.n	8002d32 <SIGFOX_INT_execute_communication_sequence+0x20>
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	4669      	mov	r1, sp
 8002d30:	7208      	strb	r0, [r1, #8]
 8002d32:	4668      	mov	r0, sp
 8002d34:	7a00      	ldrb	r0, [r0, #8]
 8002d36:	2801      	cmp	r0, #1
 8002d38:	d105      	bne.n	8002d46 <SIGFOX_INT_execute_communication_sequence+0x34>
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	49b7      	ldr	r1, [pc, #732]	; (800301c <.text_16>)
 8002d3e:	7008      	strb	r0, [r1, #0]
 8002d40:	2000      	movs	r0, #0
 8002d42:	49b7      	ldr	r1, [pc, #732]	; (8003020 <.text_17>)
 8002d44:	7008      	strb	r0, [r1, #0]
 8002d46:	48b7      	ldr	r0, [pc, #732]	; (8003024 <.text_18>)
 8002d48:	7800      	ldrb	r0, [r0, #0]
 8002d4a:	2802      	cmp	r0, #2
 8002d4c:	d001      	beq.n	8002d52 <SIGFOX_INT_execute_communication_sequence+0x40>
 8002d4e:	2060      	movs	r0, #96	; 0x60
 8002d50:	e0f6      	b.n	8002f40 <SIGFOX_INT_execute_communication_sequence+0x22e>
 8002d52:	2003      	movs	r0, #3
 8002d54:	49b3      	ldr	r1, [pc, #716]	; (8003024 <.text_18>)
 8002d56:	7008      	strb	r0, [r1, #0]
 8002d58:	2000      	movs	r0, #0
 8002d5a:	2154      	movs	r1, #84	; 0x54
 8002d5c:	5468      	strb	r0, [r5, r1]
 8002d5e:	a80d      	add	r0, sp, #52	; 0x34
 8002d60:	7800      	ldrb	r0, [r0, #0]
 8002d62:	2800      	cmp	r0, #0
 8002d64:	d103      	bne.n	8002d6e <SIGFOX_INT_execute_communication_sequence+0x5c>
 8002d66:	2000      	movs	r0, #0
 8002d68:	4669      	mov	r1, sp
 8002d6a:	7248      	strb	r0, [r1, #9]
 8002d6c:	e002      	b.n	8002d74 <SIGFOX_INT_execute_communication_sequence+0x62>
 8002d6e:	2002      	movs	r0, #2
 8002d70:	4669      	mov	r1, sp
 8002d72:	7248      	strb	r0, [r1, #9]
 8002d74:	4668      	mov	r0, sp
 8002d76:	7a00      	ldrb	r0, [r0, #8]
 8002d78:	9001      	str	r0, [sp, #4]
 8002d7a:	4668      	mov	r0, sp
 8002d7c:	7a40      	ldrb	r0, [r0, #9]
 8002d7e:	9000      	str	r0, [sp, #0]
 8002d80:	4668      	mov	r0, sp
 8002d82:	7e03      	ldrb	r3, [r0, #24]
 8002d84:	9a05      	ldr	r2, [sp, #20]
 8002d86:	4668      	mov	r0, sp
 8002d88:	7c01      	ldrb	r1, [r0, #16]
 8002d8a:	0028      	movs	r0, r5
 8002d8c:	f000 f8da 	bl	8002f44 <SIGFOX_INT_prepare_transmission>
 8002d90:	0004      	movs	r4, r0
 8002d92:	b2a4      	uxth	r4, r4
 8002d94:	2c00      	cmp	r4, #0
 8002d96:	d002      	beq.n	8002d9e <SIGFOX_INT_execute_communication_sequence+0x8c>
 8002d98:	0020      	movs	r0, r4
 8002d9a:	b280      	uxth	r0, r0
 8002d9c:	e0d0      	b.n	8002f40 <SIGFOX_INT_execute_communication_sequence+0x22e>
 8002d9e:	0028      	movs	r0, r5
 8002da0:	f7ff ff95 	bl	8002cce <SIGFOX_INT_store_nvm>
 8002da4:	0006      	movs	r6, r0
 8002da6:	b2f6      	uxtb	r6, r6
 8002da8:	2e00      	cmp	r6, #0
 8002daa:	d005      	beq.n	8002db8 <SIGFOX_INT_execute_communication_sequence+0xa6>
 8002dac:	2161      	movs	r1, #97	; 0x61
 8002dae:	0030      	movs	r0, r6
 8002db0:	b2c0      	uxtb	r0, r0
 8002db2:	f7ff fe96 	bl	8002ae2 <RETURN_CODE>
 8002db6:	e0c3      	b.n	8002f40 <SIGFOX_INT_execute_communication_sequence+0x22e>
 8002db8:	2056      	movs	r0, #86	; 0x56
 8002dba:	5c28      	ldrb	r0, [r5, r0]
 8002dbc:	2802      	cmp	r0, #2
 8002dbe:	d105      	bne.n	8002dcc <SIGFOX_INT_execute_communication_sequence+0xba>
 8002dc0:	4668      	mov	r0, sp
 8002dc2:	68e9      	ldr	r1, [r5, #12]
 8002dc4:	8141      	strh	r1, [r0, #10]
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	4997      	ldr	r1, [pc, #604]	; (8003028 <.text_19>)
 8002dca:	7008      	strb	r0, [r1, #0]
 8002dcc:	4668      	mov	r0, sp
 8002dce:	8943      	ldrh	r3, [r0, #10]
 8002dd0:	4668      	mov	r0, sp
 8002dd2:	7a42      	ldrb	r2, [r0, #9]
 8002dd4:	0039      	movs	r1, r7
 8002dd6:	b2c9      	uxtb	r1, r1
 8002dd8:	0028      	movs	r0, r5
 8002dda:	f000 fad4 	bl	8003386 <SIGFOX_INT_process_uplink>
 8002dde:	0004      	movs	r4, r0
 8002de0:	b2a4      	uxth	r4, r4
 8002de2:	2c00      	cmp	r4, #0
 8002de4:	d008      	beq.n	8002df8 <SIGFOX_INT_execute_communication_sequence+0xe6>
 8002de6:	b2a4      	uxth	r4, r4
 8002de8:	2c7e      	cmp	r4, #126	; 0x7e
 8002dea:	d102      	bne.n	8002df2 <SIGFOX_INT_execute_communication_sequence+0xe0>
 8002dec:	2002      	movs	r0, #2
 8002dee:	498d      	ldr	r1, [pc, #564]	; (8003024 <.text_18>)
 8002df0:	7008      	strb	r0, [r1, #0]
 8002df2:	0020      	movs	r0, r4
 8002df4:	b280      	uxth	r0, r0
 8002df6:	e0a3      	b.n	8002f40 <SIGFOX_INT_execute_communication_sequence+0x22e>
 8002df8:	4668      	mov	r0, sp
 8002dfa:	7a00      	ldrb	r0, [r0, #8]
 8002dfc:	2801      	cmp	r0, #1
 8002dfe:	d161      	bne.n	8002ec4 <SIGFOX_INT_execute_communication_sequence+0x1b2>
 8002e00:	2004      	movs	r0, #4
 8002e02:	4988      	ldr	r1, [pc, #544]	; (8003024 <.text_18>)
 8002e04:	7008      	strb	r0, [r1, #0]
 8002e06:	003a      	movs	r2, r7
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e0c:	0028      	movs	r0, r5
 8002e0e:	f000 fc9b 	bl	8003748 <SIGFOX_INT_process_downlink>
 8002e12:	0004      	movs	r4, r0
 8002e14:	b2a4      	uxth	r4, r4
 8002e16:	2c00      	cmp	r4, #0
 8002e18:	d008      	beq.n	8002e2c <SIGFOX_INT_execute_communication_sequence+0x11a>
 8002e1a:	b2a4      	uxth	r4, r4
 8002e1c:	2c9b      	cmp	r4, #155	; 0x9b
 8002e1e:	d102      	bne.n	8002e26 <SIGFOX_INT_execute_communication_sequence+0x114>
 8002e20:	2002      	movs	r0, #2
 8002e22:	4980      	ldr	r1, [pc, #512]	; (8003024 <.text_18>)
 8002e24:	7008      	strb	r0, [r1, #0]
 8002e26:	0020      	movs	r0, r4
 8002e28:	b280      	uxth	r0, r0
 8002e2a:	e089      	b.n	8002f40 <SIGFOX_INT_execute_communication_sequence+0x22e>
 8002e2c:	b2ff      	uxtb	r7, r7
 8002e2e:	2f01      	cmp	r7, #1
 8002e30:	d148      	bne.n	8002ec4 <SIGFOX_INT_execute_communication_sequence+0x1b2>
 8002e32:	2003      	movs	r0, #3
 8002e34:	497b      	ldr	r1, [pc, #492]	; (8003024 <.text_18>)
 8002e36:	7008      	strb	r0, [r1, #0]
 8002e38:	2002      	movs	r0, #2
 8002e3a:	f00a fd29 	bl	800d890 <MCU_API_delay>
 8002e3e:	0006      	movs	r6, r0
 8002e40:	b2f6      	uxtb	r6, r6
 8002e42:	2e00      	cmp	r6, #0
 8002e44:	d005      	beq.n	8002e52 <SIGFOX_INT_execute_communication_sequence+0x140>
 8002e46:	2164      	movs	r1, #100	; 0x64
 8002e48:	0030      	movs	r0, r6
 8002e4a:	b2c0      	uxtb	r0, r0
 8002e4c:	f7ff fe49 	bl	8002ae2 <RETURN_CODE>
 8002e50:	e076      	b.n	8002f40 <SIGFOX_INT_execute_communication_sequence+0x22e>
 8002e52:	2000      	movs	r0, #0
 8002e54:	9001      	str	r0, [sp, #4]
 8002e56:	2000      	movs	r0, #0
 8002e58:	9000      	str	r0, [sp, #0]
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2102      	movs	r1, #2
 8002e60:	0028      	movs	r0, r5
 8002e62:	f000 f86f 	bl	8002f44 <SIGFOX_INT_prepare_transmission>
 8002e66:	0004      	movs	r4, r0
 8002e68:	b2a4      	uxth	r4, r4
 8002e6a:	2c00      	cmp	r4, #0
 8002e6c:	d002      	beq.n	8002e74 <SIGFOX_INT_execute_communication_sequence+0x162>
 8002e6e:	0020      	movs	r0, r4
 8002e70:	b280      	uxth	r0, r0
 8002e72:	e065      	b.n	8002f40 <SIGFOX_INT_execute_communication_sequence+0x22e>
 8002e74:	0028      	movs	r0, r5
 8002e76:	f7ff ff2a 	bl	8002cce <SIGFOX_INT_store_nvm>
 8002e7a:	0006      	movs	r6, r0
 8002e7c:	b2f6      	uxtb	r6, r6
 8002e7e:	2e00      	cmp	r6, #0
 8002e80:	d005      	beq.n	8002e8e <SIGFOX_INT_execute_communication_sequence+0x17c>
 8002e82:	2162      	movs	r1, #98	; 0x62
 8002e84:	0030      	movs	r0, r6
 8002e86:	b2c0      	uxtb	r0, r0
 8002e88:	f7ff fe2b 	bl	8002ae2 <RETURN_CODE>
 8002e8c:	e058      	b.n	8002f40 <SIGFOX_INT_execute_communication_sequence+0x22e>
 8002e8e:	2056      	movs	r0, #86	; 0x56
 8002e90:	5c28      	ldrb	r0, [r5, r0]
 8002e92:	2802      	cmp	r0, #2
 8002e94:	d102      	bne.n	8002e9c <SIGFOX_INT_execute_communication_sequence+0x18a>
 8002e96:	4865      	ldr	r0, [pc, #404]	; (800302c <.text_20>)
 8002e98:	4669      	mov	r1, sp
 8002e9a:	8148      	strh	r0, [r1, #10]
 8002e9c:	4668      	mov	r0, sp
 8002e9e:	8943      	ldrh	r3, [r0, #10]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	0028      	movs	r0, r5
 8002ea6:	f000 fa6e 	bl	8003386 <SIGFOX_INT_process_uplink>
 8002eaa:	0004      	movs	r4, r0
 8002eac:	b2a4      	uxth	r4, r4
 8002eae:	2c00      	cmp	r4, #0
 8002eb0:	d008      	beq.n	8002ec4 <SIGFOX_INT_execute_communication_sequence+0x1b2>
 8002eb2:	b2a4      	uxth	r4, r4
 8002eb4:	2c7e      	cmp	r4, #126	; 0x7e
 8002eb6:	d102      	bne.n	8002ebe <SIGFOX_INT_execute_communication_sequence+0x1ac>
 8002eb8:	2002      	movs	r0, #2
 8002eba:	495a      	ldr	r1, [pc, #360]	; (8003024 <.text_18>)
 8002ebc:	7008      	strb	r0, [r1, #0]
 8002ebe:	0020      	movs	r0, r4
 8002ec0:	b280      	uxth	r0, r0
 8002ec2:	e03d      	b.n	8002f40 <SIGFOX_INT_execute_communication_sequence+0x22e>
 8002ec4:	2054      	movs	r0, #84	; 0x54
 8002ec6:	5c28      	ldrb	r0, [r5, r0]
 8002ec8:	2801      	cmp	r0, #1
 8002eca:	d135      	bne.n	8002f38 <SIGFOX_INT_execute_communication_sequence+0x226>
 8002ecc:	2000      	movs	r0, #0
 8002ece:	2154      	movs	r1, #84	; 0x54
 8002ed0:	5468      	strb	r0, [r5, r1]
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	9001      	str	r0, [sp, #4]
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	9000      	str	r0, [sp, #0]
 8002eda:	2305      	movs	r3, #5
 8002edc:	2200      	movs	r2, #0
 8002ede:	2104      	movs	r1, #4
 8002ee0:	0028      	movs	r0, r5
 8002ee2:	f000 f82f 	bl	8002f44 <SIGFOX_INT_prepare_transmission>
 8002ee6:	0004      	movs	r4, r0
 8002ee8:	b2a4      	uxth	r4, r4
 8002eea:	2c00      	cmp	r4, #0
 8002eec:	d002      	beq.n	8002ef4 <SIGFOX_INT_execute_communication_sequence+0x1e2>
 8002eee:	0020      	movs	r0, r4
 8002ef0:	b280      	uxth	r0, r0
 8002ef2:	e025      	b.n	8002f40 <SIGFOX_INT_execute_communication_sequence+0x22e>
 8002ef4:	0028      	movs	r0, r5
 8002ef6:	f7ff feea 	bl	8002cce <SIGFOX_INT_store_nvm>
 8002efa:	0006      	movs	r6, r0
 8002efc:	b2f6      	uxtb	r6, r6
 8002efe:	2e00      	cmp	r6, #0
 8002f00:	d005      	beq.n	8002f0e <SIGFOX_INT_execute_communication_sequence+0x1fc>
 8002f02:	2163      	movs	r1, #99	; 0x63
 8002f04:	0030      	movs	r0, r6
 8002f06:	b2c0      	uxtb	r0, r0
 8002f08:	f7ff fdeb 	bl	8002ae2 <RETURN_CODE>
 8002f0c:	e018      	b.n	8002f40 <SIGFOX_INT_execute_communication_sequence+0x22e>
 8002f0e:	2056      	movs	r0, #86	; 0x56
 8002f10:	5c28      	ldrb	r0, [r5, r0]
 8002f12:	2802      	cmp	r0, #2
 8002f14:	d102      	bne.n	8002f1c <SIGFOX_INT_execute_communication_sequence+0x20a>
 8002f16:	4668      	mov	r0, sp
 8002f18:	68e9      	ldr	r1, [r5, #12]
 8002f1a:	8141      	strh	r1, [r0, #10]
 8002f1c:	4668      	mov	r0, sp
 8002f1e:	8943      	ldrh	r3, [r0, #10]
 8002f20:	2202      	movs	r2, #2
 8002f22:	2100      	movs	r1, #0
 8002f24:	0028      	movs	r0, r5
 8002f26:	f000 fa2e 	bl	8003386 <SIGFOX_INT_process_uplink>
 8002f2a:	0004      	movs	r4, r0
 8002f2c:	b2a4      	uxth	r4, r4
 8002f2e:	2c00      	cmp	r4, #0
 8002f30:	d002      	beq.n	8002f38 <SIGFOX_INT_execute_communication_sequence+0x226>
 8002f32:	0020      	movs	r0, r4
 8002f34:	b280      	uxth	r0, r0
 8002f36:	e003      	b.n	8002f40 <SIGFOX_INT_execute_communication_sequence+0x22e>
 8002f38:	2002      	movs	r0, #2
 8002f3a:	493a      	ldr	r1, [pc, #232]	; (8003024 <.text_18>)
 8002f3c:	7008      	strb	r0, [r1, #0]
 8002f3e:	2000      	movs	r0, #0
 8002f40:	b007      	add	sp, #28
 8002f42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f44 <SIGFOX_INT_prepare_transmission>:
 8002f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f46:	0004      	movs	r4, r0
 8002f48:	000f      	movs	r7, r1
 8002f4a:	001d      	movs	r5, r3
 8002f4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002f4e:	0030      	movs	r0, r6
 8002f50:	b2c0      	uxtb	r0, r0
 8002f52:	9000      	str	r0, [sp, #0]
 8002f54:	002b      	movs	r3, r5
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	9a02      	ldr	r2, [sp, #8]
 8002f5a:	0039      	movs	r1, r7
 8002f5c:	b2c9      	uxtb	r1, r1
 8002f5e:	0020      	movs	r0, r4
 8002f60:	f000 f868 	bl	8003034 <SIGFOX_INT_build_frame>
 8002f64:	4669      	mov	r1, sp
 8002f66:	8088      	strh	r0, [r1, #4]
 8002f68:	4668      	mov	r0, sp
 8002f6a:	8880      	ldrh	r0, [r0, #4]
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	d002      	beq.n	8002f76 <SIGFOX_INT_prepare_transmission+0x32>
 8002f70:	4668      	mov	r0, sp
 8002f72:	8880      	ldrh	r0, [r0, #4]
 8002f74:	e051      	b.n	800301a <SIGFOX_INT_prepare_transmission+0xd6>
 8002f76:	b2ff      	uxtb	r7, r7
 8002f78:	2f02      	cmp	r7, #2
 8002f7a:	db09      	blt.n	8002f90 <SIGFOX_INT_prepare_transmission+0x4c>
 8002f7c:	482c      	ldr	r0, [pc, #176]	; (8003030 <.text_21>)
 8002f7e:	8940      	ldrh	r0, [r0, #10]
 8002f80:	83e0      	strh	r0, [r4, #30]
 8002f82:	482b      	ldr	r0, [pc, #172]	; (8003030 <.text_21>)
 8002f84:	8ac0      	ldrh	r0, [r0, #22]
 8002f86:	8420      	strh	r0, [r4, #32]
 8002f88:	4829      	ldr	r0, [pc, #164]	; (8003030 <.text_21>)
 8002f8a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8002f8c:	8460      	strh	r0, [r4, #34]	; 0x22
 8002f8e:	e03c      	b.n	800300a <SIGFOX_INT_prepare_transmission+0xc6>
 8002f90:	2055      	movs	r0, #85	; 0x55
 8002f92:	5c20      	ldrb	r0, [r4, r0]
 8002f94:	2810      	cmp	r0, #16
 8002f96:	da1b      	bge.n	8002fd0 <SIGFOX_INT_prepare_transmission+0x8c>
 8002f98:	4825      	ldr	r0, [pc, #148]	; (8003030 <.text_21>)
 8002f9a:	2155      	movs	r1, #85	; 0x55
 8002f9c:	5c61      	ldrb	r1, [r4, r1]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	4351      	muls	r1, r2
 8002fa2:	1840      	adds	r0, r0, r1
 8002fa4:	381c      	subs	r0, #28
 8002fa6:	8800      	ldrh	r0, [r0, #0]
 8002fa8:	83e0      	strh	r0, [r4, #30]
 8002faa:	4821      	ldr	r0, [pc, #132]	; (8003030 <.text_21>)
 8002fac:	2155      	movs	r1, #85	; 0x55
 8002fae:	5c61      	ldrb	r1, [r4, r1]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	4351      	muls	r1, r2
 8002fb4:	1840      	adds	r0, r0, r1
 8002fb6:	3810      	subs	r0, #16
 8002fb8:	8800      	ldrh	r0, [r0, #0]
 8002fba:	8420      	strh	r0, [r4, #32]
 8002fbc:	481c      	ldr	r0, [pc, #112]	; (8003030 <.text_21>)
 8002fbe:	2155      	movs	r1, #85	; 0x55
 8002fc0:	5c61      	ldrb	r1, [r4, r1]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	4351      	muls	r1, r2
 8002fc6:	1840      	adds	r0, r0, r1
 8002fc8:	1f00      	subs	r0, r0, #4
 8002fca:	8800      	ldrh	r0, [r0, #0]
 8002fcc:	8460      	strh	r0, [r4, #34]	; 0x22
 8002fce:	e01c      	b.n	800300a <SIGFOX_INT_prepare_transmission+0xc6>
 8002fd0:	4817      	ldr	r0, [pc, #92]	; (8003030 <.text_21>)
 8002fd2:	2155      	movs	r1, #85	; 0x55
 8002fd4:	5c61      	ldrb	r1, [r4, r1]
 8002fd6:	390a      	subs	r1, #10
 8002fd8:	1089      	asrs	r1, r1, #2
 8002fda:	2202      	movs	r2, #2
 8002fdc:	4351      	muls	r1, r2
 8002fde:	5a40      	ldrh	r0, [r0, r1]
 8002fe0:	83e0      	strh	r0, [r4, #30]
 8002fe2:	4813      	ldr	r0, [pc, #76]	; (8003030 <.text_21>)
 8002fe4:	2155      	movs	r1, #85	; 0x55
 8002fe6:	5c61      	ldrb	r1, [r4, r1]
 8002fe8:	390a      	subs	r1, #10
 8002fea:	1089      	asrs	r1, r1, #2
 8002fec:	2202      	movs	r2, #2
 8002fee:	4351      	muls	r1, r2
 8002ff0:	1840      	adds	r0, r0, r1
 8002ff2:	8980      	ldrh	r0, [r0, #12]
 8002ff4:	8420      	strh	r0, [r4, #32]
 8002ff6:	480e      	ldr	r0, [pc, #56]	; (8003030 <.text_21>)
 8002ff8:	2155      	movs	r1, #85	; 0x55
 8002ffa:	5c61      	ldrb	r1, [r4, r1]
 8002ffc:	390a      	subs	r1, #10
 8002ffe:	1089      	asrs	r1, r1, #2
 8003000:	2202      	movs	r2, #2
 8003002:	4351      	muls	r1, r2
 8003004:	1840      	adds	r0, r0, r1
 8003006:	8b00      	ldrh	r0, [r0, #24]
 8003008:	8460      	strh	r0, [r4, #34]	; 0x22
 800300a:	0032      	movs	r2, r6
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	a808      	add	r0, sp, #32
 8003010:	7801      	ldrb	r1, [r0, #0]
 8003012:	0020      	movs	r0, r4
 8003014:	f7ff fd74 	bl	8002b00 <SIGFOX_INT_compute_channels>
 8003018:	2000      	movs	r0, #0
 800301a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800301c <.text_16>:
 800301c:	200002d2 	.word	0x200002d2

08003020 <.text_17>:
 8003020:	200002d3 	.word	0x200002d3

08003024 <.text_18>:
 8003024:	200002d0 	.word	0x200002d0

08003028 <.text_19>:
 8003028:	200002d4 	.word	0x200002d4

0800302c <.text_20>:
 800302c:	00000a28 	.word	0x00000a28

08003030 <.text_21>:
 8003030:	08024c58 	.word	0x08024c58

08003034 <SIGFOX_INT_build_frame>:
 8003034:	b5f6      	push	{r1, r2, r4, r5, r6, r7, lr}
 8003036:	b085      	sub	sp, #20
 8003038:	0004      	movs	r4, r0
 800303a:	001f      	movs	r7, r3
 800303c:	2000      	movs	r0, #0
 800303e:	4669      	mov	r1, sp
 8003040:	74c8      	strb	r0, [r1, #19]
 8003042:	2000      	movs	r0, #0
 8003044:	4669      	mov	r1, sp
 8003046:	7488      	strb	r0, [r1, #18]
 8003048:	2000      	movs	r0, #0
 800304a:	4669      	mov	r1, sp
 800304c:	8208      	strh	r0, [r1, #16]
 800304e:	2000      	movs	r0, #0
 8003050:	4669      	mov	r1, sp
 8003052:	81c8      	strh	r0, [r1, #14]
 8003054:	2000      	movs	r0, #0
 8003056:	4669      	mov	r1, sp
 8003058:	8188      	strh	r0, [r1, #12]
 800305a:	4668      	mov	r0, sp
 800305c:	7d00      	ldrb	r0, [r0, #20]
 800305e:	2800      	cmp	r0, #0
 8003060:	d01b      	beq.n	800309a <SIGFOX_INT_build_frame+0x66>
 8003062:	2802      	cmp	r0, #2
 8003064:	d050      	beq.n	8003108 <SIGFOX_INT_build_frame+0xd4>
 8003066:	d304      	bcc.n	8003072 <SIGFOX_INT_build_frame+0x3e>
 8003068:	2804      	cmp	r0, #4
 800306a:	d100      	bne.n	800306e <SIGFOX_INT_build_frame+0x3a>
 800306c:	e083      	b.n	8003176 <SIGFOX_INT_build_frame+0x142>
 800306e:	d319      	bcc.n	80030a4 <SIGFOX_INT_build_frame+0x70>
 8003070:	e0ad      	b.n	80031ce <SIGFOX_INT_build_frame+0x19a>
 8003072:	2000      	movs	r0, #0
 8003074:	0005      	movs	r5, r0
 8003076:	0028      	movs	r0, r5
 8003078:	0039      	movs	r1, r7
 800307a:	b2c0      	uxtb	r0, r0
 800307c:	b2c9      	uxtb	r1, r1
 800307e:	4288      	cmp	r0, r1
 8003080:	d20a      	bcs.n	8003098 <SIGFOX_INT_build_frame+0x64>
 8003082:	9806      	ldr	r0, [sp, #24]
 8003084:	b2ed      	uxtb	r5, r5
 8003086:	5d41      	ldrb	r1, [r0, r5]
 8003088:	0028      	movs	r0, r5
 800308a:	1d80      	adds	r0, r0, #6
 800308c:	b2c0      	uxtb	r0, r0
 800308e:	1820      	adds	r0, r4, r0
 8003090:	223e      	movs	r2, #62	; 0x3e
 8003092:	5481      	strb	r1, [r0, r2]
 8003094:	1c6d      	adds	r5, r5, #1
 8003096:	e7ee      	b.n	8003076 <SIGFOX_INT_build_frame+0x42>
 8003098:	e099      	b.n	80031ce <SIGFOX_INT_build_frame+0x19a>
 800309a:	9806      	ldr	r0, [sp, #24]
 800309c:	7800      	ldrb	r0, [r0, #0]
 800309e:	2144      	movs	r1, #68	; 0x44
 80030a0:	5460      	strb	r0, [r4, r1]
 80030a2:	e094      	b.n	80031ce <SIGFOX_INT_build_frame+0x19a>
 80030a4:	aa03      	add	r2, sp, #12
 80030a6:	a903      	add	r1, sp, #12
 80030a8:	1c89      	adds	r1, r1, #2
 80030aa:	a804      	add	r0, sp, #16
 80030ac:	f00a fbc8 	bl	800d840 <MCU_API_get_voltage_temperature>
 80030b0:	0006      	movs	r6, r0
 80030b2:	b2f6      	uxtb	r6, r6
 80030b4:	2e00      	cmp	r6, #0
 80030b6:	d005      	beq.n	80030c4 <SIGFOX_INT_build_frame+0x90>
 80030b8:	2192      	movs	r1, #146	; 0x92
 80030ba:	0030      	movs	r0, r6
 80030bc:	b2c0      	uxtb	r0, r0
 80030be:	f7ff fd10 	bl	8002ae2 <RETURN_CODE>
 80030c2:	e0c3      	b.n	800324c <SIGFOX_INT_build_frame+0x218>
 80030c4:	2008      	movs	r0, #8
 80030c6:	2144      	movs	r1, #68	; 0x44
 80030c8:	5460      	strb	r0, [r4, r1]
 80030ca:	4668      	mov	r0, sp
 80030cc:	8a00      	ldrh	r0, [r0, #16]
 80030ce:	2145      	movs	r1, #69	; 0x45
 80030d0:	5460      	strb	r0, [r4, r1]
 80030d2:	4668      	mov	r0, sp
 80030d4:	8a00      	ldrh	r0, [r0, #16]
 80030d6:	b280      	uxth	r0, r0
 80030d8:	0a00      	lsrs	r0, r0, #8
 80030da:	2146      	movs	r1, #70	; 0x46
 80030dc:	5460      	strb	r0, [r4, r1]
 80030de:	4668      	mov	r0, sp
 80030e0:	89c0      	ldrh	r0, [r0, #14]
 80030e2:	2147      	movs	r1, #71	; 0x47
 80030e4:	5460      	strb	r0, [r4, r1]
 80030e6:	4668      	mov	r0, sp
 80030e8:	89c0      	ldrh	r0, [r0, #14]
 80030ea:	b280      	uxth	r0, r0
 80030ec:	0a00      	lsrs	r0, r0, #8
 80030ee:	2148      	movs	r1, #72	; 0x48
 80030f0:	5460      	strb	r0, [r4, r1]
 80030f2:	9803      	ldr	r0, [sp, #12]
 80030f4:	b200      	sxth	r0, r0
 80030f6:	2149      	movs	r1, #73	; 0x49
 80030f8:	5460      	strb	r0, [r4, r1]
 80030fa:	9803      	ldr	r0, [sp, #12]
 80030fc:	b200      	sxth	r0, r0
 80030fe:	b280      	uxth	r0, r0
 8003100:	0a00      	lsrs	r0, r0, #8
 8003102:	214a      	movs	r1, #74	; 0x4a
 8003104:	5460      	strb	r0, [r4, r1]
 8003106:	e062      	b.n	80031ce <SIGFOX_INT_build_frame+0x19a>
 8003108:	aa03      	add	r2, sp, #12
 800310a:	a903      	add	r1, sp, #12
 800310c:	1c89      	adds	r1, r1, #2
 800310e:	a804      	add	r0, sp, #16
 8003110:	f00a fb96 	bl	800d840 <MCU_API_get_voltage_temperature>
 8003114:	0006      	movs	r6, r0
 8003116:	b2f6      	uxtb	r6, r6
 8003118:	2e00      	cmp	r6, #0
 800311a:	d005      	beq.n	8003128 <SIGFOX_INT_build_frame+0xf4>
 800311c:	2193      	movs	r1, #147	; 0x93
 800311e:	0030      	movs	r0, r6
 8003120:	b2c0      	uxtb	r0, r0
 8003122:	f7ff fcde 	bl	8002ae2 <RETURN_CODE>
 8003126:	e091      	b.n	800324c <SIGFOX_INT_build_frame+0x218>
 8003128:	2009      	movs	r0, #9
 800312a:	2144      	movs	r1, #68	; 0x44
 800312c:	5460      	strb	r0, [r4, r1]
 800312e:	4668      	mov	r0, sp
 8003130:	8a00      	ldrh	r0, [r0, #16]
 8003132:	2145      	movs	r1, #69	; 0x45
 8003134:	5460      	strb	r0, [r4, r1]
 8003136:	4668      	mov	r0, sp
 8003138:	8a00      	ldrh	r0, [r0, #16]
 800313a:	b280      	uxth	r0, r0
 800313c:	0a00      	lsrs	r0, r0, #8
 800313e:	2146      	movs	r1, #70	; 0x46
 8003140:	5460      	strb	r0, [r4, r1]
 8003142:	4668      	mov	r0, sp
 8003144:	89c0      	ldrh	r0, [r0, #14]
 8003146:	2147      	movs	r1, #71	; 0x47
 8003148:	5460      	strb	r0, [r4, r1]
 800314a:	4668      	mov	r0, sp
 800314c:	89c0      	ldrh	r0, [r0, #14]
 800314e:	b280      	uxth	r0, r0
 8003150:	0a00      	lsrs	r0, r0, #8
 8003152:	2148      	movs	r1, #72	; 0x48
 8003154:	5460      	strb	r0, [r4, r1]
 8003156:	9803      	ldr	r0, [sp, #12]
 8003158:	b200      	sxth	r0, r0
 800315a:	2149      	movs	r1, #73	; 0x49
 800315c:	5460      	strb	r0, [r4, r1]
 800315e:	9803      	ldr	r0, [sp, #12]
 8003160:	b200      	sxth	r0, r0
 8003162:	b280      	uxth	r0, r0
 8003164:	0a00      	lsrs	r0, r0, #8
 8003166:	214a      	movs	r1, #74	; 0x4a
 8003168:	5460      	strb	r0, [r4, r1]
 800316a:	2062      	movs	r0, #98	; 0x62
 800316c:	5a20      	ldrh	r0, [r4, r0]
 800316e:	3064      	adds	r0, #100	; 0x64
 8003170:	214b      	movs	r1, #75	; 0x4b
 8003172:	5460      	strb	r0, [r4, r1]
 8003174:	e02b      	b.n	80031ce <SIGFOX_INT_build_frame+0x19a>
 8003176:	2001      	movs	r0, #1
 8003178:	4669      	mov	r1, sp
 800317a:	74c8      	strb	r0, [r1, #19]
 800317c:	aa03      	add	r2, sp, #12
 800317e:	a903      	add	r1, sp, #12
 8003180:	1c89      	adds	r1, r1, #2
 8003182:	a804      	add	r0, sp, #16
 8003184:	f00a fb5c 	bl	800d840 <MCU_API_get_voltage_temperature>
 8003188:	0006      	movs	r6, r0
 800318a:	b2f6      	uxtb	r6, r6
 800318c:	2e00      	cmp	r6, #0
 800318e:	d005      	beq.n	800319c <SIGFOX_INT_build_frame+0x168>
 8003190:	2195      	movs	r1, #149	; 0x95
 8003192:	0030      	movs	r0, r6
 8003194:	b2c0      	uxtb	r0, r0
 8003196:	f7ff fca4 	bl	8002ae2 <RETURN_CODE>
 800319a:	e057      	b.n	800324c <SIGFOX_INT_build_frame+0x218>
 800319c:	200a      	movs	r0, #10
 800319e:	2144      	movs	r1, #68	; 0x44
 80031a0:	5460      	strb	r0, [r4, r1]
 80031a2:	4668      	mov	r0, sp
 80031a4:	8a00      	ldrh	r0, [r0, #16]
 80031a6:	21c8      	movs	r1, #200	; 0xc8
 80031a8:	f002 fdf4 	bl	8005d94 <__divsi3>
 80031ac:	2145      	movs	r1, #69	; 0x45
 80031ae:	5460      	strb	r0, [r4, r1]
 80031b0:	4668      	mov	r0, sp
 80031b2:	89c0      	ldrh	r0, [r0, #14]
 80031b4:	21c8      	movs	r1, #200	; 0xc8
 80031b6:	f002 fded 	bl	8005d94 <__divsi3>
 80031ba:	2146      	movs	r1, #70	; 0x46
 80031bc:	5460      	strb	r0, [r4, r1]
 80031be:	9803      	ldr	r0, [sp, #12]
 80031c0:	b200      	sxth	r0, r0
 80031c2:	210a      	movs	r1, #10
 80031c4:	f002 fde6 	bl	8005d94 <__divsi3>
 80031c8:	2147      	movs	r1, #71	; 0x47
 80031ca:	5460      	strb	r0, [r4, r1]
 80031cc:	e7ff      	b.n	80031ce <SIGFOX_INT_build_frame+0x19a>
 80031ce:	f001 fe3c 	bl	8004e4a <SE_API_open>
 80031d2:	0006      	movs	r6, r0
 80031d4:	b2f6      	uxtb	r6, r6
 80031d6:	2e00      	cmp	r6, #0
 80031d8:	d005      	beq.n	80031e6 <SIGFOX_INT_build_frame+0x1b2>
 80031da:	2190      	movs	r1, #144	; 0x90
 80031dc:	0030      	movs	r0, r6
 80031de:	b2c0      	uxtb	r0, r0
 80031e0:	f7ff fc7f 	bl	8002ae2 <RETURN_CODE>
 80031e4:	e032      	b.n	800324c <SIGFOX_INT_build_frame+0x218>
 80031e6:	0020      	movs	r0, r4
 80031e8:	3055      	adds	r0, #85	; 0x55
 80031ea:	9002      	str	r0, [sp, #8]
 80031ec:	0020      	movs	r0, r4
 80031ee:	303e      	adds	r0, #62	; 0x3e
 80031f0:	9001      	str	r0, [sp, #4]
 80031f2:	a804      	add	r0, sp, #16
 80031f4:	1c80      	adds	r0, r0, #2
 80031f6:	9000      	str	r0, [sp, #0]
 80031f8:	4668      	mov	r0, sp
 80031fa:	7cc3      	ldrb	r3, [r0, #19]
 80031fc:	a80c      	add	r0, sp, #48	; 0x30
 80031fe:	7802      	ldrb	r2, [r0, #0]
 8003200:	0039      	movs	r1, r7
 8003202:	b2c9      	uxtb	r1, r1
 8003204:	0020      	movs	r0, r4
 8003206:	3044      	adds	r0, #68	; 0x44
 8003208:	f001 fe2d 	bl	8004e66 <SE_API_secure_uplink_message>
 800320c:	0006      	movs	r6, r0
 800320e:	b2f6      	uxtb	r6, r6
 8003210:	2e00      	cmp	r6, #0
 8003212:	d007      	beq.n	8003224 <SIGFOX_INT_build_frame+0x1f0>
 8003214:	f001 fe1b 	bl	8004e4e <SE_API_close>
 8003218:	2190      	movs	r1, #144	; 0x90
 800321a:	0030      	movs	r0, r6
 800321c:	b2c0      	uxtb	r0, r0
 800321e:	f7ff fc60 	bl	8002ae2 <RETURN_CODE>
 8003222:	e013      	b.n	800324c <SIGFOX_INT_build_frame+0x218>
 8003224:	f001 fe13 	bl	8004e4e <SE_API_close>
 8003228:	0006      	movs	r6, r0
 800322a:	b2f6      	uxtb	r6, r6
 800322c:	2e00      	cmp	r6, #0
 800322e:	d005      	beq.n	800323c <SIGFOX_INT_build_frame+0x208>
 8003230:	2190      	movs	r1, #144	; 0x90
 8003232:	0030      	movs	r0, r6
 8003234:	b2c0      	uxtb	r0, r0
 8003236:	f7ff fc54 	bl	8002ae2 <RETURN_CODE>
 800323a:	e007      	b.n	800324c <SIGFOX_INT_build_frame+0x218>
 800323c:	2054      	movs	r0, #84	; 0x54
 800323e:	5c20      	ldrb	r0, [r4, r0]
 8003240:	4669      	mov	r1, sp
 8003242:	7c89      	ldrb	r1, [r1, #18]
 8003244:	4301      	orrs	r1, r0
 8003246:	2054      	movs	r0, #84	; 0x54
 8003248:	5421      	strb	r1, [r4, r0]
 800324a:	2000      	movs	r0, #0
 800324c:	b007      	add	sp, #28
 800324e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003250 <SIGFOX_INT_send_single_frame>:
 8003250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003252:	b087      	sub	sp, #28
 8003254:	0005      	movs	r5, r0
 8003256:	000e      	movs	r6, r1
 8003258:	0017      	movs	r7, r2
 800325a:	2000      	movs	r0, #0
 800325c:	f00a fe0a 	bl	800de74 <RF_API_init>
 8003260:	0004      	movs	r4, r0
 8003262:	b2e4      	uxtb	r4, r4
 8003264:	2c00      	cmp	r4, #0
 8003266:	d005      	beq.n	8003274 <SIGFOX_INT_send_single_frame+0x24>
 8003268:	2197      	movs	r1, #151	; 0x97
 800326a:	0020      	movs	r0, r4
 800326c:	b2c0      	uxtb	r0, r0
 800326e:	f7ff fc38 	bl	8002ae2 <RETURN_CODE>
 8003272:	e050      	b.n	8003316 <SIGFOX_INT_send_single_frame+0xc6>
 8003274:	0038      	movs	r0, r7
 8003276:	f00a ff63 	bl	800e140 <RF_API_change_frequency>
 800327a:	0004      	movs	r4, r0
 800327c:	b2e4      	uxtb	r4, r4
 800327e:	2c00      	cmp	r4, #0
 8003280:	d007      	beq.n	8003292 <SIGFOX_INT_send_single_frame+0x42>
 8003282:	f00a fe9f 	bl	800dfc4 <RF_API_stop>
 8003286:	2197      	movs	r1, #151	; 0x97
 8003288:	0020      	movs	r0, r4
 800328a:	b2c0      	uxtb	r0, r0
 800328c:	f7ff fc29 	bl	8002ae2 <RETURN_CODE>
 8003290:	e041      	b.n	8003316 <SIGFOX_INT_send_single_frame+0xc6>
 8003292:	20aa      	movs	r0, #170	; 0xaa
 8003294:	4669      	mov	r1, sp
 8003296:	7008      	strb	r0, [r1, #0]
 8003298:	20aa      	movs	r0, #170	; 0xaa
 800329a:	4669      	mov	r1, sp
 800329c:	7048      	strb	r0, [r1, #1]
 800329e:	b2f6      	uxtb	r6, r6
 80032a0:	2002      	movs	r0, #2
 80032a2:	4370      	muls	r0, r6
 80032a4:	1828      	adds	r0, r5, r0
 80032a6:	8bc0      	ldrh	r0, [r0, #30]
 80032a8:	b280      	uxth	r0, r0
 80032aa:	0a00      	lsrs	r0, r0, #8
 80032ac:	4669      	mov	r1, sp
 80032ae:	7088      	strb	r0, [r1, #2]
 80032b0:	b2f6      	uxtb	r6, r6
 80032b2:	2002      	movs	r0, #2
 80032b4:	4370      	muls	r0, r6
 80032b6:	1828      	adds	r0, r5, r0
 80032b8:	8bc0      	ldrh	r0, [r0, #30]
 80032ba:	4669      	mov	r1, sp
 80032bc:	70c8      	strb	r0, [r1, #3]
 80032be:	0033      	movs	r3, r6
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2055      	movs	r0, #85	; 0x55
 80032c4:	5c28      	ldrb	r0, [r5, r0]
 80032c6:	1f02      	subs	r2, r0, #4
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	4668      	mov	r0, sp
 80032cc:	1d01      	adds	r1, r0, #4
 80032ce:	0028      	movs	r0, r5
 80032d0:	303e      	adds	r0, #62	; 0x3e
 80032d2:	f000 fc73 	bl	8003bbc <SIGFOX_SCRAMB_compute>
 80032d6:	2055      	movs	r0, #85	; 0x55
 80032d8:	5c2a      	ldrb	r2, [r5, r0]
 80032da:	2068      	movs	r0, #104	; 0x68
 80032dc:	5c29      	ldrb	r1, [r5, r0]
 80032de:	4668      	mov	r0, sp
 80032e0:	f00a fe80 	bl	800dfe4 <RF_API_send>
 80032e4:	0004      	movs	r4, r0
 80032e6:	b2e4      	uxtb	r4, r4
 80032e8:	2c00      	cmp	r4, #0
 80032ea:	d007      	beq.n	80032fc <SIGFOX_INT_send_single_frame+0xac>
 80032ec:	f00a fe6a 	bl	800dfc4 <RF_API_stop>
 80032f0:	2197      	movs	r1, #151	; 0x97
 80032f2:	0020      	movs	r0, r4
 80032f4:	b2c0      	uxtb	r0, r0
 80032f6:	f7ff fbf4 	bl	8002ae2 <RETURN_CODE>
 80032fa:	e00c      	b.n	8003316 <SIGFOX_INT_send_single_frame+0xc6>
 80032fc:	f00a fe62 	bl	800dfc4 <RF_API_stop>
 8003300:	0004      	movs	r4, r0
 8003302:	b2e4      	uxtb	r4, r4
 8003304:	2c00      	cmp	r4, #0
 8003306:	d005      	beq.n	8003314 <SIGFOX_INT_send_single_frame+0xc4>
 8003308:	2197      	movs	r1, #151	; 0x97
 800330a:	0020      	movs	r0, r4
 800330c:	b2c0      	uxtb	r0, r0
 800330e:	f7ff fbe8 	bl	8002ae2 <RETURN_CODE>
 8003312:	e000      	b.n	8003316 <SIGFOX_INT_send_single_frame+0xc6>
 8003314:	2000      	movs	r0, #0
 8003316:	b007      	add	sp, #28
 8003318:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800331a <SIGFOX_INT_execute_carrier_sense>:
 800331a:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800331c:	000f      	movs	r7, r1
 800331e:	0016      	movs	r6, r2
 8003320:	001d      	movs	r5, r3
 8003322:	0038      	movs	r0, r7
 8003324:	b2c0      	uxtb	r0, r0
 8003326:	f00a fda5 	bl	800de74 <RF_API_init>
 800332a:	0004      	movs	r4, r0
 800332c:	b2e4      	uxtb	r4, r4
 800332e:	2c00      	cmp	r4, #0
 8003330:	d002      	beq.n	8003338 <SIGFOX_INT_execute_carrier_sense+0x1e>
 8003332:	0020      	movs	r0, r4
 8003334:	b2c0      	uxtb	r0, r0
 8003336:	e025      	b.n	8003384 <SIGFOX_INT_execute_carrier_sense+0x6a>
 8003338:	0030      	movs	r0, r6
 800333a:	f00a ff01 	bl	800e140 <RF_API_change_frequency>
 800333e:	0004      	movs	r4, r0
 8003340:	b2e4      	uxtb	r4, r4
 8003342:	2c00      	cmp	r4, #0
 8003344:	d004      	beq.n	8003350 <SIGFOX_INT_execute_carrier_sense+0x36>
 8003346:	f00a fe3d 	bl	800dfc4 <RF_API_stop>
 800334a:	0020      	movs	r0, r4
 800334c:	b2c0      	uxtb	r0, r0
 800334e:	e019      	b.n	8003384 <SIGFOX_INT_execute_carrier_sense+0x6a>
 8003350:	002a      	movs	r2, r5
 8003352:	9800      	ldr	r0, [sp, #0]
 8003354:	2130      	movs	r1, #48	; 0x30
 8003356:	5641      	ldrsb	r1, [r0, r1]
 8003358:	2005      	movs	r0, #5
 800335a:	f00a ff35 	bl	800e1c8 <RF_API_wait_for_clear_channel>
 800335e:	0004      	movs	r4, r0
 8003360:	b2e4      	uxtb	r4, r4
 8003362:	2c00      	cmp	r4, #0
 8003364:	d004      	beq.n	8003370 <SIGFOX_INT_execute_carrier_sense+0x56>
 8003366:	f00a fe2d 	bl	800dfc4 <RF_API_stop>
 800336a:	0020      	movs	r0, r4
 800336c:	b2c0      	uxtb	r0, r0
 800336e:	e009      	b.n	8003384 <SIGFOX_INT_execute_carrier_sense+0x6a>
 8003370:	f00a fe28 	bl	800dfc4 <RF_API_stop>
 8003374:	0004      	movs	r4, r0
 8003376:	b2e4      	uxtb	r4, r4
 8003378:	2c00      	cmp	r4, #0
 800337a:	d002      	beq.n	8003382 <SIGFOX_INT_execute_carrier_sense+0x68>
 800337c:	0020      	movs	r0, r4
 800337e:	b2c0      	uxtb	r0, r0
 8003380:	e000      	b.n	8003384 <SIGFOX_INT_execute_carrier_sense+0x6a>
 8003382:	2000      	movs	r0, #0
 8003384:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003386 <SIGFOX_INT_process_uplink>:
 8003386:	b5fa      	push	{r1, r3, r4, r5, r6, r7, lr}
 8003388:	b085      	sub	sp, #20
 800338a:	0005      	movs	r5, r0
 800338c:	0017      	movs	r7, r2
 800338e:	2000      	movs	r0, #0
 8003390:	4669      	mov	r1, sp
 8003392:	8088      	strh	r0, [r1, #4]
 8003394:	2000      	movs	r0, #0
 8003396:	4669      	mov	r1, sp
 8003398:	7008      	strb	r0, [r1, #0]
 800339a:	2000      	movs	r0, #0
 800339c:	4669      	mov	r1, sp
 800339e:	80c8      	strh	r0, [r1, #6]
 80033a0:	2000      	movs	r0, #0
 80033a2:	4669      	mov	r1, sp
 80033a4:	7048      	strb	r0, [r1, #1]
 80033a6:	4668      	mov	r0, sp
 80033a8:	7d00      	ldrb	r0, [r0, #20]
 80033aa:	2801      	cmp	r0, #1
 80033ac:	d102      	bne.n	80033b4 <SIGFOX_INT_process_uplink+0x2e>
 80033ae:	2001      	movs	r0, #1
 80033b0:	4669      	mov	r1, sp
 80033b2:	7048      	strb	r0, [r1, #1]
 80033b4:	2056      	movs	r0, #86	; 0x56
 80033b6:	5c28      	ldrb	r0, [r5, r0]
 80033b8:	2801      	cmp	r0, #1
 80033ba:	d003      	beq.n	80033c4 <SIGFOX_INT_process_uplink+0x3e>
 80033bc:	4668      	mov	r0, sp
 80033be:	7840      	ldrb	r0, [r0, #1]
 80033c0:	2801      	cmp	r0, #1
 80033c2:	d103      	bne.n	80033cc <SIGFOX_INT_process_uplink+0x46>
 80033c4:	2000      	movs	r0, #0
 80033c6:	4669      	mov	r1, sp
 80033c8:	70c8      	strb	r0, [r1, #3]
 80033ca:	e002      	b.n	80033d2 <SIGFOX_INT_process_uplink+0x4c>
 80033cc:	2001      	movs	r0, #1
 80033ce:	4669      	mov	r1, sp
 80033d0:	70c8      	strb	r0, [r1, #3]
 80033d2:	2056      	movs	r0, #86	; 0x56
 80033d4:	5c28      	ldrb	r0, [r5, r0]
 80033d6:	2801      	cmp	r0, #1
 80033d8:	d123      	bne.n	8003422 <SIGFOX_INT_process_uplink+0x9c>
 80033da:	2032      	movs	r0, #50	; 0x32
 80033dc:	5c28      	ldrb	r0, [r5, r0]
 80033de:	2801      	cmp	r0, #1
 80033e0:	d11f      	bne.n	8003422 <SIGFOX_INT_process_uplink+0x9c>
 80033e2:	b2ff      	uxtb	r7, r7
 80033e4:	2f00      	cmp	r7, #0
 80033e6:	d01c      	beq.n	8003422 <SIGFOX_INT_process_uplink+0x9c>
 80033e8:	4668      	mov	r0, sp
 80033ea:	7840      	ldrb	r0, [r0, #1]
 80033ec:	2801      	cmp	r0, #1
 80033ee:	d118      	bne.n	8003422 <SIGFOX_INT_process_uplink+0x9c>
 80033f0:	200a      	movs	r0, #10
 80033f2:	f00a facd 	bl	800d990 <MCU_API_timer_start>
 80033f6:	0004      	movs	r4, r0
 80033f8:	b2e4      	uxtb	r4, r4
 80033fa:	2c00      	cmp	r4, #0
 80033fc:	d005      	beq.n	800340a <SIGFOX_INT_process_uplink+0x84>
 80033fe:	2170      	movs	r1, #112	; 0x70
 8003400:	0020      	movs	r0, r4
 8003402:	b2c0      	uxtb	r0, r0
 8003404:	f7ff fb6d 	bl	8002ae2 <RETURN_CODE>
 8003408:	e19a      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 800340a:	f00a fb0b 	bl	800da24 <MCU_API_timer_wait_for_end>
 800340e:	0004      	movs	r4, r0
 8003410:	b2e4      	uxtb	r4, r4
 8003412:	2c00      	cmp	r4, #0
 8003414:	d005      	beq.n	8003422 <SIGFOX_INT_process_uplink+0x9c>
 8003416:	2171      	movs	r1, #113	; 0x71
 8003418:	0020      	movs	r0, r4
 800341a:	b2c0      	uxtb	r0, r0
 800341c:	f7ff fb61 	bl	8002ae2 <RETURN_CODE>
 8003420:	e18e      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 8003422:	4668      	mov	r0, sp
 8003424:	8b00      	ldrh	r0, [r0, #24]
 8003426:	2800      	cmp	r0, #0
 8003428:	d072      	beq.n	8003510 <SIGFOX_INT_process_uplink+0x18a>
 800342a:	2056      	movs	r0, #86	; 0x56
 800342c:	5c28      	ldrb	r0, [r5, r0]
 800342e:	2802      	cmp	r0, #2
 8003430:	d16e      	bne.n	8003510 <SIGFOX_INT_process_uplink+0x18a>
 8003432:	4668      	mov	r0, sp
 8003434:	8b00      	ldrh	r0, [r0, #24]
 8003436:	f00a fa83 	bl	800d940 <MCU_API_timer_start_carrier_sense>
 800343a:	0004      	movs	r4, r0
 800343c:	b2e4      	uxtb	r4, r4
 800343e:	2c00      	cmp	r4, #0
 8003440:	d005      	beq.n	800344e <SIGFOX_INT_process_uplink+0xc8>
 8003442:	2177      	movs	r1, #119	; 0x77
 8003444:	0020      	movs	r0, r4
 8003446:	b2c0      	uxtb	r0, r0
 8003448:	f7ff fb4b 	bl	8002ae2 <RETURN_CODE>
 800344c:	e178      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 800344e:	2100      	movs	r1, #0
 8003450:	0028      	movs	r0, r5
 8003452:	f7ff fc1f 	bl	8002c94 <SIGFOX_INT_compute_carrier_sense_frequency>
 8003456:	9003      	str	r0, [sp, #12]
 8003458:	466b      	mov	r3, sp
 800345a:	9a03      	ldr	r2, [sp, #12]
 800345c:	2031      	movs	r0, #49	; 0x31
 800345e:	5c29      	ldrb	r1, [r5, r0]
 8003460:	0028      	movs	r0, r5
 8003462:	f7ff ff5a 	bl	800331a <SIGFOX_INT_execute_carrier_sense>
 8003466:	0004      	movs	r4, r0
 8003468:	b2e4      	uxtb	r4, r4
 800346a:	2c00      	cmp	r4, #0
 800346c:	d005      	beq.n	800347a <SIGFOX_INT_process_uplink+0xf4>
 800346e:	2176      	movs	r1, #118	; 0x76
 8003470:	0020      	movs	r0, r4
 8003472:	b2c0      	uxtb	r0, r0
 8003474:	f7ff fb35 	bl	8002ae2 <RETURN_CODE>
 8003478:	e162      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 800347a:	4668      	mov	r0, sp
 800347c:	7800      	ldrb	r0, [r0, #0]
 800347e:	2800      	cmp	r0, #0
 8003480:	d113      	bne.n	80034aa <SIGFOX_INT_process_uplink+0x124>
 8003482:	4668      	mov	r0, sp
 8003484:	8880      	ldrh	r0, [r0, #4]
 8003486:	68a9      	ldr	r1, [r5, #8]
 8003488:	1e49      	subs	r1, r1, #1
 800348a:	b289      	uxth	r1, r1
 800348c:	4288      	cmp	r0, r1
 800348e:	d21c      	bcs.n	80034ca <SIGFOX_INT_process_uplink+0x144>
 8003490:	2003      	movs	r0, #3
 8003492:	f00a f9fd 	bl	800d890 <MCU_API_delay>
 8003496:	0004      	movs	r4, r0
 8003498:	b2e4      	uxtb	r4, r4
 800349a:	2c00      	cmp	r4, #0
 800349c:	d015      	beq.n	80034ca <SIGFOX_INT_process_uplink+0x144>
 800349e:	2179      	movs	r1, #121	; 0x79
 80034a0:	0020      	movs	r0, r4
 80034a2:	b2c0      	uxtb	r0, r0
 80034a4:	f7ff fb1d 	bl	8002ae2 <RETURN_CODE>
 80034a8:	e14a      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 80034aa:	4668      	mov	r0, sp
 80034ac:	7800      	ldrb	r0, [r0, #0]
 80034ae:	2801      	cmp	r0, #1
 80034b0:	d10b      	bne.n	80034ca <SIGFOX_INT_process_uplink+0x144>
 80034b2:	f00a faa7 	bl	800da04 <MCU_API_timer_stop_carrier_sense>
 80034b6:	0004      	movs	r4, r0
 80034b8:	b2e4      	uxtb	r4, r4
 80034ba:	2c00      	cmp	r4, #0
 80034bc:	d005      	beq.n	80034ca <SIGFOX_INT_process_uplink+0x144>
 80034be:	2178      	movs	r1, #120	; 0x78
 80034c0:	0020      	movs	r0, r4
 80034c2:	b2c0      	uxtb	r0, r0
 80034c4:	f7ff fb0d 	bl	8002ae2 <RETURN_CODE>
 80034c8:	e13a      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 80034ca:	4668      	mov	r0, sp
 80034cc:	4669      	mov	r1, sp
 80034ce:	8889      	ldrh	r1, [r1, #4]
 80034d0:	1c49      	adds	r1, r1, #1
 80034d2:	8081      	strh	r1, [r0, #4]
 80034d4:	4668      	mov	r0, sp
 80034d6:	8880      	ldrh	r0, [r0, #4]
 80034d8:	68a9      	ldr	r1, [r5, #8]
 80034da:	b289      	uxth	r1, r1
 80034dc:	4288      	cmp	r0, r1
 80034de:	d203      	bcs.n	80034e8 <SIGFOX_INT_process_uplink+0x162>
 80034e0:	4668      	mov	r0, sp
 80034e2:	7800      	ldrb	r0, [r0, #0]
 80034e4:	2801      	cmp	r0, #1
 80034e6:	d1a4      	bne.n	8003432 <SIGFOX_INT_process_uplink+0xac>
 80034e8:	4668      	mov	r0, sp
 80034ea:	4996      	ldr	r1, [pc, #600]	; (8003744 <.text_26>)
 80034ec:	7809      	ldrb	r1, [r1, #0]
 80034ee:	0749      	lsls	r1, r1, #29
 80034f0:	0f49      	lsrs	r1, r1, #29
 80034f2:	7201      	strb	r1, [r0, #8]
 80034f4:	4668      	mov	r0, sp
 80034f6:	7a00      	ldrb	r0, [r0, #8]
 80034f8:	4992      	ldr	r1, [pc, #584]	; (8003744 <.text_26>)
 80034fa:	7809      	ldrb	r1, [r1, #0]
 80034fc:	b2c9      	uxtb	r1, r1
 80034fe:	08c9      	lsrs	r1, r1, #3
 8003500:	b2c9      	uxtb	r1, r1
 8003502:	466a      	mov	r2, sp
 8003504:	8892      	ldrh	r2, [r2, #4]
 8003506:	1889      	adds	r1, r1, r2
 8003508:	00c9      	lsls	r1, r1, #3
 800350a:	1840      	adds	r0, r0, r1
 800350c:	498d      	ldr	r1, [pc, #564]	; (8003744 <.text_26>)
 800350e:	7008      	strb	r0, [r1, #0]
 8003510:	2056      	movs	r0, #86	; 0x56
 8003512:	5c28      	ldrb	r0, [r5, r0]
 8003514:	2802      	cmp	r0, #2
 8003516:	d109      	bne.n	800352c <SIGFOX_INT_process_uplink+0x1a6>
 8003518:	2056      	movs	r0, #86	; 0x56
 800351a:	5c28      	ldrb	r0, [r5, r0]
 800351c:	2802      	cmp	r0, #2
 800351e:	d000      	beq.n	8003522 <SIGFOX_INT_process_uplink+0x19c>
 8003520:	e107      	b.n	8003732 <SIGFOX_INT_process_uplink+0x3ac>
 8003522:	4668      	mov	r0, sp
 8003524:	7800      	ldrb	r0, [r0, #0]
 8003526:	2801      	cmp	r0, #1
 8003528:	d000      	beq.n	800352c <SIGFOX_INT_process_uplink+0x1a6>
 800352a:	e102      	b.n	8003732 <SIGFOX_INT_process_uplink+0x3ac>
 800352c:	2000      	movs	r0, #0
 800352e:	4669      	mov	r1, sp
 8003530:	7088      	strb	r0, [r1, #2]
 8003532:	2000      	movs	r0, #0
 8003534:	0006      	movs	r6, r0
 8003536:	b2f6      	uxtb	r6, r6
 8003538:	b2ff      	uxtb	r7, r7
 800353a:	0038      	movs	r0, r7
 800353c:	1c40      	adds	r0, r0, #1
 800353e:	4286      	cmp	r6, r0
 8003540:	db00      	blt.n	8003544 <SIGFOX_INT_process_uplink+0x1be>
 8003542:	e0da      	b.n	80036fa <SIGFOX_INT_process_uplink+0x374>
 8003544:	4668      	mov	r0, sp
 8003546:	7880      	ldrb	r0, [r0, #2]
 8003548:	2800      	cmp	r0, #0
 800354a:	d000      	beq.n	800354e <SIGFOX_INT_process_uplink+0x1c8>
 800354c:	e0d5      	b.n	80036fa <SIGFOX_INT_process_uplink+0x374>
 800354e:	0031      	movs	r1, r6
 8003550:	b2c9      	uxtb	r1, r1
 8003552:	0028      	movs	r0, r5
 8003554:	f000 fa50 	bl	80039f8 <SIGFOX_INT_compute_uplink_frequency>
 8003558:	9004      	str	r0, [sp, #16]
 800355a:	9a04      	ldr	r2, [sp, #16]
 800355c:	0031      	movs	r1, r6
 800355e:	b2c9      	uxtb	r1, r1
 8003560:	0028      	movs	r0, r5
 8003562:	f7ff fe75 	bl	8003250 <SIGFOX_INT_send_single_frame>
 8003566:	4669      	mov	r1, sp
 8003568:	8148      	strh	r0, [r1, #10]
 800356a:	4668      	mov	r0, sp
 800356c:	8940      	ldrh	r0, [r0, #10]
 800356e:	2800      	cmp	r0, #0
 8003570:	d002      	beq.n	8003578 <SIGFOX_INT_process_uplink+0x1f2>
 8003572:	4668      	mov	r0, sp
 8003574:	8940      	ldrh	r0, [r0, #10]
 8003576:	e0e3      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 8003578:	2056      	movs	r0, #86	; 0x56
 800357a:	5c28      	ldrb	r0, [r5, r0]
 800357c:	2802      	cmp	r0, #2
 800357e:	d104      	bne.n	800358a <SIGFOX_INT_process_uplink+0x204>
 8003580:	4870      	ldr	r0, [pc, #448]	; (8003744 <.text_26>)
 8003582:	7800      	ldrb	r0, [r0, #0]
 8003584:	1c40      	adds	r0, r0, #1
 8003586:	496f      	ldr	r1, [pc, #444]	; (8003744 <.text_26>)
 8003588:	7008      	strb	r0, [r1, #0]
 800358a:	b2f6      	uxtb	r6, r6
 800358c:	2e00      	cmp	r6, #0
 800358e:	d119      	bne.n	80035c4 <SIGFOX_INT_process_uplink+0x23e>
 8003590:	4668      	mov	r0, sp
 8003592:	7d00      	ldrb	r0, [r0, #20]
 8003594:	2801      	cmp	r0, #1
 8003596:	d115      	bne.n	80035c4 <SIGFOX_INT_process_uplink+0x23e>
 8003598:	2056      	movs	r0, #86	; 0x56
 800359a:	5c28      	ldrb	r0, [r5, r0]
 800359c:	2802      	cmp	r0, #2
 800359e:	d104      	bne.n	80035aa <SIGFOX_INT_process_uplink+0x224>
 80035a0:	2013      	movs	r0, #19
 80035a2:	f00a f9f5 	bl	800d990 <MCU_API_timer_start>
 80035a6:	0004      	movs	r4, r0
 80035a8:	e003      	b.n	80035b2 <SIGFOX_INT_process_uplink+0x22c>
 80035aa:	2014      	movs	r0, #20
 80035ac:	f00a f9f0 	bl	800d990 <MCU_API_timer_start>
 80035b0:	0004      	movs	r4, r0
 80035b2:	b2e4      	uxtb	r4, r4
 80035b4:	2c00      	cmp	r4, #0
 80035b6:	d02e      	beq.n	8003616 <SIGFOX_INT_process_uplink+0x290>
 80035b8:	2175      	movs	r1, #117	; 0x75
 80035ba:	0020      	movs	r0, r4
 80035bc:	b2c0      	uxtb	r0, r0
 80035be:	f7ff fa90 	bl	8002ae2 <RETURN_CODE>
 80035c2:	e0bd      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 80035c4:	b2f6      	uxtb	r6, r6
 80035c6:	2e00      	cmp	r6, #0
 80035c8:	d125      	bne.n	8003616 <SIGFOX_INT_process_uplink+0x290>
 80035ca:	2056      	movs	r0, #86	; 0x56
 80035cc:	5c28      	ldrb	r0, [r5, r0]
 80035ce:	2801      	cmp	r0, #1
 80035d0:	d121      	bne.n	8003616 <SIGFOX_INT_process_uplink+0x290>
 80035d2:	2032      	movs	r0, #50	; 0x32
 80035d4:	5c28      	ldrb	r0, [r5, r0]
 80035d6:	2801      	cmp	r0, #1
 80035d8:	d11d      	bne.n	8003616 <SIGFOX_INT_process_uplink+0x290>
 80035da:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
 80035dc:	b2ff      	uxtb	r7, r7
 80035de:	0039      	movs	r1, r7
 80035e0:	1c49      	adds	r1, r1, #1
 80035e2:	f002 fbd7 	bl	8005d94 <__divsi3>
 80035e6:	0001      	movs	r1, r0
 80035e8:	2014      	movs	r0, #20
 80035ea:	f002 fbc1 	bl	8005d70 <__udivsi3>
 80035ee:	4669      	mov	r1, sp
 80035f0:	80c8      	strh	r0, [r1, #6]
 80035f2:	4668      	mov	r0, sp
 80035f4:	88c0      	ldrh	r0, [r0, #6]
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d00d      	beq.n	8003616 <SIGFOX_INT_process_uplink+0x290>
 80035fa:	4668      	mov	r0, sp
 80035fc:	88c0      	ldrh	r0, [r0, #6]
 80035fe:	f00a f9c7 	bl	800d990 <MCU_API_timer_start>
 8003602:	0004      	movs	r4, r0
 8003604:	b2e4      	uxtb	r4, r4
 8003606:	2c00      	cmp	r4, #0
 8003608:	d005      	beq.n	8003616 <SIGFOX_INT_process_uplink+0x290>
 800360a:	2172      	movs	r1, #114	; 0x72
 800360c:	0020      	movs	r0, r4
 800360e:	b2c0      	uxtb	r0, r0
 8003610:	f7ff fa67 	bl	8002ae2 <RETURN_CODE>
 8003614:	e094      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 8003616:	2056      	movs	r0, #86	; 0x56
 8003618:	5c28      	ldrb	r0, [r5, r0]
 800361a:	2802      	cmp	r0, #2
 800361c:	d116      	bne.n	800364c <SIGFOX_INT_process_uplink+0x2c6>
 800361e:	0030      	movs	r0, r6
 8003620:	0039      	movs	r1, r7
 8003622:	b2c0      	uxtb	r0, r0
 8003624:	b2c9      	uxtb	r1, r1
 8003626:	4288      	cmp	r0, r1
 8003628:	d210      	bcs.n	800364c <SIGFOX_INT_process_uplink+0x2c6>
 800362a:	b2f6      	uxtb	r6, r6
 800362c:	2e00      	cmp	r6, #0
 800362e:	d10d      	bne.n	800364c <SIGFOX_INT_process_uplink+0x2c6>
 8003630:	20fa      	movs	r0, #250	; 0xfa
 8003632:	0140      	lsls	r0, r0, #5
 8003634:	f00a f984 	bl	800d940 <MCU_API_timer_start_carrier_sense>
 8003638:	0004      	movs	r4, r0
 800363a:	b2e4      	uxtb	r4, r4
 800363c:	2c00      	cmp	r4, #0
 800363e:	d005      	beq.n	800364c <SIGFOX_INT_process_uplink+0x2c6>
 8003640:	217b      	movs	r1, #123	; 0x7b
 8003642:	0020      	movs	r0, r4
 8003644:	b2c0      	uxtb	r0, r0
 8003646:	f7ff fa4c 	bl	8002ae2 <RETURN_CODE>
 800364a:	e079      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 800364c:	4668      	mov	r0, sp
 800364e:	78c0      	ldrb	r0, [r0, #3]
 8003650:	f00a f91e 	bl	800d890 <MCU_API_delay>
 8003654:	0004      	movs	r4, r0
 8003656:	b2e4      	uxtb	r4, r4
 8003658:	2c00      	cmp	r4, #0
 800365a:	d005      	beq.n	8003668 <SIGFOX_INT_process_uplink+0x2e2>
 800365c:	2174      	movs	r1, #116	; 0x74
 800365e:	0020      	movs	r0, r4
 8003660:	b2c0      	uxtb	r0, r0
 8003662:	f7ff fa3e 	bl	8002ae2 <RETURN_CODE>
 8003666:	e06b      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 8003668:	2056      	movs	r0, #86	; 0x56
 800366a:	5c28      	ldrb	r0, [r5, r0]
 800366c:	2802      	cmp	r0, #2
 800366e:	d142      	bne.n	80036f6 <SIGFOX_INT_process_uplink+0x370>
 8003670:	0030      	movs	r0, r6
 8003672:	0039      	movs	r1, r7
 8003674:	b2c0      	uxtb	r0, r0
 8003676:	b2c9      	uxtb	r1, r1
 8003678:	4288      	cmp	r0, r1
 800367a:	d23c      	bcs.n	80036f6 <SIGFOX_INT_process_uplink+0x370>
 800367c:	0031      	movs	r1, r6
 800367e:	1c49      	adds	r1, r1, #1
 8003680:	b2c9      	uxtb	r1, r1
 8003682:	0028      	movs	r0, r5
 8003684:	f7ff fb06 	bl	8002c94 <SIGFOX_INT_compute_carrier_sense_frequency>
 8003688:	9003      	str	r0, [sp, #12]
 800368a:	466b      	mov	r3, sp
 800368c:	9a03      	ldr	r2, [sp, #12]
 800368e:	2031      	movs	r0, #49	; 0x31
 8003690:	5c29      	ldrb	r1, [r5, r0]
 8003692:	0028      	movs	r0, r5
 8003694:	f7ff fe41 	bl	800331a <SIGFOX_INT_execute_carrier_sense>
 8003698:	0004      	movs	r4, r0
 800369a:	b2e4      	uxtb	r4, r4
 800369c:	2c00      	cmp	r4, #0
 800369e:	d005      	beq.n	80036ac <SIGFOX_INT_process_uplink+0x326>
 80036a0:	217a      	movs	r1, #122	; 0x7a
 80036a2:	0020      	movs	r0, r4
 80036a4:	b2c0      	uxtb	r0, r0
 80036a6:	f7ff fa1c 	bl	8002ae2 <RETURN_CODE>
 80036aa:	e049      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 80036ac:	4668      	mov	r0, sp
 80036ae:	7800      	ldrb	r0, [r0, #0]
 80036b0:	2800      	cmp	r0, #0
 80036b2:	d10f      	bne.n	80036d4 <SIGFOX_INT_process_uplink+0x34e>
 80036b4:	f00a f9a6 	bl	800da04 <MCU_API_timer_stop_carrier_sense>
 80036b8:	0004      	movs	r4, r0
 80036ba:	b2e4      	uxtb	r4, r4
 80036bc:	2c00      	cmp	r4, #0
 80036be:	d005      	beq.n	80036cc <SIGFOX_INT_process_uplink+0x346>
 80036c0:	217c      	movs	r1, #124	; 0x7c
 80036c2:	0020      	movs	r0, r4
 80036c4:	b2c0      	uxtb	r0, r0
 80036c6:	f7ff fa0c 	bl	8002ae2 <RETURN_CODE>
 80036ca:	e039      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 80036cc:	2001      	movs	r0, #1
 80036ce:	4669      	mov	r1, sp
 80036d0:	7088      	strb	r0, [r1, #2]
 80036d2:	e010      	b.n	80036f6 <SIGFOX_INT_process_uplink+0x370>
 80036d4:	b2f6      	uxtb	r6, r6
 80036d6:	b2ff      	uxtb	r7, r7
 80036d8:	1e78      	subs	r0, r7, #1
 80036da:	4286      	cmp	r6, r0
 80036dc:	d10b      	bne.n	80036f6 <SIGFOX_INT_process_uplink+0x370>
 80036de:	f00a f991 	bl	800da04 <MCU_API_timer_stop_carrier_sense>
 80036e2:	0004      	movs	r4, r0
 80036e4:	b2e4      	uxtb	r4, r4
 80036e6:	2c00      	cmp	r4, #0
 80036e8:	d005      	beq.n	80036f6 <SIGFOX_INT_process_uplink+0x370>
 80036ea:	217d      	movs	r1, #125	; 0x7d
 80036ec:	0020      	movs	r0, r4
 80036ee:	b2c0      	uxtb	r0, r0
 80036f0:	f7ff f9f7 	bl	8002ae2 <RETURN_CODE>
 80036f4:	e024      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 80036f6:	1c76      	adds	r6, r6, #1
 80036f8:	e71d      	b.n	8003536 <SIGFOX_INT_process_uplink+0x1b0>
 80036fa:	2056      	movs	r0, #86	; 0x56
 80036fc:	5c28      	ldrb	r0, [r5, r0]
 80036fe:	2801      	cmp	r0, #1
 8003700:	d11d      	bne.n	800373e <SIGFOX_INT_process_uplink+0x3b8>
 8003702:	2032      	movs	r0, #50	; 0x32
 8003704:	5c28      	ldrb	r0, [r5, r0]
 8003706:	2801      	cmp	r0, #1
 8003708:	d119      	bne.n	800373e <SIGFOX_INT_process_uplink+0x3b8>
 800370a:	4668      	mov	r0, sp
 800370c:	88c0      	ldrh	r0, [r0, #6]
 800370e:	2800      	cmp	r0, #0
 8003710:	d015      	beq.n	800373e <SIGFOX_INT_process_uplink+0x3b8>
 8003712:	4668      	mov	r0, sp
 8003714:	7840      	ldrb	r0, [r0, #1]
 8003716:	2800      	cmp	r0, #0
 8003718:	d111      	bne.n	800373e <SIGFOX_INT_process_uplink+0x3b8>
 800371a:	f00a f983 	bl	800da24 <MCU_API_timer_wait_for_end>
 800371e:	0004      	movs	r4, r0
 8003720:	b2e4      	uxtb	r4, r4
 8003722:	2c00      	cmp	r4, #0
 8003724:	d00b      	beq.n	800373e <SIGFOX_INT_process_uplink+0x3b8>
 8003726:	2173      	movs	r1, #115	; 0x73
 8003728:	0020      	movs	r0, r4
 800372a:	b2c0      	uxtb	r0, r0
 800372c:	f7ff f9d9 	bl	8002ae2 <RETURN_CODE>
 8003730:	e006      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 8003732:	4668      	mov	r0, sp
 8003734:	7800      	ldrb	r0, [r0, #0]
 8003736:	2800      	cmp	r0, #0
 8003738:	d101      	bne.n	800373e <SIGFOX_INT_process_uplink+0x3b8>
 800373a:	207e      	movs	r0, #126	; 0x7e
 800373c:	e000      	b.n	8003740 <SIGFOX_INT_process_uplink+0x3ba>
 800373e:	2000      	movs	r0, #0
 8003740:	b007      	add	sp, #28
 8003742:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003744 <.text_26>:
 8003744:	200002d4 	.word	0x200002d4

08003748 <SIGFOX_INT_process_downlink>:
 8003748:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800374a:	0004      	movs	r4, r0
 800374c:	000f      	movs	r7, r1
 800374e:	0016      	movs	r6, r2
 8003750:	b2f6      	uxtb	r6, r6
 8003752:	2e01      	cmp	r6, #1
 8003754:	d10d      	bne.n	8003772 <SIGFOX_INT_process_downlink+0x2a>
 8003756:	f00a f965 	bl	800da24 <MCU_API_timer_wait_for_end>
 800375a:	4669      	mov	r1, sp
 800375c:	7008      	strb	r0, [r1, #0]
 800375e:	4668      	mov	r0, sp
 8003760:	7800      	ldrb	r0, [r0, #0]
 8003762:	2800      	cmp	r0, #0
 8003764:	d005      	beq.n	8003772 <SIGFOX_INT_process_downlink+0x2a>
 8003766:	2198      	movs	r1, #152	; 0x98
 8003768:	4668      	mov	r0, sp
 800376a:	7800      	ldrb	r0, [r0, #0]
 800376c:	f7ff f9b9 	bl	8002ae2 <RETURN_CODE>
 8003770:	e025      	b.n	80037be <SIGFOX_INT_process_downlink+0x76>
 8003772:	0020      	movs	r0, r4
 8003774:	f000 f99e 	bl	8003ab4 <SIGFOX_INT_compute_downlink_frequency>
 8003778:	9002      	str	r0, [sp, #8]
 800377a:	2056      	movs	r0, #86	; 0x56
 800377c:	5c20      	ldrb	r0, [r4, r0]
 800377e:	2802      	cmp	r0, #2
 8003780:	d102      	bne.n	8003788 <SIGFOX_INT_process_downlink+0x40>
 8003782:	2022      	movs	r0, #34	; 0x22
 8003784:	9001      	str	r0, [sp, #4]
 8003786:	e001      	b.n	800378c <SIGFOX_INT_process_downlink+0x44>
 8003788:	2019      	movs	r0, #25
 800378a:	9001      	str	r0, [sp, #4]
 800378c:	9a02      	ldr	r2, [sp, #8]
 800378e:	9901      	ldr	r1, [sp, #4]
 8003790:	2001      	movs	r0, #1
 8003792:	f000 f815 	bl	80037c0 <SIGFOX_INT_downlink_configuration>
 8003796:	0005      	movs	r5, r0
 8003798:	b2ad      	uxth	r5, r5
 800379a:	2d00      	cmp	r5, #0
 800379c:	d002      	beq.n	80037a4 <SIGFOX_INT_process_downlink+0x5c>
 800379e:	0028      	movs	r0, r5
 80037a0:	b280      	uxth	r0, r0
 80037a2:	e00c      	b.n	80037be <SIGFOX_INT_process_downlink+0x76>
 80037a4:	003a      	movs	r2, r7
 80037a6:	2101      	movs	r1, #1
 80037a8:	0020      	movs	r0, r4
 80037aa:	f000 f84d 	bl	8003848 <SIGFOX_INT_get_received_frames>
 80037ae:	0005      	movs	r5, r0
 80037b0:	b2ad      	uxth	r5, r5
 80037b2:	2d00      	cmp	r5, #0
 80037b4:	d002      	beq.n	80037bc <SIGFOX_INT_process_downlink+0x74>
 80037b6:	0028      	movs	r0, r5
 80037b8:	b280      	uxth	r0, r0
 80037ba:	e000      	b.n	80037be <SIGFOX_INT_process_downlink+0x76>
 80037bc:	2000      	movs	r0, #0
 80037be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080037c0 <SIGFOX_INT_downlink_configuration>:
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	0007      	movs	r7, r0
 80037c4:	000e      	movs	r6, r1
 80037c6:	0014      	movs	r4, r2
 80037c8:	2001      	movs	r0, #1
 80037ca:	f00a fb53 	bl	800de74 <RF_API_init>
 80037ce:	0005      	movs	r5, r0
 80037d0:	b2ed      	uxtb	r5, r5
 80037d2:	2d00      	cmp	r5, #0
 80037d4:	d005      	beq.n	80037e2 <SIGFOX_INT_downlink_configuration+0x22>
 80037d6:	21e0      	movs	r1, #224	; 0xe0
 80037d8:	0028      	movs	r0, r5
 80037da:	b2c0      	uxtb	r0, r0
 80037dc:	f7ff f981 	bl	8002ae2 <RETURN_CODE>
 80037e0:	e031      	b.n	8003846 <SIGFOX_INT_downlink_configuration+0x86>
 80037e2:	0020      	movs	r0, r4
 80037e4:	f00a fcac 	bl	800e140 <RF_API_change_frequency>
 80037e8:	0005      	movs	r5, r0
 80037ea:	b2ed      	uxtb	r5, r5
 80037ec:	2d00      	cmp	r5, #0
 80037ee:	d007      	beq.n	8003800 <SIGFOX_INT_downlink_configuration+0x40>
 80037f0:	f00a fbe8 	bl	800dfc4 <RF_API_stop>
 80037f4:	21e0      	movs	r1, #224	; 0xe0
 80037f6:	0028      	movs	r0, r5
 80037f8:	b2c0      	uxtb	r0, r0
 80037fa:	f7ff f972 	bl	8002ae2 <RETURN_CODE>
 80037fe:	e022      	b.n	8003846 <SIGFOX_INT_downlink_configuration+0x86>
 8003800:	0030      	movs	r0, r6
 8003802:	f00a f8c5 	bl	800d990 <MCU_API_timer_start>
 8003806:	0005      	movs	r5, r0
 8003808:	b2ed      	uxtb	r5, r5
 800380a:	2d00      	cmp	r5, #0
 800380c:	d007      	beq.n	800381e <SIGFOX_INT_downlink_configuration+0x5e>
 800380e:	f00a fbd9 	bl	800dfc4 <RF_API_stop>
 8003812:	21e0      	movs	r1, #224	; 0xe0
 8003814:	0028      	movs	r0, r5
 8003816:	b2c0      	uxtb	r0, r0
 8003818:	f7ff f963 	bl	8002ae2 <RETURN_CODE>
 800381c:	e013      	b.n	8003846 <SIGFOX_INT_downlink_configuration+0x86>
 800381e:	b2ff      	uxtb	r7, r7
 8003820:	2f01      	cmp	r7, #1
 8003822:	d10f      	bne.n	8003844 <SIGFOX_INT_downlink_configuration+0x84>
 8003824:	f001 fb11 	bl	8004e4a <SE_API_open>
 8003828:	0005      	movs	r5, r0
 800382a:	b2ed      	uxtb	r5, r5
 800382c:	2d00      	cmp	r5, #0
 800382e:	d009      	beq.n	8003844 <SIGFOX_INT_downlink_configuration+0x84>
 8003830:	f00a fbc8 	bl	800dfc4 <RF_API_stop>
 8003834:	f00a f8d6 	bl	800d9e4 <MCU_API_timer_stop>
 8003838:	21e0      	movs	r1, #224	; 0xe0
 800383a:	0028      	movs	r0, r5
 800383c:	b2c0      	uxtb	r0, r0
 800383e:	f7ff f950 	bl	8002ae2 <RETURN_CODE>
 8003842:	e000      	b.n	8003846 <SIGFOX_INT_downlink_configuration+0x86>
 8003844:	2000      	movs	r0, #0
 8003846:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003848 <SIGFOX_INT_get_received_frames>:
 8003848:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 800384a:	b087      	sub	sp, #28
 800384c:	0016      	movs	r6, r2
 800384e:	2500      	movs	r5, #0
 8003850:	2000      	movs	r0, #0
 8003852:	4669      	mov	r1, sp
 8003854:	7088      	strb	r0, [r1, #2]
 8003856:	2700      	movs	r7, #0
 8003858:	2000      	movs	r0, #0
 800385a:	4669      	mov	r1, sp
 800385c:	7188      	strb	r0, [r1, #6]
 800385e:	2000      	movs	r0, #0
 8003860:	4669      	mov	r1, sp
 8003862:	7148      	strb	r0, [r1, #5]
 8003864:	2000      	movs	r0, #0
 8003866:	4669      	mov	r1, sp
 8003868:	7048      	strb	r0, [r1, #1]
 800386a:	2000      	movs	r0, #0
 800386c:	4669      	mov	r1, sp
 800386e:	7108      	strb	r0, [r1, #4]
 8003870:	a802      	add	r0, sp, #8
 8003872:	2110      	movs	r1, #16
 8003874:	f020 fb00 	bl	8023e78 <__aeabi_memclr>
 8003878:	2000      	movs	r0, #0
 800387a:	4669      	mov	r1, sp
 800387c:	71c8      	strb	r0, [r1, #7]
 800387e:	2000      	movs	r0, #0
 8003880:	4669      	mov	r1, sp
 8003882:	7008      	strb	r0, [r1, #0]
 8003884:	2000      	movs	r0, #0
 8003886:	4669      	mov	r1, sp
 8003888:	70c8      	strb	r0, [r1, #3]
 800388a:	466a      	mov	r2, sp
 800388c:	9807      	ldr	r0, [sp, #28]
 800388e:	0001      	movs	r1, r0
 8003890:	3162      	adds	r1, #98	; 0x62
 8003892:	a802      	add	r0, sp, #8
 8003894:	f00a fc6a 	bl	800e16c <RF_API_wait_frame>
 8003898:	0007      	movs	r7, r0
 800389a:	4668      	mov	r0, sp
 800389c:	7800      	ldrb	r0, [r0, #0]
 800389e:	2801      	cmp	r0, #1
 80038a0:	d14a      	bne.n	8003938 <SIGFOX_INT_get_received_frames+0xf0>
 80038a2:	a808      	add	r0, sp, #32
 80038a4:	7800      	ldrb	r0, [r0, #0]
 80038a6:	2801      	cmp	r0, #1
 80038a8:	d122      	bne.n	80038f0 <SIGFOX_INT_get_received_frames+0xa8>
 80038aa:	a901      	add	r1, sp, #4
 80038ac:	1cc9      	adds	r1, r1, #3
 80038ae:	a802      	add	r0, sp, #8
 80038b0:	f001 fbe6 	bl	8005080 <SE_API_verify_downlink_message>
 80038b4:	4669      	mov	r1, sp
 80038b6:	7088      	strb	r0, [r1, #2]
 80038b8:	4668      	mov	r0, sp
 80038ba:	7880      	ldrb	r0, [r0, #2]
 80038bc:	2800      	cmp	r0, #0
 80038be:	d002      	beq.n	80038c6 <SIGFOX_INT_get_received_frames+0x7e>
 80038c0:	2001      	movs	r0, #1
 80038c2:	0005      	movs	r5, r0
 80038c4:	e03a      	b.n	800393c <SIGFOX_INT_get_received_frames+0xf4>
 80038c6:	4668      	mov	r0, sp
 80038c8:	79c0      	ldrb	r0, [r0, #7]
 80038ca:	2801      	cmp	r0, #1
 80038cc:	d136      	bne.n	800393c <SIGFOX_INT_get_received_frames+0xf4>
 80038ce:	2000      	movs	r0, #0
 80038d0:	0004      	movs	r4, r0
 80038d2:	b2e4      	uxtb	r4, r4
 80038d4:	2c08      	cmp	r4, #8
 80038d6:	da08      	bge.n	80038ea <SIGFOX_INT_get_received_frames+0xa2>
 80038d8:	a902      	add	r1, sp, #8
 80038da:	0020      	movs	r0, r4
 80038dc:	1d00      	adds	r0, r0, #4
 80038de:	b2c0      	uxtb	r0, r0
 80038e0:	5c08      	ldrb	r0, [r1, r0]
 80038e2:	b2e4      	uxtb	r4, r4
 80038e4:	5530      	strb	r0, [r6, r4]
 80038e6:	1c64      	adds	r4, r4, #1
 80038e8:	e7f3      	b.n	80038d2 <SIGFOX_INT_get_received_frames+0x8a>
 80038ea:	2001      	movs	r0, #1
 80038ec:	0005      	movs	r5, r0
 80038ee:	e025      	b.n	800393c <SIGFOX_INT_get_received_frames+0xf4>
 80038f0:	2001      	movs	r0, #1
 80038f2:	4669      	mov	r1, sp
 80038f4:	70c8      	strb	r0, [r1, #3]
 80038f6:	2000      	movs	r0, #0
 80038f8:	0004      	movs	r4, r0
 80038fa:	b2e4      	uxtb	r4, r4
 80038fc:	2c0f      	cmp	r4, #15
 80038fe:	da0b      	bge.n	8003918 <SIGFOX_INT_get_received_frames+0xd0>
 8003900:	b2e4      	uxtb	r4, r4
 8003902:	5d30      	ldrb	r0, [r6, r4]
 8003904:	a902      	add	r1, sp, #8
 8003906:	b2e4      	uxtb	r4, r4
 8003908:	5d09      	ldrb	r1, [r1, r4]
 800390a:	4288      	cmp	r0, r1
 800390c:	d002      	beq.n	8003914 <SIGFOX_INT_get_received_frames+0xcc>
 800390e:	2000      	movs	r0, #0
 8003910:	4669      	mov	r1, sp
 8003912:	70c8      	strb	r0, [r1, #3]
 8003914:	1c64      	adds	r4, r4, #1
 8003916:	e7f0      	b.n	80038fa <SIGFOX_INT_get_received_frames+0xb2>
 8003918:	9807      	ldr	r0, [sp, #28]
 800391a:	2162      	movs	r1, #98	; 0x62
 800391c:	5e41      	ldrsh	r1, [r0, r1]
 800391e:	4668      	mov	r0, sp
 8003920:	78c0      	ldrb	r0, [r0, #3]
 8003922:	f00a f88d 	bl	800da40 <MCU_API_report_test_result>
 8003926:	4669      	mov	r1, sp
 8003928:	7048      	strb	r0, [r1, #1]
 800392a:	4668      	mov	r0, sp
 800392c:	7840      	ldrb	r0, [r0, #1]
 800392e:	2800      	cmp	r0, #0
 8003930:	d004      	beq.n	800393c <SIGFOX_INT_get_received_frames+0xf4>
 8003932:	2001      	movs	r0, #1
 8003934:	0005      	movs	r5, r0
 8003936:	e001      	b.n	800393c <SIGFOX_INT_get_received_frames+0xf4>
 8003938:	2001      	movs	r0, #1
 800393a:	0005      	movs	r5, r0
 800393c:	b2ed      	uxtb	r5, r5
 800393e:	2d00      	cmp	r5, #0
 8003940:	d102      	bne.n	8003948 <SIGFOX_INT_get_received_frames+0x100>
 8003942:	b2ff      	uxtb	r7, r7
 8003944:	2f00      	cmp	r7, #0
 8003946:	d0a0      	beq.n	800388a <SIGFOX_INT_get_received_frames+0x42>
 8003948:	f00a fb3c 	bl	800dfc4 <RF_API_stop>
 800394c:	4669      	mov	r1, sp
 800394e:	7188      	strb	r0, [r1, #6]
 8003950:	4668      	mov	r0, sp
 8003952:	7800      	ldrb	r0, [r0, #0]
 8003954:	2800      	cmp	r0, #0
 8003956:	d003      	beq.n	8003960 <SIGFOX_INT_get_received_frames+0x118>
 8003958:	f00a f844 	bl	800d9e4 <MCU_API_timer_stop>
 800395c:	4669      	mov	r1, sp
 800395e:	7148      	strb	r0, [r1, #5]
 8003960:	a808      	add	r0, sp, #32
 8003962:	7800      	ldrb	r0, [r0, #0]
 8003964:	2801      	cmp	r0, #1
 8003966:	d103      	bne.n	8003970 <SIGFOX_INT_get_received_frames+0x128>
 8003968:	f001 fa71 	bl	8004e4e <SE_API_close>
 800396c:	4669      	mov	r1, sp
 800396e:	7108      	strb	r0, [r1, #4]
 8003970:	4668      	mov	r0, sp
 8003972:	7880      	ldrb	r0, [r0, #2]
 8003974:	2800      	cmp	r0, #0
 8003976:	d005      	beq.n	8003984 <SIGFOX_INT_get_received_frames+0x13c>
 8003978:	219a      	movs	r1, #154	; 0x9a
 800397a:	4668      	mov	r0, sp
 800397c:	7880      	ldrb	r0, [r0, #2]
 800397e:	f7ff f8b0 	bl	8002ae2 <RETURN_CODE>
 8003982:	e037      	b.n	80039f4 <SIGFOX_INT_get_received_frames+0x1ac>
 8003984:	b2ff      	uxtb	r7, r7
 8003986:	2f00      	cmp	r7, #0
 8003988:	d005      	beq.n	8003996 <SIGFOX_INT_get_received_frames+0x14e>
 800398a:	219a      	movs	r1, #154	; 0x9a
 800398c:	0038      	movs	r0, r7
 800398e:	b2c0      	uxtb	r0, r0
 8003990:	f7ff f8a7 	bl	8002ae2 <RETURN_CODE>
 8003994:	e02e      	b.n	80039f4 <SIGFOX_INT_get_received_frames+0x1ac>
 8003996:	4668      	mov	r0, sp
 8003998:	7980      	ldrb	r0, [r0, #6]
 800399a:	2800      	cmp	r0, #0
 800399c:	d005      	beq.n	80039aa <SIGFOX_INT_get_received_frames+0x162>
 800399e:	219a      	movs	r1, #154	; 0x9a
 80039a0:	4668      	mov	r0, sp
 80039a2:	7980      	ldrb	r0, [r0, #6]
 80039a4:	f7ff f89d 	bl	8002ae2 <RETURN_CODE>
 80039a8:	e024      	b.n	80039f4 <SIGFOX_INT_get_received_frames+0x1ac>
 80039aa:	4668      	mov	r0, sp
 80039ac:	7940      	ldrb	r0, [r0, #5]
 80039ae:	2800      	cmp	r0, #0
 80039b0:	d005      	beq.n	80039be <SIGFOX_INT_get_received_frames+0x176>
 80039b2:	219a      	movs	r1, #154	; 0x9a
 80039b4:	4668      	mov	r0, sp
 80039b6:	7940      	ldrb	r0, [r0, #5]
 80039b8:	f7ff f893 	bl	8002ae2 <RETURN_CODE>
 80039bc:	e01a      	b.n	80039f4 <SIGFOX_INT_get_received_frames+0x1ac>
 80039be:	4668      	mov	r0, sp
 80039c0:	7840      	ldrb	r0, [r0, #1]
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d005      	beq.n	80039d2 <SIGFOX_INT_get_received_frames+0x18a>
 80039c6:	219a      	movs	r1, #154	; 0x9a
 80039c8:	4668      	mov	r0, sp
 80039ca:	7840      	ldrb	r0, [r0, #1]
 80039cc:	f7ff f889 	bl	8002ae2 <RETURN_CODE>
 80039d0:	e010      	b.n	80039f4 <SIGFOX_INT_get_received_frames+0x1ac>
 80039d2:	4668      	mov	r0, sp
 80039d4:	7900      	ldrb	r0, [r0, #4]
 80039d6:	2800      	cmp	r0, #0
 80039d8:	d005      	beq.n	80039e6 <SIGFOX_INT_get_received_frames+0x19e>
 80039da:	219a      	movs	r1, #154	; 0x9a
 80039dc:	4668      	mov	r0, sp
 80039de:	7900      	ldrb	r0, [r0, #4]
 80039e0:	f7ff f87f 	bl	8002ae2 <RETURN_CODE>
 80039e4:	e006      	b.n	80039f4 <SIGFOX_INT_get_received_frames+0x1ac>
 80039e6:	4668      	mov	r0, sp
 80039e8:	7800      	ldrb	r0, [r0, #0]
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d101      	bne.n	80039f2 <SIGFOX_INT_get_received_frames+0x1aa>
 80039ee:	209b      	movs	r0, #155	; 0x9b
 80039f0:	e000      	b.n	80039f4 <SIGFOX_INT_get_received_frames+0x1ac>
 80039f2:	2000      	movs	r0, #0
 80039f4:	b009      	add	sp, #36	; 0x24
 80039f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039f8 <SIGFOX_INT_compute_uplink_frequency>:
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fa:	0004      	movs	r4, r0
 80039fc:	000e      	movs	r6, r1
 80039fe:	2700      	movs	r7, #0
 8003a00:	2500      	movs	r5, #0
 8003a02:	2056      	movs	r0, #86	; 0x56
 8003a04:	5c20      	ldrb	r0, [r4, r0]
 8003a06:	2804      	cmp	r0, #4
 8003a08:	d003      	beq.n	8003a12 <SIGFOX_INT_compute_uplink_frequency+0x1a>
 8003a0a:	2056      	movs	r0, #86	; 0x56
 8003a0c:	5c20      	ldrb	r0, [r4, r0]
 8003a0e:	2802      	cmp	r0, #2
 8003a10:	d10e      	bne.n	8003a30 <SIGFOX_INT_compute_uplink_frequency+0x38>
 8003a12:	b2f6      	uxtb	r6, r6
 8003a14:	2002      	movs	r0, #2
 8003a16:	4370      	muls	r0, r6
 8003a18:	1820      	adds	r0, r4, r0
 8003a1a:	8b00      	ldrh	r0, [r0, #24]
 8003a1c:	215c      	movs	r1, #92	; 0x5c
 8003a1e:	5a61      	ldrh	r1, [r4, r1]
 8003a20:	4348      	muls	r0, r1
 8003a22:	0005      	movs	r5, r0
 8003a24:	6820      	ldr	r0, [r4, #0]
 8003a26:	1940      	adds	r0, r0, r5
 8003a28:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003a2a:	0849      	lsrs	r1, r1, #1
 8003a2c:	1a40      	subs	r0, r0, r1
 8003a2e:	0007      	movs	r7, r0
 8003a30:	2056      	movs	r0, #86	; 0x56
 8003a32:	5c20      	ldrb	r0, [r4, r0]
 8003a34:	2801      	cmp	r0, #1
 8003a36:	d12e      	bne.n	8003a96 <SIGFOX_INT_compute_uplink_frequency+0x9e>
 8003a38:	b2f6      	uxtb	r6, r6
 8003a3a:	2002      	movs	r0, #2
 8003a3c:	4370      	muls	r0, r6
 8003a3e:	1820      	adds	r0, r4, r0
 8003a40:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8003a42:	1f81      	subs	r1, r0, #6
 8003a44:	b289      	uxth	r1, r1
 8003a46:	0020      	movs	r0, r4
 8003a48:	f7fe ffe4 	bl	8002a14 <SIGFOX_INT_get_macro_channel_index>
 8003a4c:	4669      	mov	r1, sp
 8003a4e:	7008      	strb	r0, [r1, #0]
 8003a50:	2060      	movs	r0, #96	; 0x60
 8003a52:	5a20      	ldrh	r0, [r4, r0]
 8003a54:	0005      	movs	r5, r0
 8003a56:	b2f6      	uxtb	r6, r6
 8003a58:	2002      	movs	r0, #2
 8003a5a:	4370      	muls	r0, r6
 8003a5c:	1820      	adds	r0, r4, r0
 8003a5e:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8003a60:	1e40      	subs	r0, r0, #1
 8003a62:	2106      	movs	r1, #6
 8003a64:	f002 f98e 	bl	8005d84 <__aeabi_uidivmod>
 8003a68:	4810      	ldr	r0, [pc, #64]	; (8003aac <.text_31>)
 8003a6a:	4341      	muls	r1, r0
 8003a6c:	186d      	adds	r5, r5, r1
 8003a6e:	b2f6      	uxtb	r6, r6
 8003a70:	2002      	movs	r0, #2
 8003a72:	4370      	muls	r0, r6
 8003a74:	1820      	adds	r0, r4, r0
 8003a76:	8b00      	ldrh	r0, [r0, #24]
 8003a78:	2196      	movs	r1, #150	; 0x96
 8003a7a:	0089      	lsls	r1, r1, #2
 8003a7c:	4341      	muls	r1, r0
 8003a7e:	186d      	adds	r5, r5, r1
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	1940      	adds	r0, r0, r5
 8003a84:	4669      	mov	r1, sp
 8003a86:	7809      	ldrb	r1, [r1, #0]
 8003a88:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <.text_32>)
 8003a8a:	4351      	muls	r1, r2
 8003a8c:	1840      	adds	r0, r0, r1
 8003a8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003a90:	0849      	lsrs	r1, r1, #1
 8003a92:	1a40      	subs	r0, r0, r1
 8003a94:	0007      	movs	r7, r0
 8003a96:	b2f6      	uxtb	r6, r6
 8003a98:	2e00      	cmp	r6, #0
 8003a9a:	d105      	bne.n	8003aa8 <SIGFOX_INT_compute_uplink_frequency+0xb0>
 8003a9c:	6860      	ldr	r0, [r4, #4]
 8003a9e:	1940      	adds	r0, r0, r5
 8003aa0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003aa2:	0849      	lsrs	r1, r1, #1
 8003aa4:	1a40      	subs	r0, r0, r1
 8003aa6:	6160      	str	r0, [r4, #20]
 8003aa8:	0038      	movs	r0, r7
 8003aaa:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003aac <.text_31>:
 8003aac:	000061a8 	.word	0x000061a8

08003ab0 <.text_32>:
 8003ab0:	000493e0 	.word	0x000493e0

08003ab4 <SIGFOX_INT_compute_downlink_frequency>:
 8003ab4:	6940      	ldr	r0, [r0, #20]
 8003ab6:	4770      	bx	lr

08003ab8 <SIGFOX_INT_get_device_id>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	0004      	movs	r4, r0
 8003abc:	f001 f9c5 	bl	8004e4a <SE_API_open>
 8003ac0:	0005      	movs	r5, r0
 8003ac2:	b2ed      	uxtb	r5, r5
 8003ac4:	2d00      	cmp	r5, #0
 8003ac6:	d005      	beq.n	8003ad4 <SIGFOX_INT_get_device_id+0x1c>
 8003ac8:	2199      	movs	r1, #153	; 0x99
 8003aca:	0028      	movs	r0, r5
 8003acc:	b2c0      	uxtb	r0, r0
 8003ace:	f7ff f808 	bl	8002ae2 <RETURN_CODE>
 8003ad2:	e01b      	b.n	8003b0c <SIGFOX_INT_get_device_id+0x54>
 8003ad4:	0020      	movs	r0, r4
 8003ad6:	f001 f9bc 	bl	8004e52 <SE_API_get_device_id>
 8003ada:	0005      	movs	r5, r0
 8003adc:	b2ed      	uxtb	r5, r5
 8003ade:	2d00      	cmp	r5, #0
 8003ae0:	d007      	beq.n	8003af2 <SIGFOX_INT_get_device_id+0x3a>
 8003ae2:	f001 f9b4 	bl	8004e4e <SE_API_close>
 8003ae6:	2199      	movs	r1, #153	; 0x99
 8003ae8:	0028      	movs	r0, r5
 8003aea:	b2c0      	uxtb	r0, r0
 8003aec:	f7fe fff9 	bl	8002ae2 <RETURN_CODE>
 8003af0:	e00c      	b.n	8003b0c <SIGFOX_INT_get_device_id+0x54>
 8003af2:	f001 f9ac 	bl	8004e4e <SE_API_close>
 8003af6:	0005      	movs	r5, r0
 8003af8:	b2ed      	uxtb	r5, r5
 8003afa:	2d00      	cmp	r5, #0
 8003afc:	d005      	beq.n	8003b0a <SIGFOX_INT_get_device_id+0x52>
 8003afe:	2199      	movs	r1, #153	; 0x99
 8003b00:	0028      	movs	r0, r5
 8003b02:	b2c0      	uxtb	r0, r0
 8003b04:	f7fe ffed 	bl	8002ae2 <RETURN_CODE>
 8003b08:	e000      	b.n	8003b0c <SIGFOX_INT_get_device_id+0x54>
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	bd32      	pop	{r1, r4, r5, pc}
	...

08003b10 <SIGFOX_PN_next_pn>:
 8003b10:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8003b12:	b081      	sub	sp, #4
 8003b14:	2400      	movs	r4, #0
 8003b16:	2500      	movs	r5, #0
 8003b18:	2000      	movs	r0, #0
 8003b1a:	466f      	mov	r7, sp
 8003b1c:	7038      	strb	r0, [r7, #0]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d107      	bne.n	8003b34 <SIGFOX_PN_next_pn+0x24>
 8003b24:	2009      	movs	r0, #9
 8003b26:	0004      	movs	r4, r0
 8003b28:	4823      	ldr	r0, [pc, #140]	; (8003bb8 <SIGFOX_PN_next_pn+0xa8>)
 8003b2a:	0005      	movs	r5, r0
 8003b2c:	200b      	movs	r0, #11
 8003b2e:	466f      	mov	r7, sp
 8003b30:	7038      	strb	r0, [r7, #0]
 8003b32:	e006      	b.n	8003b42 <SIGFOX_PN_next_pn+0x32>
 8003b34:	2006      	movs	r0, #6
 8003b36:	0004      	movs	r4, r0
 8003b38:	207f      	movs	r0, #127	; 0x7f
 8003b3a:	0005      	movs	r5, r0
 8003b3c:	2007      	movs	r0, #7
 8003b3e:	466f      	mov	r7, sp
 8003b40:	7038      	strb	r0, [r7, #0]
 8003b42:	4668      	mov	r0, sp
 8003b44:	8880      	ldrh	r0, [r0, #4]
 8003b46:	0006      	movs	r6, r0
 8003b48:	b2b6      	uxth	r6, r6
 8003b4a:	2e00      	cmp	r6, #0
 8003b4c:	d100      	bne.n	8003b50 <SIGFOX_PN_next_pn+0x40>
 8003b4e:	002e      	movs	r6, r5
 8003b50:	4668      	mov	r0, sp
 8003b52:	4684      	mov	ip, r0
 8003b54:	b2b6      	uxth	r6, r6
 8003b56:	4668      	mov	r0, sp
 8003b58:	7800      	ldrb	r0, [r0, #0]
 8003b5a:	1e47      	subs	r7, r0, #1
 8003b5c:	0030      	movs	r0, r6
 8003b5e:	4138      	asrs	r0, r7
 8003b60:	0007      	movs	r7, r0
 8003b62:	07ff      	lsls	r7, r7, #31
 8003b64:	0fff      	lsrs	r7, r7, #31
 8003b66:	4660      	mov	r0, ip
 8003b68:	7087      	strb	r7, [r0, #2]
 8003b6a:	4668      	mov	r0, sp
 8003b6c:	4684      	mov	ip, r0
 8003b6e:	b2b6      	uxth	r6, r6
 8003b70:	1e67      	subs	r7, r4, #1
 8003b72:	0030      	movs	r0, r6
 8003b74:	4138      	asrs	r0, r7
 8003b76:	0007      	movs	r7, r0
 8003b78:	07ff      	lsls	r7, r7, #31
 8003b7a:	0fff      	lsrs	r7, r7, #31
 8003b7c:	4660      	mov	r0, ip
 8003b7e:	7047      	strb	r7, [r0, #1]
 8003b80:	0076      	lsls	r6, r6, #1
 8003b82:	4668      	mov	r0, sp
 8003b84:	7880      	ldrb	r0, [r0, #2]
 8003b86:	466f      	mov	r7, sp
 8003b88:	787f      	ldrb	r7, [r7, #1]
 8003b8a:	4047      	eors	r7, r0
 8003b8c:	2f00      	cmp	r7, #0
 8003b8e:	d002      	beq.n	8003b96 <SIGFOX_PN_next_pn+0x86>
 8003b90:	0030      	movs	r0, r6
 8003b92:	2601      	movs	r6, #1
 8003b94:	4306      	orrs	r6, r0
 8003b96:	402e      	ands	r6, r5
 8003b98:	0010      	movs	r0, r2
 8003b9a:	0037      	movs	r7, r6
 8003b9c:	b280      	uxth	r0, r0
 8003b9e:	b2bf      	uxth	r7, r7
 8003ba0:	42b8      	cmp	r0, r7
 8003ba2:	d3d1      	bcc.n	8003b48 <SIGFOX_PN_next_pn+0x38>
 8003ba4:	0030      	movs	r0, r6
 8003ba6:	000f      	movs	r7, r1
 8003ba8:	b280      	uxth	r0, r0
 8003baa:	b2bf      	uxth	r7, r7
 8003bac:	42b8      	cmp	r0, r7
 8003bae:	d3cb      	bcc.n	8003b48 <SIGFOX_PN_next_pn+0x38>
 8003bb0:	0030      	movs	r0, r6
 8003bb2:	b280      	uxth	r0, r0
 8003bb4:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	000007ff 	.word	0x000007ff

08003bbc <SIGFOX_SCRAMB_compute>:
 8003bbc:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8003bbe:	2500      	movs	r5, #0
 8003bc0:	2600      	movs	r6, #0
 8003bc2:	0034      	movs	r4, r6
 8003bc4:	0026      	movs	r6, r4
 8003bc6:	0017      	movs	r7, r2
 8003bc8:	b2f6      	uxtb	r6, r6
 8003bca:	b2ff      	uxtb	r7, r7
 8003bcc:	42be      	cmp	r6, r7
 8003bce:	d204      	bcs.n	8003bda <SIGFOX_SCRAMB_compute+0x1e>
 8003bd0:	2600      	movs	r6, #0
 8003bd2:	b2e4      	uxtb	r4, r4
 8003bd4:	550e      	strb	r6, [r1, r4]
 8003bd6:	1c64      	adds	r4, r4, #1
 8003bd8:	e7f4      	b.n	8003bc4 <SIGFOX_SCRAMB_compute+0x8>
 8003bda:	2600      	movs	r6, #0
 8003bdc:	0034      	movs	r4, r6
 8003bde:	0026      	movs	r6, r4
 8003be0:	0017      	movs	r7, r2
 8003be2:	b2f6      	uxtb	r6, r6
 8003be4:	b2ff      	uxtb	r7, r7
 8003be6:	42be      	cmp	r6, r7
 8003be8:	d237      	bcs.n	8003c5a <SIGFOX_SCRAMB_compute+0x9e>
 8003bea:	2680      	movs	r6, #128	; 0x80
 8003bec:	0030      	movs	r0, r6
 8003bee:	b2c0      	uxtb	r0, r0
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d030      	beq.n	8003c56 <SIGFOX_SCRAMB_compute+0x9a>
 8003bf4:	9e00      	ldr	r6, [sp, #0]
 8003bf6:	b2e4      	uxtb	r4, r4
 8003bf8:	5d36      	ldrb	r6, [r6, r4]
 8003bfa:	4206      	tst	r6, r0
 8003bfc:	d016      	beq.n	8003c2c <SIGFOX_SCRAMB_compute+0x70>
 8003bfe:	4e17      	ldr	r6, [pc, #92]	; (8003c5c <SIGFOX_SCRAMB_compute+0xa0>)
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2704      	movs	r7, #4
 8003c04:	435f      	muls	r7, r3
 8003c06:	19f6      	adds	r6, r6, r7
 8003c08:	b2ed      	uxtb	r5, r5
 8003c0a:	5d76      	ldrb	r6, [r6, r5]
 8003c0c:	2e00      	cmp	r6, #0
 8003c0e:	d101      	bne.n	8003c14 <SIGFOX_SCRAMB_compute+0x58>
 8003c10:	2601      	movs	r6, #1
 8003c12:	e000      	b.n	8003c16 <SIGFOX_SCRAMB_compute+0x5a>
 8003c14:	2600      	movs	r6, #0
 8003c16:	b2e4      	uxtb	r4, r4
 8003c18:	5d0f      	ldrb	r7, [r1, r4]
 8003c1a:	4346      	muls	r6, r0
 8003c1c:	433e      	orrs	r6, r7
 8003c1e:	b2e4      	uxtb	r4, r4
 8003c20:	550e      	strb	r6, [r1, r4]
 8003c22:	4e0f      	ldr	r6, [pc, #60]	; (8003c60 <SIGFOX_SCRAMB_compute+0xa4>)
 8003c24:	b2ed      	uxtb	r5, r5
 8003c26:	5d75      	ldrb	r5, [r6, r5]
 8003c28:	1cad      	adds	r5, r5, #2
 8003c2a:	e011      	b.n	8003c50 <SIGFOX_SCRAMB_compute+0x94>
 8003c2c:	b2e4      	uxtb	r4, r4
 8003c2e:	5d0f      	ldrb	r7, [r1, r4]
 8003c30:	46bc      	mov	ip, r7
 8003c32:	4f0a      	ldr	r7, [pc, #40]	; (8003c5c <SIGFOX_SCRAMB_compute+0xa0>)
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2604      	movs	r6, #4
 8003c38:	435e      	muls	r6, r3
 8003c3a:	19be      	adds	r6, r7, r6
 8003c3c:	b2ed      	uxtb	r5, r5
 8003c3e:	5d76      	ldrb	r6, [r6, r5]
 8003c40:	4346      	muls	r6, r0
 8003c42:	4667      	mov	r7, ip
 8003c44:	433e      	orrs	r6, r7
 8003c46:	b2e4      	uxtb	r4, r4
 8003c48:	550e      	strb	r6, [r1, r4]
 8003c4a:	4e05      	ldr	r6, [pc, #20]	; (8003c60 <SIGFOX_SCRAMB_compute+0xa4>)
 8003c4c:	b2ed      	uxtb	r5, r5
 8003c4e:	5d75      	ldrb	r5, [r6, r5]
 8003c50:	b2c0      	uxtb	r0, r0
 8003c52:	0840      	lsrs	r0, r0, #1
 8003c54:	e7cb      	b.n	8003bee <SIGFOX_SCRAMB_compute+0x32>
 8003c56:	1c64      	adds	r4, r4, #1
 8003c58:	e7c1      	b.n	8003bde <SIGFOX_SCRAMB_compute+0x22>
 8003c5a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8003c5c:	08024c80 	.word	0x08024c80
 8003c60:	08024c7c 	.word	0x08024c7c

08003c64 <ADDON_SIGFOX_RF_PROTOCOL_API_set_list_freq_pattern>:
 8003c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c66:	0002      	movs	r2, r0
 8003c68:	2000      	movs	r0, #0
 8003c6a:	2400      	movs	r4, #0
 8003c6c:	2600      	movs	r6, #0
 8003c6e:	0033      	movs	r3, r6
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b07      	cmp	r3, #7
 8003c74:	da57      	bge.n	8003d26 <ADDON_SIGFOX_RF_PROTOCOL_API_set_list_freq_pattern+0xc2>
 8003c76:	b2c9      	uxtb	r1, r1
 8003c78:	000e      	movs	r6, r1
 8003c7a:	411e      	asrs	r6, r3
 8003c7c:	07f6      	lsls	r6, r6, #31
 8003c7e:	d550      	bpl.n	8003d22 <ADDON_SIGFOX_RF_PROTOCOL_API_set_list_freq_pattern+0xbe>
 8003c80:	2600      	movs	r6, #0
 8003c82:	0035      	movs	r5, r6
 8003c84:	0006      	movs	r6, r0
 8003c86:	002f      	movs	r7, r5
 8003c88:	b2f6      	uxtb	r6, r6
 8003c8a:	b2ff      	uxtb	r7, r7
 8003c8c:	42be      	cmp	r6, r7
 8003c8e:	d311      	bcc.n	8003cb4 <ADDON_SIGFOX_RF_PROTOCOL_API_set_list_freq_pattern+0x50>
 8003c90:	b2e4      	uxtb	r4, r4
 8003c92:	2c00      	cmp	r4, #0
 8003c94:	d10e      	bne.n	8003cb4 <ADDON_SIGFOX_RF_PROTOCOL_API_set_list_freq_pattern+0x50>
 8003c96:	4e80      	ldr	r6, [pc, #512]	; (8003e98 <.text_21>)
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2708      	movs	r7, #8
 8003c9c:	435f      	muls	r7, r3
 8003c9e:	59f6      	ldr	r6, [r6, r7]
 8003ca0:	b2ed      	uxtb	r5, r5
 8003ca2:	2708      	movs	r7, #8
 8003ca4:	436f      	muls	r7, r5
 8003ca6:	59d7      	ldr	r7, [r2, r7]
 8003ca8:	42be      	cmp	r6, r7
 8003caa:	d101      	bne.n	8003cb0 <ADDON_SIGFOX_RF_PROTOCOL_API_set_list_freq_pattern+0x4c>
 8003cac:	2601      	movs	r6, #1
 8003cae:	0034      	movs	r4, r6
 8003cb0:	1c6d      	adds	r5, r5, #1
 8003cb2:	e7e7      	b.n	8003c84 <ADDON_SIGFOX_RF_PROTOCOL_API_set_list_freq_pattern+0x20>
 8003cb4:	b2e4      	uxtb	r4, r4
 8003cb6:	2c01      	cmp	r4, #1
 8003cb8:	d11e      	bne.n	8003cf8 <ADDON_SIGFOX_RF_PROTOCOL_API_set_list_freq_pattern+0x94>
 8003cba:	b2ed      	uxtb	r5, r5
 8003cbc:	2608      	movs	r6, #8
 8003cbe:	436e      	muls	r6, r5
 8003cc0:	1996      	adds	r6, r2, r6
 8003cc2:	1f36      	subs	r6, r6, #4
 8003cc4:	7837      	ldrb	r7, [r6, #0]
 8003cc6:	46bc      	mov	ip, r7
 8003cc8:	4f73      	ldr	r7, [pc, #460]	; (8003e98 <.text_21>)
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2608      	movs	r6, #8
 8003cce:	435e      	muls	r6, r3
 8003cd0:	19be      	adds	r6, r7, r6
 8003cd2:	7936      	ldrb	r6, [r6, #4]
 8003cd4:	4667      	mov	r7, ip
 8003cd6:	42b7      	cmp	r7, r6
 8003cd8:	d00b      	beq.n	8003cf2 <ADDON_SIGFOX_RF_PROTOCOL_API_set_list_freq_pattern+0x8e>
 8003cda:	4e6f      	ldr	r6, [pc, #444]	; (8003e98 <.text_21>)
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2708      	movs	r7, #8
 8003ce0:	435f      	muls	r7, r3
 8003ce2:	19f6      	adds	r6, r6, r7
 8003ce4:	7936      	ldrb	r6, [r6, #4]
 8003ce6:	b2ed      	uxtb	r5, r5
 8003ce8:	2708      	movs	r7, #8
 8003cea:	436f      	muls	r7, r5
 8003cec:	19d7      	adds	r7, r2, r7
 8003cee:	1eff      	subs	r7, r7, #3
 8003cf0:	703e      	strb	r6, [r7, #0]
 8003cf2:	2600      	movs	r6, #0
 8003cf4:	0034      	movs	r4, r6
 8003cf6:	e014      	b.n	8003d22 <ADDON_SIGFOX_RF_PROTOCOL_API_set_list_freq_pattern+0xbe>
 8003cf8:	4e67      	ldr	r6, [pc, #412]	; (8003e98 <.text_21>)
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2708      	movs	r7, #8
 8003cfe:	435f      	muls	r7, r3
 8003d00:	59f6      	ldr	r6, [r6, r7]
 8003d02:	b2c0      	uxtb	r0, r0
 8003d04:	2708      	movs	r7, #8
 8003d06:	4347      	muls	r7, r0
 8003d08:	51d6      	str	r6, [r2, r7]
 8003d0a:	4e63      	ldr	r6, [pc, #396]	; (8003e98 <.text_21>)
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2708      	movs	r7, #8
 8003d10:	435f      	muls	r7, r3
 8003d12:	19f6      	adds	r6, r6, r7
 8003d14:	7936      	ldrb	r6, [r6, #4]
 8003d16:	b2c0      	uxtb	r0, r0
 8003d18:	2708      	movs	r7, #8
 8003d1a:	4347      	muls	r7, r0
 8003d1c:	19d7      	adds	r7, r2, r7
 8003d1e:	713e      	strb	r6, [r7, #4]
 8003d20:	1c40      	adds	r0, r0, #1
 8003d22:	1c5b      	adds	r3, r3, #1
 8003d24:	e7a4      	b.n	8003c70 <ADDON_SIGFOX_RF_PROTOCOL_API_set_list_freq_pattern+0xc>
 8003d26:	b2c0      	uxtb	r0, r0
 8003d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d2a <ADDON_SIGFOX_RF_PROTOCOL_API_reset_list_freq_pattern>:
 8003d2a:	b510      	push	{r4, lr}
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	0019      	movs	r1, r3
 8003d30:	b2c9      	uxtb	r1, r1
 8003d32:	2905      	cmp	r1, #5
 8003d34:	da15      	bge.n	8003d62 <ADDON_SIGFOX_RF_PROTOCOL_API_reset_list_freq_pattern+0x38>
 8003d36:	2300      	movs	r3, #0
 8003d38:	b2c9      	uxtb	r1, r1
 8003d3a:	2408      	movs	r4, #8
 8003d3c:	434c      	muls	r4, r1
 8003d3e:	5103      	str	r3, [r0, r4]
 8003d40:	2300      	movs	r3, #0
 8003d42:	001a      	movs	r2, r3
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	2a02      	cmp	r2, #2
 8003d48:	da09      	bge.n	8003d5e <ADDON_SIGFOX_RF_PROTOCOL_API_reset_list_freq_pattern+0x34>
 8003d4a:	b2c9      	uxtb	r1, r1
 8003d4c:	2308      	movs	r3, #8
 8003d4e:	434b      	muls	r3, r1
 8003d50:	18c3      	adds	r3, r0, r3
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	189b      	adds	r3, r3, r2
 8003d56:	2400      	movs	r4, #0
 8003d58:	711c      	strb	r4, [r3, #4]
 8003d5a:	1c52      	adds	r2, r2, #1
 8003d5c:	e7f2      	b.n	8003d44 <ADDON_SIGFOX_RF_PROTOCOL_API_reset_list_freq_pattern+0x1a>
 8003d5e:	1c49      	adds	r1, r1, #1
 8003d60:	e7e6      	b.n	8003d30 <ADDON_SIGFOX_RF_PROTOCOL_API_reset_list_freq_pattern+0x6>
 8003d62:	bd10      	pop	{r4, pc}

08003d64 <ADDON_SIGFOX_RF_PROTOCOL_API_get_version>:
 8003d64:	b500      	push	{lr}
 8003d66:	0002      	movs	r2, r0
 8003d68:	484c      	ldr	r0, [pc, #304]	; (8003e9c <.text_22>)
 8003d6a:	6010      	str	r0, [r2, #0]
 8003d6c:	2900      	cmp	r1, #0
 8003d6e:	d001      	beq.n	8003d74 <ADDON_SIGFOX_RF_PROTOCOL_API_get_version+0x10>
 8003d70:	2018      	movs	r0, #24
 8003d72:	7008      	strb	r0, [r1, #0]
 8003d74:	2000      	movs	r0, #0
 8003d76:	bd00      	pop	{pc}

08003d78 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc>:
 8003d78:	b500      	push	{lr}
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	610a      	str	r2, [r1, #16]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	614a      	str	r2, [r1, #20]
 8003d82:	2200      	movs	r2, #0
 8003d84:	760a      	strb	r2, [r1, #24]
 8003d86:	b2c0      	uxtb	r0, r0
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d00c      	beq.n	8003da6 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x2e>
 8003d8c:	2802      	cmp	r0, #2
 8003d8e:	d02b      	beq.n	8003de8 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x70>
 8003d90:	d314      	bcc.n	8003dbc <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x44>
 8003d92:	2804      	cmp	r0, #4
 8003d94:	d01d      	beq.n	8003dd2 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x5a>
 8003d96:	d339      	bcc.n	8003e0c <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x94>
 8003d98:	2806      	cmp	r0, #6
 8003d9a:	d05b      	beq.n	8003e54 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0xdc>
 8003d9c:	d348      	bcc.n	8003e30 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0xb8>
 8003d9e:	2808      	cmp	r0, #8
 8003da0:	d06e      	beq.n	8003e80 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x108>
 8003da2:	d362      	bcc.n	8003e6a <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0xf2>
 8003da4:	e077      	b.n	8003e96 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x11e>
 8003da6:	4a3e      	ldr	r2, [pc, #248]	; (8003ea0 <.text_23>)
 8003da8:	600a      	str	r2, [r1, #0]
 8003daa:	4a3e      	ldr	r2, [pc, #248]	; (8003ea4 <.text_24>)
 8003dac:	604a      	str	r2, [r1, #4]
 8003dae:	4a3e      	ldr	r2, [pc, #248]	; (8003ea8 <.text_25>)
 8003db0:	608a      	str	r2, [r1, #8]
 8003db2:	2201      	movs	r2, #1
 8003db4:	730a      	strb	r2, [r1, #12]
 8003db6:	2204      	movs	r2, #4
 8003db8:	734a      	strb	r2, [r1, #13]
 8003dba:	e06c      	b.n	8003e96 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x11e>
 8003dbc:	4a3b      	ldr	r2, [pc, #236]	; (8003eac <.text_26>)
 8003dbe:	600a      	str	r2, [r1, #0]
 8003dc0:	4a3b      	ldr	r2, [pc, #236]	; (8003eb0 <.text_27>)
 8003dc2:	604a      	str	r2, [r1, #4]
 8003dc4:	4a38      	ldr	r2, [pc, #224]	; (8003ea8 <.text_25>)
 8003dc6:	608a      	str	r2, [r1, #8]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	730a      	strb	r2, [r1, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	734a      	strb	r2, [r1, #13]
 8003dd0:	e061      	b.n	8003e96 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x11e>
 8003dd2:	4a36      	ldr	r2, [pc, #216]	; (8003eac <.text_26>)
 8003dd4:	600a      	str	r2, [r1, #0]
 8003dd6:	4a37      	ldr	r2, [pc, #220]	; (8003eb4 <.text_28>)
 8003dd8:	604a      	str	r2, [r1, #4]
 8003dda:	4a33      	ldr	r2, [pc, #204]	; (8003ea8 <.text_25>)
 8003ddc:	608a      	str	r2, [r1, #8]
 8003dde:	2202      	movs	r2, #2
 8003de0:	730a      	strb	r2, [r1, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	734a      	strb	r2, [r1, #13]
 8003de6:	e056      	b.n	8003e96 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x11e>
 8003de8:	4a33      	ldr	r2, [pc, #204]	; (8003eb8 <.text_29>)
 8003dea:	600a      	str	r2, [r1, #0]
 8003dec:	4a33      	ldr	r2, [pc, #204]	; (8003ebc <.text_30>)
 8003dee:	604a      	str	r2, [r1, #4]
 8003df0:	4a33      	ldr	r2, [pc, #204]	; (8003ec0 <.text_31>)
 8003df2:	608a      	str	r2, [r1, #8]
 8003df4:	2201      	movs	r2, #1
 8003df6:	730a      	strb	r2, [r1, #12]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	734a      	strb	r2, [r1, #13]
 8003dfc:	4a2e      	ldr	r2, [pc, #184]	; (8003eb8 <.text_29>)
 8003dfe:	610a      	str	r2, [r1, #16]
 8003e00:	4a30      	ldr	r2, [pc, #192]	; (8003ec4 <.text_32>)
 8003e02:	614a      	str	r2, [r1, #20]
 8003e04:	224f      	movs	r2, #79	; 0x4f
 8003e06:	43d2      	mvns	r2, r2
 8003e08:	760a      	strb	r2, [r1, #24]
 8003e0a:	e044      	b.n	8003e96 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x11e>
 8003e0c:	4a2a      	ldr	r2, [pc, #168]	; (8003eb8 <.text_29>)
 8003e0e:	600a      	str	r2, [r1, #0]
 8003e10:	4a2a      	ldr	r2, [pc, #168]	; (8003ebc <.text_30>)
 8003e12:	604a      	str	r2, [r1, #4]
 8003e14:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <.text_25>)
 8003e16:	608a      	str	r2, [r1, #8]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	730a      	strb	r2, [r1, #12]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	734a      	strb	r2, [r1, #13]
 8003e20:	4a25      	ldr	r2, [pc, #148]	; (8003eb8 <.text_29>)
 8003e22:	610a      	str	r2, [r1, #16]
 8003e24:	4a27      	ldr	r2, [pc, #156]	; (8003ec4 <.text_32>)
 8003e26:	614a      	str	r2, [r1, #20]
 8003e28:	224f      	movs	r2, #79	; 0x4f
 8003e2a:	43d2      	mvns	r2, r2
 8003e2c:	760a      	strb	r2, [r1, #24]
 8003e2e:	e032      	b.n	8003e96 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x11e>
 8003e30:	4a25      	ldr	r2, [pc, #148]	; (8003ec8 <.text_33>)
 8003e32:	600a      	str	r2, [r1, #0]
 8003e34:	4a1f      	ldr	r2, [pc, #124]	; (8003eb4 <.text_28>)
 8003e36:	604a      	str	r2, [r1, #4]
 8003e38:	4a1b      	ldr	r2, [pc, #108]	; (8003ea8 <.text_25>)
 8003e3a:	608a      	str	r2, [r1, #8]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	730a      	strb	r2, [r1, #12]
 8003e40:	2202      	movs	r2, #2
 8003e42:	734a      	strb	r2, [r1, #13]
 8003e44:	4a20      	ldr	r2, [pc, #128]	; (8003ec8 <.text_33>)
 8003e46:	610a      	str	r2, [r1, #16]
 8003e48:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <.text_32>)
 8003e4a:	614a      	str	r2, [r1, #20]
 8003e4c:	2240      	movs	r2, #64	; 0x40
 8003e4e:	43d2      	mvns	r2, r2
 8003e50:	760a      	strb	r2, [r1, #24]
 8003e52:	e020      	b.n	8003e96 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x11e>
 8003e54:	4a1d      	ldr	r2, [pc, #116]	; (8003ecc <.text_34>)
 8003e56:	600a      	str	r2, [r1, #0]
 8003e58:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <.text_35>)
 8003e5a:	604a      	str	r2, [r1, #4]
 8003e5c:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <.text_25>)
 8003e5e:	608a      	str	r2, [r1, #8]
 8003e60:	2201      	movs	r2, #1
 8003e62:	730a      	strb	r2, [r1, #12]
 8003e64:	2204      	movs	r2, #4
 8003e66:	734a      	strb	r2, [r1, #13]
 8003e68:	e015      	b.n	8003e96 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x11e>
 8003e6a:	4a1a      	ldr	r2, [pc, #104]	; (8003ed4 <.text_36>)
 8003e6c:	600a      	str	r2, [r1, #0]
 8003e6e:	4a1a      	ldr	r2, [pc, #104]	; (8003ed8 <.text_37>)
 8003e70:	604a      	str	r2, [r1, #4]
 8003e72:	4a0d      	ldr	r2, [pc, #52]	; (8003ea8 <.text_25>)
 8003e74:	608a      	str	r2, [r1, #8]
 8003e76:	2201      	movs	r2, #1
 8003e78:	730a      	strb	r2, [r1, #12]
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	734a      	strb	r2, [r1, #13]
 8003e7e:	e00a      	b.n	8003e96 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x11e>
 8003e80:	4a16      	ldr	r2, [pc, #88]	; (8003edc <.text_38>)
 8003e82:	600a      	str	r2, [r1, #0]
 8003e84:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <.text_39>)
 8003e86:	604a      	str	r2, [r1, #4]
 8003e88:	4a16      	ldr	r2, [pc, #88]	; (8003ee4 <.text_40>)
 8003e8a:	608a      	str	r2, [r1, #8]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	730a      	strb	r2, [r1, #12]
 8003e90:	2204      	movs	r2, #4
 8003e92:	734a      	strb	r2, [r1, #13]
 8003e94:	e7ff      	b.n	8003e96 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc+0x11e>
 8003e96:	bd00      	pop	{pc}

08003e98 <.text_21>:
 8003e98:	20000000 	.word	0x20000000

08003e9c <.text_22>:
 8003e9c:	08024c8c 	.word	0x08024c8c

08003ea0 <.text_23>:
 8003ea0:	33be9cd0 	.word	0x33be9cd0

08003ea4 <.text_24>:
 8003ea4:	33d3e608 	.word	0x33d3e608

08003ea8 <.text_25>:
 8003ea8:	0002ee00 	.word	0x0002ee00

08003eac <.text_26>:
 8003eac:	35c67ac0 	.word	0x35c67ac0

08003eb0 <.text_27>:
 8003eb0:	35f44180 	.word	0x35f44180

08003eb4 <.text_28>:
 8003eb4:	36f92e60 	.word	0x36f92e60

08003eb8 <.text_29>:
 8003eb8:	3706ea00 	.word	0x3706ea00

08003ebc <.text_30>:
 8003ebc:	36f7a7c0 	.word	0x36f7a7c0

08003ec0 <.text_31>:
 8003ec0:	00008ca0 	.word	0x00008ca0

08003ec4 <.text_32>:
 8003ec4:	00030d40 	.word	0x00030d40

08003ec8 <.text_33>:
 8003ec8:	370870a0 	.word	0x370870a0

08003ecc <.text_34>:
 8003ecc:	3391e780 	.word	0x3391e780

08003ed0 <.text_35>:
 8003ed0:	33a2b060 	.word	0x33a2b060

08003ed4 <.text_36>:
 8003ed4:	33c8d600 	.word	0x33c8d600

08003ed8 <.text_37>:
 8003ed8:	33cd69e0 	.word	0x33cd69e0

08003edc <.text_38>:
 8003edc:	041ac224 	.word	0x041ac224

08003ee0 <.text_39>:
 8003ee0:	04588e74 	.word	0x04588e74

08003ee4 <.text_40>:
 8003ee4:	000030d4 	.word	0x000030d4

08003ee8 <ADDON_SIGFOX_RF_PROTOCOL_API_get_first_activated_macro_channel>:
 8003ee8:	b530      	push	{r4, r5, lr}
 8003eea:	0001      	movs	r1, r0
 8003eec:	2200      	movs	r2, #0
 8003eee:	2000      	movs	r0, #0
 8003ef0:	2500      	movs	r5, #0
 8003ef2:	002b      	movs	r3, r5
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	da1d      	bge.n	8003f36 <ADDON_SIGFOX_RF_PROTOCOL_API_get_first_activated_macro_channel+0x4e>
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	2a00      	cmp	r2, #0
 8003efe:	d11a      	bne.n	8003f36 <ADDON_SIGFOX_RF_PROTOCOL_API_get_first_activated_macro_channel+0x4e>
 8003f00:	2500      	movs	r5, #0
 8003f02:	002c      	movs	r4, r5
 8003f04:	b2e4      	uxtb	r4, r4
 8003f06:	2c20      	cmp	r4, #32
 8003f08:	da13      	bge.n	8003f32 <ADDON_SIGFOX_RF_PROTOCOL_API_get_first_activated_macro_channel+0x4a>
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	2a00      	cmp	r2, #0
 8003f0e:	d110      	bne.n	8003f32 <ADDON_SIGFOX_RF_PROTOCOL_API_get_first_activated_macro_channel+0x4a>
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2504      	movs	r5, #4
 8003f14:	435d      	muls	r5, r3
 8003f16:	594d      	ldr	r5, [r1, r5]
 8003f18:	40e5      	lsrs	r5, r4
 8003f1a:	07ed      	lsls	r5, r5, #31
 8003f1c:	d507      	bpl.n	8003f2e <ADDON_SIGFOX_RF_PROTOCOL_API_get_first_activated_macro_channel+0x46>
 8003f1e:	2501      	movs	r5, #1
 8003f20:	002a      	movs	r2, r5
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2520      	movs	r5, #32
 8003f26:	435d      	muls	r5, r3
 8003f28:	b2e4      	uxtb	r4, r4
 8003f2a:	192d      	adds	r5, r5, r4
 8003f2c:	0028      	movs	r0, r5
 8003f2e:	1c64      	adds	r4, r4, #1
 8003f30:	e7e8      	b.n	8003f04 <ADDON_SIGFOX_RF_PROTOCOL_API_get_first_activated_macro_channel+0x1c>
 8003f32:	1c5b      	adds	r3, r3, #1
 8003f34:	e7de      	b.n	8003ef4 <ADDON_SIGFOX_RF_PROTOCOL_API_get_first_activated_macro_channel+0xc>
 8003f36:	b2c0      	uxtb	r0, r0
 8003f38:	bd30      	pop	{r4, r5, pc}

08003f3a <ADDON_SIGFOX_RF_PROTOCOL_API_sleep>:
 8003f3a:	b538      	push	{r3, r4, r5, lr}
 8003f3c:	0004      	movs	r4, r0
 8003f3e:	2500      	movs	r5, #0
 8003f40:	b2e4      	uxtb	r4, r4
 8003f42:	0020      	movs	r0, r4
 8003f44:	f009 fd24 	bl	800d990 <MCU_API_timer_start>
 8003f48:	0005      	movs	r5, r0
 8003f4a:	b2ed      	uxtb	r5, r5
 8003f4c:	2d00      	cmp	r5, #0
 8003f4e:	d002      	beq.n	8003f56 <ADDON_SIGFOX_RF_PROTOCOL_API_sleep+0x1c>
 8003f50:	0028      	movs	r0, r5
 8003f52:	b2c0      	uxtb	r0, r0
 8003f54:	e00a      	b.n	8003f6c <ADDON_SIGFOX_RF_PROTOCOL_API_sleep+0x32>
 8003f56:	f009 fd65 	bl	800da24 <MCU_API_timer_wait_for_end>
 8003f5a:	0005      	movs	r5, r0
 8003f5c:	b2ed      	uxtb	r5, r5
 8003f5e:	2d00      	cmp	r5, #0
 8003f60:	d002      	beq.n	8003f68 <ADDON_SIGFOX_RF_PROTOCOL_API_sleep+0x2e>
 8003f62:	0028      	movs	r0, r5
 8003f64:	b2c0      	uxtb	r0, r0
 8003f66:	e001      	b.n	8003f6c <ADDON_SIGFOX_RF_PROTOCOL_API_sleep+0x32>
 8003f68:	0028      	movs	r0, r5
 8003f6a:	b2c0      	uxtb	r0, r0
 8003f6c:	bd32      	pop	{r1, r4, r5, pc}

08003f6e <ADDON_SIGFOX_RF_PROTOCOL_API_send_rc_sync>:
 8003f6e:	b538      	push	{r3, r4, r5, lr}
 8003f70:	2400      	movs	r4, #0
 8003f72:	2500      	movs	r5, #0
 8003f74:	2012      	movs	r0, #18
 8003f76:	f009 fd0b 	bl	800d990 <MCU_API_timer_start>
 8003f7a:	0005      	movs	r5, r0
 8003f7c:	b2ed      	uxtb	r5, r5
 8003f7e:	2d00      	cmp	r5, #0
 8003f80:	d005      	beq.n	8003f8e <ADDON_SIGFOX_RF_PROTOCOL_API_send_rc_sync+0x20>
 8003f82:	b2ed      	uxtb	r5, r5
 8003f84:	0229      	lsls	r1, r5, #8
 8003f86:	20cd      	movs	r0, #205	; 0xcd
 8003f88:	4308      	orrs	r0, r1
 8003f8a:	b280      	uxth	r0, r0
 8003f8c:	e01a      	b.n	8003fc4 <ADDON_SIGFOX_RF_PROTOCOL_API_send_rc_sync+0x56>
 8003f8e:	2001      	movs	r0, #1
 8003f90:	f7fe fa8a 	bl	80024a8 <SIGFOX_API_send_outofband>
 8003f94:	0004      	movs	r4, r0
 8003f96:	b2a4      	uxth	r4, r4
 8003f98:	2c00      	cmp	r4, #0
 8003f9a:	d006      	beq.n	8003faa <ADDON_SIGFOX_RF_PROTOCOL_API_send_rc_sync+0x3c>
 8003f9c:	f009 fd22 	bl	800d9e4 <MCU_API_timer_stop>
 8003fa0:	f7fe f9fb 	bl	800239a <SIGFOX_API_close>
 8003fa4:	0020      	movs	r0, r4
 8003fa6:	b280      	uxth	r0, r0
 8003fa8:	e00c      	b.n	8003fc4 <ADDON_SIGFOX_RF_PROTOCOL_API_send_rc_sync+0x56>
 8003faa:	f009 fd3b 	bl	800da24 <MCU_API_timer_wait_for_end>
 8003fae:	0005      	movs	r5, r0
 8003fb0:	b2ed      	uxtb	r5, r5
 8003fb2:	2d00      	cmp	r5, #0
 8003fb4:	d005      	beq.n	8003fc2 <ADDON_SIGFOX_RF_PROTOCOL_API_send_rc_sync+0x54>
 8003fb6:	b2ed      	uxtb	r5, r5
 8003fb8:	0229      	lsls	r1, r5, #8
 8003fba:	20cd      	movs	r0, #205	; 0xcd
 8003fbc:	4308      	orrs	r0, r1
 8003fbe:	b280      	uxth	r0, r0
 8003fc0:	e000      	b.n	8003fc4 <ADDON_SIGFOX_RF_PROTOCOL_API_send_rc_sync+0x56>
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	bd32      	pop	{r1, r4, r5, pc}

08003fc6 <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol>:
 8003fc6:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	2600      	movs	r6, #0
 8003fcc:	2400      	movs	r4, #0
 8003fce:	2500      	movs	r5, #0
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	0005      	movs	r5, r0
 8003fd4:	b2ed      	uxtb	r5, r5
 8003fd6:	2d0c      	cmp	r5, #12
 8003fd8:	da06      	bge.n	8003fe8 <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x22>
 8003fda:	0028      	movs	r0, r5
 8003fdc:	3040      	adds	r0, #64	; 0x40
 8003fde:	a901      	add	r1, sp, #4
 8003fe0:	b2ed      	uxtb	r5, r5
 8003fe2:	5548      	strb	r0, [r1, r5]
 8003fe4:	1c6d      	adds	r5, r5, #1
 8003fe6:	e7f5      	b.n	8003fd4 <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0xe>
 8003fe8:	2000      	movs	r0, #0
 8003fea:	0007      	movs	r7, r0
 8003fec:	0038      	movs	r0, r7
 8003fee:	4669      	mov	r1, sp
 8003ff0:	7c09      	ldrb	r1, [r1, #16]
 8003ff2:	b2c0      	uxtb	r0, r0
 8003ff4:	4288      	cmp	r0, r1
 8003ff6:	d300      	bcc.n	8003ffa <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x34>
 8003ff8:	e0a8      	b.n	800414c <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x186>
 8003ffa:	2012      	movs	r0, #18
 8003ffc:	f009 fcc8 	bl	800d990 <MCU_API_timer_start>
 8004000:	0004      	movs	r4, r0
 8004002:	b2e4      	uxtb	r4, r4
 8004004:	2c00      	cmp	r4, #0
 8004006:	d005      	beq.n	8004014 <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x4e>
 8004008:	b2e4      	uxtb	r4, r4
 800400a:	0221      	lsls	r1, r4, #8
 800400c:	20c2      	movs	r0, #194	; 0xc2
 800400e:	4308      	orrs	r0, r1
 8004010:	b280      	uxth	r0, r0
 8004012:	e09c      	b.n	800414e <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x188>
 8004014:	2300      	movs	r3, #0
 8004016:	2202      	movs	r2, #2
 8004018:	2100      	movs	r1, #0
 800401a:	2000      	movs	r0, #0
 800401c:	f7fe fa0f 	bl	800243e <SIGFOX_API_send_bit>
 8004020:	0006      	movs	r6, r0
 8004022:	b2b6      	uxth	r6, r6
 8004024:	2e00      	cmp	r6, #0
 8004026:	d004      	beq.n	8004032 <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x6c>
 8004028:	f009 fcdc 	bl	800d9e4 <MCU_API_timer_stop>
 800402c:	0030      	movs	r0, r6
 800402e:	b280      	uxth	r0, r0
 8004030:	e08d      	b.n	800414e <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x188>
 8004032:	f009 fcf7 	bl	800da24 <MCU_API_timer_wait_for_end>
 8004036:	0004      	movs	r4, r0
 8004038:	b2e4      	uxtb	r4, r4
 800403a:	2c00      	cmp	r4, #0
 800403c:	d005      	beq.n	800404a <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x84>
 800403e:	b2e4      	uxtb	r4, r4
 8004040:	0221      	lsls	r1, r4, #8
 8004042:	20c2      	movs	r0, #194	; 0xc2
 8004044:	4308      	orrs	r0, r1
 8004046:	b280      	uxth	r0, r0
 8004048:	e081      	b.n	800414e <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x188>
 800404a:	2012      	movs	r0, #18
 800404c:	f009 fca0 	bl	800d990 <MCU_API_timer_start>
 8004050:	0004      	movs	r4, r0
 8004052:	b2e4      	uxtb	r4, r4
 8004054:	2c00      	cmp	r4, #0
 8004056:	d005      	beq.n	8004064 <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x9e>
 8004058:	b2e4      	uxtb	r4, r4
 800405a:	0221      	lsls	r1, r4, #8
 800405c:	20c3      	movs	r0, #195	; 0xc3
 800405e:	4308      	orrs	r0, r1
 8004060:	b280      	uxth	r0, r0
 8004062:	e074      	b.n	800414e <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x188>
 8004064:	2300      	movs	r3, #0
 8004066:	2202      	movs	r2, #2
 8004068:	2100      	movs	r1, #0
 800406a:	2001      	movs	r0, #1
 800406c:	f7fe f9e7 	bl	800243e <SIGFOX_API_send_bit>
 8004070:	0006      	movs	r6, r0
 8004072:	b2b6      	uxth	r6, r6
 8004074:	2e00      	cmp	r6, #0
 8004076:	d004      	beq.n	8004082 <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0xbc>
 8004078:	f009 fcb4 	bl	800d9e4 <MCU_API_timer_stop>
 800407c:	0030      	movs	r0, r6
 800407e:	b280      	uxth	r0, r0
 8004080:	e065      	b.n	800414e <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x188>
 8004082:	f009 fccf 	bl	800da24 <MCU_API_timer_wait_for_end>
 8004086:	0004      	movs	r4, r0
 8004088:	b2e4      	uxtb	r4, r4
 800408a:	2c00      	cmp	r4, #0
 800408c:	d005      	beq.n	800409a <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0xd4>
 800408e:	b2e4      	uxtb	r4, r4
 8004090:	0221      	lsls	r1, r4, #8
 8004092:	20c3      	movs	r0, #195	; 0xc3
 8004094:	4308      	orrs	r0, r1
 8004096:	b280      	uxth	r0, r0
 8004098:	e059      	b.n	800414e <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x188>
 800409a:	2012      	movs	r0, #18
 800409c:	f009 fc78 	bl	800d990 <MCU_API_timer_start>
 80040a0:	0004      	movs	r4, r0
 80040a2:	b2e4      	uxtb	r4, r4
 80040a4:	2c00      	cmp	r4, #0
 80040a6:	d005      	beq.n	80040b4 <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0xee>
 80040a8:	b2e4      	uxtb	r4, r4
 80040aa:	0221      	lsls	r1, r4, #8
 80040ac:	20c4      	movs	r0, #196	; 0xc4
 80040ae:	4308      	orrs	r0, r1
 80040b0:	b280      	uxth	r0, r0
 80040b2:	e04c      	b.n	800414e <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x188>
 80040b4:	2000      	movs	r0, #0
 80040b6:	f7fe f9f7 	bl	80024a8 <SIGFOX_API_send_outofband>
 80040ba:	0006      	movs	r6, r0
 80040bc:	b2b6      	uxth	r6, r6
 80040be:	2e00      	cmp	r6, #0
 80040c0:	d004      	beq.n	80040cc <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x106>
 80040c2:	f009 fc8f 	bl	800d9e4 <MCU_API_timer_stop>
 80040c6:	0030      	movs	r0, r6
 80040c8:	b280      	uxth	r0, r0
 80040ca:	e040      	b.n	800414e <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x188>
 80040cc:	f009 fcaa 	bl	800da24 <MCU_API_timer_wait_for_end>
 80040d0:	0004      	movs	r4, r0
 80040d2:	b2e4      	uxtb	r4, r4
 80040d4:	2c00      	cmp	r4, #0
 80040d6:	d005      	beq.n	80040e4 <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x11e>
 80040d8:	b2e4      	uxtb	r4, r4
 80040da:	0221      	lsls	r1, r4, #8
 80040dc:	20c4      	movs	r0, #196	; 0xc4
 80040de:	4308      	orrs	r0, r1
 80040e0:	b280      	uxth	r0, r0
 80040e2:	e034      	b.n	800414e <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x188>
 80040e4:	2001      	movs	r0, #1
 80040e6:	0005      	movs	r5, r0
 80040e8:	b2ed      	uxtb	r5, r5
 80040ea:	2d0d      	cmp	r5, #13
 80040ec:	da2c      	bge.n	8004148 <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x182>
 80040ee:	2012      	movs	r0, #18
 80040f0:	f009 fc4e 	bl	800d990 <MCU_API_timer_start>
 80040f4:	0004      	movs	r4, r0
 80040f6:	b2e4      	uxtb	r4, r4
 80040f8:	2c00      	cmp	r4, #0
 80040fa:	d005      	beq.n	8004108 <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x142>
 80040fc:	b2e4      	uxtb	r4, r4
 80040fe:	0221      	lsls	r1, r4, #8
 8004100:	20c6      	movs	r0, #198	; 0xc6
 8004102:	4308      	orrs	r0, r1
 8004104:	b280      	uxth	r0, r0
 8004106:	e022      	b.n	800414e <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x188>
 8004108:	2000      	movs	r0, #0
 800410a:	9000      	str	r0, [sp, #0]
 800410c:	2302      	movs	r3, #2
 800410e:	2200      	movs	r2, #0
 8004110:	0029      	movs	r1, r5
 8004112:	b2c9      	uxtb	r1, r1
 8004114:	a801      	add	r0, sp, #4
 8004116:	f7fe f95d 	bl	80023d4 <SIGFOX_API_send_frame>
 800411a:	0006      	movs	r6, r0
 800411c:	b2b6      	uxth	r6, r6
 800411e:	2e00      	cmp	r6, #0
 8004120:	d004      	beq.n	800412c <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x166>
 8004122:	f009 fc5f 	bl	800d9e4 <MCU_API_timer_stop>
 8004126:	0030      	movs	r0, r6
 8004128:	b280      	uxth	r0, r0
 800412a:	e010      	b.n	800414e <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x188>
 800412c:	f009 fc7a 	bl	800da24 <MCU_API_timer_wait_for_end>
 8004130:	0004      	movs	r4, r0
 8004132:	b2e4      	uxtb	r4, r4
 8004134:	2c00      	cmp	r4, #0
 8004136:	d005      	beq.n	8004144 <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x17e>
 8004138:	b2e4      	uxtb	r4, r4
 800413a:	0221      	lsls	r1, r4, #8
 800413c:	20c6      	movs	r0, #198	; 0xc6
 800413e:	4308      	orrs	r0, r1
 8004140:	b280      	uxth	r0, r0
 8004142:	e004      	b.n	800414e <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x188>
 8004144:	1c6d      	adds	r5, r5, #1
 8004146:	e7cf      	b.n	80040e8 <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x122>
 8004148:	1c7f      	adds	r7, r7, #1
 800414a:	e74f      	b.n	8003fec <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol+0x26>
 800414c:	2000      	movs	r0, #0
 800414e:	b005      	add	sp, #20
 8004150:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004152 <ADDON_SIGFOX_RF_PROTOCOL_API_init>:
 8004152:	b570      	push	{r4, r5, r6, lr}
 8004154:	0004      	movs	r4, r0
 8004156:	000d      	movs	r5, r1
 8004158:	2000      	movs	r0, #0
 800415a:	6028      	str	r0, [r5, #0]
 800415c:	0020      	movs	r0, r4
 800415e:	f7fe f80f 	bl	8002180 <SIGFOX_API_open>
 8004162:	0006      	movs	r6, r0
 8004164:	b2b6      	uxth	r6, r6
 8004166:	2e00      	cmp	r6, #0
 8004168:	d002      	beq.n	8004170 <ADDON_SIGFOX_RF_PROTOCOL_API_init+0x1e>
 800416a:	0030      	movs	r0, r6
 800416c:	b280      	uxth	r0, r0
 800416e:	e02f      	b.n	80041d0 <ADDON_SIGFOX_RF_PROTOCOL_API_init+0x7e>
 8004170:	7b60      	ldrb	r0, [r4, #13]
 8004172:	2802      	cmp	r0, #2
 8004174:	d106      	bne.n	8004184 <ADDON_SIGFOX_RF_PROTOCOL_API_init+0x32>
 8004176:	2100      	movs	r1, #0
 8004178:	4886      	ldr	r0, [pc, #536]	; (8004394 <.text_50>)
 800417a:	f7fe fa11 	bl	80025a0 <SIGFOX_API_set_std_config>
 800417e:	0006      	movs	r6, r0
 8004180:	4884      	ldr	r0, [pc, #528]	; (8004394 <.text_50>)
 8004182:	6028      	str	r0, [r5, #0]
 8004184:	7b60      	ldrb	r0, [r4, #13]
 8004186:	2801      	cmp	r0, #1
 8004188:	d10b      	bne.n	80041a2 <ADDON_SIGFOX_RF_PROTOCOL_API_init+0x50>
 800418a:	6860      	ldr	r0, [r4, #4]
 800418c:	4982      	ldr	r1, [pc, #520]	; (8004398 <.text_51>)
 800418e:	4288      	cmp	r0, r1
 8004190:	d107      	bne.n	80041a2 <ADDON_SIGFOX_RF_PROTOCOL_API_init+0x50>
 8004192:	2100      	movs	r1, #0
 8004194:	4881      	ldr	r0, [pc, #516]	; (800439c <.text_52>)
 8004196:	f7fe fa03 	bl	80025a0 <SIGFOX_API_set_std_config>
 800419a:	0006      	movs	r6, r0
 800419c:	487f      	ldr	r0, [pc, #508]	; (800439c <.text_52>)
 800419e:	6028      	str	r0, [r5, #0]
 80041a0:	e00d      	b.n	80041be <ADDON_SIGFOX_RF_PROTOCOL_API_init+0x6c>
 80041a2:	7b60      	ldrb	r0, [r4, #13]
 80041a4:	2801      	cmp	r0, #1
 80041a6:	d10a      	bne.n	80041be <ADDON_SIGFOX_RF_PROTOCOL_API_init+0x6c>
 80041a8:	6860      	ldr	r0, [r4, #4]
 80041aa:	497d      	ldr	r1, [pc, #500]	; (80043a0 <.text_53>)
 80041ac:	4288      	cmp	r0, r1
 80041ae:	d106      	bne.n	80041be <ADDON_SIGFOX_RF_PROTOCOL_API_init+0x6c>
 80041b0:	2100      	movs	r1, #0
 80041b2:	487c      	ldr	r0, [pc, #496]	; (80043a4 <.text_54>)
 80041b4:	f7fe f9f4 	bl	80025a0 <SIGFOX_API_set_std_config>
 80041b8:	0006      	movs	r6, r0
 80041ba:	487a      	ldr	r0, [pc, #488]	; (80043a4 <.text_54>)
 80041bc:	6028      	str	r0, [r5, #0]
 80041be:	b2b6      	uxth	r6, r6
 80041c0:	2e00      	cmp	r6, #0
 80041c2:	d004      	beq.n	80041ce <ADDON_SIGFOX_RF_PROTOCOL_API_init+0x7c>
 80041c4:	f7fe f8e9 	bl	800239a <SIGFOX_API_close>
 80041c8:	0030      	movs	r0, r6
 80041ca:	b280      	uxth	r0, r0
 80041cc:	e000      	b.n	80041d0 <ADDON_SIGFOX_RF_PROTOCOL_API_init+0x7e>
 80041ce:	2000      	movs	r0, #0
 80041d0:	bd70      	pop	{r4, r5, r6, pc}

080041d2 <ADDON_SIGFOX_RF_PROTOCOL_API_monarch_scan_timeout_callback>:
 80041d2:	2001      	movs	r0, #1
 80041d4:	4974      	ldr	r1, [pc, #464]	; (80043a8 <.text_55>)
 80041d6:	7008      	strb	r0, [r1, #0]
 80041d8:	2000      	movs	r0, #0
 80041da:	4770      	bx	lr

080041dc <ADDON_SIGFOX_RF_PROTOCOL_API_monarch_pattern_frequency_callback>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	0004      	movs	r4, r0
 80041e0:	000d      	movs	r5, r1
 80041e2:	0016      	movs	r6, r2
 80041e4:	2002      	movs	r0, #2
 80041e6:	4970      	ldr	r1, [pc, #448]	; (80043a8 <.text_55>)
 80041e8:	7008      	strb	r0, [r1, #0]
 80041ea:	4870      	ldr	r0, [pc, #448]	; (80043ac <.text_56>)
 80041ec:	7005      	strb	r5, [r0, #0]
 80041ee:	4870      	ldr	r0, [pc, #448]	; (80043b0 <.text_57>)
 80041f0:	6004      	str	r4, [r0, #0]
 80041f2:	4870      	ldr	r0, [pc, #448]	; (80043b4 <.text_58>)
 80041f4:	8006      	strh	r6, [r0, #0]
 80041f6:	4870      	ldr	r0, [pc, #448]	; (80043b8 <.text_59>)
 80041f8:	6800      	ldr	r0, [r0, #0]
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d002      	beq.n	8004204 <ADDON_SIGFOX_RF_PROTOCOL_API_monarch_pattern_frequency_callback+0x28>
 80041fe:	486e      	ldr	r0, [pc, #440]	; (80043b8 <.text_59>)
 8004200:	6800      	ldr	r0, [r0, #0]
 8004202:	4780      	blx	r0
 8004204:	2000      	movs	r0, #0
 8004206:	bd70      	pop	{r4, r5, r6, pc}

08004208 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern>:
 8004208:	b5fb      	push	{r0, r1, r3, r4, r5, r6, r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	0017      	movs	r7, r2
 800420e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004210:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004212:	2000      	movs	r0, #0
 8004214:	4669      	mov	r1, sp
 8004216:	7008      	strb	r0, [r1, #0]
 8004218:	2004      	movs	r0, #4
 800421a:	f009 fe2b 	bl	800de74 <RF_API_init>
 800421e:	0004      	movs	r4, r0
 8004220:	b2e4      	uxtb	r4, r4
 8004222:	2c00      	cmp	r4, #0
 8004224:	d005      	beq.n	8004232 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0x2a>
 8004226:	b2e4      	uxtb	r4, r4
 8004228:	0221      	lsls	r1, r4, #8
 800422a:	20ce      	movs	r0, #206	; 0xce
 800422c:	4308      	orrs	r0, r1
 800422e:	b280      	uxth	r0, r0
 8004230:	e073      	b.n	800431a <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0x112>
 8004232:	4a62      	ldr	r2, [pc, #392]	; (80043bc <.text_60>)
 8004234:	a80a      	add	r0, sp, #40	; 0x28
 8004236:	7801      	ldrb	r1, [r0, #0]
 8004238:	4668      	mov	r0, sp
 800423a:	8a00      	ldrh	r0, [r0, #16]
 800423c:	f000 ffde 	bl	80051fc <MONARCH_API_timer_start>
 8004240:	0004      	movs	r4, r0
 8004242:	b2e4      	uxtb	r4, r4
 8004244:	2c00      	cmp	r4, #0
 8004246:	d005      	beq.n	8004254 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0x4c>
 8004248:	b2e4      	uxtb	r4, r4
 800424a:	0221      	lsls	r1, r4, #8
 800424c:	20ce      	movs	r0, #206	; 0xce
 800424e:	4308      	orrs	r0, r1
 8004250:	b280      	uxth	r0, r0
 8004252:	e062      	b.n	800431a <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0x112>
 8004254:	2000      	movs	r0, #0
 8004256:	4954      	ldr	r1, [pc, #336]	; (80043a8 <.text_55>)
 8004258:	7008      	strb	r0, [r1, #0]
 800425a:	4bb1      	ldr	r3, [pc, #708]	; (8004520 <.text_62>)
 800425c:	003a      	movs	r2, r7
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	4668      	mov	r0, sp
 8004262:	7b01      	ldrb	r1, [r0, #12]
 8004264:	9802      	ldr	r0, [sp, #8]
 8004266:	f000 fff5 	bl	8005254 <MONARCH_API_configure_search_pattern>
 800426a:	0004      	movs	r4, r0
 800426c:	b2e4      	uxtb	r4, r4
 800426e:	2c00      	cmp	r4, #0
 8004270:	d005      	beq.n	800427e <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0x76>
 8004272:	b2e4      	uxtb	r4, r4
 8004274:	0221      	lsls	r1, r4, #8
 8004276:	20ce      	movs	r0, #206	; 0xce
 8004278:	4308      	orrs	r0, r1
 800427a:	b280      	uxth	r0, r0
 800427c:	e04d      	b.n	800431a <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0x112>
 800427e:	48a9      	ldr	r0, [pc, #676]	; (8004524 <.text_63>)
 8004280:	6800      	ldr	r0, [r0, #0]
 8004282:	2800      	cmp	r0, #0
 8004284:	d003      	beq.n	800428e <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0x86>
 8004286:	48a7      	ldr	r0, [pc, #668]	; (8004524 <.text_63>)
 8004288:	6800      	ldr	r0, [r0, #0]
 800428a:	4780      	blx	r0
 800428c:	e003      	b.n	8004296 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0x8e>
 800428e:	4846      	ldr	r0, [pc, #280]	; (80043a8 <.text_55>)
 8004290:	7800      	ldrb	r0, [r0, #0]
 8004292:	2800      	cmp	r0, #0
 8004294:	d0fb      	beq.n	800428e <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0x86>
 8004296:	f001 f850 	bl	800533a <MONARCH_API_stop_search_pattern>
 800429a:	0004      	movs	r4, r0
 800429c:	b2e4      	uxtb	r4, r4
 800429e:	2c00      	cmp	r4, #0
 80042a0:	d005      	beq.n	80042ae <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0xa6>
 80042a2:	b2e4      	uxtb	r4, r4
 80042a4:	0221      	lsls	r1, r4, #8
 80042a6:	20ce      	movs	r0, #206	; 0xce
 80042a8:	4308      	orrs	r0, r1
 80042aa:	b280      	uxth	r0, r0
 80042ac:	e035      	b.n	800431a <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0x112>
 80042ae:	483e      	ldr	r0, [pc, #248]	; (80043a8 <.text_55>)
 80042b0:	7800      	ldrb	r0, [r0, #0]
 80042b2:	2802      	cmp	r0, #2
 80042b4:	d120      	bne.n	80042f8 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0xf0>
 80042b6:	2000      	movs	r0, #0
 80042b8:	4669      	mov	r1, sp
 80042ba:	7008      	strb	r0, [r1, #0]
 80042bc:	483b      	ldr	r0, [pc, #236]	; (80043ac <.text_56>)
 80042be:	7800      	ldrb	r0, [r0, #0]
 80042c0:	0029      	movs	r1, r5
 80042c2:	b2c9      	uxtb	r1, r1
 80042c4:	4288      	cmp	r0, r1
 80042c6:	d106      	bne.n	80042d6 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0xce>
 80042c8:	4839      	ldr	r0, [pc, #228]	; (80043b0 <.text_57>)
 80042ca:	6800      	ldr	r0, [r0, #0]
 80042cc:	42b0      	cmp	r0, r6
 80042ce:	d102      	bne.n	80042d6 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0xce>
 80042d0:	2001      	movs	r0, #1
 80042d2:	4669      	mov	r1, sp
 80042d4:	7008      	strb	r0, [r1, #0]
 80042d6:	4837      	ldr	r0, [pc, #220]	; (80043b4 <.text_58>)
 80042d8:	2100      	movs	r1, #0
 80042da:	5e41      	ldrsh	r1, [r0, r1]
 80042dc:	4668      	mov	r0, sp
 80042de:	7800      	ldrb	r0, [r0, #0]
 80042e0:	f009 fbae 	bl	800da40 <MCU_API_report_test_result>
 80042e4:	0004      	movs	r4, r0
 80042e6:	b2e4      	uxtb	r4, r4
 80042e8:	2c00      	cmp	r4, #0
 80042ea:	d005      	beq.n	80042f8 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0xf0>
 80042ec:	b2e4      	uxtb	r4, r4
 80042ee:	0221      	lsls	r1, r4, #8
 80042f0:	20ce      	movs	r0, #206	; 0xce
 80042f2:	4308      	orrs	r0, r1
 80042f4:	b280      	uxth	r0, r0
 80042f6:	e010      	b.n	800431a <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0x112>
 80042f8:	482b      	ldr	r0, [pc, #172]	; (80043a8 <.text_55>)
 80042fa:	7800      	ldrb	r0, [r0, #0]
 80042fc:	2801      	cmp	r0, #1
 80042fe:	d1a9      	bne.n	8004254 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0x4c>
 8004300:	f009 fe60 	bl	800dfc4 <RF_API_stop>
 8004304:	0004      	movs	r4, r0
 8004306:	b2e4      	uxtb	r4, r4
 8004308:	2c00      	cmp	r4, #0
 800430a:	d005      	beq.n	8004318 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0x110>
 800430c:	b2e4      	uxtb	r4, r4
 800430e:	0221      	lsls	r1, r4, #8
 8004310:	20ce      	movs	r0, #206	; 0xce
 8004312:	4308      	orrs	r0, r1
 8004314:	b280      	uxth	r0, r0
 8004316:	e000      	b.n	800431a <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern+0x112>
 8004318:	2000      	movs	r0, #0
 800431a:	b005      	add	sp, #20
 800431c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800431e <ADDON_SIGFOX_RF_PROTOCOL_API_monarch_rc_scan_callback>:
 800431e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004320:	0004      	movs	r4, r0
 8004322:	000f      	movs	r7, r1
 8004324:	2600      	movs	r6, #0
 8004326:	2003      	movs	r0, #3
 8004328:	491f      	ldr	r1, [pc, #124]	; (80043a8 <.text_55>)
 800432a:	7008      	strb	r0, [r1, #0]
 800432c:	2000      	movs	r0, #0
 800432e:	497e      	ldr	r1, [pc, #504]	; (8004528 <.text_64>)
 8004330:	7008      	strb	r0, [r1, #0]
 8004332:	b2e4      	uxtb	r4, r4
 8004334:	2c00      	cmp	r4, #0
 8004336:	d014      	beq.n	8004362 <ADDON_SIGFOX_RF_PROTOCOL_API_monarch_rc_scan_callback+0x44>
 8004338:	2000      	movs	r0, #0
 800433a:	0005      	movs	r5, r0
 800433c:	b2ed      	uxtb	r5, r5
 800433e:	2d07      	cmp	r5, #7
 8004340:	da0f      	bge.n	8004362 <ADDON_SIGFOX_RF_PROTOCOL_API_monarch_rc_scan_callback+0x44>
 8004342:	b2f6      	uxtb	r6, r6
 8004344:	2e00      	cmp	r6, #0
 8004346:	d10c      	bne.n	8004362 <ADDON_SIGFOX_RF_PROTOCOL_API_monarch_rc_scan_callback+0x44>
 8004348:	b2e4      	uxtb	r4, r4
 800434a:	0020      	movs	r0, r4
 800434c:	4128      	asrs	r0, r5
 800434e:	07c0      	lsls	r0, r0, #31
 8004350:	d505      	bpl.n	800435e <ADDON_SIGFOX_RF_PROTOCOL_API_monarch_rc_scan_callback+0x40>
 8004352:	2001      	movs	r0, #1
 8004354:	0006      	movs	r6, r0
 8004356:	0028      	movs	r0, r5
 8004358:	1c40      	adds	r0, r0, #1
 800435a:	4973      	ldr	r1, [pc, #460]	; (8004528 <.text_64>)
 800435c:	7008      	strb	r0, [r1, #0]
 800435e:	1c6d      	adds	r5, r5, #1
 8004360:	e7ec      	b.n	800433c <ADDON_SIGFOX_RF_PROTOCOL_API_monarch_rc_scan_callback+0x1e>
 8004362:	4872      	ldr	r0, [pc, #456]	; (800452c <.text_65>)
 8004364:	4970      	ldr	r1, [pc, #448]	; (8004528 <.text_64>)
 8004366:	7809      	ldrb	r1, [r1, #0]
 8004368:	2202      	movs	r2, #2
 800436a:	4351      	muls	r1, r2
 800436c:	5a40      	ldrh	r0, [r0, r1]
 800436e:	1c40      	adds	r0, r0, #1
 8004370:	496e      	ldr	r1, [pc, #440]	; (800452c <.text_65>)
 8004372:	4a6d      	ldr	r2, [pc, #436]	; (8004528 <.text_64>)
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	2302      	movs	r3, #2
 8004378:	435a      	muls	r2, r3
 800437a:	5288      	strh	r0, [r1, r2]
 800437c:	480d      	ldr	r0, [pc, #52]	; (80043b4 <.text_58>)
 800437e:	8007      	strh	r7, [r0, #0]
 8004380:	480d      	ldr	r0, [pc, #52]	; (80043b8 <.text_59>)
 8004382:	6800      	ldr	r0, [r0, #0]
 8004384:	2800      	cmp	r0, #0
 8004386:	d002      	beq.n	800438e <ADDON_SIGFOX_RF_PROTOCOL_API_monarch_rc_scan_callback+0x70>
 8004388:	480b      	ldr	r0, [pc, #44]	; (80043b8 <.text_59>)
 800438a:	6800      	ldr	r0, [r0, #0]
 800438c:	4780      	blx	r0
 800438e:	2000      	movs	r0, #0
 8004390:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08004394 <.text_50>:
 8004394:	20000050 	.word	0x20000050

08004398 <.text_51>:
 8004398:	35f44180 	.word	0x35f44180

0800439c <.text_52>:
 800439c:	20000038 	.word	0x20000038

080043a0 <.text_53>:
 80043a0:	36f92e60 	.word	0x36f92e60

080043a4 <.text_54>:
 80043a4:	20000044 	.word	0x20000044

080043a8 <.text_55>:
 80043a8:	200002ec 	.word	0x200002ec

080043ac <.text_56>:
 80043ac:	200002f4 	.word	0x200002f4

080043b0 <.text_57>:
 80043b0:	200002f0 	.word	0x200002f0

080043b4 <.text_58>:
 80043b4:	200002f6 	.word	0x200002f6

080043b8 <.text_59>:
 80043b8:	20000300 	.word	0x20000300

080043bc <.text_60>:
 80043bc:	080041d3 	.word	0x080041d3

080043c0 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon>:
 80043c0:	b5fb      	push	{r0, r1, r3, r4, r5, r6, r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	0017      	movs	r7, r2
 80043c6:	2000      	movs	r0, #0
 80043c8:	9905      	ldr	r1, [sp, #20]
 80043ca:	6008      	str	r0, [r1, #0]
 80043cc:	2000      	movs	r0, #0
 80043ce:	0004      	movs	r4, r0
 80043d0:	b2e4      	uxtb	r4, r4
 80043d2:	2c08      	cmp	r4, #8
 80043d4:	da07      	bge.n	80043e6 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x26>
 80043d6:	2000      	movs	r0, #0
 80043d8:	4954      	ldr	r1, [pc, #336]	; (800452c <.text_65>)
 80043da:	b2e4      	uxtb	r4, r4
 80043dc:	2202      	movs	r2, #2
 80043de:	4362      	muls	r2, r4
 80043e0:	5288      	strh	r0, [r1, r2]
 80043e2:	1c64      	adds	r4, r4, #1
 80043e4:	e7f4      	b.n	80043d0 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x10>
 80043e6:	2000      	movs	r0, #0
 80043e8:	0004      	movs	r4, r0
 80043ea:	b2e4      	uxtb	r4, r4
 80043ec:	2c0c      	cmp	r4, #12
 80043ee:	da05      	bge.n	80043fc <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x3c>
 80043f0:	2000      	movs	r0, #0
 80043f2:	a901      	add	r1, sp, #4
 80043f4:	b2e4      	uxtb	r4, r4
 80043f6:	5508      	strb	r0, [r1, r4]
 80043f8:	1c64      	adds	r4, r4, #1
 80043fa:	e7f6      	b.n	80043ea <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x2a>
 80043fc:	2000      	movs	r0, #0
 80043fe:	0005      	movs	r5, r0
 8004400:	0028      	movs	r0, r5
 8004402:	0039      	movs	r1, r7
 8004404:	b280      	uxth	r0, r0
 8004406:	b289      	uxth	r1, r1
 8004408:	4288      	cmp	r0, r1
 800440a:	d300      	bcc.n	800440e <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x4e>
 800440c:	e084      	b.n	8004518 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x158>
 800440e:	2000      	movs	r0, #0
 8004410:	4947      	ldr	r1, [pc, #284]	; (8004530 <.text_66>)
 8004412:	7008      	strb	r0, [r1, #0]
 8004414:	4844      	ldr	r0, [pc, #272]	; (8004528 <.text_64>)
 8004416:	7800      	ldrb	r0, [r0, #0]
 8004418:	4669      	mov	r1, sp
 800441a:	7108      	strb	r0, [r1, #4]
 800441c:	4843      	ldr	r0, [pc, #268]	; (800452c <.text_65>)
 800441e:	4942      	ldr	r1, [pc, #264]	; (8004528 <.text_64>)
 8004420:	7809      	ldrb	r1, [r1, #0]
 8004422:	2202      	movs	r2, #2
 8004424:	4351      	muls	r1, r2
 8004426:	5a40      	ldrh	r0, [r0, r1]
 8004428:	b280      	uxth	r0, r0
 800442a:	0a00      	lsrs	r0, r0, #8
 800442c:	a901      	add	r1, sp, #4
 800442e:	7048      	strb	r0, [r1, #1]
 8004430:	483e      	ldr	r0, [pc, #248]	; (800452c <.text_65>)
 8004432:	493d      	ldr	r1, [pc, #244]	; (8004528 <.text_64>)
 8004434:	7809      	ldrb	r1, [r1, #0]
 8004436:	2202      	movs	r2, #2
 8004438:	4351      	muls	r1, r2
 800443a:	5a40      	ldrh	r0, [r0, r1]
 800443c:	a901      	add	r1, sp, #4
 800443e:	7088      	strb	r0, [r1, #2]
 8004440:	483c      	ldr	r0, [pc, #240]	; (8004534 <.text_67>)
 8004442:	2100      	movs	r1, #0
 8004444:	5e40      	ldrsh	r0, [r0, r1]
 8004446:	b280      	uxth	r0, r0
 8004448:	0a00      	lsrs	r0, r0, #8
 800444a:	a901      	add	r1, sp, #4
 800444c:	70c8      	strb	r0, [r1, #3]
 800444e:	4839      	ldr	r0, [pc, #228]	; (8004534 <.text_67>)
 8004450:	8800      	ldrh	r0, [r0, #0]
 8004452:	a901      	add	r1, sp, #4
 8004454:	7108      	strb	r0, [r1, #4]
 8004456:	b2ad      	uxth	r5, r5
 8004458:	b2bf      	uxth	r7, r7
 800445a:	1e78      	subs	r0, r7, #1
 800445c:	4285      	cmp	r5, r0
 800445e:	d103      	bne.n	8004468 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0xa8>
 8004460:	2025      	movs	r0, #37	; 0x25
 8004462:	a901      	add	r1, sp, #4
 8004464:	7148      	strb	r0, [r1, #5]
 8004466:	e009      	b.n	800447c <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0xbc>
 8004468:	b2ad      	uxth	r5, r5
 800446a:	2d00      	cmp	r5, #0
 800446c:	d103      	bne.n	8004476 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0xb6>
 800446e:	2024      	movs	r0, #36	; 0x24
 8004470:	a901      	add	r1, sp, #4
 8004472:	7148      	strb	r0, [r1, #5]
 8004474:	e002      	b.n	800447c <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0xbc>
 8004476:	2000      	movs	r0, #0
 8004478:	a901      	add	r1, sp, #4
 800447a:	7148      	strb	r0, [r1, #5]
 800447c:	9905      	ldr	r1, [sp, #20]
 800447e:	9804      	ldr	r0, [sp, #16]
 8004480:	f7ff fe67 	bl	8004152 <ADDON_SIGFOX_RF_PROTOCOL_API_init>
 8004484:	0006      	movs	r6, r0
 8004486:	b2b6      	uxth	r6, r6
 8004488:	2e00      	cmp	r6, #0
 800448a:	d002      	beq.n	8004492 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0xd2>
 800448c:	0030      	movs	r0, r6
 800448e:	b280      	uxth	r0, r0
 8004490:	e043      	b.n	800451a <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x15a>
 8004492:	2300      	movs	r3, #0
 8004494:	220c      	movs	r2, #12
 8004496:	a901      	add	r1, sp, #4
 8004498:	2000      	movs	r0, #0
 800449a:	f7fe f93d 	bl	8002718 <SIGFOX_API_send_test_frame>
 800449e:	0006      	movs	r6, r0
 80044a0:	b2b6      	uxth	r6, r6
 80044a2:	2e00      	cmp	r6, #0
 80044a4:	d004      	beq.n	80044b0 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0xf0>
 80044a6:	f7fd ff78 	bl	800239a <SIGFOX_API_close>
 80044aa:	0030      	movs	r0, r6
 80044ac:	b280      	uxth	r0, r0
 80044ae:	e034      	b.n	800451a <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x15a>
 80044b0:	f7fd ff73 	bl	800239a <SIGFOX_API_close>
 80044b4:	0006      	movs	r6, r0
 80044b6:	b2b6      	uxth	r6, r6
 80044b8:	2e00      	cmp	r6, #0
 80044ba:	d002      	beq.n	80044c2 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x102>
 80044bc:	0030      	movs	r0, r6
 80044be:	b280      	uxth	r0, r0
 80044c0:	e02b      	b.n	800451a <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x15a>
 80044c2:	b2ad      	uxth	r5, r5
 80044c4:	b2bf      	uxth	r7, r7
 80044c6:	1e78      	subs	r0, r7, #1
 80044c8:	4285      	cmp	r5, r0
 80044ca:	da23      	bge.n	8004514 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x154>
 80044cc:	4b1a      	ldr	r3, [pc, #104]	; (8004538 <.text_68>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	2104      	movs	r1, #4
 80044d2:	4668      	mov	r0, sp
 80044d4:	7e00      	ldrb	r0, [r0, #24]
 80044d6:	f001 f96f 	bl	80057b8 <SIGFOX_MONARCH_API_execute_rc_scan>
 80044da:	0006      	movs	r6, r0
 80044dc:	4811      	ldr	r0, [pc, #68]	; (8004524 <.text_63>)
 80044de:	6800      	ldr	r0, [r0, #0]
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d003      	beq.n	80044ec <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x12c>
 80044e4:	480f      	ldr	r0, [pc, #60]	; (8004524 <.text_63>)
 80044e6:	6800      	ldr	r0, [r0, #0]
 80044e8:	4780      	blx	r0
 80044ea:	e003      	b.n	80044f4 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x134>
 80044ec:	4810      	ldr	r0, [pc, #64]	; (8004530 <.text_66>)
 80044ee:	7800      	ldrb	r0, [r0, #0]
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d0fb      	beq.n	80044ec <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x12c>
 80044f4:	2006      	movs	r0, #6
 80044f6:	f7ff fd20 	bl	8003f3a <ADDON_SIGFOX_RF_PROTOCOL_API_sleep>
 80044fa:	4669      	mov	r1, sp
 80044fc:	7008      	strb	r0, [r1, #0]
 80044fe:	4668      	mov	r0, sp
 8004500:	7800      	ldrb	r0, [r0, #0]
 8004502:	2800      	cmp	r0, #0
 8004504:	d006      	beq.n	8004514 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x154>
 8004506:	4668      	mov	r0, sp
 8004508:	7800      	ldrb	r0, [r0, #0]
 800450a:	0201      	lsls	r1, r0, #8
 800450c:	20ce      	movs	r0, #206	; 0xce
 800450e:	4308      	orrs	r0, r1
 8004510:	b280      	uxth	r0, r0
 8004512:	e002      	b.n	800451a <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x15a>
 8004514:	1c6d      	adds	r5, r5, #1
 8004516:	e773      	b.n	8004400 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon+0x40>
 8004518:	2000      	movs	r0, #0
 800451a:	b007      	add	sp, #28
 800451c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004520 <.text_62>:
 8004520:	080041dd 	.word	0x080041dd

08004524 <.text_63>:
 8004524:	200002fc 	.word	0x200002fc

08004528 <.text_64>:
 8004528:	200002f8 	.word	0x200002f8

0800452c <.text_65>:
 800452c:	200002dc 	.word	0x200002dc

08004530 <.text_66>:
 8004530:	200002ec 	.word	0x200002ec

08004534 <.text_67>:
 8004534:	200002f6 	.word	0x200002f6

08004538 <.text_68>:
 8004538:	0800431f 	.word	0x0800431f

0800453c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode>:
 800453c:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 800453e:	b097      	sub	sp, #92	; 0x5c
 8004540:	2500      	movs	r5, #0
 8004542:	2600      	movs	r6, #0
 8004544:	2000      	movs	r0, #0
 8004546:	4669      	mov	r1, sp
 8004548:	80c8      	strh	r0, [r1, #6]
 800454a:	2000      	movs	r0, #0
 800454c:	4669      	mov	r1, sp
 800454e:	7108      	strb	r0, [r1, #4]
 8004550:	2000      	movs	r0, #0
 8004552:	4669      	mov	r1, sp
 8004554:	8188      	strh	r0, [r1, #12]
 8004556:	2000      	movs	r0, #0
 8004558:	4669      	mov	r1, sp
 800455a:	8148      	strh	r0, [r1, #10]
 800455c:	2000      	movs	r0, #0
 800455e:	4669      	mov	r1, sp
 8004560:	8108      	strh	r0, [r1, #8]
 8004562:	a807      	add	r0, sp, #28
 8004564:	2100      	movs	r1, #0
 8004566:	6001      	str	r1, [r0, #0]
 8004568:	a817      	add	r0, sp, #92	; 0x5c
 800456a:	7800      	ldrb	r0, [r0, #0]
 800456c:	2809      	cmp	r0, #9
 800456e:	db01      	blt.n	8004574 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x38>
 8004570:	20ca      	movs	r0, #202	; 0xca
 8004572:	e25b      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 8004574:	a90b      	add	r1, sp, #44	; 0x2c
 8004576:	a817      	add	r0, sp, #92	; 0x5c
 8004578:	7800      	ldrb	r0, [r0, #0]
 800457a:	f7ff fbfd 	bl	8003d78 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc>
 800457e:	a908      	add	r1, sp, #32
 8004580:	a80b      	add	r0, sp, #44	; 0x2c
 8004582:	f7ff fde6 	bl	8004152 <ADDON_SIGFOX_RF_PROTOCOL_API_init>
 8004586:	0005      	movs	r5, r0
 8004588:	b2ad      	uxth	r5, r5
 800458a:	2d00      	cmp	r5, #0
 800458c:	d002      	beq.n	8004594 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x58>
 800458e:	0028      	movs	r0, r5
 8004590:	b280      	uxth	r0, r0
 8004592:	e24b      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 8004594:	a818      	add	r0, sp, #96	; 0x60
 8004596:	7800      	ldrb	r0, [r0, #0]
 8004598:	2800      	cmp	r0, #0
 800459a:	d015      	beq.n	80045c8 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x8c>
 800459c:	2801      	cmp	r0, #1
 800459e:	d100      	bne.n	80045a2 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x66>
 80045a0:	e0a5      	b.n	80046ee <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x1b2>
 80045a2:	2802      	cmp	r0, #2
 80045a4:	d100      	bne.n	80045a8 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x6c>
 80045a6:	e0c9      	b.n	800473c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x200>
 80045a8:	2803      	cmp	r0, #3
 80045aa:	d100      	bne.n	80045ae <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x72>
 80045ac:	e123      	b.n	80047f6 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x2ba>
 80045ae:	2804      	cmp	r0, #4
 80045b0:	d100      	bne.n	80045b4 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x78>
 80045b2:	e146      	b.n	8004842 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x306>
 80045b4:	2805      	cmp	r0, #5
 80045b6:	d100      	bne.n	80045ba <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x7e>
 80045b8:	e1db      	b.n	8004972 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x436>
 80045ba:	2806      	cmp	r0, #6
 80045bc:	d061      	beq.n	8004682 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x146>
 80045be:	280b      	cmp	r0, #11
 80045c0:	d040      	beq.n	8004644 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x108>
 80045c2:	280d      	cmp	r0, #13
 80045c4:	d06a      	beq.n	800469c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x160>
 80045c6:	e223      	b.n	8004a10 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4d4>
 80045c8:	2000      	movs	r0, #0
 80045ca:	0004      	movs	r4, r0
 80045cc:	b2e4      	uxtb	r4, r4
 80045ce:	2c0c      	cmp	r4, #12
 80045d0:	da05      	bge.n	80045de <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0xa2>
 80045d2:	20aa      	movs	r0, #170	; 0xaa
 80045d4:	a904      	add	r1, sp, #16
 80045d6:	b2e4      	uxtb	r4, r4
 80045d8:	5508      	strb	r0, [r1, r4]
 80045da:	1c64      	adds	r4, r4, #1
 80045dc:	e7f6      	b.n	80045cc <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x90>
 80045de:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80045e0:	0007      	movs	r7, r0
 80045e2:	a80b      	add	r0, sp, #44	; 0x2c
 80045e4:	7b40      	ldrb	r0, [r0, #13]
 80045e6:	2801      	cmp	r0, #1
 80045e8:	d106      	bne.n	80045f8 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0xbc>
 80045ea:	9808      	ldr	r0, [sp, #32]
 80045ec:	f7ff fc7c 	bl	8003ee8 <ADDON_SIGFOX_RF_PROTOCOL_API_get_first_activated_macro_channel>
 80045f0:	4988      	ldr	r1, [pc, #544]	; (8004814 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x2d8>)
 80045f2:	4348      	muls	r0, r1
 80045f4:	1838      	adds	r0, r7, r0
 80045f6:	0007      	movs	r7, r0
 80045f8:	2000      	movs	r0, #0
 80045fa:	0004      	movs	r4, r0
 80045fc:	b2e4      	uxtb	r4, r4
 80045fe:	2c03      	cmp	r4, #3
 8004600:	da1f      	bge.n	8004642 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x106>
 8004602:	2300      	movs	r3, #0
 8004604:	220c      	movs	r2, #12
 8004606:	a904      	add	r1, sp, #16
 8004608:	0038      	movs	r0, r7
 800460a:	f7fe f885 	bl	8002718 <SIGFOX_API_send_test_frame>
 800460e:	0005      	movs	r5, r0
 8004610:	b2ad      	uxth	r5, r5
 8004612:	2d00      	cmp	r5, #0
 8004614:	d004      	beq.n	8004620 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0xe4>
 8004616:	f7fd fec0 	bl	800239a <SIGFOX_API_close>
 800461a:	0028      	movs	r0, r5
 800461c:	b280      	uxth	r0, r0
 800461e:	e205      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 8004620:	2001      	movs	r0, #1
 8004622:	f7ff fc8a 	bl	8003f3a <ADDON_SIGFOX_RF_PROTOCOL_API_sleep>
 8004626:	0006      	movs	r6, r0
 8004628:	b2f6      	uxtb	r6, r6
 800462a:	2e00      	cmp	r6, #0
 800462c:	d007      	beq.n	800463e <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x102>
 800462e:	f7fd feb4 	bl	800239a <SIGFOX_API_close>
 8004632:	b2f6      	uxtb	r6, r6
 8004634:	0231      	lsls	r1, r6, #8
 8004636:	20c7      	movs	r0, #199	; 0xc7
 8004638:	4308      	orrs	r0, r1
 800463a:	b280      	uxth	r0, r0
 800463c:	e1f6      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 800463e:	1c64      	adds	r4, r4, #1
 8004640:	e7dc      	b.n	80045fc <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0xc0>
 8004642:	e1e9      	b.n	8004a18 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4dc>
 8004644:	2300      	movs	r3, #0
 8004646:	2202      	movs	r2, #2
 8004648:	2100      	movs	r1, #0
 800464a:	2000      	movs	r0, #0
 800464c:	f7fd fef7 	bl	800243e <SIGFOX_API_send_bit>
 8004650:	0005      	movs	r5, r0
 8004652:	b2ad      	uxth	r5, r5
 8004654:	2d00      	cmp	r5, #0
 8004656:	d004      	beq.n	8004662 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x126>
 8004658:	f7fd fe9f 	bl	800239a <SIGFOX_API_close>
 800465c:	0028      	movs	r0, r5
 800465e:	b280      	uxth	r0, r0
 8004660:	e1e4      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 8004662:	2300      	movs	r3, #0
 8004664:	2202      	movs	r2, #2
 8004666:	2100      	movs	r1, #0
 8004668:	2001      	movs	r0, #1
 800466a:	f7fd fee8 	bl	800243e <SIGFOX_API_send_bit>
 800466e:	0005      	movs	r5, r0
 8004670:	b2ad      	uxth	r5, r5
 8004672:	2d00      	cmp	r5, #0
 8004674:	d004      	beq.n	8004680 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x144>
 8004676:	f7fd fe90 	bl	800239a <SIGFOX_API_close>
 800467a:	0028      	movs	r0, r5
 800467c:	b280      	uxth	r0, r0
 800467e:	e1d5      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 8004680:	e1ca      	b.n	8004a18 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4dc>
 8004682:	2007      	movs	r0, #7
 8004684:	f7ff fc9f 	bl	8003fc6 <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol>
 8004688:	0005      	movs	r5, r0
 800468a:	b2ad      	uxth	r5, r5
 800468c:	2d00      	cmp	r5, #0
 800468e:	d004      	beq.n	800469a <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x15e>
 8004690:	f7fd fe83 	bl	800239a <SIGFOX_API_close>
 8004694:	0028      	movs	r0, r5
 8004696:	b280      	uxth	r0, r0
 8004698:	e1c8      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 800469a:	e1bd      	b.n	8004a18 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4dc>
 800469c:	a807      	add	r0, sp, #28
 800469e:	f009 f93a 	bl	800d916 <MCU_API_get_nv_mem>
 80046a2:	0006      	movs	r6, r0
 80046a4:	b2f6      	uxtb	r6, r6
 80046a6:	2e00      	cmp	r6, #0
 80046a8:	d007      	beq.n	80046ba <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x17e>
 80046aa:	f7fd fe76 	bl	800239a <SIGFOX_API_close>
 80046ae:	b2f6      	uxtb	r6, r6
 80046b0:	0231      	lsls	r1, r6, #8
 80046b2:	20d0      	movs	r0, #208	; 0xd0
 80046b4:	4308      	orrs	r0, r1
 80046b6:	b280      	uxth	r0, r0
 80046b8:	e1b8      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 80046ba:	4668      	mov	r0, sp
 80046bc:	7f00      	ldrb	r0, [r0, #28]
 80046be:	4669      	mov	r1, sp
 80046c0:	7408      	strb	r0, [r1, #16]
 80046c2:	a807      	add	r0, sp, #28
 80046c4:	7840      	ldrb	r0, [r0, #1]
 80046c6:	a904      	add	r1, sp, #16
 80046c8:	7048      	strb	r0, [r1, #1]
 80046ca:	2000      	movs	r0, #0
 80046cc:	9000      	str	r0, [sp, #0]
 80046ce:	2302      	movs	r3, #2
 80046d0:	2200      	movs	r2, #0
 80046d2:	2102      	movs	r1, #2
 80046d4:	a804      	add	r0, sp, #16
 80046d6:	f7fd fe7d 	bl	80023d4 <SIGFOX_API_send_frame>
 80046da:	0005      	movs	r5, r0
 80046dc:	b2ad      	uxth	r5, r5
 80046de:	2d00      	cmp	r5, #0
 80046e0:	d004      	beq.n	80046ec <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x1b0>
 80046e2:	f7fd fe5a 	bl	800239a <SIGFOX_API_close>
 80046e6:	0028      	movs	r0, r5
 80046e8:	b280      	uxth	r0, r0
 80046ea:	e19f      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 80046ec:	e194      	b.n	8004a18 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4dc>
 80046ee:	f7ff fc3e 	bl	8003f6e <ADDON_SIGFOX_RF_PROTOCOL_API_send_rc_sync>
 80046f2:	0005      	movs	r5, r0
 80046f4:	b2ad      	uxth	r5, r5
 80046f6:	2d00      	cmp	r5, #0
 80046f8:	d013      	beq.n	8004722 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x1e6>
 80046fa:	0028      	movs	r0, r5
 80046fc:	b280      	uxth	r0, r0
 80046fe:	0a00      	lsrs	r0, r0, #8
 8004700:	b280      	uxth	r0, r0
 8004702:	2849      	cmp	r0, #73	; 0x49
 8004704:	d10a      	bne.n	800471c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x1e0>
 8004706:	a908      	add	r1, sp, #32
 8004708:	a80b      	add	r0, sp, #44	; 0x2c
 800470a:	f7ff fd22 	bl	8004152 <ADDON_SIGFOX_RF_PROTOCOL_API_init>
 800470e:	0005      	movs	r5, r0
 8004710:	b2ad      	uxth	r5, r5
 8004712:	2d00      	cmp	r5, #0
 8004714:	d005      	beq.n	8004722 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x1e6>
 8004716:	0028      	movs	r0, r5
 8004718:	b280      	uxth	r0, r0
 800471a:	e187      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 800471c:	0028      	movs	r0, r5
 800471e:	b280      	uxth	r0, r0
 8004720:	e184      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 8004722:	2001      	movs	r0, #1
 8004724:	f7ff fc4f 	bl	8003fc6 <ADDON_SIGFOX_RF_PROTOCOL_API_send_tx_protocol>
 8004728:	0005      	movs	r5, r0
 800472a:	b2ad      	uxth	r5, r5
 800472c:	2d00      	cmp	r5, #0
 800472e:	d004      	beq.n	800473a <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x1fe>
 8004730:	f7fd fe33 	bl	800239a <SIGFOX_API_close>
 8004734:	0028      	movs	r0, r5
 8004736:	b280      	uxth	r0, r0
 8004738:	e178      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 800473a:	e16d      	b.n	8004a18 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4dc>
 800473c:	2000      	movs	r0, #0
 800473e:	0004      	movs	r4, r0
 8004740:	b2e4      	uxtb	r4, r4
 8004742:	2c0c      	cmp	r4, #12
 8004744:	da06      	bge.n	8004754 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x218>
 8004746:	0020      	movs	r0, r4
 8004748:	3040      	adds	r0, #64	; 0x40
 800474a:	a904      	add	r1, sp, #16
 800474c:	b2e4      	uxtb	r4, r4
 800474e:	5508      	strb	r0, [r1, r4]
 8004750:	1c64      	adds	r4, r4, #1
 8004752:	e7f5      	b.n	8004740 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x204>
 8004754:	2001      	movs	r0, #1
 8004756:	9000      	str	r0, [sp, #0]
 8004758:	2302      	movs	r3, #2
 800475a:	aa09      	add	r2, sp, #36	; 0x24
 800475c:	210c      	movs	r1, #12
 800475e:	a804      	add	r0, sp, #16
 8004760:	f7fd fe38 	bl	80023d4 <SIGFOX_API_send_frame>
 8004764:	0005      	movs	r5, r0
 8004766:	b2ad      	uxth	r5, r5
 8004768:	2d00      	cmp	r5, #0
 800476a:	d004      	beq.n	8004776 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x23a>
 800476c:	f7fd fe15 	bl	800239a <SIGFOX_API_close>
 8004770:	0028      	movs	r0, r5
 8004772:	b280      	uxth	r0, r0
 8004774:	e15a      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 8004776:	2001      	movs	r0, #1
 8004778:	4669      	mov	r1, sp
 800477a:	7108      	strb	r0, [r1, #4]
 800477c:	2001      	movs	r0, #1
 800477e:	4669      	mov	r1, sp
 8004780:	7408      	strb	r0, [r1, #16]
 8004782:	2000      	movs	r0, #0
 8004784:	0004      	movs	r4, r0
 8004786:	b2e4      	uxtb	r4, r4
 8004788:	2c08      	cmp	r4, #8
 800478a:	da13      	bge.n	80047b4 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x278>
 800478c:	4668      	mov	r0, sp
 800478e:	7900      	ldrb	r0, [r0, #4]
 8004790:	2801      	cmp	r0, #1
 8004792:	d10f      	bne.n	80047b4 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x278>
 8004794:	a809      	add	r0, sp, #36	; 0x24
 8004796:	b2e4      	uxtb	r4, r4
 8004798:	5d01      	ldrb	r1, [r0, r4]
 800479a:	b2e4      	uxtb	r4, r4
 800479c:	0020      	movs	r0, r4
 800479e:	3030      	adds	r0, #48	; 0x30
 80047a0:	4281      	cmp	r1, r0
 80047a2:	d005      	beq.n	80047b0 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x274>
 80047a4:	2000      	movs	r0, #0
 80047a6:	4669      	mov	r1, sp
 80047a8:	7108      	strb	r0, [r1, #4]
 80047aa:	2000      	movs	r0, #0
 80047ac:	4669      	mov	r1, sp
 80047ae:	7408      	strb	r0, [r1, #16]
 80047b0:	1c64      	adds	r4, r4, #1
 80047b2:	e7e8      	b.n	8004786 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x24a>
 80047b4:	2100      	movs	r1, #0
 80047b6:	4668      	mov	r0, sp
 80047b8:	7900      	ldrb	r0, [r0, #4]
 80047ba:	f009 f941 	bl	800da40 <MCU_API_report_test_result>
 80047be:	0006      	movs	r6, r0
 80047c0:	b2f6      	uxtb	r6, r6
 80047c2:	2e00      	cmp	r6, #0
 80047c4:	d007      	beq.n	80047d6 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x29a>
 80047c6:	f7fd fde8 	bl	800239a <SIGFOX_API_close>
 80047ca:	b2f6      	uxtb	r6, r6
 80047cc:	0231      	lsls	r1, r6, #8
 80047ce:	20c1      	movs	r0, #193	; 0xc1
 80047d0:	4308      	orrs	r0, r1
 80047d2:	b280      	uxth	r0, r0
 80047d4:	e12a      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 80047d6:	2300      	movs	r3, #0
 80047d8:	2201      	movs	r2, #1
 80047da:	a904      	add	r1, sp, #16
 80047dc:	2000      	movs	r0, #0
 80047de:	f7fd ff9b 	bl	8002718 <SIGFOX_API_send_test_frame>
 80047e2:	0005      	movs	r5, r0
 80047e4:	b2ad      	uxth	r5, r5
 80047e6:	2d00      	cmp	r5, #0
 80047e8:	d004      	beq.n	80047f4 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x2b8>
 80047ea:	f7fd fdd6 	bl	800239a <SIGFOX_API_close>
 80047ee:	0028      	movs	r0, r5
 80047f0:	b280      	uxth	r0, r0
 80047f2:	e11b      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 80047f4:	e110      	b.n	8004a18 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4dc>
 80047f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80047f8:	0007      	movs	r7, r0
 80047fa:	2000      	movs	r0, #0
 80047fc:	0004      	movs	r4, r0
 80047fe:	b2e4      	uxtb	r4, r4
 8004800:	2c0f      	cmp	r4, #15
 8004802:	da09      	bge.n	8004818 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x2dc>
 8004804:	488a      	ldr	r0, [pc, #552]	; (8004a30 <.text_70>)
 8004806:	b2e4      	uxtb	r4, r4
 8004808:	5d00      	ldrb	r0, [r0, r4]
 800480a:	a912      	add	r1, sp, #72	; 0x48
 800480c:	b2e4      	uxtb	r4, r4
 800480e:	5508      	strb	r0, [r1, r4]
 8004810:	1c64      	adds	r4, r4, #1
 8004812:	e7f4      	b.n	80047fe <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x2c2>
 8004814:	000493e0 	.word	0x000493e0
 8004818:	a802      	add	r0, sp, #8
 800481a:	9000      	str	r0, [sp, #0]
 800481c:	231e      	movs	r3, #30
 800481e:	aa12      	add	r2, sp, #72	; 0x48
 8004820:	2100      	movs	r1, #0
 8004822:	0038      	movs	r0, r7
 8004824:	f7fd fff4 	bl	8002810 <SIGFOX_API_receive_test_frame>
 8004828:	0005      	movs	r5, r0
 800482a:	b2ad      	uxth	r5, r5
 800482c:	2d00      	cmp	r5, #0
 800482e:	d007      	beq.n	8004840 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x304>
 8004830:	b2ad      	uxth	r5, r5
 8004832:	2d9b      	cmp	r5, #155	; 0x9b
 8004834:	d004      	beq.n	8004840 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x304>
 8004836:	f7fd fdb0 	bl	800239a <SIGFOX_API_close>
 800483a:	0028      	movs	r0, r5
 800483c:	b280      	uxth	r0, r0
 800483e:	e0f5      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 8004840:	e0ea      	b.n	8004a18 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4dc>
 8004842:	2000      	movs	r0, #0
 8004844:	0004      	movs	r4, r0
 8004846:	b2e4      	uxtb	r4, r4
 8004848:	2c0c      	cmp	r4, #12
 800484a:	da05      	bge.n	8004858 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x31c>
 800484c:	2000      	movs	r0, #0
 800484e:	a904      	add	r1, sp, #16
 8004850:	b2e4      	uxtb	r4, r4
 8004852:	5508      	strb	r0, [r1, r4]
 8004854:	1c64      	adds	r4, r4, #1
 8004856:	e7f6      	b.n	8004846 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x30a>
 8004858:	2000      	movs	r0, #0
 800485a:	4669      	mov	r1, sp
 800485c:	80c8      	strh	r0, [r1, #6]
 800485e:	4668      	mov	r0, sp
 8004860:	88c0      	ldrh	r0, [r0, #6]
 8004862:	21ff      	movs	r1, #255	; 0xff
 8004864:	312e      	adds	r1, #46	; 0x2e
 8004866:	4288      	cmp	r0, r1
 8004868:	db00      	blt.n	800486c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x330>
 800486a:	e081      	b.n	8004970 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x434>
 800486c:	4668      	mov	r0, sp
 800486e:	88c0      	ldrh	r0, [r0, #6]
 8004870:	2196      	movs	r1, #150	; 0x96
 8004872:	0049      	lsls	r1, r1, #1
 8004874:	4288      	cmp	r0, r1
 8004876:	d103      	bne.n	8004880 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x344>
 8004878:	2023      	movs	r0, #35	; 0x23
 800487a:	a904      	add	r1, sp, #16
 800487c:	71c8      	strb	r0, [r1, #7]
 800487e:	e002      	b.n	8004886 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x34a>
 8004880:	2000      	movs	r0, #0
 8004882:	a904      	add	r1, sp, #16
 8004884:	71c8      	strb	r0, [r1, #7]
 8004886:	2301      	movs	r3, #1
 8004888:	220c      	movs	r2, #12
 800488a:	a904      	add	r1, sp, #16
 800488c:	2000      	movs	r0, #0
 800488e:	f7fd ff43 	bl	8002718 <SIGFOX_API_send_test_frame>
 8004892:	0005      	movs	r5, r0
 8004894:	b2ad      	uxth	r5, r5
 8004896:	2d00      	cmp	r5, #0
 8004898:	d004      	beq.n	80048a4 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x368>
 800489a:	f7fd fd7e 	bl	800239a <SIGFOX_API_close>
 800489e:	0028      	movs	r0, r5
 80048a0:	b280      	uxth	r0, r0
 80048a2:	e0c3      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 80048a4:	a802      	add	r0, sp, #8
 80048a6:	9000      	str	r0, [sp, #0]
 80048a8:	2304      	movs	r3, #4
 80048aa:	aa12      	add	r2, sp, #72	; 0x48
 80048ac:	2101      	movs	r1, #1
 80048ae:	2000      	movs	r0, #0
 80048b0:	f7fd ffae 	bl	8002810 <SIGFOX_API_receive_test_frame>
 80048b4:	0005      	movs	r5, r0
 80048b6:	b2ad      	uxth	r5, r5
 80048b8:	2d9b      	cmp	r5, #155	; 0x9b
 80048ba:	d108      	bne.n	80048ce <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x392>
 80048bc:	4668      	mov	r0, sp
 80048be:	4669      	mov	r1, sp
 80048c0:	8989      	ldrh	r1, [r1, #12]
 80048c2:	1c49      	adds	r1, r1, #1
 80048c4:	8181      	strh	r1, [r0, #12]
 80048c6:	2000      	movs	r0, #0
 80048c8:	4669      	mov	r1, sp
 80048ca:	7108      	strb	r0, [r1, #4]
 80048cc:	e010      	b.n	80048f0 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x3b4>
 80048ce:	b2ad      	uxth	r5, r5
 80048d0:	2d00      	cmp	r5, #0
 80048d2:	d108      	bne.n	80048e6 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x3aa>
 80048d4:	4668      	mov	r0, sp
 80048d6:	4669      	mov	r1, sp
 80048d8:	8949      	ldrh	r1, [r1, #10]
 80048da:	1c49      	adds	r1, r1, #1
 80048dc:	8141      	strh	r1, [r0, #10]
 80048de:	2001      	movs	r0, #1
 80048e0:	4669      	mov	r1, sp
 80048e2:	7108      	strb	r0, [r1, #4]
 80048e4:	e004      	b.n	80048f0 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x3b4>
 80048e6:	f7fd fd58 	bl	800239a <SIGFOX_API_close>
 80048ea:	0028      	movs	r0, r5
 80048ec:	b280      	uxth	r0, r0
 80048ee:	e09d      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 80048f0:	9902      	ldr	r1, [sp, #8]
 80048f2:	b209      	sxth	r1, r1
 80048f4:	4668      	mov	r0, sp
 80048f6:	7900      	ldrb	r0, [r0, #4]
 80048f8:	f009 f8a2 	bl	800da40 <MCU_API_report_test_result>
 80048fc:	0006      	movs	r6, r0
 80048fe:	b2f6      	uxtb	r6, r6
 8004900:	2e00      	cmp	r6, #0
 8004902:	d007      	beq.n	8004914 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x3d8>
 8004904:	f7fd fd49 	bl	800239a <SIGFOX_API_close>
 8004908:	b2f6      	uxtb	r6, r6
 800490a:	0231      	lsls	r1, r6, #8
 800490c:	20c1      	movs	r0, #193	; 0xc1
 800490e:	4308      	orrs	r0, r1
 8004910:	b280      	uxth	r0, r0
 8004912:	e08b      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 8004914:	4668      	mov	r0, sp
 8004916:	8940      	ldrh	r0, [r0, #10]
 8004918:	b280      	uxth	r0, r0
 800491a:	0a00      	lsrs	r0, r0, #8
 800491c:	a904      	add	r1, sp, #16
 800491e:	7088      	strb	r0, [r1, #2]
 8004920:	4668      	mov	r0, sp
 8004922:	8940      	ldrh	r0, [r0, #10]
 8004924:	a904      	add	r1, sp, #16
 8004926:	70c8      	strb	r0, [r1, #3]
 8004928:	9802      	ldr	r0, [sp, #8]
 800492a:	b200      	sxth	r0, r0
 800492c:	3064      	adds	r0, #100	; 0x64
 800492e:	a904      	add	r1, sp, #16
 8004930:	7108      	strb	r0, [r1, #4]
 8004932:	4668      	mov	r0, sp
 8004934:	8980      	ldrh	r0, [r0, #12]
 8004936:	b280      	uxth	r0, r0
 8004938:	0a00      	lsrs	r0, r0, #8
 800493a:	a904      	add	r1, sp, #16
 800493c:	7148      	strb	r0, [r1, #5]
 800493e:	4668      	mov	r0, sp
 8004940:	8980      	ldrh	r0, [r0, #12]
 8004942:	a904      	add	r1, sp, #16
 8004944:	7188      	strb	r0, [r1, #6]
 8004946:	2006      	movs	r0, #6
 8004948:	f7ff faf7 	bl	8003f3a <ADDON_SIGFOX_RF_PROTOCOL_API_sleep>
 800494c:	0006      	movs	r6, r0
 800494e:	b2f6      	uxtb	r6, r6
 8004950:	2e00      	cmp	r6, #0
 8004952:	d007      	beq.n	8004964 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x428>
 8004954:	f7fd fd21 	bl	800239a <SIGFOX_API_close>
 8004958:	b2f6      	uxtb	r6, r6
 800495a:	0231      	lsls	r1, r6, #8
 800495c:	20c8      	movs	r0, #200	; 0xc8
 800495e:	4308      	orrs	r0, r1
 8004960:	b280      	uxth	r0, r0
 8004962:	e063      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 8004964:	4668      	mov	r0, sp
 8004966:	4669      	mov	r1, sp
 8004968:	88c9      	ldrh	r1, [r1, #6]
 800496a:	1c49      	adds	r1, r1, #1
 800496c:	80c1      	strh	r1, [r0, #6]
 800496e:	e776      	b.n	800485e <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x322>
 8004970:	e052      	b.n	8004a18 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4dc>
 8004972:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004974:	0007      	movs	r7, r0
 8004976:	a80b      	add	r0, sp, #44	; 0x2c
 8004978:	7b40      	ldrb	r0, [r0, #13]
 800497a:	2801      	cmp	r0, #1
 800497c:	d106      	bne.n	800498c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x450>
 800497e:	9808      	ldr	r0, [sp, #32]
 8004980:	f7ff fab2 	bl	8003ee8 <ADDON_SIGFOX_RF_PROTOCOL_API_get_first_activated_macro_channel>
 8004984:	49a4      	ldr	r1, [pc, #656]	; (8004c18 <.text_73>)
 8004986:	4348      	muls	r0, r1
 8004988:	1838      	adds	r0, r7, r0
 800498a:	0007      	movs	r7, r0
 800498c:	2000      	movs	r0, #0
 800498e:	0004      	movs	r4, r0
 8004990:	b2e4      	uxtb	r4, r4
 8004992:	2c09      	cmp	r4, #9
 8004994:	da3b      	bge.n	8004a0e <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4d2>
 8004996:	2009      	movs	r0, #9
 8004998:	f008 fffa 	bl	800d990 <MCU_API_timer_start>
 800499c:	0006      	movs	r6, r0
 800499e:	b2f6      	uxtb	r6, r6
 80049a0:	2e00      	cmp	r6, #0
 80049a2:	d007      	beq.n	80049b4 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x478>
 80049a4:	f7fd fcf9 	bl	800239a <SIGFOX_API_close>
 80049a8:	b2f6      	uxtb	r6, r6
 80049aa:	0231      	lsls	r1, r6, #8
 80049ac:	20c9      	movs	r0, #201	; 0xc9
 80049ae:	4308      	orrs	r0, r1
 80049b0:	b280      	uxth	r0, r0
 80049b2:	e03b      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 80049b4:	3764      	adds	r7, #100	; 0x64
 80049b6:	0038      	movs	r0, r7
 80049b8:	4669      	mov	r1, sp
 80049ba:	7408      	strb	r0, [r1, #16]
 80049bc:	0a38      	lsrs	r0, r7, #8
 80049be:	a904      	add	r1, sp, #16
 80049c0:	7048      	strb	r0, [r1, #1]
 80049c2:	0038      	movs	r0, r7
 80049c4:	0c00      	lsrs	r0, r0, #16
 80049c6:	a904      	add	r1, sp, #16
 80049c8:	7088      	strb	r0, [r1, #2]
 80049ca:	0e38      	lsrs	r0, r7, #24
 80049cc:	a904      	add	r1, sp, #16
 80049ce:	70c8      	strb	r0, [r1, #3]
 80049d0:	2300      	movs	r3, #0
 80049d2:	2204      	movs	r2, #4
 80049d4:	a904      	add	r1, sp, #16
 80049d6:	0038      	movs	r0, r7
 80049d8:	f7fd fe9e 	bl	8002718 <SIGFOX_API_send_test_frame>
 80049dc:	0005      	movs	r5, r0
 80049de:	b2ad      	uxth	r5, r5
 80049e0:	2d00      	cmp	r5, #0
 80049e2:	d004      	beq.n	80049ee <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4b2>
 80049e4:	f7fd fcd9 	bl	800239a <SIGFOX_API_close>
 80049e8:	0028      	movs	r0, r5
 80049ea:	b280      	uxth	r0, r0
 80049ec:	e01e      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 80049ee:	f009 f819 	bl	800da24 <MCU_API_timer_wait_for_end>
 80049f2:	0006      	movs	r6, r0
 80049f4:	b2f6      	uxtb	r6, r6
 80049f6:	2e00      	cmp	r6, #0
 80049f8:	d007      	beq.n	8004a0a <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4ce>
 80049fa:	f7fd fcce 	bl	800239a <SIGFOX_API_close>
 80049fe:	b2f6      	uxtb	r6, r6
 8004a00:	0231      	lsls	r1, r6, #8
 8004a02:	20c9      	movs	r0, #201	; 0xc9
 8004a04:	4308      	orrs	r0, r1
 8004a06:	b280      	uxth	r0, r0
 8004a08:	e010      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 8004a0a:	1c64      	adds	r4, r4, #1
 8004a0c:	e7c0      	b.n	8004990 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x454>
 8004a0e:	e003      	b.n	8004a18 <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4dc>
 8004a10:	f7fd fcc3 	bl	800239a <SIGFOX_API_close>
 8004a14:	20cc      	movs	r0, #204	; 0xcc
 8004a16:	e009      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 8004a18:	f7fd fcbf 	bl	800239a <SIGFOX_API_close>
 8004a1c:	0005      	movs	r5, r0
 8004a1e:	b2ad      	uxth	r5, r5
 8004a20:	2d00      	cmp	r5, #0
 8004a22:	d002      	beq.n	8004a2a <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4ee>
 8004a24:	0028      	movs	r0, r5
 8004a26:	b280      	uxth	r0, r0
 8004a28:	e000      	b.n	8004a2c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode+0x4f0>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	b019      	add	sp, #100	; 0x64
 8004a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a30 <.text_70>:
 8004a30:	08024ca4 	.word	0x08024ca4

08004a34 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode>:
 8004a34:	b580      	push	{r7, lr}
 8004a36:	2300      	movs	r3, #0
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	b2c9      	uxtb	r1, r1
 8004a40:	b2c0      	uxtb	r0, r0
 8004a42:	f000 f801 	bl	8004a48 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async>
 8004a46:	bd02      	pop	{r1, pc}

08004a48 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async>:
 8004a48:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8004a4a:	b098      	sub	sp, #96	; 0x60
 8004a4c:	0007      	movs	r7, r0
 8004a4e:	2400      	movs	r4, #0
 8004a50:	2600      	movs	r6, #0
 8004a52:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d009      	beq.n	8004a6c <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x24>
 8004a58:	9820      	ldr	r0, [sp, #128]	; 0x80
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d006      	beq.n	8004a6c <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x24>
 8004a5e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004a60:	496e      	ldr	r1, [pc, #440]	; (8004c1c <.text_74>)
 8004a62:	6008      	str	r0, [r1, #0]
 8004a64:	9820      	ldr	r0, [sp, #128]	; 0x80
 8004a66:	496e      	ldr	r1, [pc, #440]	; (8004c20 <.text_75>)
 8004a68:	6008      	str	r0, [r1, #0]
 8004a6a:	e005      	b.n	8004a78 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x30>
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	496b      	ldr	r1, [pc, #428]	; (8004c1c <.text_74>)
 8004a70:	6008      	str	r0, [r1, #0]
 8004a72:	2000      	movs	r0, #0
 8004a74:	496a      	ldr	r1, [pc, #424]	; (8004c20 <.text_75>)
 8004a76:	6008      	str	r0, [r1, #0]
 8004a78:	b2ff      	uxtb	r7, r7
 8004a7a:	2f09      	cmp	r7, #9
 8004a7c:	da02      	bge.n	8004a84 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x3c>
 8004a7e:	b2ff      	uxtb	r7, r7
 8004a80:	2f08      	cmp	r7, #8
 8004a82:	d101      	bne.n	8004a88 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x40>
 8004a84:	20ca      	movs	r0, #202	; 0xca
 8004a86:	e0c5      	b.n	8004c14 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1cc>
 8004a88:	a910      	add	r1, sp, #64	; 0x40
 8004a8a:	0038      	movs	r0, r7
 8004a8c:	b2c0      	uxtb	r0, r0
 8004a8e:	f7ff f973 	bl	8003d78 <ADDON_SIGFOX_RF_PROTOCOL_API_initialize_rc>
 8004a92:	b2ff      	uxtb	r7, r7
 8004a94:	2f00      	cmp	r7, #0
 8004a96:	d00b      	beq.n	8004ab0 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x68>
 8004a98:	2f02      	cmp	r7, #2
 8004a9a:	d012      	beq.n	8004ac2 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x7a>
 8004a9c:	d30b      	bcc.n	8004ab6 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x6e>
 8004a9e:	2f04      	cmp	r7, #4
 8004aa0:	d00c      	beq.n	8004abc <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x74>
 8004aa2:	d30e      	bcc.n	8004ac2 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x7a>
 8004aa4:	2f06      	cmp	r7, #6
 8004aa6:	d012      	beq.n	8004ace <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x86>
 8004aa8:	d30e      	bcc.n	8004ac8 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x80>
 8004aaa:	2f07      	cmp	r7, #7
 8004aac:	d012      	beq.n	8004ad4 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x8c>
 8004aae:	e014      	b.n	8004ada <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x92>
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	0005      	movs	r5, r0
 8004ab4:	e013      	b.n	8004ade <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x96>
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	0005      	movs	r5, r0
 8004aba:	e010      	b.n	8004ade <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x96>
 8004abc:	2003      	movs	r0, #3
 8004abe:	0005      	movs	r5, r0
 8004ac0:	e00d      	b.n	8004ade <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x96>
 8004ac2:	2002      	movs	r0, #2
 8004ac4:	0005      	movs	r5, r0
 8004ac6:	e00a      	b.n	8004ade <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x96>
 8004ac8:	2004      	movs	r0, #4
 8004aca:	0005      	movs	r5, r0
 8004acc:	e007      	b.n	8004ade <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x96>
 8004ace:	2005      	movs	r0, #5
 8004ad0:	0005      	movs	r5, r0
 8004ad2:	e004      	b.n	8004ade <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x96>
 8004ad4:	2006      	movs	r0, #6
 8004ad6:	0005      	movs	r5, r0
 8004ad8:	e001      	b.n	8004ade <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x96>
 8004ada:	2007      	movs	r0, #7
 8004adc:	0005      	movs	r5, r0
 8004ade:	a818      	add	r0, sp, #96	; 0x60
 8004ae0:	7800      	ldrb	r0, [r0, #0]
 8004ae2:	2807      	cmp	r0, #7
 8004ae4:	da01      	bge.n	8004aea <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0xa2>
 8004ae6:	20cf      	movs	r0, #207	; 0xcf
 8004ae8:	e094      	b.n	8004c14 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1cc>
 8004aea:	a818      	add	r0, sp, #96	; 0x60
 8004aec:	7800      	ldrb	r0, [r0, #0]
 8004aee:	2807      	cmp	r0, #7
 8004af0:	d007      	beq.n	8004b02 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0xba>
 8004af2:	d200      	bcs.n	8004af6 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0xae>
 8004af4:	e08b      	b.n	8004c0e <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1c6>
 8004af6:	2809      	cmp	r0, #9
 8004af8:	d06a      	beq.n	8004bd0 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x188>
 8004afa:	d32f      	bcc.n	8004b5c <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x114>
 8004afc:	280a      	cmp	r0, #10
 8004afe:	d076      	beq.n	8004bee <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1a6>
 8004b00:	e085      	b.n	8004c0e <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1c6>
 8004b02:	4668      	mov	r0, sp
 8004b04:	4947      	ldr	r1, [pc, #284]	; (8004c24 <.text_76>)
 8004b06:	b2ed      	uxtb	r5, r5
 8004b08:	2208      	movs	r2, #8
 8004b0a:	436a      	muls	r2, r5
 8004b0c:	1889      	adds	r1, r1, r2
 8004b0e:	7909      	ldrb	r1, [r1, #4]
 8004b10:	7301      	strb	r1, [r0, #12]
 8004b12:	4844      	ldr	r0, [pc, #272]	; (8004c24 <.text_76>)
 8004b14:	b2ed      	uxtb	r5, r5
 8004b16:	2108      	movs	r1, #8
 8004b18:	4369      	muls	r1, r5
 8004b1a:	5840      	ldr	r0, [r0, r1]
 8004b1c:	9004      	str	r0, [sp, #16]
 8004b1e:	a806      	add	r0, sp, #24
 8004b20:	f7ff f903 	bl	8003d2a <ADDON_SIGFOX_RF_PROTOCOL_API_reset_list_freq_pattern>
 8004b24:	a819      	add	r0, sp, #100	; 0x64
 8004b26:	7801      	ldrb	r1, [r0, #0]
 8004b28:	a806      	add	r0, sp, #24
 8004b2a:	f7ff f89b 	bl	8003c64 <ADDON_SIGFOX_RF_PROTOCOL_API_set_list_freq_pattern>
 8004b2e:	0006      	movs	r6, r0
 8004b30:	4668      	mov	r0, sp
 8004b32:	7b00      	ldrb	r0, [r0, #12]
 8004b34:	9002      	str	r0, [sp, #8]
 8004b36:	9804      	ldr	r0, [sp, #16]
 8004b38:	9001      	str	r0, [sp, #4]
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	9000      	str	r0, [sp, #0]
 8004b3e:	231e      	movs	r3, #30
 8004b40:	2200      	movs	r2, #0
 8004b42:	0031      	movs	r1, r6
 8004b44:	b2c9      	uxtb	r1, r1
 8004b46:	a806      	add	r0, sp, #24
 8004b48:	f7ff fb5e 	bl	8004208 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern>
 8004b4c:	0004      	movs	r4, r0
 8004b4e:	b2a4      	uxth	r4, r4
 8004b50:	2c00      	cmp	r4, #0
 8004b52:	d002      	beq.n	8004b5a <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x112>
 8004b54:	0020      	movs	r0, r4
 8004b56:	b280      	uxth	r0, r0
 8004b58:	e05c      	b.n	8004c14 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1cc>
 8004b5a:	e05a      	b.n	8004c12 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1ca>
 8004b5c:	4668      	mov	r0, sp
 8004b5e:	4931      	ldr	r1, [pc, #196]	; (8004c24 <.text_76>)
 8004b60:	b2ed      	uxtb	r5, r5
 8004b62:	2208      	movs	r2, #8
 8004b64:	436a      	muls	r2, r5
 8004b66:	1889      	adds	r1, r1, r2
 8004b68:	7949      	ldrb	r1, [r1, #5]
 8004b6a:	7301      	strb	r1, [r0, #12]
 8004b6c:	482d      	ldr	r0, [pc, #180]	; (8004c24 <.text_76>)
 8004b6e:	b2ed      	uxtb	r5, r5
 8004b70:	2108      	movs	r1, #8
 8004b72:	4369      	muls	r1, r5
 8004b74:	5840      	ldr	r0, [r0, r1]
 8004b76:	9004      	str	r0, [sp, #16]
 8004b78:	a806      	add	r0, sp, #24
 8004b7a:	f7ff f8d6 	bl	8003d2a <ADDON_SIGFOX_RF_PROTOCOL_API_reset_list_freq_pattern>
 8004b7e:	2001      	movs	r0, #1
 8004b80:	0006      	movs	r6, r0
 8004b82:	4828      	ldr	r0, [pc, #160]	; (8004c24 <.text_76>)
 8004b84:	b2ed      	uxtb	r5, r5
 8004b86:	2108      	movs	r1, #8
 8004b88:	4369      	muls	r1, r5
 8004b8a:	5840      	ldr	r0, [r0, r1]
 8004b8c:	9006      	str	r0, [sp, #24]
 8004b8e:	4825      	ldr	r0, [pc, #148]	; (8004c24 <.text_76>)
 8004b90:	b2ed      	uxtb	r5, r5
 8004b92:	2108      	movs	r1, #8
 8004b94:	4369      	muls	r1, r5
 8004b96:	1840      	adds	r0, r0, r1
 8004b98:	7940      	ldrb	r0, [r0, #5]
 8004b9a:	a906      	add	r1, sp, #24
 8004b9c:	7108      	strb	r0, [r1, #4]
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	a906      	add	r1, sp, #24
 8004ba2:	7148      	strb	r0, [r1, #5]
 8004ba4:	4668      	mov	r0, sp
 8004ba6:	7b00      	ldrb	r0, [r0, #12]
 8004ba8:	9002      	str	r0, [sp, #8]
 8004baa:	9804      	ldr	r0, [sp, #16]
 8004bac:	9001      	str	r0, [sp, #4]
 8004bae:	2001      	movs	r0, #1
 8004bb0:	9000      	str	r0, [sp, #0]
 8004bb2:	231e      	movs	r3, #30
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	0031      	movs	r1, r6
 8004bb8:	b2c9      	uxtb	r1, r1
 8004bba:	a806      	add	r0, sp, #24
 8004bbc:	f7ff fb24 	bl	8004208 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_pattern>
 8004bc0:	0004      	movs	r4, r0
 8004bc2:	b2a4      	uxth	r4, r4
 8004bc4:	2c00      	cmp	r4, #0
 8004bc6:	d002      	beq.n	8004bce <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x186>
 8004bc8:	0020      	movs	r0, r4
 8004bca:	b280      	uxth	r0, r0
 8004bcc:	e022      	b.n	8004c14 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1cc>
 8004bce:	e020      	b.n	8004c12 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1ca>
 8004bd0:	a819      	add	r0, sp, #100	; 0x64
 8004bd2:	7803      	ldrb	r3, [r0, #0]
 8004bd4:	220b      	movs	r2, #11
 8004bd6:	a905      	add	r1, sp, #20
 8004bd8:	a810      	add	r0, sp, #64	; 0x40
 8004bda:	f7ff fbf1 	bl	80043c0 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon>
 8004bde:	0004      	movs	r4, r0
 8004be0:	b2a4      	uxth	r4, r4
 8004be2:	2c00      	cmp	r4, #0
 8004be4:	d002      	beq.n	8004bec <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1a4>
 8004be6:	0020      	movs	r0, r4
 8004be8:	b280      	uxth	r0, r0
 8004bea:	e013      	b.n	8004c14 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1cc>
 8004bec:	e011      	b.n	8004c12 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1ca>
 8004bee:	a819      	add	r0, sp, #100	; 0x64
 8004bf0:	7803      	ldrb	r3, [r0, #0]
 8004bf2:	22ff      	movs	r2, #255	; 0xff
 8004bf4:	322e      	adds	r2, #46	; 0x2e
 8004bf6:	a905      	add	r1, sp, #20
 8004bf8:	a810      	add	r0, sp, #64	; 0x40
 8004bfa:	f7ff fbe1 	bl	80043c0 <ADDON_SIGFOX_RF_PROTOCOL_API_run_scan_beacon>
 8004bfe:	0004      	movs	r4, r0
 8004c00:	b2a4      	uxth	r4, r4
 8004c02:	2c00      	cmp	r4, #0
 8004c04:	d002      	beq.n	8004c0c <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1c4>
 8004c06:	0020      	movs	r0, r4
 8004c08:	b280      	uxth	r0, r0
 8004c0a:	e003      	b.n	8004c14 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1cc>
 8004c0c:	e001      	b.n	8004c12 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1ca>
 8004c0e:	20cc      	movs	r0, #204	; 0xcc
 8004c10:	e000      	b.n	8004c14 <ST_ADDON_SIGFOX_RF_PROTOCOL_API_monarch_test_mode_async+0x1cc>
 8004c12:	2000      	movs	r0, #0
 8004c14:	b01b      	add	sp, #108	; 0x6c
 8004c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c18 <.text_73>:
 8004c18:	000493e0 	.word	0x000493e0

08004c1c <.text_74>:
 8004c1c:	200002fc 	.word	0x200002fc

08004c20 <.text_75>:
 8004c20:	20000300 	.word	0x20000300

08004c24 <.text_76>:
 8004c24:	20000000 	.word	0x20000000

08004c28 <SIGFOX_HMAC_compute_aes>:
 8004c28:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	2600      	movs	r6, #0
 8004c2e:	2a11      	cmp	r2, #17
 8004c30:	db01      	blt.n	8004c36 <SIGFOX_HMAC_compute_aes+0xe>
 8004c32:	2002      	movs	r0, #2
 8004c34:	e000      	b.n	8004c38 <SIGFOX_HMAC_compute_aes+0x10>
 8004c36:	2001      	movs	r0, #1
 8004c38:	0105      	lsls	r5, r0, #4
 8004c3a:	701d      	strb	r5, [r3, #0]
 8004c3c:	2500      	movs	r5, #0
 8004c3e:	9101      	str	r1, [sp, #4]
 8004c40:	4669      	mov	r1, sp
 8004c42:	700a      	strb	r2, [r1, #0]
 8004c44:	781a      	ldrb	r2, [r3, #0]
 8004c46:	b2e9      	uxtb	r1, r5
 8004c48:	4291      	cmp	r1, r2
 8004c4a:	d20f      	bcs.n	8004c6c <SIGFOX_HMAC_compute_aes+0x44>
 8004c4c:	9901      	ldr	r1, [sp, #4]
 8004c4e:	5d89      	ldrb	r1, [r1, r6]
 8004c50:	aa02      	add	r2, sp, #8
 8004c52:	b2ef      	uxtb	r7, r5
 8004c54:	55d1      	strb	r1, [r2, r7]
 8004c56:	4669      	mov	r1, sp
 8004c58:	7809      	ldrb	r1, [r1, #0]
 8004c5a:	1e49      	subs	r1, r1, #1
 8004c5c:	428e      	cmp	r6, r1
 8004c5e:	d002      	beq.n	8004c66 <SIGFOX_HMAC_compute_aes+0x3e>
 8004c60:	1c76      	adds	r6, r6, #1
 8004c62:	b2f6      	uxtb	r6, r6
 8004c64:	e000      	b.n	8004c68 <SIGFOX_HMAC_compute_aes+0x40>
 8004c66:	2600      	movs	r6, #0
 8004c68:	1c6d      	adds	r5, r5, #1
 8004c6a:	e7eb      	b.n	8004c44 <SIGFOX_HMAC_compute_aes+0x1c>
 8004c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c6e:	0002      	movs	r2, r0
 8004c70:	a902      	add	r1, sp, #8
 8004c72:	0018      	movs	r0, r3
 8004c74:	f01f f87a 	bl	8023d6c <CREDENTIALS_aes_128_cbc_encrypt>
 8004c78:	b00c      	add	sp, #48	; 0x30
 8004c7a:	bde0      	pop	{r5, r6, r7, pc}

08004c7c <SIGFOX_encrypt_decrypt_frame>:
 8004c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c7e:	b08a      	sub	sp, #40	; 0x28
 8004c80:	001e      	movs	r6, r3
 8004c82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8004c84:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004c86:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8004c88:	4668      	mov	r0, sp
 8004c8a:	f009 fb5b 	bl	800e344 <SE_NVM_get>
 8004c8e:	210b      	movs	r1, #11
 8004c90:	1d68      	adds	r0, r5, #5
 8004c92:	f01f f8f1 	bl	8023e78 <__aeabi_memclr>
 8004c96:	78e0      	ldrb	r0, [r4, #3]
 8004c98:	01c0      	lsls	r0, r0, #7
 8004c9a:	7128      	strb	r0, [r5, #4]
 8004c9c:	78a0      	ldrb	r0, [r4, #2]
 8004c9e:	01c0      	lsls	r0, r0, #7
 8004ca0:	78e1      	ldrb	r1, [r4, #3]
 8004ca2:	0849      	lsrs	r1, r1, #1
 8004ca4:	4301      	orrs	r1, r0
 8004ca6:	70e9      	strb	r1, [r5, #3]
 8004ca8:	7860      	ldrb	r0, [r4, #1]
 8004caa:	01c0      	lsls	r0, r0, #7
 8004cac:	78a1      	ldrb	r1, [r4, #2]
 8004cae:	0849      	lsrs	r1, r1, #1
 8004cb0:	4301      	orrs	r1, r0
 8004cb2:	70a9      	strb	r1, [r5, #2]
 8004cb4:	7820      	ldrb	r0, [r4, #0]
 8004cb6:	01c0      	lsls	r0, r0, #7
 8004cb8:	7861      	ldrb	r1, [r4, #1]
 8004cba:	0849      	lsrs	r1, r1, #1
 8004cbc:	4301      	orrs	r1, r0
 8004cbe:	7069      	strb	r1, [r5, #1]
 8004cc0:	7820      	ldrb	r0, [r4, #0]
 8004cc2:	0840      	lsrs	r0, r0, #1
 8004cc4:	2180      	movs	r1, #128	; 0x80
 8004cc6:	4301      	orrs	r1, r0
 8004cc8:	7029      	strb	r1, [r5, #0]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	0029      	movs	r1, r5
 8004cce:	a802      	add	r0, sp, #8
 8004cd0:	f01f f84c 	bl	8023d6c <CREDENTIALS_aes_128_cbc_encrypt>
 8004cd4:	a802      	add	r0, sp, #8
 8004cd6:	7b01      	ldrb	r1, [r0, #12]
 8004cd8:	22fe      	movs	r2, #254	; 0xfe
 8004cda:	400a      	ands	r2, r1
 8004cdc:	7302      	strb	r2, [r0, #12]
 8004cde:	0931      	lsrs	r1, r6, #4
 8004ce0:	7341      	strb	r1, [r0, #13]
 8004ce2:	2f00      	cmp	r7, #0
 8004ce4:	d102      	bne.n	8004cec <SIGFOX_encrypt_decrypt_frame+0x70>
 8004ce6:	2210      	movs	r2, #16
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	7342      	strb	r2, [r0, #13]
 8004cec:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004cee:	0132      	lsls	r2, r6, #4
 8004cf0:	050b      	lsls	r3, r1, #20
 8004cf2:	0f1b      	lsrs	r3, r3, #28
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	7383      	strb	r3, [r0, #14]
 8004cf8:	73c1      	strb	r1, [r0, #15]
 8004cfa:	78e0      	ldrb	r0, [r4, #3]
 8004cfc:	01c0      	lsls	r0, r0, #7
 8004cfe:	7128      	strb	r0, [r5, #4]
 8004d00:	78a0      	ldrb	r0, [r4, #2]
 8004d02:	01c0      	lsls	r0, r0, #7
 8004d04:	78e1      	ldrb	r1, [r4, #3]
 8004d06:	0849      	lsrs	r1, r1, #1
 8004d08:	4301      	orrs	r1, r0
 8004d0a:	70e9      	strb	r1, [r5, #3]
 8004d0c:	7860      	ldrb	r0, [r4, #1]
 8004d0e:	01c0      	lsls	r0, r0, #7
 8004d10:	78a1      	ldrb	r1, [r4, #2]
 8004d12:	0849      	lsrs	r1, r1, #1
 8004d14:	4301      	orrs	r1, r0
 8004d16:	70a9      	strb	r1, [r5, #2]
 8004d18:	7820      	ldrb	r0, [r4, #0]
 8004d1a:	01c0      	lsls	r0, r0, #7
 8004d1c:	7861      	ldrb	r1, [r4, #1]
 8004d1e:	0849      	lsrs	r1, r1, #1
 8004d20:	4301      	orrs	r1, r0
 8004d22:	7069      	strb	r1, [r5, #1]
 8004d24:	7820      	ldrb	r0, [r4, #0]
 8004d26:	0840      	lsrs	r0, r0, #1
 8004d28:	7028      	strb	r0, [r5, #0]
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	0028      	movs	r0, r5
 8004d2e:	f01f f869 	bl	8023e04 <CREDENTIALS_wrap_session_key>
 8004d32:	2201      	movs	r2, #1
 8004d34:	a902      	add	r1, sp, #8
 8004d36:	a806      	add	r0, sp, #24
 8004d38:	f01f f84c 	bl	8023dd4 <CREDENTIALS_aes_128_cbc_encrypt_with_session_key>
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d42:	ab0c      	add	r3, sp, #48	; 0x30
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	e005      	b.n	8004d54 <SIGFOX_encrypt_decrypt_frame+0xd8>
 8004d48:	ac06      	add	r4, sp, #24
 8004d4a:	5ca4      	ldrb	r4, [r4, r2]
 8004d4c:	5c8d      	ldrb	r5, [r1, r2]
 8004d4e:	4065      	eors	r5, r4
 8004d50:	5485      	strb	r5, [r0, r2]
 8004d52:	1c52      	adds	r2, r2, #1
 8004d54:	429a      	cmp	r2, r3
 8004d56:	dbf7      	blt.n	8004d48 <SIGFOX_encrypt_decrypt_frame+0xcc>
 8004d58:	b00d      	add	sp, #52	; 0x34
 8004d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d5c <SIGFOX_DECODE_dewhitening_pn>:
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	2321      	movs	r3, #33	; 0x21
 8004d60:	4003      	ands	r3, r0
 8004d62:	0841      	lsrs	r1, r0, #1
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d001      	beq.n	8004d6c <SIGFOX_DECODE_dewhitening_pn+0x10>
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d102      	bne.n	8004d72 <SIGFOX_DECODE_dewhitening_pn+0x16>
 8004d6c:	2080      	movs	r0, #128	; 0x80
 8004d6e:	0040      	lsls	r0, r0, #1
 8004d70:	e000      	b.n	8004d74 <SIGFOX_DECODE_dewhitening_pn+0x18>
 8004d72:	2000      	movs	r0, #0
 8004d74:	4308      	orrs	r0, r1
 8004d76:	1e52      	subs	r2, r2, #1
 8004d78:	d1f1      	bne.n	8004d5e <SIGFOX_DECODE_dewhitening_pn+0x2>
 8004d7a:	b280      	uxth	r0, r0
 8004d7c:	4770      	bx	lr

08004d7e <SIGFOX_DECODE_dewhitening>:
 8004d7e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8004d80:	0005      	movs	r5, r0
 8004d82:	000c      	movs	r4, r1
 8004d84:	4668      	mov	r0, sp
 8004d86:	f009 fadd 	bl	800e344 <SE_NVM_get>
 8004d8a:	49b8      	ldr	r1, [pc, #736]	; (800506c <.text_14>)
 8004d8c:	7822      	ldrb	r2, [r4, #0]
 8004d8e:	7860      	ldrb	r0, [r4, #1]
 8004d90:	0200      	lsls	r0, r0, #8
 8004d92:	4310      	orrs	r0, r2
 8004d94:	466a      	mov	r2, sp
 8004d96:	8812      	ldrh	r2, [r2, #0]
 8004d98:	4350      	muls	r0, r2
 8004d9a:	4008      	ands	r0, r1
 8004d9c:	d100      	bne.n	8004da0 <SIGFOX_DECODE_dewhitening+0x22>
 8004d9e:	0008      	movs	r0, r1
 8004da0:	2600      	movs	r6, #0
 8004da2:	f7ff ffdb 	bl	8004d5c <SIGFOX_DECODE_dewhitening_pn>
 8004da6:	1c72      	adds	r2, r6, #1
 8004da8:	19a9      	adds	r1, r5, r6
 8004daa:	780b      	ldrb	r3, [r1, #0]
 8004dac:	0007      	movs	r7, r0
 8004dae:	40d7      	lsrs	r7, r2
 8004db0:	405f      	eors	r7, r3
 8004db2:	700f      	strb	r7, [r1, #0]
 8004db4:	1c69      	adds	r1, r5, #1
 8004db6:	1989      	adds	r1, r1, r6
 8004db8:	780f      	ldrb	r7, [r1, #0]
 8004dba:	2301      	movs	r3, #1
 8004dbc:	4093      	lsls	r3, r2
 8004dbe:	1e5b      	subs	r3, r3, #1
 8004dc0:	4003      	ands	r3, r0
 8004dc2:	469c      	mov	ip, r3
 8004dc4:	2307      	movs	r3, #7
 8004dc6:	1b9a      	subs	r2, r3, r6
 8004dc8:	4663      	mov	r3, ip
 8004dca:	4093      	lsls	r3, r2
 8004dcc:	407b      	eors	r3, r7
 8004dce:	700b      	strb	r3, [r1, #0]
 8004dd0:	1c76      	adds	r6, r6, #1
 8004dd2:	2e08      	cmp	r6, #8
 8004dd4:	dbe5      	blt.n	8004da2 <SIGFOX_DECODE_dewhitening+0x24>
 8004dd6:	2600      	movs	r6, #0
 8004dd8:	f7ff ffc0 	bl	8004d5c <SIGFOX_DECODE_dewhitening_pn>
 8004ddc:	1c72      	adds	r2, r6, #1
 8004dde:	19a9      	adds	r1, r5, r6
 8004de0:	7a4b      	ldrb	r3, [r1, #9]
 8004de2:	0007      	movs	r7, r0
 8004de4:	40d7      	lsrs	r7, r2
 8004de6:	405f      	eors	r7, r3
 8004de8:	724f      	strb	r7, [r1, #9]
 8004dea:	7a8f      	ldrb	r7, [r1, #10]
 8004dec:	2301      	movs	r3, #1
 8004dee:	4093      	lsls	r3, r2
 8004df0:	1e5b      	subs	r3, r3, #1
 8004df2:	4003      	ands	r3, r0
 8004df4:	469c      	mov	ip, r3
 8004df6:	2307      	movs	r3, #7
 8004df8:	1b9a      	subs	r2, r3, r6
 8004dfa:	4663      	mov	r3, ip
 8004dfc:	4093      	lsls	r3, r2
 8004dfe:	407b      	eors	r3, r7
 8004e00:	728b      	strb	r3, [r1, #10]
 8004e02:	1c76      	adds	r6, r6, #1
 8004e04:	2e05      	cmp	r6, #5
 8004e06:	dbe7      	blt.n	8004dd8 <SIGFOX_DECODE_dewhitening+0x5a>
 8004e08:	f7ff ffa8 	bl	8004d5c <SIGFOX_DECODE_dewhitening_pn>
 8004e0c:	7ba9      	ldrb	r1, [r5, #14]
 8004e0e:	1c76      	adds	r6, r6, #1
 8004e10:	40f0      	lsrs	r0, r6
 8004e12:	4048      	eors	r0, r1
 8004e14:	73a8      	strb	r0, [r5, #14]
 8004e16:	2000      	movs	r0, #0
 8004e18:	73e8      	strb	r0, [r5, #15]
 8004e1a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08004e1c <SE_API_get_version>:
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	0005      	movs	r5, r0
 8004e20:	000e      	movs	r6, r1
 8004e22:	f01f f80f 	bl	8023e44 <CREDENTIALS_get_version>
 8004e26:	0002      	movs	r2, r0
 8004e28:	4c91      	ldr	r4, [pc, #580]	; (8005070 <.text_15>)
 8004e2a:	a192      	add	r1, pc, #584	; (adr r1, 8005074 <.text_16>)
 8004e2c:	0020      	movs	r0, r4
 8004e2e:	300a      	adds	r0, #10
 8004e30:	f01f f932 	bl	8024098 <siprintf>
 8004e34:	2e00      	cmp	r6, #0
 8004e36:	d101      	bne.n	8004e3c <SE_API_get_version+0x20>
 8004e38:	2047      	movs	r0, #71	; 0x47
 8004e3a:	bd70      	pop	{r4, r5, r6, pc}
 8004e3c:	602c      	str	r4, [r5, #0]
 8004e3e:	300a      	adds	r0, #10
 8004e40:	7030      	strb	r0, [r6, #0]
 8004e42:	2000      	movs	r0, #0
 8004e44:	bd70      	pop	{r4, r5, r6, pc}

08004e46 <SE_API_init>:
 8004e46:	2000      	movs	r0, #0
 8004e48:	4770      	bx	lr

08004e4a <SE_API_open>:
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	4770      	bx	lr

08004e4e <SE_API_close>:
 8004e4e:	2000      	movs	r0, #0
 8004e50:	4770      	bx	lr

08004e52 <SE_API_get_device_id>:
 8004e52:	b580      	push	{r7, lr}
 8004e54:	f01e fffa 	bl	8023e4c <CREDENTIALS_get_dev_id>
 8004e58:	2000      	movs	r0, #0
 8004e5a:	bd02      	pop	{r1, pc}

08004e5c <SE_API_get_initial_pac>:
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	f01e ffff 	bl	8023e60 <CREDENTIALS_get_initial_pac>
 8004e62:	2000      	movs	r0, #0
 8004e64:	bd02      	pop	{r1, pc}

08004e66 <SE_API_secure_uplink_message>:
 8004e66:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004e68:	b098      	sub	sp, #96	; 0x60
 8004e6a:	000d      	movs	r5, r1
 8004e6c:	0014      	movs	r4, r2
 8004e6e:	001f      	movs	r7, r3
 8004e70:	2002      	movs	r0, #2
 8004e72:	900f      	str	r0, [sp, #60]	; 0x3c
 8004e74:	a810      	add	r0, sp, #64	; 0x40
 8004e76:	2120      	movs	r1, #32
 8004e78:	f01e fffe 	bl	8023e78 <__aeabi_memclr>
 8004e7c:	a80a      	add	r0, sp, #40	; 0x28
 8004e7e:	2114      	movs	r1, #20
 8004e80:	f01e fffa 	bl	8023e78 <__aeabi_memclr>
 8004e84:	a806      	add	r0, sp, #24
 8004e86:	f009 fa5d 	bl	800e344 <SE_NVM_get>
 8004e8a:	4668      	mov	r0, sp
 8004e8c:	8b06      	ldrh	r6, [r0, #24]
 8004e8e:	a806      	add	r0, sp, #24
 8004e90:	8840      	ldrh	r0, [r0, #2]
 8004e92:	9009      	str	r0, [sp, #36]	; 0x24
 8004e94:	a806      	add	r0, sp, #24
 8004e96:	7900      	ldrb	r0, [r0, #4]
 8004e98:	4669      	mov	r1, sp
 8004e9a:	7448      	strb	r0, [r1, #17]
 8004e9c:	f009 fa6e 	bl	800e37c <CREDENTIALS_get_payload_encryption_flag>
 8004ea0:	9000      	str	r0, [sp, #0]
 8004ea2:	2f01      	cmp	r7, #1
 8004ea4:	d105      	bne.n	8004eb2 <SE_API_secure_uplink_message+0x4c>
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d101      	bne.n	8004eae <SE_API_secure_uplink_message+0x48>
 8004eaa:	2049      	movs	r0, #73	; 0x49
 8004eac:	e0dc      	b.n	8005068 <SE_API_secure_uplink_message+0x202>
 8004eae:	2505      	movs	r5, #5
 8004eb0:	2400      	movs	r4, #0
 8004eb2:	1c76      	adds	r6, r6, #1
 8004eb4:	0530      	lsls	r0, r6, #20
 8004eb6:	0d00      	lsrs	r0, r0, #20
 8004eb8:	9008      	str	r0, [sp, #32]
 8004eba:	9800      	ldr	r0, [sp, #0]
 8004ebc:	2801      	cmp	r0, #1
 8004ebe:	d11a      	bne.n	8004ef6 <SE_API_secure_uplink_message+0x90>
 8004ec0:	9808      	ldr	r0, [sp, #32]
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d104      	bne.n	8004ed0 <SE_API_secure_uplink_message+0x6a>
 8004ec6:	4668      	mov	r0, sp
 8004ec8:	7c40      	ldrb	r0, [r0, #17]
 8004eca:	1c40      	adds	r0, r0, #1
 8004ecc:	4669      	mov	r1, sp
 8004ece:	7448      	strb	r0, [r1, #17]
 8004ed0:	0038      	movs	r0, r7
 8004ed2:	d110      	bne.n	8004ef6 <SE_API_secure_uplink_message+0x90>
 8004ed4:	9808      	ldr	r0, [sp, #32]
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d00b      	beq.n	8004ef2 <SE_API_secure_uplink_message+0x8c>
 8004eda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d00a      	beq.n	8004ef6 <SE_API_secure_uplink_message+0x90>
 8004ee0:	9808      	ldr	r0, [sp, #32]
 8004ee2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ee4:	1c49      	adds	r1, r1, #1
 8004ee6:	f000 ff63 	bl	8005db0 <__aeabi_idivmod>
 8004eea:	1e49      	subs	r1, r1, #1
 8004eec:	4189      	sbcs	r1, r1
 8004eee:	0fc9      	lsrs	r1, r1, #31
 8004ef0:	e002      	b.n	8004ef8 <SE_API_secure_uplink_message+0x92>
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	e000      	b.n	8004ef8 <SE_API_secure_uplink_message+0x92>
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	981e      	ldr	r0, [sp, #120]	; 0x78
 8004efa:	7001      	strb	r1, [r0, #0]
 8004efc:	0160      	lsls	r0, r4, #5
 8004efe:	2120      	movs	r1, #32
 8004f00:	4008      	ands	r0, r1
 8004f02:	002e      	movs	r6, r5
 8004f04:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8004f06:	d107      	bne.n	8004f18 <SE_API_secure_uplink_message+0xb2>
 8004f08:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004f0a:	7809      	ldrb	r1, [r1, #0]
 8004f0c:	0189      	lsls	r1, r1, #6
 8004f0e:	4308      	orrs	r0, r1
 8004f10:	2180      	movs	r1, #128	; 0x80
 8004f12:	4301      	orrs	r1, r0
 8004f14:	7021      	strb	r1, [r4, #0]
 8004f16:	e023      	b.n	8004f60 <SE_API_secure_uplink_message+0xfa>
 8004f18:	2d01      	cmp	r5, #1
 8004f1a:	d101      	bne.n	8004f20 <SE_API_secure_uplink_message+0xba>
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	e00b      	b.n	8004f38 <SE_API_secure_uplink_message+0xd2>
 8004f20:	1e69      	subs	r1, r5, #1
 8004f22:	2204      	movs	r2, #4
 8004f24:	1b52      	subs	r2, r2, r5
 8004f26:	104b      	asrs	r3, r1, #1
 8004f28:	0f9b      	lsrs	r3, r3, #30
 8004f2a:	1859      	adds	r1, r3, r1
 8004f2c:	1089      	asrs	r1, r1, #2
 8004f2e:	0089      	lsls	r1, r1, #2
 8004f30:	1851      	adds	r1, r2, r1
 8004f32:	1c8a      	adds	r2, r1, #2
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	920f      	str	r2, [sp, #60]	; 0x3c
 8004f38:	0189      	lsls	r1, r1, #6
 8004f3a:	4308      	orrs	r0, r1
 8004f3c:	7020      	strb	r0, [r4, #0]
 8004f3e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d00d      	beq.n	8004f60 <SE_API_secure_uplink_message+0xfa>
 8004f44:	2100      	movs	r1, #0
 8004f46:	1da3      	adds	r3, r4, #6
 8004f48:	e002      	b.n	8004f50 <SE_API_secure_uplink_message+0xea>
 8004f4a:	5c42      	ldrb	r2, [r0, r1]
 8004f4c:	545a      	strb	r2, [r3, r1]
 8004f4e:	1c49      	adds	r1, r1, #1
 8004f50:	42a9      	cmp	r1, r5
 8004f52:	dbfa      	blt.n	8004f4a <SE_API_secure_uplink_message+0xe4>
 8004f54:	9018      	str	r0, [sp, #96]	; 0x60
 8004f56:	2f01      	cmp	r7, #1
 8004f58:	d102      	bne.n	8004f60 <SE_API_secure_uplink_message+0xfa>
 8004f5a:	4668      	mov	r0, sp
 8004f5c:	7c40      	ldrb	r0, [r0, #17]
 8004f5e:	72a0      	strb	r0, [r4, #10]
 8004f60:	7820      	ldrb	r0, [r4, #0]
 8004f62:	21f0      	movs	r1, #240	; 0xf0
 8004f64:	4001      	ands	r1, r0
 8004f66:	9808      	ldr	r0, [sp, #32]
 8004f68:	0400      	lsls	r0, r0, #16
 8004f6a:	0e00      	lsrs	r0, r0, #24
 8004f6c:	4308      	orrs	r0, r1
 8004f6e:	7020      	strb	r0, [r4, #0]
 8004f70:	9808      	ldr	r0, [sp, #32]
 8004f72:	7060      	strb	r0, [r4, #1]
 8004f74:	a805      	add	r0, sp, #20
 8004f76:	f01e ff69 	bl	8023e4c <CREDENTIALS_get_dev_id>
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	1ca2      	adds	r2, r4, #2
 8004f7e:	a905      	add	r1, sp, #20
 8004f80:	5c09      	ldrb	r1, [r1, r0]
 8004f82:	5411      	strb	r1, [r2, r0]
 8004f84:	1c40      	adds	r0, r0, #1
 8004f86:	2804      	cmp	r0, #4
 8004f88:	dbf9      	blt.n	8004f7e <SE_API_secure_uplink_message+0x118>
 8004f8a:	9800      	ldr	r0, [sp, #0]
 8004f8c:	2801      	cmp	r0, #1
 8004f8e:	d122      	bne.n	8004fd6 <SE_API_secure_uplink_message+0x170>
 8004f90:	2f00      	cmp	r7, #0
 8004f92:	d120      	bne.n	8004fd6 <SE_API_secure_uplink_message+0x170>
 8004f94:	9003      	str	r0, [sp, #12]
 8004f96:	a80a      	add	r0, sp, #40	; 0x28
 8004f98:	9002      	str	r0, [sp, #8]
 8004f9a:	a805      	add	r0, sp, #20
 8004f9c:	9001      	str	r0, [sp, #4]
 8004f9e:	9808      	ldr	r0, [sp, #32]
 8004fa0:	b280      	uxth	r0, r0
 8004fa2:	9000      	str	r0, [sp, #0]
 8004fa4:	4668      	mov	r0, sp
 8004fa6:	7c43      	ldrb	r3, [r0, #17]
 8004fa8:	002a      	movs	r2, r5
 8004faa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004fac:	1da0      	adds	r0, r4, #6
 8004fae:	f7ff fe65 	bl	8004c7c <SIGFOX_encrypt_decrypt_frame>
 8004fb2:	a80a      	add	r0, sp, #40	; 0x28
 8004fb4:	4669      	mov	r1, sp
 8004fb6:	7c49      	ldrb	r1, [r1, #17]
 8004fb8:	7001      	strb	r1, [r0, #0]
 8004fba:	2100      	movs	r1, #0
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	5c62      	ldrb	r2, [r4, r1]
 8004fc0:	545a      	strb	r2, [r3, r1]
 8004fc2:	1c49      	adds	r1, r1, #1
 8004fc4:	b2c9      	uxtb	r1, r1
 8004fc6:	1daa      	adds	r2, r5, #6
 8004fc8:	4291      	cmp	r1, r2
 8004fca:	dbf8      	blt.n	8004fbe <SE_API_secure_uplink_message+0x158>
 8004fcc:	ab04      	add	r3, sp, #16
 8004fce:	1dea      	adds	r2, r5, #7
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	a90a      	add	r1, sp, #40	; 0x28
 8004fd4:	e003      	b.n	8004fde <SE_API_secure_uplink_message+0x178>
 8004fd6:	ab04      	add	r3, sp, #16
 8004fd8:	1daa      	adds	r2, r5, #6
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	0021      	movs	r1, r4
 8004fde:	a810      	add	r0, sp, #64	; 0x40
 8004fe0:	f7ff fe22 	bl	8004c28 <SIGFOX_HMAC_compute_aes>
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004fe8:	e00a      	b.n	8005000 <SE_API_secure_uplink_message+0x19a>
 8004fea:	aa10      	add	r2, sp, #64	; 0x40
 8004fec:	466b      	mov	r3, sp
 8004fee:	7c1b      	ldrb	r3, [r3, #16]
 8004ff0:	185b      	adds	r3, r3, r1
 8004ff2:	18d2      	adds	r2, r2, r3
 8004ff4:	3a10      	subs	r2, #16
 8004ff6:	7812      	ldrb	r2, [r2, #0]
 8004ff8:	1da3      	adds	r3, r4, #6
 8004ffa:	186f      	adds	r7, r5, r1
 8004ffc:	55da      	strb	r2, [r3, r7]
 8004ffe:	1c49      	adds	r1, r1, #1
 8005000:	4281      	cmp	r1, r0
 8005002:	dbf2      	blt.n	8004fea <SE_API_secure_uplink_message+0x184>
 8005004:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005006:	182b      	adds	r3, r5, r0
 8005008:	1d9b      	adds	r3, r3, #6
 800500a:	7013      	strb	r3, [r2, #0]
 800500c:	2100      	movs	r1, #0
 800500e:	2600      	movs	r6, #0
 8005010:	e00f      	b.n	8005032 <SE_API_secure_uplink_message+0x1cc>
 8005012:	0008      	movs	r0, r1
 8005014:	e009      	b.n	800502a <SE_API_secure_uplink_message+0x1c4>
 8005016:	5c20      	ldrb	r0, [r4, r0]
 8005018:	0200      	lsls	r0, r0, #8
 800501a:	4048      	eors	r0, r1
 800501c:	b280      	uxth	r0, r0
 800501e:	2708      	movs	r7, #8
 8005020:	0041      	lsls	r1, r0, #1
 8005022:	0400      	lsls	r0, r0, #16
 8005024:	d5f5      	bpl.n	8005012 <SE_API_secure_uplink_message+0x1ac>
 8005026:	4814      	ldr	r0, [pc, #80]	; (8005078 <.text_17>)
 8005028:	4048      	eors	r0, r1
 800502a:	1e7f      	subs	r7, r7, #1
 800502c:	d1f8      	bne.n	8005020 <SE_API_secure_uplink_message+0x1ba>
 800502e:	0001      	movs	r1, r0
 8005030:	1c76      	adds	r6, r6, #1
 8005032:	b2f0      	uxtb	r0, r6
 8005034:	b2df      	uxtb	r7, r3
 8005036:	42b8      	cmp	r0, r7
 8005038:	d3ed      	bcc.n	8005016 <SE_API_secure_uplink_message+0x1b0>
 800503a:	4810      	ldr	r0, [pc, #64]	; (800507c <.text_18>)
 800503c:	4048      	eors	r0, r1
 800503e:	b280      	uxth	r0, r0
 8005040:	0a01      	lsrs	r1, r0, #8
 8005042:	b2db      	uxtb	r3, r3
 8005044:	54e1      	strb	r1, [r4, r3]
 8005046:	1c61      	adds	r1, r4, #1
 8005048:	7813      	ldrb	r3, [r2, #0]
 800504a:	54c8      	strb	r0, [r1, r3]
 800504c:	7810      	ldrb	r0, [r2, #0]
 800504e:	1d80      	adds	r0, r0, #6
 8005050:	7010      	strb	r0, [r2, #0]
 8005052:	a806      	add	r0, sp, #24
 8005054:	9908      	ldr	r1, [sp, #32]
 8005056:	8001      	strh	r1, [r0, #0]
 8005058:	9909      	ldr	r1, [sp, #36]	; 0x24
 800505a:	8041      	strh	r1, [r0, #2]
 800505c:	4669      	mov	r1, sp
 800505e:	7c49      	ldrb	r1, [r1, #17]
 8005060:	7101      	strb	r1, [r0, #4]
 8005062:	f009 f979 	bl	800e358 <SE_NVM_set>
 8005066:	2000      	movs	r0, #0
 8005068:	b019      	add	sp, #100	; 0x64
 800506a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800506c <.text_14>:
 800506c:	000001ff 	.word	0x000001ff

08005070 <.text_15>:
 8005070:	2000005c 	.word	0x2000005c

08005074 <.text_16>:
 8005074:	00007325 	.word	0x00007325

08005078 <.text_17>:
 8005078:	00001021 	.word	0x00001021

0800507c <.text_18>:
 800507c:	0000ffff 	.word	0x0000ffff

08005080 <SE_API_verify_downlink_message>:
 8005080:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 8005082:	b090      	sub	sp, #64	; 0x40
 8005084:	0007      	movs	r7, r0
 8005086:	a806      	add	r0, sp, #24
 8005088:	f009 f95c 	bl	800e344 <SE_NVM_get>
 800508c:	a806      	add	r0, sp, #24
 800508e:	8801      	ldrh	r1, [r0, #0]
 8005090:	466a      	mov	r2, sp
 8005092:	82d1      	strh	r1, [r2, #22]
 8005094:	7900      	ldrb	r0, [r0, #4]
 8005096:	4669      	mov	r1, sp
 8005098:	7508      	strb	r0, [r1, #20]
 800509a:	2500      	movs	r5, #0
 800509c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800509e:	700d      	strb	r5, [r1, #0]
 80050a0:	a804      	add	r0, sp, #16
 80050a2:	f01e fed3 	bl	8023e4c <CREDENTIALS_get_dev_id>
 80050a6:	a904      	add	r1, sp, #16
 80050a8:	0038      	movs	r0, r7
 80050aa:	f7ff fe68 	bl	8004d7e <SIGFOX_DECODE_dewhitening>
 80050ae:	2000      	movs	r0, #0
 80050b0:	2601      	movs	r6, #1
 80050b2:	2100      	movs	r1, #0
 80050b4:	2200      	movs	r2, #0
 80050b6:	bf00      	nop
 80050b8:	a342      	add	r3, pc, #264	; (adr r3, 80051c4 <pow_alpha>)
 80050ba:	5c9b      	ldrb	r3, [r3, r2]
 80050bc:	5cbc      	ldrb	r4, [r7, r2]
 80050be:	40c4      	lsrs	r4, r0
 80050c0:	4034      	ands	r4, r6
 80050c2:	4363      	muls	r3, r4
 80050c4:	404b      	eors	r3, r1
 80050c6:	0019      	movs	r1, r3
 80050c8:	1c52      	adds	r2, r2, #1
 80050ca:	2a0e      	cmp	r2, #14
 80050cc:	ddf3      	ble.n	80050b6 <SE_API_verify_downlink_message+0x36>
 80050ce:	bf00      	nop
 80050d0:	a240      	add	r2, pc, #256	; (adr r2, 80051d4 <log_alpha>)
 80050d2:	b2c9      	uxtb	r1, r1
 80050d4:	5c51      	ldrb	r1, [r2, r1]
 80050d6:	1879      	adds	r1, r7, r1
 80050d8:	780a      	ldrb	r2, [r1, #0]
 80050da:	2301      	movs	r3, #1
 80050dc:	4083      	lsls	r3, r0
 80050de:	4053      	eors	r3, r2
 80050e0:	700b      	strb	r3, [r1, #0]
 80050e2:	1c40      	adds	r0, r0, #1
 80050e4:	2808      	cmp	r0, #8
 80050e6:	dbe4      	blt.n	80050b2 <SE_API_verify_downlink_message+0x32>
 80050e8:	2000      	movs	r0, #0
 80050ea:	2100      	movs	r1, #0
 80050ec:	1d3a      	adds	r2, r7, #4
 80050ee:	b2cb      	uxtb	r3, r1
 80050f0:	5cd2      	ldrb	r2, [r2, r3]
 80050f2:	4050      	eors	r0, r2
 80050f4:	b2c0      	uxtb	r0, r0
 80050f6:	2208      	movs	r2, #8
 80050f8:	0043      	lsls	r3, r0, #1
 80050fa:	0600      	lsls	r0, r0, #24
 80050fc:	d502      	bpl.n	8005104 <SE_API_verify_downlink_message+0x84>
 80050fe:	202f      	movs	r0, #47	; 0x2f
 8005100:	4058      	eors	r0, r3
 8005102:	e000      	b.n	8005106 <SE_API_verify_downlink_message+0x86>
 8005104:	0018      	movs	r0, r3
 8005106:	1e52      	subs	r2, r2, #1
 8005108:	d1f6      	bne.n	80050f8 <SE_API_verify_downlink_message+0x78>
 800510a:	1c49      	adds	r1, r1, #1
 800510c:	b2ca      	uxtb	r2, r1
 800510e:	2a0a      	cmp	r2, #10
 8005110:	d3ec      	bcc.n	80050ec <SE_API_verify_downlink_message+0x6c>
 8005112:	7bb9      	ldrb	r1, [r7, #14]
 8005114:	b2c0      	uxtb	r0, r0
 8005116:	4281      	cmp	r1, r0
 8005118:	d13f      	bne.n	800519a <SE_API_verify_downlink_message+0x11a>
 800511a:	ac08      	add	r4, sp, #32
 800511c:	a804      	add	r0, sp, #16
 800511e:	7801      	ldrb	r1, [r0, #0]
 8005120:	7021      	strb	r1, [r4, #0]
 8005122:	7841      	ldrb	r1, [r0, #1]
 8005124:	7061      	strb	r1, [r4, #1]
 8005126:	7882      	ldrb	r2, [r0, #2]
 8005128:	70a2      	strb	r2, [r4, #2]
 800512a:	78c2      	ldrb	r2, [r0, #3]
 800512c:	70e2      	strb	r2, [r4, #3]
 800512e:	466a      	mov	r2, sp
 8005130:	8ad2      	ldrh	r2, [r2, #22]
 8005132:	7122      	strb	r2, [r4, #4]
 8005134:	466a      	mov	r2, sp
 8005136:	8ad2      	ldrh	r2, [r2, #22]
 8005138:	0a12      	lsrs	r2, r2, #8
 800513a:	7162      	strb	r2, [r4, #5]
 800513c:	2200      	movs	r2, #0
 800513e:	003d      	movs	r5, r7
 8005140:	1d2b      	adds	r3, r5, #4
 8005142:	5c9b      	ldrb	r3, [r3, r2]
 8005144:	18a7      	adds	r7, r4, r2
 8005146:	71bb      	strb	r3, [r7, #6]
 8005148:	1c52      	adds	r2, r2, #1
 800514a:	2a08      	cmp	r2, #8
 800514c:	dbf8      	blt.n	8005140 <SE_API_verify_downlink_message+0xc0>
 800514e:	7800      	ldrb	r0, [r0, #0]
 8005150:	73a0      	strb	r0, [r4, #14]
 8005152:	73e1      	strb	r1, [r4, #15]
 8005154:	2201      	movs	r2, #1
 8005156:	a908      	add	r1, sp, #32
 8005158:	a808      	add	r0, sp, #32
 800515a:	f01e fe07 	bl	8023d6c <CREDENTIALS_aes_128_cbc_encrypt>
 800515e:	7b28      	ldrb	r0, [r5, #12]
 8005160:	7821      	ldrb	r1, [r4, #0]
 8005162:	4288      	cmp	r0, r1
 8005164:	d119      	bne.n	800519a <SE_API_verify_downlink_message+0x11a>
 8005166:	7b68      	ldrb	r0, [r5, #13]
 8005168:	7861      	ldrb	r1, [r4, #1]
 800516a:	4288      	cmp	r0, r1
 800516c:	d115      	bne.n	800519a <SE_API_verify_downlink_message+0x11a>
 800516e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005170:	7006      	strb	r6, [r0, #0]
 8005172:	f009 f903 	bl	800e37c <CREDENTIALS_get_payload_encryption_flag>
 8005176:	2801      	cmp	r0, #1
 8005178:	d10f      	bne.n	800519a <SE_API_verify_downlink_message+0x11a>
 800517a:	2000      	movs	r0, #0
 800517c:	9003      	str	r0, [sp, #12]
 800517e:	a808      	add	r0, sp, #32
 8005180:	9002      	str	r0, [sp, #8]
 8005182:	a804      	add	r0, sp, #16
 8005184:	9001      	str	r0, [sp, #4]
 8005186:	4668      	mov	r0, sp
 8005188:	8ac0      	ldrh	r0, [r0, #22]
 800518a:	9000      	str	r0, [sp, #0]
 800518c:	4668      	mov	r0, sp
 800518e:	7d03      	ldrb	r3, [r0, #20]
 8005190:	2208      	movs	r2, #8
 8005192:	1d29      	adds	r1, r5, #4
 8005194:	1d28      	adds	r0, r5, #4
 8005196:	f7ff fd71 	bl	8004c7c <SIGFOX_encrypt_decrypt_frame>
 800519a:	2000      	movs	r0, #0
 800519c:	b011      	add	sp, #68	; 0x44
 800519e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051a0 <SE_API_set_rc_sync_period>:
 80051a0:	b51c      	push	{r2, r3, r4, lr}
 80051a2:	0004      	movs	r4, r0
 80051a4:	f009 f8ea 	bl	800e37c <CREDENTIALS_get_payload_encryption_flag>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d101      	bne.n	80051b0 <SE_API_set_rc_sync_period+0x10>
 80051ac:	2048      	movs	r0, #72	; 0x48
 80051ae:	bd16      	pop	{r1, r2, r4, pc}
 80051b0:	4668      	mov	r0, sp
 80051b2:	f009 f8c7 	bl	800e344 <SE_NVM_get>
 80051b6:	4668      	mov	r0, sp
 80051b8:	8044      	strh	r4, [r0, #2]
 80051ba:	f009 f8cd 	bl	800e358 <SE_NVM_set>
 80051be:	2000      	movs	r0, #0
 80051c0:	bd16      	pop	{r1, r2, r4, pc}
	...

080051c4 <pow_alpha>:
 80051c4:	0201 0804 0603 0b0c 0a05 0e07 0d0f 0009     ................

080051d4 <log_alpha>:
 80051d4:	000f 0401 0802 0a05 0e03 0709 0d06 0c0b     ................

080051e4 <MONARCH_API_malloc>:
 80051e4:	22ff      	movs	r2, #255	; 0xff
 80051e6:	32f6      	adds	r2, #246	; 0xf6
 80051e8:	4290      	cmp	r0, r2
 80051ea:	db01      	blt.n	80051f0 <MONARCH_API_malloc+0xc>
 80051ec:	2080      	movs	r0, #128	; 0x80
 80051ee:	4770      	bx	lr
 80051f0:	48b4      	ldr	r0, [pc, #720]	; (80054c4 <.text_12>)
 80051f2:	6008      	str	r0, [r1, #0]
 80051f4:	2000      	movs	r0, #0
 80051f6:	4770      	bx	lr

080051f8 <MONARCH_API_free>:
 80051f8:	2000      	movs	r0, #0
 80051fa:	4770      	bx	lr

080051fc <MONARCH_API_timer_start>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	0013      	movs	r3, r2
 8005200:	2400      	movs	r4, #0
 8005202:	2900      	cmp	r1, #0
 8005204:	d005      	beq.n	8005212 <MONARCH_API_timer_start+0x16>
 8005206:	2902      	cmp	r1, #2
 8005208:	d009      	beq.n	800521e <MONARCH_API_timer_start+0x22>
 800520a:	d304      	bcc.n	8005216 <MONARCH_API_timer_start+0x1a>
 800520c:	2903      	cmp	r1, #3
 800520e:	d009      	beq.n	8005224 <MONARCH_API_timer_start+0x28>
 8005210:	e00c      	b.n	800522c <MONARCH_API_timer_start+0x30>
 8005212:	0002      	movs	r2, r0
 8005214:	e00b      	b.n	800522e <MONARCH_API_timer_start+0x32>
 8005216:	0002      	movs	r2, r0
 8005218:	20fa      	movs	r0, #250	; 0xfa
 800521a:	0080      	lsls	r0, r0, #2
 800521c:	e004      	b.n	8005228 <MONARCH_API_timer_start+0x2c>
 800521e:	0002      	movs	r2, r0
 8005220:	48a9      	ldr	r0, [pc, #676]	; (80054c8 <.text_13>)
 8005222:	e001      	b.n	8005228 <MONARCH_API_timer_start+0x2c>
 8005224:	0002      	movs	r2, r0
 8005226:	48a9      	ldr	r0, [pc, #676]	; (80054cc <.text_14>)
 8005228:	4342      	muls	r2, r0
 800522a:	e000      	b.n	800522e <MONARCH_API_timer_start+0x32>
 800522c:	2482      	movs	r4, #130	; 0x82
 800522e:	0018      	movs	r0, r3
 8005230:	d009      	beq.n	8005246 <MONARCH_API_timer_start+0x4a>
 8005232:	48a7      	ldr	r0, [pc, #668]	; (80054d0 <.text_15>)
 8005234:	6003      	str	r3, [r0, #0]
 8005236:	0020      	movs	r0, r4
 8005238:	d103      	bne.n	8005242 <MONARCH_API_timer_start+0x46>
 800523a:	49a6      	ldr	r1, [pc, #664]	; (80054d4 <.text_16>)
 800523c:	0010      	movs	r0, r2
 800523e:	f008 fd21 	bl	800dc84 <MN_API_TimerSart>
 8005242:	0020      	movs	r0, r4
 8005244:	bd10      	pop	{r4, pc}
 8005246:	2482      	movs	r4, #130	; 0x82
 8005248:	e7fb      	b.n	8005242 <MONARCH_API_timer_start+0x46>

0800524a <MONARCH_API_timer_stop>:
 800524a:	b580      	push	{r7, lr}
 800524c:	f008 fd3e 	bl	800dccc <MN_API_TimerStop>
 8005250:	2000      	movs	r0, #0
 8005252:	bd02      	pop	{r1, pc}

08005254 <MONARCH_API_configure_search_pattern>:
 8005254:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	0001      	movs	r1, r0
 800525a:	2500      	movs	r5, #0
 800525c:	2200      	movs	r2, #0
 800525e:	4668      	mov	r0, sp
 8005260:	7a00      	ldrb	r0, [r0, #8]
 8005262:	e000      	b.n	8005266 <MONARCH_API_configure_search_pattern+0x12>
 8005264:	1c52      	adds	r2, r2, #1
 8005266:	4282      	cmp	r2, r0
 8005268:	dbfc      	blt.n	8005264 <MONARCH_API_configure_search_pattern+0x10>
 800526a:	2807      	cmp	r0, #7
 800526c:	db01      	blt.n	8005272 <MONARCH_API_configure_search_pattern+0x1e>
 800526e:	2084      	movs	r0, #132	; 0x84
 8005270:	e061      	b.n	8005336 <MONARCH_API_configure_search_pattern+0xe2>
 8005272:	4c99      	ldr	r4, [pc, #612]	; (80054d8 <.text_17>)
 8005274:	6065      	str	r5, [r4, #4]
 8005276:	60a5      	str	r5, [r4, #8]
 8005278:	2200      	movs	r2, #0
 800527a:	e00c      	b.n	8005296 <MONARCH_API_configure_search_pattern+0x42>
 800527c:	00d3      	lsls	r3, r2, #3
 800527e:	18e6      	adds	r6, r4, r3
 8005280:	2782      	movs	r7, #130	; 0x82
 8005282:	007f      	lsls	r7, r7, #1
 8005284:	19f6      	adds	r6, r6, r7
 8005286:	18cb      	adds	r3, r1, r3
 8005288:	681f      	ldr	r7, [r3, #0]
 800528a:	6037      	str	r7, [r6, #0]
 800528c:	791f      	ldrb	r7, [r3, #4]
 800528e:	7137      	strb	r7, [r6, #4]
 8005290:	795b      	ldrb	r3, [r3, #5]
 8005292:	7173      	strb	r3, [r6, #5]
 8005294:	1c52      	adds	r2, r2, #1
 8005296:	0006      	movs	r6, r0
 8005298:	42b2      	cmp	r2, r6
 800529a:	dbef      	blt.n	800527c <MONARCH_API_configure_search_pattern+0x28>
 800529c:	9101      	str	r1, [sp, #4]
 800529e:	9904      	ldr	r1, [sp, #16]
 80052a0:	466a      	mov	r2, sp
 80052a2:	7b12      	ldrb	r2, [r2, #12]
 80052a4:	239a      	movs	r3, #154	; 0x9a
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	18e7      	adds	r7, r4, r3
 80052aa:	6038      	str	r0, [r7, #0]
 80052ac:	0020      	movs	r0, r4
 80052ae:	309c      	adds	r0, #156	; 0x9c
 80052b0:	9000      	str	r0, [sp, #0]
 80052b2:	6005      	str	r5, [r0, #0]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	713a      	strb	r2, [r7, #4]
 80052b8:	2301      	movs	r3, #1
 80052ba:	2210      	movs	r2, #16
 80052bc:	20a4      	movs	r0, #164	; 0xa4
 80052be:	0040      	lsls	r0, r0, #1
 80052c0:	1821      	adds	r1, r4, r0
 80052c2:	0020      	movs	r0, r4
 80052c4:	300c      	adds	r0, #12
 80052c6:	f000 f920 	bl	800550a <Monarch_Correlator_Init>
 80052ca:	2302      	movs	r3, #2
 80052cc:	220d      	movs	r2, #13
 80052ce:	20c4      	movs	r0, #196	; 0xc4
 80052d0:	0040      	lsls	r0, r0, #1
 80052d2:	1821      	adds	r1, r4, r0
 80052d4:	0020      	movs	r0, r4
 80052d6:	303c      	adds	r0, #60	; 0x3c
 80052d8:	f000 f917 	bl	800550a <Monarch_Correlator_Init>
 80052dc:	2303      	movs	r3, #3
 80052de:	220b      	movs	r2, #11
 80052e0:	20de      	movs	r0, #222	; 0xde
 80052e2:	0040      	lsls	r0, r0, #1
 80052e4:	1821      	adds	r1, r4, r0
 80052e6:	0020      	movs	r0, r4
 80052e8:	306c      	adds	r0, #108	; 0x6c
 80052ea:	f000 f90e 	bl	800550a <Monarch_Correlator_Init>
 80052ee:	6025      	str	r5, [r4, #0]
 80052f0:	2200      	movs	r2, #0
 80052f2:	9801      	ldr	r0, [sp, #4]
 80052f4:	e00b      	b.n	800530e <MONARCH_API_configure_search_pattern+0xba>
 80052f6:	0111      	lsls	r1, r2, #4
 80052f8:	1861      	adds	r1, r4, r1
 80052fa:	31a4      	adds	r1, #164	; 0xa4
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	061b      	lsls	r3, r3, #24
 8005300:	600b      	str	r3, [r1, #0]
 8005302:	608d      	str	r5, [r1, #8]
 8005304:	710d      	strb	r5, [r1, #4]
 8005306:	00d3      	lsls	r3, r2, #3
 8005308:	58c3      	ldr	r3, [r0, r3]
 800530a:	60cb      	str	r3, [r1, #12]
 800530c:	1c52      	adds	r2, r2, #1
 800530e:	42b2      	cmp	r2, r6
 8005310:	dbf1      	blt.n	80052f6 <MONARCH_API_configure_search_pattern+0xa2>
 8005312:	613d      	str	r5, [r7, #16]
 8005314:	4871      	ldr	r0, [pc, #452]	; (80054dc <.text_18>)
 8005316:	f008 fc17 	bl	800db48 <MN_API_Init>
 800531a:	2082      	movs	r0, #130	; 0x82
 800531c:	0040      	lsls	r0, r0, #1
 800531e:	1820      	adds	r0, r4, r0
 8005320:	9900      	ldr	r1, [sp, #0]
 8005322:	6809      	ldr	r1, [r1, #0]
 8005324:	00c9      	lsls	r1, r1, #3
 8005326:	5840      	ldr	r0, [r0, r1]
 8005328:	f008 fc78 	bl	800dc1c <MN_API_change_frequency>
 800532c:	f008 fc66 	bl	800dbfc <MN_API_StartRx>
 8005330:	f008 fc82 	bl	800dc38 <MN_API_Enable16KHzSamplingTimer>
 8005334:	2000      	movs	r0, #0
 8005336:	b005      	add	sp, #20
 8005338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800533a <MONARCH_API_stop_search_pattern>:
 800533a:	b580      	push	{r7, lr}
 800533c:	4868      	ldr	r0, [pc, #416]	; (80054e0 <.text_19>)
 800533e:	6800      	ldr	r0, [r0, #0]
 8005340:	2801      	cmp	r0, #1
 8005342:	d103      	bne.n	800534c <MONARCH_API_stop_search_pattern+0x12>
 8005344:	f008 fc68 	bl	800dc18 <MN_API_StopRx>
 8005348:	f008 fc3a 	bl	800dbc0 <MN_API_DeInit>
 800534c:	2000      	movs	r0, #0
 800534e:	bd02      	pop	{r1, pc}

08005350 <MONARCH_API_get_version>:
 8005350:	a2d5      	add	r2, pc, #852	; (adr r2, 80056a8 <mn_api_version>)
 8005352:	6002      	str	r2, [r0, #0]
 8005354:	2900      	cmp	r1, #0
 8005356:	d101      	bne.n	800535c <MONARCH_API_get_version+0xc>
 8005358:	2086      	movs	r0, #134	; 0x86
 800535a:	4770      	bx	lr
 800535c:	200e      	movs	r0, #14
 800535e:	7008      	strb	r0, [r1, #0]
 8005360:	2000      	movs	r0, #0
 8005362:	4770      	bx	lr

08005364 <Monarch_sample_cb>:
 8005364:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8005366:	0001      	movs	r1, r0
 8005368:	4c5b      	ldr	r4, [pc, #364]	; (80054d8 <.text_17>)
 800536a:	6820      	ldr	r0, [r4, #0]
 800536c:	1c40      	adds	r0, r0, #1
 800536e:	6020      	str	r0, [r4, #0]
 8005370:	0020      	movs	r0, r4
 8005372:	300c      	adds	r0, #12
 8005374:	f000 f902 	bl	800557c <Monarch_Correlator_Update>
 8005378:	6820      	ldr	r0, [r4, #0]
 800537a:	21ff      	movs	r1, #255	; 0xff
 800537c:	3138      	adds	r1, #56	; 0x38
 800537e:	4288      	cmp	r0, r1
 8005380:	d000      	beq.n	8005384 <Monarch_sample_cb+0x20>
 8005382:	e09e      	b.n	80054c2 <Monarch_sample_cb+0x15e>
 8005384:	6860      	ldr	r0, [r4, #4]
 8005386:	1c40      	adds	r0, r0, #1
 8005388:	6060      	str	r0, [r4, #4]
 800538a:	2500      	movs	r5, #0
 800538c:	6025      	str	r5, [r4, #0]
 800538e:	2084      	movs	r0, #132	; 0x84
 8005390:	0040      	lsls	r0, r0, #1
 8005392:	1826      	adds	r6, r4, r0
 8005394:	1f00      	subs	r0, r0, #4
 8005396:	1820      	adds	r0, r4, r0
 8005398:	9002      	str	r0, [sp, #8]
 800539a:	1c48      	adds	r0, r1, #1
 800539c:	1820      	adds	r0, r4, r0
 800539e:	9001      	str	r0, [sp, #4]
 80053a0:	0020      	movs	r0, r4
 80053a2:	309c      	adds	r0, #156	; 0x9c
 80053a4:	9000      	str	r0, [sp, #0]
 80053a6:	0020      	movs	r0, r4
 80053a8:	30a4      	adds	r0, #164	; 0xa4
 80053aa:	9900      	ldr	r1, [sp, #0]
 80053ac:	6809      	ldr	r1, [r1, #0]
 80053ae:	0109      	lsls	r1, r1, #4
 80053b0:	1841      	adds	r1, r0, r1
 80053b2:	0020      	movs	r0, r4
 80053b4:	300c      	adds	r0, #12
 80053b6:	f000 f902 	bl	80055be <Monarch_Pattern_Detect>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d174      	bne.n	80054a8 <Monarch_sample_cb+0x144>
 80053be:	9801      	ldr	r0, [sp, #4]
 80053c0:	7800      	ldrb	r0, [r0, #0]
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d146      	bne.n	8005454 <Monarch_sample_cb+0xf0>
 80053c6:	68a0      	ldr	r0, [r4, #8]
 80053c8:	2800      	cmp	r0, #0
 80053ca:	d101      	bne.n	80053d0 <Monarch_sample_cb+0x6c>
 80053cc:	6860      	ldr	r0, [r4, #4]
 80053ce:	60a0      	str	r0, [r4, #8]
 80053d0:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80053d2:	6860      	ldr	r0, [r4, #4]
 80053d4:	68a2      	ldr	r2, [r4, #8]
 80053d6:	1a80      	subs	r0, r0, r2
 80053d8:	4288      	cmp	r0, r1
 80053da:	d369      	bcc.n	80054b0 <Monarch_sample_cb+0x14c>
 80053dc:	2280      	movs	r2, #128	; 0x80
 80053de:	0612      	lsls	r2, r2, #24
 80053e0:	2000      	movs	r0, #0
 80053e2:	e00b      	b.n	80053fc <Monarch_sample_cb+0x98>
 80053e4:	0103      	lsls	r3, r0, #4
 80053e6:	18e3      	adds	r3, r4, r3
 80053e8:	33a4      	adds	r3, #164	; 0xa4
 80053ea:	689f      	ldr	r7, [r3, #8]
 80053ec:	2f00      	cmp	r7, #0
 80053ee:	d004      	beq.n	80053fa <Monarch_sample_cb+0x96>
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	da01      	bge.n	80053fa <Monarch_sample_cb+0x96>
 80053f6:	0005      	movs	r5, r0
 80053f8:	001a      	movs	r2, r3
 80053fa:	1c40      	adds	r0, r0, #1
 80053fc:	4288      	cmp	r0, r1
 80053fe:	dbf1      	blt.n	80053e4 <Monarch_sample_cb+0x80>
 8005400:	9800      	ldr	r0, [sp, #0]
 8005402:	6045      	str	r5, [r0, #4]
 8005404:	00e8      	lsls	r0, r5, #3
 8005406:	1820      	adds	r0, r4, r0
 8005408:	2182      	movs	r1, #130	; 0x82
 800540a:	0049      	lsls	r1, r1, #1
 800540c:	1847      	adds	r7, r0, r1
 800540e:	0128      	lsls	r0, r5, #4
 8005410:	1825      	adds	r5, r4, r0
 8005412:	35a4      	adds	r5, #164	; 0xa4
 8005414:	7938      	ldrb	r0, [r7, #4]
 8005416:	7929      	ldrb	r1, [r5, #4]
 8005418:	4288      	cmp	r0, r1
 800541a:	d004      	beq.n	8005426 <Monarch_sample_cb+0xc2>
 800541c:	7978      	ldrb	r0, [r7, #5]
 800541e:	2800      	cmp	r0, #0
 8005420:	d00e      	beq.n	8005440 <Monarch_sample_cb+0xdc>
 8005422:	4288      	cmp	r0, r1
 8005424:	d10c      	bne.n	8005440 <Monarch_sample_cb+0xdc>
 8005426:	f008 fc0b 	bl	800dc40 <MN_API_Disable16KHzSamplingTimer>
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	7929      	ldrb	r1, [r5, #4]
 8005430:	2000      	movs	r0, #0
 8005432:	f008 fc09 	bl	800dc48 <MN_API_Pattern_Found>
 8005436:	682a      	ldr	r2, [r5, #0]
 8005438:	b212      	sxth	r2, r2
 800543a:	7929      	ldrb	r1, [r5, #4]
 800543c:	6838      	ldr	r0, [r7, #0]
 800543e:	e030      	b.n	80054a2 <Monarch_sample_cb+0x13e>
 8005440:	0020      	movs	r0, r4
 8005442:	300c      	adds	r0, #12
 8005444:	f000 f880 	bl	8005548 <Monarch_Correlator_Reset>
 8005448:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800544a:	9902      	ldr	r1, [sp, #8]
 800544c:	9800      	ldr	r0, [sp, #0]
 800544e:	f000 f849 	bl	80054e4 <Monarch_NextFrequencyRequest>
 8005452:	e029      	b.n	80054a8 <Monarch_sample_cb+0x144>
 8005454:	9800      	ldr	r0, [sp, #0]
 8005456:	7b00      	ldrb	r0, [r0, #12]
 8005458:	7831      	ldrb	r1, [r6, #0]
 800545a:	4281      	cmp	r1, r0
 800545c:	d004      	beq.n	8005468 <Monarch_sample_cb+0x104>
 800545e:	7871      	ldrb	r1, [r6, #1]
 8005460:	2900      	cmp	r1, #0
 8005462:	d021      	beq.n	80054a8 <Monarch_sample_cb+0x144>
 8005464:	4281      	cmp	r1, r0
 8005466:	d11f      	bne.n	80054a8 <Monarch_sample_cb+0x144>
 8005468:	2001      	movs	r0, #1
 800546a:	9901      	ldr	r1, [sp, #4]
 800546c:	60c8      	str	r0, [r1, #12]
 800546e:	f008 fbe7 	bl	800dc40 <MN_API_Disable16KHzSamplingTimer>
 8005472:	9800      	ldr	r0, [sp, #0]
 8005474:	6800      	ldr	r0, [r0, #0]
 8005476:	0101      	lsls	r1, r0, #4
 8005478:	1861      	adds	r1, r4, r1
 800547a:	31a4      	adds	r1, #164	; 0xa4
 800547c:	680b      	ldr	r3, [r1, #0]
 800547e:	9a02      	ldr	r2, [sp, #8]
 8005480:	00c0      	lsls	r0, r0, #3
 8005482:	5812      	ldr	r2, [r2, r0]
 8005484:	7909      	ldrb	r1, [r1, #4]
 8005486:	2001      	movs	r0, #1
 8005488:	f008 fbde 	bl	800dc48 <MN_API_Pattern_Found>
 800548c:	9800      	ldr	r0, [sp, #0]
 800548e:	6800      	ldr	r0, [r0, #0]
 8005490:	0101      	lsls	r1, r0, #4
 8005492:	1861      	adds	r1, r4, r1
 8005494:	31a4      	adds	r1, #164	; 0xa4
 8005496:	680a      	ldr	r2, [r1, #0]
 8005498:	b212      	sxth	r2, r2
 800549a:	7909      	ldrb	r1, [r1, #4]
 800549c:	9b02      	ldr	r3, [sp, #8]
 800549e:	00c0      	lsls	r0, r0, #3
 80054a0:	5818      	ldr	r0, [r3, r0]
 80054a2:	9b01      	ldr	r3, [sp, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	4798      	blx	r3
 80054a8:	9801      	ldr	r0, [sp, #4]
 80054aa:	7800      	ldrb	r0, [r0, #0]
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d104      	bne.n	80054ba <Monarch_sample_cb+0x156>
 80054b0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80054b2:	9902      	ldr	r1, [sp, #8]
 80054b4:	9800      	ldr	r0, [sp, #0]
 80054b6:	f000 f815 	bl	80054e4 <Monarch_NextFrequencyRequest>
 80054ba:	0020      	movs	r0, r4
 80054bc:	300c      	adds	r0, #12
 80054be:	f000 f843 	bl	8005548 <Monarch_Correlator_Reset>
 80054c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080054c4 <.text_12>:
 80054c4:	20000304 	.word	0x20000304

080054c8 <.text_13>:
 80054c8:	0000ea60 	.word	0x0000ea60

080054cc <.text_14>:
 80054cc:	0036ee80 	.word	0x0036ee80

080054d0 <.text_15>:
 80054d0:	20000638 	.word	0x20000638

080054d4 <.text_16>:
 80054d4:	08005685 	.word	0x08005685

080054d8 <.text_17>:
 80054d8:	200004f8 	.word	0x200004f8

080054dc <.text_18>:
 80054dc:	08005365 	.word	0x08005365

080054e0 <.text_19>:
 80054e0:	2000063c 	.word	0x2000063c

080054e4 <Monarch_NextFrequencyRequest>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	0004      	movs	r4, r0
 80054e8:	000d      	movs	r5, r1
 80054ea:	0016      	movs	r6, r2
 80054ec:	f008 fb94 	bl	800dc18 <MN_API_StopRx>
 80054f0:	6820      	ldr	r0, [r4, #0]
 80054f2:	1c40      	adds	r0, r0, #1
 80054f4:	42b0      	cmp	r0, r6
 80054f6:	d100      	bne.n	80054fa <Monarch_NextFrequencyRequest+0x16>
 80054f8:	2000      	movs	r0, #0
 80054fa:	6020      	str	r0, [r4, #0]
 80054fc:	00c0      	lsls	r0, r0, #3
 80054fe:	5828      	ldr	r0, [r5, r0]
 8005500:	f008 fb8c 	bl	800dc1c <MN_API_change_frequency>
 8005504:	f008 fb7a 	bl	800dbfc <MN_API_StartRx>
 8005508:	bd70      	pop	{r4, r5, r6, pc}

0800550a <Monarch_Correlator_Init>:
 800550a:	b538      	push	{r3, r4, r5, lr}
 800550c:	0004      	movs	r4, r0
 800550e:	0015      	movs	r5, r2
 8005510:	6061      	str	r1, [r4, #4]
 8005512:	6025      	str	r5, [r4, #0]
 8005514:	2024      	movs	r0, #36	; 0x24
 8005516:	5423      	strb	r3, [r4, r0]
 8005518:	20ff      	movs	r0, #255	; 0xff
 800551a:	3038      	adds	r0, #56	; 0x38
 800551c:	0029      	movs	r1, r5
 800551e:	f000 fc39 	bl	8005d94 <__divsi3>
 8005522:	4368      	muls	r0, r5
 8005524:	61a0      	str	r0, [r4, #24]
 8005526:	2000      	movs	r0, #0
 8005528:	61e0      	str	r0, [r4, #28]
 800552a:	60a0      	str	r0, [r4, #8]
 800552c:	2180      	movs	r1, #128	; 0x80
 800552e:	0609      	lsls	r1, r1, #24
 8005530:	60e1      	str	r1, [r4, #12]
 8005532:	2100      	movs	r1, #0
 8005534:	43c9      	mvns	r1, r1
 8005536:	6121      	str	r1, [r4, #16]
 8005538:	6160      	str	r0, [r4, #20]
 800553a:	6220      	str	r0, [r4, #32]
 800553c:	002a      	movs	r2, r5
 800553e:	2100      	movs	r1, #0
 8005540:	6860      	ldr	r0, [r4, #4]
 8005542:	f000 f8a9 	bl	8005698 <Monarch_Mem_Set32>
 8005546:	bd31      	pop	{r0, r4, r5, pc}

08005548 <Monarch_Correlator_Reset>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	2500      	movs	r5, #0
 800554c:	2400      	movs	r4, #0
 800554e:	0006      	movs	r6, r0
 8005550:	2030      	movs	r0, #48	; 0x30
 8005552:	4360      	muls	r0, r4
 8005554:	1830      	adds	r0, r6, r0
 8005556:	6085      	str	r5, [r0, #8]
 8005558:	2180      	movs	r1, #128	; 0x80
 800555a:	0609      	lsls	r1, r1, #24
 800555c:	60c1      	str	r1, [r0, #12]
 800555e:	2100      	movs	r1, #0
 8005560:	43c9      	mvns	r1, r1
 8005562:	6101      	str	r1, [r0, #16]
 8005564:	6145      	str	r5, [r0, #20]
 8005566:	61c5      	str	r5, [r0, #28]
 8005568:	6205      	str	r5, [r0, #32]
 800556a:	6802      	ldr	r2, [r0, #0]
 800556c:	2100      	movs	r1, #0
 800556e:	6840      	ldr	r0, [r0, #4]
 8005570:	f000 f892 	bl	8005698 <Monarch_Mem_Set32>
 8005574:	1c64      	adds	r4, r4, #1
 8005576:	2c03      	cmp	r4, #3
 8005578:	dbea      	blt.n	8005550 <Monarch_Correlator_Reset+0x8>
 800557a:	bd70      	pop	{r4, r5, r6, pc}

0800557c <Monarch_Correlator_Update>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	2200      	movs	r2, #0
 8005580:	2300      	movs	r3, #0
 8005582:	2430      	movs	r4, #48	; 0x30
 8005584:	435c      	muls	r4, r3
 8005586:	1904      	adds	r4, r0, r4
 8005588:	69e5      	ldr	r5, [r4, #28]
 800558a:	69a6      	ldr	r6, [r4, #24]
 800558c:	42b5      	cmp	r5, r6
 800558e:	da12      	bge.n	80055b6 <Monarch_Correlator_Update+0x3a>
 8005590:	1c6d      	adds	r5, r5, #1
 8005592:	61e5      	str	r5, [r4, #28]
 8005594:	68a5      	ldr	r5, [r4, #8]
 8005596:	1c6e      	adds	r6, r5, #1
 8005598:	60a6      	str	r6, [r4, #8]
 800559a:	6866      	ldr	r6, [r4, #4]
 800559c:	00ad      	lsls	r5, r5, #2
 800559e:	1975      	adds	r5, r6, r5
 80055a0:	682e      	ldr	r6, [r5, #0]
 80055a2:	1876      	adds	r6, r6, r1
 80055a4:	602e      	str	r6, [r5, #0]
 80055a6:	68a5      	ldr	r5, [r4, #8]
 80055a8:	6826      	ldr	r6, [r4, #0]
 80055aa:	42b5      	cmp	r5, r6
 80055ac:	d103      	bne.n	80055b6 <Monarch_Correlator_Update+0x3a>
 80055ae:	60a2      	str	r2, [r4, #8]
 80055b0:	6965      	ldr	r5, [r4, #20]
 80055b2:	1c6d      	adds	r5, r5, #1
 80055b4:	6165      	str	r5, [r4, #20]
 80055b6:	1c5b      	adds	r3, r3, #1
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	dbe2      	blt.n	8005582 <Monarch_Correlator_Update+0x6>
 80055bc:	bd70      	pop	{r4, r5, r6, pc}

080055be <Monarch_Pattern_Detect>:
 80055be:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 80055c0:	b083      	sub	sp, #12
 80055c2:	2000      	movs	r0, #0
 80055c4:	9002      	str	r0, [sp, #8]
 80055c6:	2500      	movs	r5, #0
 80055c8:	2000      	movs	r0, #0
 80055ca:	2480      	movs	r4, #128	; 0x80
 80055cc:	0624      	lsls	r4, r4, #24
 80055ce:	9903      	ldr	r1, [sp, #12]
 80055d0:	2230      	movs	r2, #48	; 0x30
 80055d2:	436a      	muls	r2, r5
 80055d4:	188e      	adds	r6, r1, r2
 80055d6:	6831      	ldr	r1, [r6, #0]
 80055d8:	2200      	movs	r2, #0
 80055da:	e008      	b.n	80055ee <Monarch_Pattern_Detect+0x30>
 80055dc:	6873      	ldr	r3, [r6, #4]
 80055de:	0097      	lsls	r7, r2, #2
 80055e0:	59db      	ldr	r3, [r3, r7]
 80055e2:	18c0      	adds	r0, r0, r3
 80055e4:	429c      	cmp	r4, r3
 80055e6:	da01      	bge.n	80055ec <Monarch_Pattern_Detect+0x2e>
 80055e8:	001c      	movs	r4, r3
 80055ea:	6132      	str	r2, [r6, #16]
 80055ec:	1c52      	adds	r2, r2, #1
 80055ee:	428a      	cmp	r2, r1
 80055f0:	dbf4      	blt.n	80055dc <Monarch_Pattern_Detect+0x1e>
 80055f2:	1b00      	subs	r0, r0, r4
 80055f4:	9001      	str	r0, [sp, #4]
 80055f6:	1e49      	subs	r1, r1, #1
 80055f8:	9100      	str	r1, [sp, #0]
 80055fa:	2701      	movs	r7, #1
 80055fc:	4608      	mov	r0, r1
 80055fe:	6971      	ldr	r1, [r6, #20]
 8005600:	4348      	muls	r0, r1
 8005602:	0081      	lsls	r1, r0, #2
 8005604:	1808      	adds	r0, r1, r0
 8005606:	9901      	ldr	r1, [sp, #4]
 8005608:	1840      	adds	r0, r0, r1
 800560a:	9900      	ldr	r1, [sp, #0]
 800560c:	4361      	muls	r1, r4
 800560e:	4288      	cmp	r0, r1
 8005610:	da11      	bge.n	8005636 <Monarch_Pattern_Detect+0x78>
 8005612:	6237      	str	r7, [r6, #32]
 8005614:	0020      	movs	r0, r4
 8005616:	6971      	ldr	r1, [r6, #20]
 8005618:	f000 fbbc 	bl	8005d94 <__divsi3>
 800561c:	60f0      	str	r0, [r6, #12]
 800561e:	0020      	movs	r0, r4
 8005620:	6971      	ldr	r1, [r6, #20]
 8005622:	f000 fbb7 	bl	8005d94 <__divsi3>
 8005626:	62b0      	str	r0, [r6, #40]	; 0x28
 8005628:	9801      	ldr	r0, [sp, #4]
 800562a:	6971      	ldr	r1, [r6, #20]
 800562c:	9a00      	ldr	r2, [sp, #0]
 800562e:	4351      	muls	r1, r2
 8005630:	f000 fbb0 	bl	8005d94 <__divsi3>
 8005634:	62f0      	str	r0, [r6, #44]	; 0x2c
 8005636:	1c6d      	adds	r5, r5, #1
 8005638:	2d02      	cmp	r5, #2
 800563a:	ddc5      	ble.n	80055c8 <Monarch_Pattern_Detect+0xa>
 800563c:	9803      	ldr	r0, [sp, #12]
 800563e:	6a00      	ldr	r0, [r0, #32]
 8005640:	9903      	ldr	r1, [sp, #12]
 8005642:	6d09      	ldr	r1, [r1, #80]	; 0x50
 8005644:	1840      	adds	r0, r0, r1
 8005646:	9903      	ldr	r1, [sp, #12]
 8005648:	2280      	movs	r2, #128	; 0x80
 800564a:	5889      	ldr	r1, [r1, r2]
 800564c:	1840      	adds	r0, r0, r1
 800564e:	2801      	cmp	r0, #1
 8005650:	d112      	bne.n	8005678 <Monarch_Pattern_Detect+0xba>
 8005652:	2200      	movs	r2, #0
 8005654:	9904      	ldr	r1, [sp, #16]
 8005656:	9803      	ldr	r0, [sp, #12]
 8005658:	2330      	movs	r3, #48	; 0x30
 800565a:	4353      	muls	r3, r2
 800565c:	18c3      	adds	r3, r0, r3
 800565e:	6a1c      	ldr	r4, [r3, #32]
 8005660:	2c00      	cmp	r4, #0
 8005662:	d005      	beq.n	8005670 <Monarch_Pattern_Detect+0xb2>
 8005664:	68dc      	ldr	r4, [r3, #12]
 8005666:	600c      	str	r4, [r1, #0]
 8005668:	2424      	movs	r4, #36	; 0x24
 800566a:	5d1b      	ldrb	r3, [r3, r4]
 800566c:	710b      	strb	r3, [r1, #4]
 800566e:	608f      	str	r7, [r1, #8]
 8005670:	1c52      	adds	r2, r2, #1
 8005672:	2a02      	cmp	r2, #2
 8005674:	dc03      	bgt.n	800567e <Monarch_Pattern_Detect+0xc0>
 8005676:	e7ef      	b.n	8005658 <Monarch_Pattern_Detect+0x9a>
 8005678:	2000      	movs	r0, #0
 800567a:	43c0      	mvns	r0, r0
 800567c:	9002      	str	r0, [sp, #8]
 800567e:	9802      	ldr	r0, [sp, #8]
 8005680:	b005      	add	sp, #20
 8005682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005684 <Monarch_Timeout>:
 8005684:	b580      	push	{r7, lr}
 8005686:	4803      	ldr	r0, [pc, #12]	; (8005694 <.text_26>)
 8005688:	2101      	movs	r1, #1
 800568a:	6041      	str	r1, [r0, #4]
 800568c:	6800      	ldr	r0, [r0, #0]
 800568e:	4780      	blx	r0
 8005690:	bd01      	pop	{r0, pc}
	...

08005694 <.text_26>:
 8005694:	20000638 	.word	0x20000638

08005698 <Monarch_Mem_Set32>:
 8005698:	2a00      	cmp	r2, #0
 800569a:	e002      	b.n	80056a2 <Monarch_Mem_Set32+0xa>
 800569c:	6001      	str	r1, [r0, #0]
 800569e:	1d00      	adds	r0, r0, #4
 80056a0:	1e52      	subs	r2, r2, #1
 80056a2:	d1fb      	bne.n	800569c <Monarch_Mem_Set32+0x4>
 80056a4:	4770      	bx	lr
	...

080056a8 <mn_api_version>:
 80056a8:	4e4d 415f 4950 565f 2e32 2e30 0031 0000     MN_API_V2.0.1...

080056b8 <SIGFOX_MONARCH_API_reset_list_freq_pattern>:
 80056b8:	b510      	push	{r4, lr}
 80056ba:	2300      	movs	r3, #0
 80056bc:	0019      	movs	r1, r3
 80056be:	b2c9      	uxtb	r1, r1
 80056c0:	2905      	cmp	r1, #5
 80056c2:	da15      	bge.n	80056f0 <SIGFOX_MONARCH_API_reset_list_freq_pattern+0x38>
 80056c4:	2300      	movs	r3, #0
 80056c6:	b2c9      	uxtb	r1, r1
 80056c8:	2408      	movs	r4, #8
 80056ca:	434c      	muls	r4, r1
 80056cc:	5103      	str	r3, [r0, r4]
 80056ce:	2300      	movs	r3, #0
 80056d0:	001a      	movs	r2, r3
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	2a02      	cmp	r2, #2
 80056d6:	da09      	bge.n	80056ec <SIGFOX_MONARCH_API_reset_list_freq_pattern+0x34>
 80056d8:	b2c9      	uxtb	r1, r1
 80056da:	2308      	movs	r3, #8
 80056dc:	434b      	muls	r3, r1
 80056de:	18c3      	adds	r3, r0, r3
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	189b      	adds	r3, r3, r2
 80056e4:	2400      	movs	r4, #0
 80056e6:	711c      	strb	r4, [r3, #4]
 80056e8:	1c52      	adds	r2, r2, #1
 80056ea:	e7f2      	b.n	80056d2 <SIGFOX_MONARCH_API_reset_list_freq_pattern+0x1a>
 80056ec:	1c49      	adds	r1, r1, #1
 80056ee:	e7e6      	b.n	80056be <SIGFOX_MONARCH_API_reset_list_freq_pattern+0x6>
 80056f0:	bd10      	pop	{r4, pc}

080056f2 <SIGFOX_MONARCH_API_set_list_freq_pattern>:
 80056f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056f4:	0002      	movs	r2, r0
 80056f6:	2000      	movs	r0, #0
 80056f8:	2400      	movs	r4, #0
 80056fa:	2600      	movs	r6, #0
 80056fc:	0033      	movs	r3, r6
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b07      	cmp	r3, #7
 8005702:	da57      	bge.n	80057b4 <SIGFOX_MONARCH_API_set_list_freq_pattern+0xc2>
 8005704:	b2c9      	uxtb	r1, r1
 8005706:	000e      	movs	r6, r1
 8005708:	411e      	asrs	r6, r3
 800570a:	07f6      	lsls	r6, r6, #31
 800570c:	d550      	bpl.n	80057b0 <SIGFOX_MONARCH_API_set_list_freq_pattern+0xbe>
 800570e:	2600      	movs	r6, #0
 8005710:	0035      	movs	r5, r6
 8005712:	0006      	movs	r6, r0
 8005714:	002f      	movs	r7, r5
 8005716:	b2f6      	uxtb	r6, r6
 8005718:	b2ff      	uxtb	r7, r7
 800571a:	42be      	cmp	r6, r7
 800571c:	d311      	bcc.n	8005742 <SIGFOX_MONARCH_API_set_list_freq_pattern+0x50>
 800571e:	b2e4      	uxtb	r4, r4
 8005720:	2c00      	cmp	r4, #0
 8005722:	d10e      	bne.n	8005742 <SIGFOX_MONARCH_API_set_list_freq_pattern+0x50>
 8005724:	4e85      	ldr	r6, [pc, #532]	; (800593c <.text_8>)
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2708      	movs	r7, #8
 800572a:	435f      	muls	r7, r3
 800572c:	59f6      	ldr	r6, [r6, r7]
 800572e:	b2ed      	uxtb	r5, r5
 8005730:	2708      	movs	r7, #8
 8005732:	436f      	muls	r7, r5
 8005734:	59d7      	ldr	r7, [r2, r7]
 8005736:	42be      	cmp	r6, r7
 8005738:	d101      	bne.n	800573e <SIGFOX_MONARCH_API_set_list_freq_pattern+0x4c>
 800573a:	2601      	movs	r6, #1
 800573c:	0034      	movs	r4, r6
 800573e:	1c6d      	adds	r5, r5, #1
 8005740:	e7e7      	b.n	8005712 <SIGFOX_MONARCH_API_set_list_freq_pattern+0x20>
 8005742:	b2e4      	uxtb	r4, r4
 8005744:	2c01      	cmp	r4, #1
 8005746:	d11e      	bne.n	8005786 <SIGFOX_MONARCH_API_set_list_freq_pattern+0x94>
 8005748:	b2ed      	uxtb	r5, r5
 800574a:	2608      	movs	r6, #8
 800574c:	436e      	muls	r6, r5
 800574e:	1996      	adds	r6, r2, r6
 8005750:	1f36      	subs	r6, r6, #4
 8005752:	7837      	ldrb	r7, [r6, #0]
 8005754:	46bc      	mov	ip, r7
 8005756:	4f79      	ldr	r7, [pc, #484]	; (800593c <.text_8>)
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2608      	movs	r6, #8
 800575c:	435e      	muls	r6, r3
 800575e:	19be      	adds	r6, r7, r6
 8005760:	7936      	ldrb	r6, [r6, #4]
 8005762:	4667      	mov	r7, ip
 8005764:	42b7      	cmp	r7, r6
 8005766:	d00b      	beq.n	8005780 <SIGFOX_MONARCH_API_set_list_freq_pattern+0x8e>
 8005768:	4e74      	ldr	r6, [pc, #464]	; (800593c <.text_8>)
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2708      	movs	r7, #8
 800576e:	435f      	muls	r7, r3
 8005770:	19f6      	adds	r6, r6, r7
 8005772:	7936      	ldrb	r6, [r6, #4]
 8005774:	b2ed      	uxtb	r5, r5
 8005776:	2708      	movs	r7, #8
 8005778:	436f      	muls	r7, r5
 800577a:	19d7      	adds	r7, r2, r7
 800577c:	1eff      	subs	r7, r7, #3
 800577e:	703e      	strb	r6, [r7, #0]
 8005780:	2600      	movs	r6, #0
 8005782:	0034      	movs	r4, r6
 8005784:	e014      	b.n	80057b0 <SIGFOX_MONARCH_API_set_list_freq_pattern+0xbe>
 8005786:	4e6d      	ldr	r6, [pc, #436]	; (800593c <.text_8>)
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2708      	movs	r7, #8
 800578c:	435f      	muls	r7, r3
 800578e:	59f6      	ldr	r6, [r6, r7]
 8005790:	b2c0      	uxtb	r0, r0
 8005792:	2708      	movs	r7, #8
 8005794:	4347      	muls	r7, r0
 8005796:	51d6      	str	r6, [r2, r7]
 8005798:	4e68      	ldr	r6, [pc, #416]	; (800593c <.text_8>)
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2708      	movs	r7, #8
 800579e:	435f      	muls	r7, r3
 80057a0:	19f6      	adds	r6, r6, r7
 80057a2:	7936      	ldrb	r6, [r6, #4]
 80057a4:	b2c0      	uxtb	r0, r0
 80057a6:	2708      	movs	r7, #8
 80057a8:	4347      	muls	r7, r0
 80057aa:	19d7      	adds	r7, r2, r7
 80057ac:	713e      	strb	r6, [r7, #4]
 80057ae:	1c40      	adds	r0, r0, #1
 80057b0:	1c5b      	adds	r3, r3, #1
 80057b2:	e7a4      	b.n	80056fe <SIGFOX_MONARCH_API_set_list_freq_pattern+0xc>
 80057b4:	b2c0      	uxtb	r0, r0
 80057b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057b8 <SIGFOX_MONARCH_API_execute_rc_scan>:
 80057b8:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 80057ba:	b081      	sub	sp, #4
 80057bc:	0017      	movs	r7, r2
 80057be:	001e      	movs	r6, r3
 80057c0:	2500      	movs	r5, #0
 80057c2:	485f      	ldr	r0, [pc, #380]	; (8005940 <.text_9>)
 80057c4:	7800      	ldrb	r0, [r0, #0]
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d001      	beq.n	80057ce <SIGFOX_MONARCH_API_execute_rc_scan+0x16>
 80057ca:	20b2      	movs	r0, #178	; 0xb2
 80057cc:	e06d      	b.n	80058aa <SIGFOX_MONARCH_API_execute_rc_scan+0xf2>
 80057ce:	0030      	movs	r0, r6
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d101      	bne.n	80057d8 <SIGFOX_MONARCH_API_execute_rc_scan+0x20>
 80057d4:	20b4      	movs	r0, #180	; 0xb4
 80057d6:	e068      	b.n	80058aa <SIGFOX_MONARCH_API_execute_rc_scan+0xf2>
 80057d8:	495a      	ldr	r1, [pc, #360]	; (8005944 <.text_10>)
 80057da:	2034      	movs	r0, #52	; 0x34
 80057dc:	f7ff fd02 	bl	80051e4 <MONARCH_API_malloc>
 80057e0:	0004      	movs	r4, r0
 80057e2:	4858      	ldr	r0, [pc, #352]	; (8005944 <.text_10>)
 80057e4:	6800      	ldr	r0, [r0, #0]
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d002      	beq.n	80057f0 <SIGFOX_MONARCH_API_execute_rc_scan+0x38>
 80057ea:	b2e4      	uxtb	r4, r4
 80057ec:	2c00      	cmp	r4, #0
 80057ee:	d005      	beq.n	80057fc <SIGFOX_MONARCH_API_execute_rc_scan+0x44>
 80057f0:	21b3      	movs	r1, #179	; 0xb3
 80057f2:	0020      	movs	r0, r4
 80057f4:	b2c0      	uxtb	r0, r0
 80057f6:	f7fd f974 	bl	8002ae2 <RETURN_CODE>
 80057fa:	e056      	b.n	80058aa <SIGFOX_MONARCH_API_execute_rc_scan+0xf2>
 80057fc:	4851      	ldr	r0, [pc, #324]	; (8005944 <.text_10>)
 80057fe:	6800      	ldr	r0, [r0, #0]
 8005800:	6306      	str	r6, [r0, #48]	; 0x30
 8005802:	2006      	movs	r0, #6
 8005804:	494e      	ldr	r1, [pc, #312]	; (8005940 <.text_9>)
 8005806:	7008      	strb	r0, [r1, #0]
 8005808:	2000      	movs	r0, #0
 800580a:	494f      	ldr	r1, [pc, #316]	; (8005948 <.text_11>)
 800580c:	7008      	strb	r0, [r1, #0]
 800580e:	4668      	mov	r0, sp
 8005810:	7900      	ldrb	r0, [r0, #4]
 8005812:	494c      	ldr	r1, [pc, #304]	; (8005944 <.text_10>)
 8005814:	6809      	ldr	r1, [r1, #0]
 8005816:	7008      	strb	r0, [r1, #0]
 8005818:	484a      	ldr	r0, [pc, #296]	; (8005944 <.text_10>)
 800581a:	6800      	ldr	r0, [r0, #0]
 800581c:	1d00      	adds	r0, r0, #4
 800581e:	f7ff ff4b 	bl	80056b8 <SIGFOX_MONARCH_API_reset_list_freq_pattern>
 8005822:	2000      	movs	r0, #0
 8005824:	4947      	ldr	r1, [pc, #284]	; (8005944 <.text_10>)
 8005826:	6809      	ldr	r1, [r1, #0]
 8005828:	222c      	movs	r2, #44	; 0x2c
 800582a:	5488      	strb	r0, [r1, r2]
 800582c:	4845      	ldr	r0, [pc, #276]	; (8005944 <.text_10>)
 800582e:	6800      	ldr	r0, [r0, #0]
 8005830:	7801      	ldrb	r1, [r0, #0]
 8005832:	4844      	ldr	r0, [pc, #272]	; (8005944 <.text_10>)
 8005834:	6800      	ldr	r0, [r0, #0]
 8005836:	1d00      	adds	r0, r0, #4
 8005838:	f7ff ff5b 	bl	80056f2 <SIGFOX_MONARCH_API_set_list_freq_pattern>
 800583c:	0005      	movs	r5, r0
 800583e:	2004      	movs	r0, #4
 8005840:	f008 fb18 	bl	800de74 <RF_API_init>
 8005844:	0004      	movs	r4, r0
 8005846:	b2e4      	uxtb	r4, r4
 8005848:	2c00      	cmp	r4, #0
 800584a:	d005      	beq.n	8005858 <SIGFOX_MONARCH_API_execute_rc_scan+0xa0>
 800584c:	21b3      	movs	r1, #179	; 0xb3
 800584e:	0020      	movs	r0, r4
 8005850:	b2c0      	uxtb	r0, r0
 8005852:	f7fd f946 	bl	8002ae2 <RETURN_CODE>
 8005856:	e028      	b.n	80058aa <SIGFOX_MONARCH_API_execute_rc_scan+0xf2>
 8005858:	4a3c      	ldr	r2, [pc, #240]	; (800594c <.text_12>)
 800585a:	0039      	movs	r1, r7
 800585c:	b2c9      	uxtb	r1, r1
 800585e:	4668      	mov	r0, sp
 8005860:	8900      	ldrh	r0, [r0, #8]
 8005862:	f7ff fccb 	bl	80051fc <MONARCH_API_timer_start>
 8005866:	0004      	movs	r4, r0
 8005868:	b2e4      	uxtb	r4, r4
 800586a:	2c00      	cmp	r4, #0
 800586c:	d005      	beq.n	800587a <SIGFOX_MONARCH_API_execute_rc_scan+0xc2>
 800586e:	21b3      	movs	r1, #179	; 0xb3
 8005870:	0020      	movs	r0, r4
 8005872:	b2c0      	uxtb	r0, r0
 8005874:	f7fd f935 	bl	8002ae2 <RETURN_CODE>
 8005878:	e017      	b.n	80058aa <SIGFOX_MONARCH_API_execute_rc_scan+0xf2>
 800587a:	4b35      	ldr	r3, [pc, #212]	; (8005950 <.text_13>)
 800587c:	2200      	movs	r2, #0
 800587e:	0029      	movs	r1, r5
 8005880:	b2c9      	uxtb	r1, r1
 8005882:	4830      	ldr	r0, [pc, #192]	; (8005944 <.text_10>)
 8005884:	6800      	ldr	r0, [r0, #0]
 8005886:	1d00      	adds	r0, r0, #4
 8005888:	f7ff fce4 	bl	8005254 <MONARCH_API_configure_search_pattern>
 800588c:	0004      	movs	r4, r0
 800588e:	b2e4      	uxtb	r4, r4
 8005890:	2c00      	cmp	r4, #0
 8005892:	d009      	beq.n	80058a8 <SIGFOX_MONARCH_API_execute_rc_scan+0xf0>
 8005894:	f008 fb96 	bl	800dfc4 <RF_API_stop>
 8005898:	f7ff fcd7 	bl	800524a <MONARCH_API_timer_stop>
 800589c:	21b3      	movs	r1, #179	; 0xb3
 800589e:	0020      	movs	r0, r4
 80058a0:	b2c0      	uxtb	r0, r0
 80058a2:	f7fd f91e 	bl	8002ae2 <RETURN_CODE>
 80058a6:	e000      	b.n	80058aa <SIGFOX_MONARCH_API_execute_rc_scan+0xf2>
 80058a8:	2000      	movs	r0, #0
 80058aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080058ac <SIGFOX_MONARCH_API_stop_rc_scan>:
 80058ac:	b510      	push	{r4, lr}
 80058ae:	4824      	ldr	r0, [pc, #144]	; (8005940 <.text_9>)
 80058b0:	7800      	ldrb	r0, [r0, #0]
 80058b2:	2806      	cmp	r0, #6
 80058b4:	d005      	beq.n	80058c2 <SIGFOX_MONARCH_API_stop_rc_scan+0x16>
 80058b6:	4822      	ldr	r0, [pc, #136]	; (8005940 <.text_9>)
 80058b8:	7800      	ldrb	r0, [r0, #0]
 80058ba:	2807      	cmp	r0, #7
 80058bc:	d001      	beq.n	80058c2 <SIGFOX_MONARCH_API_stop_rc_scan+0x16>
 80058be:	20b5      	movs	r0, #181	; 0xb5
 80058c0:	e03b      	b.n	800593a <SIGFOX_MONARCH_API_stop_rc_scan+0x8e>
 80058c2:	f7ff fd3a 	bl	800533a <MONARCH_API_stop_search_pattern>
 80058c6:	0004      	movs	r4, r0
 80058c8:	b2e4      	uxtb	r4, r4
 80058ca:	2c00      	cmp	r4, #0
 80058cc:	d009      	beq.n	80058e2 <SIGFOX_MONARCH_API_stop_rc_scan+0x36>
 80058ce:	f008 fb79 	bl	800dfc4 <RF_API_stop>
 80058d2:	f7ff fcba 	bl	800524a <MONARCH_API_timer_stop>
 80058d6:	21b6      	movs	r1, #182	; 0xb6
 80058d8:	0020      	movs	r0, r4
 80058da:	b2c0      	uxtb	r0, r0
 80058dc:	f7fd f901 	bl	8002ae2 <RETURN_CODE>
 80058e0:	e02b      	b.n	800593a <SIGFOX_MONARCH_API_stop_rc_scan+0x8e>
 80058e2:	f7ff fcb2 	bl	800524a <MONARCH_API_timer_stop>
 80058e6:	0004      	movs	r4, r0
 80058e8:	b2e4      	uxtb	r4, r4
 80058ea:	2c00      	cmp	r4, #0
 80058ec:	d007      	beq.n	80058fe <SIGFOX_MONARCH_API_stop_rc_scan+0x52>
 80058ee:	f008 fb69 	bl	800dfc4 <RF_API_stop>
 80058f2:	21b6      	movs	r1, #182	; 0xb6
 80058f4:	0020      	movs	r0, r4
 80058f6:	b2c0      	uxtb	r0, r0
 80058f8:	f7fd f8f3 	bl	8002ae2 <RETURN_CODE>
 80058fc:	e01d      	b.n	800593a <SIGFOX_MONARCH_API_stop_rc_scan+0x8e>
 80058fe:	f008 fb61 	bl	800dfc4 <RF_API_stop>
 8005902:	0004      	movs	r4, r0
 8005904:	b2e4      	uxtb	r4, r4
 8005906:	2c00      	cmp	r4, #0
 8005908:	d005      	beq.n	8005916 <SIGFOX_MONARCH_API_stop_rc_scan+0x6a>
 800590a:	21b6      	movs	r1, #182	; 0xb6
 800590c:	0020      	movs	r0, r4
 800590e:	b2c0      	uxtb	r0, r0
 8005910:	f7fd f8e7 	bl	8002ae2 <RETURN_CODE>
 8005914:	e011      	b.n	800593a <SIGFOX_MONARCH_API_stop_rc_scan+0x8e>
 8005916:	480b      	ldr	r0, [pc, #44]	; (8005944 <.text_10>)
 8005918:	6800      	ldr	r0, [r0, #0]
 800591a:	f7ff fc6d 	bl	80051f8 <MONARCH_API_free>
 800591e:	0004      	movs	r4, r0
 8005920:	b2e4      	uxtb	r4, r4
 8005922:	2c00      	cmp	r4, #0
 8005924:	d005      	beq.n	8005932 <SIGFOX_MONARCH_API_stop_rc_scan+0x86>
 8005926:	21b6      	movs	r1, #182	; 0xb6
 8005928:	0020      	movs	r0, r4
 800592a:	b2c0      	uxtb	r0, r0
 800592c:	f7fd f8d9 	bl	8002ae2 <RETURN_CODE>
 8005930:	e003      	b.n	800593a <SIGFOX_MONARCH_API_stop_rc_scan+0x8e>
 8005932:	2000      	movs	r0, #0
 8005934:	4902      	ldr	r1, [pc, #8]	; (8005940 <.text_9>)
 8005936:	7008      	strb	r0, [r1, #0]
 8005938:	2000      	movs	r0, #0
 800593a:	bd10      	pop	{r4, pc}

0800593c <.text_8>:
 800593c:	2000007c 	.word	0x2000007c

08005940 <.text_9>:
 8005940:	200002d0 	.word	0x200002d0

08005944 <.text_10>:
 8005944:	200006e0 	.word	0x200006e0

08005948 <.text_11>:
 8005948:	200002d1 	.word	0x200002d1

0800594c <.text_12>:
 800594c:	080059af 	.word	0x080059af

08005950 <.text_13>:
 8005950:	08005a59 	.word	0x08005a59

08005954 <SIGFOX_CALLBACK_get_rc_from_list>:
 8005954:	b570      	push	{r4, r5, r6, lr}
 8005956:	0003      	movs	r3, r0
 8005958:	2000      	movs	r0, #0
 800595a:	2500      	movs	r5, #0
 800595c:	002c      	movs	r4, r5
 800595e:	b2e4      	uxtb	r4, r4
 8005960:	2c07      	cmp	r4, #7
 8005962:	da22      	bge.n	80059aa <SIGFOX_CALLBACK_get_rc_from_list+0x56>
 8005964:	b2c0      	uxtb	r0, r0
 8005966:	2800      	cmp	r0, #0
 8005968:	d11f      	bne.n	80059aa <SIGFOX_CALLBACK_get_rc_from_list+0x56>
 800596a:	4d3a      	ldr	r5, [pc, #232]	; (8005a54 <.text_4>)
 800596c:	b2e4      	uxtb	r4, r4
 800596e:	2608      	movs	r6, #8
 8005970:	4366      	muls	r6, r4
 8005972:	59ad      	ldr	r5, [r5, r6]
 8005974:	429d      	cmp	r5, r3
 8005976:	d116      	bne.n	80059a6 <SIGFOX_CALLBACK_get_rc_from_list+0x52>
 8005978:	4d36      	ldr	r5, [pc, #216]	; (8005a54 <.text_4>)
 800597a:	b2e4      	uxtb	r4, r4
 800597c:	2608      	movs	r6, #8
 800597e:	4366      	muls	r6, r4
 8005980:	19ad      	adds	r5, r5, r6
 8005982:	792d      	ldrb	r5, [r5, #4]
 8005984:	000e      	movs	r6, r1
 8005986:	b2f6      	uxtb	r6, r6
 8005988:	42b5      	cmp	r5, r6
 800598a:	d10c      	bne.n	80059a6 <SIGFOX_CALLBACK_get_rc_from_list+0x52>
 800598c:	4d31      	ldr	r5, [pc, #196]	; (8005a54 <.text_4>)
 800598e:	b2e4      	uxtb	r4, r4
 8005990:	2608      	movs	r6, #8
 8005992:	4366      	muls	r6, r4
 8005994:	19ad      	adds	r5, r5, r6
 8005996:	796d      	ldrb	r5, [r5, #5]
 8005998:	0016      	movs	r6, r2
 800599a:	b2f6      	uxtb	r6, r6
 800599c:	42b5      	cmp	r5, r6
 800599e:	d102      	bne.n	80059a6 <SIGFOX_CALLBACK_get_rc_from_list+0x52>
 80059a0:	2501      	movs	r5, #1
 80059a2:	40a5      	lsls	r5, r4
 80059a4:	0028      	movs	r0, r5
 80059a6:	1c64      	adds	r4, r4, #1
 80059a8:	e7d9      	b.n	800595e <SIGFOX_CALLBACK_get_rc_from_list+0xa>
 80059aa:	b2c0      	uxtb	r0, r0
 80059ac:	bd70      	pop	{r4, r5, r6, pc}

080059ae <SIGFOX_CALLBACK_monarch_scan_timeout>:
 80059ae:	b510      	push	{r4, lr}
 80059b0:	48ba      	ldr	r0, [pc, #744]	; (8005c9c <.text_6>)
 80059b2:	7800      	ldrb	r0, [r0, #0]
 80059b4:	2806      	cmp	r0, #6
 80059b6:	d005      	beq.n	80059c4 <SIGFOX_CALLBACK_monarch_scan_timeout+0x16>
 80059b8:	48b8      	ldr	r0, [pc, #736]	; (8005c9c <.text_6>)
 80059ba:	7800      	ldrb	r0, [r0, #0]
 80059bc:	2807      	cmp	r0, #7
 80059be:	d001      	beq.n	80059c4 <SIGFOX_CALLBACK_monarch_scan_timeout+0x16>
 80059c0:	20b7      	movs	r0, #183	; 0xb7
 80059c2:	e046      	b.n	8005a52 <SIGFOX_CALLBACK_monarch_scan_timeout+0xa4>
 80059c4:	48b6      	ldr	r0, [pc, #728]	; (8005ca0 <.text_7>)
 80059c6:	7800      	ldrb	r0, [r0, #0]
 80059c8:	1c40      	adds	r0, r0, #1
 80059ca:	49b5      	ldr	r1, [pc, #724]	; (8005ca0 <.text_7>)
 80059cc:	7008      	strb	r0, [r1, #0]
 80059ce:	f7ff fcb4 	bl	800533a <MONARCH_API_stop_search_pattern>
 80059d2:	0004      	movs	r4, r0
 80059d4:	b2e4      	uxtb	r4, r4
 80059d6:	2c00      	cmp	r4, #0
 80059d8:	d009      	beq.n	80059ee <SIGFOX_CALLBACK_monarch_scan_timeout+0x40>
 80059da:	f008 faf3 	bl	800dfc4 <RF_API_stop>
 80059de:	f7ff fc34 	bl	800524a <MONARCH_API_timer_stop>
 80059e2:	21b8      	movs	r1, #184	; 0xb8
 80059e4:	0020      	movs	r0, r4
 80059e6:	b2c0      	uxtb	r0, r0
 80059e8:	f7fd f87b 	bl	8002ae2 <RETURN_CODE>
 80059ec:	e031      	b.n	8005a52 <SIGFOX_CALLBACK_monarch_scan_timeout+0xa4>
 80059ee:	f7ff fc2c 	bl	800524a <MONARCH_API_timer_stop>
 80059f2:	0004      	movs	r4, r0
 80059f4:	b2e4      	uxtb	r4, r4
 80059f6:	2c00      	cmp	r4, #0
 80059f8:	d007      	beq.n	8005a0a <SIGFOX_CALLBACK_monarch_scan_timeout+0x5c>
 80059fa:	f008 fae3 	bl	800dfc4 <RF_API_stop>
 80059fe:	21b8      	movs	r1, #184	; 0xb8
 8005a00:	0020      	movs	r0, r4
 8005a02:	b2c0      	uxtb	r0, r0
 8005a04:	f7fd f86d 	bl	8002ae2 <RETURN_CODE>
 8005a08:	e023      	b.n	8005a52 <SIGFOX_CALLBACK_monarch_scan_timeout+0xa4>
 8005a0a:	f008 fadb 	bl	800dfc4 <RF_API_stop>
 8005a0e:	0004      	movs	r4, r0
 8005a10:	b2e4      	uxtb	r4, r4
 8005a12:	2c00      	cmp	r4, #0
 8005a14:	d005      	beq.n	8005a22 <SIGFOX_CALLBACK_monarch_scan_timeout+0x74>
 8005a16:	21b8      	movs	r1, #184	; 0xb8
 8005a18:	0020      	movs	r0, r4
 8005a1a:	b2c0      	uxtb	r0, r0
 8005a1c:	f7fd f861 	bl	8002ae2 <RETURN_CODE>
 8005a20:	e017      	b.n	8005a52 <SIGFOX_CALLBACK_monarch_scan_timeout+0xa4>
 8005a22:	2100      	movs	r1, #0
 8005a24:	2000      	movs	r0, #0
 8005a26:	4a9f      	ldr	r2, [pc, #636]	; (8005ca4 <.text_8>)
 8005a28:	6812      	ldr	r2, [r2, #0]
 8005a2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a2c:	4790      	blx	r2
 8005a2e:	489d      	ldr	r0, [pc, #628]	; (8005ca4 <.text_8>)
 8005a30:	6800      	ldr	r0, [r0, #0]
 8005a32:	f7ff fbe1 	bl	80051f8 <MONARCH_API_free>
 8005a36:	0004      	movs	r4, r0
 8005a38:	b2e4      	uxtb	r4, r4
 8005a3a:	2c00      	cmp	r4, #0
 8005a3c:	d005      	beq.n	8005a4a <SIGFOX_CALLBACK_monarch_scan_timeout+0x9c>
 8005a3e:	21b8      	movs	r1, #184	; 0xb8
 8005a40:	0020      	movs	r0, r4
 8005a42:	b2c0      	uxtb	r0, r0
 8005a44:	f7fd f84d 	bl	8002ae2 <RETURN_CODE>
 8005a48:	e003      	b.n	8005a52 <SIGFOX_CALLBACK_monarch_scan_timeout+0xa4>
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	4993      	ldr	r1, [pc, #588]	; (8005c9c <.text_6>)
 8005a4e:	7008      	strb	r0, [r1, #0]
 8005a50:	2000      	movs	r0, #0
 8005a52:	bd10      	pop	{r4, pc}

08005a54 <.text_4>:
 8005a54:	2000007c 	.word	0x2000007c

08005a58 <SIGFOX_CALLBACK_monarch_pattern_frequency_result>:
 8005a58:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 8005a5a:	b081      	sub	sp, #4
 8005a5c:	000f      	movs	r7, r1
 8005a5e:	2500      	movs	r5, #0
 8005a60:	2000      	movs	r0, #0
 8005a62:	4669      	mov	r1, sp
 8005a64:	7088      	strb	r0, [r1, #2]
 8005a66:	2000      	movs	r0, #0
 8005a68:	4669      	mov	r1, sp
 8005a6a:	7008      	strb	r0, [r1, #0]
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	4669      	mov	r1, sp
 8005a70:	7048      	strb	r0, [r1, #1]
 8005a72:	488a      	ldr	r0, [pc, #552]	; (8005c9c <.text_6>)
 8005a74:	7800      	ldrb	r0, [r0, #0]
 8005a76:	2806      	cmp	r0, #6
 8005a78:	d005      	beq.n	8005a86 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x2e>
 8005a7a:	4888      	ldr	r0, [pc, #544]	; (8005c9c <.text_6>)
 8005a7c:	7800      	ldrb	r0, [r0, #0]
 8005a7e:	2807      	cmp	r0, #7
 8005a80:	d001      	beq.n	8005a86 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x2e>
 8005a82:	20b9      	movs	r0, #185	; 0xb9
 8005a84:	e108      	b.n	8005c98 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x240>
 8005a86:	2000      	movs	r0, #0
 8005a88:	0004      	movs	r4, r0
 8005a8a:	b2e4      	uxtb	r4, r4
 8005a8c:	2c05      	cmp	r4, #5
 8005a8e:	da2b      	bge.n	8005ae8 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x90>
 8005a90:	4668      	mov	r0, sp
 8005a92:	7800      	ldrb	r0, [r0, #0]
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d127      	bne.n	8005ae8 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x90>
 8005a98:	4882      	ldr	r0, [pc, #520]	; (8005ca4 <.text_8>)
 8005a9a:	6800      	ldr	r0, [r0, #0]
 8005a9c:	b2e4      	uxtb	r4, r4
 8005a9e:	2108      	movs	r1, #8
 8005aa0:	4361      	muls	r1, r4
 8005aa2:	1840      	adds	r0, r0, r1
 8005aa4:	6840      	ldr	r0, [r0, #4]
 8005aa6:	9901      	ldr	r1, [sp, #4]
 8005aa8:	4288      	cmp	r0, r1
 8005aaa:	d11b      	bne.n	8005ae4 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x8c>
 8005aac:	2001      	movs	r0, #1
 8005aae:	4669      	mov	r1, sp
 8005ab0:	7008      	strb	r0, [r1, #0]
 8005ab2:	487c      	ldr	r0, [pc, #496]	; (8005ca4 <.text_8>)
 8005ab4:	6800      	ldr	r0, [r0, #0]
 8005ab6:	b2e4      	uxtb	r4, r4
 8005ab8:	2108      	movs	r1, #8
 8005aba:	4361      	muls	r1, r4
 8005abc:	1840      	adds	r0, r0, r1
 8005abe:	7a00      	ldrb	r0, [r0, #8]
 8005ac0:	0039      	movs	r1, r7
 8005ac2:	b2c9      	uxtb	r1, r1
 8005ac4:	4288      	cmp	r0, r1
 8005ac6:	d00a      	beq.n	8005ade <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x86>
 8005ac8:	4876      	ldr	r0, [pc, #472]	; (8005ca4 <.text_8>)
 8005aca:	6800      	ldr	r0, [r0, #0]
 8005acc:	b2e4      	uxtb	r4, r4
 8005ace:	2108      	movs	r1, #8
 8005ad0:	4361      	muls	r1, r4
 8005ad2:	1840      	adds	r0, r0, r1
 8005ad4:	7a40      	ldrb	r0, [r0, #9]
 8005ad6:	0039      	movs	r1, r7
 8005ad8:	b2c9      	uxtb	r1, r1
 8005ada:	4288      	cmp	r0, r1
 8005adc:	d102      	bne.n	8005ae4 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x8c>
 8005ade:	2001      	movs	r0, #1
 8005ae0:	4669      	mov	r1, sp
 8005ae2:	7048      	strb	r0, [r1, #1]
 8005ae4:	1c64      	adds	r4, r4, #1
 8005ae6:	e7d0      	b.n	8005a8a <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x32>
 8005ae8:	4668      	mov	r0, sp
 8005aea:	7800      	ldrb	r0, [r0, #0]
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d105      	bne.n	8005afc <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0xa4>
 8005af0:	f008 fa68 	bl	800dfc4 <RF_API_stop>
 8005af4:	f7ff fba9 	bl	800524a <MONARCH_API_timer_stop>
 8005af8:	20bc      	movs	r0, #188	; 0xbc
 8005afa:	e0cd      	b.n	8005c98 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x240>
 8005afc:	4668      	mov	r0, sp
 8005afe:	7840      	ldrb	r0, [r0, #1]
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d105      	bne.n	8005b10 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0xb8>
 8005b04:	f008 fa5e 	bl	800dfc4 <RF_API_stop>
 8005b08:	f7ff fb9f 	bl	800524a <MONARCH_API_timer_stop>
 8005b0c:	20bb      	movs	r0, #187	; 0xbb
 8005b0e:	e0c3      	b.n	8005c98 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x240>
 8005b10:	4863      	ldr	r0, [pc, #396]	; (8005ca0 <.text_7>)
 8005b12:	7800      	ldrb	r0, [r0, #0]
 8005b14:	1c40      	adds	r0, r0, #1
 8005b16:	4962      	ldr	r1, [pc, #392]	; (8005ca0 <.text_7>)
 8005b18:	7008      	strb	r0, [r1, #0]
 8005b1a:	f7ff fc0e 	bl	800533a <MONARCH_API_stop_search_pattern>
 8005b1e:	0006      	movs	r6, r0
 8005b20:	b2f6      	uxtb	r6, r6
 8005b22:	2e00      	cmp	r6, #0
 8005b24:	d009      	beq.n	8005b3a <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0xe2>
 8005b26:	f008 fa4d 	bl	800dfc4 <RF_API_stop>
 8005b2a:	f7ff fb8e 	bl	800524a <MONARCH_API_timer_stop>
 8005b2e:	21ba      	movs	r1, #186	; 0xba
 8005b30:	0030      	movs	r0, r6
 8005b32:	b2c0      	uxtb	r0, r0
 8005b34:	f7fc ffd5 	bl	8002ae2 <RETURN_CODE>
 8005b38:	e0ae      	b.n	8005c98 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x240>
 8005b3a:	f7ff fb86 	bl	800524a <MONARCH_API_timer_stop>
 8005b3e:	0006      	movs	r6, r0
 8005b40:	b2f6      	uxtb	r6, r6
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	d007      	beq.n	8005b56 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0xfe>
 8005b46:	f008 fa3d 	bl	800dfc4 <RF_API_stop>
 8005b4a:	21ba      	movs	r1, #186	; 0xba
 8005b4c:	0030      	movs	r0, r6
 8005b4e:	b2c0      	uxtb	r0, r0
 8005b50:	f7fc ffc7 	bl	8002ae2 <RETURN_CODE>
 8005b54:	e0a0      	b.n	8005c98 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x240>
 8005b56:	4851      	ldr	r0, [pc, #324]	; (8005c9c <.text_6>)
 8005b58:	7800      	ldrb	r0, [r0, #0]
 8005b5a:	2806      	cmp	r0, #6
 8005b5c:	d162      	bne.n	8005c24 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x1cc>
 8005b5e:	2007      	movs	r0, #7
 8005b60:	494e      	ldr	r1, [pc, #312]	; (8005c9c <.text_6>)
 8005b62:	7008      	strb	r0, [r1, #0]
 8005b64:	4a50      	ldr	r2, [pc, #320]	; (8005ca8 <.text_9>)
 8005b66:	2100      	movs	r1, #0
 8005b68:	20c8      	movs	r0, #200	; 0xc8
 8005b6a:	0040      	lsls	r0, r0, #1
 8005b6c:	f7ff fb46 	bl	80051fc <MONARCH_API_timer_start>
 8005b70:	0006      	movs	r6, r0
 8005b72:	b2f6      	uxtb	r6, r6
 8005b74:	2e00      	cmp	r6, #0
 8005b76:	d007      	beq.n	8005b88 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x130>
 8005b78:	f008 fa24 	bl	800dfc4 <RF_API_stop>
 8005b7c:	21ba      	movs	r1, #186	; 0xba
 8005b7e:	0030      	movs	r0, r6
 8005b80:	b2c0      	uxtb	r0, r0
 8005b82:	f7fc ffae 	bl	8002ae2 <RETURN_CODE>
 8005b86:	e087      	b.n	8005c98 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x240>
 8005b88:	4846      	ldr	r0, [pc, #280]	; (8005ca4 <.text_8>)
 8005b8a:	6800      	ldr	r0, [r0, #0]
 8005b8c:	1d00      	adds	r0, r0, #4
 8005b8e:	f7ff fd93 	bl	80056b8 <SIGFOX_MONARCH_API_reset_list_freq_pattern>
 8005b92:	2000      	movs	r0, #0
 8005b94:	0004      	movs	r4, r0
 8005b96:	b2e4      	uxtb	r4, r4
 8005b98:	2c07      	cmp	r4, #7
 8005b9a:	da29      	bge.n	8005bf0 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x198>
 8005b9c:	4843      	ldr	r0, [pc, #268]	; (8005cac <.text_10>)
 8005b9e:	b2e4      	uxtb	r4, r4
 8005ba0:	2108      	movs	r1, #8
 8005ba2:	4361      	muls	r1, r4
 8005ba4:	5840      	ldr	r0, [r0, r1]
 8005ba6:	9901      	ldr	r1, [sp, #4]
 8005ba8:	4288      	cmp	r0, r1
 8005baa:	d11f      	bne.n	8005bec <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x194>
 8005bac:	483f      	ldr	r0, [pc, #252]	; (8005cac <.text_10>)
 8005bae:	b2e4      	uxtb	r4, r4
 8005bb0:	2108      	movs	r1, #8
 8005bb2:	4361      	muls	r1, r4
 8005bb4:	1840      	adds	r0, r0, r1
 8005bb6:	7900      	ldrb	r0, [r0, #4]
 8005bb8:	0039      	movs	r1, r7
 8005bba:	b2c9      	uxtb	r1, r1
 8005bbc:	4288      	cmp	r0, r1
 8005bbe:	d115      	bne.n	8005bec <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x194>
 8005bc0:	4838      	ldr	r0, [pc, #224]	; (8005ca4 <.text_8>)
 8005bc2:	6800      	ldr	r0, [r0, #0]
 8005bc4:	7800      	ldrb	r0, [r0, #0]
 8005bc6:	4120      	asrs	r0, r4
 8005bc8:	07c0      	lsls	r0, r0, #31
 8005bca:	d50f      	bpl.n	8005bec <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x194>
 8005bcc:	9801      	ldr	r0, [sp, #4]
 8005bce:	4935      	ldr	r1, [pc, #212]	; (8005ca4 <.text_8>)
 8005bd0:	6809      	ldr	r1, [r1, #0]
 8005bd2:	6048      	str	r0, [r1, #4]
 8005bd4:	4835      	ldr	r0, [pc, #212]	; (8005cac <.text_10>)
 8005bd6:	b2e4      	uxtb	r4, r4
 8005bd8:	2108      	movs	r1, #8
 8005bda:	4361      	muls	r1, r4
 8005bdc:	1840      	adds	r0, r0, r1
 8005bde:	7940      	ldrb	r0, [r0, #5]
 8005be0:	4930      	ldr	r1, [pc, #192]	; (8005ca4 <.text_8>)
 8005be2:	6809      	ldr	r1, [r1, #0]
 8005be4:	b2ed      	uxtb	r5, r5
 8005be6:	1949      	adds	r1, r1, r5
 8005be8:	7208      	strb	r0, [r1, #8]
 8005bea:	1c6d      	adds	r5, r5, #1
 8005bec:	1c64      	adds	r4, r4, #1
 8005bee:	e7d2      	b.n	8005b96 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x13e>
 8005bf0:	482c      	ldr	r0, [pc, #176]	; (8005ca4 <.text_8>)
 8005bf2:	6800      	ldr	r0, [r0, #0]
 8005bf4:	212c      	movs	r1, #44	; 0x2c
 8005bf6:	5447      	strb	r7, [r0, r1]
 8005bf8:	4b2d      	ldr	r3, [pc, #180]	; (8005cb0 <.text_11>)
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	4829      	ldr	r0, [pc, #164]	; (8005ca4 <.text_8>)
 8005c00:	6800      	ldr	r0, [r0, #0]
 8005c02:	1d00      	adds	r0, r0, #4
 8005c04:	f7ff fb26 	bl	8005254 <MONARCH_API_configure_search_pattern>
 8005c08:	0006      	movs	r6, r0
 8005c0a:	b2f6      	uxtb	r6, r6
 8005c0c:	2e00      	cmp	r6, #0
 8005c0e:	d042      	beq.n	8005c96 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x23e>
 8005c10:	f008 f9d8 	bl	800dfc4 <RF_API_stop>
 8005c14:	f7ff fb19 	bl	800524a <MONARCH_API_timer_stop>
 8005c18:	21ba      	movs	r1, #186	; 0xba
 8005c1a:	0030      	movs	r0, r6
 8005c1c:	b2c0      	uxtb	r0, r0
 8005c1e:	f7fc ff60 	bl	8002ae2 <RETURN_CODE>
 8005c22:	e039      	b.n	8005c98 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x240>
 8005c24:	481d      	ldr	r0, [pc, #116]	; (8005c9c <.text_6>)
 8005c26:	7800      	ldrb	r0, [r0, #0]
 8005c28:	2807      	cmp	r0, #7
 8005c2a:	d134      	bne.n	8005c96 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x23e>
 8005c2c:	f008 f9ca 	bl	800dfc4 <RF_API_stop>
 8005c30:	0006      	movs	r6, r0
 8005c32:	b2f6      	uxtb	r6, r6
 8005c34:	2e00      	cmp	r6, #0
 8005c36:	d005      	beq.n	8005c44 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x1ec>
 8005c38:	21ba      	movs	r1, #186	; 0xba
 8005c3a:	0030      	movs	r0, r6
 8005c3c:	b2c0      	uxtb	r0, r0
 8005c3e:	f7fc ff50 	bl	8002ae2 <RETURN_CODE>
 8005c42:	e029      	b.n	8005c98 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x240>
 8005c44:	003a      	movs	r2, r7
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	4816      	ldr	r0, [pc, #88]	; (8005ca4 <.text_8>)
 8005c4a:	6800      	ldr	r0, [r0, #0]
 8005c4c:	212c      	movs	r1, #44	; 0x2c
 8005c4e:	5c41      	ldrb	r1, [r0, r1]
 8005c50:	9801      	ldr	r0, [sp, #4]
 8005c52:	f7ff fe7f 	bl	8005954 <SIGFOX_CALLBACK_get_rc_from_list>
 8005c56:	4669      	mov	r1, sp
 8005c58:	7088      	strb	r0, [r1, #2]
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	4911      	ldr	r1, [pc, #68]	; (8005ca4 <.text_8>)
 8005c5e:	6809      	ldr	r1, [r1, #0]
 8005c60:	222c      	movs	r2, #44	; 0x2c
 8005c62:	5488      	strb	r0, [r1, r2]
 8005c64:	9902      	ldr	r1, [sp, #8]
 8005c66:	b209      	sxth	r1, r1
 8005c68:	4668      	mov	r0, sp
 8005c6a:	7880      	ldrb	r0, [r0, #2]
 8005c6c:	4a0d      	ldr	r2, [pc, #52]	; (8005ca4 <.text_8>)
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c72:	4790      	blx	r2
 8005c74:	480b      	ldr	r0, [pc, #44]	; (8005ca4 <.text_8>)
 8005c76:	6800      	ldr	r0, [r0, #0]
 8005c78:	f7ff fabe 	bl	80051f8 <MONARCH_API_free>
 8005c7c:	0006      	movs	r6, r0
 8005c7e:	b2f6      	uxtb	r6, r6
 8005c80:	2e00      	cmp	r6, #0
 8005c82:	d005      	beq.n	8005c90 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x238>
 8005c84:	21ba      	movs	r1, #186	; 0xba
 8005c86:	0030      	movs	r0, r6
 8005c88:	b2c0      	uxtb	r0, r0
 8005c8a:	f7fc ff2a 	bl	8002ae2 <RETURN_CODE>
 8005c8e:	e003      	b.n	8005c98 <SIGFOX_CALLBACK_monarch_pattern_frequency_result+0x240>
 8005c90:	2000      	movs	r0, #0
 8005c92:	4902      	ldr	r1, [pc, #8]	; (8005c9c <.text_6>)
 8005c94:	7008      	strb	r0, [r1, #0]
 8005c96:	2000      	movs	r0, #0
 8005c98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08005c9c <.text_6>:
 8005c9c:	200002d0 	.word	0x200002d0

08005ca0 <.text_7>:
 8005ca0:	200002d1 	.word	0x200002d1

08005ca4 <.text_8>:
 8005ca4:	200006e0 	.word	0x200006e0

08005ca8 <.text_9>:
 8005ca8:	080059af 	.word	0x080059af

08005cac <.text_10>:
 8005cac:	2000007c 	.word	0x2000007c

08005cb0 <.text_11>:
 8005cb0:	08005a59 	.word	0x08005a59

08005cb4 <strlen>:
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cba:	2a00      	cmp	r2, #0
 8005cbc:	d1fb      	bne.n	8005cb6 <strlen+0x2>
 8005cbe:	1a18      	subs	r0, r3, r0
 8005cc0:	3801      	subs	r0, #1
 8005cc2:	4770      	bx	lr
	...

08005cd0 <memchr>:
 8005cd0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005cd4:	2a10      	cmp	r2, #16
 8005cd6:	db2b      	blt.n	8005d30 <memchr+0x60>
 8005cd8:	f010 0f07 	tst.w	r0, #7
 8005cdc:	d008      	beq.n	8005cf0 <memchr+0x20>
 8005cde:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005ce2:	3a01      	subs	r2, #1
 8005ce4:	428b      	cmp	r3, r1
 8005ce6:	d02d      	beq.n	8005d44 <memchr+0x74>
 8005ce8:	f010 0f07 	tst.w	r0, #7
 8005cec:	b342      	cbz	r2, 8005d40 <memchr+0x70>
 8005cee:	d1f6      	bne.n	8005cde <memchr+0xe>
 8005cf0:	b4f0      	push	{r4, r5, r6, r7}
 8005cf2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005cf6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005cfa:	f022 0407 	bic.w	r4, r2, #7
 8005cfe:	f07f 0700 	mvns.w	r7, #0
 8005d02:	2300      	movs	r3, #0
 8005d04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005d08:	3c08      	subs	r4, #8
 8005d0a:	ea85 0501 	eor.w	r5, r5, r1
 8005d0e:	ea86 0601 	eor.w	r6, r6, r1
 8005d12:	fa85 f547 	uadd8	r5, r5, r7
 8005d16:	faa3 f587 	sel	r5, r3, r7
 8005d1a:	fa86 f647 	uadd8	r6, r6, r7
 8005d1e:	faa5 f687 	sel	r6, r5, r7
 8005d22:	b98e      	cbnz	r6, 8005d48 <memchr+0x78>
 8005d24:	d1ee      	bne.n	8005d04 <memchr+0x34>
 8005d26:	bcf0      	pop	{r4, r5, r6, r7}
 8005d28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005d2c:	f002 0207 	and.w	r2, r2, #7
 8005d30:	b132      	cbz	r2, 8005d40 <memchr+0x70>
 8005d32:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005d36:	3a01      	subs	r2, #1
 8005d38:	ea83 0301 	eor.w	r3, r3, r1
 8005d3c:	b113      	cbz	r3, 8005d44 <memchr+0x74>
 8005d3e:	d1f8      	bne.n	8005d32 <memchr+0x62>
 8005d40:	2000      	movs	r0, #0
 8005d42:	4770      	bx	lr
 8005d44:	3801      	subs	r0, #1
 8005d46:	4770      	bx	lr
 8005d48:	2d00      	cmp	r5, #0
 8005d4a:	bf06      	itte	eq
 8005d4c:	4635      	moveq	r5, r6
 8005d4e:	3803      	subeq	r0, #3
 8005d50:	3807      	subne	r0, #7
 8005d52:	f015 0f01 	tst.w	r5, #1
 8005d56:	d107      	bne.n	8005d68 <memchr+0x98>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005d5e:	bf02      	ittt	eq
 8005d60:	3001      	addeq	r0, #1
 8005d62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005d66:	3001      	addeq	r0, #1
 8005d68:	bcf0      	pop	{r4, r5, r6, r7}
 8005d6a:	3801      	subs	r0, #1
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop

08005d70 <__udivsi3>:
 8005d70:	2900      	cmp	r1, #0
 8005d72:	d002      	beq.n	8005d7a <__udivsi3+0xa>
 8005d74:	fbb0 f0f1 	udiv	r0, r0, r1
 8005d78:	4770      	bx	lr
 8005d7a:	b108      	cbz	r0, 8005d80 <__udivsi3+0x10>
 8005d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d80:	f000 b81e 	b.w	8005dc0 <__aeabi_idiv0>

08005d84 <__aeabi_uidivmod>:
 8005d84:	2900      	cmp	r1, #0
 8005d86:	d0f8      	beq.n	8005d7a <__udivsi3+0xa>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	fbb0 f0f1 	udiv	r0, r0, r1
 8005d8e:	fb00 2111 	mls	r1, r0, r1, r2
 8005d92:	4770      	bx	lr

08005d94 <__divsi3>:
 8005d94:	2900      	cmp	r1, #0
 8005d96:	d002      	beq.n	8005d9e <__divsi3+0xa>
 8005d98:	fb90 f0f1 	sdiv	r0, r0, r1
 8005d9c:	4770      	bx	lr
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	bfc8      	it	gt
 8005da2:	f06f 4000 	mvngt.w	r0, #2147483648	; 0x80000000
 8005da6:	bfb8      	it	lt
 8005da8:	f04f 4000 	movlt.w	r0, #2147483648	; 0x80000000
 8005dac:	f000 b808 	b.w	8005dc0 <__aeabi_idiv0>

08005db0 <__aeabi_idivmod>:
 8005db0:	2900      	cmp	r1, #0
 8005db2:	d0f4      	beq.n	8005d9e <__divsi3+0xa>
 8005db4:	4602      	mov	r2, r0
 8005db6:	fb90 f0f1 	sdiv	r0, r0, r1
 8005dba:	fb00 2111 	mls	r1, r0, r1, r2
 8005dbe:	4770      	bx	lr

08005dc0 <__aeabi_idiv0>:
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop

08005dc4 <__aeabi_drsub>:
 8005dc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005dc8:	e002      	b.n	8005dd0 <__adddf3>
 8005dca:	bf00      	nop

08005dcc <__aeabi_dsub>:
 8005dcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005dd0 <__adddf3>:
 8005dd0:	b530      	push	{r4, r5, lr}
 8005dd2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005dd6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005dda:	ea94 0f05 	teq	r4, r5
 8005dde:	bf08      	it	eq
 8005de0:	ea90 0f02 	teqeq	r0, r2
 8005de4:	bf1f      	itttt	ne
 8005de6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005dea:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005dee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005df2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005df6:	f000 80e2 	beq.w	8005fbe <__adddf3+0x1ee>
 8005dfa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005dfe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005e02:	bfb8      	it	lt
 8005e04:	426d      	neglt	r5, r5
 8005e06:	dd0c      	ble.n	8005e22 <__adddf3+0x52>
 8005e08:	442c      	add	r4, r5
 8005e0a:	ea80 0202 	eor.w	r2, r0, r2
 8005e0e:	ea81 0303 	eor.w	r3, r1, r3
 8005e12:	ea82 0000 	eor.w	r0, r2, r0
 8005e16:	ea83 0101 	eor.w	r1, r3, r1
 8005e1a:	ea80 0202 	eor.w	r2, r0, r2
 8005e1e:	ea81 0303 	eor.w	r3, r1, r3
 8005e22:	2d36      	cmp	r5, #54	; 0x36
 8005e24:	bf88      	it	hi
 8005e26:	bd30      	pophi	{r4, r5, pc}
 8005e28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005e2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005e30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005e34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005e38:	d002      	beq.n	8005e40 <__adddf3+0x70>
 8005e3a:	4240      	negs	r0, r0
 8005e3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005e40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005e44:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005e48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005e4c:	d002      	beq.n	8005e54 <__adddf3+0x84>
 8005e4e:	4252      	negs	r2, r2
 8005e50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005e54:	ea94 0f05 	teq	r4, r5
 8005e58:	f000 80a7 	beq.w	8005faa <__adddf3+0x1da>
 8005e5c:	f1a4 0401 	sub.w	r4, r4, #1
 8005e60:	f1d5 0e20 	rsbs	lr, r5, #32
 8005e64:	db0d      	blt.n	8005e82 <__adddf3+0xb2>
 8005e66:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005e6a:	fa22 f205 	lsr.w	r2, r2, r5
 8005e6e:	1880      	adds	r0, r0, r2
 8005e70:	f141 0100 	adc.w	r1, r1, #0
 8005e74:	fa03 f20e 	lsl.w	r2, r3, lr
 8005e78:	1880      	adds	r0, r0, r2
 8005e7a:	fa43 f305 	asr.w	r3, r3, r5
 8005e7e:	4159      	adcs	r1, r3
 8005e80:	e00e      	b.n	8005ea0 <__adddf3+0xd0>
 8005e82:	f1a5 0520 	sub.w	r5, r5, #32
 8005e86:	f10e 0e20 	add.w	lr, lr, #32
 8005e8a:	2a01      	cmp	r2, #1
 8005e8c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005e90:	bf28      	it	cs
 8005e92:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005e96:	fa43 f305 	asr.w	r3, r3, r5
 8005e9a:	18c0      	adds	r0, r0, r3
 8005e9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005ea0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005ea4:	d507      	bpl.n	8005eb6 <__adddf3+0xe6>
 8005ea6:	f04f 0e00 	mov.w	lr, #0
 8005eaa:	f1dc 0c00 	rsbs	ip, ip, #0
 8005eae:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005eb2:	eb6e 0101 	sbc.w	r1, lr, r1
 8005eb6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005eba:	d31b      	bcc.n	8005ef4 <__adddf3+0x124>
 8005ebc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005ec0:	d30c      	bcc.n	8005edc <__adddf3+0x10c>
 8005ec2:	0849      	lsrs	r1, r1, #1
 8005ec4:	ea5f 0030 	movs.w	r0, r0, rrx
 8005ec8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005ecc:	f104 0401 	add.w	r4, r4, #1
 8005ed0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005ed4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005ed8:	f080 809a 	bcs.w	8006010 <__adddf3+0x240>
 8005edc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005ee0:	bf08      	it	eq
 8005ee2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005ee6:	f150 0000 	adcs.w	r0, r0, #0
 8005eea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005eee:	ea41 0105 	orr.w	r1, r1, r5
 8005ef2:	bd30      	pop	{r4, r5, pc}
 8005ef4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005ef8:	4140      	adcs	r0, r0
 8005efa:	eb41 0101 	adc.w	r1, r1, r1
 8005efe:	3c01      	subs	r4, #1
 8005f00:	bf28      	it	cs
 8005f02:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8005f06:	d2e9      	bcs.n	8005edc <__adddf3+0x10c>
 8005f08:	f091 0f00 	teq	r1, #0
 8005f0c:	bf04      	itt	eq
 8005f0e:	4601      	moveq	r1, r0
 8005f10:	2000      	moveq	r0, #0
 8005f12:	fab1 f381 	clz	r3, r1
 8005f16:	bf08      	it	eq
 8005f18:	3320      	addeq	r3, #32
 8005f1a:	f1a3 030b 	sub.w	r3, r3, #11
 8005f1e:	f1b3 0220 	subs.w	r2, r3, #32
 8005f22:	da0c      	bge.n	8005f3e <__adddf3+0x16e>
 8005f24:	320c      	adds	r2, #12
 8005f26:	dd08      	ble.n	8005f3a <__adddf3+0x16a>
 8005f28:	f102 0c14 	add.w	ip, r2, #20
 8005f2c:	f1c2 020c 	rsb	r2, r2, #12
 8005f30:	fa01 f00c 	lsl.w	r0, r1, ip
 8005f34:	fa21 f102 	lsr.w	r1, r1, r2
 8005f38:	e00c      	b.n	8005f54 <__adddf3+0x184>
 8005f3a:	f102 0214 	add.w	r2, r2, #20
 8005f3e:	bfd8      	it	le
 8005f40:	f1c2 0c20 	rsble	ip, r2, #32
 8005f44:	fa01 f102 	lsl.w	r1, r1, r2
 8005f48:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005f4c:	bfdc      	itt	le
 8005f4e:	ea41 010c 	orrle.w	r1, r1, ip
 8005f52:	4090      	lslle	r0, r2
 8005f54:	1ae4      	subs	r4, r4, r3
 8005f56:	bfa2      	ittt	ge
 8005f58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005f5c:	4329      	orrge	r1, r5
 8005f5e:	bd30      	popge	{r4, r5, pc}
 8005f60:	ea6f 0404 	mvn.w	r4, r4
 8005f64:	3c1f      	subs	r4, #31
 8005f66:	da1c      	bge.n	8005fa2 <__adddf3+0x1d2>
 8005f68:	340c      	adds	r4, #12
 8005f6a:	dc0e      	bgt.n	8005f8a <__adddf3+0x1ba>
 8005f6c:	f104 0414 	add.w	r4, r4, #20
 8005f70:	f1c4 0220 	rsb	r2, r4, #32
 8005f74:	fa20 f004 	lsr.w	r0, r0, r4
 8005f78:	fa01 f302 	lsl.w	r3, r1, r2
 8005f7c:	ea40 0003 	orr.w	r0, r0, r3
 8005f80:	fa21 f304 	lsr.w	r3, r1, r4
 8005f84:	ea45 0103 	orr.w	r1, r5, r3
 8005f88:	bd30      	pop	{r4, r5, pc}
 8005f8a:	f1c4 040c 	rsb	r4, r4, #12
 8005f8e:	f1c4 0220 	rsb	r2, r4, #32
 8005f92:	fa20 f002 	lsr.w	r0, r0, r2
 8005f96:	fa01 f304 	lsl.w	r3, r1, r4
 8005f9a:	ea40 0003 	orr.w	r0, r0, r3
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	bd30      	pop	{r4, r5, pc}
 8005fa2:	fa21 f004 	lsr.w	r0, r1, r4
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	bd30      	pop	{r4, r5, pc}
 8005faa:	f094 0f00 	teq	r4, #0
 8005fae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005fb2:	bf06      	itte	eq
 8005fb4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005fb8:	3401      	addeq	r4, #1
 8005fba:	3d01      	subne	r5, #1
 8005fbc:	e74e      	b.n	8005e5c <__adddf3+0x8c>
 8005fbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005fc2:	bf18      	it	ne
 8005fc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005fc8:	d029      	beq.n	800601e <__adddf3+0x24e>
 8005fca:	ea94 0f05 	teq	r4, r5
 8005fce:	bf08      	it	eq
 8005fd0:	ea90 0f02 	teqeq	r0, r2
 8005fd4:	d005      	beq.n	8005fe2 <__adddf3+0x212>
 8005fd6:	ea54 0c00 	orrs.w	ip, r4, r0
 8005fda:	bf04      	itt	eq
 8005fdc:	4619      	moveq	r1, r3
 8005fde:	4610      	moveq	r0, r2
 8005fe0:	bd30      	pop	{r4, r5, pc}
 8005fe2:	ea91 0f03 	teq	r1, r3
 8005fe6:	bf1e      	ittt	ne
 8005fe8:	2100      	movne	r1, #0
 8005fea:	2000      	movne	r0, #0
 8005fec:	bd30      	popne	{r4, r5, pc}
 8005fee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005ff2:	d105      	bne.n	8006000 <__adddf3+0x230>
 8005ff4:	0040      	lsls	r0, r0, #1
 8005ff6:	4149      	adcs	r1, r1
 8005ff8:	bf28      	it	cs
 8005ffa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005ffe:	bd30      	pop	{r4, r5, pc}
 8006000:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006004:	bf3c      	itt	cc
 8006006:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800600a:	bd30      	popcc	{r4, r5, pc}
 800600c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006010:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006014:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006018:	f04f 0000 	mov.w	r0, #0
 800601c:	bd30      	pop	{r4, r5, pc}
 800601e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006022:	bf1a      	itte	ne
 8006024:	4619      	movne	r1, r3
 8006026:	4610      	movne	r0, r2
 8006028:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800602c:	bf1c      	itt	ne
 800602e:	460b      	movne	r3, r1
 8006030:	4602      	movne	r2, r0
 8006032:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006036:	bf06      	itte	eq
 8006038:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800603c:	ea91 0f03 	teqeq	r1, r3
 8006040:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006044:	bd30      	pop	{r4, r5, pc}
 8006046:	bf00      	nop

08006048 <__aeabi_ui2d>:
 8006048:	f090 0f00 	teq	r0, #0
 800604c:	bf04      	itt	eq
 800604e:	2100      	moveq	r1, #0
 8006050:	4770      	bxeq	lr
 8006052:	b530      	push	{r4, r5, lr}
 8006054:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006058:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800605c:	f04f 0500 	mov.w	r5, #0
 8006060:	f04f 0100 	mov.w	r1, #0
 8006064:	e750      	b.n	8005f08 <__adddf3+0x138>
 8006066:	bf00      	nop

08006068 <__aeabi_i2d>:
 8006068:	f090 0f00 	teq	r0, #0
 800606c:	bf04      	itt	eq
 800606e:	2100      	moveq	r1, #0
 8006070:	4770      	bxeq	lr
 8006072:	b530      	push	{r4, r5, lr}
 8006074:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006078:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800607c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006080:	bf48      	it	mi
 8006082:	4240      	negmi	r0, r0
 8006084:	f04f 0100 	mov.w	r1, #0
 8006088:	e73e      	b.n	8005f08 <__adddf3+0x138>
 800608a:	bf00      	nop

0800608c <__aeabi_f2d>:
 800608c:	0042      	lsls	r2, r0, #1
 800608e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006092:	ea4f 0131 	mov.w	r1, r1, rrx
 8006096:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800609a:	bf1f      	itttt	ne
 800609c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80060a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80060a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80060a8:	4770      	bxne	lr
 80060aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80060ae:	bf08      	it	eq
 80060b0:	4770      	bxeq	lr
 80060b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80060b6:	bf04      	itt	eq
 80060b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80060bc:	4770      	bxeq	lr
 80060be:	b530      	push	{r4, r5, lr}
 80060c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80060c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80060c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80060cc:	e71c      	b.n	8005f08 <__adddf3+0x138>
 80060ce:	bf00      	nop

080060d0 <__aeabi_ul2d>:
 80060d0:	ea50 0201 	orrs.w	r2, r0, r1
 80060d4:	bf08      	it	eq
 80060d6:	4770      	bxeq	lr
 80060d8:	b530      	push	{r4, r5, lr}
 80060da:	f04f 0500 	mov.w	r5, #0
 80060de:	e00a      	b.n	80060f6 <__aeabi_l2d+0x16>

080060e0 <__aeabi_l2d>:
 80060e0:	ea50 0201 	orrs.w	r2, r0, r1
 80060e4:	bf08      	it	eq
 80060e6:	4770      	bxeq	lr
 80060e8:	b530      	push	{r4, r5, lr}
 80060ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80060ee:	d502      	bpl.n	80060f6 <__aeabi_l2d+0x16>
 80060f0:	4240      	negs	r0, r0
 80060f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80060f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80060fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80060fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006102:	f43f aed8 	beq.w	8005eb6 <__adddf3+0xe6>
 8006106:	f04f 0203 	mov.w	r2, #3
 800610a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800610e:	bf18      	it	ne
 8006110:	3203      	addne	r2, #3
 8006112:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006116:	bf18      	it	ne
 8006118:	3203      	addne	r2, #3
 800611a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800611e:	f1c2 0320 	rsb	r3, r2, #32
 8006122:	fa00 fc03 	lsl.w	ip, r0, r3
 8006126:	fa20 f002 	lsr.w	r0, r0, r2
 800612a:	fa01 fe03 	lsl.w	lr, r1, r3
 800612e:	ea40 000e 	orr.w	r0, r0, lr
 8006132:	fa21 f102 	lsr.w	r1, r1, r2
 8006136:	4414      	add	r4, r2
 8006138:	e6bd      	b.n	8005eb6 <__adddf3+0xe6>
 800613a:	bf00      	nop

0800613c <__gedf2>:
 800613c:	f04f 3cff 	mov.w	ip, #4294967295
 8006140:	e006      	b.n	8006150 <__cmpdf2+0x4>
 8006142:	bf00      	nop

08006144 <__ledf2>:
 8006144:	f04f 0c01 	mov.w	ip, #1
 8006148:	e002      	b.n	8006150 <__cmpdf2+0x4>
 800614a:	bf00      	nop

0800614c <__cmpdf2>:
 800614c:	f04f 0c01 	mov.w	ip, #1
 8006150:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006154:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006158:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800615c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006160:	bf18      	it	ne
 8006162:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006166:	d01b      	beq.n	80061a0 <__cmpdf2+0x54>
 8006168:	b001      	add	sp, #4
 800616a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800616e:	bf0c      	ite	eq
 8006170:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006174:	ea91 0f03 	teqne	r1, r3
 8006178:	bf02      	ittt	eq
 800617a:	ea90 0f02 	teqeq	r0, r2
 800617e:	2000      	moveq	r0, #0
 8006180:	4770      	bxeq	lr
 8006182:	f110 0f00 	cmn.w	r0, #0
 8006186:	ea91 0f03 	teq	r1, r3
 800618a:	bf58      	it	pl
 800618c:	4299      	cmppl	r1, r3
 800618e:	bf08      	it	eq
 8006190:	4290      	cmpeq	r0, r2
 8006192:	bf2c      	ite	cs
 8006194:	17d8      	asrcs	r0, r3, #31
 8006196:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800619a:	f040 0001 	orr.w	r0, r0, #1
 800619e:	4770      	bx	lr
 80061a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80061a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80061a8:	d102      	bne.n	80061b0 <__cmpdf2+0x64>
 80061aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80061ae:	d107      	bne.n	80061c0 <__cmpdf2+0x74>
 80061b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80061b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80061b8:	d1d6      	bne.n	8006168 <__cmpdf2+0x1c>
 80061ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80061be:	d0d3      	beq.n	8006168 <__cmpdf2+0x1c>
 80061c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop

080061c8 <__aeabi_cdrcmple>:
 80061c8:	4684      	mov	ip, r0
 80061ca:	4610      	mov	r0, r2
 80061cc:	4662      	mov	r2, ip
 80061ce:	468c      	mov	ip, r1
 80061d0:	4619      	mov	r1, r3
 80061d2:	4663      	mov	r3, ip
 80061d4:	e000      	b.n	80061d8 <__aeabi_cdcmpeq>
 80061d6:	bf00      	nop

080061d8 <__aeabi_cdcmpeq>:
 80061d8:	b501      	push	{r0, lr}
 80061da:	f7ff ffb7 	bl	800614c <__cmpdf2>
 80061de:	2800      	cmp	r0, #0
 80061e0:	bf48      	it	mi
 80061e2:	f110 0f00 	cmnmi.w	r0, #0
 80061e6:	bd01      	pop	{r0, pc}

080061e8 <__aeabi_dcmpeq>:
 80061e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80061ec:	f7ff fff4 	bl	80061d8 <__aeabi_cdcmpeq>
 80061f0:	bf0c      	ite	eq
 80061f2:	2001      	moveq	r0, #1
 80061f4:	2000      	movne	r0, #0
 80061f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80061fa:	bf00      	nop

080061fc <__aeabi_dcmplt>:
 80061fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006200:	f7ff ffea 	bl	80061d8 <__aeabi_cdcmpeq>
 8006204:	bf34      	ite	cc
 8006206:	2001      	movcc	r0, #1
 8006208:	2000      	movcs	r0, #0
 800620a:	f85d fb08 	ldr.w	pc, [sp], #8
 800620e:	bf00      	nop

08006210 <__aeabi_dcmple>:
 8006210:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006214:	f7ff ffe0 	bl	80061d8 <__aeabi_cdcmpeq>
 8006218:	bf94      	ite	ls
 800621a:	2001      	movls	r0, #1
 800621c:	2000      	movhi	r0, #0
 800621e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006222:	bf00      	nop

08006224 <__aeabi_dcmpge>:
 8006224:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006228:	f7ff ffce 	bl	80061c8 <__aeabi_cdrcmple>
 800622c:	bf94      	ite	ls
 800622e:	2001      	movls	r0, #1
 8006230:	2000      	movhi	r0, #0
 8006232:	f85d fb08 	ldr.w	pc, [sp], #8
 8006236:	bf00      	nop

08006238 <__aeabi_dcmpgt>:
 8006238:	f84d ed08 	str.w	lr, [sp, #-8]!
 800623c:	f7ff ffc4 	bl	80061c8 <__aeabi_cdrcmple>
 8006240:	bf34      	ite	cc
 8006242:	2001      	movcc	r0, #1
 8006244:	2000      	movcs	r0, #0
 8006246:	f85d fb08 	ldr.w	pc, [sp], #8
 800624a:	bf00      	nop

0800624c <__aeabi_d2iz>:
 800624c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006250:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006254:	d215      	bcs.n	8006282 <__aeabi_d2iz+0x36>
 8006256:	d511      	bpl.n	800627c <__aeabi_d2iz+0x30>
 8006258:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800625c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006260:	d912      	bls.n	8006288 <__aeabi_d2iz+0x3c>
 8006262:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006266:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800626a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800626e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006272:	fa23 f002 	lsr.w	r0, r3, r2
 8006276:	bf18      	it	ne
 8006278:	4240      	negne	r0, r0
 800627a:	4770      	bx	lr
 800627c:	f04f 0000 	mov.w	r0, #0
 8006280:	4770      	bx	lr
 8006282:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006286:	d105      	bne.n	8006294 <__aeabi_d2iz+0x48>
 8006288:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800628c:	bf08      	it	eq
 800628e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006292:	4770      	bx	lr
 8006294:	f04f 0000 	mov.w	r0, #0
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop

0800629c <__aeabi_frsub>:
 800629c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80062a0:	e002      	b.n	80062a8 <__addsf3>
 80062a2:	bf00      	nop

080062a4 <__aeabi_fsub>:
 80062a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080062a8 <__addsf3>:
 80062a8:	0042      	lsls	r2, r0, #1
 80062aa:	bf1f      	itttt	ne
 80062ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80062b0:	ea92 0f03 	teqne	r2, r3
 80062b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80062b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80062bc:	d06a      	beq.n	8006394 <__addsf3+0xec>
 80062be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80062c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80062c6:	bfc1      	itttt	gt
 80062c8:	18d2      	addgt	r2, r2, r3
 80062ca:	4041      	eorgt	r1, r0
 80062cc:	4048      	eorgt	r0, r1
 80062ce:	4041      	eorgt	r1, r0
 80062d0:	bfb8      	it	lt
 80062d2:	425b      	neglt	r3, r3
 80062d4:	2b19      	cmp	r3, #25
 80062d6:	bf88      	it	hi
 80062d8:	4770      	bxhi	lr
 80062da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80062de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80062e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80062e6:	bf18      	it	ne
 80062e8:	4240      	negne	r0, r0
 80062ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80062ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80062f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80062f6:	bf18      	it	ne
 80062f8:	4249      	negne	r1, r1
 80062fa:	ea92 0f03 	teq	r2, r3
 80062fe:	d03f      	beq.n	8006380 <__addsf3+0xd8>
 8006300:	f1a2 0201 	sub.w	r2, r2, #1
 8006304:	fa41 fc03 	asr.w	ip, r1, r3
 8006308:	eb10 000c 	adds.w	r0, r0, ip
 800630c:	f1c3 0320 	rsb	r3, r3, #32
 8006310:	fa01 f103 	lsl.w	r1, r1, r3
 8006314:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006318:	d502      	bpl.n	8006320 <__addsf3+0x78>
 800631a:	4249      	negs	r1, r1
 800631c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8006320:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006324:	d313      	bcc.n	800634e <__addsf3+0xa6>
 8006326:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800632a:	d306      	bcc.n	800633a <__addsf3+0x92>
 800632c:	0840      	lsrs	r0, r0, #1
 800632e:	ea4f 0131 	mov.w	r1, r1, rrx
 8006332:	f102 0201 	add.w	r2, r2, #1
 8006336:	2afe      	cmp	r2, #254	; 0xfe
 8006338:	d251      	bcs.n	80063de <__addsf3+0x136>
 800633a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800633e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8006342:	bf08      	it	eq
 8006344:	f020 0001 	biceq.w	r0, r0, #1
 8006348:	ea40 0003 	orr.w	r0, r0, r3
 800634c:	4770      	bx	lr
 800634e:	0049      	lsls	r1, r1, #1
 8006350:	eb40 0000 	adc.w	r0, r0, r0
 8006354:	3a01      	subs	r2, #1
 8006356:	bf28      	it	cs
 8006358:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800635c:	d2ed      	bcs.n	800633a <__addsf3+0x92>
 800635e:	fab0 fc80 	clz	ip, r0
 8006362:	f1ac 0c08 	sub.w	ip, ip, #8
 8006366:	ebb2 020c 	subs.w	r2, r2, ip
 800636a:	fa00 f00c 	lsl.w	r0, r0, ip
 800636e:	bfaa      	itet	ge
 8006370:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8006374:	4252      	neglt	r2, r2
 8006376:	4318      	orrge	r0, r3
 8006378:	bfbc      	itt	lt
 800637a:	40d0      	lsrlt	r0, r2
 800637c:	4318      	orrlt	r0, r3
 800637e:	4770      	bx	lr
 8006380:	f092 0f00 	teq	r2, #0
 8006384:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8006388:	bf06      	itte	eq
 800638a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800638e:	3201      	addeq	r2, #1
 8006390:	3b01      	subne	r3, #1
 8006392:	e7b5      	b.n	8006300 <__addsf3+0x58>
 8006394:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8006398:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800639c:	bf18      	it	ne
 800639e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80063a2:	d021      	beq.n	80063e8 <__addsf3+0x140>
 80063a4:	ea92 0f03 	teq	r2, r3
 80063a8:	d004      	beq.n	80063b4 <__addsf3+0x10c>
 80063aa:	f092 0f00 	teq	r2, #0
 80063ae:	bf08      	it	eq
 80063b0:	4608      	moveq	r0, r1
 80063b2:	4770      	bx	lr
 80063b4:	ea90 0f01 	teq	r0, r1
 80063b8:	bf1c      	itt	ne
 80063ba:	2000      	movne	r0, #0
 80063bc:	4770      	bxne	lr
 80063be:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80063c2:	d104      	bne.n	80063ce <__addsf3+0x126>
 80063c4:	0040      	lsls	r0, r0, #1
 80063c6:	bf28      	it	cs
 80063c8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80063cc:	4770      	bx	lr
 80063ce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80063d2:	bf3c      	itt	cc
 80063d4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80063d8:	4770      	bxcc	lr
 80063da:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80063de:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80063e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80063e6:	4770      	bx	lr
 80063e8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80063ec:	bf16      	itet	ne
 80063ee:	4608      	movne	r0, r1
 80063f0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80063f4:	4601      	movne	r1, r0
 80063f6:	0242      	lsls	r2, r0, #9
 80063f8:	bf06      	itte	eq
 80063fa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80063fe:	ea90 0f01 	teqeq	r0, r1
 8006402:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8006406:	4770      	bx	lr

08006408 <__aeabi_ui2f>:
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	e004      	b.n	8006418 <__aeabi_i2f+0x8>
 800640e:	bf00      	nop

08006410 <__aeabi_i2f>:
 8006410:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8006414:	bf48      	it	mi
 8006416:	4240      	negmi	r0, r0
 8006418:	ea5f 0c00 	movs.w	ip, r0
 800641c:	bf08      	it	eq
 800641e:	4770      	bxeq	lr
 8006420:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8006424:	4601      	mov	r1, r0
 8006426:	f04f 0000 	mov.w	r0, #0
 800642a:	e01c      	b.n	8006466 <__aeabi_l2f+0x2a>

0800642c <__aeabi_ul2f>:
 800642c:	ea50 0201 	orrs.w	r2, r0, r1
 8006430:	bf08      	it	eq
 8006432:	4770      	bxeq	lr
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	e00a      	b.n	8006450 <__aeabi_l2f+0x14>
 800643a:	bf00      	nop

0800643c <__aeabi_l2f>:
 800643c:	ea50 0201 	orrs.w	r2, r0, r1
 8006440:	bf08      	it	eq
 8006442:	4770      	bxeq	lr
 8006444:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8006448:	d502      	bpl.n	8006450 <__aeabi_l2f+0x14>
 800644a:	4240      	negs	r0, r0
 800644c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006450:	ea5f 0c01 	movs.w	ip, r1
 8006454:	bf02      	ittt	eq
 8006456:	4684      	moveq	ip, r0
 8006458:	4601      	moveq	r1, r0
 800645a:	2000      	moveq	r0, #0
 800645c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8006460:	bf08      	it	eq
 8006462:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8006466:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800646a:	fabc f28c 	clz	r2, ip
 800646e:	3a08      	subs	r2, #8
 8006470:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8006474:	db10      	blt.n	8006498 <__aeabi_l2f+0x5c>
 8006476:	fa01 fc02 	lsl.w	ip, r1, r2
 800647a:	4463      	add	r3, ip
 800647c:	fa00 fc02 	lsl.w	ip, r0, r2
 8006480:	f1c2 0220 	rsb	r2, r2, #32
 8006484:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006488:	fa20 f202 	lsr.w	r2, r0, r2
 800648c:	eb43 0002 	adc.w	r0, r3, r2
 8006490:	bf08      	it	eq
 8006492:	f020 0001 	biceq.w	r0, r0, #1
 8006496:	4770      	bx	lr
 8006498:	f102 0220 	add.w	r2, r2, #32
 800649c:	fa01 fc02 	lsl.w	ip, r1, r2
 80064a0:	f1c2 0220 	rsb	r2, r2, #32
 80064a4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80064a8:	fa21 f202 	lsr.w	r2, r1, r2
 80064ac:	eb43 0002 	adc.w	r0, r3, r2
 80064b0:	bf08      	it	eq
 80064b2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80064b6:	4770      	bx	lr

080064b8 <__gesf2>:
 80064b8:	f04f 3cff 	mov.w	ip, #4294967295
 80064bc:	e006      	b.n	80064cc <__cmpsf2+0x4>
 80064be:	bf00      	nop

080064c0 <__lesf2>:
 80064c0:	f04f 0c01 	mov.w	ip, #1
 80064c4:	e002      	b.n	80064cc <__cmpsf2+0x4>
 80064c6:	bf00      	nop

080064c8 <__cmpsf2>:
 80064c8:	f04f 0c01 	mov.w	ip, #1
 80064cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80064d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80064d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80064d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80064dc:	bf18      	it	ne
 80064de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80064e2:	d011      	beq.n	8006508 <__cmpsf2+0x40>
 80064e4:	b001      	add	sp, #4
 80064e6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80064ea:	bf18      	it	ne
 80064ec:	ea90 0f01 	teqne	r0, r1
 80064f0:	bf58      	it	pl
 80064f2:	ebb2 0003 	subspl.w	r0, r2, r3
 80064f6:	bf88      	it	hi
 80064f8:	17c8      	asrhi	r0, r1, #31
 80064fa:	bf38      	it	cc
 80064fc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8006500:	bf18      	it	ne
 8006502:	f040 0001 	orrne.w	r0, r0, #1
 8006506:	4770      	bx	lr
 8006508:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800650c:	d102      	bne.n	8006514 <__cmpsf2+0x4c>
 800650e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8006512:	d105      	bne.n	8006520 <__cmpsf2+0x58>
 8006514:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8006518:	d1e4      	bne.n	80064e4 <__cmpsf2+0x1c>
 800651a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800651e:	d0e1      	beq.n	80064e4 <__cmpsf2+0x1c>
 8006520:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop

08006528 <__aeabi_cfrcmple>:
 8006528:	4684      	mov	ip, r0
 800652a:	4608      	mov	r0, r1
 800652c:	4661      	mov	r1, ip
 800652e:	e7ff      	b.n	8006530 <__aeabi_cfcmpeq>

08006530 <__aeabi_cfcmpeq>:
 8006530:	b50f      	push	{r0, r1, r2, r3, lr}
 8006532:	f7ff ffc9 	bl	80064c8 <__cmpsf2>
 8006536:	2800      	cmp	r0, #0
 8006538:	bf48      	it	mi
 800653a:	f110 0f00 	cmnmi.w	r0, #0
 800653e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08006540 <__aeabi_fcmpeq>:
 8006540:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006544:	f7ff fff4 	bl	8006530 <__aeabi_cfcmpeq>
 8006548:	bf0c      	ite	eq
 800654a:	2001      	moveq	r0, #1
 800654c:	2000      	movne	r0, #0
 800654e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006552:	bf00      	nop

08006554 <__aeabi_fcmplt>:
 8006554:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006558:	f7ff ffea 	bl	8006530 <__aeabi_cfcmpeq>
 800655c:	bf34      	ite	cc
 800655e:	2001      	movcc	r0, #1
 8006560:	2000      	movcs	r0, #0
 8006562:	f85d fb08 	ldr.w	pc, [sp], #8
 8006566:	bf00      	nop

08006568 <__aeabi_fcmple>:
 8006568:	f84d ed08 	str.w	lr, [sp, #-8]!
 800656c:	f7ff ffe0 	bl	8006530 <__aeabi_cfcmpeq>
 8006570:	bf94      	ite	ls
 8006572:	2001      	movls	r0, #1
 8006574:	2000      	movhi	r0, #0
 8006576:	f85d fb08 	ldr.w	pc, [sp], #8
 800657a:	bf00      	nop

0800657c <__aeabi_fcmpge>:
 800657c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006580:	f7ff ffd2 	bl	8006528 <__aeabi_cfrcmple>
 8006584:	bf94      	ite	ls
 8006586:	2001      	movls	r0, #1
 8006588:	2000      	movhi	r0, #0
 800658a:	f85d fb08 	ldr.w	pc, [sp], #8
 800658e:	bf00      	nop

08006590 <__aeabi_fcmpgt>:
 8006590:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006594:	f7ff ffc8 	bl	8006528 <__aeabi_cfrcmple>
 8006598:	bf34      	ite	cc
 800659a:	2001      	movcc	r0, #1
 800659c:	2000      	movcs	r0, #0
 800659e:	f85d fb08 	ldr.w	pc, [sp], #8
 80065a2:	bf00      	nop

080065a4 <__aeabi_uldivmod>:
 80065a4:	b953      	cbnz	r3, 80065bc <__aeabi_uldivmod+0x18>
 80065a6:	b94a      	cbnz	r2, 80065bc <__aeabi_uldivmod+0x18>
 80065a8:	2900      	cmp	r1, #0
 80065aa:	bf08      	it	eq
 80065ac:	2800      	cmpeq	r0, #0
 80065ae:	bf1c      	itt	ne
 80065b0:	f04f 31ff 	movne.w	r1, #4294967295
 80065b4:	f04f 30ff 	movne.w	r0, #4294967295
 80065b8:	f7ff bc02 	b.w	8005dc0 <__aeabi_idiv0>
 80065bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80065c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80065c4:	f000 f806 	bl	80065d4 <__udivmoddi4>
 80065c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80065cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065d0:	b004      	add	sp, #16
 80065d2:	4770      	bx	lr

080065d4 <__udivmoddi4>:
 80065d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d8:	9e08      	ldr	r6, [sp, #32]
 80065da:	460d      	mov	r5, r1
 80065dc:	4604      	mov	r4, r0
 80065de:	468e      	mov	lr, r1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f040 8082 	bne.w	80066ea <__udivmoddi4+0x116>
 80065e6:	428a      	cmp	r2, r1
 80065e8:	4617      	mov	r7, r2
 80065ea:	d946      	bls.n	800667a <__udivmoddi4+0xa6>
 80065ec:	fab2 f282 	clz	r2, r2
 80065f0:	b14a      	cbz	r2, 8006606 <__udivmoddi4+0x32>
 80065f2:	f1c2 0120 	rsb	r1, r2, #32
 80065f6:	fa05 f302 	lsl.w	r3, r5, r2
 80065fa:	fa20 f101 	lsr.w	r1, r0, r1
 80065fe:	4097      	lsls	r7, r2
 8006600:	ea41 0e03 	orr.w	lr, r1, r3
 8006604:	4094      	lsls	r4, r2
 8006606:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800660a:	0c23      	lsrs	r3, r4, #16
 800660c:	fbbe fcf8 	udiv	ip, lr, r8
 8006610:	b2b9      	uxth	r1, r7
 8006612:	fb08 ee1c 	mls	lr, r8, ip, lr
 8006616:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800661a:	fb0c f001 	mul.w	r0, ip, r1
 800661e:	4298      	cmp	r0, r3
 8006620:	d90a      	bls.n	8006638 <__udivmoddi4+0x64>
 8006622:	18fb      	adds	r3, r7, r3
 8006624:	f10c 35ff 	add.w	r5, ip, #4294967295
 8006628:	f080 8116 	bcs.w	8006858 <__udivmoddi4+0x284>
 800662c:	4298      	cmp	r0, r3
 800662e:	f240 8113 	bls.w	8006858 <__udivmoddi4+0x284>
 8006632:	f1ac 0c02 	sub.w	ip, ip, #2
 8006636:	443b      	add	r3, r7
 8006638:	1a1b      	subs	r3, r3, r0
 800663a:	b2a4      	uxth	r4, r4
 800663c:	fbb3 f0f8 	udiv	r0, r3, r8
 8006640:	fb08 3310 	mls	r3, r8, r0, r3
 8006644:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006648:	fb00 f101 	mul.w	r1, r0, r1
 800664c:	42a1      	cmp	r1, r4
 800664e:	d909      	bls.n	8006664 <__udivmoddi4+0x90>
 8006650:	193c      	adds	r4, r7, r4
 8006652:	f100 33ff 	add.w	r3, r0, #4294967295
 8006656:	f080 8101 	bcs.w	800685c <__udivmoddi4+0x288>
 800665a:	42a1      	cmp	r1, r4
 800665c:	f240 80fe 	bls.w	800685c <__udivmoddi4+0x288>
 8006660:	3802      	subs	r0, #2
 8006662:	443c      	add	r4, r7
 8006664:	1a64      	subs	r4, r4, r1
 8006666:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800666a:	2100      	movs	r1, #0
 800666c:	b11e      	cbz	r6, 8006676 <__udivmoddi4+0xa2>
 800666e:	40d4      	lsrs	r4, r2
 8006670:	2300      	movs	r3, #0
 8006672:	e9c6 4300 	strd	r4, r3, [r6]
 8006676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667a:	b902      	cbnz	r2, 800667e <__udivmoddi4+0xaa>
 800667c:	deff      	udf	#255	; 0xff
 800667e:	fab2 f282 	clz	r2, r2
 8006682:	2a00      	cmp	r2, #0
 8006684:	d14f      	bne.n	8006726 <__udivmoddi4+0x152>
 8006686:	1bcb      	subs	r3, r1, r7
 8006688:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800668c:	fa1f f887 	uxth.w	r8, r7
 8006690:	2101      	movs	r1, #1
 8006692:	fbb3 fcfe 	udiv	ip, r3, lr
 8006696:	0c25      	lsrs	r5, r4, #16
 8006698:	fb0e 331c 	mls	r3, lr, ip, r3
 800669c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80066a0:	fb08 f30c 	mul.w	r3, r8, ip
 80066a4:	42ab      	cmp	r3, r5
 80066a6:	d907      	bls.n	80066b8 <__udivmoddi4+0xe4>
 80066a8:	197d      	adds	r5, r7, r5
 80066aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80066ae:	d202      	bcs.n	80066b6 <__udivmoddi4+0xe2>
 80066b0:	42ab      	cmp	r3, r5
 80066b2:	f200 80e7 	bhi.w	8006884 <__udivmoddi4+0x2b0>
 80066b6:	4684      	mov	ip, r0
 80066b8:	1aed      	subs	r5, r5, r3
 80066ba:	b2a3      	uxth	r3, r4
 80066bc:	fbb5 f0fe 	udiv	r0, r5, lr
 80066c0:	fb0e 5510 	mls	r5, lr, r0, r5
 80066c4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80066c8:	fb08 f800 	mul.w	r8, r8, r0
 80066cc:	45a0      	cmp	r8, r4
 80066ce:	d907      	bls.n	80066e0 <__udivmoddi4+0x10c>
 80066d0:	193c      	adds	r4, r7, r4
 80066d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80066d6:	d202      	bcs.n	80066de <__udivmoddi4+0x10a>
 80066d8:	45a0      	cmp	r8, r4
 80066da:	f200 80d7 	bhi.w	800688c <__udivmoddi4+0x2b8>
 80066de:	4618      	mov	r0, r3
 80066e0:	eba4 0408 	sub.w	r4, r4, r8
 80066e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80066e8:	e7c0      	b.n	800666c <__udivmoddi4+0x98>
 80066ea:	428b      	cmp	r3, r1
 80066ec:	d908      	bls.n	8006700 <__udivmoddi4+0x12c>
 80066ee:	2e00      	cmp	r6, #0
 80066f0:	f000 80af 	beq.w	8006852 <__udivmoddi4+0x27e>
 80066f4:	2100      	movs	r1, #0
 80066f6:	e9c6 0500 	strd	r0, r5, [r6]
 80066fa:	4608      	mov	r0, r1
 80066fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006700:	fab3 f183 	clz	r1, r3
 8006704:	2900      	cmp	r1, #0
 8006706:	d14b      	bne.n	80067a0 <__udivmoddi4+0x1cc>
 8006708:	42ab      	cmp	r3, r5
 800670a:	d302      	bcc.n	8006712 <__udivmoddi4+0x13e>
 800670c:	4282      	cmp	r2, r0
 800670e:	f200 80b7 	bhi.w	8006880 <__udivmoddi4+0x2ac>
 8006712:	1a84      	subs	r4, r0, r2
 8006714:	eb65 0303 	sbc.w	r3, r5, r3
 8006718:	2001      	movs	r0, #1
 800671a:	469e      	mov	lr, r3
 800671c:	2e00      	cmp	r6, #0
 800671e:	d0aa      	beq.n	8006676 <__udivmoddi4+0xa2>
 8006720:	e9c6 4e00 	strd	r4, lr, [r6]
 8006724:	e7a7      	b.n	8006676 <__udivmoddi4+0xa2>
 8006726:	f1c2 0c20 	rsb	ip, r2, #32
 800672a:	fa01 f302 	lsl.w	r3, r1, r2
 800672e:	4097      	lsls	r7, r2
 8006730:	fa20 f00c 	lsr.w	r0, r0, ip
 8006734:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8006738:	fa21 fc0c 	lsr.w	ip, r1, ip
 800673c:	4318      	orrs	r0, r3
 800673e:	fbbc f1fe 	udiv	r1, ip, lr
 8006742:	0c05      	lsrs	r5, r0, #16
 8006744:	fb0e cc11 	mls	ip, lr, r1, ip
 8006748:	fa1f f887 	uxth.w	r8, r7
 800674c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8006750:	fb01 f308 	mul.w	r3, r1, r8
 8006754:	42ab      	cmp	r3, r5
 8006756:	fa04 f402 	lsl.w	r4, r4, r2
 800675a:	d909      	bls.n	8006770 <__udivmoddi4+0x19c>
 800675c:	197d      	adds	r5, r7, r5
 800675e:	f101 3cff 	add.w	ip, r1, #4294967295
 8006762:	f080 808b 	bcs.w	800687c <__udivmoddi4+0x2a8>
 8006766:	42ab      	cmp	r3, r5
 8006768:	f240 8088 	bls.w	800687c <__udivmoddi4+0x2a8>
 800676c:	3902      	subs	r1, #2
 800676e:	443d      	add	r5, r7
 8006770:	1aeb      	subs	r3, r5, r3
 8006772:	b285      	uxth	r5, r0
 8006774:	fbb3 f0fe 	udiv	r0, r3, lr
 8006778:	fb0e 3310 	mls	r3, lr, r0, r3
 800677c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8006780:	fb00 f308 	mul.w	r3, r0, r8
 8006784:	42ab      	cmp	r3, r5
 8006786:	d907      	bls.n	8006798 <__udivmoddi4+0x1c4>
 8006788:	197d      	adds	r5, r7, r5
 800678a:	f100 3cff 	add.w	ip, r0, #4294967295
 800678e:	d271      	bcs.n	8006874 <__udivmoddi4+0x2a0>
 8006790:	42ab      	cmp	r3, r5
 8006792:	d96f      	bls.n	8006874 <__udivmoddi4+0x2a0>
 8006794:	3802      	subs	r0, #2
 8006796:	443d      	add	r5, r7
 8006798:	1aeb      	subs	r3, r5, r3
 800679a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800679e:	e778      	b.n	8006692 <__udivmoddi4+0xbe>
 80067a0:	f1c1 0c20 	rsb	ip, r1, #32
 80067a4:	408b      	lsls	r3, r1
 80067a6:	fa22 f70c 	lsr.w	r7, r2, ip
 80067aa:	431f      	orrs	r7, r3
 80067ac:	fa20 f40c 	lsr.w	r4, r0, ip
 80067b0:	fa05 f301 	lsl.w	r3, r5, r1
 80067b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80067b8:	fa25 f50c 	lsr.w	r5, r5, ip
 80067bc:	431c      	orrs	r4, r3
 80067be:	0c23      	lsrs	r3, r4, #16
 80067c0:	fbb5 f9fe 	udiv	r9, r5, lr
 80067c4:	fa1f f887 	uxth.w	r8, r7
 80067c8:	fb0e 5519 	mls	r5, lr, r9, r5
 80067cc:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80067d0:	fb09 fa08 	mul.w	sl, r9, r8
 80067d4:	45aa      	cmp	sl, r5
 80067d6:	fa02 f201 	lsl.w	r2, r2, r1
 80067da:	fa00 f301 	lsl.w	r3, r0, r1
 80067de:	d908      	bls.n	80067f2 <__udivmoddi4+0x21e>
 80067e0:	197d      	adds	r5, r7, r5
 80067e2:	f109 30ff 	add.w	r0, r9, #4294967295
 80067e6:	d247      	bcs.n	8006878 <__udivmoddi4+0x2a4>
 80067e8:	45aa      	cmp	sl, r5
 80067ea:	d945      	bls.n	8006878 <__udivmoddi4+0x2a4>
 80067ec:	f1a9 0902 	sub.w	r9, r9, #2
 80067f0:	443d      	add	r5, r7
 80067f2:	eba5 050a 	sub.w	r5, r5, sl
 80067f6:	b2a4      	uxth	r4, r4
 80067f8:	fbb5 f0fe 	udiv	r0, r5, lr
 80067fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8006800:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006804:	fb00 f808 	mul.w	r8, r0, r8
 8006808:	45a0      	cmp	r8, r4
 800680a:	d907      	bls.n	800681c <__udivmoddi4+0x248>
 800680c:	193c      	adds	r4, r7, r4
 800680e:	f100 35ff 	add.w	r5, r0, #4294967295
 8006812:	d22d      	bcs.n	8006870 <__udivmoddi4+0x29c>
 8006814:	45a0      	cmp	r8, r4
 8006816:	d92b      	bls.n	8006870 <__udivmoddi4+0x29c>
 8006818:	3802      	subs	r0, #2
 800681a:	443c      	add	r4, r7
 800681c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8006820:	eba4 0408 	sub.w	r4, r4, r8
 8006824:	fba0 8902 	umull	r8, r9, r0, r2
 8006828:	454c      	cmp	r4, r9
 800682a:	46c6      	mov	lr, r8
 800682c:	464d      	mov	r5, r9
 800682e:	d319      	bcc.n	8006864 <__udivmoddi4+0x290>
 8006830:	d016      	beq.n	8006860 <__udivmoddi4+0x28c>
 8006832:	b15e      	cbz	r6, 800684c <__udivmoddi4+0x278>
 8006834:	ebb3 020e 	subs.w	r2, r3, lr
 8006838:	eb64 0405 	sbc.w	r4, r4, r5
 800683c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8006840:	40ca      	lsrs	r2, r1
 8006842:	ea4c 0202 	orr.w	r2, ip, r2
 8006846:	40cc      	lsrs	r4, r1
 8006848:	e9c6 2400 	strd	r2, r4, [r6]
 800684c:	2100      	movs	r1, #0
 800684e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006852:	4631      	mov	r1, r6
 8006854:	4630      	mov	r0, r6
 8006856:	e70e      	b.n	8006676 <__udivmoddi4+0xa2>
 8006858:	46ac      	mov	ip, r5
 800685a:	e6ed      	b.n	8006638 <__udivmoddi4+0x64>
 800685c:	4618      	mov	r0, r3
 800685e:	e701      	b.n	8006664 <__udivmoddi4+0x90>
 8006860:	4543      	cmp	r3, r8
 8006862:	d2e6      	bcs.n	8006832 <__udivmoddi4+0x25e>
 8006864:	ebb8 0e02 	subs.w	lr, r8, r2
 8006868:	eb69 0507 	sbc.w	r5, r9, r7
 800686c:	3801      	subs	r0, #1
 800686e:	e7e0      	b.n	8006832 <__udivmoddi4+0x25e>
 8006870:	4628      	mov	r0, r5
 8006872:	e7d3      	b.n	800681c <__udivmoddi4+0x248>
 8006874:	4660      	mov	r0, ip
 8006876:	e78f      	b.n	8006798 <__udivmoddi4+0x1c4>
 8006878:	4681      	mov	r9, r0
 800687a:	e7ba      	b.n	80067f2 <__udivmoddi4+0x21e>
 800687c:	4661      	mov	r1, ip
 800687e:	e777      	b.n	8006770 <__udivmoddi4+0x19c>
 8006880:	4608      	mov	r0, r1
 8006882:	e74b      	b.n	800671c <__udivmoddi4+0x148>
 8006884:	f1ac 0c02 	sub.w	ip, ip, #2
 8006888:	443d      	add	r5, r7
 800688a:	e715      	b.n	80066b8 <__udivmoddi4+0xe4>
 800688c:	3802      	subs	r0, #2
 800688e:	443c      	add	r4, r7
 8006890:	e726      	b.n	80066e0 <__udivmoddi4+0x10c>
 8006892:	bf00      	nop

08006894 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006894:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8006896:	4813      	ldr	r0, [pc, #76]	; (80068e4 <MX_ADC_Init+0x50>)
 8006898:	4b13      	ldr	r3, [pc, #76]	; (80068e8 <MX_ADC_Init+0x54>)
 800689a:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800689c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068a0:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80068a2:	2300      	movs	r3, #0
 80068a4:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80068a6:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80068a8:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80068aa:	2204      	movs	r2, #4
 80068ac:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80068ae:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80068b0:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80068b2:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 80068b4:	2201      	movs	r2, #1
 80068b6:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80068b8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80068bc:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80068be:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80068c0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80068c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068c8:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80068ca:	2207      	movs	r2, #7
 80068cc:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80068ce:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80068d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80068d4:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80068d6:	f007 fde7 	bl	800e4a8 <HAL_ADC_Init>
 80068da:	b900      	cbnz	r0, 80068de <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80068dc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80068de:	f000 f995 	bl	8006c0c <Error_Handler>
}
 80068e2:	e7fb      	b.n	80068dc <MX_ADC_Init+0x48>
 80068e4:	20002688 	.word	0x20002688
 80068e8:	40012400 	.word	0x40012400

080068ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 80068ec:	6802      	ldr	r2, [r0, #0]
 80068ee:	4b09      	ldr	r3, [pc, #36]	; (8006914 <HAL_ADC_MspInit+0x28>)
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d000      	beq.n	80068f6 <HAL_ADC_MspInit+0xa>
 80068f4:	4770      	bx	lr
{
 80068f6:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80068f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80068fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006902:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800690a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800690c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800690e:	b002      	add	sp, #8
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40012400 	.word	0x40012400

08006918 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8006918:	6802      	ldr	r2, [r0, #0]
 800691a:	4b05      	ldr	r3, [pc, #20]	; (8006930 <HAL_ADC_MspDeInit+0x18>)
 800691c:	429a      	cmp	r2, r3
 800691e:	d000      	beq.n	8006922 <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8006920:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8006922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006926:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8006928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800692c:	6613      	str	r3, [r2, #96]	; 0x60
 800692e:	e7f7      	b.n	8006920 <HAL_ADC_MspDeInit+0x8>
 8006930:	40012400 	.word	0x40012400

08006934 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8006934:	b530      	push	{r4, r5, lr}
 8006936:	b085      	sub	sp, #20
 8006938:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 800693a:	2300      	movs	r3, #0
 800693c:	9301      	str	r3, [sp, #4]
 800693e:	9302      	str	r3, [sp, #8]
 8006940:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8006942:	f7ff ffa7 	bl	8006894 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8006946:	4816      	ldr	r0, [pc, #88]	; (80069a0 <ADC_ReadChannels+0x6c>)
 8006948:	f008 f9e0 	bl	800ed0c <HAL_ADCEx_Calibration_Start>
 800694c:	b9f8      	cbnz	r0, 800698e <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800694e:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006950:	2300      	movs	r3, #0
 8006952:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8006954:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006956:	a901      	add	r1, sp, #4
 8006958:	4811      	ldr	r0, [pc, #68]	; (80069a0 <ADC_ReadChannels+0x6c>)
 800695a:	f007 ff3d 	bl	800e7d8 <HAL_ADC_ConfigChannel>
 800695e:	b9c8      	cbnz	r0, 8006994 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8006960:	480f      	ldr	r0, [pc, #60]	; (80069a0 <ADC_ReadChannels+0x6c>)
 8006962:	f008 f8e3 	bl	800eb2c <HAL_ADC_Start>
 8006966:	b9c0      	cbnz	r0, 800699a <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8006968:	4c0d      	ldr	r4, [pc, #52]	; (80069a0 <ADC_ReadChannels+0x6c>)
 800696a:	f04f 31ff 	mov.w	r1, #4294967295
 800696e:	4620      	mov	r0, r4
 8006970:	f007 fed0 	bl	800e714 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8006974:	4620      	mov	r0, r4
 8006976:	f008 f9a9 	bl	800eccc <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800697a:	4620      	mov	r0, r4
 800697c:	f007 ff29 	bl	800e7d2 <HAL_ADC_GetValue>
 8006980:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8006982:	4620      	mov	r0, r4
 8006984:	f008 f94e 	bl	800ec24 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8006988:	4628      	mov	r0, r5
 800698a:	b005      	add	sp, #20
 800698c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800698e:	f000 f93d 	bl	8006c0c <Error_Handler>
 8006992:	e7dc      	b.n	800694e <ADC_ReadChannels+0x1a>
    Error_Handler();
 8006994:	f000 f93a 	bl	8006c0c <Error_Handler>
 8006998:	e7e2      	b.n	8006960 <ADC_ReadChannels+0x2c>
    Error_Handler();
 800699a:	f000 f937 	bl	8006c0c <Error_Handler>
 800699e:	e7e3      	b.n	8006968 <ADC_ReadChannels+0x34>
 80069a0:	20002688 	.word	0x20002688

080069a4 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 80069a4:	4b01      	ldr	r3, [pc, #4]	; (80069ac <SYS_InitMeasurement+0x8>)
 80069a6:	4a02      	ldr	r2, [pc, #8]	; (80069b0 <SYS_InitMeasurement+0xc>)
 80069a8:	601a      	str	r2, [r3, #0]
}
 80069aa:	4770      	bx	lr
 80069ac:	20002688 	.word	0x20002688
 80069b0:	40012400 	.word	0x40012400

080069b4 <SYS_GetBatteryLevel>:
{
 80069b4:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80069b6:	480d      	ldr	r0, [pc, #52]	; (80069ec <SYS_GetBatteryLevel+0x38>)
 80069b8:	f7ff ffbc 	bl	8006934 <ADC_ReadChannels>
  if (measuredLevel == 0)
 80069bc:	b198      	cbz	r0, 80069e6 <SYS_GetBatteryLevel+0x32>
 80069be:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80069c0:	4a0b      	ldr	r2, [pc, #44]	; (80069f0 <SYS_GetBatteryLevel+0x3c>)
 80069c2:	8812      	ldrh	r2, [r2, #0]
 80069c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80069c8:	428a      	cmp	r2, r1
 80069ca:	d007      	beq.n	80069dc <SYS_GetBatteryLevel+0x28>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80069cc:	f640 40e4 	movw	r0, #3300	; 0xce4
 80069d0:	fb00 f002 	mul.w	r0, r0, r2
 80069d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80069d8:	b280      	uxth	r0, r0
 80069da:	e005      	b.n	80069e8 <SYS_GetBatteryLevel+0x34>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80069dc:	4805      	ldr	r0, [pc, #20]	; (80069f4 <SYS_GetBatteryLevel+0x40>)
 80069de:	fbb0 f0f3 	udiv	r0, r0, r3
 80069e2:	b280      	uxth	r0, r0
 80069e4:	e000      	b.n	80069e8 <SYS_GetBatteryLevel+0x34>
    batteryLevelmV = 0;
 80069e6:	2000      	movs	r0, #0
}
 80069e8:	bd08      	pop	{r3, pc}
 80069ea:	bf00      	nop
 80069ec:	b4002000 	.word	0xb4002000
 80069f0:	1fff75aa 	.word	0x1fff75aa
 80069f4:	004c08d8 	.word	0x004c08d8

080069f8 <SYS_GetTemperatureLevel>:
{
 80069f8:	b530      	push	{r4, r5, lr}
 80069fa:	b083      	sub	sp, #12
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80069fc:	f7ff ffda 	bl	80069b4 <SYS_GetBatteryLevel>
 8006a00:	4605      	mov	r5, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8006a02:	481f      	ldr	r0, [pc, #124]	; (8006a80 <SYS_GetTemperatureLevel+0x88>)
 8006a04:	f7ff ff96 	bl	8006934 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8006a08:	4b1e      	ldr	r3, [pc, #120]	; (8006a84 <SYS_GetTemperatureLevel+0x8c>)
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	4a1e      	ldr	r2, [pc, #120]	; (8006a88 <SYS_GetTemperatureLevel+0x90>)
 8006a0e:	8812      	ldrh	r2, [r2, #0]
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d01a      	beq.n	8006a4a <SYS_GetTemperatureLevel+0x52>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8006a14:	fb00 f005 	mul.w	r0, r0, r5
 8006a18:	0880      	lsrs	r0, r0, #2
 8006a1a:	4c1c      	ldr	r4, [pc, #112]	; (8006a8c <SYS_GetTemperatureLevel+0x94>)
 8006a1c:	fba4 1400 	umull	r1, r4, r4, r0
 8006a20:	ebc2 1054 	rsb	r0, r2, r4, lsr #5
 8006a24:	2464      	movs	r4, #100	; 0x64
 8006a26:	fb04 f400 	mul.w	r4, r4, r0
 8006a2a:	1a9b      	subs	r3, r3, r2
 8006a2c:	fb94 f4f3 	sdiv	r4, r4, r3
 8006a30:	341e      	adds	r4, #30
 8006a32:	b224      	sxth	r4, r4
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8006a34:	9400      	str	r4, [sp, #0]
 8006a36:	4b16      	ldr	r3, [pc, #88]	; (8006a90 <SYS_GetTemperatureLevel+0x98>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	f01b fbed 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  temperatureDegreeC <<= 8;
 8006a42:	0220      	lsls	r0, r4, #8
}
 8006a44:	b200      	sxth	r0, r0
 8006a46:	b003      	add	sp, #12
 8006a48:	bd30      	pop	{r4, r5, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8006a4a:	fb00 f005 	mul.w	r0, r0, r5
 8006a4e:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <SYS_GetTemperatureLevel+0x9c>)
 8006a50:	fba3 2300 	umull	r2, r3, r3, r0
 8006a54:	1ac0      	subs	r0, r0, r3
 8006a56:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 8006a5a:	0ac0      	lsrs	r0, r0, #11
 8006a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a60:	fb03 f300 	mul.w	r3, r3, r0
 8006a64:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8006a68:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8006a6c:	480a      	ldr	r0, [pc, #40]	; (8006a98 <SYS_GetTemperatureLevel+0xa0>)
 8006a6e:	fb80 2003 	smull	r2, r0, r0, r3
 8006a72:	17dc      	asrs	r4, r3, #31
 8006a74:	ebc4 24a0 	rsb	r4, r4, r0, asr #10
 8006a78:	341e      	adds	r4, #30
 8006a7a:	b224      	sxth	r4, r4
 8006a7c:	e7da      	b.n	8006a34 <SYS_GetTemperatureLevel+0x3c>
 8006a7e:	bf00      	nop
 8006a80:	b0001000 	.word	0xb0001000
 8006a84:	1fff75c8 	.word	0x1fff75c8
 8006a88:	1fff75a8 	.word	0x1fff75a8
 8006a8c:	09ee009f 	.word	0x09ee009f
 8006a90:	08024cb4 	.word	0x08024cb4
 8006a94:	00100101 	.word	0x00100101
 8006a98:	68db8bad 	.word	0x68db8bad

08006a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006a9c:	b500      	push	{lr}
 8006a9e:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006aa6:	f042 0204 	orr.w	r2, r2, #4
 8006aaa:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006aac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006aae:	f002 0204 	and.w	r2, r2, #4
 8006ab2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8006ab4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006ab6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ab8:	f042 0201 	orr.w	r2, r2, #1
 8006abc:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8006ac6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2102      	movs	r1, #2
 8006acc:	200f      	movs	r0, #15
 8006ace:	f008 f97f 	bl	800edd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8006ad2:	200f      	movs	r0, #15
 8006ad4:	f008 f9b0 	bl	800ee38 <HAL_NVIC_EnableIRQ>

}
 8006ad8:	b003      	add	sp, #12
 8006ada:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006ae0 <FLASH_IF_Write64>:

  /* USER CODE END FLASH_IF_Write_2 */
}

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8006ae0:	b570      	push	{r4, r5, r6, lr}
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	4614      	mov	r4, r2
 8006ae6:	461d      	mov	r5, r3
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8006ae8:	e005      	b.n	8006af6 <FLASH_IF_Write64+0x16>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8006aea:	4622      	mov	r2, r4
 8006aec:	462b      	mov	r3, r5
 8006aee:	4631      	mov	r1, r6
 8006af0:	2001      	movs	r0, #1
 8006af2:	f008 fcb3 	bl	800f45c <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8006af6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006afa:	42ab      	cmp	r3, r5
 8006afc:	bf08      	it	eq
 8006afe:	42a2      	cmpeq	r2, r4
 8006b00:	d005      	beq.n	8006b0e <FLASH_IF_Write64+0x2e>
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8006b02:	4b04      	ldr	r3, [pc, #16]	; (8006b14 <FLASH_IF_Write64+0x34>)
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006b0a:	d1fa      	bne.n	8006b02 <FLASH_IF_Write64+0x22>
 8006b0c:	e7ed      	b.n	8006aea <FLASH_IF_Write64+0xa>

  return FLASH_OK;
  /* USER CODE BEGIN HW_FLASH_Write_2 */

  /* USER CODE END HW_FLASH_Write_2 */
}
 8006b0e:	2000      	movs	r0, #0
 8006b10:	bd70      	pop	{r4, r5, r6, pc}
 8006b12:	bf00      	nop
 8006b14:	58004000 	.word	0x58004000

08006b18 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 8006b18:	b500      	push	{lr}
 8006b1a:	b085      	sub	sp, #20
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	9301      	str	r3, [sp, #4]
  erase_str.Page = page;
 8006b20:	9002      	str	r0, [sp, #8]
  erase_str.NbPages = n;
 8006b22:	9103      	str	r1, [sp, #12]

  /* Erase the Page */
  if (interrupt)
 8006b24:	b13a      	cbz	r2, 8006b36 <FLASH_IF_EraseByPages+0x1e>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8006b26:	a801      	add	r0, sp, #4
 8006b28:	f008 fd60 	bl	800f5ec <HAL_FLASHEx_Erase_IT>
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8006b2c:	b140      	cbz	r0, 8006b40 <FLASH_IF_EraseByPages+0x28>
 8006b2e:	2802      	cmp	r0, #2
 8006b30:	d10a      	bne.n	8006b48 <FLASH_IF_EraseByPages+0x30>
 8006b32:	2001      	movs	r0, #1
 8006b34:	e005      	b.n	8006b42 <FLASH_IF_EraseByPages+0x2a>
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8006b36:	4669      	mov	r1, sp
 8006b38:	a801      	add	r0, sp, #4
 8006b3a:	f008 fd17 	bl	800f56c <HAL_FLASHEx_Erase>
 8006b3e:	e7f5      	b.n	8006b2c <FLASH_IF_EraseByPages+0x14>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8006b40:	2000      	movs	r0, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8006b42:	b005      	add	sp, #20
 8006b44:	f85d fb04 	ldr.w	pc, [sp], #4
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8006b48:	f06f 0001 	mvn.w	r0, #1
 8006b4c:	e7f9      	b.n	8006b42 <FLASH_IF_EraseByPages+0x2a>
	...

08006b50 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8006b50:	b508      	push	{r3, lr}
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8006b52:	480a      	ldr	r0, [pc, #40]	; (8006b7c <MX_LPTIM1_Init+0x2c>)
 8006b54:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <MX_LPTIM1_Init+0x30>)
 8006b56:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8006b5c:	6083      	str	r3, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8006b5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b62:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8006b64:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8006b66:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8006b68:	6283      	str	r3, [r0, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8006b6a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8006b6c:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8006b6e:	f009 f885 	bl	800fc7c <HAL_LPTIM_Init>
 8006b72:	b900      	cbnz	r0, 8006b76 <MX_LPTIM1_Init+0x26>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8006b74:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006b76:	f000 f849 	bl	8006c0c <Error_Handler>
}
 8006b7a:	e7fb      	b.n	8006b74 <MX_LPTIM1_Init+0x24>
 8006b7c:	200026ec 	.word	0x200026ec
 8006b80:	40007c00 	.word	0x40007c00

08006b84 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8006b84:	b510      	push	{r4, lr}
 8006b86:	b090      	sub	sp, #64	; 0x40
 8006b88:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006b8a:	2238      	movs	r2, #56	; 0x38
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	a802      	add	r0, sp, #8
 8006b90:	f01d f9c2 	bl	8023f18 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8006b94:	6822      	ldr	r2, [r4, #0]
 8006b96:	4b13      	ldr	r3, [pc, #76]	; (8006be4 <HAL_LPTIM_MspInit+0x60>)
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d001      	beq.n	8006ba0 <HAL_LPTIM_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8006b9c:	b010      	add	sp, #64	; 0x40
 8006b9e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8006ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ba4:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8006ba6:	f04f 130c 	mov.w	r3, #786444	; 0xc000c
 8006baa:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006bac:	a802      	add	r0, sp, #8
 8006bae:	f009 ff97 	bl	8010ae0 <HAL_RCCEx_PeriphCLKConfig>
 8006bb2:	b998      	cbnz	r0, 8006bdc <HAL_LPTIM_MspInit+0x58>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006bba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006bbe:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bc6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8006bc8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8006bca:	2200      	movs	r2, #0
 8006bcc:	4611      	mov	r1, r2
 8006bce:	2027      	movs	r0, #39	; 0x27
 8006bd0:	f008 f8fe 	bl	800edd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8006bd4:	2027      	movs	r0, #39	; 0x27
 8006bd6:	f008 f92f 	bl	800ee38 <HAL_NVIC_EnableIRQ>
}
 8006bda:	e7df      	b.n	8006b9c <HAL_LPTIM_MspInit+0x18>
      Error_Handler();
 8006bdc:	f000 f816 	bl	8006c0c <Error_Handler>
 8006be0:	e7e8      	b.n	8006bb4 <HAL_LPTIM_MspInit+0x30>
 8006be2:	bf00      	nop
 8006be4:	40007c00 	.word	0x40007c00

08006be8 <HAL_LPTIM_MspDeInit>:

void HAL_LPTIM_MspDeInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8006be8:	b508      	push	{r3, lr}

  if(lptimHandle->Instance==LPTIM1)
 8006bea:	6802      	ldr	r2, [r0, #0]
 8006bec:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <HAL_LPTIM_MspDeInit+0x20>)
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d000      	beq.n	8006bf4 <HAL_LPTIM_MspDeInit+0xc>
    HAL_NVIC_DisableIRQ(LPTIM1_IRQn);
  /* USER CODE BEGIN LPTIM1_MspDeInit 1 */

  /* USER CODE END LPTIM1_MspDeInit 1 */
  }
}
 8006bf2:	bd08      	pop	{r3, pc}
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8006bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bf8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006bfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bfe:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_NVIC_DisableIRQ(LPTIM1_IRQn);
 8006c00:	2027      	movs	r0, #39	; 0x27
 8006c02:	f008 f927 	bl	800ee54 <HAL_NVIC_DisableIRQ>
}
 8006c06:	e7f4      	b.n	8006bf2 <HAL_LPTIM_MspDeInit+0xa>
 8006c08:	40007c00 	.word	0x40007c00

08006c0c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006c0c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006c0e:	e7fe      	b.n	8006c0e <Error_Handler+0x2>

08006c10 <SystemClock_Config>:
{
 8006c10:	b510      	push	{r4, lr}
 8006c12:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c14:	2248      	movs	r2, #72	; 0x48
 8006c16:	2100      	movs	r1, #0
 8006c18:	a808      	add	r0, sp, #32
 8006c1a:	f01d f97d 	bl	8023f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c1e:	2400      	movs	r4, #0
 8006c20:	9402      	str	r4, [sp, #8]
 8006c22:	9403      	str	r4, [sp, #12]
 8006c24:	9404      	str	r4, [sp, #16]
 8006c26:	9405      	str	r4, [sp, #20]
 8006c28:	9406      	str	r4, [sp, #24]
 8006c2a:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8006c2c:	f009 f952 	bl	800fed4 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8006c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c34:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006c38:	f023 0318 	bic.w	r3, r3, #24
 8006c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8006c40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c44:	6813      	ldr	r3, [r2, #0]
 8006c46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c4e:	6013      	str	r3, [r2, #0]
 8006c50:	6813      	ldr	r3, [r2, #0]
 8006c52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8006c5a:	2306      	movs	r3, #6
 8006c5c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006c5e:	2381      	movs	r3, #129	; 0x81
 8006c60:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c66:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c68:	2340      	movs	r3, #64	; 0x40
 8006c6a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006c6c:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c6e:	a808      	add	r0, sp, #32
 8006c70:	f009 fac8 	bl	8010204 <HAL_RCC_OscConfig>
 8006c74:	b970      	cbnz	r0, 8006c94 <SystemClock_Config+0x84>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8006c76:	234f      	movs	r3, #79	; 0x4f
 8006c78:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c7e:	2100      	movs	r1, #0
 8006c80:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006c82:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006c84:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8006c86:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006c88:	a802      	add	r0, sp, #8
 8006c8a:	f009 fdf7 	bl	801087c <HAL_RCC_ClockConfig>
 8006c8e:	b918      	cbnz	r0, 8006c98 <SystemClock_Config+0x88>
}
 8006c90:	b01a      	add	sp, #104	; 0x68
 8006c92:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006c94:	f7ff ffba 	bl	8006c0c <Error_Handler>
    Error_Handler();
 8006c98:	f7ff ffb8 	bl	8006c0c <Error_Handler>

08006c9c <main>:
{
 8006c9c:	b508      	push	{r3, lr}
  SCB->VTOR = START_FLASH_ADDRESS;
 8006c9e:	4b0e      	ldr	r3, [pc, #56]	; (8006cd8 <main+0x3c>)
 8006ca0:	4a0e      	ldr	r2, [pc, #56]	; (8006cdc <main+0x40>)
 8006ca2:	609a      	str	r2, [r3, #8]
  HAL_Init();
 8006ca4:	f007 fb98 	bl	800e3d8 <HAL_Init>
  SystemClock_Config();
 8006ca8:	f7ff ffb2 	bl	8006c10 <SystemClock_Config>
  active_app = SystemApp_Init();
 8006cac:	f000 fa00 	bl	80070b0 <SystemApp_Init>
 8006cb0:	4a0b      	ldr	r2, [pc, #44]	; (8006ce0 <main+0x44>)
 8006cb2:	6010      	str	r0, [r2, #0]
  if(active_app == ACTIVE_APP_LORAWAN)
 8006cb4:	2801      	cmp	r0, #1
 8006cb6:	d002      	beq.n	8006cbe <main+0x22>
    MX_Sigfox_Init();
 8006cb8:	f004 fb84 	bl	800b3c4 <MX_Sigfox_Init>
 8006cbc:	e004      	b.n	8006cc8 <main+0x2c>
    MX_LoRaWAN_Init();
 8006cbe:	f000 fdcf 	bl	8007860 <MX_LoRaWAN_Init>
 8006cc2:	e001      	b.n	8006cc8 <main+0x2c>
      MX_Sigfox_Process();
 8006cc4:	f004 fb82 	bl	800b3cc <MX_Sigfox_Process>
    if(active_app == ACTIVE_APP_LORAWAN)
 8006cc8:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <main+0x44>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d1f9      	bne.n	8006cc4 <main+0x28>
      MX_LoRaWAN_Process();
 8006cd0:	f000 fdca 	bl	8007868 <MX_LoRaWAN_Process>
 8006cd4:	e7f8      	b.n	8006cc8 <main+0x2c>
 8006cd6:	bf00      	nop
 8006cd8:	e000ed00 	.word	0xe000ed00
 8006cdc:	08002000 	.word	0x08002000
 8006ce0:	20002728 	.word	0x20002728

08006ce4 <MN_LPTIM_IF_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
void MN_LPTIM_IF_Init(void)
{
 8006ce4:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8006ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006cf0:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8006cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cf4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006cf8:	639a      	str	r2, [r3, #56]	; 0x38

  /* USER CODE BEGIN MN_LPTIM_IF_Init_1 */

  /* USER CODE END MN_LPTIM_IF_Init_1 */

  MX_LPTIM1_Init();
 8006cfa:	f7ff ff29 	bl	8006b50 <MX_LPTIM1_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006cfe:	4a04      	ldr	r2, [pc, #16]	; (8006d10 <MN_LPTIM_IF_Init+0x2c>)
 8006d00:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006d04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_29);

  /* USER CODE BEGIN MN_LPTIM_IF_Init_3 */

  /* USER CODE END MN_LPTIM_IF_Init_3 */
}
 8006d0c:	bd08      	pop	{r3, pc}
 8006d0e:	bf00      	nop
 8006d10:	58000800 	.word	0x58000800

08006d14 <MN_LPTIM_IF_DeInit>:

void MN_LPTIM_IF_DeInit(void)
{
 8006d14:	b500      	push	{lr}
 8006d16:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN MN_LPTIM_IF_DeInit_0 */

  /* USER CODE END MN_LPTIM_IF_DeInit_0 */

  if (HAL_LPTIM_DeInit(&hlptim1) != HAL_OK)
 8006d18:	480e      	ldr	r0, [pc, #56]	; (8006d54 <MN_LPTIM_IF_DeInit+0x40>)
 8006d1a:	f009 f827 	bl	800fd6c <HAL_LPTIM_DeInit>
 8006d1e:	b9a8      	cbnz	r0, 8006d4c <MN_LPTIM_IF_DeInit+0x38>
  /* USER CODE BEGIN MN_LPTIM_IF_DeInit_1 */

  /* USER CODE END MN_LPTIM_IF_DeInit_1 */

  /* Select the PCLK clock as LPTIM1 peripheral clock */
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8006d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d24:	9300      	str	r3, [sp, #0]
  RCC_PeriphCLKInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8006d26:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8006d2a:	9308      	str	r3, [sp, #32]
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8006d2c:	4668      	mov	r0, sp
 8006d2e:	f009 fed7 	bl	8010ae0 <HAL_RCCEx_PeriphCLKConfig>
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8006d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006d3c:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8006d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006d44:	639a      	str	r2, [r3, #56]	; 0x38

  /* USER CODE BEGIN MN_LPTIM_IF_DeInit_3 */

  /* USER CODE END MN_LPTIM_IF_DeInit_3 */

}
 8006d46:	b00f      	add	sp, #60	; 0x3c
 8006d48:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006d4c:	f7ff ff5e 	bl	8006c0c <Error_Handler>
 8006d50:	e7e6      	b.n	8006d20 <MN_LPTIM_IF_DeInit+0xc>
 8006d52:	bf00      	nop
 8006d54:	200026ec 	.word	0x200026ec

08006d58 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8006d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5c:	b088      	sub	sp, #32
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_Init();
#else
  /* should be calling BSP_RADIO_Init() but not supported by MX*/

  GPIO_InitTypeDef  gpio_init_structure = {0};
 8006d5e:	2400      	movs	r4, #0
 8006d60:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d68:	f042 0202 	orr.w	r2, r2, #2
 8006d6c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006d6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d70:	f002 0202 	and.w	r2, r2, #2
 8006d74:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8006d76:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006d78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d7a:	f042 0204 	orr.w	r2, r2, #4
 8006d7e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8006d88:	9b01      	ldr	r3, [sp, #4]
#if LSM_RF_CHANNEL_SWITCH
    /* Enable the Radio Switch Clock */
    RF_SW_CTRL1_GPIO_CLK_ENABLE();
    RF_SW_CTRL2_GPIO_CLK_ENABLE();
    /* Configure the Radio Switch pin */
    gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8006d8a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8006d8e:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8006d90:	2301      	movs	r3, #1
 8006d92:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8006d94:	9405      	str	r4, [sp, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d96:	2303      	movs	r3, #3
 8006d98:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8006d9a:	4d0e      	ldr	r5, [pc, #56]	; (8006dd4 <RBI_Init+0x7c>)
 8006d9c:	a903      	add	r1, sp, #12
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f008 fc58 	bl	800f654 <HAL_GPIO_Init>
    gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8006da4:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 8006da8:	f8cd 800c 	str.w	r8, [sp, #12]
    HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8006dac:	4f0a      	ldr	r7, [pc, #40]	; (8006dd8 <RBI_Init+0x80>)
 8006dae:	a903      	add	r1, sp, #12
 8006db0:	4638      	mov	r0, r7
 8006db2:	f008 fc4f 	bl	800f654 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8006db6:	4622      	mov	r2, r4
 8006db8:	4641      	mov	r1, r8
 8006dba:	4638      	mov	r0, r7
 8006dbc:	f008 fd7e 	bl	800f8bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8006dc0:	4622      	mov	r2, r4
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f008 fd79 	bl	800f8bc <HAL_GPIO_WritePin>
  return 0;
#endif  /* USE_BSP_DRIVER */
  /* USER CODE BEGIN RBI_Init_3 */

  /* USER CODE END RBI_Init_3 */
}
 8006dca:	4620      	mov	r0, r4
 8006dcc:	b008      	add	sp, #32
 8006dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd2:	bf00      	nop
 8006dd4:	48000400 	.word	0x48000400
 8006dd8:	48000800 	.word	0x48000800

08006ddc <RBI_ConfigRFSwitch>:

  /* USER CODE END RBI_DeInit_3 */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8006ddc:	b508      	push	{r3, lr}
  /* code generated by MX does not support BSP */
  /* In order to use BSP driver, add the correspondent files in the IDE workspace */
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  switch (Config)
 8006dde:	2803      	cmp	r0, #3
 8006de0:	d80f      	bhi.n	8006e02 <RBI_ConfigRFSwitch+0x26>
 8006de2:	e8df f000 	tbb	[pc, r0]
 8006de6:	1002      	.short	0x1002
 8006de8:	2a1d      	.short	0x2a1d
  {
    case RBI_SWITCH_OFF:
    {
		#if LSM_RF_CHANNEL_SWITCH
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8006dea:	2200      	movs	r2, #0
 8006dec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006df0:	4818      	ldr	r0, [pc, #96]	; (8006e54 <RBI_ConfigRFSwitch+0x78>)
 8006df2:	f008 fd63 	bl	800f8bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8006df6:	2200      	movs	r2, #0
 8006df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006dfc:	4816      	ldr	r0, [pc, #88]	; (8006e58 <RBI_ConfigRFSwitch+0x7c>)
 8006dfe:	f008 fd5d 	bl	800f8bc <HAL_GPIO_WritePin>
  return 0;
#endif  /* USE_BSP_DRIVER */
  /* USER CODE BEGIN RBI_ConfigRFSwitch_3 */

  /* USER CODE END RBI_ConfigRFSwitch_3 */
}
 8006e02:	2000      	movs	r0, #0
 8006e04:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8006e06:	2201      	movs	r2, #1
 8006e08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e0c:	4811      	ldr	r0, [pc, #68]	; (8006e54 <RBI_ConfigRFSwitch+0x78>)
 8006e0e:	f008 fd55 	bl	800f8bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8006e12:	2200      	movs	r2, #0
 8006e14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e18:	480f      	ldr	r0, [pc, #60]	; (8006e58 <RBI_ConfigRFSwitch+0x7c>)
 8006e1a:	f008 fd4f 	bl	800f8bc <HAL_GPIO_WritePin>
		break;
 8006e1e:	e7f0      	b.n	8006e02 <RBI_ConfigRFSwitch+0x26>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8006e20:	2201      	movs	r2, #1
 8006e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e26:	480b      	ldr	r0, [pc, #44]	; (8006e54 <RBI_ConfigRFSwitch+0x78>)
 8006e28:	f008 fd48 	bl	800f8bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e32:	4809      	ldr	r0, [pc, #36]	; (8006e58 <RBI_ConfigRFSwitch+0x7c>)
 8006e34:	f008 fd42 	bl	800f8bc <HAL_GPIO_WritePin>
		break;
 8006e38:	e7e3      	b.n	8006e02 <RBI_ConfigRFSwitch+0x26>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e40:	4804      	ldr	r0, [pc, #16]	; (8006e54 <RBI_ConfigRFSwitch+0x78>)
 8006e42:	f008 fd3b 	bl	800f8bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8006e46:	2201      	movs	r2, #1
 8006e48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e4c:	4802      	ldr	r0, [pc, #8]	; (8006e58 <RBI_ConfigRFSwitch+0x7c>)
 8006e4e:	f008 fd35 	bl	800f8bc <HAL_GPIO_WritePin>
		break;
 8006e52:	e7d6      	b.n	8006e02 <RBI_ConfigRFSwitch+0x26>
 8006e54:	48000400 	.word	0x48000400
 8006e58:	48000800 	.word	0x48000800

08006e5c <RBI_GetTxConfig>:
  return RBI_CONF_RFO;
#endif  /* USE_BSP_DRIVER  || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_GetTxConfig_3 */

  /* USER CODE END RBI_GetTxConfig_3 */
}
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	4770      	bx	lr

08006e60 <RBI_IsTCXO>:
  return IS_TCXO_SUPPORTED;
#endif  /* USE_BSP_DRIVER  */
  /* USER CODE BEGIN RBI_IsTCXO_3 */

  /* USER CODE END RBI_IsTCXO_3 */
}
 8006e60:	2001      	movs	r0, #1
 8006e62:	4770      	bx	lr

08006e64 <RBI_IsDCDC>:
  return IS_DCDC_SUPPORTED;
#endif  /* USE_BSP_DRIVER */
  /* USER CODE BEGIN RBI_IsDCDC_3 */

  /* USER CODE END RBI_IsDCDC_3 */
}
 8006e64:	2001      	movs	r0, #1
 8006e66:	4770      	bx	lr

08006e68 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006e68:	b500      	push	{lr}
 8006e6a:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8006e6c:	222c      	movs	r2, #44	; 0x2c
 8006e6e:	2100      	movs	r1, #0
 8006e70:	a801      	add	r0, sp, #4
 8006e72:	f01d f851 	bl	8023f18 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006e76:	4819      	ldr	r0, [pc, #100]	; (8006edc <MX_RTC_Init+0x74>)
 8006e78:	4b19      	ldr	r3, [pc, #100]	; (8006ee0 <MX_RTC_Init+0x78>)
 8006e7a:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8006e7c:	231f      	movs	r3, #31
 8006e7e:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006e80:	2300      	movs	r3, #0
 8006e82:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006e84:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006e86:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e8c:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8006e8e:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8006e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e94:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006e96:	f00a f82b 	bl	8010ef0 <HAL_RTC_Init>
 8006e9a:	b9a8      	cbnz	r0, 8006ec8 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8006e9c:	480f      	ldr	r0, [pc, #60]	; (8006edc <MX_RTC_Init+0x74>)
 8006e9e:	f00a f961 	bl	8011164 <HAL_RTCEx_SetSSRU_IT>
 8006ea2:	b9a0      	cbnz	r0, 8006ece <MX_RTC_Init+0x66>
  {
    Error_Handler();
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8006ea8:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8006eaa:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8006eac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006eb0:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8006eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006eb6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8006eb8:	a901      	add	r1, sp, #4
 8006eba:	4808      	ldr	r0, [pc, #32]	; (8006edc <MX_RTC_Init+0x74>)
 8006ebc:	f00a f876 	bl	8010fac <HAL_RTC_SetAlarm_IT>
 8006ec0:	b940      	cbnz	r0, 8006ed4 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006ec2:	b00d      	add	sp, #52	; 0x34
 8006ec4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006ec8:	f7ff fea0 	bl	8006c0c <Error_Handler>
 8006ecc:	e7e6      	b.n	8006e9c <MX_RTC_Init+0x34>
    Error_Handler();
 8006ece:	f7ff fe9d 	bl	8006c0c <Error_Handler>
 8006ed2:	e7e7      	b.n	8006ea4 <MX_RTC_Init+0x3c>
    Error_Handler();
 8006ed4:	f7ff fe9a 	bl	8006c0c <Error_Handler>
}
 8006ed8:	e7f3      	b.n	8006ec2 <MX_RTC_Init+0x5a>
 8006eda:	bf00      	nop
 8006edc:	2000272c 	.word	0x2000272c
 8006ee0:	40002800 	.word	0x40002800

08006ee4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	b090      	sub	sp, #64	; 0x40
 8006ee8:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006eea:	2238      	movs	r2, #56	; 0x38
 8006eec:	2100      	movs	r1, #0
 8006eee:	a802      	add	r0, sp, #8
 8006ef0:	f01d f812 	bl	8023f18 <memset>
  if(rtcHandle->Instance==RTC)
 8006ef4:	6822      	ldr	r2, [r4, #0]
 8006ef6:	4b1a      	ldr	r3, [pc, #104]	; (8006f60 <HAL_RTC_MspInit+0x7c>)
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d001      	beq.n	8006f00 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006efc:	b010      	add	sp, #64	; 0x40
 8006efe:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006f00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f04:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f0a:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006f0c:	a802      	add	r0, sp, #8
 8006f0e:	f009 fde7 	bl	8010ae0 <HAL_RCCEx_PeriphCLKConfig>
 8006f12:	bb08      	cbnz	r0, 8006f58 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8006f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f18:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006f1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006f24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f2a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f32:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8006f34:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8006f36:	2200      	movs	r2, #0
 8006f38:	4611      	mov	r1, r2
 8006f3a:	2002      	movs	r0, #2
 8006f3c:	f007 ff48 	bl	800edd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8006f40:	2002      	movs	r0, #2
 8006f42:	f007 ff79 	bl	800ee38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8006f46:	2200      	movs	r2, #0
 8006f48:	4611      	mov	r1, r2
 8006f4a:	202a      	movs	r0, #42	; 0x2a
 8006f4c:	f007 ff40 	bl	800edd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8006f50:	202a      	movs	r0, #42	; 0x2a
 8006f52:	f007 ff71 	bl	800ee38 <HAL_NVIC_EnableIRQ>
}
 8006f56:	e7d1      	b.n	8006efc <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8006f58:	f7ff fe58 	bl	8006c0c <Error_Handler>
 8006f5c:	e7da      	b.n	8006f14 <HAL_RTC_MspInit+0x30>
 8006f5e:	bf00      	nop
 8006f60:	40002800 	.word	0x40002800

08006f64 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8006f64:	4770      	bx	lr

08006f66 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8006f66:	4770      	bx	lr

08006f68 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8006f68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8006f6a:	f007 fa4b 	bl	800e404 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8006f6e:	2001      	movs	r0, #1
 8006f70:	4b02      	ldr	r3, [pc, #8]	; (8006f7c <PWR_EnterStopMode+0x14>)
 8006f72:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8006f76:	f009 f811 	bl	800ff9c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8006f7a:	bd08      	pop	{r3, pc}
 8006f7c:	58000400 	.word	0x58000400

08006f80 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8006f80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 8006f82:	f007 fa47 	bl	800e414 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8006f86:	bd08      	pop	{r3, pc}

08006f88 <PWR_ExitStopMode>:
{
 8006f88:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8006f8a:	f007 fa43 	bl	800e414 <HAL_ResumeTick>
  vcom_Resume();
 8006f8e:	f000 fc3d 	bl	800780c <vcom_Resume>
}
 8006f92:	bd08      	pop	{r3, pc}

08006f94 <PWR_EnterSleepMode>:
{
 8006f94:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8006f96:	f007 fa35 	bl	800e404 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	f008 ffa1 	bl	800fee4 <HAL_PWR_EnterSLEEPMode>
}
 8006fa2:	bd08      	pop	{r3, pc}

08006fa4 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006fa4:	4770      	bx	lr

08006fa6 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006fa6:	e7fe      	b.n	8006fa6 <NMI_Handler>

08006fa8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006fa8:	e7fe      	b.n	8006fa8 <HardFault_Handler>

08006faa <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006faa:	e7fe      	b.n	8006faa <MemManage_Handler>

08006fac <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006fac:	e7fe      	b.n	8006fac <BusFault_Handler>

08006fae <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006fae:	e7fe      	b.n	8006fae <UsageFault_Handler>

08006fb0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006fb0:	4770      	bx	lr

08006fb2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006fb2:	4770      	bx	lr

08006fb4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006fb4:	4770      	bx	lr

08006fb6 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006fb6:	4770      	bx	lr

08006fb8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8006fb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8006fba:	4802      	ldr	r0, [pc, #8]	; (8006fc4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8006fbc:	f00a f8fe 	bl	80111bc <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8006fc0:	bd08      	pop	{r3, pc}
 8006fc2:	bf00      	nop
 8006fc4:	2000272c 	.word	0x2000272c

08006fc8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006fc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8006fca:	4802      	ldr	r0, [pc, #8]	; (8006fd4 <DMA1_Channel5_IRQHandler+0xc>)
 8006fcc:	f008 f94a 	bl	800f264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006fd0:	bd08      	pop	{r3, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20002800 	.word	0x20002800

08006fd8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006fd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006fda:	4802      	ldr	r0, [pc, #8]	; (8006fe4 <LPUART1_IRQHandler+0xc>)
 8006fdc:	f00a fdae 	bl	8011b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006fe0:	bd08      	pop	{r3, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20002770 	.word	0x20002770

08006fe8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 Global Interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8006fe8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8006fea:	4802      	ldr	r0, [pc, #8]	; (8006ff4 <LPTIM1_IRQHandler+0xc>)
 8006fec:	f008 fc92 	bl	800f914 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8006ff0:	bd08      	pop	{r3, pc}
 8006ff2:	bf00      	nop
 8006ff4:	200026ec 	.word	0x200026ec

08006ff8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8006ff8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8006ffa:	4802      	ldr	r0, [pc, #8]	; (8007004 <RTC_Alarm_IRQHandler+0xc>)
 8006ffc:	f009 fef2 	bl	8010de4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8007000:	bd08      	pop	{r3, pc}
 8007002:	bf00      	nop
 8007004:	2000272c 	.word	0x2000272c

08007008 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8007008:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800700a:	4802      	ldr	r0, [pc, #8]	; (8007014 <SUBGHZ_Radio_IRQHandler+0xc>)
 800700c:	f00a fb84 	bl	8011718 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8007010:	bd08      	pop	{r3, pc}
 8007012:	bf00      	nop
 8007014:	20002764 	.word	0x20002764

08007018 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8007018:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 800701a:	4805      	ldr	r0, [pc, #20]	; (8007030 <MX_SUBGHZ_Init+0x18>)
 800701c:	2308      	movs	r3, #8
 800701e:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8007020:	f00a f902 	bl	8011228 <HAL_SUBGHZ_Init>
 8007024:	b900      	cbnz	r0, 8007028 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8007026:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007028:	f7ff fdf0 	bl	8006c0c <Error_Handler>
}
 800702c:	e7fb      	b.n	8007026 <MX_SUBGHZ_Init+0xe>
 800702e:	bf00      	nop
 8007030:	20002764 	.word	0x20002764

08007034 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8007034:	b500      	push	{lr}
 8007036:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8007038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800703c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800703e:	f042 0201 	orr.w	r2, r2, #1
 8007042:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8007044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800704c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800704e:	2200      	movs	r2, #0
 8007050:	4611      	mov	r1, r2
 8007052:	2032      	movs	r0, #50	; 0x32
 8007054:	f007 febc 	bl	800edd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8007058:	2032      	movs	r0, #50	; 0x32
 800705a:	f007 feed 	bl	800ee38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800705e:	b003      	add	sp, #12
 8007060:	f85d fb04 	ldr.w	pc, [sp], #4

08007064 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8007064:	b40c      	push	{r2, r3}
 8007066:	b500      	push	{lr}
 8007068:	b083      	sub	sp, #12
 800706a:	ab04      	add	r3, sp, #16
 800706c:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8007070:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8007072:	f01c f8e5 	bl	8023240 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8007076:	b003      	add	sp, #12
 8007078:	f85d eb04 	ldr.w	lr, [sp], #4
 800707c:	b002      	add	sp, #8
 800707e:	4770      	bx	lr

08007080 <TimestampNow>:
{
 8007080:	b530      	push	{r4, r5, lr}
 8007082:	b085      	sub	sp, #20
 8007084:	4604      	mov	r4, r0
 8007086:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8007088:	a802      	add	r0, sp, #8
 800708a:	f01b fbdb 	bl	8022844 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800708e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	9b02      	ldr	r3, [sp, #8]
 8007096:	4a05      	ldr	r2, [pc, #20]	; (80070ac <TimestampNow+0x2c>)
 8007098:	2110      	movs	r1, #16
 800709a:	4620      	mov	r0, r4
 800709c:	f7ff ffe2 	bl	8007064 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80070a0:	4620      	mov	r0, r4
 80070a2:	f7fe fe07 	bl	8005cb4 <strlen>
 80070a6:	8028      	strh	r0, [r5, #0]
}
 80070a8:	b005      	add	sp, #20
 80070aa:	bd30      	pop	{r4, r5, pc}
 80070ac:	08024cd8 	.word	0x08024cd8

080070b0 <SystemApp_Init>:
{
 80070b0:	b530      	push	{r4, r5, lr}
 80070b2:	b083      	sub	sp, #12
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80070b4:	4b40      	ldr	r3, [pc, #256]	; (80071b8 <SystemApp_Init+0x108>)
 80070b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80070ba:	611a      	str	r2, [r3, #16]
  E2P_LORA_Init();
 80070bc:	f002 fe92 	bl	8009de4 <E2P_LORA_Init>
  lora_mode = E2P_LORA_Read_Mode();
 80070c0:	f003 f842 	bl	800a148 <E2P_LORA_Read_Mode>
 80070c4:	4605      	mov	r5, r0
  E2P_Init();
 80070c6:	f006 f8f9 	bl	800d2bc <E2P_Init>
  sigfox_mode = E2P_Read_Mode();
 80070ca:	f006 f97e 	bl	800d3ca <E2P_Read_Mode>
 80070ce:	4604      	mov	r4, r0
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80070d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070d4:	6893      	ldr	r3, [r2, #8]
 80070d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070da:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 80070dc:	f01b fca0 	bl	8022a20 <UTIL_TIMER_Init>
  DBG_Disable();
 80070e0:	f000 f928 	bl	8007334 <DBG_Disable>
  DBG_ProbesInit();
 80070e4:	f000 f92c 	bl	8007340 <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 80070e8:	f01b f80a 	bl	8022100 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80070ec:	4833      	ldr	r0, [pc, #204]	; (80071bc <SystemApp_Init+0x10c>)
 80070ee:	f01b f835 	bl	802215c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(E2P_Read_VerboseLevel());
 80070f2:	f006 fa05 	bl	800d500 <E2P_Read_VerboseLevel>
 80070f6:	f01b f837 	bl	8022168 <UTIL_ADV_TRACE_SetVerboseLevel>
  if(sigfox_mode == 0 && lora_mode == 1)
 80070fa:	b90c      	cbnz	r4, 8007100 <SystemApp_Init+0x50>
 80070fc:	2d01      	cmp	r5, #1
 80070fe:	d050      	beq.n	80071a2 <SystemApp_Init+0xf2>
  else if(sigfox_mode == 1 && lora_mode == 0)
 8007100:	2c01      	cmp	r4, #1
 8007102:	d04a      	beq.n	800719a <SystemApp_Init+0xea>
    app_set = ACTIVE_APP_LORAWAN;
 8007104:	2401      	movs	r4, #1
  SYS_InitMeasurement();
 8007106:	f7ff fc4d 	bl	80069a4 <SYS_InitMeasurement>
  UTIL_LPM_Init();
 800710a:	f01b f941 	bl	8022390 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800710e:	2101      	movs	r1, #1
 8007110:	4608      	mov	r0, r1
 8007112:	f01b f95d 	bl	80223d0 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8007116:	2101      	movs	r1, #1
 8007118:	4608      	mov	r0, r1
 800711a:	f01b f943 	bl	80223a4 <UTIL_LPM_SetStopMode>
  APP_PPRINTF("-------------------------------------\r\n");
 800711e:	4b28      	ldr	r3, [pc, #160]	; (80071c0 <SystemApp_Init+0x110>)
 8007120:	2200      	movs	r2, #0
 8007122:	4611      	mov	r1, r2
 8007124:	4610      	mov	r0, r2
 8007126:	f01b f879 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800712a:	2800      	cmp	r0, #0
 800712c:	d1f7      	bne.n	800711e <SystemApp_Init+0x6e>
  APP_PPRINTF("     SEONGJI INDUSTRIAL CO., LTD.    \r\n");
 800712e:	4b25      	ldr	r3, [pc, #148]	; (80071c4 <SystemApp_Init+0x114>)
 8007130:	2200      	movs	r2, #0
 8007132:	4611      	mov	r1, r2
 8007134:	4610      	mov	r0, r2
 8007136:	f01b f871 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800713a:	2800      	cmp	r0, #0
 800713c:	d1f7      	bne.n	800712e <SystemApp_Init+0x7e>
  APP_PPRINTF("-------------------------------------\r\n");
 800713e:	4b20      	ldr	r3, [pc, #128]	; (80071c0 <SystemApp_Init+0x110>)
 8007140:	2200      	movs	r2, #0
 8007142:	4611      	mov	r1, r2
 8007144:	4610      	mov	r0, r2
 8007146:	f01b f869 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800714a:	2800      	cmp	r0, #0
 800714c:	d1f7      	bne.n	800713e <SystemApp_Init+0x8e>
  APP_PPRINTF(">> Device : UNKNOWN MODEL            \r\n");
 800714e:	4b1e      	ldr	r3, [pc, #120]	; (80071c8 <SystemApp_Init+0x118>)
 8007150:	2200      	movs	r2, #0
 8007152:	4611      	mov	r1, r2
 8007154:	4610      	mov	r0, r2
 8007156:	f01b f861 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800715a:	2800      	cmp	r0, #0
 800715c:	d1f7      	bne.n	800714e <SystemApp_Init+0x9e>
  if(app_set == ACTIVE_APP_LORAWAN)
 800715e:	bb14      	cbnz	r4, 80071a6 <SystemApp_Init+0xf6>
    APP_PPRINTF(">> Mode   : Sigfox                 \r\n");
 8007160:	4b1a      	ldr	r3, [pc, #104]	; (80071cc <SystemApp_Init+0x11c>)
 8007162:	2200      	movs	r2, #0
 8007164:	4611      	mov	r1, r2
 8007166:	4610      	mov	r0, r2
 8007168:	f01b f858 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800716c:	2800      	cmp	r0, #0
 800716e:	d1f7      	bne.n	8007160 <SystemApp_Init+0xb0>
  APP_PPRINTF(">> IAP_VERSION : %s              	\r\n", IAP_VERSION);
 8007170:	4b17      	ldr	r3, [pc, #92]	; (80071d0 <SystemApp_Init+0x120>)
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	4b17      	ldr	r3, [pc, #92]	; (80071d4 <SystemApp_Init+0x124>)
 8007176:	2200      	movs	r2, #0
 8007178:	4611      	mov	r1, r2
 800717a:	4610      	mov	r0, r2
 800717c:	f01b f84e 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8007180:	2800      	cmp	r0, #0
 8007182:	d1f5      	bne.n	8007170 <SystemApp_Init+0xc0>
  APP_PPRINTF("-------------------------------------\r\n");
 8007184:	4b0e      	ldr	r3, [pc, #56]	; (80071c0 <SystemApp_Init+0x110>)
 8007186:	2200      	movs	r2, #0
 8007188:	4611      	mov	r1, r2
 800718a:	4610      	mov	r0, r2
 800718c:	f01b f846 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8007190:	2800      	cmp	r0, #0
 8007192:	d1f7      	bne.n	8007184 <SystemApp_Init+0xd4>
}
 8007194:	4620      	mov	r0, r4
 8007196:	b003      	add	sp, #12
 8007198:	bd30      	pop	{r4, r5, pc}
  else if(sigfox_mode == 1 && lora_mode == 0)
 800719a:	2d00      	cmp	r5, #0
 800719c:	d1b3      	bne.n	8007106 <SystemApp_Init+0x56>
    app_set = ACTIVE_APP_SIGFOX;
 800719e:	2400      	movs	r4, #0
 80071a0:	e7b1      	b.n	8007106 <SystemApp_Init+0x56>
    app_set = ACTIVE_APP_LORAWAN;
 80071a2:	2401      	movs	r4, #1
 80071a4:	e7af      	b.n	8007106 <SystemApp_Init+0x56>
    APP_PPRINTF(">> Mode   : LoRa					\r\n");
 80071a6:	4b0c      	ldr	r3, [pc, #48]	; (80071d8 <SystemApp_Init+0x128>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	4611      	mov	r1, r2
 80071ac:	4610      	mov	r0, r2
 80071ae:	f01b f835 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d1f7      	bne.n	80071a6 <SystemApp_Init+0xf6>
 80071b6:	e7db      	b.n	8007170 <SystemApp_Init+0xc0>
 80071b8:	58004000 	.word	0x58004000
 80071bc:	08007081 	.word	0x08007081
 80071c0:	08024ce4 	.word	0x08024ce4
 80071c4:	08024d0c 	.word	0x08024d0c
 80071c8:	08024d34 	.word	0x08024d34
 80071cc:	08024d74 	.word	0x08024d74
 80071d0:	08024dc4 	.word	0x08024dc4
 80071d4:	08024d9c 	.word	0x08024d9c
 80071d8:	08024d5c 	.word	0x08024d5c

080071dc <UTIL_SEQ_Idle>:
{
 80071dc:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80071de:	f01b f90d 	bl	80223fc <UTIL_LPM_EnterLowPower>
}
 80071e2:	bd08      	pop	{r3, pc}

080071e4 <GetBatteryLevel>:
{
 80071e4:	b510      	push	{r4, lr}
 80071e6:	b082      	sub	sp, #8
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80071e8:	f7ff fbe4 	bl	80069b4 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80071ec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80071f0:	4298      	cmp	r0, r3
 80071f2:	d80d      	bhi.n	8007210 <GetBatteryLevel+0x2c>
  else if (batteryLevelmV < VDD_MIN)
 80071f4:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80071f8:	d315      	bcc.n	8007226 <GetBatteryLevel+0x42>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80071fa:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80071fe:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8007202:	0044      	lsls	r4, r0, #1
 8007204:	4809      	ldr	r0, [pc, #36]	; (800722c <GetBatteryLevel+0x48>)
 8007206:	fba0 3404 	umull	r3, r4, r0, r4
 800720a:	f3c4 14c7 	ubfx	r4, r4, #7, #8
 800720e:	e000      	b.n	8007212 <GetBatteryLevel+0x2e>
    batteryLevel = LORAWAN_MAX_BAT;
 8007210:	24fe      	movs	r4, #254	; 0xfe
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8007212:	9400      	str	r4, [sp, #0]
 8007214:	4b06      	ldr	r3, [pc, #24]	; (8007230 <GetBatteryLevel+0x4c>)
 8007216:	2201      	movs	r2, #1
 8007218:	2100      	movs	r1, #0
 800721a:	2002      	movs	r0, #2
 800721c:	f01a fffe 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8007220:	4620      	mov	r0, r4
 8007222:	b002      	add	sp, #8
 8007224:	bd10      	pop	{r4, pc}
    batteryLevel = 0;
 8007226:	2400      	movs	r4, #0
 8007228:	e7f3      	b.n	8007212 <GetBatteryLevel+0x2e>
 800722a:	bf00      	nop
 800722c:	1b4e81b5 	.word	0x1b4e81b5
 8007230:	08024dcc 	.word	0x08024dcc

08007234 <GetTemperatureLevel>:
{
 8007234:	b508      	push	{r3, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8007236:	f7ff fbdf 	bl	80069f8 <SYS_GetTemperatureLevel>
 800723a:	4603      	mov	r3, r0
 800723c:	2800      	cmp	r0, #0
 800723e:	db02      	blt.n	8007246 <GetTemperatureLevel+0x12>
}
 8007240:	f3c3 200f 	ubfx	r0, r3, #8, #16
 8007244:	bd08      	pop	{r3, pc}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8007246:	f100 03ff 	add.w	r3, r0, #255	; 0xff
 800724a:	e7f9      	b.n	8007240 <GetTemperatureLevel+0xc>

0800724c <GetUniqueId>:
{
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8007250:	4b16      	ldr	r3, [pc, #88]	; (80072ac <GetUniqueId+0x60>)
 8007252:	681b      	ldr	r3, [r3, #0]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007258:	d011      	beq.n	800727e <GetUniqueId+0x32>
    id[7] = val & 0xFF;
 800725a:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 800725c:	0a1a      	lsrs	r2, r3, #8
 800725e:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8007260:	0c1a      	lsrs	r2, r3, #16
 8007262:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8007264:	0e1b      	lsrs	r3, r3, #24
 8007266:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007268:	4b11      	ldr	r3, [pc, #68]	; (80072b0 <GetUniqueId+0x64>)
 800726a:	681a      	ldr	r2, [r3, #0]
    id[3] = val & 0xFF;
 800726c:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8007272:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8007274:	0c1a      	lsrs	r2, r3, #16
 8007276:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8007278:	0e1b      	lsrs	r3, r3, #24
 800727a:	7003      	strb	r3, [r0, #0]
}
 800727c:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800727e:	f007 f8d1 	bl	800e424 <HAL_GetUIDw0>
 8007282:	4605      	mov	r5, r0
 8007284:	f007 f8da 	bl	800e43c <HAL_GetUIDw2>
 8007288:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 800728a:	f007 f8d1 	bl	800e430 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 800728e:	0e2b      	lsrs	r3, r5, #24
 8007290:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8007292:	0c2b      	lsrs	r3, r5, #16
 8007294:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8007296:	0a2b      	lsrs	r3, r5, #8
 8007298:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 800729a:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 800729c:	0e03      	lsrs	r3, r0, #24
 800729e:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 80072a0:	0c03      	lsrs	r3, r0, #16
 80072a2:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 80072a4:	0a03      	lsrs	r3, r0, #8
 80072a6:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 80072a8:	7020      	strb	r0, [r4, #0]
 80072aa:	e7e7      	b.n	800727c <GetUniqueId+0x30>
 80072ac:	1fff7580 	.word	0x1fff7580
 80072b0:	1fff7584 	.word	0x1fff7584

080072b4 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80072b4:	4b08      	ldr	r3, [pc, #32]	; (80072d8 <GetDevAddr+0x24>)
 80072b6:	6818      	ldr	r0, [r3, #0]
  if (val == 0xFFFFFFFF)
 80072b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80072bc:	d000      	beq.n	80072c0 <GetDevAddr+0xc>
}
 80072be:	4770      	bx	lr
{
 80072c0:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80072c2:	f007 f8af 	bl	800e424 <HAL_GetUIDw0>
 80072c6:	4604      	mov	r4, r0
 80072c8:	f007 f8b2 	bl	800e430 <HAL_GetUIDw1>
 80072cc:	4044      	eors	r4, r0
 80072ce:	f007 f8b5 	bl	800e43c <HAL_GetUIDw2>
 80072d2:	4060      	eors	r0, r4
}
 80072d4:	bd10      	pop	{r4, pc}
 80072d6:	bf00      	nop
 80072d8:	1fff7580 	.word	0x1fff7580

080072dc <UTIL_ADV_TRACE_PreSendHook>:
{
 80072dc:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80072de:	2101      	movs	r1, #1
 80072e0:	2002      	movs	r0, #2
 80072e2:	f01b f85f 	bl	80223a4 <UTIL_LPM_SetStopMode>
}
 80072e6:	bd08      	pop	{r3, pc}

080072e8 <UTIL_ADV_TRACE_PostSendHook>:
{
 80072e8:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80072ea:	2100      	movs	r1, #0
 80072ec:	2002      	movs	r0, #2
 80072ee:	f01b f859 	bl	80223a4 <UTIL_LPM_SetStopMode>
}
 80072f2:	bd08      	pop	{r3, pc}

080072f4 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80072f4:	2000      	movs	r0, #0
 80072f6:	4770      	bx	lr

080072f8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80072f8:	b508      	push	{r3, lr}
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 80072fa:	f000 f86b 	bl	80073d4 <TIMER_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 80072fe:	bd08      	pop	{r3, pc}

08007300 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8007300:	b500      	push	{lr}
 8007302:	b083      	sub	sp, #12
 8007304:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8007306:	9801      	ldr	r0, [sp, #4]
 8007308:	f000 f942 	bl	8007590 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800730c:	b003      	add	sp, #12
 800730e:	f85d fb04 	ldr.w	pc, [sp], #4

08007312 <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 8007312:	b508      	push	{r3, lr}
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 8007314:	2801      	cmp	r0, #1
 8007316:	d006      	beq.n	8007326 <DBG_ConfigForLpm+0x14>
    HAL_DBGMCU_EnableDBGStopMode();
    HAL_DBGMCU_EnableDBGStandbyMode();
  }
  else
  {
    HAL_DBGMCU_DisableDBGSleepMode();
 8007318:	f007 f89e 	bl	800e458 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 800731c:	f007 f8ac 	bl	800e478 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8007320:	f007 f8ba 	bl	800e498 <HAL_DBGMCU_DisableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8007324:	bd08      	pop	{r3, pc}
    HAL_DBGMCU_EnableDBGSleepMode();
 8007326:	f007 f88f 	bl	800e448 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 800732a:	f007 f89d 	bl	800e468 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 800732e:	f007 f8ab 	bl	800e488 <HAL_DBGMCU_EnableDBGStandbyMode>
 8007332:	e7f7      	b.n	8007324 <DBG_ConfigForLpm+0x12>

08007334 <DBG_Disable>:
{
 8007334:	b508      	push	{r3, lr}
  DBG_ConfigForLpm(0);
 8007336:	2000      	movs	r0, #0
 8007338:	f7ff ffeb 	bl	8007312 <DBG_ConfigForLpm>
}
 800733c:	bd08      	pop	{r3, pc}
	...

08007340 <DBG_ProbesInit>:
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007340:	4a03      	ldr	r2, [pc, #12]	; (8007350 <DBG_ProbesInit+0x10>)
 8007342:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800734a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 800734e:	4770      	bx	lr
 8007350:	58000800 	.word	0x58000800

08007354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007354:	b510      	push	{r4, lr}
 8007356:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007358:	4a0c      	ldr	r2, [pc, #48]	; (800738c <_sbrk+0x38>)
 800735a:	490d      	ldr	r1, [pc, #52]	; (8007390 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800735c:	480d      	ldr	r0, [pc, #52]	; (8007394 <_sbrk+0x40>)
 800735e:	6800      	ldr	r0, [r0, #0]
 8007360:	b140      	cbz	r0, 8007374 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007362:	480c      	ldr	r0, [pc, #48]	; (8007394 <_sbrk+0x40>)
 8007364:	6800      	ldr	r0, [r0, #0]
 8007366:	4403      	add	r3, r0
 8007368:	1a52      	subs	r2, r2, r1
 800736a:	4293      	cmp	r3, r2
 800736c:	d806      	bhi.n	800737c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800736e:	4a09      	ldr	r2, [pc, #36]	; (8007394 <_sbrk+0x40>)
 8007370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8007372:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8007374:	4807      	ldr	r0, [pc, #28]	; (8007394 <_sbrk+0x40>)
 8007376:	4c08      	ldr	r4, [pc, #32]	; (8007398 <_sbrk+0x44>)
 8007378:	6004      	str	r4, [r0, #0]
 800737a:	e7f2      	b.n	8007362 <_sbrk+0xe>
    errno = ENOMEM;
 800737c:	f01c fd84 	bl	8023e88 <__errno>
 8007380:	230c      	movs	r3, #12
 8007382:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8007384:	f04f 30ff 	mov.w	r0, #4294967295
 8007388:	e7f3      	b.n	8007372 <_sbrk+0x1e>
 800738a:	bf00      	nop
 800738c:	20008000 	.word	0x20008000
 8007390:	00001000 	.word	0x00001000
 8007394:	200006e4 	.word	0x200006e4
 8007398:	20002958 	.word	0x20002958

0800739c <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800739c:	4b02      	ldr	r3, [pc, #8]	; (80073a8 <TIMER_IF_SetTimerContext+0xc>)
 800739e:	6898      	ldr	r0, [r3, #8]
static inline uint32_t GetTimerTicks(void)
{
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80073a0:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 80073a2:	4b02      	ldr	r3, [pc, #8]	; (80073ac <TIMER_IF_SetTimerContext+0x10>)
 80073a4:	6018      	str	r0, [r3, #0]
}
 80073a6:	4770      	bx	lr
 80073a8:	40002800 	.word	0x40002800
 80073ac:	200006ec 	.word	0x200006ec

080073b0 <TIMER_IF_GetTimerContext>:
}
 80073b0:	4b01      	ldr	r3, [pc, #4]	; (80073b8 <TIMER_IF_GetTimerContext+0x8>)
 80073b2:	6818      	ldr	r0, [r3, #0]
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	200006ec 	.word	0x200006ec

080073bc <TIMER_IF_GetTimerElapsedTime>:
 80073bc:	4b03      	ldr	r3, [pc, #12]	; (80073cc <TIMER_IF_GetTimerElapsedTime+0x10>)
 80073be:	689b      	ldr	r3, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80073c0:	43db      	mvns	r3, r3
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80073c2:	4a03      	ldr	r2, [pc, #12]	; (80073d0 <TIMER_IF_GetTimerElapsedTime+0x14>)
 80073c4:	6810      	ldr	r0, [r2, #0]
}
 80073c6:	1a18      	subs	r0, r3, r0
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	40002800 	.word	0x40002800
 80073d0:	200006ec 	.word	0x200006ec

080073d4 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 80073d4:	4b04      	ldr	r3, [pc, #16]	; (80073e8 <TIMER_IF_GetTimerValue+0x14>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	b11b      	cbz	r3, 80073e2 <TIMER_IF_GetTimerValue+0xe>
 80073da:	4b04      	ldr	r3, [pc, #16]	; (80073ec <TIMER_IF_GetTimerValue+0x18>)
 80073dc:	6898      	ldr	r0, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80073de:	43c0      	mvns	r0, r0
 80073e0:	4770      	bx	lr
  uint32_t ret = 0;
 80073e2:	2000      	movs	r0, #0
}
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	200006e8 	.word	0x200006e8
 80073ec:	40002800 	.word	0x40002800

080073f0 <TIMER_IF_GetMinimumTimeout>:
}
 80073f0:	2003      	movs	r0, #3
 80073f2:	4770      	bx	lr

080073f4 <TIMER_IF_Convert_ms2Tick>:
{
 80073f4:	b508      	push	{r3, lr}
 80073f6:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80073f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073fc:	2300      	movs	r3, #0
 80073fe:	0280      	lsls	r0, r0, #10
 8007400:	0d89      	lsrs	r1, r1, #22
 8007402:	f7ff f8cf 	bl	80065a4 <__aeabi_uldivmod>
}
 8007406:	bd08      	pop	{r3, pc}

08007408 <TIMER_IF_Convert_Tick2ms>:
{
 8007408:	b410      	push	{r4}
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800740a:	0142      	lsls	r2, r0, #5
 800740c:	0ec3      	lsrs	r3, r0, #27
 800740e:	1a12      	subs	r2, r2, r0
 8007410:	f163 0300 	sbc.w	r3, r3, #0
 8007414:	0099      	lsls	r1, r3, #2
 8007416:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800741a:	0094      	lsls	r4, r2, #2
 800741c:	1822      	adds	r2, r4, r0
 800741e:	f141 0300 	adc.w	r3, r1, #0
 8007422:	00d8      	lsls	r0, r3, #3
 8007424:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 8007428:	00d1      	lsls	r1, r2, #3
 800742a:	0a8a      	lsrs	r2, r1, #10
}
 800742c:	ea42 5080 	orr.w	r0, r2, r0, lsl #22
 8007430:	bc10      	pop	{r4}
 8007432:	4770      	bx	lr

08007434 <TIMER_IF_StopTimer>:
{
 8007434:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8007436:	4b07      	ldr	r3, [pc, #28]	; (8007454 <TIMER_IF_StopTimer+0x20>)
 8007438:	2201      	movs	r2, #1
 800743a:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800743c:	4c06      	ldr	r4, [pc, #24]	; (8007458 <TIMER_IF_StopTimer+0x24>)
 800743e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007442:	4620      	mov	r0, r4
 8007444:	f009 fc8e 	bl	8010d64 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8007448:	f04f 33ff 	mov.w	r3, #4294967295
 800744c:	6323      	str	r3, [r4, #48]	; 0x30
}
 800744e:	2000      	movs	r0, #0
 8007450:	bd10      	pop	{r4, pc}
 8007452:	bf00      	nop
 8007454:	40002800 	.word	0x40002800
 8007458:	2000272c 	.word	0x2000272c

0800745c <TIMER_IF_BkUp_Write_MSBticks>:
{
 800745c:	b508      	push	{r3, lr}
 800745e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8007460:	2102      	movs	r1, #2
 8007462:	4802      	ldr	r0, [pc, #8]	; (800746c <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8007464:	f009 febf 	bl	80111e6 <HAL_RTCEx_BKUPWrite>
}
 8007468:	bd08      	pop	{r3, pc}
 800746a:	bf00      	nop
 800746c:	2000272c 	.word	0x2000272c

08007470 <TIMER_IF_Init>:
{
 8007470:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8007472:	4b0f      	ldr	r3, [pc, #60]	; (80074b0 <TIMER_IF_Init+0x40>)
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	b10b      	cbz	r3, 800747c <TIMER_IF_Init+0xc>
}
 8007478:	2000      	movs	r0, #0
 800747a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800747c:	4c0d      	ldr	r4, [pc, #52]	; (80074b4 <TIMER_IF_Init+0x44>)
 800747e:	f04f 35ff 	mov.w	r5, #4294967295
 8007482:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8007484:	f7ff fcf0 	bl	8006e68 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8007488:	f7ff ffd4 	bl	8007434 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800748c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007490:	4620      	mov	r0, r4
 8007492:	f009 fc67 	bl	8010d64 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8007496:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8007498:	4620      	mov	r0, r4
 800749a:	f009 fe43 	bl	8011124 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 800749e:	2000      	movs	r0, #0
 80074a0:	f7ff ffdc 	bl	800745c <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 80074a4:	f7ff ff7a 	bl	800739c <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 80074a8:	4b01      	ldr	r3, [pc, #4]	; (80074b0 <TIMER_IF_Init+0x40>)
 80074aa:	2201      	movs	r2, #1
 80074ac:	701a      	strb	r2, [r3, #0]
 80074ae:	e7e3      	b.n	8007478 <TIMER_IF_Init+0x8>
 80074b0:	200006e8 	.word	0x200006e8
 80074b4:	2000272c 	.word	0x2000272c

080074b8 <TIMER_IF_BkUp_Write_Seconds>:
{
 80074b8:	b508      	push	{r3, lr}
 80074ba:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80074bc:	2100      	movs	r1, #0
 80074be:	4802      	ldr	r0, [pc, #8]	; (80074c8 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 80074c0:	f009 fe91 	bl	80111e6 <HAL_RTCEx_BKUPWrite>
}
 80074c4:	bd08      	pop	{r3, pc}
 80074c6:	bf00      	nop
 80074c8:	2000272c 	.word	0x2000272c

080074cc <TIMER_IF_BkUp_Write_SubSeconds>:
{
 80074cc:	b508      	push	{r3, lr}
 80074ce:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80074d0:	2101      	movs	r1, #1
 80074d2:	4802      	ldr	r0, [pc, #8]	; (80074dc <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 80074d4:	f009 fe87 	bl	80111e6 <HAL_RTCEx_BKUPWrite>
}
 80074d8:	bd08      	pop	{r3, pc}
 80074da:	bf00      	nop
 80074dc:	2000272c 	.word	0x2000272c

080074e0 <TIMER_IF_StartTimer>:
{
 80074e0:	b510      	push	{r4, lr}
 80074e2:	b08c      	sub	sp, #48	; 0x30
 80074e4:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80074e6:	222c      	movs	r2, #44	; 0x2c
 80074e8:	2100      	movs	r1, #0
 80074ea:	a801      	add	r0, sp, #4
 80074ec:	f01c fd14 	bl	8023f18 <memset>
  TIMER_IF_StopTimer();
 80074f0:	f7ff ffa0 	bl	8007434 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80074f4:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <TIMER_IF_StartTimer+0x48>)
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80074fa:	2300      	movs	r3, #0
 80074fc:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80074fe:	43e4      	mvns	r4, r4
 8007500:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8007502:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8007504:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007508:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800750a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800750e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8007510:	2201      	movs	r2, #1
 8007512:	a901      	add	r1, sp, #4
 8007514:	4805      	ldr	r0, [pc, #20]	; (800752c <TIMER_IF_StartTimer+0x4c>)
 8007516:	f009 fd49 	bl	8010fac <HAL_RTC_SetAlarm_IT>
 800751a:	b910      	cbnz	r0, 8007522 <TIMER_IF_StartTimer+0x42>
}
 800751c:	2000      	movs	r0, #0
 800751e:	b00c      	add	sp, #48	; 0x30
 8007520:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007522:	f7ff fb73 	bl	8006c0c <Error_Handler>
 8007526:	e7f9      	b.n	800751c <TIMER_IF_StartTimer+0x3c>
 8007528:	200006ec 	.word	0x200006ec
 800752c:	2000272c 	.word	0x2000272c

08007530 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8007530:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8007532:	2102      	movs	r1, #2
 8007534:	4801      	ldr	r0, [pc, #4]	; (800753c <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8007536:	f009 fe5d 	bl	80111f4 <HAL_RTCEx_BKUPRead>
}
 800753a:	bd08      	pop	{r3, pc}
 800753c:	2000272c 	.word	0x2000272c

08007540 <TIMER_IF_GetTime>:
{
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4605      	mov	r5, r0
 8007544:	4b09      	ldr	r3, [pc, #36]	; (800756c <TIMER_IF_GetTime+0x2c>)
 8007546:	689c      	ldr	r4, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8007548:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800754a:	f7ff fff1 	bl	8007530 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800754e:	2200      	movs	r2, #0
 8007550:	1912      	adds	r2, r2, r4
 8007552:	f140 0300 	adc.w	r3, r0, #0
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8007556:	0a94      	lsrs	r4, r2, #10
 8007558:	ea44 5483 	orr.w	r4, r4, r3, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800755c:	f3c2 0009 	ubfx	r0, r2, #0, #10
 8007560:	f7ff ff52 	bl	8007408 <TIMER_IF_Convert_Tick2ms>
 8007564:	8028      	strh	r0, [r5, #0]
}
 8007566:	4620      	mov	r0, r4
 8007568:	bd38      	pop	{r3, r4, r5, pc}
 800756a:	bf00      	nop
 800756c:	40002800 	.word	0x40002800

08007570 <TIMER_IF_BkUp_Read_Seconds>:
{
 8007570:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8007572:	2100      	movs	r1, #0
 8007574:	4801      	ldr	r0, [pc, #4]	; (800757c <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8007576:	f009 fe3d 	bl	80111f4 <HAL_RTCEx_BKUPRead>
}
 800757a:	bd08      	pop	{r3, pc}
 800757c:	2000272c 	.word	0x2000272c

08007580 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8007580:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8007582:	2101      	movs	r1, #1
 8007584:	4801      	ldr	r0, [pc, #4]	; (800758c <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8007586:	f009 fe35 	bl	80111f4 <HAL_RTCEx_BKUPRead>
}
 800758a:	bd08      	pop	{r3, pc}
 800758c:	2000272c 	.word	0x2000272c

08007590 <TIMER_IF_DelayMs>:
{
 8007590:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8007592:	f7ff ff2f 	bl	80073f4 <TIMER_IF_Convert_ms2Tick>
 8007596:	4b06      	ldr	r3, [pc, #24]	; (80075b0 <TIMER_IF_DelayMs+0x20>)
 8007598:	689a      	ldr	r2, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800759a:	43d2      	mvns	r2, r2
 800759c:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <TIMER_IF_DelayMs+0x20>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80075a2:	1a9b      	subs	r3, r3, r2
 80075a4:	4283      	cmp	r3, r0
 80075a6:	d201      	bcs.n	80075ac <TIMER_IF_DelayMs+0x1c>
    __NOP();
 80075a8:	bf00      	nop
 80075aa:	e7f7      	b.n	800759c <TIMER_IF_DelayMs+0xc>
}
 80075ac:	bd08      	pop	{r3, pc}
 80075ae:	bf00      	nop
 80075b0:	40002800 	.word	0x40002800

080075b4 <HAL_RTC_AlarmAEventCallback>:
{
 80075b4:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80075b6:	f01b fb5f 	bl	8022c78 <UTIL_TIMER_IRQ_Handler>
}
 80075ba:	bd08      	pop	{r3, pc}

080075bc <HAL_RTCEx_SSRUEventCallback>:
{
 80075bc:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80075be:	f7ff ffb7 	bl	8007530 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80075c2:	3001      	adds	r0, #1
 80075c4:	f7ff ff4a 	bl	800745c <TIMER_IF_BkUp_Write_MSBticks>
}
 80075c8:	bd08      	pop	{r3, pc}
	...

080075cc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80075cc:	b508      	push	{r3, lr}
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80075ce:	4819      	ldr	r0, [pc, #100]	; (8007634 <MX_LPUART1_UART_Init+0x68>)
 80075d0:	4b19      	ldr	r3, [pc, #100]	; (8007638 <MX_LPUART1_UART_Init+0x6c>)
 80075d2:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 9600;
 80075d4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80075d8:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80075da:	2300      	movs	r3, #0
 80075dc:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80075de:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80075e0:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80075e2:	220c      	movs	r2, #12
 80075e4:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075e6:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE; 	//AT_Cmd 1.8v Error  UART_ONE_BIT_SAMPLE_DISABLE   //UART_ONE_BIT_SAMPLE_DISABLE;       //YSJ 21.08.05
 80075e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075ec:	6202      	str	r2, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80075ee:	6243      	str	r3, [r0, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80075f0:	6283      	str	r3, [r0, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
 80075f2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80075f6:	6643      	str	r3, [r0, #100]	; 0x64
  
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80075f8:	f00b f901 	bl	80127fe <HAL_UART_Init>
 80075fc:	b970      	cbnz	r0, 800761c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80075fe:	2100      	movs	r1, #0
 8007600:	480c      	ldr	r0, [pc, #48]	; (8007634 <MX_LPUART1_UART_Init+0x68>)
 8007602:	f00b faae 	bl	8012b62 <HAL_UARTEx_SetTxFifoThreshold>
 8007606:	b960      	cbnz	r0, 8007622 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007608:	2100      	movs	r1, #0
 800760a:	480a      	ldr	r0, [pc, #40]	; (8007634 <MX_LPUART1_UART_Init+0x68>)
 800760c:	f00b face 	bl	8012bac <HAL_UARTEx_SetRxFifoThreshold>
 8007610:	b950      	cbnz	r0, 8007628 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8007612:	4808      	ldr	r0, [pc, #32]	; (8007634 <MX_LPUART1_UART_Init+0x68>)
 8007614:	f00b fa81 	bl	8012b1a <HAL_UARTEx_EnableFifoMode>
 8007618:	b948      	cbnz	r0, 800762e <MX_LPUART1_UART_Init+0x62>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800761a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800761c:	f7ff faf6 	bl	8006c0c <Error_Handler>
 8007620:	e7ed      	b.n	80075fe <MX_LPUART1_UART_Init+0x32>
    Error_Handler();
 8007622:	f7ff faf3 	bl	8006c0c <Error_Handler>
 8007626:	e7ef      	b.n	8007608 <MX_LPUART1_UART_Init+0x3c>
    Error_Handler();
 8007628:	f7ff faf0 	bl	8006c0c <Error_Handler>
 800762c:	e7f1      	b.n	8007612 <MX_LPUART1_UART_Init+0x46>
    Error_Handler();
 800762e:	f7ff faed 	bl	8006c0c <Error_Handler>
}
 8007632:	e7f2      	b.n	800761a <MX_LPUART1_UART_Init+0x4e>
 8007634:	20002770 	.word	0x20002770
 8007638:	40008000 	.word	0x40008000

0800763c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800763c:	b530      	push	{r4, r5, lr}
 800763e:	b097      	sub	sp, #92	; 0x5c
 8007640:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007642:	2100      	movs	r1, #0
 8007644:	9111      	str	r1, [sp, #68]	; 0x44
 8007646:	9112      	str	r1, [sp, #72]	; 0x48
 8007648:	9113      	str	r1, [sp, #76]	; 0x4c
 800764a:	9114      	str	r1, [sp, #80]	; 0x50
 800764c:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800764e:	2238      	movs	r2, #56	; 0x38
 8007650:	a803      	add	r0, sp, #12
 8007652:	f01c fc61 	bl	8023f18 <memset>
  if(uartHandle->Instance==LPUART1)
 8007656:	6822      	ldr	r2, [r4, #0]
 8007658:	4b2a      	ldr	r3, [pc, #168]	; (8007704 <HAL_UART_MspInit+0xc8>)
 800765a:	429a      	cmp	r2, r3
 800765c:	d001      	beq.n	8007662 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800765e:	b017      	add	sp, #92	; 0x5c
 8007660:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8007662:	2320      	movs	r3, #32
 8007664:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;	//RCC_LPUART1CLKSOURCE_LSE;
 8007666:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800766a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800766c:	a803      	add	r0, sp, #12
 800766e:	f009 fa37 	bl	8010ae0 <HAL_RCCEx_PeriphCLKConfig>
 8007672:	2800      	cmp	r0, #0
 8007674:	d13f      	bne.n	80076f6 <HAL_UART_MspInit+0xba>
  SET_BIT(RCC->APB1ENR2, Periphs);
 8007676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800767a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800767c:	f042 0201 	orr.w	r2, r2, #1
 8007680:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8007682:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007684:	f002 0201 	and.w	r2, r2, #1
 8007688:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800768a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800768c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800768e:	f042 0201 	orr.w	r2, r2, #1
 8007692:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800769c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 800769e:	230c      	movs	r3, #12
 80076a0:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076a2:	2302      	movs	r3, #2
 80076a4:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076a6:	2500      	movs	r5, #0
 80076a8:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076aa:	2303      	movs	r3, #3
 80076ac:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80076ae:	2308      	movs	r3, #8
 80076b0:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076b2:	a911      	add	r1, sp, #68	; 0x44
 80076b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076b8:	f007 ffcc 	bl	800f654 <HAL_GPIO_Init>
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 80076bc:	4812      	ldr	r0, [pc, #72]	; (8007708 <HAL_UART_MspInit+0xcc>)
 80076be:	4b13      	ldr	r3, [pc, #76]	; (800770c <HAL_UART_MspInit+0xd0>)
 80076c0:	6003      	str	r3, [r0, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80076c2:	2316      	movs	r3, #22
 80076c4:	6043      	str	r3, [r0, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80076c6:	2310      	movs	r3, #16
 80076c8:	6083      	str	r3, [r0, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076ca:	60c5      	str	r5, [r0, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80076cc:	2380      	movs	r3, #128	; 0x80
 80076ce:	6103      	str	r3, [r0, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80076d0:	6145      	str	r5, [r0, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80076d2:	6185      	str	r5, [r0, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80076d4:	61c5      	str	r5, [r0, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80076d6:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80076d8:	f007 fc36 	bl	800ef48 <HAL_DMA_Init>
 80076dc:	b970      	cbnz	r0, 80076fc <HAL_UART_MspInit+0xc0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80076de:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <HAL_UART_MspInit+0xcc>)
 80076e0:	67a3      	str	r3, [r4, #120]	; 0x78
 80076e2:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 80076e4:	2200      	movs	r2, #0
 80076e6:	2102      	movs	r1, #2
 80076e8:	2026      	movs	r0, #38	; 0x26
 80076ea:	f007 fb71 	bl	800edd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80076ee:	2026      	movs	r0, #38	; 0x26
 80076f0:	f007 fba2 	bl	800ee38 <HAL_NVIC_EnableIRQ>
}
 80076f4:	e7b3      	b.n	800765e <HAL_UART_MspInit+0x22>
      Error_Handler();
 80076f6:	f7ff fa89 	bl	8006c0c <Error_Handler>
 80076fa:	e7bc      	b.n	8007676 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 80076fc:	f7ff fa86 	bl	8006c0c <Error_Handler>
 8007700:	e7ed      	b.n	80076de <HAL_UART_MspInit+0xa2>
 8007702:	bf00      	nop
 8007704:	40008000 	.word	0x40008000
 8007708:	20002800 	.word	0x20002800
 800770c:	40020058 	.word	0x40020058

08007710 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==LPUART1)
 8007710:	6802      	ldr	r2, [r0, #0]
 8007712:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <HAL_UART_MspDeInit+0x34>)
 8007714:	429a      	cmp	r2, r3
 8007716:	d000      	beq.n	800771a <HAL_UART_MspDeInit+0xa>
 8007718:	4770      	bx	lr
{
 800771a:	b510      	push	{r4, lr}
 800771c:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 800771e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007722:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8007724:	f023 0301 	bic.w	r3, r3, #1
 8007728:	65d3      	str	r3, [r2, #92]	; 0x5c

    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800772a:	210c      	movs	r1, #12
 800772c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007730:	f008 f848 	bl	800f7c4 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8007734:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007736:	f007 fc79 	bl	800f02c <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 800773a:	2026      	movs	r0, #38	; 0x26
 800773c:	f007 fb8a 	bl	800ee54 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}
 8007740:	bd10      	pop	{r4, pc}
 8007742:	bf00      	nop
 8007744:	40008000 	.word	0x40008000

08007748 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8007748:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800774a:	4b07      	ldr	r3, [pc, #28]	; (8007768 <vcom_Init+0x20>)
 800774c:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 800774e:	f7ff f9a5 	bl	8006a9c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8007752:	f7ff ff3b 	bl	80075cc <MX_LPUART1_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007756:	4a05      	ldr	r2, [pc, #20]	; (800776c <vcom_Init+0x24>)
 8007758:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800775c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007760:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_28);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8007764:	2000      	movs	r0, #0
 8007766:	bd08      	pop	{r3, pc}
 8007768:	200006f4 	.word	0x200006f4
 800776c:	58000800 	.word	0x58000800

08007770 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8007770:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8007772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007778:	f042 0201 	orr.w	r2, r2, #1
 800777c:	63da      	str	r2, [r3, #60]	; 0x3c
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 800777e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007780:	f022 0201 	bic.w	r2, r2, #1
 8007784:	63da      	str	r2, [r3, #60]	; 0x3c
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_LPUART1_FORCE_RESET();
  __HAL_RCC_LPUART1_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&hlpuart1);
 8007786:	4804      	ldr	r0, [pc, #16]	; (8007798 <vcom_DeInit+0x28>)
 8007788:	f7ff ffc2 	bl	8007710 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800778c:	200f      	movs	r0, #15
 800778e:	f007 fb61 	bl	800ee54 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8007792:	2000      	movs	r0, #0
 8007794:	bd08      	pop	{r3, pc}
 8007796:	bf00      	nop
 8007798:	20002770 	.word	0x20002770

0800779c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800779c:	b508      	push	{r3, lr}
 800779e:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 80077a0:	4601      	mov	r1, r0
 80077a2:	4802      	ldr	r0, [pc, #8]	; (80077ac <vcom_Trace_DMA+0x10>)
 80077a4:	f00a f8f6 	bl	8011994 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80077a8:	2000      	movs	r0, #0
 80077aa:	bd08      	pop	{r3, pc}
 80077ac:	20002770 	.word	0x20002770

080077b0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80077b0:	b510      	push	{r4, lr}
 80077b2:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80077b4:	4b12      	ldr	r3, [pc, #72]	; (8007800 <vcom_ReceiveInit+0x50>)
 80077b6:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80077b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80077bc:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection);
 80077be:	ab02      	add	r3, sp, #8
 80077c0:	e913 0006 	ldmdb	r3, {r1, r2}
 80077c4:	480f      	ldr	r0, [pc, #60]	; (8007804 <vcom_ReceiveInit+0x54>)
 80077c6:	f00b f950 	bl	8012a6a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_BUSY) == SET);
 80077ca:	4b0e      	ldr	r3, [pc, #56]	; (8007804 <vcom_ReceiveInit+0x54>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80077d4:	d1f9      	bne.n	80077ca <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_REACK) == RESET);
 80077d6:	69da      	ldr	r2, [r3, #28]
 80077d8:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80077dc:	d0fb      	beq.n	80077d6 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_WUF);
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80077e4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&hlpuart1);
 80077e6:	4c07      	ldr	r4, [pc, #28]	; (8007804 <vcom_ReceiveInit+0x54>)
 80077e8:	4620      	mov	r0, r4
 80077ea:	f00b f97f 	bl	8012aec <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&hlpuart1, &charRx, 1);
 80077ee:	2201      	movs	r2, #1
 80077f0:	4905      	ldr	r1, [pc, #20]	; (8007808 <vcom_ReceiveInit+0x58>)
 80077f2:	4620      	mov	r0, r4
 80077f4:	f00b f8ca 	bl	801298c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80077f8:	2000      	movs	r0, #0
 80077fa:	b002      	add	sp, #8
 80077fc:	bd10      	pop	{r4, pc}
 80077fe:	bf00      	nop
 8007800:	200006f0 	.word	0x200006f0
 8007804:	20002770 	.word	0x20002770
 8007808:	20002860 	.word	0x20002860

0800780c <vcom_Resume>:

void vcom_Resume(void)
{
 800780c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800780e:	4804      	ldr	r0, [pc, #16]	; (8007820 <vcom_Resume+0x14>)
 8007810:	f007 fb9a 	bl	800ef48 <HAL_DMA_Init>
 8007814:	b900      	cbnz	r0, 8007818 <vcom_Resume+0xc>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8007816:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007818:	f7ff f9f8 	bl	8006c0c <Error_Handler>
}
 800781c:	e7fb      	b.n	8007816 <vcom_Resume+0xa>
 800781e:	bf00      	nop
 8007820:	20002800 	.word	0x20002800

08007824 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *hlpuart1)
{
 8007824:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8007826:	4b02      	ldr	r3, [pc, #8]	; (8007830 <HAL_UART_TxCpltCallback+0xc>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2000      	movs	r0, #0
 800782c:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800782e:	bd08      	pop	{r3, pc}
 8007830:	200006f4 	.word	0x200006f4

08007834 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hlpuart1)
{
 8007834:	b510      	push	{r4, lr}
 8007836:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == hlpuart1->ErrorCode))
 8007838:	4b07      	ldr	r3, [pc, #28]	; (8007858 <HAL_UART_RxCpltCallback+0x24>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	b12b      	cbz	r3, 800784a <HAL_UART_RxCpltCallback+0x16>
 800783e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007842:	b912      	cbnz	r2, 800784a <HAL_UART_RxCpltCallback+0x16>
  {
    RxCpltCallback(&charRx, 1, 0);
 8007844:	2101      	movs	r1, #1
 8007846:	4805      	ldr	r0, [pc, #20]	; (800785c <HAL_UART_RxCpltCallback+0x28>)
 8007848:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(hlpuart1, &charRx, 1);
 800784a:	2201      	movs	r2, #1
 800784c:	4903      	ldr	r1, [pc, #12]	; (800785c <HAL_UART_RxCpltCallback+0x28>)
 800784e:	4620      	mov	r0, r4
 8007850:	f00b f89c 	bl	801298c <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8007854:	bd10      	pop	{r4, pc}
 8007856:	bf00      	nop
 8007858:	200006f0 	.word	0x200006f0
 800785c:	20002860 	.word	0x20002860

08007860 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8007860:	b508      	push	{r3, lr}
  /* USER CODE END MX_LoRaWAN_Init_1 */
  //SystemApp_Init(ACTIVE_APP_LORAWAN);
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8007862:	f000 f829 	bl	80078b8 <LoRaWAN_Init>
#endif /* FEATURE_LORA_API_MODE */

  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8007866:	bd08      	pop	{r3, pc}

08007868 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8007868:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800786a:	f04f 30ff 	mov.w	r0, #4294967295
 800786e:	f01a fe4b 	bl	8022508 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8007872:	bd08      	pop	{r3, pc}

08007874 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(int flag, LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8007874:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 8007876:	460b      	mov	r3, r1
 8007878:	b119      	cbz	r1, 8007882 <OnRxData+0xe>
  {
    AT_event_receive(flag, appData, params);
 800787a:	4619      	mov	r1, r3
 800787c:	f000 fa02 	bl	8007c84 <AT_event_receive>
  }
  /* USER CODE END OnRxData_1 */
}
 8007880:	bd08      	pop	{r3, pc}
  if ((appData != NULL) || (params != NULL))
 8007882:	2a00      	cmp	r2, #0
 8007884:	d1f9      	bne.n	800787a <OnRxData+0x6>
 8007886:	e7fb      	b.n	8007880 <OnRxData+0xc>

08007888 <OnTxData>:
/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 8007888:	b118      	cbz	r0, 8007892 <OnTxData+0xa>
{
 800788a:	b508      	push	{r3, lr}
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
    {

    }
    AT_event_confirm(params);
 800788c:	f000 faa2 	bl	8007dd4 <AT_event_confirm>
  }
  /* USER CODE END OnTxData_1 */
}
 8007890:	bd08      	pop	{r3, pc}
 8007892:	4770      	bx	lr

08007894 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 8007894:	b118      	cbz	r0, 800789e <OnJoinRequest+0xa>
{
 8007896:	b508      	push	{r3, lr}
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
    {

    }
    AT_event_join(joinParams);
 8007898:	f000 f9dc 	bl	8007c54 <AT_event_join>
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800789c:	bd08      	pop	{r3, pc}
 800789e:	4770      	bx	lr

080078a0 <OnMacProcessNotify>:

  /* USER CODE END CmdProcessNotify_2 */
}

static void OnMacProcessNotify(void)
{
 80078a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80078a2:	2100      	movs	r1, #0
 80078a4:	2002      	movs	r0, #2
 80078a6:	f01a fddf 	bl	8022468 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 80078aa:	bd08      	pop	{r3, pc}

080078ac <CmdProcessNotify>:
{
 80078ac:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_Vcom), 0);
 80078ae:	2100      	movs	r1, #0
 80078b0:	2001      	movs	r0, #1
 80078b2:	f01a fdd9 	bl	8022468 <UTIL_SEQ_SetTask>
}
 80078b6:	bd08      	pop	{r3, pc}

080078b8 <LoRaWAN_Init>:
{
 80078b8:	b500      	push	{lr}
 80078ba:	b085      	sub	sp, #20
  CMD_Init_L(CmdProcessNotify);
 80078bc:	4830      	ldr	r0, [pc, #192]	; (8007980 <LoRaWAN_Init+0xc8>)
 80078be:	f001 feef 	bl	80096a0 <CMD_Init_L>
  APP_PPRINTF(">> APP_VERSION:        V%X.%X.%X\r\n",
 80078c2:	2301      	movs	r3, #1
 80078c4:	9302      	str	r3, [sp, #8]
 80078c6:	2000      	movs	r0, #0
 80078c8:	9001      	str	r0, [sp, #4]
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	4b2d      	ldr	r3, [pc, #180]	; (8007984 <LoRaWAN_Init+0xcc>)
 80078ce:	4602      	mov	r2, r0
 80078d0:	4601      	mov	r1, r0
 80078d2:	f01a fca3 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d1f3      	bne.n	80078c2 <LoRaWAN_Init+0xa>
  APP_PPRINTF(">> MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 80078da:	2000      	movs	r0, #0
 80078dc:	9002      	str	r0, [sp, #8]
 80078de:	2303      	movs	r3, #3
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	2302      	movs	r3, #2
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	4b28      	ldr	r3, [pc, #160]	; (8007988 <LoRaWAN_Init+0xd0>)
 80078e8:	4602      	mov	r2, r0
 80078ea:	4601      	mov	r1, r0
 80078ec:	f01a fc96 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d1f2      	bne.n	80078da <LoRaWAN_Init+0x22>
  APP_PPRINTF(">> MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 80078f4:	2000      	movs	r0, #0
 80078f6:	9002      	str	r0, [sp, #8]
 80078f8:	2301      	movs	r3, #1
 80078fa:	9301      	str	r3, [sp, #4]
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	4b23      	ldr	r3, [pc, #140]	; (800798c <LoRaWAN_Init+0xd4>)
 8007900:	4602      	mov	r2, r0
 8007902:	4601      	mov	r1, r0
 8007904:	f01a fc8a 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8007908:	2800      	cmp	r0, #0
 800790a:	d1f3      	bne.n	80078f4 <LoRaWAN_Init+0x3c>
 800790c:	e008      	b.n	8007920 <LoRaWAN_Init+0x68>
  APP_PPRINTF(">> TXPOWER MODE :   %s \r\n", (RBI_GetTxConfig() == RBI_CONF_RFO_HP ? "HIGH POWER" : "LOWPOWER"));
 800790e:	4b20      	ldr	r3, [pc, #128]	; (8007990 <LoRaWAN_Init+0xd8>)
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	4b20      	ldr	r3, [pc, #128]	; (8007994 <LoRaWAN_Init+0xdc>)
 8007914:	2200      	movs	r2, #0
 8007916:	4611      	mov	r1, r2
 8007918:	4610      	mov	r0, r2
 800791a:	f01a fc7f 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800791e:	b128      	cbz	r0, 800792c <LoRaWAN_Init+0x74>
 8007920:	f7ff fa9c 	bl	8006e5c <RBI_GetTxConfig>
 8007924:	2802      	cmp	r0, #2
 8007926:	d0f2      	beq.n	800790e <LoRaWAN_Init+0x56>
 8007928:	4b1b      	ldr	r3, [pc, #108]	; (8007998 <LoRaWAN_Init+0xe0>)
 800792a:	e7f1      	b.n	8007910 <LoRaWAN_Init+0x58>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800792c:	4a1b      	ldr	r2, [pc, #108]	; (800799c <LoRaWAN_Init+0xe4>)
 800792e:	2100      	movs	r1, #0
 8007930:	2002      	movs	r0, #2
 8007932:	f01a fe9d 	bl	8022670 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_Vcom), UTIL_SEQ_RFU, CMD_Process_L);
 8007936:	4a1a      	ldr	r2, [pc, #104]	; (80079a0 <LoRaWAN_Init+0xe8>)
 8007938:	2100      	movs	r1, #0
 800793a:	2001      	movs	r0, #1
 800793c:	f01a fe98 	bl	8022670 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8007940:	f002 fd4e 	bl	800a3e0 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 8007944:	4817      	ldr	r0, [pc, #92]	; (80079a4 <LoRaWAN_Init+0xec>)
 8007946:	f00b fe75 	bl	8013634 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 800794a:	4817      	ldr	r0, [pc, #92]	; (80079a8 <LoRaWAN_Init+0xf0>)
 800794c:	f00b fa7c 	bl	8012e48 <LmHandlerConfigure>
  LmHandlerRequestClass((DeviceClass_t)E2P_LORA_Read_Class());
 8007950:	f002 fbe0 	bl	800a114 <E2P_LORA_Read_Class>
 8007954:	b2c0      	uxtb	r0, r0
 8007956:	f00b fbed 	bl	8013134 <LmHandlerRequestClass>
  APP_PPRINTF("\r\n\r\n");
 800795a:	4b14      	ldr	r3, [pc, #80]	; (80079ac <LoRaWAN_Init+0xf4>)
 800795c:	2200      	movs	r2, #0
 800795e:	4611      	mov	r1, r2
 8007960:	4610      	mov	r0, r2
 8007962:	f01a fc5b 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8007966:	2800      	cmp	r0, #0
 8007968:	d1f7      	bne.n	800795a <LoRaWAN_Init+0xa2>
  APP_PPRINTF("BOOTALERT\r\n");
 800796a:	4b11      	ldr	r3, [pc, #68]	; (80079b0 <LoRaWAN_Init+0xf8>)
 800796c:	2200      	movs	r2, #0
 800796e:	4611      	mov	r1, r2
 8007970:	4610      	mov	r0, r2
 8007972:	f01a fc53 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8007976:	2800      	cmp	r0, #0
 8007978:	d1f7      	bne.n	800796a <LoRaWAN_Init+0xb2>
}
 800797a:	b005      	add	sp, #20
 800797c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007980:	080078ad 	.word	0x080078ad
 8007984:	08024e40 	.word	0x08024e40
 8007988:	08024e64 	.word	0x08024e64
 800798c:	08024e88 	.word	0x08024e88
 8007990:	08024e34 	.word	0x08024e34
 8007994:	08024eac 	.word	0x08024eac
 8007998:	08024e28 	.word	0x08024e28
 800799c:	080130e1 	.word	0x080130e1
 80079a0:	080096e5 	.word	0x080096e5
 80079a4:	200000b4 	.word	0x200000b4
 80079a8:	200000e8 	.word	0x200000e8
 80079ac:	08027264 	.word	0x08027264
 80079b0:	08024ec8 	.word	0x08024ec8

080079b4 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80079b4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80079b8:	4905      	ldr	r1, [pc, #20]	; (80079d0 <__NVIC_SystemReset+0x1c>)
 80079ba:	68ca      	ldr	r2, [r1, #12]
 80079bc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80079c0:	4b04      	ldr	r3, [pc, #16]	; (80079d4 <__NVIC_SystemReset+0x20>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60cb      	str	r3, [r1, #12]
 80079c6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80079ca:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80079cc:	e7fd      	b.n	80079ca <__NVIC_SystemReset+0x16>
 80079ce:	bf00      	nop
 80079d0:	e000ed00 	.word	0xe000ed00
 80079d4:	05fa0004 	.word	0x05fa0004

080079d8 <print_u>:

  /* USER CODE END print_d_2 */
}

static void print_u(uint32_t value)
{
 80079d8:	b500      	push	{lr}
 80079da:	b083      	sub	sp, #12
  /* USER CODE BEGIN print_u_1 */

  /* USER CODE END print_u_1 */
  AT_PRINTF("%u\r\n", value);
 80079dc:	9000      	str	r0, [sp, #0]
 80079de:	4b04      	ldr	r3, [pc, #16]	; (80079f0 <print_u+0x18>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	4611      	mov	r1, r2
 80079e4:	4610      	mov	r0, r2
 80079e6:	f01a fc19 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE BEGIN print_u_2 */

  /* USER CODE END print_u_2 */
}
 80079ea:	b003      	add	sp, #12
 80079ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80079f0:	08024f60 	.word	0x08024f60

080079f4 <print_8_02x>:
{
 80079f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079f6:	b089      	sub	sp, #36	; 0x24
  AT_PRINTF("%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80079f8:	7803      	ldrb	r3, [r0, #0]
 80079fa:	7842      	ldrb	r2, [r0, #1]
 80079fc:	7881      	ldrb	r1, [r0, #2]
 80079fe:	78c4      	ldrb	r4, [r0, #3]
 8007a00:	7905      	ldrb	r5, [r0, #4]
 8007a02:	7946      	ldrb	r6, [r0, #5]
 8007a04:	7987      	ldrb	r7, [r0, #6]
 8007a06:	79c0      	ldrb	r0, [r0, #7]
 8007a08:	9007      	str	r0, [sp, #28]
 8007a0a:	9706      	str	r7, [sp, #24]
 8007a0c:	9605      	str	r6, [sp, #20]
 8007a0e:	9504      	str	r5, [sp, #16]
 8007a10:	9403      	str	r4, [sp, #12]
 8007a12:	9102      	str	r1, [sp, #8]
 8007a14:	9201      	str	r2, [sp, #4]
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	4b03      	ldr	r3, [pc, #12]	; (8007a28 <print_8_02x+0x34>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	4610      	mov	r0, r2
 8007a20:	f01a fbfc 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8007a24:	b009      	add	sp, #36	; 0x24
 8007a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a28:	0802824c 	.word	0x0802824c

08007a2c <print_16_02x>:
{
 8007a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a30:	b093      	sub	sp, #76	; 0x4c
  AT_PRINTF("%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8007a32:	7803      	ldrb	r3, [r0, #0]
 8007a34:	9310      	str	r3, [sp, #64]	; 0x40
 8007a36:	7842      	ldrb	r2, [r0, #1]
 8007a38:	9211      	str	r2, [sp, #68]	; 0x44
 8007a3a:	7883      	ldrb	r3, [r0, #2]
 8007a3c:	78c2      	ldrb	r2, [r0, #3]
 8007a3e:	7901      	ldrb	r1, [r0, #4]
 8007a40:	7944      	ldrb	r4, [r0, #5]
 8007a42:	7985      	ldrb	r5, [r0, #6]
 8007a44:	79c6      	ldrb	r6, [r0, #7]
 8007a46:	7a07      	ldrb	r7, [r0, #8]
 8007a48:	f890 c009 	ldrb.w	ip, [r0, #9]
 8007a4c:	f890 e00a 	ldrb.w	lr, [r0, #10]
 8007a50:	f890 800b 	ldrb.w	r8, [r0, #11]
 8007a54:	f890 900c 	ldrb.w	r9, [r0, #12]
 8007a58:	f890 a00d 	ldrb.w	sl, [r0, #13]
 8007a5c:	f890 b00e 	ldrb.w	fp, [r0, #14]
 8007a60:	7bc0      	ldrb	r0, [r0, #15]
 8007a62:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a64:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007a68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007a6c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007a70:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8007a74:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8007a78:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8007a7c:	9708      	str	r7, [sp, #32]
 8007a7e:	9607      	str	r6, [sp, #28]
 8007a80:	9506      	str	r5, [sp, #24]
 8007a82:	9405      	str	r4, [sp, #20]
 8007a84:	9104      	str	r1, [sp, #16]
 8007a86:	9203      	str	r2, [sp, #12]
 8007a88:	9302      	str	r3, [sp, #8]
 8007a8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007a8c:	9201      	str	r2, [sp, #4]
 8007a8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	4b04      	ldr	r3, [pc, #16]	; (8007aa4 <print_16_02x+0x78>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	4611      	mov	r1, r2
 8007a98:	4610      	mov	r0, r2
 8007a9a:	f01a fbbf 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8007a9e:	b013      	add	sp, #76	; 0x4c
 8007aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa4:	08024f68 	.word	0x08024f68

08007aa8 <print_uint32_as_02x>:
{
 8007aa8:	b500      	push	{lr}
 8007aaa:	b085      	sub	sp, #20
  AT_PRINTF("%02X:%02X:%02X:%02X\r\n",
 8007aac:	0e03      	lsrs	r3, r0, #24
 8007aae:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8007ab2:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8007ab6:	b2c0      	uxtb	r0, r0
 8007ab8:	9003      	str	r0, [sp, #12]
 8007aba:	9102      	str	r1, [sp, #8]
 8007abc:	9201      	str	r2, [sp, #4]
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <print_uint32_as_02x+0x2c>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	f01a fba8 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8007acc:	b005      	add	sp, #20
 8007ace:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ad2:	bf00      	nop
 8007ad4:	08028284 	.word	0x08028284

08007ad8 <print_d>:
{
 8007ad8:	b500      	push	{lr}
 8007ada:	b083      	sub	sp, #12
  AT_PRINTF("%d\r\n", value);
 8007adc:	9000      	str	r0, [sp, #0]
 8007ade:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <print_d+0x18>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	f01a fb99 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8007aea:	b003      	add	sp, #12
 8007aec:	f85d fb04 	ldr.w	pc, [sp], #4
 8007af0:	0802511c 	.word	0x0802511c

08007af4 <sscanf_16_hhx>:
{
 8007af4:	b500      	push	{lr}
 8007af6:	b08f      	sub	sp, #60	; 0x3c
 8007af8:	460a      	mov	r2, r1
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8007afa:	f101 030f 	add.w	r3, r1, #15
 8007afe:	930d      	str	r3, [sp, #52]	; 0x34
 8007b00:	f101 030e 	add.w	r3, r1, #14
 8007b04:	930c      	str	r3, [sp, #48]	; 0x30
 8007b06:	f101 030d 	add.w	r3, r1, #13
 8007b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b0c:	f101 030c 	add.w	r3, r1, #12
 8007b10:	930a      	str	r3, [sp, #40]	; 0x28
 8007b12:	f101 030b 	add.w	r3, r1, #11
 8007b16:	9309      	str	r3, [sp, #36]	; 0x24
 8007b18:	f101 030a 	add.w	r3, r1, #10
 8007b1c:	9308      	str	r3, [sp, #32]
 8007b1e:	f101 0309 	add.w	r3, r1, #9
 8007b22:	9307      	str	r3, [sp, #28]
 8007b24:	f101 0308 	add.w	r3, r1, #8
 8007b28:	9306      	str	r3, [sp, #24]
 8007b2a:	1dcb      	adds	r3, r1, #7
 8007b2c:	9305      	str	r3, [sp, #20]
 8007b2e:	1d8b      	adds	r3, r1, #6
 8007b30:	9304      	str	r3, [sp, #16]
 8007b32:	1d4b      	adds	r3, r1, #5
 8007b34:	9303      	str	r3, [sp, #12]
 8007b36:	1d0b      	adds	r3, r1, #4
 8007b38:	9302      	str	r3, [sp, #8]
 8007b3a:	1ccb      	adds	r3, r1, #3
 8007b3c:	9301      	str	r3, [sp, #4]
 8007b3e:	1c8b      	adds	r3, r1, #2
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	1c4b      	adds	r3, r1, #1
 8007b44:	4902      	ldr	r1, [pc, #8]	; (8007b50 <sscanf_16_hhx+0x5c>)
 8007b46:	f01b fad5 	bl	80230f4 <tiny_sscanf>
}
 8007b4a:	b00f      	add	sp, #60	; 0x3c
 8007b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b50:	08024fbc 	.word	0x08024fbc

08007b54 <sscanf_uint32_as_hhx>:
{
 8007b54:	b500      	push	{lr}
 8007b56:	b083      	sub	sp, #12
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx",
 8007b58:	9101      	str	r1, [sp, #4]
 8007b5a:	1c4b      	adds	r3, r1, #1
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	1c8b      	adds	r3, r1, #2
 8007b60:	1cca      	adds	r2, r1, #3
 8007b62:	4903      	ldr	r1, [pc, #12]	; (8007b70 <sscanf_uint32_as_hhx+0x1c>)
 8007b64:	f01b fac6 	bl	80230f4 <tiny_sscanf>
}
 8007b68:	b003      	add	sp, #12
 8007b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b6e:	bf00      	nop
 8007b70:	08024ff8 	.word	0x08024ff8

08007b74 <CertifSend>:

  /* USER CODE END OnCertifTimer_2 */
}

static void CertifSend(void)
{
 8007b74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CertifSend_1 */

  /* USER CODE END CertifSend_1 */
  AppData.Buffer[0] = 0x43;
 8007b76:	4b0b      	ldr	r3, [pc, #44]	; (8007ba4 <CertifSend+0x30>)
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	2143      	movs	r1, #67	; 0x43
 8007b7c:	7011      	strb	r1, [r2, #0]
  AppData.BufferSize = 1;
 8007b7e:	2201      	movs	r2, #1
 8007b80:	705a      	strb	r2, [r3, #1]
  AppData.Port = 99;
 8007b82:	2263      	movs	r2, #99	; 0x63
 8007b84:	701a      	strb	r2, [r3, #0]

  /* Restart Tx to prevent a previous Join Failed */
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8007b86:	f00b fab3 	bl	80130f0 <LmHandlerJoinStatus>
 8007b8a:	2801      	cmp	r0, #1
 8007b8c:	d106      	bne.n	8007b9c <CertifSend+0x28>
  {
    UTIL_TIMER_Start(&TxCertifTimer);
  }
  LmHandlerSend(&AppData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, false);
 8007b8e:	2300      	movs	r3, #0
 8007b90:	461a      	mov	r2, r3
 8007b92:	4619      	mov	r1, r3
 8007b94:	4803      	ldr	r0, [pc, #12]	; (8007ba4 <CertifSend+0x30>)
 8007b96:	f00b fb6d 	bl	8013274 <LmHandlerSend>
}
 8007b9a:	bd08      	pop	{r3, pc}
    UTIL_TIMER_Start(&TxCertifTimer);
 8007b9c:	4802      	ldr	r0, [pc, #8]	; (8007ba8 <CertifSend+0x34>)
 8007b9e:	f01b f80b 	bl	8022bb8 <UTIL_TIMER_Start>
 8007ba2:	e7f4      	b.n	8007b8e <CertifSend+0x1a>
 8007ba4:	200000f8 	.word	0x200000f8
 8007ba8:	200007ec 	.word	0x200007ec

08007bac <OnCertifTimer>:
{
 8007bac:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaCertifTx), CFG_SEQ_Prio_0);
 8007bae:	2100      	movs	r1, #0
 8007bb0:	2004      	movs	r0, #4
 8007bb2:	f01a fc59 	bl	8022468 <UTIL_SEQ_SetTask>
}
 8007bb6:	bd08      	pop	{r3, pc}

08007bb8 <AT_return_error_l>:
}
 8007bb8:	2001      	movs	r0, #1
 8007bba:	4770      	bx	lr

08007bbc <AT_selection_get_l>:
{
 8007bbc:	b508      	push	{r3, lr}
  if(E2P_Read_Mode() == 0 && E2P_LORA_Read_Mode() == 1)
 8007bbe:	f005 fc04 	bl	800d3ca <E2P_Read_Mode>
 8007bc2:	b918      	cbnz	r0, 8007bcc <AT_selection_get_l+0x10>
 8007bc4:	f002 fac0 	bl	800a148 <E2P_LORA_Read_Mode>
 8007bc8:	2801      	cmp	r0, #1
 8007bca:	d004      	beq.n	8007bd6 <AT_selection_get_l+0x1a>
	print_u(ACTIVE_APP_SIGFOX);
 8007bcc:	2000      	movs	r0, #0
 8007bce:	f7ff ff03 	bl	80079d8 <print_u>
}
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	bd08      	pop	{r3, pc}
  	print_u(ACTIVE_APP_LORAWAN);
 8007bd6:	f7ff feff 	bl	80079d8 <print_u>
 8007bda:	e7fa      	b.n	8007bd2 <AT_selection_get_l+0x16>

08007bdc <AT_selection_set_l>:
{
 8007bdc:	b500      	push	{lr}
 8007bde:	b083      	sub	sp, #12
	if (1 != tiny_sscanf(buf, "%u", &selection))
 8007be0:	aa01      	add	r2, sp, #4
 8007be2:	4911      	ldr	r1, [pc, #68]	; (8007c28 <AT_selection_set_l+0x4c>)
 8007be4:	f01b fa86 	bl	80230f4 <tiny_sscanf>
 8007be8:	2801      	cmp	r0, #1
 8007bea:	d009      	beq.n	8007c00 <AT_selection_set_l+0x24>
		AT_PRINTF("AT+MODE: LoRa/SigFox Selection error\r\n");
 8007bec:	4b0f      	ldr	r3, [pc, #60]	; (8007c2c <AT_selection_set_l+0x50>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	f01a fb12 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8007bf8:	2002      	movs	r0, #2
 8007bfa:	b003      	add	sp, #12
 8007bfc:	f85d fb04 	ldr.w	pc, [sp], #4
	if(selection == ACTIVE_APP_LORAWAN)
 8007c00:	9b01      	ldr	r3, [sp, #4]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d002      	beq.n	8007c0c <AT_selection_set_l+0x30>
	else if(selection == ACTIVE_APP_SIGFOX)
 8007c06:	b13b      	cbz	r3, 8007c18 <AT_selection_set_l+0x3c>
	NVIC_SystemReset();
 8007c08:	f7ff fed4 	bl	80079b4 <__NVIC_SystemReset>
      E2P_LORA_Write_Mode(1);
 8007c0c:	f002 f918 	bl	8009e40 <E2P_LORA_Write_Mode>
      E2P_Write_Mode(0);
 8007c10:	2000      	movs	r0, #0
 8007c12:	f005 fbe7 	bl	800d3e4 <E2P_Write_Mode>
 8007c16:	e7f7      	b.n	8007c08 <AT_selection_set_l+0x2c>
		E2P_LORA_Write_Mode(0);
 8007c18:	2000      	movs	r0, #0
 8007c1a:	f002 f911 	bl	8009e40 <E2P_LORA_Write_Mode>
		E2P_Write_Mode(1);
 8007c1e:	2001      	movs	r0, #1
 8007c20:	f005 fbe0 	bl	800d3e4 <E2P_Write_Mode>
 8007c24:	e7f0      	b.n	8007c08 <AT_selection_set_l+0x2c>
 8007c26:	bf00      	nop
 8007c28:	0802500c 	.word	0x0802500c
 8007c2c:	08025010 	.word	0x08025010

08007c30 <AT_fw_set_l>:
{
 8007c30:	b508      	push	{r3, lr}
  E2P_LORA_FW_Write_Mode(1);
 8007c32:	2001      	movs	r0, #1
 8007c34:	f002 f90f 	bl	8009e56 <E2P_LORA_FW_Write_Mode>
  E2P_FW_Write_Mode(1);
 8007c38:	2001      	movs	r0, #1
 8007c3a:	f005 fbde 	bl	800d3fa <E2P_FW_Write_Mode>
  AT_PRINTF("FW MODE\r\n");
 8007c3e:	4b04      	ldr	r3, [pc, #16]	; (8007c50 <AT_fw_set_l+0x20>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	4611      	mov	r1, r2
 8007c44:	4610      	mov	r0, r2
 8007c46:	f01a fae9 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  NVIC_SystemReset();
 8007c4a:	f7ff feb3 	bl	80079b4 <__NVIC_SystemReset>
 8007c4e:	bf00      	nop
 8007c50:	08025038 	.word	0x08025038

08007c54 <AT_event_join>:
{
 8007c54:	b508      	push	{r3, lr}
  if ((params != NULL) && (params->Status == LORAMAC_HANDLER_SUCCESS))
 8007c56:	b110      	cbz	r0, 8007c5e <AT_event_join+0xa>
 8007c58:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8007c5c:	b133      	cbz	r3, 8007c6c <AT_event_join+0x18>
    AT_PRINTF("+EVT:JOIN FAILED\r\n");
 8007c5e:	4b07      	ldr	r3, [pc, #28]	; (8007c7c <AT_event_join+0x28>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	4611      	mov	r1, r2
 8007c64:	4610      	mov	r0, r2
 8007c66:	f01a fad9 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8007c6a:	bd08      	pop	{r3, pc}
    AT_PRINTF("+EVT:JOINED\r\n");
 8007c6c:	4b04      	ldr	r3, [pc, #16]	; (8007c80 <AT_event_join+0x2c>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	4611      	mov	r1, r2
 8007c72:	4610      	mov	r0, r2
 8007c74:	f01a fad2 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8007c78:	e7f7      	b.n	8007c6a <AT_event_join+0x16>
 8007c7a:	bf00      	nop
 8007c7c:	08025054 	.word	0x08025054
 8007c80:	08025044 	.word	0x08025044

08007c84 <AT_event_receive>:
{
 8007c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c88:	b08c      	sub	sp, #48	; 0x30
 8007c8a:	4607      	mov	r7, r0
 8007c8c:	468c      	mov	ip, r1
 8007c8e:	4616      	mov	r6, r2
  const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };
 8007c90:	ac06      	add	r4, sp, #24
 8007c92:	4d48      	ldr	r5, [pc, #288]	; (8007db4 <AT_event_receive+0x130>)
 8007c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007c9c:	e884 0003 	stmia.w	r4, {r0, r1}
  if ((appData != NULL) && (appData->BufferSize > 0))
 8007ca0:	f1bc 0f00 	cmp.w	ip, #0
 8007ca4:	d037      	beq.n	8007d16 <AT_event_receive+0x92>
 8007ca6:	46e0      	mov	r8, ip
 8007ca8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8007cac:	b39d      	cbz	r5, 8007d16 <AT_event_receive+0x92>
    if (LORAWAN_APP_DATA_BUFFER_MAX_SIZE <= appData->BufferSize)
 8007cae:	2df1      	cmp	r5, #241	; 0xf1
 8007cb0:	d900      	bls.n	8007cb4 <AT_event_receive+0x30>
      ReceivedDataSize = LORAWAN_APP_DATA_BUFFER_MAX_SIZE;
 8007cb2:	25f2      	movs	r5, #242	; 0xf2
	if(flag == 1) //Confirmed Data Receive
 8007cb4:	2f01      	cmp	r7, #1
 8007cb6:	d002      	beq.n	8007cbe <AT_event_receive+0x3a>
	else if(flag == 0)
 8007cb8:	b167      	cbz	r7, 8007cd4 <AT_event_receive+0x50>
      ReceivedDataSize = LORAWAN_APP_DATA_BUFFER_MAX_SIZE;
 8007cba:	2400      	movs	r4, #0
 8007cbc:	e021      	b.n	8007d02 <AT_event_receive+0x7e>
	  AT_PRINTF("+EVT:RECV_CONFIRMED:%d:%02X:", appData->Port, ReceivedDataSize);
 8007cbe:	f898 3000 	ldrb.w	r3, [r8]
 8007cc2:	9501      	str	r5, [sp, #4]
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	4b3c      	ldr	r3, [pc, #240]	; (8007db8 <AT_event_receive+0x134>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	4611      	mov	r1, r2
 8007ccc:	4610      	mov	r0, r2
 8007cce:	f01a faa5 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8007cd2:	e7f2      	b.n	8007cba <AT_event_receive+0x36>
	  AT_PRINTF("+EVT:RECV_UNCONFIRMED:%d:%02X:", appData->Port, ReceivedDataSize);
 8007cd4:	f898 3000 	ldrb.w	r3, [r8]
 8007cd8:	9501      	str	r5, [sp, #4]
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	4b37      	ldr	r3, [pc, #220]	; (8007dbc <AT_event_receive+0x138>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	f01a fa9a 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8007ce8:	e7e7      	b.n	8007cba <AT_event_receive+0x36>
      AT_PRINTF("%02X", appData->Buffer[i]);
 8007cea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007cee:	5d1b      	ldrb	r3, [r3, r4]
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	4b33      	ldr	r3, [pc, #204]	; (8007dc0 <AT_event_receive+0x13c>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f01a fa8f 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    for (uint8_t i = 0; i < ReceivedDataSize; i++)
 8007cfe:	3401      	adds	r4, #1
 8007d00:	b2e4      	uxtb	r4, r4
 8007d02:	42a5      	cmp	r5, r4
 8007d04:	d8f1      	bhi.n	8007cea <AT_event_receive+0x66>
    AT_PRINTF("\r\n");
 8007d06:	4b2f      	ldr	r3, [pc, #188]	; (8007dc4 <AT_event_receive+0x140>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	f01a fa85 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
	if(flag == 1) //If Confirmed Data Received
 8007d12:	2f01      	cmp	r7, #1
 8007d14:	d020      	beq.n	8007d58 <AT_event_receive+0xd4>
  if (params != NULL)
 8007d16:	b1e6      	cbz	r6, 8007d52 <AT_event_receive+0xce>
    if (params->LinkCheck == true)
 8007d18:	7b73      	ldrb	r3, [r6, #13]
 8007d1a:	b393      	cbz	r3, 8007d82 <AT_event_receive+0xfe>
      AT_PRINTF("+EVT:RX_%s, DR %d, RSSI %d, SNR %d, DMODM %d, GWN %d\r\n", slotStrings[params->RxSlot], params->Datarate,
 8007d1c:	f996 300c 	ldrsb.w	r3, [r6, #12]
 8007d20:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8007d24:	f996 1003 	ldrsb.w	r1, [r6, #3]
 8007d28:	f996 0004 	ldrsb.w	r0, [r6, #4]
 8007d2c:	7bb4      	ldrb	r4, [r6, #14]
 8007d2e:	7bf5      	ldrb	r5, [r6, #15]
 8007d30:	9505      	str	r5, [sp, #20]
 8007d32:	9404      	str	r4, [sp, #16]
 8007d34:	9003      	str	r0, [sp, #12]
 8007d36:	9102      	str	r1, [sp, #8]
 8007d38:	9201      	str	r2, [sp, #4]
 8007d3a:	aa0c      	add	r2, sp, #48	; 0x30
 8007d3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d40:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	4b20      	ldr	r3, [pc, #128]	; (8007dc8 <AT_event_receive+0x144>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	f01a fa65 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8007d52:	b00c      	add	sp, #48	; 0x30
 8007d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		appData->Port = 0xFF;
 8007d58:	23ff      	movs	r3, #255	; 0xff
 8007d5a:	f888 3000 	strb.w	r3, [r8]
	  	appData->Buffer = NULL;
 8007d5e:	2400      	movs	r4, #0
 8007d60:	f8c8 4004 	str.w	r4, [r8, #4]
		appData->BufferSize = 0;
 8007d64:	f888 4001 	strb.w	r4, [r8, #1]
		AT_PRINTF("+EVT:UNCONFIRMED UPLINK\r\n");	
 8007d68:	4b18      	ldr	r3, [pc, #96]	; (8007dcc <AT_event_receive+0x148>)
 8007d6a:	4622      	mov	r2, r4
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f01a fa54 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
	  	LmHandlerSend(appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);	
 8007d74:	2301      	movs	r3, #1
 8007d76:	4622      	mov	r2, r4
 8007d78:	4621      	mov	r1, r4
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	f00b fa7a 	bl	8013274 <LmHandlerSend>
 8007d80:	e7c9      	b.n	8007d16 <AT_event_receive+0x92>
      AT_PRINTF("+EVT:RX_%s, DR %d, RSSI %d, SNR %d\r\n", slotStrings[params->RxSlot], params->Datarate, params->Rssi,
 8007d82:	f996 300c 	ldrsb.w	r3, [r6, #12]
 8007d86:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8007d8a:	f996 1003 	ldrsb.w	r1, [r6, #3]
 8007d8e:	f996 0004 	ldrsb.w	r0, [r6, #4]
 8007d92:	9003      	str	r0, [sp, #12]
 8007d94:	9102      	str	r1, [sp, #8]
 8007d96:	9201      	str	r2, [sp, #4]
 8007d98:	aa0c      	add	r2, sp, #48	; 0x30
 8007d9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d9e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	4b0a      	ldr	r3, [pc, #40]	; (8007dd0 <AT_event_receive+0x14c>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	4611      	mov	r1, r2
 8007daa:	4610      	mov	r0, r2
 8007dac:	f01a fa36 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8007db0:	e7cf      	b.n	8007d52 <AT_event_receive+0xce>
 8007db2:	bf00      	nop
 8007db4:	080248c0 	.word	0x080248c0
 8007db8:	08025068 	.word	0x08025068
 8007dbc:	08025088 	.word	0x08025088
 8007dc0:	08027144 	.word	0x08027144
 8007dc4:	080267cc 	.word	0x080267cc
 8007dc8:	080250c4 	.word	0x080250c4
 8007dcc:	080250a8 	.word	0x080250a8
 8007dd0:	080250fc 	.word	0x080250fc

08007dd4 <AT_event_confirm>:
  if ((params != NULL) && (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG) && (params->AckReceived != 0))
 8007dd4:	b170      	cbz	r0, 8007df4 <AT_event_confirm+0x20>
{
 8007dd6:	b508      	push	{r3, lr}
  if ((params != NULL) && (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG) && (params->AckReceived != 0))
 8007dd8:	7882      	ldrb	r2, [r0, #2]
 8007dda:	2a01      	cmp	r2, #1
 8007ddc:	d000      	beq.n	8007de0 <AT_event_confirm+0xc>
}
 8007dde:	bd08      	pop	{r3, pc}
  if ((params != NULL) && (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG) && (params->AckReceived != 0))
 8007de0:	78c3      	ldrb	r3, [r0, #3]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0fb      	beq.n	8007dde <AT_event_confirm+0xa>
    AT_PRINTF("+EVT:SEND_CONFIRMED\r\n");
 8007de6:	4b04      	ldr	r3, [pc, #16]	; (8007df8 <AT_event_confirm+0x24>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	4611      	mov	r1, r2
 8007dec:	4610      	mov	r0, r2
 8007dee:	f01a fa15 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8007df2:	e7f4      	b.n	8007dde <AT_event_confirm+0xa>
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	08025124 	.word	0x08025124

08007dfc <AT_reset_l>:
{
 8007dfc:	b508      	push	{r3, lr}
  NVIC_SystemReset();
 8007dfe:	f7ff fdd9 	bl	80079b4 <__NVIC_SystemReset>

08007e02 <AT_verbose_get_l>:
{
 8007e02:	b508      	push	{r3, lr}
  print_u(UTIL_ADV_TRACE_GetVerboseLevel());
 8007e04:	f01a f9b6 	bl	8022174 <UTIL_ADV_TRACE_GetVerboseLevel>
 8007e08:	f7ff fde6 	bl	80079d8 <print_u>
}
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	bd08      	pop	{r3, pc}

08007e10 <AT_verbose_set_l>:
{
 8007e10:	b500      	push	{lr}
 8007e12:	b083      	sub	sp, #12
  if (1 != tiny_sscanf(buf, "%u", &lvl_nb))
 8007e14:	aa01      	add	r2, sp, #4
 8007e16:	490f      	ldr	r1, [pc, #60]	; (8007e54 <AT_verbose_set_l+0x44>)
 8007e18:	f01b f96c 	bl	80230f4 <tiny_sscanf>
 8007e1c:	2801      	cmp	r0, #1
 8007e1e:	d109      	bne.n	8007e34 <AT_verbose_set_l+0x24>
  if ((lvl_nb > VLEVEL_H) || (lvl_nb < VLEVEL_OFF))
 8007e20:	9801      	ldr	r0, [sp, #4]
 8007e22:	2803      	cmp	r0, #3
 8007e24:	d80e      	bhi.n	8007e44 <AT_verbose_set_l+0x34>
  UTIL_ADV_TRACE_SetVerboseLevel(lvl_nb);
 8007e26:	b2c0      	uxtb	r0, r0
 8007e28:	f01a f99e 	bl	8022168 <UTIL_ADV_TRACE_SetVerboseLevel>
  return AT_OK;
 8007e2c:	2000      	movs	r0, #0
}
 8007e2e:	b003      	add	sp, #12
 8007e30:	f85d fb04 	ldr.w	pc, [sp], #4
    AT_PRINTF("AT+VL: verbose level is not well set\r\n");
 8007e34:	4b08      	ldr	r3, [pc, #32]	; (8007e58 <AT_verbose_set_l+0x48>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	4611      	mov	r1, r2
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	f01a f9ee 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8007e40:	2002      	movs	r0, #2
 8007e42:	e7f4      	b.n	8007e2e <AT_verbose_set_l+0x1e>
    AT_PRINTF("AT+VL: verbose level out of range => 0(VLEVEL_OFF) to 3(VLEVEL_H)\r\n");
 8007e44:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <AT_verbose_set_l+0x4c>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	4611      	mov	r1, r2
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	f01a f9e6 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8007e50:	2002      	movs	r0, #2
 8007e52:	e7ec      	b.n	8007e2e <AT_verbose_set_l+0x1e>
 8007e54:	0802500c 	.word	0x0802500c
 8007e58:	0802513c 	.word	0x0802513c
 8007e5c:	08025164 	.word	0x08025164

08007e60 <AT_LocalTime_get>:
{
 8007e60:	b500      	push	{lr}
 8007e62:	b093      	sub	sp, #76	; 0x4c
  SysTime_t UnixEpoch = SysTimeGet();
 8007e64:	a807      	add	r0, sp, #28
 8007e66:	f01a fced 	bl	8022844 <SysTimeGet>
  SysTimeLocalTime(UnixEpoch.Seconds,  & localtime);
 8007e6a:	a909      	add	r1, sp, #36	; 0x24
 8007e6c:	9807      	ldr	r0, [sp, #28]
 8007e6e:	f500 50e0 	add.w	r0, r0, #7168	; 0x1c00
 8007e72:	300e      	adds	r0, #14
 8007e74:	f01a fd66 	bl	8022944 <SysTimeLocalTime>
  AT_PRINTF("LTIME:%02dh%02dm%02ds on %02d/%02d/%04d\r\n",
 8007e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e7a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8007e7e:	9305      	str	r3, [sp, #20]
 8007e80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e82:	3301      	adds	r3, #1
 8007e84:	9304      	str	r3, [sp, #16]
 8007e86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e88:	9303      	str	r3, [sp, #12]
 8007e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e8c:	9302      	str	r3, [sp, #8]
 8007e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e90:	9301      	str	r3, [sp, #4]
 8007e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	4b05      	ldr	r3, [pc, #20]	; (8007eac <AT_LocalTime_get+0x4c>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	f01a f9bd 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	b013      	add	sp, #76	; 0x4c
 8007ea6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007eaa:	bf00      	nop
 8007eac:	080251a8 	.word	0x080251a8

08007eb0 <AT_JoinEUI_get>:
{
 8007eb0:	b500      	push	{lr}
 8007eb2:	b083      	sub	sp, #12
  if (LmHandlerGetAppEUI(appEUI) != LORAMAC_HANDLER_SUCCESS)
 8007eb4:	4668      	mov	r0, sp
 8007eb6:	f00b fc20 	bl	80136fa <LmHandlerGetAppEUI>
 8007eba:	b930      	cbnz	r0, 8007eca <AT_JoinEUI_get+0x1a>
  print_8_02x(appEUI);
 8007ebc:	4668      	mov	r0, sp
 8007ebe:	f7ff fd99 	bl	80079f4 <print_8_02x>
  return AT_OK;
 8007ec2:	2000      	movs	r0, #0
}
 8007ec4:	b003      	add	sp, #12
 8007ec6:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8007eca:	2002      	movs	r0, #2
 8007ecc:	e7fa      	b.n	8007ec4 <AT_JoinEUI_get+0x14>
	...

08007ed0 <AT_JoinEUI_set>:
{
 8007ed0:	b500      	push	{lr}
 8007ed2:	b089      	sub	sp, #36	; 0x24
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8007ed4:	f10d 031f 	add.w	r3, sp, #31
 8007ed8:	9305      	str	r3, [sp, #20]
 8007eda:	f10d 031e 	add.w	r3, sp, #30
 8007ede:	9304      	str	r3, [sp, #16]
 8007ee0:	f10d 031d 	add.w	r3, sp, #29
 8007ee4:	9303      	str	r3, [sp, #12]
 8007ee6:	ab07      	add	r3, sp, #28
 8007ee8:	9302      	str	r3, [sp, #8]
 8007eea:	f10d 031b 	add.w	r3, sp, #27
 8007eee:	9301      	str	r3, [sp, #4]
 8007ef0:	f10d 031a 	add.w	r3, sp, #26
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	f10d 0319 	add.w	r3, sp, #25
 8007efa:	aa06      	add	r2, sp, #24
 8007efc:	4909      	ldr	r1, [pc, #36]	; (8007f24 <AT_JoinEUI_set+0x54>)
 8007efe:	f01b f8f9 	bl	80230f4 <tiny_sscanf>
 8007f02:	2808      	cmp	r0, #8
 8007f04:	d003      	beq.n	8007f0e <AT_JoinEUI_set+0x3e>
    return AT_PARAM_ERROR;
 8007f06:	2002      	movs	r0, #2
}
 8007f08:	b009      	add	sp, #36	; 0x24
 8007f0a:	f85d fb04 	ldr.w	pc, [sp], #4
  E2P_LORA_Write_Appeui(JoinEui);
 8007f0e:	a806      	add	r0, sp, #24
 8007f10:	f001 ffb7 	bl	8009e82 <E2P_LORA_Write_Appeui>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetAppEUI(JoinEui))
 8007f14:	a806      	add	r0, sp, #24
 8007f16:	f00b fc09 	bl	801372c <LmHandlerSetAppEUI>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d0f4      	beq.n	8007f08 <AT_JoinEUI_set+0x38>
    return AT_ERROR;
 8007f1e:	2001      	movs	r0, #1
 8007f20:	e7f2      	b.n	8007f08 <AT_JoinEUI_set+0x38>
 8007f22:	bf00      	nop
 8007f24:	08024fe4 	.word	0x08024fe4

08007f28 <AT_NwkKey_get>:
{
 8007f28:	b500      	push	{lr}
 8007f2a:	b085      	sub	sp, #20
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetNwkKey(nwkKey))
 8007f2c:	4668      	mov	r0, sp
 8007f2e:	f00b fdc3 	bl	8013ab8 <LmHandlerGetNwkKey>
 8007f32:	b118      	cbz	r0, 8007f3c <AT_NwkKey_get+0x14>
    return AT_ERROR;
 8007f34:	2001      	movs	r0, #1
}
 8007f36:	b005      	add	sp, #20
 8007f38:	f85d fb04 	ldr.w	pc, [sp], #4
  print_16_02x(nwkKey);
 8007f3c:	4668      	mov	r0, sp
 8007f3e:	f7ff fd75 	bl	8007a2c <print_16_02x>
  return AT_OK;
 8007f42:	2000      	movs	r0, #0
 8007f44:	e7f7      	b.n	8007f36 <AT_NwkKey_get+0xe>

08007f46 <AT_NwkKey_set>:
{
 8007f46:	b500      	push	{lr}
 8007f48:	b085      	sub	sp, #20
  if (sscanf_16_hhx(param, nwkKey) != 16)
 8007f4a:	4669      	mov	r1, sp
 8007f4c:	f7ff fdd2 	bl	8007af4 <sscanf_16_hhx>
 8007f50:	2810      	cmp	r0, #16
 8007f52:	d003      	beq.n	8007f5c <AT_NwkKey_set+0x16>
    return AT_PARAM_ERROR;
 8007f54:	2002      	movs	r0, #2
}
 8007f56:	b005      	add	sp, #20
 8007f58:	f85d fb04 	ldr.w	pc, [sp], #4
  E2P_LORA_Write_Nwkkey(nwkKey);
 8007f5c:	4668      	mov	r0, sp
 8007f5e:	f002 f80c 	bl	8009f7a <E2P_LORA_Write_Nwkkey>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetNwkKey(nwkKey))
 8007f62:	4668      	mov	r0, sp
 8007f64:	f00b fdc0 	bl	8013ae8 <LmHandlerSetNwkKey>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d0f4      	beq.n	8007f56 <AT_NwkKey_set+0x10>
    return AT_ERROR;
 8007f6c:	2001      	movs	r0, #1
 8007f6e:	e7f2      	b.n	8007f56 <AT_NwkKey_set+0x10>

08007f70 <AT_AppKey_get>:
{
 8007f70:	b500      	push	{lr}
 8007f72:	b085      	sub	sp, #20
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetAppKey(appKey))
 8007f74:	4668      	mov	r0, sp
 8007f76:	f00b fdcf 	bl	8013b18 <LmHandlerGetAppKey>
 8007f7a:	b118      	cbz	r0, 8007f84 <AT_AppKey_get+0x14>
    return AT_ERROR;
 8007f7c:	2001      	movs	r0, #1
}
 8007f7e:	b005      	add	sp, #20
 8007f80:	f85d fb04 	ldr.w	pc, [sp], #4
  print_16_02x(appKey);
 8007f84:	4668      	mov	r0, sp
 8007f86:	f7ff fd51 	bl	8007a2c <print_16_02x>
  return AT_OK;
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	e7f7      	b.n	8007f7e <AT_AppKey_get+0xe>

08007f8e <AT_AppKey_set>:
{
 8007f8e:	b500      	push	{lr}
 8007f90:	b085      	sub	sp, #20
  if (sscanf_16_hhx(param, appKey) != 16)
 8007f92:	4669      	mov	r1, sp
 8007f94:	f7ff fdae 	bl	8007af4 <sscanf_16_hhx>
 8007f98:	2810      	cmp	r0, #16
 8007f9a:	d003      	beq.n	8007fa4 <AT_AppKey_set+0x16>
    return AT_PARAM_ERROR;
 8007f9c:	2002      	movs	r0, #2
}
 8007f9e:	b005      	add	sp, #20
 8007fa0:	f85d fb04 	ldr.w	pc, [sp], #4
  E2P_LORA_Write_Appkey(appKey);
 8007fa4:	4668      	mov	r0, sp
 8007fa6:	f001 ffa6 	bl	8009ef6 <E2P_LORA_Write_Appkey>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetAppKey(appKey))
 8007faa:	4668      	mov	r0, sp
 8007fac:	f00b fdcc 	bl	8013b48 <LmHandlerSetAppKey>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d0f4      	beq.n	8007f9e <AT_AppKey_set+0x10>
    return AT_ERROR;
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	e7f2      	b.n	8007f9e <AT_AppKey_set+0x10>

08007fb8 <AT_NwkSKey_get>:
{
 8007fb8:	b500      	push	{lr}
 8007fba:	b085      	sub	sp, #20
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetNwkSKey(nwkSKey))
 8007fbc:	4668      	mov	r0, sp
 8007fbe:	f00b fddb 	bl	8013b78 <LmHandlerGetNwkSKey>
 8007fc2:	b118      	cbz	r0, 8007fcc <AT_NwkSKey_get+0x14>
    return AT_ERROR;
 8007fc4:	2001      	movs	r0, #1
}
 8007fc6:	b005      	add	sp, #20
 8007fc8:	f85d fb04 	ldr.w	pc, [sp], #4
  print_16_02x(nwkSKey);
 8007fcc:	4668      	mov	r0, sp
 8007fce:	f7ff fd2d 	bl	8007a2c <print_16_02x>
  return AT_OK;
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	e7f7      	b.n	8007fc6 <AT_NwkSKey_get+0xe>

08007fd6 <AT_NwkSKey_set>:
{
 8007fd6:	b500      	push	{lr}
 8007fd8:	b085      	sub	sp, #20
  if (sscanf_16_hhx(param, nwkSKey) != 16)
 8007fda:	4669      	mov	r1, sp
 8007fdc:	f7ff fd8a 	bl	8007af4 <sscanf_16_hhx>
 8007fe0:	2810      	cmp	r0, #16
 8007fe2:	d003      	beq.n	8007fec <AT_NwkSKey_set+0x16>
    return AT_PARAM_ERROR;
 8007fe4:	2002      	movs	r0, #2
}
 8007fe6:	b005      	add	sp, #20
 8007fe8:	f85d fb04 	ldr.w	pc, [sp], #4
  E2P_LORA_Write_Nwk_S_key(nwkSKey);
 8007fec:	4668      	mov	r0, sp
 8007fee:	f002 f848 	bl	800a082 <E2P_LORA_Write_Nwk_S_key>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetNwkSKey(nwkSKey))
 8007ff2:	4668      	mov	r0, sp
 8007ff4:	f00b fdd8 	bl	8013ba8 <LmHandlerSetNwkSKey>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d0f4      	beq.n	8007fe6 <AT_NwkSKey_set+0x10>
    return AT_ERROR;
 8007ffc:	2001      	movs	r0, #1
 8007ffe:	e7f2      	b.n	8007fe6 <AT_NwkSKey_set+0x10>

08008000 <AT_AppSKey_get>:
{
 8008000:	b500      	push	{lr}
 8008002:	b085      	sub	sp, #20
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetAppSKey(appSKey))
 8008004:	4668      	mov	r0, sp
 8008006:	f00b fde7 	bl	8013bd8 <LmHandlerGetAppSKey>
 800800a:	b118      	cbz	r0, 8008014 <AT_AppSKey_get+0x14>
    return AT_ERROR;
 800800c:	2001      	movs	r0, #1
}
 800800e:	b005      	add	sp, #20
 8008010:	f85d fb04 	ldr.w	pc, [sp], #4
  print_16_02x(appSKey);
 8008014:	4668      	mov	r0, sp
 8008016:	f7ff fd09 	bl	8007a2c <print_16_02x>
  return AT_OK;
 800801a:	2000      	movs	r0, #0
 800801c:	e7f7      	b.n	800800e <AT_AppSKey_get+0xe>

0800801e <AT_AppSKey_set>:
{
 800801e:	b500      	push	{lr}
 8008020:	b085      	sub	sp, #20
  if (sscanf_16_hhx(param, appSKey) != 16)
 8008022:	4669      	mov	r1, sp
 8008024:	f7ff fd66 	bl	8007af4 <sscanf_16_hhx>
 8008028:	2810      	cmp	r0, #16
 800802a:	d003      	beq.n	8008034 <AT_AppSKey_set+0x16>
    return AT_PARAM_ERROR;
 800802c:	2002      	movs	r0, #2
}
 800802e:	b005      	add	sp, #20
 8008030:	f85d fb04 	ldr.w	pc, [sp], #4
  E2P_LORA_Write_App_S_key(appSKey);
 8008034:	4668      	mov	r0, sp
 8008036:	f001 ffe2 	bl	8009ffe <E2P_LORA_Write_App_S_key>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetAppSKey(appSKey))
 800803a:	4668      	mov	r0, sp
 800803c:	f00b fde4 	bl	8013c08 <LmHandlerSetAppSKey>
 8008040:	2800      	cmp	r0, #0
 8008042:	d0f4      	beq.n	800802e <AT_AppSKey_set+0x10>
    return AT_ERROR;
 8008044:	2001      	movs	r0, #1
 8008046:	e7f2      	b.n	800802e <AT_AppSKey_set+0x10>

08008048 <AT_DevAddr_get>:
{
 8008048:	b500      	push	{lr}
 800804a:	b083      	sub	sp, #12
  if (LmHandlerGetDevAddr(&devAddr) != LORAMAC_HANDLER_SUCCESS)
 800804c:	a801      	add	r0, sp, #4
 800804e:	f00b fbb2 	bl	80137b6 <LmHandlerGetDevAddr>
 8008052:	b930      	cbnz	r0, 8008062 <AT_DevAddr_get+0x1a>
  print_uint32_as_02x(devAddr);
 8008054:	9801      	ldr	r0, [sp, #4]
 8008056:	f7ff fd27 	bl	8007aa8 <print_uint32_as_02x>
  return AT_OK;
 800805a:	2000      	movs	r0, #0
}
 800805c:	b003      	add	sp, #12
 800805e:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8008062:	2002      	movs	r0, #2
 8008064:	e7fa      	b.n	800805c <AT_DevAddr_get+0x14>

08008066 <AT_DevAddr_set>:
{
 8008066:	b500      	push	{lr}
 8008068:	b083      	sub	sp, #12
  if (sscanf_uint32_as_hhx(param, &devAddr) != 4)
 800806a:	a901      	add	r1, sp, #4
 800806c:	f7ff fd72 	bl	8007b54 <sscanf_uint32_as_hhx>
 8008070:	2804      	cmp	r0, #4
 8008072:	d003      	beq.n	800807c <AT_DevAddr_set+0x16>
    return AT_PARAM_ERROR;
 8008074:	2002      	movs	r0, #2
}
 8008076:	b003      	add	sp, #12
 8008078:	f85d fb04 	ldr.w	pc, [sp], #4
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetDevAddr(devAddr))
 800807c:	9801      	ldr	r0, [sp, #4]
 800807e:	f00b fbaf 	bl	80137e0 <LmHandlerSetDevAddr>
 8008082:	2800      	cmp	r0, #0
 8008084:	d0f7      	beq.n	8008076 <AT_DevAddr_set+0x10>
    return AT_ERROR;
 8008086:	2001      	movs	r0, #1
 8008088:	e7f5      	b.n	8008076 <AT_DevAddr_set+0x10>

0800808a <AT_DevEUI_get>:
{
 800808a:	b500      	push	{lr}
 800808c:	b083      	sub	sp, #12
  if (LmHandlerGetDevEUI(devEUI) != LORAMAC_HANDLER_SUCCESS)
 800808e:	4668      	mov	r0, sp
 8008090:	f00b fb02 	bl	8013698 <LmHandlerGetDevEUI>
 8008094:	b930      	cbnz	r0, 80080a4 <AT_DevEUI_get+0x1a>
  print_8_02x(devEUI);
 8008096:	4668      	mov	r0, sp
 8008098:	f7ff fcac 	bl	80079f4 <print_8_02x>
  return AT_OK;
 800809c:	2000      	movs	r0, #0
}
 800809e:	b003      	add	sp, #12
 80080a0:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 80080a4:	2002      	movs	r0, #2
 80080a6:	e7fa      	b.n	800809e <AT_DevEUI_get+0x14>

080080a8 <AT_DevEUI_set>:
{
 80080a8:	b500      	push	{lr}
 80080aa:	b089      	sub	sp, #36	; 0x24
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 80080ac:	f10d 031f 	add.w	r3, sp, #31
 80080b0:	9305      	str	r3, [sp, #20]
 80080b2:	f10d 031e 	add.w	r3, sp, #30
 80080b6:	9304      	str	r3, [sp, #16]
 80080b8:	f10d 031d 	add.w	r3, sp, #29
 80080bc:	9303      	str	r3, [sp, #12]
 80080be:	ab07      	add	r3, sp, #28
 80080c0:	9302      	str	r3, [sp, #8]
 80080c2:	f10d 031b 	add.w	r3, sp, #27
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	f10d 031a 	add.w	r3, sp, #26
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	f10d 0319 	add.w	r3, sp, #25
 80080d2:	aa06      	add	r2, sp, #24
 80080d4:	4907      	ldr	r1, [pc, #28]	; (80080f4 <AT_DevEUI_set+0x4c>)
 80080d6:	f01b f80d 	bl	80230f4 <tiny_sscanf>
 80080da:	2808      	cmp	r0, #8
 80080dc:	d003      	beq.n	80080e6 <AT_DevEUI_set+0x3e>
    return AT_PARAM_ERROR;
 80080de:	2002      	movs	r0, #2
}
 80080e0:	b009      	add	sp, #36	; 0x24
 80080e2:	f85d fb04 	ldr.w	pc, [sp], #4
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetDevEUI(devEui))
 80080e6:	a806      	add	r0, sp, #24
 80080e8:	f00b faef 	bl	80136ca <LmHandlerSetDevEUI>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d0f7      	beq.n	80080e0 <AT_DevEUI_set+0x38>
    return AT_ERROR;
 80080f0:	2001      	movs	r0, #1
 80080f2:	e7f5      	b.n	80080e0 <AT_DevEUI_set+0x38>
 80080f4:	08024fe4 	.word	0x08024fe4

080080f8 <AT_NetworkID_get>:
{
 80080f8:	b500      	push	{lr}
 80080fa:	b083      	sub	sp, #12
  if (LmHandlerGetNetworkID(&networkId) != LORAMAC_HANDLER_SUCCESS)
 80080fc:	a801      	add	r0, sp, #4
 80080fe:	f00b fb2d 	bl	801375c <LmHandlerGetNetworkID>
 8008102:	b930      	cbnz	r0, 8008112 <AT_NetworkID_get+0x1a>
  print_d(networkId);
 8008104:	9801      	ldr	r0, [sp, #4]
 8008106:	f7ff fce7 	bl	8007ad8 <print_d>
  return AT_OK;
 800810a:	2000      	movs	r0, #0
}
 800810c:	b003      	add	sp, #12
 800810e:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8008112:	2002      	movs	r0, #2
 8008114:	e7fa      	b.n	800810c <AT_NetworkID_get+0x14>
	...

08008118 <AT_NetworkID_set>:
{
 8008118:	b500      	push	{lr}
 800811a:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%u", &networkId) != 1)
 800811c:	aa01      	add	r2, sp, #4
 800811e:	4909      	ldr	r1, [pc, #36]	; (8008144 <AT_NetworkID_set+0x2c>)
 8008120:	f01a ffe8 	bl	80230f4 <tiny_sscanf>
 8008124:	2801      	cmp	r0, #1
 8008126:	d108      	bne.n	800813a <AT_NetworkID_set+0x22>
  if (networkId > 127)
 8008128:	9801      	ldr	r0, [sp, #4]
 800812a:	287f      	cmp	r0, #127	; 0x7f
 800812c:	d807      	bhi.n	800813e <AT_NetworkID_set+0x26>
  LmHandlerSetNetworkID(networkId);
 800812e:	f00b fb2a 	bl	8013786 <LmHandlerSetNetworkID>
  return AT_OK;
 8008132:	2000      	movs	r0, #0
}
 8008134:	b003      	add	sp, #12
 8008136:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 800813a:	2002      	movs	r0, #2
 800813c:	e7fa      	b.n	8008134 <AT_NetworkID_set+0x1c>
    return AT_PARAM_ERROR;
 800813e:	2002      	movs	r0, #2
 8008140:	e7f8      	b.n	8008134 <AT_NetworkID_set+0x1c>
 8008142:	bf00      	nop
 8008144:	0802500c 	.word	0x0802500c

08008148 <AT_Join_get>:
{
 8008148:	b508      	push	{r3, lr}
	print_d(E2P_LORA_Read_Type()-1);
 800814a:	f001 fff0 	bl	800a12e <E2P_LORA_Read_Type>
 800814e:	3801      	subs	r0, #1
 8008150:	f7ff fcc2 	bl	8007ad8 <print_d>
}
 8008154:	2000      	movs	r0, #0
 8008156:	bd08      	pop	{r3, pc}

08008158 <AT_Join>:
{
 8008158:	b508      	push	{r3, lr}
  switch (param[0])
 800815a:	7803      	ldrb	r3, [r0, #0]
 800815c:	2b30      	cmp	r3, #48	; 0x30
 800815e:	d003      	beq.n	8008168 <AT_Join+0x10>
 8008160:	2b31      	cmp	r3, #49	; 0x31
 8008162:	d011      	beq.n	8008188 <AT_Join+0x30>
 8008164:	2002      	movs	r0, #2
 8008166:	e00e      	b.n	8008186 <AT_Join+0x2e>
		AT_PRINTF("ABP mode\r\n");
 8008168:	4b0c      	ldr	r3, [pc, #48]	; (800819c <AT_Join+0x44>)
 800816a:	2200      	movs	r2, #0
 800816c:	4611      	mov	r1, r2
 800816e:	4610      	mov	r0, r2
 8008170:	f01a f854 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
	  E2P_LORA_Write_Type(ACTIVATION_TYPE_ABP);
 8008174:	2001      	movs	r0, #1
 8008176:	f001 fe58 	bl	8009e2a <E2P_LORA_Write_Type>
  LmHandlerJoin((ActivationType_t)E2P_LORA_Read_Type());
 800817a:	f001 ffd8 	bl	800a12e <E2P_LORA_Read_Type>
 800817e:	b2c0      	uxtb	r0, r0
 8008180:	f00b f82c 	bl	80131dc <LmHandlerJoin>
  return AT_OK;
 8008184:	2000      	movs	r0, #0
}
 8008186:	bd08      	pop	{r3, pc}
		AT_PRINTF("OTAA mode\r\n");
 8008188:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <AT_Join+0x48>)
 800818a:	2200      	movs	r2, #0
 800818c:	4611      	mov	r1, r2
 800818e:	4610      	mov	r0, r2
 8008190:	f01a f844 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      E2P_LORA_Write_Type(ACTIVATION_TYPE_OTAA);
 8008194:	2002      	movs	r0, #2
 8008196:	f001 fe48 	bl	8009e2a <E2P_LORA_Write_Type>
      break;
 800819a:	e7ee      	b.n	800817a <AT_Join+0x22>
 800819c:	080251d4 	.word	0x080251d4
 80081a0:	080251e0 	.word	0x080251e0

080081a4 <AT_Link_Check>:
{
 80081a4:	b508      	push	{r3, lr}
  if (LmHandlerLinkCheckReq() != LORAMAC_HANDLER_SUCCESS)
 80081a6:	f00a ffb5 	bl	8013114 <LmHandlerLinkCheckReq>
 80081aa:	b900      	cbnz	r0, 80081ae <AT_Link_Check+0xa>
}
 80081ac:	bd08      	pop	{r3, pc}
    return AT_PARAM_ERROR;
 80081ae:	2002      	movs	r0, #2
 80081b0:	e7fc      	b.n	80081ac <AT_Link_Check+0x8>
	...

080081b4 <AT_Send>:
{
 80081b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081b6:	b085      	sub	sp, #20
 80081b8:	4605      	mov	r5, r0
  uint16_t bufSize = strlen(param);
 80081ba:	f7fd fd7b 	bl	8005cb4 <strlen>
 80081be:	b284      	uxth	r4, r0
  char hex[3] = {0, 0, 0};
 80081c0:	4b4e      	ldr	r3, [pc, #312]	; (80082fc <AT_Send+0x148>)
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80081c8:	0c1b      	lsrs	r3, r3, #16
 80081ca:	f88d 300a 	strb.w	r3, [sp, #10]
  UTIL_TIMER_Time_t nextTxIn = 0;
 80081ce:	2300      	movs	r3, #0
 80081d0:	9301      	str	r3, [sp, #4]
  if (1 != tiny_sscanf(buf, "%u:", &appPort))
 80081d2:	aa03      	add	r2, sp, #12
 80081d4:	494a      	ldr	r1, [pc, #296]	; (8008300 <AT_Send+0x14c>)
 80081d6:	4628      	mov	r0, r5
 80081d8:	f01a ff8c 	bl	80230f4 <tiny_sscanf>
 80081dc:	2801      	cmp	r0, #1
 80081de:	d10b      	bne.n	80081f8 <AT_Send+0x44>
  while (('0' <= buf[0]) && (buf[0] <= '9') && bufSize > 1)
 80081e0:	782a      	ldrb	r2, [r5, #0]
 80081e2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b09      	cmp	r3, #9
 80081ea:	d80d      	bhi.n	8008208 <AT_Send+0x54>
 80081ec:	2c01      	cmp	r4, #1
 80081ee:	d90b      	bls.n	8008208 <AT_Send+0x54>
    buf ++;
 80081f0:	3501      	adds	r5, #1
    bufSize --;
 80081f2:	3c01      	subs	r4, #1
 80081f4:	b2a4      	uxth	r4, r4
 80081f6:	e7f3      	b.n	80081e0 <AT_Send+0x2c>
    AT_PRINTF("AT+SEND without the application port\r\n");
 80081f8:	4b42      	ldr	r3, [pc, #264]	; (8008304 <AT_Send+0x150>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	4611      	mov	r1, r2
 80081fe:	4610      	mov	r0, r2
 8008200:	f01a f80c 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8008204:	2002      	movs	r0, #2
 8008206:	e019      	b.n	800823c <AT_Send+0x88>
  if ((bufSize == 0) || (':' != buf[0]))
 8008208:	b18c      	cbz	r4, 800822e <AT_Send+0x7a>
 800820a:	2a3a      	cmp	r2, #58	; 0x3a
 800820c:	d10f      	bne.n	800822e <AT_Send+0x7a>
    buf ++;
 800820e:	1c6e      	adds	r6, r5, #1
    bufSize --;
 8008210:	1e63      	subs	r3, r4, #1
 8008212:	b29b      	uxth	r3, r3
  switch (buf[0])
 8008214:	786a      	ldrb	r2, [r5, #1]
 8008216:	2a30      	cmp	r2, #48	; 0x30
 8008218:	d012      	beq.n	8008240 <AT_Send+0x8c>
 800821a:	2a31      	cmp	r2, #49	; 0x31
 800821c:	d012      	beq.n	8008244 <AT_Send+0x90>
      AT_PRINTF("AT+SEND without the acknowledge flag\r\n");
 800821e:	4b3a      	ldr	r3, [pc, #232]	; (8008308 <AT_Send+0x154>)
 8008220:	2200      	movs	r2, #0
 8008222:	4611      	mov	r1, r2
 8008224:	4610      	mov	r0, r2
 8008226:	f019 fff9 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      return AT_PARAM_ERROR;
 800822a:	2002      	movs	r0, #2
 800822c:	e006      	b.n	800823c <AT_Send+0x88>
    AT_PRINTF("AT+SEND missing : character after app port\r\n");
 800822e:	4b37      	ldr	r3, [pc, #220]	; (800830c <AT_Send+0x158>)
 8008230:	2200      	movs	r2, #0
 8008232:	4611      	mov	r1, r2
 8008234:	4610      	mov	r0, r2
 8008236:	f019 fff1 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800823a:	2002      	movs	r0, #2
}
 800823c:	b005      	add	sp, #20
 800823e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (buf[0])
 8008240:	2700      	movs	r7, #0
 8008242:	e000      	b.n	8008246 <AT_Send+0x92>
      isTxConfirmed = LORAMAC_HANDLER_CONFIRMED_MSG;
 8008244:	2701      	movs	r7, #1
  if (bufSize > 0)
 8008246:	b113      	cbz	r3, 800824e <AT_Send+0x9a>
    buf ++;
 8008248:	1cae      	adds	r6, r5, #2
    bufSize --;
 800824a:	3c02      	subs	r4, #2
 800824c:	b2a3      	uxth	r3, r4
  if ((bufSize == 0) || (':' != buf[0]))
 800824e:	b303      	cbz	r3, 8008292 <AT_Send+0xde>
 8008250:	7832      	ldrb	r2, [r6, #0]
 8008252:	2a3a      	cmp	r2, #58	; 0x3a
 8008254:	d11d      	bne.n	8008292 <AT_Send+0xde>
    buf ++;
 8008256:	3601      	adds	r6, #1
    bufSize --;
 8008258:	1e5c      	subs	r4, r3, #1
 800825a:	b2a4      	uxth	r4, r4
  unsigned size = 0;
 800825c:	2500      	movs	r5, #0
  while ((size < LORAWAN_APP_DATA_BUFFER_MAX_SIZE) && (bufSize > 1))
 800825e:	2df1      	cmp	r5, #241	; 0xf1
 8008260:	d81f      	bhi.n	80082a2 <AT_Send+0xee>
 8008262:	2c01      	cmp	r4, #1
 8008264:	d91d      	bls.n	80082a2 <AT_Send+0xee>
    hex[0] = buf[size * 2];
 8008266:	f816 3015 	ldrb.w	r3, [r6, r5, lsl #1]
 800826a:	f88d 3008 	strb.w	r3, [sp, #8]
    hex[1] = buf[size * 2 + 1];
 800826e:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 8008272:	785b      	ldrb	r3, [r3, #1]
 8008274:	f88d 3009 	strb.w	r3, [sp, #9]
    if (tiny_sscanf(hex, "%hhx", &AppData.Buffer[size]) != 1)
 8008278:	4b25      	ldr	r3, [pc, #148]	; (8008310 <AT_Send+0x15c>)
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	442a      	add	r2, r5
 800827e:	4925      	ldr	r1, [pc, #148]	; (8008314 <AT_Send+0x160>)
 8008280:	a802      	add	r0, sp, #8
 8008282:	f01a ff37 	bl	80230f4 <tiny_sscanf>
 8008286:	2801      	cmp	r0, #1
 8008288:	d130      	bne.n	80082ec <AT_Send+0x138>
    size++;
 800828a:	3501      	adds	r5, #1
    bufSize -= 2;
 800828c:	3c02      	subs	r4, #2
 800828e:	b2a4      	uxth	r4, r4
 8008290:	e7e5      	b.n	800825e <AT_Send+0xaa>
    AT_PRINTF("AT+SEND missing : character after ack flag\r\n");
 8008292:	4b21      	ldr	r3, [pc, #132]	; (8008318 <AT_Send+0x164>)
 8008294:	2200      	movs	r2, #0
 8008296:	4611      	mov	r1, r2
 8008298:	4610      	mov	r0, r2
 800829a:	f019 ffbf 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800829e:	2002      	movs	r0, #2
 80082a0:	e7cc      	b.n	800823c <AT_Send+0x88>
  if (bufSize != 0)
 80082a2:	bb2c      	cbnz	r4, 80082f0 <AT_Send+0x13c>
  AppData.BufferSize = size;
 80082a4:	481a      	ldr	r0, [pc, #104]	; (8008310 <AT_Send+0x15c>)
 80082a6:	7045      	strb	r5, [r0, #1]
  AppData.Port = appPort;
 80082a8:	9b03      	ldr	r3, [sp, #12]
 80082aa:	7003      	strb	r3, [r0, #0]
  lmhStatus = LmHandlerSend(&AppData, isTxConfirmed, &nextTxIn, false);
 80082ac:	2300      	movs	r3, #0
 80082ae:	aa01      	add	r2, sp, #4
 80082b0:	4639      	mov	r1, r7
 80082b2:	f00a ffdf 	bl	8013274 <LmHandlerSend>
  switch (lmhStatus)
 80082b6:	1d83      	adds	r3, r0, #6
 80082b8:	2b06      	cmp	r3, #6
 80082ba:	d815      	bhi.n	80082e8 <AT_Send+0x134>
 80082bc:	e8df f003 	tbb	[pc, r3]
 80082c0:	040c121a 	.word	0x040c121a
 80082c4:	140c      	.short	0x140c
 80082c6:	06          	.byte	0x06
 80082c7:	00          	.byte	0x00
  lmhStatus = LmHandlerSend(&AppData, isTxConfirmed, &nextTxIn, false);
 80082c8:	2005      	movs	r0, #5
 80082ca:	e7b7      	b.n	800823c <AT_Send+0x88>
      status = (nextTxIn > 0) ? AT_DUTYCYCLE_RESTRICTED : AT_OK;
 80082cc:	9b01      	ldr	r3, [sp, #4]
 80082ce:	b90b      	cbnz	r3, 80082d4 <AT_Send+0x120>
 80082d0:	2000      	movs	r0, #0
 80082d2:	e7b3      	b.n	800823c <AT_Send+0x88>
 80082d4:	2008      	movs	r0, #8
 80082d6:	e7b1      	b.n	800823c <AT_Send+0x88>
      status = (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET) ? AT_NO_NET_JOINED : AT_BUSY_ERROR;
 80082d8:	f00a ff0a 	bl	80130f0 <LmHandlerJoinStatus>
 80082dc:	2801      	cmp	r0, #1
 80082de:	d00b      	beq.n	80082f8 <AT_Send+0x144>
 80082e0:	2005      	movs	r0, #5
 80082e2:	e7ab      	b.n	800823c <AT_Send+0x88>
      status = AT_CRYPTO_ERROR;
 80082e4:	2009      	movs	r0, #9
      break;
 80082e6:	e7a9      	b.n	800823c <AT_Send+0x88>
      status = AT_ERROR;
 80082e8:	2001      	movs	r0, #1
      break;
 80082ea:	e7a7      	b.n	800823c <AT_Send+0x88>
      return AT_PARAM_ERROR;
 80082ec:	2002      	movs	r0, #2
 80082ee:	e7a5      	b.n	800823c <AT_Send+0x88>
    return AT_PARAM_ERROR;
 80082f0:	2002      	movs	r0, #2
 80082f2:	e7a3      	b.n	800823c <AT_Send+0x88>
      status = AT_DUTYCYCLE_RESTRICTED;
 80082f4:	2008      	movs	r0, #8
 80082f6:	e7a1      	b.n	800823c <AT_Send+0x88>
      status = (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET) ? AT_NO_NET_JOINED : AT_BUSY_ERROR;
 80082f8:	2003      	movs	r0, #3
 80082fa:	e79f      	b.n	800823c <AT_Send+0x88>
 80082fc:	080248c0 	.word	0x080248c0
 8008300:	080251ec 	.word	0x080251ec
 8008304:	080251f0 	.word	0x080251f0
 8008308:	08025248 	.word	0x08025248
 800830c:	08025218 	.word	0x08025218
 8008310:	200000f8 	.word	0x200000f8
 8008314:	080252a0 	.word	0x080252a0
 8008318:	08025270 	.word	0x08025270

0800831c <AT_version_get_l>:
{
 800831c:	b530      	push	{r4, r5, lr}
 800831e:	b085      	sub	sp, #20
  AT_PRINTF("APP_VERSION:        V%X.%X.%X\r\n",
 8008320:	2501      	movs	r5, #1
 8008322:	9502      	str	r5, [sp, #8]
 8008324:	2400      	movs	r4, #0
 8008326:	9401      	str	r4, [sp, #4]
 8008328:	9500      	str	r5, [sp, #0]
 800832a:	4b0e      	ldr	r3, [pc, #56]	; (8008364 <AT_version_get_l+0x48>)
 800832c:	4622      	mov	r2, r4
 800832e:	4621      	mov	r1, r4
 8008330:	4620      	mov	r0, r4
 8008332:	f019 ff73 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8008336:	9402      	str	r4, [sp, #8]
 8008338:	2303      	movs	r3, #3
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	2302      	movs	r3, #2
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	4b09      	ldr	r3, [pc, #36]	; (8008368 <AT_version_get_l+0x4c>)
 8008342:	4622      	mov	r2, r4
 8008344:	4621      	mov	r1, r4
 8008346:	4620      	mov	r0, r4
 8008348:	f019 ff68 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800834c:	9402      	str	r4, [sp, #8]
 800834e:	9501      	str	r5, [sp, #4]
 8008350:	9500      	str	r5, [sp, #0]
 8008352:	4b06      	ldr	r3, [pc, #24]	; (800836c <AT_version_get_l+0x50>)
 8008354:	4622      	mov	r2, r4
 8008356:	4621      	mov	r1, r4
 8008358:	4620      	mov	r0, r4
 800835a:	f019 ff5f 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800835e:	4620      	mov	r0, r4
 8008360:	b005      	add	sp, #20
 8008362:	bd30      	pop	{r4, r5, pc}
 8008364:	080252a8 	.word	0x080252a8
 8008368:	080252c8 	.word	0x080252c8
 800836c:	080252e8 	.word	0x080252e8

08008370 <AT_ADR_get>:
{
 8008370:	b500      	push	{lr}
 8008372:	b083      	sub	sp, #12
  if (LmHandlerGetAdrEnable(&adrEnable) != LORAMAC_HANDLER_SUCCESS)
 8008374:	f10d 0007 	add.w	r0, sp, #7
 8008378:	f00b fa5a 	bl	8013830 <LmHandlerGetAdrEnable>
 800837c:	b938      	cbnz	r0, 800838e <AT_ADR_get+0x1e>
  print_d(adrEnable);
 800837e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8008382:	f7ff fba9 	bl	8007ad8 <print_d>
  return AT_OK;
 8008386:	2000      	movs	r0, #0
}
 8008388:	b003      	add	sp, #12
 800838a:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 800838e:	2002      	movs	r0, #2
 8008390:	e7fa      	b.n	8008388 <AT_ADR_get+0x18>

08008392 <AT_ADR_set>:
{
 8008392:	b508      	push	{r3, lr}
  switch (param[0])
 8008394:	7800      	ldrb	r0, [r0, #0]
 8008396:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800839a:	2b01      	cmp	r3, #1
 800839c:	d901      	bls.n	80083a2 <AT_ADR_set+0x10>
      return AT_PARAM_ERROR;
 800839e:	2002      	movs	r0, #2
}
 80083a0:	bd08      	pop	{r3, pc}
      LmHandlerSetAdrEnable(param[0] - '0');
 80083a2:	3830      	subs	r0, #48	; 0x30
 80083a4:	bf18      	it	ne
 80083a6:	2001      	movne	r0, #1
 80083a8:	f00b fa4e 	bl	8013848 <LmHandlerSetAdrEnable>
  return AT_OK;
 80083ac:	2000      	movs	r0, #0
 80083ae:	e7f7      	b.n	80083a0 <AT_ADR_set+0xe>

080083b0 <AT_DataRate_get>:
{
 80083b0:	b500      	push	{lr}
 80083b2:	b083      	sub	sp, #12
  if (LmHandlerGetTxDatarate(&txDatarate) != LORAMAC_HANDLER_SUCCESS)
 80083b4:	f10d 0007 	add.w	r0, sp, #7
 80083b8:	f00b f89e 	bl	80134f8 <LmHandlerGetTxDatarate>
 80083bc:	b938      	cbnz	r0, 80083ce <AT_DataRate_get+0x1e>
  print_d(txDatarate);
 80083be:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 80083c2:	f7ff fb89 	bl	8007ad8 <print_d>
  return AT_OK;
 80083c6:	2000      	movs	r0, #0
}
 80083c8:	b003      	add	sp, #12
 80083ca:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 80083ce:	2002      	movs	r0, #2
 80083d0:	e7fa      	b.n	80083c8 <AT_DataRate_get+0x18>
	...

080083d4 <AT_DataRate_set>:
{
 80083d4:	b500      	push	{lr}
 80083d6:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%hhu", &datarate) != 1)
 80083d8:	f10d 0207 	add.w	r2, sp, #7
 80083dc:	490a      	ldr	r1, [pc, #40]	; (8008408 <AT_DataRate_set+0x34>)
 80083de:	f01a fe89 	bl	80230f4 <tiny_sscanf>
 80083e2:	2801      	cmp	r0, #1
 80083e4:	d109      	bne.n	80083fa <AT_DataRate_set+0x26>
  if ((datarate < 0) || (datarate > 15))
 80083e6:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 80083ea:	b2c3      	uxtb	r3, r0
 80083ec:	2b0f      	cmp	r3, #15
 80083ee:	d808      	bhi.n	8008402 <AT_DataRate_set+0x2e>
  if (LmHandlerSetTxDatarate(datarate) != LORAMAC_HANDLER_SUCCESS)
 80083f0:	f00b fa40 	bl	8013874 <LmHandlerSetTxDatarate>
 80083f4:	b110      	cbz	r0, 80083fc <AT_DataRate_set+0x28>
    return AT_ERROR;
 80083f6:	2001      	movs	r0, #1
 80083f8:	e000      	b.n	80083fc <AT_DataRate_set+0x28>
    return AT_PARAM_ERROR;
 80083fa:	2002      	movs	r0, #2
}
 80083fc:	b003      	add	sp, #12
 80083fe:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8008402:	2002      	movs	r0, #2
 8008404:	e7fa      	b.n	80083fc <AT_DataRate_set+0x28>
 8008406:	bf00      	nop
 8008408:	08025308 	.word	0x08025308

0800840c <AT_Region_get>:
{
 800840c:	b530      	push	{r4, r5, lr}
 800840e:	b08f      	sub	sp, #60	; 0x3c
  const char *regionStrings[] = { "AS923", "AU915", "CN470", "CN779", "EU433", "EU868", "KR920", "IN865", "US915", "RU864" };
 8008410:	ac04      	add	r4, sp, #16
 8008412:	4d13      	ldr	r5, [pc, #76]	; (8008460 <AT_Region_get+0x54>)
 8008414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800841a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800841c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008420:	e884 0003 	stmia.w	r4, {r0, r1}
  if (LmHandlerGetActiveRegion(&region) != LORAMAC_HANDLER_SUCCESS)
 8008424:	f10d 000f 	add.w	r0, sp, #15
 8008428:	f00b f8ca 	bl	80135c0 <LmHandlerGetActiveRegion>
 800842c:	b998      	cbnz	r0, 8008456 <AT_Region_get+0x4a>
  if (region > LORAMAC_REGION_RU864)
 800842e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008432:	2b09      	cmp	r3, #9
 8008434:	d811      	bhi.n	800845a <AT_Region_get+0x4e>
  AT_PRINTF("%d:%s\r\n", region, regionStrings[region]);
 8008436:	aa0e      	add	r2, sp, #56	; 0x38
 8008438:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800843c:	f852 2c28 	ldr.w	r2, [r2, #-40]
 8008440:	9201      	str	r2, [sp, #4]
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	4b07      	ldr	r3, [pc, #28]	; (8008464 <AT_Region_get+0x58>)
 8008446:	2200      	movs	r2, #0
 8008448:	4611      	mov	r1, r2
 800844a:	4610      	mov	r0, r2
 800844c:	f019 fee6 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 8008450:	2000      	movs	r0, #0
}
 8008452:	b00f      	add	sp, #60	; 0x3c
 8008454:	bd30      	pop	{r4, r5, pc}
    return AT_PARAM_ERROR;
 8008456:	2002      	movs	r0, #2
 8008458:	e7fb      	b.n	8008452 <AT_Region_get+0x46>
    return AT_PARAM_ERROR;
 800845a:	2002      	movs	r0, #2
 800845c:	e7f9      	b.n	8008452 <AT_Region_get+0x46>
 800845e:	bf00      	nop
 8008460:	080248dc 	.word	0x080248dc
 8008464:	08025310 	.word	0x08025310

08008468 <AT_Region_set>:
{
 8008468:	b500      	push	{lr}
 800846a:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%hhu", &region) != 1)
 800846c:	f10d 0207 	add.w	r2, sp, #7
 8008470:	490c      	ldr	r1, [pc, #48]	; (80084a4 <AT_Region_set+0x3c>)
 8008472:	f01a fe3f 	bl	80230f4 <tiny_sscanf>
 8008476:	2801      	cmp	r0, #1
 8008478:	d10c      	bne.n	8008494 <AT_Region_set+0x2c>
  if (region > LORAMAC_REGION_RU864)
 800847a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800847e:	2809      	cmp	r0, #9
 8008480:	d80c      	bhi.n	800849c <AT_Region_set+0x34>
  if(region == LORAMAC_REGION_CN470 || region == LORAMAC_REGION_EU433)
 8008482:	2802      	cmp	r0, #2
 8008484:	d007      	beq.n	8008496 <AT_Region_set+0x2e>
 8008486:	2804      	cmp	r0, #4
 8008488:	d00a      	beq.n	80084a0 <AT_Region_set+0x38>
  if (LmHandlerSetActiveRegion(region) != LORAMAC_HANDLER_SUCCESS)
 800848a:	f00b f9c1 	bl	8013810 <LmHandlerSetActiveRegion>
 800848e:	b110      	cbz	r0, 8008496 <AT_Region_set+0x2e>
    return AT_PARAM_ERROR;
 8008490:	2002      	movs	r0, #2
 8008492:	e000      	b.n	8008496 <AT_Region_set+0x2e>
    return AT_PARAM_ERROR;
 8008494:	2002      	movs	r0, #2
}
 8008496:	b003      	add	sp, #12
 8008498:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 800849c:	2002      	movs	r0, #2
 800849e:	e7fa      	b.n	8008496 <AT_Region_set+0x2e>
    return AT_PARAM_ERROR;
 80084a0:	2002      	movs	r0, #2
 80084a2:	e7f8      	b.n	8008496 <AT_Region_set+0x2e>
 80084a4:	08025308 	.word	0x08025308

080084a8 <AT_DeviceClass_get>:
{
 80084a8:	b510      	push	{r4, lr}
 80084aa:	b084      	sub	sp, #16
  LoraInfo_t *loraInfo = LoraInfo_GetPtr();
 80084ac:	f001 ffa4 	bl	800a3f8 <LoraInfo_GetPtr>
  if (loraInfo == NULL)
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d047      	beq.n	8008544 <AT_DeviceClass_get+0x9c>
 80084b4:	4604      	mov	r4, r0
  if (LmHandlerGetCurrentClass(&currentClass) != LORAMAC_HANDLER_SUCCESS)
 80084b6:	f10d 000f 	add.w	r0, sp, #15
 80084ba:	f00a ff9f 	bl	80133fc <LmHandlerGetCurrentClass>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d142      	bne.n	8008548 <AT_DeviceClass_get+0xa0>
  if ((loraInfo->ClassB == 1) && (ClassBEnableRequest == true) && (currentClass == CLASS_A))
 80084c2:	68a3      	ldr	r3, [r4, #8]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d105      	bne.n	80084d4 <AT_DeviceClass_get+0x2c>
 80084c8:	4b20      	ldr	r3, [pc, #128]	; (800854c <AT_DeviceClass_get+0xa4>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	b113      	cbz	r3, 80084d4 <AT_DeviceClass_get+0x2c>
 80084ce:	f89d 400f 	ldrb.w	r4, [sp, #15]
 80084d2:	b16c      	cbz	r4, 80084f0 <AT_DeviceClass_get+0x48>
    AT_PRINTF("%c\r\n", 'A' + currentClass);
 80084d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80084d8:	3341      	adds	r3, #65	; 0x41
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	4b1c      	ldr	r3, [pc, #112]	; (8008550 <AT_DeviceClass_get+0xa8>)
 80084de:	2200      	movs	r2, #0
 80084e0:	4611      	mov	r1, r2
 80084e2:	4610      	mov	r0, r2
 80084e4:	f019 fe9a 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 80084e8:	2400      	movs	r4, #0
}
 80084ea:	4620      	mov	r0, r4
 80084ec:	b004      	add	sp, #16
 80084ee:	bd10      	pop	{r4, pc}
    if (LmHandlerGetBeaconState(&beaconState) != LORAMAC_HANDLER_SUCCESS)
 80084f0:	f10d 000e 	add.w	r0, sp, #14
 80084f4:	f00b fadd 	bl	8013ab2 <LmHandlerGetBeaconState>
 80084f8:	b9a0      	cbnz	r0, 8008524 <AT_DeviceClass_get+0x7c>
    if ((beaconState == BEACON_STATE_ACQUISITION) ||
 80084fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d912      	bls.n	8008528 <AT_DeviceClass_get+0x80>
        (beaconState == BEACON_STATE_ACQUISITION_BY_TIME) ||
 8008502:	2b04      	cmp	r3, #4
 8008504:	d010      	beq.n	8008528 <AT_DeviceClass_get+0x80>
    else if ((beaconState == BEACON_STATE_LOCKED) || /*Beacon locked on Gateway*/
 8008506:	2b05      	cmp	r3, #5
 8008508:	d005      	beq.n	8008516 <AT_DeviceClass_get+0x6e>
 800850a:	2b07      	cmp	r3, #7
 800850c:	d003      	beq.n	8008516 <AT_DeviceClass_get+0x6e>
             (beaconState == BEACON_STATE_IDLE)   ||
 800850e:	2b08      	cmp	r3, #8
 8008510:	d001      	beq.n	8008516 <AT_DeviceClass_get+0x6e>
             (beaconState == BEACON_STATE_GUARD)  ||
 8008512:	2b09      	cmp	r3, #9
 8008514:	d10f      	bne.n	8008536 <AT_DeviceClass_get+0x8e>
      AT_PRINTF("B,S1\r\n");
 8008516:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <AT_DeviceClass_get+0xac>)
 8008518:	2200      	movs	r2, #0
 800851a:	4611      	mov	r1, r2
 800851c:	4610      	mov	r0, r2
 800851e:	f019 fe7d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8008522:	e7e2      	b.n	80084ea <AT_DeviceClass_get+0x42>
      return AT_PARAM_ERROR;
 8008524:	2402      	movs	r4, #2
 8008526:	e7e0      	b.n	80084ea <AT_DeviceClass_get+0x42>
      AT_PRINTF("B,S0\r\n");
 8008528:	4b0b      	ldr	r3, [pc, #44]	; (8008558 <AT_DeviceClass_get+0xb0>)
 800852a:	2200      	movs	r2, #0
 800852c:	4611      	mov	r1, r2
 800852e:	4610      	mov	r0, r2
 8008530:	f019 fe74 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8008534:	e7d9      	b.n	80084ea <AT_DeviceClass_get+0x42>
      AT_PRINTF("B,S2\r\n");
 8008536:	4b09      	ldr	r3, [pc, #36]	; (800855c <AT_DeviceClass_get+0xb4>)
 8008538:	2200      	movs	r2, #0
 800853a:	4611      	mov	r1, r2
 800853c:	4610      	mov	r0, r2
 800853e:	f019 fe6d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  {
 8008542:	e7d2      	b.n	80084ea <AT_DeviceClass_get+0x42>
    return AT_ERROR;
 8008544:	2401      	movs	r4, #1
 8008546:	e7d0      	b.n	80084ea <AT_DeviceClass_get+0x42>
    return AT_PARAM_ERROR;
 8008548:	2402      	movs	r4, #2
 800854a:	e7ce      	b.n	80084ea <AT_DeviceClass_get+0x42>
 800854c:	200007ea 	.word	0x200007ea
 8008550:	08025330 	.word	0x08025330
 8008554:	08025320 	.word	0x08025320
 8008558:	08025318 	.word	0x08025318
 800855c:	08025328 	.word	0x08025328

08008560 <AT_DeviceClass_set>:
{
 8008560:	b510      	push	{r4, lr}
 8008562:	4604      	mov	r4, r0
  LoraInfo_t *loraInfo = LoraInfo_GetPtr();
 8008564:	f001 ff48 	bl	800a3f8 <LoraInfo_GetPtr>
  if (loraInfo == NULL)
 8008568:	b368      	cbz	r0, 80085c6 <AT_DeviceClass_set+0x66>
  switch (param[0])
 800856a:	7823      	ldrb	r3, [r4, #0]
 800856c:	2b42      	cmp	r3, #66	; 0x42
 800856e:	d01b      	beq.n	80085a8 <AT_DeviceClass_set+0x48>
 8008570:	2b43      	cmp	r3, #67	; 0x43
 8008572:	d024      	beq.n	80085be <AT_DeviceClass_set+0x5e>
 8008574:	2b41      	cmp	r3, #65	; 0x41
 8008576:	d001      	beq.n	800857c <AT_DeviceClass_set+0x1c>
 8008578:	2002      	movs	r0, #2
}
 800857a:	bd10      	pop	{r4, pc}
      if (loraInfo->ClassB == 1)
 800857c:	6883      	ldr	r3, [r0, #8]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d00e      	beq.n	80085a0 <AT_DeviceClass_set+0x40>
      E2P_LORA_Write_Class(CLASS_A);
 8008582:	2000      	movs	r0, #0
 8008584:	f001 fc46 	bl	8009e14 <E2P_LORA_Write_Class>
  errorStatus = LmHandlerRequestClass((DeviceClass_t)E2P_LORA_Read_Class());
 8008588:	f001 fdc4 	bl	800a114 <E2P_LORA_Read_Class>
 800858c:	b2c0      	uxtb	r0, r0
 800858e:	f00a fdd1 	bl	8013134 <LmHandlerRequestClass>
  if (errorStatus == LORAMAC_HANDLER_NO_NETWORK_JOINED)
 8008592:	f110 0f03 	cmn.w	r0, #3
 8008596:	d018      	beq.n	80085ca <AT_DeviceClass_set+0x6a>
  else if (errorStatus != LORAMAC_HANDLER_SUCCESS)
 8008598:	2800      	cmp	r0, #0
 800859a:	d0ee      	beq.n	800857a <AT_DeviceClass_set+0x1a>
    return AT_ERROR;
 800859c:	2001      	movs	r0, #1
 800859e:	e7ec      	b.n	800857a <AT_DeviceClass_set+0x1a>
        ClassBEnableRequest = false;
 80085a0:	4b0b      	ldr	r3, [pc, #44]	; (80085d0 <AT_DeviceClass_set+0x70>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	701a      	strb	r2, [r3, #0]
 80085a6:	e7ec      	b.n	8008582 <AT_DeviceClass_set+0x22>
      if (loraInfo->ClassB == 1)
 80085a8:	6883      	ldr	r3, [r0, #8]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d001      	beq.n	80085b2 <AT_DeviceClass_set+0x52>
        return AT_NO_CLASS_B_ENABLE;
 80085ae:	2007      	movs	r0, #7
 80085b0:	e7e3      	b.n	800857a <AT_DeviceClass_set+0x1a>
        ClassBEnableRequest = true;
 80085b2:	2001      	movs	r0, #1
 80085b4:	4b06      	ldr	r3, [pc, #24]	; (80085d0 <AT_DeviceClass_set+0x70>)
 80085b6:	7018      	strb	r0, [r3, #0]
		E2P_LORA_Write_Class(CLASS_B);
 80085b8:	f001 fc2c 	bl	8009e14 <E2P_LORA_Write_Class>
      break;
 80085bc:	e7e4      	b.n	8008588 <AT_DeviceClass_set+0x28>
      E2P_LORA_Write_Class(CLASS_C);
 80085be:	2002      	movs	r0, #2
 80085c0:	f001 fc28 	bl	8009e14 <E2P_LORA_Write_Class>
      break;
 80085c4:	e7e0      	b.n	8008588 <AT_DeviceClass_set+0x28>
    return AT_ERROR;
 80085c6:	2001      	movs	r0, #1
 80085c8:	e7d7      	b.n	800857a <AT_DeviceClass_set+0x1a>
    return AT_NO_NET_JOINED;
 80085ca:	2005      	movs	r0, #5
 80085cc:	e7d5      	b.n	800857a <AT_DeviceClass_set+0x1a>
 80085ce:	bf00      	nop
 80085d0:	200007ea 	.word	0x200007ea

080085d4 <AT_DutyCycle_get>:
{
 80085d4:	b500      	push	{lr}
 80085d6:	b083      	sub	sp, #12
  if (LmHandlerGetDutyCycleEnable(&dutyCycleEnable) != LORAMAC_HANDLER_SUCCESS)
 80085d8:	f10d 0007 	add.w	r0, sp, #7
 80085dc:	f00b f966 	bl	80138ac <LmHandlerGetDutyCycleEnable>
 80085e0:	b938      	cbnz	r0, 80085f2 <AT_DutyCycle_get+0x1e>
  print_d(dutyCycleEnable);
 80085e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80085e6:	f7ff fa77 	bl	8007ad8 <print_d>
  return AT_OK;
 80085ea:	2000      	movs	r0, #0
}
 80085ec:	b003      	add	sp, #12
 80085ee:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 80085f2:	2002      	movs	r0, #2
 80085f4:	e7fa      	b.n	80085ec <AT_DutyCycle_get+0x18>

080085f6 <AT_DutyCycle_set>:
{
 80085f6:	b508      	push	{r3, lr}
  switch (param[0])
 80085f8:	7800      	ldrb	r0, [r0, #0]
 80085fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d901      	bls.n	8008606 <AT_DutyCycle_set+0x10>
      return AT_PARAM_ERROR;
 8008602:	2002      	movs	r0, #2
}
 8008604:	bd08      	pop	{r3, pc}
      LmHandlerSetDutyCycleEnable(param[0] - '0');
 8008606:	3830      	subs	r0, #48	; 0x30
 8008608:	bf18      	it	ne
 800860a:	2001      	movne	r0, #1
 800860c:	f00b f95a 	bl	80138c4 <LmHandlerSetDutyCycleEnable>
  return AT_OK;
 8008610:	2000      	movs	r0, #0
 8008612:	e7f7      	b.n	8008604 <AT_DutyCycle_set+0xe>

08008614 <AT_JoinAcceptDelay1_get>:
{
 8008614:	b500      	push	{lr}
 8008616:	b083      	sub	sp, #12
  if (LmHandlerGetJoinRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8008618:	a801      	add	r0, sp, #4
 800861a:	f00b f9b5 	bl	8013988 <LmHandlerGetJoinRx1Delay>
 800861e:	b930      	cbnz	r0, 800862e <AT_JoinAcceptDelay1_get+0x1a>
  print_u(rxDelay);
 8008620:	9801      	ldr	r0, [sp, #4]
 8008622:	f7ff f9d9 	bl	80079d8 <print_u>
  return AT_OK;
 8008626:	2000      	movs	r0, #0
}
 8008628:	b003      	add	sp, #12
 800862a:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 800862e:	2002      	movs	r0, #2
 8008630:	e7fa      	b.n	8008628 <AT_JoinAcceptDelay1_get+0x14>
	...

08008634 <AT_JoinAcceptDelay1_set>:
{
 8008634:	b500      	push	{lr}
 8008636:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 8008638:	aa01      	add	r2, sp, #4
 800863a:	4908      	ldr	r1, [pc, #32]	; (800865c <AT_JoinAcceptDelay1_set+0x28>)
 800863c:	f01a fd5a 	bl	80230f4 <tiny_sscanf>
 8008640:	2801      	cmp	r0, #1
 8008642:	d003      	beq.n	800864c <AT_JoinAcceptDelay1_set+0x18>
    return AT_PARAM_ERROR;
 8008644:	2002      	movs	r0, #2
}
 8008646:	b003      	add	sp, #12
 8008648:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (LmHandlerSetJoinRx1Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800864c:	9801      	ldr	r0, [sp, #4]
 800864e:	f00b fa0a 	bl	8013a66 <LmHandlerSetJoinRx1Delay>
 8008652:	2800      	cmp	r0, #0
 8008654:	d0f7      	beq.n	8008646 <AT_JoinAcceptDelay1_set+0x12>
    return AT_PARAM_ERROR;
 8008656:	2002      	movs	r0, #2
 8008658:	e7f5      	b.n	8008646 <AT_JoinAcceptDelay1_set+0x12>
 800865a:	bf00      	nop
 800865c:	08025338 	.word	0x08025338

08008660 <AT_JoinAcceptDelay2_get>:
{
 8008660:	b500      	push	{lr}
 8008662:	b083      	sub	sp, #12
  if (LmHandlerGetJoinRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8008664:	a801      	add	r0, sp, #4
 8008666:	f00b f9a4 	bl	80139b2 <LmHandlerGetJoinRx2Delay>
 800866a:	b930      	cbnz	r0, 800867a <AT_JoinAcceptDelay2_get+0x1a>
  print_u(rxDelay);
 800866c:	9801      	ldr	r0, [sp, #4]
 800866e:	f7ff f9b3 	bl	80079d8 <print_u>
  return AT_OK;
 8008672:	2000      	movs	r0, #0
}
 8008674:	b003      	add	sp, #12
 8008676:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 800867a:	2002      	movs	r0, #2
 800867c:	e7fa      	b.n	8008674 <AT_JoinAcceptDelay2_get+0x14>
	...

08008680 <AT_JoinAcceptDelay2_set>:
{
 8008680:	b500      	push	{lr}
 8008682:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 8008684:	aa01      	add	r2, sp, #4
 8008686:	4908      	ldr	r1, [pc, #32]	; (80086a8 <AT_JoinAcceptDelay2_set+0x28>)
 8008688:	f01a fd34 	bl	80230f4 <tiny_sscanf>
 800868c:	2801      	cmp	r0, #1
 800868e:	d003      	beq.n	8008698 <AT_JoinAcceptDelay2_set+0x18>
    return AT_PARAM_ERROR;
 8008690:	2002      	movs	r0, #2
}
 8008692:	b003      	add	sp, #12
 8008694:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (LmHandlerSetJoinRx2Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8008698:	9801      	ldr	r0, [sp, #4]
 800869a:	f00b f9f4 	bl	8013a86 <LmHandlerSetJoinRx2Delay>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d0f7      	beq.n	8008692 <AT_JoinAcceptDelay2_set+0x12>
    return AT_PARAM_ERROR;
 80086a2:	2002      	movs	r0, #2
 80086a4:	e7f5      	b.n	8008692 <AT_JoinAcceptDelay2_set+0x12>
 80086a6:	bf00      	nop
 80086a8:	08025338 	.word	0x08025338

080086ac <AT_Rx1Delay_get>:
{
 80086ac:	b500      	push	{lr}
 80086ae:	b083      	sub	sp, #12
  if (LmHandlerGetRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 80086b0:	a801      	add	r0, sp, #4
 80086b2:	f00b f93f 	bl	8013934 <LmHandlerGetRx1Delay>
 80086b6:	b930      	cbnz	r0, 80086c6 <AT_Rx1Delay_get+0x1a>
  print_u(rxDelay);
 80086b8:	9801      	ldr	r0, [sp, #4]
 80086ba:	f7ff f98d 	bl	80079d8 <print_u>
  return AT_OK;
 80086be:	2000      	movs	r0, #0
}
 80086c0:	b003      	add	sp, #12
 80086c2:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 80086c6:	2002      	movs	r0, #2
 80086c8:	e7fa      	b.n	80086c0 <AT_Rx1Delay_get+0x14>
	...

080086cc <AT_Rx1Delay_set>:
{
 80086cc:	b500      	push	{lr}
 80086ce:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 80086d0:	aa01      	add	r2, sp, #4
 80086d2:	4908      	ldr	r1, [pc, #32]	; (80086f4 <AT_Rx1Delay_set+0x28>)
 80086d4:	f01a fd0e 	bl	80230f4 <tiny_sscanf>
 80086d8:	2801      	cmp	r0, #1
 80086da:	d003      	beq.n	80086e4 <AT_Rx1Delay_set+0x18>
    return AT_PARAM_ERROR;
 80086dc:	2002      	movs	r0, #2
}
 80086de:	b003      	add	sp, #12
 80086e0:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (LmHandlerSetRx1Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 80086e4:	9801      	ldr	r0, [sp, #4]
 80086e6:	f00b f99e 	bl	8013a26 <LmHandlerSetRx1Delay>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	d0f7      	beq.n	80086de <AT_Rx1Delay_set+0x12>
    return AT_PARAM_ERROR;
 80086ee:	2002      	movs	r0, #2
 80086f0:	e7f5      	b.n	80086de <AT_Rx1Delay_set+0x12>
 80086f2:	bf00      	nop
 80086f4:	08025338 	.word	0x08025338

080086f8 <AT_Rx2Delay_get>:
{
 80086f8:	b500      	push	{lr}
 80086fa:	b083      	sub	sp, #12
  if (LmHandlerGetRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 80086fc:	a801      	add	r0, sp, #4
 80086fe:	f00b f92e 	bl	801395e <LmHandlerGetRx2Delay>
 8008702:	b930      	cbnz	r0, 8008712 <AT_Rx2Delay_get+0x1a>
  print_u(rxDelay);
 8008704:	9801      	ldr	r0, [sp, #4]
 8008706:	f7ff f967 	bl	80079d8 <print_u>
  return AT_OK;
 800870a:	2000      	movs	r0, #0
}
 800870c:	b003      	add	sp, #12
 800870e:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8008712:	2002      	movs	r0, #2
 8008714:	e7fa      	b.n	800870c <AT_Rx2Delay_get+0x14>
	...

08008718 <AT_Rx2Delay_set>:
{
 8008718:	b500      	push	{lr}
 800871a:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 800871c:	aa01      	add	r2, sp, #4
 800871e:	4908      	ldr	r1, [pc, #32]	; (8008740 <AT_Rx2Delay_set+0x28>)
 8008720:	f01a fce8 	bl	80230f4 <tiny_sscanf>
 8008724:	2801      	cmp	r0, #1
 8008726:	d003      	beq.n	8008730 <AT_Rx2Delay_set+0x18>
    return AT_PARAM_ERROR;
 8008728:	2002      	movs	r0, #2
}
 800872a:	b003      	add	sp, #12
 800872c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (LmHandlerSetRx2Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8008730:	9801      	ldr	r0, [sp, #4]
 8008732:	f00b f988 	bl	8013a46 <LmHandlerSetRx2Delay>
 8008736:	2800      	cmp	r0, #0
 8008738:	d0f7      	beq.n	800872a <AT_Rx2Delay_set+0x12>
    return AT_PARAM_ERROR;
 800873a:	2002      	movs	r0, #2
 800873c:	e7f5      	b.n	800872a <AT_Rx2Delay_set+0x12>
 800873e:	bf00      	nop
 8008740:	08025338 	.word	0x08025338

08008744 <AT_Rx2DataRate_get>:
{
 8008744:	b500      	push	{lr}
 8008746:	b083      	sub	sp, #12
  LmHandlerGetRX2Params(&rx2Params);
 8008748:	4668      	mov	r0, sp
 800874a:	f00b f8c5 	bl	80138d8 <LmHandlerGetRX2Params>
  print_d(rx2Params.Datarate);
 800874e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8008752:	f7ff f9c1 	bl	8007ad8 <print_d>
}
 8008756:	2000      	movs	r0, #0
 8008758:	b003      	add	sp, #12
 800875a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008760 <AT_Rx2DataRate_set>:
{
 8008760:	b510      	push	{r4, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	4604      	mov	r4, r0
  LmHandlerGetRX2Params(&rx2Params);
 8008766:	4668      	mov	r0, sp
 8008768:	f00b f8b6 	bl	80138d8 <LmHandlerGetRX2Params>
  if (tiny_sscanf(param, "%hhu", &(rx2Params.Datarate)) != 1)
 800876c:	aa01      	add	r2, sp, #4
 800876e:	490a      	ldr	r1, [pc, #40]	; (8008798 <AT_Rx2DataRate_set+0x38>)
 8008770:	4620      	mov	r0, r4
 8008772:	f01a fcbf 	bl	80230f4 <tiny_sscanf>
 8008776:	2801      	cmp	r0, #1
 8008778:	d109      	bne.n	800878e <AT_Rx2DataRate_set+0x2e>
  else if (rx2Params.Datarate > 15)
 800877a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800877e:	2b0f      	cmp	r3, #15
 8008780:	d808      	bhi.n	8008794 <AT_Rx2DataRate_set+0x34>
  else if (LmHandlerSetRX2Params(&rx2Params) != LORAMAC_HANDLER_SUCCESS)
 8008782:	4668      	mov	r0, sp
 8008784:	f00b f93b 	bl	80139fe <LmHandlerSetRX2Params>
 8008788:	b110      	cbz	r0, 8008790 <AT_Rx2DataRate_set+0x30>
    return AT_PARAM_ERROR;
 800878a:	2002      	movs	r0, #2
 800878c:	e000      	b.n	8008790 <AT_Rx2DataRate_set+0x30>
    return AT_PARAM_ERROR;
 800878e:	2002      	movs	r0, #2
}
 8008790:	b002      	add	sp, #8
 8008792:	bd10      	pop	{r4, pc}
    return AT_PARAM_ERROR;
 8008794:	2002      	movs	r0, #2
 8008796:	e7fb      	b.n	8008790 <AT_Rx2DataRate_set+0x30>
 8008798:	08025308 	.word	0x08025308

0800879c <AT_Rx2Frequency_get>:
{
 800879c:	b500      	push	{lr}
 800879e:	b083      	sub	sp, #12
  LmHandlerGetRX2Params(&rx2Params);
 80087a0:	4668      	mov	r0, sp
 80087a2:	f00b f899 	bl	80138d8 <LmHandlerGetRX2Params>
  print_d(rx2Params.Frequency);
 80087a6:	9800      	ldr	r0, [sp, #0]
 80087a8:	f7ff f996 	bl	8007ad8 <print_d>
}
 80087ac:	2000      	movs	r0, #0
 80087ae:	b003      	add	sp, #12
 80087b0:	f85d fb04 	ldr.w	pc, [sp], #4

080087b4 <AT_Rx2Frequency_set>:
{
 80087b4:	b510      	push	{r4, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	4604      	mov	r4, r0
  LmHandlerGetRX2Params(&rx2Params);
 80087ba:	4668      	mov	r0, sp
 80087bc:	f00b f88c 	bl	80138d8 <LmHandlerGetRX2Params>
  if (tiny_sscanf(param, "%lu", &(rx2Params.Frequency)) != 1)
 80087c0:	466a      	mov	r2, sp
 80087c2:	4908      	ldr	r1, [pc, #32]	; (80087e4 <AT_Rx2Frequency_set+0x30>)
 80087c4:	4620      	mov	r0, r4
 80087c6:	f01a fc95 	bl	80230f4 <tiny_sscanf>
 80087ca:	2801      	cmp	r0, #1
 80087cc:	d002      	beq.n	80087d4 <AT_Rx2Frequency_set+0x20>
    return AT_PARAM_ERROR;
 80087ce:	2002      	movs	r0, #2
}
 80087d0:	b002      	add	sp, #8
 80087d2:	bd10      	pop	{r4, pc}
  else if (LmHandlerSetRX2Params(&rx2Params) != LORAMAC_HANDLER_SUCCESS)
 80087d4:	4668      	mov	r0, sp
 80087d6:	f00b f912 	bl	80139fe <LmHandlerSetRX2Params>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d0f8      	beq.n	80087d0 <AT_Rx2Frequency_set+0x1c>
    return AT_PARAM_ERROR;
 80087de:	2002      	movs	r0, #2
 80087e0:	e7f6      	b.n	80087d0 <AT_Rx2Frequency_set+0x1c>
 80087e2:	bf00      	nop
 80087e4:	08025338 	.word	0x08025338

080087e8 <AT_TransmitPower_get>:
{
 80087e8:	b500      	push	{lr}
 80087ea:	b083      	sub	sp, #12
  if (LmHandlerGetTxPower(&txPower) != LORAMAC_HANDLER_SUCCESS)
 80087ec:	f10d 0007 	add.w	r0, sp, #7
 80087f0:	f00b f88a 	bl	8013908 <LmHandlerGetTxPower>
 80087f4:	b938      	cbnz	r0, 8008806 <AT_TransmitPower_get+0x1e>
  print_d(txPower);
 80087f6:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 80087fa:	f7ff f96d 	bl	8007ad8 <print_d>
  return AT_OK;
 80087fe:	2000      	movs	r0, #0
}
 8008800:	b003      	add	sp, #12
 8008802:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 8008806:	2002      	movs	r0, #2
 8008808:	e7fa      	b.n	8008800 <AT_TransmitPower_get+0x18>
	...

0800880c <AT_TransmitPower_set>:
{
 800880c:	b500      	push	{lr}
 800880e:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%hhu", &txPower) != 1)
 8008810:	f10d 0207 	add.w	r2, sp, #7
 8008814:	4908      	ldr	r1, [pc, #32]	; (8008838 <AT_TransmitPower_set+0x2c>)
 8008816:	f01a fc6d 	bl	80230f4 <tiny_sscanf>
 800881a:	2801      	cmp	r0, #1
 800881c:	d003      	beq.n	8008826 <AT_TransmitPower_set+0x1a>
    return AT_PARAM_ERROR;
 800881e:	2002      	movs	r0, #2
}
 8008820:	b003      	add	sp, #12
 8008822:	f85d fb04 	ldr.w	pc, [sp], #4
  if (LmHandlerSetTxPower(txPower) != LORAMAC_HANDLER_SUCCESS)
 8008826:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800882a:	f00b f8d7 	bl	80139dc <LmHandlerSetTxPower>
 800882e:	2800      	cmp	r0, #0
 8008830:	d0f6      	beq.n	8008820 <AT_TransmitPower_set+0x14>
    return AT_PARAM_ERROR;
 8008832:	2002      	movs	r0, #2
 8008834:	e7f4      	b.n	8008820 <AT_TransmitPower_set+0x14>
 8008836:	bf00      	nop
 8008838:	08025308 	.word	0x08025308

0800883c <AT_PingSlot_get>:
{
 800883c:	b500      	push	{lr}
 800883e:	b083      	sub	sp, #12
  if (LmHandlerGetPingPeriodicity(&periodicity) != LORAMAC_HANDLER_SUCCESS)
 8008840:	f10d 0007 	add.w	r0, sp, #7
 8008844:	f00b f92f 	bl	8013aa6 <LmHandlerGetPingPeriodicity>
 8008848:	b938      	cbnz	r0, 800885a <AT_PingSlot_get+0x1e>
  print_d(periodicity);
 800884a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800884e:	f7ff f943 	bl	8007ad8 <print_d>
  return AT_OK;
 8008852:	2000      	movs	r0, #0
}
 8008854:	b003      	add	sp, #12
 8008856:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 800885a:	2002      	movs	r0, #2
 800885c:	e7fa      	b.n	8008854 <AT_PingSlot_get+0x18>
	...

08008860 <AT_PingSlot_set>:
{
 8008860:	b500      	push	{lr}
 8008862:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%hhu", &periodicity) != 1)
 8008864:	f10d 0207 	add.w	r2, sp, #7
 8008868:	4909      	ldr	r1, [pc, #36]	; (8008890 <AT_PingSlot_set+0x30>)
 800886a:	f01a fc43 	bl	80230f4 <tiny_sscanf>
 800886e:	2801      	cmp	r0, #1
 8008870:	d108      	bne.n	8008884 <AT_PingSlot_set+0x24>
  else if (periodicity > 7)
 8008872:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8008876:	2807      	cmp	r0, #7
 8008878:	d808      	bhi.n	800888c <AT_PingSlot_set+0x2c>
  else if (LmHandlerSetPingPeriodicity(periodicity) != LORAMAC_HANDLER_SUCCESS)
 800887a:	f00b f917 	bl	8013aac <LmHandlerSetPingPeriodicity>
 800887e:	b110      	cbz	r0, 8008886 <AT_PingSlot_set+0x26>
    return AT_PARAM_ERROR;
 8008880:	2002      	movs	r0, #2
 8008882:	e000      	b.n	8008886 <AT_PingSlot_set+0x26>
    return AT_PARAM_ERROR;
 8008884:	2002      	movs	r0, #2
}
 8008886:	b003      	add	sp, #12
 8008888:	f85d fb04 	ldr.w	pc, [sp], #4
    return AT_PARAM_ERROR;
 800888c:	2002      	movs	r0, #2
 800888e:	e7fa      	b.n	8008886 <AT_PingSlot_set+0x26>
 8008890:	08025308 	.word	0x08025308

08008894 <AT_Network_Type_get>:
{
 8008894:	b508      	push	{r3, lr}
  if(E2P_LORA_Read_Network_Type() == PUBLIC_NETWORK)
 8008896:	f001 fc64 	bl	800a162 <E2P_LORA_Read_Network_Type>
 800889a:	2801      	cmp	r0, #1
 800889c:	d007      	beq.n	80088ae <AT_Network_Type_get+0x1a>
  	AT_PRINTF("Private Mode\r\n");
 800889e:	4b07      	ldr	r3, [pc, #28]	; (80088bc <AT_Network_Type_get+0x28>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	4611      	mov	r1, r2
 80088a4:	4610      	mov	r0, r2
 80088a6:	f019 fcb9 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 80088aa:	2000      	movs	r0, #0
 80088ac:	bd08      	pop	{r3, pc}
  	AT_PRINTF("Public Mode\r\n");
 80088ae:	4b04      	ldr	r3, [pc, #16]	; (80088c0 <AT_Network_Type_get+0x2c>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	4611      	mov	r1, r2
 80088b4:	4610      	mov	r0, r2
 80088b6:	f019 fcb1 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 80088ba:	e7f6      	b.n	80088aa <AT_Network_Type_get+0x16>
 80088bc:	0802534c 	.word	0x0802534c
 80088c0:	0802533c 	.word	0x0802533c

080088c4 <AT_Network_Type_set>:
{
 80088c4:	b508      	push	{r3, lr}
  switch (param[0])
 80088c6:	7803      	ldrb	r3, [r0, #0]
 80088c8:	2b30      	cmp	r3, #48	; 0x30
 80088ca:	d003      	beq.n	80088d4 <AT_Network_Type_set+0x10>
 80088cc:	2b31      	cmp	r3, #49	; 0x31
 80088ce:	d00c      	beq.n	80088ea <AT_Network_Type_set+0x26>
 80088d0:	2002      	movs	r0, #2
}
 80088d2:	bd08      	pop	{r3, pc}
	  AT_PRINTF("Public Mode\r\n");
 80088d4:	4b0a      	ldr	r3, [pc, #40]	; (8008900 <AT_Network_Type_set+0x3c>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	4611      	mov	r1, r2
 80088da:	4610      	mov	r0, r2
 80088dc:	f019 fc9e 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
	  E2P_LORA_Write_Network_Type(PUBLIC_NETWORK);
 80088e0:	2001      	movs	r0, #1
 80088e2:	f001 fac3 	bl	8009e6c <E2P_LORA_Write_Network_Type>
  return AT_OK;
 80088e6:	2000      	movs	r0, #0
      break;
 80088e8:	e7f3      	b.n	80088d2 <AT_Network_Type_set+0xe>
	  AT_PRINTF("Private Mode\r\n");
 80088ea:	4b06      	ldr	r3, [pc, #24]	; (8008904 <AT_Network_Type_set+0x40>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	4611      	mov	r1, r2
 80088f0:	4610      	mov	r0, r2
 80088f2:	f019 fc93 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      E2P_LORA_Write_Network_Type(PRIVATE_NETWORK);
 80088f6:	2000      	movs	r0, #0
 80088f8:	f001 fab8 	bl	8009e6c <E2P_LORA_Write_Network_Type>
  return AT_OK;
 80088fc:	2000      	movs	r0, #0
      break;
 80088fe:	e7e8      	b.n	80088d2 <AT_Network_Type_set+0xe>
 8008900:	0802533c 	.word	0x0802533c
 8008904:	0802534c 	.word	0x0802534c

08008908 <AT_test_txTone>:
{
 8008908:	b508      	push	{r3, lr}
  if (0U == TST_TxTone())
 800890a:	f001 fde7 	bl	800a4dc <TST_TxTone>
 800890e:	b900      	cbnz	r0, 8008912 <AT_test_txTone+0xa>
}
 8008910:	bd08      	pop	{r3, pc}
    return AT_BUSY_ERROR;
 8008912:	2003      	movs	r0, #3
 8008914:	e7fc      	b.n	8008910 <AT_test_txTone+0x8>

08008916 <AT_test_rxRssi>:
{
 8008916:	b508      	push	{r3, lr}
  if (0U == TST_RxRssi())
 8008918:	f001 fe06 	bl	800a528 <TST_RxRssi>
 800891c:	b900      	cbnz	r0, 8008920 <AT_test_rxRssi+0xa>
}
 800891e:	bd08      	pop	{r3, pc}
    return AT_BUSY_ERROR;
 8008920:	2003      	movs	r0, #3
 8008922:	e7fc      	b.n	800891e <AT_test_rxRssi+0x8>

08008924 <AT_test_get_config>:
{
 8008924:	b530      	push	{r4, r5, lr}
 8008926:	b0a1      	sub	sp, #132	; 0x84
  uint32_t loraBW[7] = {7812, 15625, 31250, 62500, 125000, 250000, 500000};
 8008928:	ac0d      	add	r4, sp, #52	; 0x34
 800892a:	4d73      	ldr	r5, [pc, #460]	; (8008af8 <AT_test_get_config+0x1d4>)
 800892c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800892e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008930:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008934:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TST_get_config(&testParam);
 8008938:	a814      	add	r0, sp, #80	; 0x50
 800893a:	f001 fe77 	bl	800a62c <TST_get_config>
  AT_PRINTF("1: Freq= %d Hz\r\n", testParam.freq);
 800893e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	4b6e      	ldr	r3, [pc, #440]	; (8008afc <AT_test_get_config+0x1d8>)
 8008944:	2200      	movs	r2, #0
 8008946:	4611      	mov	r1, r2
 8008948:	4610      	mov	r0, r2
 800894a:	f019 fc67 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("2: Power= %d dBm\r\n", testParam.power);
 800894e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	4b6b      	ldr	r3, [pc, #428]	; (8008b00 <AT_test_get_config+0x1dc>)
 8008954:	2200      	movs	r2, #0
 8008956:	4611      	mov	r1, r2
 8008958:	4610      	mov	r0, r2
 800895a:	f019 fc5f 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  if (testParam.modulation == 0)
 800895e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008960:	2b00      	cmp	r3, #0
 8008962:	d02b      	beq.n	80089bc <AT_test_get_config+0x98>
  else if (testParam.modulation == 1)
 8008964:	2b01      	cmp	r3, #1
 8008966:	d074      	beq.n	8008a52 <AT_test_get_config+0x12e>
    AT_PRINTF("4: BPSK datarate= %d bps\r\n", testParam.loraSf_datarate);
 8008968:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	4b65      	ldr	r3, [pc, #404]	; (8008b04 <AT_test_get_config+0x1e0>)
 800896e:	2200      	movs	r2, #0
 8008970:	4611      	mov	r1, r2
 8008972:	4610      	mov	r0, r2
 8008974:	f019 fc52 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("can be copy/paste in set cmd: AT+TCONF=%d:%d:%d:%d:4/%d:%d:%d:%d:%d:%d:%d:%d\r\n", testParam.freq,
 8008978:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800897a:	930b      	str	r3, [sp, #44]	; 0x2c
 800897c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800897e:	930a      	str	r3, [sp, #40]	; 0x28
 8008980:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008982:	9309      	str	r3, [sp, #36]	; 0x24
 8008984:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008986:	9308      	str	r3, [sp, #32]
 8008988:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800898a:	9307      	str	r3, [sp, #28]
 800898c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800898e:	9306      	str	r3, [sp, #24]
 8008990:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008992:	9305      	str	r3, [sp, #20]
 8008994:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008996:	3304      	adds	r3, #4
 8008998:	9304      	str	r3, [sp, #16]
 800899a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800899c:	9303      	str	r3, [sp, #12]
 800899e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089a0:	9302      	str	r3, [sp, #8]
 80089a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	4b57      	ldr	r3, [pc, #348]	; (8008b08 <AT_test_get_config+0x1e4>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	4611      	mov	r1, r2
 80089b0:	4610      	mov	r0, r2
 80089b2:	f019 fc33 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 80089b6:	2000      	movs	r0, #0
 80089b8:	b021      	add	sp, #132	; 0x84
 80089ba:	bd30      	pop	{r4, r5, pc}
    AT_PRINTF("3: Bandwidth= %d Hz\r\n", testParam.bandwidth);
 80089bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	4b52      	ldr	r3, [pc, #328]	; (8008b0c <AT_test_get_config+0x1e8>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	4611      	mov	r1, r2
 80089c6:	4610      	mov	r0, r2
 80089c8:	f019 fc28 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("4: FSK datarate= %d bps\r\n", testParam.loraSf_datarate);
 80089cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	4b4f      	ldr	r3, [pc, #316]	; (8008b10 <AT_test_get_config+0x1ec>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	4611      	mov	r1, r2
 80089d6:	4610      	mov	r0, r2
 80089d8:	f019 fc20 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("5: Coding Rate not applicable\r\n");
 80089dc:	4b4d      	ldr	r3, [pc, #308]	; (8008b14 <AT_test_get_config+0x1f0>)
 80089de:	2200      	movs	r2, #0
 80089e0:	4611      	mov	r1, r2
 80089e2:	4610      	mov	r0, r2
 80089e4:	f019 fc1a 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("6: LNA State= %d  \r\n", testParam.lna);
 80089e8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	4b4a      	ldr	r3, [pc, #296]	; (8008b18 <AT_test_get_config+0x1f4>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	4611      	mov	r1, r2
 80089f2:	4610      	mov	r0, r2
 80089f4:	f019 fc12 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("7: PA Boost State= %d  \r\n", testParam.paBoost);
 80089f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	4b47      	ldr	r3, [pc, #284]	; (8008b1c <AT_test_get_config+0x1f8>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	4611      	mov	r1, r2
 8008a02:	4610      	mov	r0, r2
 8008a04:	f019 fc0a 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("8: modulation FSK\r\n");
 8008a08:	4b45      	ldr	r3, [pc, #276]	; (8008b20 <AT_test_get_config+0x1fc>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	4610      	mov	r0, r2
 8008a10:	f019 fc04 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("9: Payload len= %d Bytes\r\n", testParam.payloadLen);
 8008a14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	4b42      	ldr	r3, [pc, #264]	; (8008b24 <AT_test_get_config+0x200>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	4610      	mov	r0, r2
 8008a20:	f019 fbfc 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("10: FSK deviation= %d Hz\r\n", testParam.fskDev);
 8008a24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	4b3f      	ldr	r3, [pc, #252]	; (8008b28 <AT_test_get_config+0x204>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f019 fbf4 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("11: LowDRopt not applicable\r\n");
 8008a34:	4b3d      	ldr	r3, [pc, #244]	; (8008b2c <AT_test_get_config+0x208>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	4611      	mov	r1, r2
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	f019 fbee 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("12: FSK gaussian BT product= %d \r\n", testParam.BTproduct);
 8008a40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	4b3a      	ldr	r3, [pc, #232]	; (8008b30 <AT_test_get_config+0x20c>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	4611      	mov	r1, r2
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	f019 fbe6 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8008a50:	e792      	b.n	8008978 <AT_test_get_config+0x54>
    AT_PRINTF("3: Bandwidth= %d (=%d Hz)\r\n", testParam.bandwidth, loraBW[testParam.bandwidth]);
 8008a52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a54:	aa20      	add	r2, sp, #128	; 0x80
 8008a56:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008a5a:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8008a5e:	9201      	str	r2, [sp, #4]
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	4b34      	ldr	r3, [pc, #208]	; (8008b34 <AT_test_get_config+0x210>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	4611      	mov	r1, r2
 8008a68:	4610      	mov	r0, r2
 8008a6a:	f019 fbd7 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("4: SF= %d \r\n", testParam.loraSf_datarate);
 8008a6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	4b31      	ldr	r3, [pc, #196]	; (8008b38 <AT_test_get_config+0x214>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	4611      	mov	r1, r2
 8008a78:	4610      	mov	r0, r2
 8008a7a:	f019 fbcf 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("5: CR= %d (=4/%d) \r\n", testParam.codingRate, testParam.codingRate + 4);
 8008a7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a80:	1d1a      	adds	r2, r3, #4
 8008a82:	9201      	str	r2, [sp, #4]
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	4b2d      	ldr	r3, [pc, #180]	; (8008b3c <AT_test_get_config+0x218>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	f019 fbc5 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("6: LNA State= %d  \r\n", testParam.lna);
 8008a92:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	4b20      	ldr	r3, [pc, #128]	; (8008b18 <AT_test_get_config+0x1f4>)
 8008a98:	2200      	movs	r2, #0
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	f019 fbbd 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("7: PA Boost State= %d  \r\n", testParam.paBoost);
 8008aa2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	4b1d      	ldr	r3, [pc, #116]	; (8008b1c <AT_test_get_config+0x1f8>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	4611      	mov	r1, r2
 8008aac:	4610      	mov	r0, r2
 8008aae:	f019 fbb5 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("8: modulation LORA\r\n");
 8008ab2:	4b23      	ldr	r3, [pc, #140]	; (8008b40 <AT_test_get_config+0x21c>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	4610      	mov	r0, r2
 8008aba:	f019 fbaf 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("9: Payload len= %d Bytes\r\n", testParam.payloadLen);
 8008abe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	4b18      	ldr	r3, [pc, #96]	; (8008b24 <AT_test_get_config+0x200>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	4610      	mov	r0, r2
 8008aca:	f019 fba7 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("10: Frequency deviation not applicable\r\n");
 8008ace:	4b1d      	ldr	r3, [pc, #116]	; (8008b44 <AT_test_get_config+0x220>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	f019 fba1 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("11: LowDRopt[0 to 2]= %d \r\n", testParam.lowDrOpt);
 8008ada:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	4b1a      	ldr	r3, [pc, #104]	; (8008b48 <AT_test_get_config+0x224>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	f019 fb99 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("12 BT product not applicable\r\n");
 8008aea:	4b18      	ldr	r3, [pc, #96]	; (8008b4c <AT_test_get_config+0x228>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	4611      	mov	r1, r2
 8008af0:	4610      	mov	r0, r2
 8008af2:	f019 fb93 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8008af6:	e73f      	b.n	8008978 <AT_test_get_config+0x54>
 8008af8:	08024904 	.word	0x08024904
 8008afc:	0802535c 	.word	0x0802535c
 8008b00:	08025370 	.word	0x08025370
 8008b04:	08025560 	.word	0x08025560
 8008b08:	0802557c 	.word	0x0802557c
 8008b0c:	08025384 	.word	0x08025384
 8008b10:	0802539c 	.word	0x0802539c
 8008b14:	080253b8 	.word	0x080253b8
 8008b18:	080253d8 	.word	0x080253d8
 8008b1c:	080253f0 	.word	0x080253f0
 8008b20:	0802540c 	.word	0x0802540c
 8008b24:	08025420 	.word	0x08025420
 8008b28:	0802543c 	.word	0x0802543c
 8008b2c:	08025458 	.word	0x08025458
 8008b30:	08025478 	.word	0x08025478
 8008b34:	0802549c 	.word	0x0802549c
 8008b38:	080254b8 	.word	0x080254b8
 8008b3c:	080254c8 	.word	0x080254c8
 8008b40:	080254e0 	.word	0x080254e0
 8008b44:	080254f8 	.word	0x080254f8
 8008b48:	08025524 	.word	0x08025524
 8008b4c:	08025540 	.word	0x08025540

08008b50 <AT_test_set_config>:
{
 8008b50:	b510      	push	{r4, lr}
 8008b52:	b0a6      	sub	sp, #152	; 0x98
 8008b54:	4604      	mov	r4, r0
  testParameter_t testParam = {0};
 8008b56:	2230      	movs	r2, #48	; 0x30
 8008b58:	2100      	movs	r1, #0
 8008b5a:	a81a      	add	r0, sp, #104	; 0x68
 8008b5c:	f01b f9dc 	bl	8023f18 <memset>
  if (13 == tiny_sscanf(param, "%d:%d:%d:%d:%d/%d:%d:%d:%d:%d:%d:%d:%d",
 8008b60:	ab0e      	add	r3, sp, #56	; 0x38
 8008b62:	930a      	str	r3, [sp, #40]	; 0x28
 8008b64:	ab0f      	add	r3, sp, #60	; 0x3c
 8008b66:	9309      	str	r3, [sp, #36]	; 0x24
 8008b68:	ab10      	add	r3, sp, #64	; 0x40
 8008b6a:	9308      	str	r3, [sp, #32]
 8008b6c:	ab11      	add	r3, sp, #68	; 0x44
 8008b6e:	9307      	str	r3, [sp, #28]
 8008b70:	ab12      	add	r3, sp, #72	; 0x48
 8008b72:	9306      	str	r3, [sp, #24]
 8008b74:	ab13      	add	r3, sp, #76	; 0x4c
 8008b76:	9305      	str	r3, [sp, #20]
 8008b78:	ab14      	add	r3, sp, #80	; 0x50
 8008b7a:	9304      	str	r3, [sp, #16]
 8008b7c:	ab15      	add	r3, sp, #84	; 0x54
 8008b7e:	9303      	str	r3, [sp, #12]
 8008b80:	ab0d      	add	r3, sp, #52	; 0x34
 8008b82:	9302      	str	r3, [sp, #8]
 8008b84:	ab16      	add	r3, sp, #88	; 0x58
 8008b86:	9301      	str	r3, [sp, #4]
 8008b88:	ab17      	add	r3, sp, #92	; 0x5c
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	ab18      	add	r3, sp, #96	; 0x60
 8008b8e:	aa19      	add	r2, sp, #100	; 0x64
 8008b90:	4956      	ldr	r1, [pc, #344]	; (8008cec <AT_test_set_config+0x19c>)
 8008b92:	4620      	mov	r0, r4
 8008b94:	f01a faae 	bl	80230f4 <tiny_sscanf>
 8008b98:	280d      	cmp	r0, #13
 8008b9a:	d002      	beq.n	8008ba2 <AT_test_set_config+0x52>
    return AT_PARAM_ERROR;
 8008b9c:	2002      	movs	r0, #2
}
 8008b9e:	b026      	add	sp, #152	; 0x98
 8008ba0:	bd10      	pop	{r4, pc}
  TST_get_config(&testParam);
 8008ba2:	a81a      	add	r0, sp, #104	; 0x68
 8008ba4:	f001 fd42 	bl	800a62c <TST_get_config>
  if (modulation == 0)
 8008ba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008baa:	b9cb      	cbnz	r3, 8008be0 <AT_test_set_config+0x90>
    testParam.modulation = TEST_FSK;
 8008bac:	931a      	str	r3, [sp, #104]	; 0x68
  if (freq < 1000)
 8008bae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bb4:	d21c      	bcs.n	8008bf0 <AT_test_set_config+0xa0>
    testParam.freq = freq * 1000000;
 8008bb6:	4a4e      	ldr	r2, [pc, #312]	; (8008cf0 <AT_test_set_config+0x1a0>)
 8008bb8:	fb02 f303 	mul.w	r3, r2, r3
 8008bbc:	931b      	str	r3, [sp, #108]	; 0x6c
  if ((power >= -9) && (power <= 22))
 8008bbe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008bc0:	f103 0209 	add.w	r2, r3, #9
 8008bc4:	2a1f      	cmp	r2, #31
 8008bc6:	d874      	bhi.n	8008cb2 <AT_test_set_config+0x162>
    testParam.power = power;
 8008bc8:	931c      	str	r3, [sp, #112]	; 0x70
  if ((testParam.modulation == TEST_FSK) && (bandwidth >= 4800) && (bandwidth <= 467000))
 8008bca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008bcc:	b993      	cbnz	r3, 8008bf4 <AT_test_set_config+0xa4>
 8008bce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008bd0:	f5b2 5f96 	cmp.w	r2, #4800	; 0x12c0
 8008bd4:	d30e      	bcc.n	8008bf4 <AT_test_set_config+0xa4>
 8008bd6:	4947      	ldr	r1, [pc, #284]	; (8008cf4 <AT_test_set_config+0x1a4>)
 8008bd8:	428a      	cmp	r2, r1
 8008bda:	d80b      	bhi.n	8008bf4 <AT_test_set_config+0xa4>
    testParam.bandwidth = bandwidth;
 8008bdc:	921d      	str	r2, [sp, #116]	; 0x74
 8008bde:	e00d      	b.n	8008bfc <AT_test_set_config+0xac>
  else if (modulation == 1)
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d003      	beq.n	8008bec <AT_test_set_config+0x9c>
  else if (modulation == 2)
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d162      	bne.n	8008cae <AT_test_set_config+0x15e>
    testParam.modulation = TEST_BPSK;
 8008be8:	931a      	str	r3, [sp, #104]	; 0x68
 8008bea:	e7e0      	b.n	8008bae <AT_test_set_config+0x5e>
    testParam.modulation = TEST_LORA;
 8008bec:	931a      	str	r3, [sp, #104]	; 0x68
 8008bee:	e7de      	b.n	8008bae <AT_test_set_config+0x5e>
    testParam.freq = freq;
 8008bf0:	931b      	str	r3, [sp, #108]	; 0x6c
 8008bf2:	e7e4      	b.n	8008bbe <AT_test_set_config+0x6e>
  else if ((testParam.modulation == TEST_LORA) && (bandwidth <= BW_500kHz))
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d00b      	beq.n	8008c10 <AT_test_set_config+0xc0>
  else if (testParam.modulation == TEST_BPSK)
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d15c      	bne.n	8008cb6 <AT_test_set_config+0x166>
  if ((testParam.modulation == TEST_FSK) && (loraSf_datarate >= 600) && (loraSf_datarate <= 300000))
 8008bfc:	b96b      	cbnz	r3, 8008c1a <AT_test_set_config+0xca>
 8008bfe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008c00:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 8008c04:	d309      	bcc.n	8008c1a <AT_test_set_config+0xca>
 8008c06:	493c      	ldr	r1, [pc, #240]	; (8008cf8 <AT_test_set_config+0x1a8>)
 8008c08:	428a      	cmp	r2, r1
 8008c0a:	d806      	bhi.n	8008c1a <AT_test_set_config+0xca>
    testParam.loraSf_datarate = loraSf_datarate;
 8008c0c:	921e      	str	r2, [sp, #120]	; 0x78
 8008c0e:	e00d      	b.n	8008c2c <AT_test_set_config+0xdc>
  else if ((testParam.modulation == TEST_LORA) && (bandwidth <= BW_500kHz))
 8008c10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c12:	2a06      	cmp	r2, #6
 8008c14:	d8f0      	bhi.n	8008bf8 <AT_test_set_config+0xa8>
    testParam.bandwidth = bandwidth;
 8008c16:	921d      	str	r2, [sp, #116]	; 0x74
 8008c18:	e7f0      	b.n	8008bfc <AT_test_set_config+0xac>
  else if ((testParam.modulation == TEST_LORA) && (loraSf_datarate >= 5) && (loraSf_datarate <= 12))
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d03e      	beq.n	8008c9c <AT_test_set_config+0x14c>
  else if ((testParam.modulation == TEST_BPSK) && (loraSf_datarate <= 1000))
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d14b      	bne.n	8008cba <AT_test_set_config+0x16a>
 8008c22:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008c24:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8008c28:	d849      	bhi.n	8008cbe <AT_test_set_config+0x16e>
    testParam.loraSf_datarate = loraSf_datarate;
 8008c2a:	921e      	str	r2, [sp, #120]	; 0x78
  if ((testParam.modulation == TEST_FSK) || (testParam.modulation == TEST_BPSK))
 8008c2c:	b14b      	cbz	r3, 8008c42 <AT_test_set_config+0xf2>
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d007      	beq.n	8008c42 <AT_test_set_config+0xf2>
  else if ((testParam.modulation == TEST_LORA) && ((codingRate >= 5) && (codingRate <= 8)))
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d145      	bne.n	8008cc2 <AT_test_set_config+0x172>
 8008c36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c38:	1f51      	subs	r1, r2, #5
 8008c3a:	2903      	cmp	r1, #3
 8008c3c:	d843      	bhi.n	8008cc6 <AT_test_set_config+0x176>
    testParam.codingRate = codingRate - 4;
 8008c3e:	3a04      	subs	r2, #4
 8008c40:	921f      	str	r2, [sp, #124]	; 0x7c
  if (lna <= 1)
 8008c42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c44:	2a01      	cmp	r2, #1
 8008c46:	d840      	bhi.n	8008cca <AT_test_set_config+0x17a>
    testParam.lna = lna;
 8008c48:	9220      	str	r2, [sp, #128]	; 0x80
  if (paBoost <= 1)
 8008c4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c4c:	2a01      	cmp	r2, #1
 8008c4e:	d92c      	bls.n	8008caa <AT_test_set_config+0x15a>
  if ((payloadLen != 0) && (payloadLen < 256))
 8008c50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c52:	1e51      	subs	r1, r2, #1
 8008c54:	29fe      	cmp	r1, #254	; 0xfe
 8008c56:	d83a      	bhi.n	8008cce <AT_test_set_config+0x17e>
    testParam.payloadLen = payloadLen;
 8008c58:	9222      	str	r2, [sp, #136]	; 0x88
  if ((testParam.modulation == TEST_LORA) || (testParam.modulation == TEST_BPSK))
 8008c5a:	1e5a      	subs	r2, r3, #1
 8008c5c:	2a01      	cmp	r2, #1
 8008c5e:	d908      	bls.n	8008c72 <AT_test_set_config+0x122>
  else if ((testParam.modulation == TEST_FSK) && ((fskDeviation >= 600) && (fskDeviation <= 200000)))
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d136      	bne.n	8008cd2 <AT_test_set_config+0x182>
 8008c64:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008c66:	f5a1 7416 	sub.w	r4, r1, #600	; 0x258
 8008c6a:	4824      	ldr	r0, [pc, #144]	; (8008cfc <AT_test_set_config+0x1ac>)
 8008c6c:	4284      	cmp	r4, r0
 8008c6e:	d832      	bhi.n	8008cd6 <AT_test_set_config+0x186>
    testParam.fskDev = fskDeviation;
 8008c70:	9123      	str	r1, [sp, #140]	; 0x8c
  if ((testParam.modulation == TEST_FSK) || (testParam.modulation == TEST_BPSK))
 8008c72:	b13b      	cbz	r3, 8008c84 <AT_test_set_config+0x134>
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d005      	beq.n	8008c84 <AT_test_set_config+0x134>
  else if ((testParam.modulation == TEST_LORA) && (lowDrOpt <= 2))
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d12e      	bne.n	8008cda <AT_test_set_config+0x18a>
 8008c7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c7e:	2902      	cmp	r1, #2
 8008c80:	d82d      	bhi.n	8008cde <AT_test_set_config+0x18e>
    testParam.lowDrOpt = lowDrOpt;
 8008c82:	9124      	str	r1, [sp, #144]	; 0x90
  if ((testParam.modulation == TEST_LORA) || (testParam.modulation == TEST_BPSK))
 8008c84:	2a01      	cmp	r2, #1
 8008c86:	d904      	bls.n	8008c92 <AT_test_set_config+0x142>
  else if ((testParam.modulation == TEST_FSK) && (BTproduct <= 4))
 8008c88:	bb5b      	cbnz	r3, 8008ce2 <AT_test_set_config+0x192>
 8008c8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d82a      	bhi.n	8008ce6 <AT_test_set_config+0x196>
    testParam.BTproduct = BTproduct;
 8008c90:	9325      	str	r3, [sp, #148]	; 0x94
  TST_set_config(&testParam);
 8008c92:	a81a      	add	r0, sp, #104	; 0x68
 8008c94:	f001 fcc0 	bl	800a618 <TST_set_config>
  return AT_OK;
 8008c98:	2000      	movs	r0, #0
 8008c9a:	e780      	b.n	8008b9e <AT_test_set_config+0x4e>
  else if ((testParam.modulation == TEST_LORA) && (loraSf_datarate >= 5) && (loraSf_datarate <= 12))
 8008c9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008c9e:	2a04      	cmp	r2, #4
 8008ca0:	d9bd      	bls.n	8008c1e <AT_test_set_config+0xce>
 8008ca2:	2a0c      	cmp	r2, #12
 8008ca4:	d8bb      	bhi.n	8008c1e <AT_test_set_config+0xce>
    testParam.loraSf_datarate = loraSf_datarate;
 8008ca6:	921e      	str	r2, [sp, #120]	; 0x78
 8008ca8:	e7c0      	b.n	8008c2c <AT_test_set_config+0xdc>
    testParam.paBoost = paBoost;
 8008caa:	9221      	str	r2, [sp, #132]	; 0x84
 8008cac:	e7d0      	b.n	8008c50 <AT_test_set_config+0x100>
    return AT_PARAM_ERROR;
 8008cae:	2002      	movs	r0, #2
 8008cb0:	e775      	b.n	8008b9e <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 8008cb2:	2002      	movs	r0, #2
 8008cb4:	e773      	b.n	8008b9e <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 8008cb6:	2002      	movs	r0, #2
 8008cb8:	e771      	b.n	8008b9e <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 8008cba:	2002      	movs	r0, #2
 8008cbc:	e76f      	b.n	8008b9e <AT_test_set_config+0x4e>
 8008cbe:	2002      	movs	r0, #2
 8008cc0:	e76d      	b.n	8008b9e <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 8008cc2:	2002      	movs	r0, #2
 8008cc4:	e76b      	b.n	8008b9e <AT_test_set_config+0x4e>
 8008cc6:	2002      	movs	r0, #2
 8008cc8:	e769      	b.n	8008b9e <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 8008cca:	2002      	movs	r0, #2
 8008ccc:	e767      	b.n	8008b9e <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 8008cce:	2002      	movs	r0, #2
 8008cd0:	e765      	b.n	8008b9e <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 8008cd2:	2002      	movs	r0, #2
 8008cd4:	e763      	b.n	8008b9e <AT_test_set_config+0x4e>
 8008cd6:	2002      	movs	r0, #2
 8008cd8:	e761      	b.n	8008b9e <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 8008cda:	2002      	movs	r0, #2
 8008cdc:	e75f      	b.n	8008b9e <AT_test_set_config+0x4e>
 8008cde:	2002      	movs	r0, #2
 8008ce0:	e75d      	b.n	8008b9e <AT_test_set_config+0x4e>
    return AT_PARAM_ERROR;
 8008ce2:	2002      	movs	r0, #2
 8008ce4:	e75b      	b.n	8008b9e <AT_test_set_config+0x4e>
 8008ce6:	2002      	movs	r0, #2
 8008ce8:	e759      	b.n	8008b9e <AT_test_set_config+0x4e>
 8008cea:	bf00      	nop
 8008cec:	080255cc 	.word	0x080255cc
 8008cf0:	000f4240 	.word	0x000f4240
 8008cf4:	00072038 	.word	0x00072038
 8008cf8:	000493e0 	.word	0x000493e0
 8008cfc:	00030ae8 	.word	0x00030ae8

08008d00 <AT_test_tx>:
{
 8008d00:	b510      	push	{r4, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	4604      	mov	r4, r0
  AT_PRINTF("\r\nTTxStart\r\n");
 8008d06:	4b12      	ldr	r3, [pc, #72]	; (8008d50 <AT_test_tx+0x50>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	f019 fa85 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  if (1 != tiny_sscanf(buf, "%u", &nb_packet))
 8008d12:	aa01      	add	r2, sp, #4
 8008d14:	490f      	ldr	r1, [pc, #60]	; (8008d54 <AT_test_tx+0x54>)
 8008d16:	4620      	mov	r0, r4
 8008d18:	f01a f9ec 	bl	80230f4 <tiny_sscanf>
 8008d1c:	2801      	cmp	r0, #1
 8008d1e:	d105      	bne.n	8008d2c <AT_test_tx+0x2c>
  if (0U == TST_TX_Start(nb_packet))
 8008d20:	9801      	ldr	r0, [sp, #4]
 8008d22:	f001 fc9b 	bl	800a65c <TST_TX_Start>
 8008d26:	b150      	cbz	r0, 8008d3e <AT_test_tx+0x3e>
    return AT_BUSY_ERROR;
 8008d28:	2003      	movs	r0, #3
 8008d2a:	e006      	b.n	8008d3a <AT_test_tx+0x3a>
    AT_PRINTF("AT+TTX: nb packets sent is missing\r\n");
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <AT_test_tx+0x58>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	4611      	mov	r1, r2
 8008d32:	4610      	mov	r0, r2
 8008d34:	f019 fa72 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8008d38:	2002      	movs	r0, #2
}
 8008d3a:	b002      	add	sp, #8
 8008d3c:	bd10      	pop	{r4, pc}
  	AT_PRINTF("\r\nTTxEnd\r\n");
 8008d3e:	4b07      	ldr	r3, [pc, #28]	; (8008d5c <AT_test_tx+0x5c>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	4611      	mov	r1, r2
 8008d44:	4610      	mov	r0, r2
 8008d46:	f019 fa69 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    return AT_OK;
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	e7f5      	b.n	8008d3a <AT_test_tx+0x3a>
 8008d4e:	bf00      	nop
 8008d50:	080255f4 	.word	0x080255f4
 8008d54:	0802500c 	.word	0x0802500c
 8008d58:	08025604 	.word	0x08025604
 8008d5c:	0802562c 	.word	0x0802562c

08008d60 <AT_test_rx>:
{
 8008d60:	b510      	push	{r4, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	4604      	mov	r4, r0
  AT_PRINTF("TRxStart\r\n");
 8008d66:	4b12      	ldr	r3, [pc, #72]	; (8008db0 <AT_test_rx+0x50>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	f019 fa55 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  if (1 != tiny_sscanf(buf, "%u", &nb_packet))
 8008d72:	aa01      	add	r2, sp, #4
 8008d74:	490f      	ldr	r1, [pc, #60]	; (8008db4 <AT_test_rx+0x54>)
 8008d76:	4620      	mov	r0, r4
 8008d78:	f01a f9bc 	bl	80230f4 <tiny_sscanf>
 8008d7c:	2801      	cmp	r0, #1
 8008d7e:	d105      	bne.n	8008d8c <AT_test_rx+0x2c>
  if (0U == TST_RX_Start(nb_packet))
 8008d80:	9801      	ldr	r0, [sp, #4]
 8008d82:	f001 fd7b 	bl	800a87c <TST_RX_Start>
 8008d86:	b150      	cbz	r0, 8008d9e <AT_test_rx+0x3e>
    return AT_BUSY_ERROR;
 8008d88:	2003      	movs	r0, #3
 8008d8a:	e006      	b.n	8008d9a <AT_test_rx+0x3a>
    AT_PRINTF("AT+TRX: nb expected packets is missing\r\n");
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <AT_test_rx+0x58>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	4611      	mov	r1, r2
 8008d92:	4610      	mov	r0, r2
 8008d94:	f019 fa42 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8008d98:	2002      	movs	r0, #2
}
 8008d9a:	b002      	add	sp, #8
 8008d9c:	bd10      	pop	{r4, pc}
    AT_PRINTF("TRxEnd\r\n");
 8008d9e:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <AT_test_rx+0x5c>)
 8008da0:	2200      	movs	r2, #0
 8008da2:	4611      	mov	r1, r2
 8008da4:	4610      	mov	r0, r2
 8008da6:	f019 fa39 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    return AT_OK;
 8008daa:	2000      	movs	r0, #0
 8008dac:	e7f5      	b.n	8008d9a <AT_test_rx+0x3a>
 8008dae:	bf00      	nop
 8008db0:	08025638 	.word	0x08025638
 8008db4:	0802500c 	.word	0x0802500c
 8008db8:	08025644 	.word	0x08025644
 8008dbc:	08025670 	.word	0x08025670

08008dc0 <AT_Certif>:
{
 8008dc0:	b530      	push	{r4, r5, lr}
 8008dc2:	b083      	sub	sp, #12
  switch (param[0])
 8008dc4:	7803      	ldrb	r3, [r0, #0]
 8008dc6:	2b30      	cmp	r3, #48	; 0x30
 8008dc8:	d003      	beq.n	8008dd2 <AT_Certif+0x12>
 8008dca:	2b31      	cmp	r3, #49	; 0x31
 8008dcc:	d00a      	beq.n	8008de4 <AT_Certif+0x24>
 8008dce:	2002      	movs	r0, #2
 8008dd0:	e029      	b.n	8008e26 <AT_Certif+0x66>
		AT_PRINTF("ABP mode\r\n");
 8008dd2:	4b16      	ldr	r3, [pc, #88]	; (8008e2c <AT_Certif+0x6c>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4610      	mov	r0, r2
 8008dda:	f019 fa1f 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      LmHandlerJoin(ACTIVATION_TYPE_ABP);
 8008dde:	2001      	movs	r0, #1
 8008de0:	f00a f9fc 	bl	80131dc <LmHandlerJoin>
		AT_PRINTF("OTAA mode\r\n");
 8008de4:	4b12      	ldr	r3, [pc, #72]	; (8008e30 <AT_Certif+0x70>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	4611      	mov	r1, r2
 8008dea:	4610      	mov	r0, r2
 8008dec:	f019 fa16 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      LmHandlerJoin(ACTIVATION_TYPE_OTAA);
 8008df0:	2002      	movs	r0, #2
 8008df2:	f00a f9f3 	bl	80131dc <LmHandlerJoin>
  UTIL_TIMER_Create(&TxCertifTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnCertifTimer, NULL);  /* 8s */
 8008df6:	4d0f      	ldr	r5, [pc, #60]	; (8008e34 <AT_Certif+0x74>)
 8008df8:	2400      	movs	r4, #0
 8008dfa:	9400      	str	r4, [sp, #0]
 8008dfc:	4b0e      	ldr	r3, [pc, #56]	; (8008e38 <AT_Certif+0x78>)
 8008dfe:	4622      	mov	r2, r4
 8008e00:	f04f 31ff 	mov.w	r1, #4294967295
 8008e04:	4628      	mov	r0, r5
 8008e06:	f019 fe17 	bl	8022a38 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxCertifTimer,  8000);  /* 8s */
 8008e0a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f019 ff18 	bl	8022c44 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxCertifTimer);
 8008e14:	4628      	mov	r0, r5
 8008e16:	f019 fecf 	bl	8022bb8 <UTIL_TIMER_Start>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaCertifTx), UTIL_SEQ_RFU, CertifSend);
 8008e1a:	4a08      	ldr	r2, [pc, #32]	; (8008e3c <AT_Certif+0x7c>)
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	2004      	movs	r0, #4
 8008e20:	f019 fc26 	bl	8022670 <UTIL_SEQ_RegTask>
  return AT_OK;
 8008e24:	4620      	mov	r0, r4
}
 8008e26:	b003      	add	sp, #12
 8008e28:	bd30      	pop	{r4, r5, pc}
 8008e2a:	bf00      	nop
 8008e2c:	080251d4 	.word	0x080251d4
 8008e30:	080251e0 	.word	0x080251e0
 8008e34:	200007ec 	.word	0x200007ec
 8008e38:	08007bad 	.word	0x08007bad
 8008e3c:	08007b75 	.word	0x08007b75

08008e40 <AT_test_tx_hopping>:
{
 8008e40:	b530      	push	{r4, r5, lr}
 8008e42:	b095      	sub	sp, #84	; 0x54
  if (4 != tiny_sscanf(buf, "%u:%u:%u:%u", &freq_start, &freq_stop, &delta_f, &nb_tx))
 8008e44:	ab10      	add	r3, sp, #64	; 0x40
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	ab11      	add	r3, sp, #68	; 0x44
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	ab12      	add	r3, sp, #72	; 0x48
 8008e4e:	aa13      	add	r2, sp, #76	; 0x4c
 8008e50:	491e      	ldr	r1, [pc, #120]	; (8008ecc <AT_test_tx_hopping+0x8c>)
 8008e52:	f01a f94f 	bl	80230f4 <tiny_sscanf>
 8008e56:	2804      	cmp	r0, #4
 8008e58:	d133      	bne.n	8008ec2 <AT_test_tx_hopping+0x82>
  if (freq_start < 1000)
 8008e5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e60:	d203      	bcs.n	8008e6a <AT_test_tx_hopping+0x2a>
    freq_start *= 1000000;
 8008e62:	4a1b      	ldr	r2, [pc, #108]	; (8008ed0 <AT_test_tx_hopping+0x90>)
 8008e64:	fb02 f303 	mul.w	r3, r2, r3
 8008e68:	9313      	str	r3, [sp, #76]	; 0x4c
  if (freq_stop < 1000)
 8008e6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e70:	d203      	bcs.n	8008e7a <AT_test_tx_hopping+0x3a>
    freq_stop *= 1000000;
 8008e72:	4a17      	ldr	r2, [pc, #92]	; (8008ed0 <AT_test_tx_hopping+0x90>)
 8008e74:	fb02 f303 	mul.w	r3, r2, r3
 8008e78:	9312      	str	r3, [sp, #72]	; 0x48
  hop_freq = freq_start;
 8008e7a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  for (int i = 0; i < nb_tx; i++)
 8008e7c:	2500      	movs	r5, #0
 8008e7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e80:	429d      	cmp	r5, r3
 8008e82:	d21c      	bcs.n	8008ebe <AT_test_tx_hopping+0x7e>
    TST_get_config(&test_param);
 8008e84:	a804      	add	r0, sp, #16
 8008e86:	f001 fbd1 	bl	800a62c <TST_get_config>
    test_param.freq = hop_freq;
 8008e8a:	9405      	str	r4, [sp, #20]
    TST_set_config(&test_param);
 8008e8c:	a804      	add	r0, sp, #16
 8008e8e:	f001 fbc3 	bl	800a618 <TST_set_config>
    APP_TPRINTF("Tx Hop at %dHz. %d of %d\r\n", hop_freq, i+1, nb_tx);
 8008e92:	3501      	adds	r5, #1
 8008e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e96:	9302      	str	r3, [sp, #8]
 8008e98:	9501      	str	r5, [sp, #4]
 8008e9a:	9400      	str	r4, [sp, #0]
 8008e9c:	4b0d      	ldr	r3, [pc, #52]	; (8008ed4 <AT_test_tx_hopping+0x94>)
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	4608      	mov	r0, r1
 8008ea4:	f019 f9ba 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    if (0U != TST_TX_Start(1))
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	f001 fbd7 	bl	800a65c <TST_TX_Start>
 8008eae:	b958      	cbnz	r0, 8008ec8 <AT_test_tx_hopping+0x88>
    hop_freq += delta_f;
 8008eb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008eb2:	441c      	add	r4, r3
    if (hop_freq > freq_stop)
 8008eb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eb6:	42a3      	cmp	r3, r4
 8008eb8:	d2e1      	bcs.n	8008e7e <AT_test_tx_hopping+0x3e>
      hop_freq = freq_start;
 8008eba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008ebc:	e7df      	b.n	8008e7e <AT_test_tx_hopping+0x3e>
  return AT_OK;
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	e000      	b.n	8008ec4 <AT_test_tx_hopping+0x84>
    return AT_PARAM_ERROR;
 8008ec2:	2002      	movs	r0, #2
}
 8008ec4:	b015      	add	sp, #84	; 0x54
 8008ec6:	bd30      	pop	{r4, r5, pc}
      return AT_BUSY_ERROR;
 8008ec8:	2003      	movs	r0, #3
 8008eca:	e7fb      	b.n	8008ec4 <AT_test_tx_hopping+0x84>
 8008ecc:	0802567c 	.word	0x0802567c
 8008ed0:	000f4240 	.word	0x000f4240
 8008ed4:	08025688 	.word	0x08025688

08008ed8 <AT_test_stop>:
{
 8008ed8:	b508      	push	{r3, lr}
  TST_stop();
 8008eda:	f001 fbb1 	bl	800a640 <TST_stop>
  AT_PRINTF("Test Stop\r\n");
 8008ede:	4b04      	ldr	r3, [pc, #16]	; (8008ef0 <AT_test_stop+0x18>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	f019 f999 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8008eea:	2000      	movs	r0, #0
 8008eec:	bd08      	pop	{r3, pc}
 8008eee:	bf00      	nop
 8008ef0:	080256a4 	.word	0x080256a4

08008ef4 <AT_test_Modulation_Tx>:
{
 8008ef4:	b508      	push	{r3, lr}
  AT_PRINTF("\r\nTx Modulation TEST START\r\n");
 8008ef6:	4b06      	ldr	r3, [pc, #24]	; (8008f10 <AT_test_Modulation_Tx+0x1c>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	4611      	mov	r1, r2
 8008efc:	4610      	mov	r0, r2
 8008efe:	f019 f98d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  if (0U == TST_Modu_TX_Start())
 8008f02:	f001 fe19 	bl	800ab38 <TST_Modu_TX_Start>
 8008f06:	b900      	cbnz	r0, 8008f0a <AT_test_Modulation_Tx+0x16>
}
 8008f08:	bd08      	pop	{r3, pc}
    return AT_BUSY_ERROR;
 8008f0a:	2003      	movs	r0, #3
 8008f0c:	e7fc      	b.n	8008f08 <AT_test_Modulation_Tx+0x14>
 8008f0e:	bf00      	nop
 8008f10:	080256b0 	.word	0x080256b0

08008f14 <AT_test_Modulation_Rx>:
{
 8008f14:	b508      	push	{r3, lr}
  AT_PRINTF("\r\nRx Modulation TEST START\r\n");
 8008f16:	4b09      	ldr	r3, [pc, #36]	; (8008f3c <AT_test_Modulation_Rx+0x28>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	4611      	mov	r1, r2
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	f019 f97d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  if (0U == TST_Modu_RX_Start())
 8008f22:	f001 feb7 	bl	800ac94 <TST_Modu_RX_Start>
 8008f26:	b108      	cbz	r0, 8008f2c <AT_test_Modulation_Rx+0x18>
    return AT_BUSY_ERROR;
 8008f28:	2003      	movs	r0, #3
}
 8008f2a:	bd08      	pop	{r3, pc}
  	AT_PRINTF("\r\nRx Modulation TEST STOP\r\n");
 8008f2c:	4b04      	ldr	r3, [pc, #16]	; (8008f40 <AT_test_Modulation_Rx+0x2c>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	4611      	mov	r1, r2
 8008f32:	4610      	mov	r0, r2
 8008f34:	f019 f972 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    return AT_OK;
 8008f38:	2000      	movs	r0, #0
 8008f3a:	e7f6      	b.n	8008f2a <AT_test_Modulation_Rx+0x16>
 8008f3c:	080256d0 	.word	0x080256d0
 8008f40:	080256f0 	.word	0x080256f0

08008f44 <AT_P2P_get_config>:
{
 8008f44:	b530      	push	{r4, r5, lr}
 8008f46:	b0a1      	sub	sp, #132	; 0x84
  uint32_t loraBW[7] = {7812, 15625, 31250, 62500, 125000, 250000, 500000};
 8008f48:	ac0d      	add	r4, sp, #52	; 0x34
 8008f4a:	4d73      	ldr	r5, [pc, #460]	; (8009118 <AT_P2P_get_config+0x1d4>)
 8008f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008f54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  P2P_get_config(&P2PParam);
 8008f58:	a814      	add	r0, sp, #80	; 0x50
 8008f5a:	f001 ffd5 	bl	800af08 <P2P_get_config>
  AT_PRINTF("1: Freq= %d Hz\r\n", P2PParam.freq);
 8008f5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	4b6e      	ldr	r3, [pc, #440]	; (800911c <AT_P2P_get_config+0x1d8>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	4611      	mov	r1, r2
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f019 f957 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("2: Power= %d dBm\r\n", P2PParam.power);
 8008f6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	4b6b      	ldr	r3, [pc, #428]	; (8009120 <AT_P2P_get_config+0x1dc>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	4611      	mov	r1, r2
 8008f78:	4610      	mov	r0, r2
 8008f7a:	f019 f94f 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  if (P2PParam.modulation == TEST_FSK)
 8008f7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d02b      	beq.n	8008fdc <AT_P2P_get_config+0x98>
  else if (P2PParam.modulation == TEST_LORA)
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d074      	beq.n	8009072 <AT_P2P_get_config+0x12e>
    AT_PRINTF("4: BPSK datarate= %d bps\r\n", P2PParam.loraSf_datarate);
 8008f88:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	4b65      	ldr	r3, [pc, #404]	; (8009124 <AT_P2P_get_config+0x1e0>)
 8008f8e:	2200      	movs	r2, #0
 8008f90:	4611      	mov	r1, r2
 8008f92:	4610      	mov	r0, r2
 8008f94:	f019 f942 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("can be copy/paste in set cmd: AT+TCONF=%d:%d:%d:%d:4/%d:%d:%d:%d:%d:%d:%d:%d\r\n", P2PParam.freq,
 8008f98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008f9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008fa0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fa4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008fa6:	9308      	str	r3, [sp, #32]
 8008fa8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008faa:	9307      	str	r3, [sp, #28]
 8008fac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fae:	9306      	str	r3, [sp, #24]
 8008fb0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008fb2:	9305      	str	r3, [sp, #20]
 8008fb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	9304      	str	r3, [sp, #16]
 8008fba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008fbc:	9303      	str	r3, [sp, #12]
 8008fbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fc0:	9302      	str	r3, [sp, #8]
 8008fc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008fc4:	9301      	str	r3, [sp, #4]
 8008fc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	4b57      	ldr	r3, [pc, #348]	; (8009128 <AT_P2P_get_config+0x1e4>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	4611      	mov	r1, r2
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f019 f923 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	b021      	add	sp, #132	; 0x84
 8008fda:	bd30      	pop	{r4, r5, pc}
    AT_PRINTF("3: Bandwidth= %d Hz\r\n", P2PParam.bandwidth);
 8008fdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	4b52      	ldr	r3, [pc, #328]	; (800912c <AT_P2P_get_config+0x1e8>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	4610      	mov	r0, r2
 8008fe8:	f019 f918 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("4: FSK datarate= %d bps\r\n", P2PParam.loraSf_datarate);
 8008fec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	4b4f      	ldr	r3, [pc, #316]	; (8009130 <AT_P2P_get_config+0x1ec>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	f019 f910 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("5: Coding Rate not applicable\r\n");
 8008ffc:	4b4d      	ldr	r3, [pc, #308]	; (8009134 <AT_P2P_get_config+0x1f0>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	4611      	mov	r1, r2
 8009002:	4610      	mov	r0, r2
 8009004:	f019 f90a 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("6: LNA State= %d  \r\n", P2PParam.lna);
 8009008:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	4b4a      	ldr	r3, [pc, #296]	; (8009138 <AT_P2P_get_config+0x1f4>)
 800900e:	2200      	movs	r2, #0
 8009010:	4611      	mov	r1, r2
 8009012:	4610      	mov	r0, r2
 8009014:	f019 f902 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("7: PA Boost State= %d  \r\n", P2PParam.paBoost);
 8009018:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	4b47      	ldr	r3, [pc, #284]	; (800913c <AT_P2P_get_config+0x1f8>)
 800901e:	2200      	movs	r2, #0
 8009020:	4611      	mov	r1, r2
 8009022:	4610      	mov	r0, r2
 8009024:	f019 f8fa 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("8: modulation FSK\r\n");
 8009028:	4b45      	ldr	r3, [pc, #276]	; (8009140 <AT_P2P_get_config+0x1fc>)
 800902a:	2200      	movs	r2, #0
 800902c:	4611      	mov	r1, r2
 800902e:	4610      	mov	r0, r2
 8009030:	f019 f8f4 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("9: Payload len= %d Bytes\r\n", P2PParam.payloadLen);
 8009034:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	4b42      	ldr	r3, [pc, #264]	; (8009144 <AT_P2P_get_config+0x200>)
 800903a:	2200      	movs	r2, #0
 800903c:	4611      	mov	r1, r2
 800903e:	4610      	mov	r0, r2
 8009040:	f019 f8ec 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("10: FSK deviation= %d Hz\r\n", P2PParam.fskDev);
 8009044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	4b3f      	ldr	r3, [pc, #252]	; (8009148 <AT_P2P_get_config+0x204>)
 800904a:	2200      	movs	r2, #0
 800904c:	4611      	mov	r1, r2
 800904e:	4610      	mov	r0, r2
 8009050:	f019 f8e4 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("11: LowDRopt not applicable\r\n");
 8009054:	4b3d      	ldr	r3, [pc, #244]	; (800914c <AT_P2P_get_config+0x208>)
 8009056:	2200      	movs	r2, #0
 8009058:	4611      	mov	r1, r2
 800905a:	4610      	mov	r0, r2
 800905c:	f019 f8de 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("12: FSK gaussian BT product= %d \r\n", P2PParam.BTproduct);
 8009060:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	4b3a      	ldr	r3, [pc, #232]	; (8009150 <AT_P2P_get_config+0x20c>)
 8009066:	2200      	movs	r2, #0
 8009068:	4611      	mov	r1, r2
 800906a:	4610      	mov	r0, r2
 800906c:	f019 f8d6 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8009070:	e792      	b.n	8008f98 <AT_P2P_get_config+0x54>
    AT_PRINTF("3: Bandwidth= %d (=%d Hz)\r\n", P2PParam.bandwidth, loraBW[P2PParam.bandwidth]);
 8009072:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009074:	aa20      	add	r2, sp, #128	; 0x80
 8009076:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800907a:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800907e:	9201      	str	r2, [sp, #4]
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	4b34      	ldr	r3, [pc, #208]	; (8009154 <AT_P2P_get_config+0x210>)
 8009084:	2200      	movs	r2, #0
 8009086:	4611      	mov	r1, r2
 8009088:	4610      	mov	r0, r2
 800908a:	f019 f8c7 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("4: SF= %d \r\n", P2PParam.loraSf_datarate);
 800908e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	4b31      	ldr	r3, [pc, #196]	; (8009158 <AT_P2P_get_config+0x214>)
 8009094:	2200      	movs	r2, #0
 8009096:	4611      	mov	r1, r2
 8009098:	4610      	mov	r0, r2
 800909a:	f019 f8bf 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("5: CR= %d (=4/%d) \r\n", P2PParam.codingRate, P2PParam.codingRate + 4);
 800909e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090a0:	1d1a      	adds	r2, r3, #4
 80090a2:	9201      	str	r2, [sp, #4]
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	4b2d      	ldr	r3, [pc, #180]	; (800915c <AT_P2P_get_config+0x218>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	4611      	mov	r1, r2
 80090ac:	4610      	mov	r0, r2
 80090ae:	f019 f8b5 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("6: LNA State= %d  \r\n", P2PParam.lna);
 80090b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	4b20      	ldr	r3, [pc, #128]	; (8009138 <AT_P2P_get_config+0x1f4>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	4611      	mov	r1, r2
 80090bc:	4610      	mov	r0, r2
 80090be:	f019 f8ad 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("7: PA Boost State= %d  \r\n", P2PParam.paBoost);
 80090c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	4b1d      	ldr	r3, [pc, #116]	; (800913c <AT_P2P_get_config+0x1f8>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	4611      	mov	r1, r2
 80090cc:	4610      	mov	r0, r2
 80090ce:	f019 f8a5 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("8: modulation LORA\r\n");
 80090d2:	4b23      	ldr	r3, [pc, #140]	; (8009160 <AT_P2P_get_config+0x21c>)
 80090d4:	2200      	movs	r2, #0
 80090d6:	4611      	mov	r1, r2
 80090d8:	4610      	mov	r0, r2
 80090da:	f019 f89f 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("9: Payload len= %d Bytes\r\n", P2PParam.payloadLen);
 80090de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80090e0:	9300      	str	r3, [sp, #0]
 80090e2:	4b18      	ldr	r3, [pc, #96]	; (8009144 <AT_P2P_get_config+0x200>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	4611      	mov	r1, r2
 80090e8:	4610      	mov	r0, r2
 80090ea:	f019 f897 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("10: Frequency deviation not applicable\r\n");
 80090ee:	4b1d      	ldr	r3, [pc, #116]	; (8009164 <AT_P2P_get_config+0x220>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	4611      	mov	r1, r2
 80090f4:	4610      	mov	r0, r2
 80090f6:	f019 f891 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("11: LowDRopt[0 to 2]= %d \r\n", P2PParam.lowDrOpt);
 80090fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	4b1a      	ldr	r3, [pc, #104]	; (8009168 <AT_P2P_get_config+0x224>)
 8009100:	2200      	movs	r2, #0
 8009102:	4611      	mov	r1, r2
 8009104:	4610      	mov	r0, r2
 8009106:	f019 f889 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("12 BT product not applicable\r\n");
 800910a:	4b18      	ldr	r3, [pc, #96]	; (800916c <AT_P2P_get_config+0x228>)
 800910c:	2200      	movs	r2, #0
 800910e:	4611      	mov	r1, r2
 8009110:	4610      	mov	r0, r2
 8009112:	f019 f883 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8009116:	e73f      	b.n	8008f98 <AT_P2P_get_config+0x54>
 8009118:	08024904 	.word	0x08024904
 800911c:	0802535c 	.word	0x0802535c
 8009120:	08025370 	.word	0x08025370
 8009124:	08025560 	.word	0x08025560
 8009128:	0802557c 	.word	0x0802557c
 800912c:	08025384 	.word	0x08025384
 8009130:	0802539c 	.word	0x0802539c
 8009134:	080253b8 	.word	0x080253b8
 8009138:	080253d8 	.word	0x080253d8
 800913c:	080253f0 	.word	0x080253f0
 8009140:	0802540c 	.word	0x0802540c
 8009144:	08025420 	.word	0x08025420
 8009148:	0802543c 	.word	0x0802543c
 800914c:	08025458 	.word	0x08025458
 8009150:	08025478 	.word	0x08025478
 8009154:	0802549c 	.word	0x0802549c
 8009158:	080254b8 	.word	0x080254b8
 800915c:	080254c8 	.word	0x080254c8
 8009160:	080254e0 	.word	0x080254e0
 8009164:	080254f8 	.word	0x080254f8
 8009168:	08025524 	.word	0x08025524
 800916c:	08025540 	.word	0x08025540

08009170 <AT_P2P_set_config>:
{
 8009170:	b510      	push	{r4, lr}
 8009172:	b0a6      	sub	sp, #152	; 0x98
 8009174:	4604      	mov	r4, r0
  P2PParameter_t P2PParam = {0};
 8009176:	2230      	movs	r2, #48	; 0x30
 8009178:	2100      	movs	r1, #0
 800917a:	a81a      	add	r0, sp, #104	; 0x68
 800917c:	f01a fecc 	bl	8023f18 <memset>
  if (13 == tiny_sscanf(param, "%d:%d:%d:%d:%d/%d:%d:%d:%d:%d:%d:%d:%d",
 8009180:	ab0e      	add	r3, sp, #56	; 0x38
 8009182:	930a      	str	r3, [sp, #40]	; 0x28
 8009184:	ab0f      	add	r3, sp, #60	; 0x3c
 8009186:	9309      	str	r3, [sp, #36]	; 0x24
 8009188:	ab10      	add	r3, sp, #64	; 0x40
 800918a:	9308      	str	r3, [sp, #32]
 800918c:	ab11      	add	r3, sp, #68	; 0x44
 800918e:	9307      	str	r3, [sp, #28]
 8009190:	ab12      	add	r3, sp, #72	; 0x48
 8009192:	9306      	str	r3, [sp, #24]
 8009194:	ab13      	add	r3, sp, #76	; 0x4c
 8009196:	9305      	str	r3, [sp, #20]
 8009198:	ab14      	add	r3, sp, #80	; 0x50
 800919a:	9304      	str	r3, [sp, #16]
 800919c:	ab15      	add	r3, sp, #84	; 0x54
 800919e:	9303      	str	r3, [sp, #12]
 80091a0:	ab0d      	add	r3, sp, #52	; 0x34
 80091a2:	9302      	str	r3, [sp, #8]
 80091a4:	ab16      	add	r3, sp, #88	; 0x58
 80091a6:	9301      	str	r3, [sp, #4]
 80091a8:	ab17      	add	r3, sp, #92	; 0x5c
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	ab18      	add	r3, sp, #96	; 0x60
 80091ae:	aa19      	add	r2, sp, #100	; 0x64
 80091b0:	4956      	ldr	r1, [pc, #344]	; (800930c <AT_P2P_set_config+0x19c>)
 80091b2:	4620      	mov	r0, r4
 80091b4:	f019 ff9e 	bl	80230f4 <tiny_sscanf>
 80091b8:	280d      	cmp	r0, #13
 80091ba:	d002      	beq.n	80091c2 <AT_P2P_set_config+0x52>
    return AT_PARAM_ERROR;
 80091bc:	2002      	movs	r0, #2
}
 80091be:	b026      	add	sp, #152	; 0x98
 80091c0:	bd10      	pop	{r4, pc}
  P2P_get_config(&P2PParam);
 80091c2:	a81a      	add	r0, sp, #104	; 0x68
 80091c4:	f001 fea0 	bl	800af08 <P2P_get_config>
  if (modulation == TEST_FSK)
 80091c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091ca:	b9cb      	cbnz	r3, 8009200 <AT_P2P_set_config+0x90>
    P2PParam.modulation = TEST_FSK;
 80091cc:	931a      	str	r3, [sp, #104]	; 0x68
  if (freq < 1000)
 80091ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091d4:	d21c      	bcs.n	8009210 <AT_P2P_set_config+0xa0>
    P2PParam.freq = freq * 1000000;
 80091d6:	4a4e      	ldr	r2, [pc, #312]	; (8009310 <AT_P2P_set_config+0x1a0>)
 80091d8:	fb02 f303 	mul.w	r3, r2, r3
 80091dc:	931b      	str	r3, [sp, #108]	; 0x6c
  if ((power >= -9) && (power <= 22))
 80091de:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80091e0:	f103 0209 	add.w	r2, r3, #9
 80091e4:	2a1f      	cmp	r2, #31
 80091e6:	d874      	bhi.n	80092d2 <AT_P2P_set_config+0x162>
    P2PParam.power = power;
 80091e8:	931c      	str	r3, [sp, #112]	; 0x70
  if ((P2PParam.modulation == TEST_FSK) && (bandwidth >= 4800) && (bandwidth <= 467000))
 80091ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80091ec:	b993      	cbnz	r3, 8009214 <AT_P2P_set_config+0xa4>
 80091ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80091f0:	f5b2 5f96 	cmp.w	r2, #4800	; 0x12c0
 80091f4:	d30e      	bcc.n	8009214 <AT_P2P_set_config+0xa4>
 80091f6:	4947      	ldr	r1, [pc, #284]	; (8009314 <AT_P2P_set_config+0x1a4>)
 80091f8:	428a      	cmp	r2, r1
 80091fa:	d80b      	bhi.n	8009214 <AT_P2P_set_config+0xa4>
    P2PParam.bandwidth = bandwidth;
 80091fc:	921d      	str	r2, [sp, #116]	; 0x74
 80091fe:	e00d      	b.n	800921c <AT_P2P_set_config+0xac>
  else if (modulation == TEST_LORA)
 8009200:	2b01      	cmp	r3, #1
 8009202:	d003      	beq.n	800920c <AT_P2P_set_config+0x9c>
  else if (modulation == TEST_BPSK)
 8009204:	2b02      	cmp	r3, #2
 8009206:	d162      	bne.n	80092ce <AT_P2P_set_config+0x15e>
    P2PParam.modulation = TEST_BPSK;
 8009208:	931a      	str	r3, [sp, #104]	; 0x68
 800920a:	e7e0      	b.n	80091ce <AT_P2P_set_config+0x5e>
    P2PParam.modulation = TEST_LORA;
 800920c:	931a      	str	r3, [sp, #104]	; 0x68
 800920e:	e7de      	b.n	80091ce <AT_P2P_set_config+0x5e>
    P2PParam.freq = freq;
 8009210:	931b      	str	r3, [sp, #108]	; 0x6c
 8009212:	e7e4      	b.n	80091de <AT_P2P_set_config+0x6e>
  else if ((P2PParam.modulation == TEST_LORA) && (bandwidth <= BW_500kHz))
 8009214:	2b01      	cmp	r3, #1
 8009216:	d00b      	beq.n	8009230 <AT_P2P_set_config+0xc0>
  else if (P2PParam.modulation == TEST_BPSK)
 8009218:	2b02      	cmp	r3, #2
 800921a:	d15c      	bne.n	80092d6 <AT_P2P_set_config+0x166>
  if ((P2PParam.modulation == TEST_FSK) && (loraSf_datarate >= 600) && (loraSf_datarate <= 300000))
 800921c:	b96b      	cbnz	r3, 800923a <AT_P2P_set_config+0xca>
 800921e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009220:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 8009224:	d309      	bcc.n	800923a <AT_P2P_set_config+0xca>
 8009226:	493c      	ldr	r1, [pc, #240]	; (8009318 <AT_P2P_set_config+0x1a8>)
 8009228:	428a      	cmp	r2, r1
 800922a:	d806      	bhi.n	800923a <AT_P2P_set_config+0xca>
    P2PParam.loraSf_datarate = loraSf_datarate;
 800922c:	921e      	str	r2, [sp, #120]	; 0x78
 800922e:	e00d      	b.n	800924c <AT_P2P_set_config+0xdc>
  else if ((P2PParam.modulation == TEST_LORA) && (bandwidth <= BW_500kHz))
 8009230:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009232:	2a06      	cmp	r2, #6
 8009234:	d8f0      	bhi.n	8009218 <AT_P2P_set_config+0xa8>
    P2PParam.bandwidth = bandwidth;
 8009236:	921d      	str	r2, [sp, #116]	; 0x74
 8009238:	e7f0      	b.n	800921c <AT_P2P_set_config+0xac>
  else if ((P2PParam.modulation == TEST_LORA) && (loraSf_datarate >= 5) && (loraSf_datarate <= 12))
 800923a:	2b01      	cmp	r3, #1
 800923c:	d03e      	beq.n	80092bc <AT_P2P_set_config+0x14c>
  else if ((P2PParam.modulation == TEST_BPSK) && (loraSf_datarate <= 1000))
 800923e:	2b02      	cmp	r3, #2
 8009240:	d14b      	bne.n	80092da <AT_P2P_set_config+0x16a>
 8009242:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009244:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8009248:	d849      	bhi.n	80092de <AT_P2P_set_config+0x16e>
    P2PParam.loraSf_datarate = loraSf_datarate;
 800924a:	921e      	str	r2, [sp, #120]	; 0x78
  if ((P2PParam.modulation == TEST_FSK) || (P2PParam.modulation == TEST_BPSK))
 800924c:	b14b      	cbz	r3, 8009262 <AT_P2P_set_config+0xf2>
 800924e:	2b02      	cmp	r3, #2
 8009250:	d007      	beq.n	8009262 <AT_P2P_set_config+0xf2>
  else if ((P2PParam.modulation == TEST_LORA) && ((codingRate >= 5) && (codingRate <= 8)))
 8009252:	2b01      	cmp	r3, #1
 8009254:	d145      	bne.n	80092e2 <AT_P2P_set_config+0x172>
 8009256:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009258:	1f51      	subs	r1, r2, #5
 800925a:	2903      	cmp	r1, #3
 800925c:	d843      	bhi.n	80092e6 <AT_P2P_set_config+0x176>
    P2PParam.codingRate = codingRate - 4;
 800925e:	3a04      	subs	r2, #4
 8009260:	921f      	str	r2, [sp, #124]	; 0x7c
  if (lna <= 1)
 8009262:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009264:	2a01      	cmp	r2, #1
 8009266:	d840      	bhi.n	80092ea <AT_P2P_set_config+0x17a>
    P2PParam.lna = lna;
 8009268:	9220      	str	r2, [sp, #128]	; 0x80
  if (paBoost <= 1)
 800926a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800926c:	2a01      	cmp	r2, #1
 800926e:	d92c      	bls.n	80092ca <AT_P2P_set_config+0x15a>
  if ((payloadLen != 0) && (payloadLen < 256))
 8009270:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009272:	1e51      	subs	r1, r2, #1
 8009274:	29fe      	cmp	r1, #254	; 0xfe
 8009276:	d83a      	bhi.n	80092ee <AT_P2P_set_config+0x17e>
    P2PParam.payloadLen = payloadLen;
 8009278:	9222      	str	r2, [sp, #136]	; 0x88
  if ((P2PParam.modulation == TEST_LORA) || (P2PParam.modulation == TEST_BPSK))
 800927a:	1e5a      	subs	r2, r3, #1
 800927c:	2a01      	cmp	r2, #1
 800927e:	d908      	bls.n	8009292 <AT_P2P_set_config+0x122>
  else if ((P2PParam.modulation == TEST_FSK) && ((fskDeviation >= 600) && (fskDeviation <= 200000)))
 8009280:	2b00      	cmp	r3, #0
 8009282:	d136      	bne.n	80092f2 <AT_P2P_set_config+0x182>
 8009284:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009286:	f5a1 7416 	sub.w	r4, r1, #600	; 0x258
 800928a:	4824      	ldr	r0, [pc, #144]	; (800931c <AT_P2P_set_config+0x1ac>)
 800928c:	4284      	cmp	r4, r0
 800928e:	d832      	bhi.n	80092f6 <AT_P2P_set_config+0x186>
    P2PParam.fskDev = fskDeviation;
 8009290:	9123      	str	r1, [sp, #140]	; 0x8c
  if ((P2PParam.modulation == TEST_FSK) || (P2PParam.modulation == TEST_BPSK))
 8009292:	b13b      	cbz	r3, 80092a4 <AT_P2P_set_config+0x134>
 8009294:	2b02      	cmp	r3, #2
 8009296:	d005      	beq.n	80092a4 <AT_P2P_set_config+0x134>
  else if ((P2PParam.modulation == TEST_LORA) && (lowDrOpt <= 2))
 8009298:	2b01      	cmp	r3, #1
 800929a:	d12e      	bne.n	80092fa <AT_P2P_set_config+0x18a>
 800929c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800929e:	2902      	cmp	r1, #2
 80092a0:	d82d      	bhi.n	80092fe <AT_P2P_set_config+0x18e>
    P2PParam.lowDrOpt = lowDrOpt;
 80092a2:	9124      	str	r1, [sp, #144]	; 0x90
  if ((P2PParam.modulation == TEST_LORA) || (P2PParam.modulation == TEST_BPSK))
 80092a4:	2a01      	cmp	r2, #1
 80092a6:	d904      	bls.n	80092b2 <AT_P2P_set_config+0x142>
  else if ((P2PParam.modulation == TEST_FSK) && (BTproduct <= 4))
 80092a8:	bb5b      	cbnz	r3, 8009302 <AT_P2P_set_config+0x192>
 80092aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092ac:	2b04      	cmp	r3, #4
 80092ae:	d82a      	bhi.n	8009306 <AT_P2P_set_config+0x196>
    P2PParam.BTproduct = BTproduct;
 80092b0:	9325      	str	r3, [sp, #148]	; 0x94
  P2P_set_config(&P2PParam);
 80092b2:	a81a      	add	r0, sp, #104	; 0x68
 80092b4:	f001 fe1e 	bl	800aef4 <P2P_set_config>
  return AT_OK;
 80092b8:	2000      	movs	r0, #0
 80092ba:	e780      	b.n	80091be <AT_P2P_set_config+0x4e>
  else if ((P2PParam.modulation == TEST_LORA) && (loraSf_datarate >= 5) && (loraSf_datarate <= 12))
 80092bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80092be:	2a04      	cmp	r2, #4
 80092c0:	d9bd      	bls.n	800923e <AT_P2P_set_config+0xce>
 80092c2:	2a0c      	cmp	r2, #12
 80092c4:	d8bb      	bhi.n	800923e <AT_P2P_set_config+0xce>
    P2PParam.loraSf_datarate = loraSf_datarate;
 80092c6:	921e      	str	r2, [sp, #120]	; 0x78
 80092c8:	e7c0      	b.n	800924c <AT_P2P_set_config+0xdc>
    P2PParam.paBoost = paBoost;
 80092ca:	9221      	str	r2, [sp, #132]	; 0x84
 80092cc:	e7d0      	b.n	8009270 <AT_P2P_set_config+0x100>
    return AT_PARAM_ERROR;
 80092ce:	2002      	movs	r0, #2
 80092d0:	e775      	b.n	80091be <AT_P2P_set_config+0x4e>
    return AT_PARAM_ERROR;
 80092d2:	2002      	movs	r0, #2
 80092d4:	e773      	b.n	80091be <AT_P2P_set_config+0x4e>
    return AT_PARAM_ERROR;
 80092d6:	2002      	movs	r0, #2
 80092d8:	e771      	b.n	80091be <AT_P2P_set_config+0x4e>
    return AT_PARAM_ERROR;
 80092da:	2002      	movs	r0, #2
 80092dc:	e76f      	b.n	80091be <AT_P2P_set_config+0x4e>
 80092de:	2002      	movs	r0, #2
 80092e0:	e76d      	b.n	80091be <AT_P2P_set_config+0x4e>
    return AT_PARAM_ERROR;
 80092e2:	2002      	movs	r0, #2
 80092e4:	e76b      	b.n	80091be <AT_P2P_set_config+0x4e>
 80092e6:	2002      	movs	r0, #2
 80092e8:	e769      	b.n	80091be <AT_P2P_set_config+0x4e>
    return AT_PARAM_ERROR;
 80092ea:	2002      	movs	r0, #2
 80092ec:	e767      	b.n	80091be <AT_P2P_set_config+0x4e>
    return AT_PARAM_ERROR;
 80092ee:	2002      	movs	r0, #2
 80092f0:	e765      	b.n	80091be <AT_P2P_set_config+0x4e>
    return AT_PARAM_ERROR;
 80092f2:	2002      	movs	r0, #2
 80092f4:	e763      	b.n	80091be <AT_P2P_set_config+0x4e>
 80092f6:	2002      	movs	r0, #2
 80092f8:	e761      	b.n	80091be <AT_P2P_set_config+0x4e>
    return AT_PARAM_ERROR;
 80092fa:	2002      	movs	r0, #2
 80092fc:	e75f      	b.n	80091be <AT_P2P_set_config+0x4e>
 80092fe:	2002      	movs	r0, #2
 8009300:	e75d      	b.n	80091be <AT_P2P_set_config+0x4e>
    return AT_PARAM_ERROR;
 8009302:	2002      	movs	r0, #2
 8009304:	e75b      	b.n	80091be <AT_P2P_set_config+0x4e>
 8009306:	2002      	movs	r0, #2
 8009308:	e759      	b.n	80091be <AT_P2P_set_config+0x4e>
 800930a:	bf00      	nop
 800930c:	080255cc 	.word	0x080255cc
 8009310:	000f4240 	.word	0x000f4240
 8009314:	00072038 	.word	0x00072038
 8009318:	000493e0 	.word	0x000493e0
 800931c:	00030ae8 	.word	0x00030ae8

08009320 <AT_P2P_Tx>:
{
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	b0c0      	sub	sp, #256	; 0x100
 8009324:	4606      	mov	r6, r0
  uint16_t bufSize = strlen(param);
 8009326:	f7fc fcc5 	bl	8005cb4 <strlen>
 800932a:	b285      	uxth	r5, r0
  char hex[3] = {0, 0, 0};
 800932c:	4b27      	ldr	r3, [pc, #156]	; (80093cc <AT_P2P_Tx+0xac>)
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009334:	0c1b      	lsrs	r3, r3, #16
 8009336:	f88d 300a 	strb.w	r3, [sp, #10]
  AT_PRINTF("\r\nP2P Tx START\r\n");
 800933a:	4b25      	ldr	r3, [pc, #148]	; (80093d0 <AT_P2P_Tx+0xb0>)
 800933c:	2200      	movs	r2, #0
 800933e:	4611      	mov	r1, r2
 8009340:	4610      	mov	r0, r2
 8009342:	f018 ff6b 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  uint8_t P2Ppayload_len = 0;
 8009346:	2400      	movs	r4, #0
  while ((P2Ppayload_len < LORAWAN_APP_DATA_BUFFER_MAX_SIZE) && (bufSize > 1))
 8009348:	e003      	b.n	8009352 <AT_P2P_Tx+0x32>
    P2Ppayload_len++;
 800934a:	3401      	adds	r4, #1
 800934c:	b2e4      	uxtb	r4, r4
    bufSize -= 2;
 800934e:	3d02      	subs	r5, #2
 8009350:	b2ad      	uxth	r5, r5
  while ((P2Ppayload_len < LORAWAN_APP_DATA_BUFFER_MAX_SIZE) && (bufSize > 1))
 8009352:	2cf1      	cmp	r4, #241	; 0xf1
 8009354:	d815      	bhi.n	8009382 <AT_P2P_Tx+0x62>
 8009356:	2d01      	cmp	r5, #1
 8009358:	d913      	bls.n	8009382 <AT_P2P_Tx+0x62>
    hex[0] = buf[P2Ppayload_len * 2];
 800935a:	f816 3014 	ldrb.w	r3, [r6, r4, lsl #1]
 800935e:	f88d 3008 	strb.w	r3, [sp, #8]
    hex[1] = buf[P2Ppayload_len * 2 + 1];
 8009362:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 8009366:	785b      	ldrb	r3, [r3, #1]
 8009368:	f88d 3009 	strb.w	r3, [sp, #9]
    if (tiny_sscanf(hex, "%hhx", &P2Ppayload[P2Ppayload_len]) != 1)
 800936c:	ab03      	add	r3, sp, #12
 800936e:	191a      	adds	r2, r3, r4
 8009370:	4918      	ldr	r1, [pc, #96]	; (80093d4 <AT_P2P_Tx+0xb4>)
 8009372:	a802      	add	r0, sp, #8
 8009374:	f019 febe 	bl	80230f4 <tiny_sscanf>
 8009378:	2801      	cmp	r0, #1
 800937a:	d0e6      	beq.n	800934a <AT_P2P_Tx+0x2a>
      return AT_PARAM_ERROR;
 800937c:	2002      	movs	r0, #2
}
 800937e:	b040      	add	sp, #256	; 0x100
 8009380:	bd70      	pop	{r4, r5, r6, pc}
  APP_PRINTF("Hex P2P payload = ");  
 8009382:	4b15      	ldr	r3, [pc, #84]	; (80093d8 <AT_P2P_Tx+0xb8>)
 8009384:	2200      	movs	r2, #0
 8009386:	4611      	mov	r1, r2
 8009388:	4610      	mov	r0, r2
 800938a:	f018 ff47 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  for(int i = 0; i < P2Ppayload_len; i ++)
 800938e:	2500      	movs	r5, #0
 8009390:	e00b      	b.n	80093aa <AT_P2P_Tx+0x8a>
  	 APP_PRINTF("%02X ", P2Ppayload[i]);
 8009392:	ab40      	add	r3, sp, #256	; 0x100
 8009394:	442b      	add	r3, r5
 8009396:	f813 3cf4 	ldrb.w	r3, [r3, #-244]
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <AT_P2P_Tx+0xbc>)
 800939e:	2200      	movs	r2, #0
 80093a0:	4611      	mov	r1, r2
 80093a2:	4610      	mov	r0, r2
 80093a4:	f018 ff3a 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  for(int i = 0; i < P2Ppayload_len; i ++)
 80093a8:	3501      	adds	r5, #1
 80093aa:	42ac      	cmp	r4, r5
 80093ac:	dcf1      	bgt.n	8009392 <AT_P2P_Tx+0x72>
  APP_PRINTF("\r\n");
 80093ae:	4b0c      	ldr	r3, [pc, #48]	; (80093e0 <AT_P2P_Tx+0xc0>)
 80093b0:	2200      	movs	r2, #0
 80093b2:	4611      	mov	r1, r2
 80093b4:	4610      	mov	r0, r2
 80093b6:	f018 ff31 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  if (0U == P2P_TX_Start(P2Ppayload, P2Ppayload_len))
 80093ba:	4621      	mov	r1, r4
 80093bc:	a803      	add	r0, sp, #12
 80093be:	f001 fdad 	bl	800af1c <P2P_TX_Start>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d0db      	beq.n	800937e <AT_P2P_Tx+0x5e>
    return AT_BUSY_ERROR;
 80093c6:	2003      	movs	r0, #3
 80093c8:	e7d9      	b.n	800937e <AT_P2P_Tx+0x5e>
 80093ca:	bf00      	nop
 80093cc:	080248c0 	.word	0x080248c0
 80093d0:	0802570c 	.word	0x0802570c
 80093d4:	080252a0 	.word	0x080252a0
 80093d8:	08025720 	.word	0x08025720
 80093dc:	08025734 	.word	0x08025734
 80093e0:	080267cc 	.word	0x080267cc

080093e4 <AT_P2P_Rx>:
{
 80093e4:	b508      	push	{r3, lr}
  AT_PRINTF("\r\nP2P Rx START\r\n");
 80093e6:	4b09      	ldr	r3, [pc, #36]	; (800940c <AT_P2P_Rx+0x28>)
 80093e8:	2200      	movs	r2, #0
 80093ea:	4611      	mov	r1, r2
 80093ec:	4610      	mov	r0, r2
 80093ee:	f018 ff15 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  if (0U == P2P_RX_Start())
 80093f2:	f001 fe9f 	bl	800b134 <P2P_RX_Start>
 80093f6:	b108      	cbz	r0, 80093fc <AT_P2P_Rx+0x18>
    return AT_BUSY_ERROR;
 80093f8:	2003      	movs	r0, #3
}
 80093fa:	bd08      	pop	{r3, pc}
  	AT_PRINTF("\r\nP2P Rx STOP\r\n");
 80093fc:	4b04      	ldr	r3, [pc, #16]	; (8009410 <AT_P2P_Rx+0x2c>)
 80093fe:	2200      	movs	r2, #0
 8009400:	4611      	mov	r1, r2
 8009402:	4610      	mov	r0, r2
 8009404:	f018 ff0a 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    return AT_OK;
 8009408:	2000      	movs	r0, #0
 800940a:	e7f6      	b.n	80093fa <AT_P2P_Rx+0x16>
 800940c:	0802573c 	.word	0x0802573c
 8009410:	08025750 	.word	0x08025750

08009414 <AT_bat_get_l>:
{
 8009414:	b508      	push	{r3, lr}
  print_d(SYS_GetBatteryLevel());
 8009416:	f7fd facd 	bl	80069b4 <SYS_GetBatteryLevel>
 800941a:	f7fe fb5d 	bl	8007ad8 <print_d>
}
 800941e:	2000      	movs	r0, #0
 8009420:	bd08      	pop	{r3, pc}
	...

08009424 <AT_CertiSend>:
{
 8009424:	b508      	push	{r3, lr}
  AppData.Buffer[0] = 0x43;
 8009426:	4814      	ldr	r0, [pc, #80]	; (8009478 <AT_CertiSend+0x54>)
 8009428:	6843      	ldr	r3, [r0, #4]
 800942a:	2243      	movs	r2, #67	; 0x43
 800942c:	701a      	strb	r2, [r3, #0]
  AppData.BufferSize = 1;
 800942e:	2301      	movs	r3, #1
 8009430:	7043      	strb	r3, [r0, #1]
  AppData.Port = 99;
 8009432:	2363      	movs	r3, #99	; 0x63
 8009434:	7003      	strb	r3, [r0, #0]
  lmhStatus = LmHandlerSend(&AppData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, false);
 8009436:	2300      	movs	r3, #0
 8009438:	461a      	mov	r2, r3
 800943a:	4619      	mov	r1, r3
 800943c:	f009 ff1a 	bl	8013274 <LmHandlerSend>
  switch (lmhStatus)
 8009440:	3006      	adds	r0, #6
 8009442:	2806      	cmp	r0, #6
 8009444:	d811      	bhi.n	800946a <AT_CertiSend+0x46>
 8009446:	e8df f000 	tbb	[pc, r0]
 800944a:	0e0c      	.short	0x0e0c
 800944c:	10061206 	.word	0x10061206
 8009450:	04          	.byte	0x04
 8009451:	00          	.byte	0x00
  lmhStatus = LmHandlerSend(&AppData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, false);
 8009452:	2000      	movs	r0, #0
 8009454:	e006      	b.n	8009464 <AT_CertiSend+0x40>
      status = (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET) ? AT_NO_NET_JOINED : AT_BUSY_ERROR;
 8009456:	f009 fe4b 	bl	80130f0 <LmHandlerJoinStatus>
 800945a:	2801      	cmp	r0, #1
 800945c:	d009      	beq.n	8009472 <AT_CertiSend+0x4e>
 800945e:	2005      	movs	r0, #5
 8009460:	e000      	b.n	8009464 <AT_CertiSend+0x40>
      status = AT_DUTYCYCLE_RESTRICTED;
 8009462:	2008      	movs	r0, #8
}
 8009464:	bd08      	pop	{r3, pc}
      status = AT_CRYPTO_ERROR;
 8009466:	2009      	movs	r0, #9
      break;
 8009468:	e7fc      	b.n	8009464 <AT_CertiSend+0x40>
      status = AT_ERROR;
 800946a:	2001      	movs	r0, #1
      break;
 800946c:	e7fa      	b.n	8009464 <AT_CertiSend+0x40>
      status = AT_NO_NET_JOINED;
 800946e:	2005      	movs	r0, #5
 8009470:	e7f8      	b.n	8009464 <AT_CertiSend+0x40>
      status = (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET) ? AT_NO_NET_JOINED : AT_BUSY_ERROR;
 8009472:	2003      	movs	r0, #3
 8009474:	e7f6      	b.n	8009464 <AT_CertiSend+0x40>
 8009476:	bf00      	nop
 8009478:	200000f8 	.word	0x200000f8

0800947c <AT_sw_version_get_l>:
{
 800947c:	b500      	push	{lr}
 800947e:	b083      	sub	sp, #12
  AT_PPRINTF("SW_VERSION: %s\r\n", APP_SW_VERSION);
 8009480:	4b06      	ldr	r3, [pc, #24]	; (800949c <AT_sw_version_get_l+0x20>)
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	4b06      	ldr	r3, [pc, #24]	; (80094a0 <AT_sw_version_get_l+0x24>)
 8009486:	2200      	movs	r2, #0
 8009488:	4611      	mov	r1, r2
 800948a:	4610      	mov	r0, r2
 800948c:	f018 fec6 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8009490:	2800      	cmp	r0, #0
 8009492:	d1f5      	bne.n	8009480 <AT_sw_version_get_l+0x4>
}
 8009494:	b003      	add	sp, #12
 8009496:	f85d fb04 	ldr.w	pc, [sp], #4
 800949a:	bf00      	nop
 800949c:	08025774 	.word	0x08025774
 80094a0:	08025760 	.word	0x08025760

080094a4 <CMD_ProcessBackSpace>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t CMD_ProcessBackSpace(char *cmd)
{
 80094a4:	b470      	push	{r4, r5, r6}
  /* USER CODE BEGIN CMD_ProcessBackSpace_1 */

  /* USER CODE END CMD_ProcessBackSpace_1 */
  uint32_t i = 0;
  uint32_t bs_cnt = 0;
  uint32_t cmd_len = 0;
 80094a6:	2200      	movs	r2, #0
  uint32_t bs_cnt = 0;
 80094a8:	4614      	mov	r4, r2
  /*get command length and number of backspace*/
  while (cmd[cmd_len] != '\0')
 80094aa:	e000      	b.n	80094ae <CMD_ProcessBackSpace+0xa>
  {
    if (cmd[cmd_len] == '\b')
    {
      bs_cnt++;
    }
    cmd_len++;
 80094ac:	3201      	adds	r2, #1
  while (cmd[cmd_len] != '\0')
 80094ae:	5c83      	ldrb	r3, [r0, r2]
 80094b0:	b11b      	cbz	r3, 80094ba <CMD_ProcessBackSpace+0x16>
    if (cmd[cmd_len] == '\b')
 80094b2:	2b08      	cmp	r3, #8
 80094b4:	d1fa      	bne.n	80094ac <CMD_ProcessBackSpace+0x8>
      bs_cnt++;
 80094b6:	3401      	adds	r4, #1
 80094b8:	e7f8      	b.n	80094ac <CMD_ProcessBackSpace+0x8>
  }
  /*for every backspace, remove backspace and its preceding character*/
  for (i = 0; i < bs_cnt; i++)
 80094ba:	2600      	movs	r6, #0
 80094bc:	42a6      	cmp	r6, r4
 80094be:	d21c      	bcs.n	80094fa <CMD_ProcessBackSpace+0x56>
  {
    int curs = 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	e000      	b.n	80094c6 <CMD_ProcessBackSpace+0x22>
    int j = 0;

    /*set cursor to backspace*/
    while (cmd[curs] != '\b')
    {
      curs++;
 80094c4:	3301      	adds	r3, #1
    while (cmd[curs] != '\b')
 80094c6:	5cc1      	ldrb	r1, [r0, r3]
 80094c8:	2908      	cmp	r1, #8
 80094ca:	d1fb      	bne.n	80094c4 <CMD_ProcessBackSpace+0x20>
    }
    if (curs > 0)
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	dc03      	bgt.n	80094d8 <CMD_ProcessBackSpace+0x34>
      cmd[j++] = '\0';
      cmd_len -= 2;
    }
    else
    {
      return -1;
 80094d0:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return 0;
  /* USER CODE BEGIN CMD_ProcessBackSpace_2 */

  /* USER CODE END CMD_ProcessBackSpace_2 */
}
 80094d4:	bc70      	pop	{r4, r5, r6}
 80094d6:	4770      	bx	lr
      for (j = curs - 1; j < cmd_len - 2; j++)
 80094d8:	3b01      	subs	r3, #1
 80094da:	e003      	b.n	80094e4 <CMD_ProcessBackSpace+0x40>
        cmd[j] = cmd[j + 2];
 80094dc:	18c1      	adds	r1, r0, r3
 80094de:	7889      	ldrb	r1, [r1, #2]
 80094e0:	54c1      	strb	r1, [r0, r3]
      for (j = curs - 1; j < cmd_len - 2; j++)
 80094e2:	3301      	adds	r3, #1
 80094e4:	1e91      	subs	r1, r2, #2
 80094e6:	461d      	mov	r5, r3
 80094e8:	4299      	cmp	r1, r3
 80094ea:	d8f7      	bhi.n	80094dc <CMD_ProcessBackSpace+0x38>
      cmd[j++] = '\0';
 80094ec:	3301      	adds	r3, #1
 80094ee:	2200      	movs	r2, #0
 80094f0:	5542      	strb	r2, [r0, r5]
      cmd[j++] = '\0';
 80094f2:	54c2      	strb	r2, [r0, r3]
  for (i = 0; i < bs_cnt; i++)
 80094f4:	3601      	adds	r6, #1
      cmd_len -= 2;
 80094f6:	460a      	mov	r2, r1
 80094f8:	e7e0      	b.n	80094bc <CMD_ProcessBackSpace+0x18>
  return 0;
 80094fa:	2000      	movs	r0, #0
 80094fc:	e7ea      	b.n	80094d4 <CMD_ProcessBackSpace+0x30>
	...

08009500 <CMD_GetChar>:

static void CMD_GetChar(uint8_t *rxChar, uint16_t size, uint8_t error)
{
 8009500:	b510      	push	{r4, lr}
 8009502:	4604      	mov	r4, r0
  /* USER CODE BEGIN CMD_GetChar_1 */

  /* USER CODE END CMD_GetChar_1 */
  charCount++;
 8009504:	4a14      	ldr	r2, [pc, #80]	; (8009558 <CMD_GetChar+0x58>)
 8009506:	6811      	ldr	r1, [r2, #0]
 8009508:	1c4b      	adds	r3, r1, #1
 800950a:	6013      	str	r3, [r2, #0]
  if (charCount == (CIRC_BUFF_SIZE + 1))
 800950c:	2b11      	cmp	r3, #17
 800950e:	d011      	beq.n	8009534 <CMD_GetChar+0x34>
    circBuffOverflow = 1;
    charCount--;
  }
  else
  {
    circBuffer[widx++] = *rxChar;
 8009510:	4912      	ldr	r1, [pc, #72]	; (800955c <CMD_GetChar+0x5c>)
 8009512:	680a      	ldr	r2, [r1, #0]
 8009514:	1c53      	adds	r3, r2, #1
 8009516:	600b      	str	r3, [r1, #0]
 8009518:	7800      	ldrb	r0, [r0, #0]
 800951a:	4911      	ldr	r1, [pc, #68]	; (8009560 <CMD_GetChar+0x60>)
 800951c:	5488      	strb	r0, [r1, r2]
    if (widx == CIRC_BUFF_SIZE)
 800951e:	2b10      	cmp	r3, #16
 8009520:	d00e      	beq.n	8009540 <CMD_GetChar+0x40>
    {
      widx = 0;
    }
  }

  if (NotifyCb != NULL)
 8009522:	4b10      	ldr	r3, [pc, #64]	; (8009564 <CMD_GetChar+0x64>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	b103      	cbz	r3, 800952a <CMD_GetChar+0x2a>
  {
    NotifyCb();
 8009528:	4798      	blx	r3
  }
  /* USER CODE BEGIN CMD_GetChar_2 */
  if(whileEnd == 1)
 800952a:	4b0f      	ldr	r3, [pc, #60]	; (8009568 <CMD_GetChar+0x68>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d00a      	beq.n	8009548 <CMD_GetChar+0x48>
      whileEnd = 0;
  	}
  }

  /* USER CODE END CMD_GetChar_2 */
}
 8009532:	bd10      	pop	{r4, pc}
    circBuffOverflow = 1;
 8009534:	4b0d      	ldr	r3, [pc, #52]	; (800956c <CMD_GetChar+0x6c>)
 8009536:	2201      	movs	r2, #1
 8009538:	601a      	str	r2, [r3, #0]
    charCount--;
 800953a:	4b07      	ldr	r3, [pc, #28]	; (8009558 <CMD_GetChar+0x58>)
 800953c:	6019      	str	r1, [r3, #0]
 800953e:	e7f0      	b.n	8009522 <CMD_GetChar+0x22>
      widx = 0;
 8009540:	4b06      	ldr	r3, [pc, #24]	; (800955c <CMD_GetChar+0x5c>)
 8009542:	2200      	movs	r2, #0
 8009544:	601a      	str	r2, [r3, #0]
 8009546:	e7ec      	b.n	8009522 <CMD_GetChar+0x22>
  	if(*rxChar == 'X')
 8009548:	7823      	ldrb	r3, [r4, #0]
 800954a:	2b58      	cmp	r3, #88	; 0x58
 800954c:	d1f1      	bne.n	8009532 <CMD_GetChar+0x32>
      whileEnd = 0;
 800954e:	4b06      	ldr	r3, [pc, #24]	; (8009568 <CMD_GetChar+0x68>)
 8009550:	2200      	movs	r2, #0
 8009552:	601a      	str	r2, [r3, #0]
}
 8009554:	e7ed      	b.n	8009532 <CMD_GetChar+0x32>
 8009556:	bf00      	nop
 8009558:	20000808 	.word	0x20000808
 800955c:	20000a44 	.word	0x20000a44
 8009560:	20000810 	.word	0x20000810
 8009564:	20000804 	.word	0x20000804
 8009568:	20002870 	.word	0x20002870
 800956c:	2000080c 	.word	0x2000080c

08009570 <com_error>:

  /* USER CODE END parse_cmd_2 */
}

static void com_error(ATEerror_t error_type)
{
 8009570:	b510      	push	{r4, lr}
 8009572:	4604      	mov	r4, r0
  /* USER CODE BEGIN com_error_1 */

  /* USER CODE END com_error_1 */
  if (error_type > AT_MAX)
 8009574:	280a      	cmp	r0, #10
 8009576:	d900      	bls.n	800957a <com_error+0xa>
  {
    error_type = AT_MAX;
 8009578:	240a      	movs	r4, #10
  }
  AT_PPRINTF(ATError_description[error_type]);
 800957a:	4b05      	ldr	r3, [pc, #20]	; (8009590 <com_error+0x20>)
 800957c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009580:	2200      	movs	r2, #0
 8009582:	4611      	mov	r1, r2
 8009584:	4610      	mov	r0, r2
 8009586:	f018 fe49 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800958a:	2800      	cmp	r0, #0
 800958c:	d1f5      	bne.n	800957a <com_error+0xa>
  /* USER CODE BEGIN com_error_2 */

  /* USER CODE END com_error_2 */
}
 800958e:	bd10      	pop	{r4, pc}
 8009590:	08026dbc 	.word	0x08026dbc

08009594 <parse_cmd>:
{
 8009594:	b570      	push	{r4, r5, r6, lr}
  if ((cmd[0] != 'A') || (cmd[1] != 'T'))
 8009596:	7802      	ldrb	r2, [r0, #0]
 8009598:	2a41      	cmp	r2, #65	; 0x41
 800959a:	d005      	beq.n	80095a8 <parse_cmd+0x14>
  	if((cmd[0] != 'X'))
 800959c:	2a58      	cmp	r2, #88	; 0x58
 800959e:	d01f      	beq.n	80095e0 <parse_cmd+0x4c>
		status = AT_ERROR;
 80095a0:	2001      	movs	r0, #1
  com_error(status);
 80095a2:	f7ff ffe5 	bl	8009570 <com_error>
}
 80095a6:	bd70      	pop	{r4, r5, r6, pc}
 80095a8:	4603      	mov	r3, r0
  if ((cmd[0] != 'A') || (cmd[1] != 'T'))
 80095aa:	7841      	ldrb	r1, [r0, #1]
 80095ac:	2954      	cmp	r1, #84	; 0x54
 80095ae:	d1f5      	bne.n	800959c <parse_cmd+0x8>
  else if (cmd[2] == '\0')
 80095b0:	7880      	ldrb	r0, [r0, #2]
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d0f5      	beq.n	80095a2 <parse_cmd+0xe>
  else if (cmd[2] == '?')
 80095b6:	283f      	cmp	r0, #63	; 0x3f
 80095b8:	d014      	beq.n	80095e4 <parse_cmd+0x50>
    cmd += 2;
 80095ba:	1c9c      	adds	r4, r3, #2
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 80095bc:	2500      	movs	r5, #0
 80095be:	2d2e      	cmp	r5, #46	; 0x2e
 80095c0:	d867      	bhi.n	8009692 <parse_cmd+0xfe>
      if (strncmp(cmd, ATCommand[i].string, ATCommand[i].size_string) == 0)
 80095c2:	4b35      	ldr	r3, [pc, #212]	; (8009698 <parse_cmd+0x104>)
 80095c4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80095c8:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 80095cc:	6856      	ldr	r6, [r2, #4]
 80095ce:	4632      	mov	r2, r6
 80095d0:	f853 1031 	ldr.w	r1, [r3, r1, lsl #3]
 80095d4:	4620      	mov	r0, r4
 80095d6:	f01a fd8c 	bl	80240f2 <strncmp>
 80095da:	b318      	cbz	r0, 8009624 <parse_cmd+0x90>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 80095dc:	3501      	adds	r5, #1
 80095de:	e7ee      	b.n	80095be <parse_cmd+0x2a>
  ATEerror_t status = AT_OK;
 80095e0:	2000      	movs	r0, #0
 80095e2:	e7de      	b.n	80095a2 <parse_cmd+0xe>
    AT_PPRINTF("AT+<CMD>?        : Help on <CMD>\r\n"
 80095e4:	4b2d      	ldr	r3, [pc, #180]	; (800969c <parse_cmd+0x108>)
 80095e6:	2200      	movs	r2, #0
 80095e8:	4611      	mov	r1, r2
 80095ea:	4610      	mov	r0, r2
 80095ec:	f018 fe16 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d1f7      	bne.n	80095e4 <parse_cmd+0x50>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 80095f4:	2400      	movs	r4, #0
 80095f6:	e00d      	b.n	8009614 <parse_cmd+0x80>
      AT_PPRINTF(ATCommand[i].help_string);
 80095f8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80095fc:	4a26      	ldr	r2, [pc, #152]	; (8009698 <parse_cmd+0x104>)
 80095fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	2200      	movs	r2, #0
 8009606:	4611      	mov	r1, r2
 8009608:	4610      	mov	r0, r2
 800960a:	f018 fe07 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800960e:	2800      	cmp	r0, #0
 8009610:	d1f2      	bne.n	80095f8 <parse_cmd+0x64>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 8009612:	3401      	adds	r4, #1
 8009614:	2c2e      	cmp	r4, #46	; 0x2e
 8009616:	d9ef      	bls.n	80095f8 <parse_cmd+0x64>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8009618:	f018 fd8c 	bl	8022134 <UTIL_ADV_TRACE_IsBufferEmpty>
 800961c:	2801      	cmp	r0, #1
 800961e:	d1fb      	bne.n	8009618 <parse_cmd+0x84>
  ATEerror_t status = AT_OK;
 8009620:	2000      	movs	r0, #0
 8009622:	e7be      	b.n	80095a2 <parse_cmd+0xe>
        cmd += Current_ATCommand->size_string;
 8009624:	19a0      	adds	r0, r4, r6
        switch (cmd[0])
 8009626:	5da3      	ldrb	r3, [r4, r6]
 8009628:	2b3d      	cmp	r3, #61	; 0x3d
 800962a:	d00c      	beq.n	8009646 <parse_cmd+0xb2>
 800962c:	2b3f      	cmp	r3, #63	; 0x3f
 800962e:	d022      	beq.n	8009676 <parse_cmd+0xe2>
 8009630:	b10b      	cbz	r3, 8009636 <parse_cmd+0xa2>
 8009632:	2001      	movs	r0, #1
 8009634:	e7b5      	b.n	80095a2 <parse_cmd+0xe>
            status = Current_ATCommand->run(cmd);
 8009636:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800963a:	4b17      	ldr	r3, [pc, #92]	; (8009698 <parse_cmd+0x104>)
 800963c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	4798      	blx	r3
            break;
 8009644:	e7ad      	b.n	80095a2 <parse_cmd+0xe>
            if ((cmd[1] == '?') && (cmd[2] == '\0'))
 8009646:	7843      	ldrb	r3, [r0, #1]
 8009648:	2b3f      	cmp	r3, #63	; 0x3f
 800964a:	d008      	beq.n	800965e <parse_cmd+0xca>
              status = Current_ATCommand->set(cmd + 1);
 800964c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009650:	4b11      	ldr	r3, [pc, #68]	; (8009698 <parse_cmd+0x104>)
 8009652:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009656:	68eb      	ldr	r3, [r5, #12]
 8009658:	3001      	adds	r0, #1
 800965a:	4798      	blx	r3
 800965c:	e7a1      	b.n	80095a2 <parse_cmd+0xe>
            if ((cmd[1] == '?') && (cmd[2] == '\0'))
 800965e:	7883      	ldrb	r3, [r0, #2]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1f3      	bne.n	800964c <parse_cmd+0xb8>
              status = Current_ATCommand->get(cmd + 1);
 8009664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009668:	4b0b      	ldr	r3, [pc, #44]	; (8009698 <parse_cmd+0x104>)
 800966a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	3001      	adds	r0, #1
 8009672:	4798      	blx	r3
 8009674:	e795      	b.n	80095a2 <parse_cmd+0xe>
            AT_PPRINTF(Current_ATCommand->help_string);
 8009676:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800967a:	4a07      	ldr	r2, [pc, #28]	; (8009698 <parse_cmd+0x104>)
 800967c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	2200      	movs	r2, #0
 8009684:	4611      	mov	r1, r2
 8009686:	4610      	mov	r0, r2
 8009688:	f018 fdc8 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800968c:	2800      	cmp	r0, #0
 800968e:	d1f2      	bne.n	8009676 <parse_cmd+0xe2>
 8009690:	e787      	b.n	80095a2 <parse_cmd+0xe>
    status = AT_ERROR;
 8009692:	2001      	movs	r0, #1
 8009694:	e785      	b.n	80095a2 <parse_cmd+0xe>
 8009696:	bf00      	nop
 8009698:	08026954 	.word	0x08026954
 800969c:	0802577c 	.word	0x0802577c

080096a0 <CMD_Init_L>:
{
 80096a0:	b510      	push	{r4, lr}
 80096a2:	4604      	mov	r4, r0
  UTIL_ADV_TRACE_StartRxProcess(CMD_GetChar);
 80096a4:	4808      	ldr	r0, [pc, #32]	; (80096c8 <CMD_Init_L+0x28>)
 80096a6:	f018 fd51 	bl	802214c <UTIL_ADV_TRACE_StartRxProcess>
  if (CmdProcessNotify != NULL)
 80096aa:	b10c      	cbz	r4, 80096b0 <CMD_Init_L+0x10>
    NotifyCb = CmdProcessNotify;
 80096ac:	4b07      	ldr	r3, [pc, #28]	; (80096cc <CMD_Init_L+0x2c>)
 80096ae:	601c      	str	r4, [r3, #0]
  widx = 0;
 80096b0:	2300      	movs	r3, #0
 80096b2:	4a07      	ldr	r2, [pc, #28]	; (80096d0 <CMD_Init_L+0x30>)
 80096b4:	6013      	str	r3, [r2, #0]
  ridx = 0;
 80096b6:	4a07      	ldr	r2, [pc, #28]	; (80096d4 <CMD_Init_L+0x34>)
 80096b8:	6013      	str	r3, [r2, #0]
  charCount = 0;
 80096ba:	4a07      	ldr	r2, [pc, #28]	; (80096d8 <CMD_Init_L+0x38>)
 80096bc:	6013      	str	r3, [r2, #0]
  i = 0;
 80096be:	4a07      	ldr	r2, [pc, #28]	; (80096dc <CMD_Init_L+0x3c>)
 80096c0:	6013      	str	r3, [r2, #0]
  circBuffOverflow = 0;
 80096c2:	4a07      	ldr	r2, [pc, #28]	; (80096e0 <CMD_Init_L+0x40>)
 80096c4:	6013      	str	r3, [r2, #0]
}
 80096c6:	bd10      	pop	{r4, pc}
 80096c8:	08009501 	.word	0x08009501
 80096cc:	20000804 	.word	0x20000804
 80096d0:	20000a44 	.word	0x20000a44
 80096d4:	20000a40 	.word	0x20000a40
 80096d8:	20000808 	.word	0x20000808
 80096dc:	20000a3c 	.word	0x20000a3c
 80096e0:	2000080c 	.word	0x2000080c

080096e4 <CMD_Process_L>:
{
 80096e4:	b570      	push	{r4, r5, r6, lr}
  if (circBuffOverflow == 1)
 80096e6:	4b45      	ldr	r3, [pc, #276]	; (80097fc <CMD_Process_L+0x118>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d127      	bne.n	800973e <CMD_Process_L+0x5a>
    com_error(AT_TEST_PARAM_OVERFLOW);
 80096ee:	2004      	movs	r0, #4
 80096f0:	f7ff ff3e 	bl	8009570 <com_error>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096f4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80096f8:	b672      	cpsid	i
    ridx = widx;
 80096fa:	4b41      	ldr	r3, [pc, #260]	; (8009800 <CMD_Process_L+0x11c>)
 80096fc:	6819      	ldr	r1, [r3, #0]
 80096fe:	4b41      	ldr	r3, [pc, #260]	; (8009804 <CMD_Process_L+0x120>)
 8009700:	6019      	str	r1, [r3, #0]
    charCount = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	4940      	ldr	r1, [pc, #256]	; (8009808 <CMD_Process_L+0x124>)
 8009706:	600b      	str	r3, [r1, #0]
    circBuffOverflow = 0;
 8009708:	493c      	ldr	r1, [pc, #240]	; (80097fc <CMD_Process_L+0x118>)
 800970a:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800970c:	f382 8810 	msr	PRIMASK, r2
    i = 0;
 8009710:	4a3e      	ldr	r2, [pc, #248]	; (800980c <CMD_Process_L+0x128>)
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	e013      	b.n	800973e <CMD_Process_L+0x5a>
      ridx++;
 8009716:	3301      	adds	r3, #1
 8009718:	4a3a      	ldr	r2, [pc, #232]	; (8009804 <CMD_Process_L+0x120>)
 800971a:	6013      	str	r3, [r2, #0]
      if (ridx == CIRC_BUFF_SIZE)
 800971c:	2b10      	cmp	r3, #16
 800971e:	d036      	beq.n	800978e <CMD_Process_L+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009720:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009724:	b672      	cpsid	i
      charCount--;
 8009726:	4a38      	ldr	r2, [pc, #224]	; (8009808 <CMD_Process_L+0x124>)
 8009728:	6813      	ldr	r3, [r2, #0]
 800972a:	3b01      	subs	r3, #1
 800972c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800972e:	f381 8810 	msr	PRIMASK, r1
      com_error(AT_RX_ERROR);
 8009732:	2006      	movs	r0, #6
 8009734:	f7ff ff1c 	bl	8009570 <com_error>
      i = 0;
 8009738:	4b34      	ldr	r3, [pc, #208]	; (800980c <CMD_Process_L+0x128>)
 800973a:	2200      	movs	r2, #0
 800973c:	601a      	str	r2, [r3, #0]
  while (charCount != 0)
 800973e:	4b32      	ldr	r3, [pc, #200]	; (8009808 <CMD_Process_L+0x124>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d059      	beq.n	80097fa <CMD_Process_L+0x116>
    if (circBuffer[ridx] == AT_ERROR_RX_CHAR)
 8009746:	4b2f      	ldr	r3, [pc, #188]	; (8009804 <CMD_Process_L+0x120>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a31      	ldr	r2, [pc, #196]	; (8009810 <CMD_Process_L+0x12c>)
 800974c:	5cd2      	ldrb	r2, [r2, r3]
 800974e:	2a01      	cmp	r2, #1
 8009750:	d0e1      	beq.n	8009716 <CMD_Process_L+0x32>
    else if ((circBuffer[ridx] == '\r') || (circBuffer[ridx] == '\n'))
 8009752:	2a0d      	cmp	r2, #13
 8009754:	d01f      	beq.n	8009796 <CMD_Process_L+0xb2>
 8009756:	2a0a      	cmp	r2, #10
 8009758:	d01d      	beq.n	8009796 <CMD_Process_L+0xb2>
    else if (i == (CMD_SIZE - 1))
 800975a:	492c      	ldr	r1, [pc, #176]	; (800980c <CMD_Process_L+0x128>)
 800975c:	6809      	ldr	r1, [r1, #0]
 800975e:	f240 201b 	movw	r0, #539	; 0x21b
 8009762:	4281      	cmp	r1, r0
 8009764:	d03e      	beq.n	80097e4 <CMD_Process_L+0x100>
      command[i++] = circBuffer[ridx++];
 8009766:	3301      	adds	r3, #1
 8009768:	4826      	ldr	r0, [pc, #152]	; (8009804 <CMD_Process_L+0x120>)
 800976a:	6003      	str	r3, [r0, #0]
 800976c:	1c4c      	adds	r4, r1, #1
 800976e:	4827      	ldr	r0, [pc, #156]	; (800980c <CMD_Process_L+0x128>)
 8009770:	6004      	str	r4, [r0, #0]
 8009772:	4828      	ldr	r0, [pc, #160]	; (8009814 <CMD_Process_L+0x130>)
 8009774:	5442      	strb	r2, [r0, r1]
      if (ridx == CIRC_BUFF_SIZE)
 8009776:	2b10      	cmp	r3, #16
 8009778:	d03b      	beq.n	80097f2 <CMD_Process_L+0x10e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800977a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800977e:	b672      	cpsid	i
      charCount--;
 8009780:	4a21      	ldr	r2, [pc, #132]	; (8009808 <CMD_Process_L+0x124>)
 8009782:	6813      	ldr	r3, [r2, #0]
 8009784:	3b01      	subs	r3, #1
 8009786:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009788:	f381 8810 	msr	PRIMASK, r1
}
 800978c:	e7d7      	b.n	800973e <CMD_Process_L+0x5a>
        ridx = 0;
 800978e:	4613      	mov	r3, r2
 8009790:	2200      	movs	r2, #0
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	e7c4      	b.n	8009720 <CMD_Process_L+0x3c>
      ridx++;
 8009796:	3301      	adds	r3, #1
 8009798:	4a1a      	ldr	r2, [pc, #104]	; (8009804 <CMD_Process_L+0x120>)
 800979a:	6013      	str	r3, [r2, #0]
      if (ridx == CIRC_BUFF_SIZE)
 800979c:	2b10      	cmp	r3, #16
 800979e:	d01d      	beq.n	80097dc <CMD_Process_L+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097a0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80097a4:	b672      	cpsid	i
      charCount--;
 80097a6:	4a18      	ldr	r2, [pc, #96]	; (8009808 <CMD_Process_L+0x124>)
 80097a8:	6813      	ldr	r3, [r2, #0]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ae:	f381 8810 	msr	PRIMASK, r1
      if (i != 0)
 80097b2:	4b16      	ldr	r3, [pc, #88]	; (800980c <CMD_Process_L+0x128>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d0c1      	beq.n	800973e <CMD_Process_L+0x5a>
        command[i] = '\0';
 80097ba:	4c16      	ldr	r4, [pc, #88]	; (8009814 <CMD_Process_L+0x130>)
 80097bc:	2500      	movs	r5, #0
 80097be:	54e5      	strb	r5, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097c0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80097c4:	b672      	cpsid	i
        CMD_ProcessBackSpace(command);
 80097c6:	4620      	mov	r0, r4
 80097c8:	f7ff fe6c 	bl	80094a4 <CMD_ProcessBackSpace>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097cc:	f386 8810 	msr	PRIMASK, r6
        parse_cmd(command);
 80097d0:	4620      	mov	r0, r4
 80097d2:	f7ff fedf 	bl	8009594 <parse_cmd>
        i = 0;
 80097d6:	4b0d      	ldr	r3, [pc, #52]	; (800980c <CMD_Process_L+0x128>)
 80097d8:	601d      	str	r5, [r3, #0]
 80097da:	e7b0      	b.n	800973e <CMD_Process_L+0x5a>
        ridx = 0;
 80097dc:	4613      	mov	r3, r2
 80097de:	2200      	movs	r2, #0
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	e7dd      	b.n	80097a0 <CMD_Process_L+0xbc>
      i = 0;
 80097e4:	4b09      	ldr	r3, [pc, #36]	; (800980c <CMD_Process_L+0x128>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	601a      	str	r2, [r3, #0]
      com_error(AT_TEST_PARAM_OVERFLOW);
 80097ea:	2004      	movs	r0, #4
 80097ec:	f7ff fec0 	bl	8009570 <com_error>
 80097f0:	e7a5      	b.n	800973e <CMD_Process_L+0x5a>
        ridx = 0;
 80097f2:	4b04      	ldr	r3, [pc, #16]	; (8009804 <CMD_Process_L+0x120>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	e7bf      	b.n	800977a <CMD_Process_L+0x96>
}
 80097fa:	bd70      	pop	{r4, r5, r6, pc}
 80097fc:	2000080c 	.word	0x2000080c
 8009800:	20000a44 	.word	0x20000a44
 8009804:	20000a40 	.word	0x20000a40
 8009808:	20000808 	.word	0x20000808
 800980c:	20000a3c 	.word	0x20000a3c
 8009810:	20000810 	.word	0x20000810
 8009814:	20000820 	.word	0x20000820

08009818 <EE_LoRa_Reset>:
{
  /* USER CODE BEGIN EE_LoRa_Reset_1 */

  /* USER CODE END EE_LoRa_Reset_1 */
  /* Reset global variables of the bank */
  pv->address = address;
 8009818:	6001      	str	r1, [r0, #0]
  pv->nb_pages = nb_pages;
 800981a:	7102      	strb	r2, [r0, #4]
  pv->current_write_page = 0;
 800981c:	2300      	movs	r3, #0
 800981e:	7143      	strb	r3, [r0, #5]
  pv->nb_written_elements = 0;
 8009820:	80c3      	strh	r3, [r0, #6]
  pv->next_write_offset = EE_HEADER_SIZE;
 8009822:	2320      	movs	r3, #32
 8009824:	8103      	strh	r3, [r0, #8]
  /* USER CODE BEGIN EE_LoRa_Reset_2 */

  /* USER CODE END EE_LoRa_Reset_2 */
}
 8009826:	4770      	bx	lr

08009828 <EE_LoRa_GetState>:

  /* USER CODE END EE_LoRa_GetState_1 */
  uint32_t state;
  uint32_t flash_addr;

  flash_addr = EE_FLASH_ADDR(pv, page) + EE_HEADER_SIZE;
 8009828:	6803      	ldr	r3, [r0, #0]
 800982a:	eb03 21c1 	add.w	r1, r3, r1, lsl #11
 800982e:	3120      	adds	r1, #32

  for (state = EE_STATE_ERASING; state > EE_STATE_ERASED; state--)
 8009830:	2004      	movs	r0, #4
 8009832:	b148      	cbz	r0, 8009848 <EE_LoRa_GetState+0x20>
  {
    flash_addr -= HW_FLASH_WIDTH;

    /* If page header word is not ERASED, return word index as page state */
    if (*EE_PTR(flash_addr) != EE_ERASED)
 8009834:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983c:	bf08      	it	eq
 800983e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8009842:	d101      	bne.n	8009848 <EE_LoRa_GetState+0x20>
  for (state = EE_STATE_ERASING; state > EE_STATE_ERASED; state--)
 8009844:	3801      	subs	r0, #1
 8009846:	e7f4      	b.n	8009832 <EE_LoRa_GetState+0xa>

  return state;
  /* USER CODE BEGIN EE_LoRa_GetState_2 */

  /* USER CODE END EE_LoRa_GetState_2 */
}
 8009848:	4770      	bx	lr

0800984a <EE_LoRa_Crc>:

static uint16_t EE_LoRa_Crc(uint64_t v)
{
 800984a:	b410      	push	{r4}
  /* USER CODE END EE_LoRa_Crc_1 */
  uint32_t x = 0;
  uint32_t crc = 0;

  v >>= 16;
  EE_CRC16_STEP((uint32_t)v, x, crc);
 800984c:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8009850:	f3c0 5303 	ubfx	r3, r0, #20, #4
 8009854:	4063      	eors	r3, r4
 8009856:	015c      	lsls	r4, r3, #5
 8009858:	ea84 3403 	eor.w	r4, r4, r3, lsl #12
 800985c:	4063      	eors	r3, r4
  v >>= 8;
 800985e:	0e00      	lsrs	r0, r0, #24
 8009860:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  EE_CRC16_STEP((uint32_t)v, x, crc);
 8009864:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
 8009868:	b2c2      	uxtb	r2, r0
 800986a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800986e:	4050      	eors	r0, r2
 8009870:	0304      	lsls	r4, r0, #12
 8009872:	ea84 2403 	eor.w	r4, r4, r3, lsl #8
 8009876:	ea84 1440 	eor.w	r4, r4, r0, lsl #5
 800987a:	4044      	eors	r4, r0
  v >>= 8;
  EE_CRC16_STEP((uint32_t)v, x, crc);
 800987c:	ea81 2314 	eor.w	r3, r1, r4, lsr #8
 8009880:	b2d8      	uxtb	r0, r3
 8009882:	f3c3 1203 	ubfx	r2, r3, #4, #4
 8009886:	4042      	eors	r2, r0
 8009888:	0310      	lsls	r0, r2, #12
 800988a:	ea80 2004 	eor.w	r0, r0, r4, lsl #8
 800988e:	ea80 1042 	eor.w	r0, r0, r2, lsl #5
 8009892:	4042      	eors	r2, r0
  v >>= 8;
  EE_CRC16_STEP((uint32_t)v, x, crc);
 8009894:	0a13      	lsrs	r3, r2, #8
 8009896:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 800989a:	b2d8      	uxtb	r0, r3
 800989c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80098a0:	4043      	eors	r3, r0
 80098a2:	0318      	lsls	r0, r3, #12
 80098a4:	ea80 2002 	eor.w	r0, r0, r2, lsl #8
 80098a8:	ea80 1043 	eor.w	r0, r0, r3, lsl #5
 80098ac:	ea80 0203 	eor.w	r2, r0, r3
  v >>= 8;
  EE_CRC16_STEP((uint32_t)v, x, crc);
 80098b0:	0a13      	lsrs	r3, r2, #8
 80098b2:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 80098b6:	b2d8      	uxtb	r0, r3
 80098b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80098bc:	4043      	eors	r3, r0
 80098be:	0318      	lsls	r0, r3, #12
 80098c0:	ea80 2002 	eor.w	r0, r0, r2, lsl #8
 80098c4:	ea80 1043 	eor.w	r0, r0, r3, lsl #5
 80098c8:	4043      	eors	r3, r0
  v >>= 8;
  EE_CRC16_STEP((uint32_t)v, x, crc);
 80098ca:	0a18      	lsrs	r0, r3, #8
 80098cc:	ea80 6111 	eor.w	r1, r0, r1, lsr #24
 80098d0:	b2ca      	uxtb	r2, r1
 80098d2:	f3c1 1003 	ubfx	r0, r1, #4, #4
 80098d6:	4050      	eors	r0, r2
 80098d8:	0302      	lsls	r2, r0, #12
 80098da:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
 80098de:	ea83 1340 	eor.w	r3, r3, r0, lsl #5
 80098e2:	4058      	eors	r0, r3

  return crc;
  /* USER CODE BEGIN EE_LoRa_Crc_2 */

  /* USER CODE END EE_LoRa_Crc_2 */
}
 80098e4:	b280      	uxth	r0, r0
 80098e6:	bc10      	pop	{r4}
 80098e8:	4770      	bx	lr

080098ea <EE_LoRa_ReadEl>:
{
 80098ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ee:	b085      	sub	sp, #20
 80098f0:	9002      	str	r0, [sp, #8]
 80098f2:	9100      	str	r1, [sp, #0]
 80098f4:	9203      	str	r2, [sp, #12]
 80098f6:	9301      	str	r3, [sp, #4]
    flash_addr = EE_FLASH_ADDR(pv, page);
 80098f8:	9b02      	ldr	r3, [sp, #8]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	9a01      	ldr	r2, [sp, #4]
 80098fe:	eb03 29c2 	add.w	r9, r3, r2, lsl #11
    for (offset = HW_FLASH_PAGE_SIZE - HW_FLASH_WIDTH;
 8009902:	f44f 65ff 	mov.w	r5, #2040	; 0x7f8
 8009906:	e000      	b.n	800990a <EE_LoRa_ReadEl+0x20>
         offset >= EE_HEADER_SIZE; offset -= HW_FLASH_WIDTH)
 8009908:	3d08      	subs	r5, #8
    for (offset = HW_FLASH_PAGE_SIZE - HW_FLASH_WIDTH;
 800990a:	2d1f      	cmp	r5, #31
 800990c:	d929      	bls.n	8009962 <EE_LoRa_ReadEl+0x78>
      el = *EE_PTR(flash_addr + offset);
 800990e:	eb05 0309 	add.w	r3, r5, r9
 8009912:	681c      	ldr	r4, [r3, #0]
 8009914:	f8d3 8004 	ldr.w	r8, [r3, #4]
      if ((el != EE_ERASED) && (el != 0ULL) &&
 8009918:	f114 36ff 	adds.w	r6, r4, #4294967295
 800991c:	f148 37ff 	adc.w	r7, r8, #4294967295
 8009920:	f06f 0202 	mvn.w	r2, #2
 8009924:	f04f 33ff 	mov.w	r3, #4294967295
 8009928:	42bb      	cmp	r3, r7
 800992a:	bf08      	it	eq
 800992c:	42b2      	cmpeq	r2, r6
 800992e:	d3eb      	bcc.n	8009908 <EE_LoRa_ReadEl+0x1e>
          (((el & 0x3FFFFFFFUL) >> 16) == addr) &&
 8009930:	f3c4 4a0d 	ubfx	sl, r4, #16, #14
 8009934:	f04f 0b00 	mov.w	fp, #0
 8009938:	f8bd 2000 	ldrh.w	r2, [sp]
 800993c:	2300      	movs	r3, #0
      if ((el != EE_ERASED) && (el != 0ULL) &&
 800993e:	459b      	cmp	fp, r3
 8009940:	bf08      	it	eq
 8009942:	4592      	cmpeq	sl, r2
 8009944:	d1e0      	bne.n	8009908 <EE_LoRa_ReadEl+0x1e>
          (EE_LoRa_Crc(el) == (uint16_t)el))
 8009946:	4620      	mov	r0, r4
 8009948:	4641      	mov	r1, r8
 800994a:	f7ff ff7e 	bl	800984a <EE_LoRa_Crc>
 800994e:	b2a4      	uxth	r4, r4
          (((el & 0x3FFFFFFFUL) >> 16) == addr) &&
 8009950:	42a0      	cmp	r0, r4
 8009952:	d1d9      	bne.n	8009908 <EE_LoRa_ReadEl+0x1e>
        *data = (uint32_t)(el >> 32);
 8009954:	9b03      	ldr	r3, [sp, #12]
 8009956:	f8c3 8000 	str.w	r8, [r3]
        return EE_OK;
 800995a:	4658      	mov	r0, fp
}
 800995c:	b005      	add	sp, #20
 800995e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((page == 0) || (page == pv->nb_pages))
 8009962:	9a01      	ldr	r2, [sp, #4]
 8009964:	b132      	cbz	r2, 8009974 <EE_LoRa_ReadEl+0x8a>
 8009966:	9b02      	ldr	r3, [sp, #8]
 8009968:	791b      	ldrb	r3, [r3, #4]
 800996a:	4293      	cmp	r3, r2
 800996c:	d004      	beq.n	8009978 <EE_LoRa_ReadEl+0x8e>
    page--;
 800996e:	1e53      	subs	r3, r2, #1
 8009970:	9301      	str	r3, [sp, #4]
    flash_addr = EE_FLASH_ADDR(pv, page);
 8009972:	e7c1      	b.n	80098f8 <EE_LoRa_ReadEl+0xe>
      return EE_NOT_FOUND;
 8009974:	2001      	movs	r0, #1
 8009976:	e7f1      	b.n	800995c <EE_LoRa_ReadEl+0x72>
 8009978:	2001      	movs	r0, #1
 800997a:	e7ef      	b.n	800995c <EE_LoRa_ReadEl+0x72>

0800997c <EE_LoRa_SetState>:
{
 800997c:	b508      	push	{r3, lr}
  flash_addr = EE_FLASH_ADDR(pv, page) + ((state - 1) * HW_FLASH_WIDTH);
 800997e:	6800      	ldr	r0, [r0, #0]
 8009980:	eb02 2101 	add.w	r1, r2, r1, lsl #8
 8009984:	3901      	subs	r1, #1
  if (FLASH_IF_Write64(flash_addr, EE_PROGRAMMED) != 0)
 8009986:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800998a:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800998e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8009992:	f7fd f8a5 	bl	8006ae0 <FLASH_IF_Write64>
 8009996:	b900      	cbnz	r0, 800999a <EE_LoRa_SetState+0x1e>
}
 8009998:	bd08      	pop	{r3, pc}
    return EE_WRITE_ERROR;
 800999a:	2004      	movs	r0, #4
 800999c:	e7fc      	b.n	8009998 <EE_LoRa_SetState+0x1c>
	...

080099a0 <EE_LoRa_WriteEl>:
{
 80099a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a2:	4604      	mov	r4, r0
 80099a4:	460e      	mov	r6, r1
 80099a6:	4615      	mov	r5, r2
  if (pv->next_write_offset >= HW_FLASH_PAGE_SIZE)
 80099a8:	8903      	ldrh	r3, [r0, #8]
 80099aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099ae:	d21e      	bcs.n	80099ee <EE_LoRa_WriteEl+0x4e>
  if (addr == EE_TAG)
 80099b0:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 80099b4:	d030      	beq.n	8009a18 <EE_LoRa_WriteEl+0x78>
    el = ((((uint64_t)data) << 32) | ((EE_TAG | (addr & 0x3FFFUL)) << 16));
 80099b6:	491d      	ldr	r1, [pc, #116]	; (8009a2c <EE_LoRa_WriteEl+0x8c>)
 80099b8:	ea01 4606 	and.w	r6, r1, r6, lsl #16
 80099bc:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
    el |= EE_LoRa_Crc(el);
 80099c0:	4630      	mov	r0, r6
 80099c2:	4629      	mov	r1, r5
 80099c4:	f7ff ff41 	bl	800984a <EE_LoRa_Crc>
 80099c8:	ea40 0206 	orr.w	r2, r0, r6
 80099cc:	462b      	mov	r3, r5
    EE_FLASH_ADDR(pv, pv->current_write_page) + pv->next_write_offset;
 80099ce:	6821      	ldr	r1, [r4, #0]
 80099d0:	7960      	ldrb	r0, [r4, #5]
 80099d2:	eb01 21c0 	add.w	r1, r1, r0, lsl #11
 80099d6:	8920      	ldrh	r0, [r4, #8]
  if (FLASH_IF_Write64(flash_addr, el) != 0)
 80099d8:	4408      	add	r0, r1
 80099da:	f7fd f881 	bl	8006ae0 <FLASH_IF_Write64>
 80099de:	bb10      	cbnz	r0, 8009a26 <EE_LoRa_WriteEl+0x86>
  pv->next_write_offset += HW_FLASH_WIDTH;
 80099e0:	8923      	ldrh	r3, [r4, #8]
 80099e2:	3308      	adds	r3, #8
 80099e4:	8123      	strh	r3, [r4, #8]
  pv->nb_written_elements++;
 80099e6:	88e3      	ldrh	r3, [r4, #6]
 80099e8:	3301      	adds	r3, #1
 80099ea:	80e3      	strh	r3, [r4, #6]
}
 80099ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    page = pv->current_write_page;
 80099ee:	7947      	ldrb	r7, [r0, #5]
    if (EE_LoRa_SetState(pv, page + 1, EE_LoRa_GetState(pv, page)) != EE_OK)
 80099f0:	4639      	mov	r1, r7
 80099f2:	f7ff ff19 	bl	8009828 <EE_LoRa_GetState>
 80099f6:	4602      	mov	r2, r0
 80099f8:	1c79      	adds	r1, r7, #1
 80099fa:	4620      	mov	r0, r4
 80099fc:	f7ff ffbe 	bl	800997c <EE_LoRa_SetState>
 8009a00:	b968      	cbnz	r0, 8009a1e <EE_LoRa_WriteEl+0x7e>
    if (EE_LoRa_SetState(pv, page, EE_STATE_VALID) != EE_OK)
 8009a02:	2203      	movs	r2, #3
 8009a04:	4639      	mov	r1, r7
 8009a06:	4620      	mov	r0, r4
 8009a08:	f7ff ffb8 	bl	800997c <EE_LoRa_SetState>
 8009a0c:	b948      	cbnz	r0, 8009a22 <EE_LoRa_WriteEl+0x82>
    pv->current_write_page = page + 1;
 8009a0e:	3701      	adds	r7, #1
 8009a10:	7167      	strb	r7, [r4, #5]
    pv->next_write_offset = EE_HEADER_SIZE;
 8009a12:	2320      	movs	r3, #32
 8009a14:	8123      	strh	r3, [r4, #8]
 8009a16:	e7cb      	b.n	80099b0 <EE_LoRa_WriteEl+0x10>
    el = 0ULL;
 8009a18:	2200      	movs	r2, #0
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	e7d7      	b.n	80099ce <EE_LoRa_WriteEl+0x2e>
      return EE_WRITE_ERROR;
 8009a1e:	2004      	movs	r0, #4
 8009a20:	e7e4      	b.n	80099ec <EE_LoRa_WriteEl+0x4c>
      return EE_WRITE_ERROR;
 8009a22:	2004      	movs	r0, #4
 8009a24:	e7e2      	b.n	80099ec <EE_LoRa_WriteEl+0x4c>
    return EE_WRITE_ERROR;
 8009a26:	2004      	movs	r0, #4
 8009a28:	e7e0      	b.n	80099ec <EE_LoRa_WriteEl+0x4c>
 8009a2a:	bf00      	nop
 8009a2c:	3fff0000 	.word	0x3fff0000

08009a30 <EE_LoRa_Transfer>:
{
 8009a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a34:	b082      	sub	sp, #8
 8009a36:	4605      	mov	r5, r0
 8009a38:	460e      	mov	r6, r1
    (page < pv->nb_pages) ? (2 * pv->nb_pages - 1) : (pv->nb_pages - 1);
 8009a3a:	7907      	ldrb	r7, [r0, #4]
 8009a3c:	4297      	cmp	r7, r2
 8009a3e:	d906      	bls.n	8009a4e <EE_LoRa_Transfer+0x1e>
 8009a40:	007f      	lsls	r7, r7, #1
 8009a42:	3f01      	subs	r7, #1
  if (addr != EE_TAG)
 8009a44:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8009a48:	d018      	beq.n	8009a7c <EE_LoRa_Transfer+0x4c>
    page = last_page;
 8009a4a:	463c      	mov	r4, r7
 8009a4c:	e006      	b.n	8009a5c <EE_LoRa_Transfer+0x2c>
    (page < pv->nb_pages) ? (2 * pv->nb_pages - 1) : (pv->nb_pages - 1);
 8009a4e:	3f01      	subs	r7, #1
 8009a50:	e7f8      	b.n	8009a44 <EE_LoRa_Transfer+0x14>
      if ((page == 0) || (page == pv->nb_pages))
 8009a52:	b19c      	cbz	r4, 8009a7c <EE_LoRa_Transfer+0x4c>
 8009a54:	792b      	ldrb	r3, [r5, #4]
 8009a56:	42a3      	cmp	r3, r4
 8009a58:	d010      	beq.n	8009a7c <EE_LoRa_Transfer+0x4c>
      page--;
 8009a5a:	3c01      	subs	r4, #1
      state = EE_LoRa_GetState(pv, page);
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f7ff fee2 	bl	8009828 <EE_LoRa_GetState>
      if ((state == EE_STATE_ACTIVE) || (state == EE_STATE_VALID))
 8009a64:	3802      	subs	r0, #2
 8009a66:	2801      	cmp	r0, #1
 8009a68:	d8f3      	bhi.n	8009a52 <EE_LoRa_Transfer+0x22>
        if (EE_LoRa_SetState(pv, page, EE_STATE_ERASING) != EE_OK)
 8009a6a:	2204      	movs	r2, #4
 8009a6c:	4621      	mov	r1, r4
 8009a6e:	4628      	mov	r0, r5
 8009a70:	f7ff ff84 	bl	800997c <EE_LoRa_SetState>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d0ec      	beq.n	8009a52 <EE_LoRa_Transfer+0x22>
          return EE_WRITE_ERROR;
 8009a78:	2004      	movs	r0, #4
 8009a7a:	e02c      	b.n	8009ad6 <EE_LoRa_Transfer+0xa6>
    page = last_page;
 8009a7c:	2400      	movs	r4, #0
 8009a7e:	e007      	b.n	8009a90 <EE_LoRa_Transfer+0x60>
         (EE_LoRa_ReadEl(pv, var, &data, pv->current_write_page) != EE_OK)))
 8009a80:	796b      	ldrb	r3, [r5, #5]
 8009a82:	aa01      	add	r2, sp, #4
 8009a84:	b2a1      	uxth	r1, r4
 8009a86:	4628      	mov	r0, r5
 8009a88:	f7ff ff2f 	bl	80098ea <EE_LoRa_ReadEl>
        ((addr != EE_TAG) ||
 8009a8c:	b958      	cbnz	r0, 8009aa6 <EE_LoRa_Transfer+0x76>
  for (var = 0; var < EE_NB_MAX_ELT * pv->nb_pages; var++)
 8009a8e:	3401      	adds	r4, #1
 8009a90:	792b      	ldrb	r3, [r5, #4]
 8009a92:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8009a96:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8009a9a:	d217      	bcs.n	8009acc <EE_LoRa_Transfer+0x9c>
    if ((var != addr) &&
 8009a9c:	42a6      	cmp	r6, r4
 8009a9e:	d0f6      	beq.n	8009a8e <EE_LoRa_Transfer+0x5e>
 8009aa0:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8009aa4:	d0ec      	beq.n	8009a80 <EE_LoRa_Transfer+0x50>
      if (EE_LoRa_ReadEl(pv, var, &data, last_page) == EE_OK)
 8009aa6:	fa1f f884 	uxth.w	r8, r4
 8009aaa:	463b      	mov	r3, r7
 8009aac:	aa01      	add	r2, sp, #4
 8009aae:	4641      	mov	r1, r8
 8009ab0:	4628      	mov	r0, r5
 8009ab2:	f7ff ff1a 	bl	80098ea <EE_LoRa_ReadEl>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d1e9      	bne.n	8009a8e <EE_LoRa_Transfer+0x5e>
        if (EE_LoRa_WriteEl(pv, var, data) != EE_OK)
 8009aba:	9a01      	ldr	r2, [sp, #4]
 8009abc:	4641      	mov	r1, r8
 8009abe:	4628      	mov	r0, r5
 8009ac0:	f7ff ff6e 	bl	80099a0 <EE_LoRa_WriteEl>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d0e2      	beq.n	8009a8e <EE_LoRa_Transfer+0x5e>
          return EE_WRITE_ERROR;
 8009ac8:	2004      	movs	r0, #4
 8009aca:	e004      	b.n	8009ad6 <EE_LoRa_Transfer+0xa6>
  return EE_LoRa_SetState(pv, pv->current_write_page, EE_STATE_ACTIVE);
 8009acc:	2202      	movs	r2, #2
 8009ace:	7969      	ldrb	r1, [r5, #5]
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	f7ff ff53 	bl	800997c <EE_LoRa_SetState>
}
 8009ad6:	b002      	add	sp, #8
 8009ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009adc <EE_LoRa_Recovery>:
{
 8009adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ade:	4604      	mov	r4, r0
  for (state = EE_STATE_RECEIVE; state <= EE_STATE_ACTIVE; state++)
 8009ae0:	2601      	movs	r6, #1
 8009ae2:	2e02      	cmp	r6, #2
 8009ae4:	d87a      	bhi.n	8009bdc <EE_LoRa_Recovery+0x100>
    for (page = 0; page < 2UL * pv->nb_pages; page++)
 8009ae6:	2500      	movs	r5, #0
 8009ae8:	e05e      	b.n	8009ba8 <EE_LoRa_Recovery+0xcc>
        if (EE_LoRa_GetState(pv, page + 1) != EE_STATE_ERASED)
 8009aea:	1c69      	adds	r1, r5, #1
 8009aec:	4620      	mov	r0, r4
 8009aee:	f7ff fe9b 	bl	8009828 <EE_LoRa_GetState>
 8009af2:	2800      	cmp	r0, #0
 8009af4:	d157      	bne.n	8009ba6 <EE_LoRa_Recovery+0xca>
      pv->current_write_page = page;
 8009af6:	7165      	strb	r5, [r4, #5]
      flash_addr = EE_FLASH_ADDR(pv, page) + EE_HEADER_SIZE;
 8009af8:	6821      	ldr	r1, [r4, #0]
 8009afa:	eb01 21c5 	add.w	r1, r1, r5, lsl #11
 8009afe:	3120      	adds	r1, #32
      for (i = 0; i < EE_NB_MAX_ELT; i++)
 8009b00:	2000      	movs	r0, #0
 8009b02:	28fb      	cmp	r0, #251	; 0xfb
 8009b04:	d819      	bhi.n	8009b3a <EE_LoRa_Recovery+0x5e>
        if (*EE_PTR(flash_addr) == EE_ERASED)
 8009b06:	e9d1 2300 	ldrd	r2, r3, [r1]
 8009b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0e:	bf08      	it	eq
 8009b10:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8009b14:	d011      	beq.n	8009b3a <EE_LoRa_Recovery+0x5e>
        pv->nb_written_elements++;
 8009b16:	88e3      	ldrh	r3, [r4, #6]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	80e3      	strh	r3, [r4, #6]
        pv->next_write_offset += HW_FLASH_WIDTH;
 8009b1c:	8923      	ldrh	r3, [r4, #8]
 8009b1e:	3308      	adds	r3, #8
 8009b20:	8123      	strh	r3, [r4, #8]
        flash_addr += HW_FLASH_WIDTH;
 8009b22:	3108      	adds	r1, #8
      for (i = 0; i < EE_NB_MAX_ELT; i++)
 8009b24:	3001      	adds	r0, #1
 8009b26:	e7ec      	b.n	8009b02 <EE_LoRa_Recovery+0x26>
          if (EE_LoRa_SetState(pv, page - 1, EE_STATE_VALID) != EE_OK)
 8009b28:	2203      	movs	r2, #3
 8009b2a:	4639      	mov	r1, r7
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f7ff ff25 	bl	800997c <EE_LoRa_SetState>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	d0df      	beq.n	8009af6 <EE_LoRa_Recovery+0x1a>
            return EE_WRITE_ERROR;
 8009b36:	2004      	movs	r0, #4
 8009b38:	e034      	b.n	8009ba4 <EE_LoRa_Recovery+0xc8>
      while (!((page == 0) || (page == pv->nb_pages)))
 8009b3a:	b13d      	cbz	r5, 8009b4c <EE_LoRa_Recovery+0x70>
 8009b3c:	7923      	ldrb	r3, [r4, #4]
 8009b3e:	42ab      	cmp	r3, r5
 8009b40:	d004      	beq.n	8009b4c <EE_LoRa_Recovery+0x70>
        pv->nb_written_elements += EE_NB_MAX_ELT;
 8009b42:	88e3      	ldrh	r3, [r4, #6]
 8009b44:	33fc      	adds	r3, #252	; 0xfc
 8009b46:	80e3      	strh	r3, [r4, #6]
        page--;
 8009b48:	3d01      	subs	r5, #1
 8009b4a:	e7f6      	b.n	8009b3a <EE_LoRa_Recovery+0x5e>
      if (state == EE_STATE_RECEIVE)
 8009b4c:	2e01      	cmp	r6, #1
 8009b4e:	d006      	beq.n	8009b5e <EE_LoRa_Recovery+0x82>
      first_page = EE_NEXT_POOL(pv);
 8009b50:	7963      	ldrb	r3, [r4, #5]
 8009b52:	7926      	ldrb	r6, [r4, #4]
 8009b54:	42b3      	cmp	r3, r6
 8009b56:	d300      	bcc.n	8009b5a <EE_LoRa_Recovery+0x7e>
 8009b58:	2600      	movs	r6, #0
      for (page = first_page; page < first_page + pv->nb_pages; page++)
 8009b5a:	4635      	mov	r5, r6
 8009b5c:	e00a      	b.n	8009b74 <EE_LoRa_Recovery+0x98>
        if (EE_LoRa_Transfer(pv, EE_TAG, page) != EE_OK)
 8009b5e:	462a      	mov	r2, r5
 8009b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b64:	4620      	mov	r0, r4
 8009b66:	f7ff ff63 	bl	8009a30 <EE_LoRa_Transfer>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	d0f0      	beq.n	8009b50 <EE_LoRa_Recovery+0x74>
          return EE_WRITE_ERROR;
 8009b6e:	2004      	movs	r0, #4
 8009b70:	e018      	b.n	8009ba4 <EE_LoRa_Recovery+0xc8>
      for (page = first_page; page < first_page + pv->nb_pages; page++)
 8009b72:	3501      	adds	r5, #1
 8009b74:	7923      	ldrb	r3, [r4, #4]
 8009b76:	4433      	add	r3, r6
 8009b78:	42ab      	cmp	r3, r5
 8009b7a:	d912      	bls.n	8009ba2 <EE_LoRa_Recovery+0xc6>
        if (EE_LoRa_GetState(pv, page) != EE_STATE_ERASED)
 8009b7c:	4629      	mov	r1, r5
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f7ff fe52 	bl	8009828 <EE_LoRa_GetState>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d0f4      	beq.n	8009b72 <EE_LoRa_Recovery+0x96>
          if (FLASH_IF_EraseByPages(EE_FLASH_PAGE(pv, page), 1, 0) != 0)
 8009b88:	6820      	ldr	r0, [r4, #0]
 8009b8a:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8009b8e:	2200      	movs	r2, #0
 8009b90:	2101      	movs	r1, #1
 8009b92:	eb05 20d0 	add.w	r0, r5, r0, lsr #11
 8009b96:	f7fc ffbf 	bl	8006b18 <FLASH_IF_EraseByPages>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d0e9      	beq.n	8009b72 <EE_LoRa_Recovery+0x96>
            return EE_ERASE_ERROR;
 8009b9e:	2003      	movs	r0, #3
 8009ba0:	e000      	b.n	8009ba4 <EE_LoRa_Recovery+0xc8>
      return EE_OK;
 8009ba2:	2000      	movs	r0, #0
}
 8009ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (page = 0; page < 2UL * pv->nb_pages; page++)
 8009ba6:	3501      	adds	r5, #1
 8009ba8:	7927      	ldrb	r7, [r4, #4]
 8009baa:	ebb5 0f47 	cmp.w	r5, r7, lsl #1
 8009bae:	d213      	bcs.n	8009bd8 <EE_LoRa_Recovery+0xfc>
      if (state != EE_LoRa_GetState(pv, page))
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f7ff fe38 	bl	8009828 <EE_LoRa_GetState>
 8009bb8:	42b0      	cmp	r0, r6
 8009bba:	d1f4      	bne.n	8009ba6 <EE_LoRa_Recovery+0xca>
      if ((page == 0) || (page == pv->nb_pages))
 8009bbc:	2d00      	cmp	r5, #0
 8009bbe:	d094      	beq.n	8009aea <EE_LoRa_Recovery+0xe>
 8009bc0:	42af      	cmp	r7, r5
 8009bc2:	d092      	beq.n	8009aea <EE_LoRa_Recovery+0xe>
        prev_state = EE_LoRa_GetState(pv, page - 1);
 8009bc4:	1e6f      	subs	r7, r5, #1
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f7ff fe2d 	bl	8009828 <EE_LoRa_GetState>
        if (prev_state != state)
 8009bce:	4286      	cmp	r6, r0
 8009bd0:	d0aa      	beq.n	8009b28 <EE_LoRa_Recovery+0x4c>
          if (prev_state != EE_STATE_VALID)
 8009bd2:	2803      	cmp	r0, #3
 8009bd4:	d08f      	beq.n	8009af6 <EE_LoRa_Recovery+0x1a>
 8009bd6:	e7e6      	b.n	8009ba6 <EE_LoRa_Recovery+0xca>
  for (state = EE_STATE_RECEIVE; state <= EE_STATE_ACTIVE; state++)
 8009bd8:	3601      	adds	r6, #1
 8009bda:	e782      	b.n	8009ae2 <EE_LoRa_Recovery+0x6>
  return EE_STATE_ERROR;
 8009bdc:	2005      	movs	r0, #5
 8009bde:	e7e1      	b.n	8009ba4 <EE_LoRa_Recovery+0xc8>

08009be0 <EE_LoRa_Init>:
{
 8009be0:	b510      	push	{r4, lr}
 8009be2:	4604      	mov	r4, r0
  EE_LoRa_Reset(&EE_LoRa_var[0],
 8009be4:	2201      	movs	r2, #1
 8009be6:	480d      	ldr	r0, [pc, #52]	; (8009c1c <EE_LoRa_Init+0x3c>)
 8009be8:	f7ff fe16 	bl	8009818 <EE_LoRa_Reset>
  if (format)
 8009bec:	b194      	cbz	r4, 8009c14 <EE_LoRa_Init+0x34>
      2 * (EE_LoRa_var[0].nb_pages + (CFG_EE_BANK1_SIZE ? EE_LoRa_var[1].nb_pages : 0));
 8009bee:	4b0b      	ldr	r3, [pc, #44]	; (8009c1c <EE_LoRa_Init+0x3c>)
 8009bf0:	7919      	ldrb	r1, [r3, #4]
    if (FLASH_IF_EraseByPages(EE_FLASH_PAGE(EE_LoRa_var, 0), total_nb_pages, 0) != 0)
 8009bf2:	6818      	ldr	r0, [r3, #0]
 8009bf4:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	0049      	lsls	r1, r1, #1
 8009bfc:	0ac0      	lsrs	r0, r0, #11
 8009bfe:	f7fc ff8b 	bl	8006b18 <FLASH_IF_EraseByPages>
 8009c02:	b108      	cbz	r0, 8009c08 <EE_LoRa_Init+0x28>
      return EE_ERASE_ERROR;
 8009c04:	2003      	movs	r0, #3
 8009c06:	e008      	b.n	8009c1a <EE_LoRa_Init+0x3a>
    status = EE_LoRa_SetState(&EE_LoRa_var[0], 0, EE_STATE_ACTIVE);
 8009c08:	2202      	movs	r2, #2
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	4803      	ldr	r0, [pc, #12]	; (8009c1c <EE_LoRa_Init+0x3c>)
 8009c0e:	f7ff feb5 	bl	800997c <EE_LoRa_SetState>
    return status;
 8009c12:	e002      	b.n	8009c1a <EE_LoRa_Init+0x3a>
  status = EE_LoRa_Recovery(&EE_LoRa_var[0]);
 8009c14:	4801      	ldr	r0, [pc, #4]	; (8009c1c <EE_LoRa_Init+0x3c>)
 8009c16:	f7ff ff61 	bl	8009adc <EE_LoRa_Recovery>
}
 8009c1a:	bd10      	pop	{r4, pc}
 8009c1c:	20002864 	.word	0x20002864

08009c20 <EE_LoRa_Read>:
{
 8009c20:	b508      	push	{r3, lr}
  return EE_LoRa_ReadEl(pv, addr, data, pv->current_write_page);
 8009c22:	4802      	ldr	r0, [pc, #8]	; (8009c2c <EE_LoRa_Read+0xc>)
 8009c24:	7943      	ldrb	r3, [r0, #5]
 8009c26:	f7ff fe60 	bl	80098ea <EE_LoRa_ReadEl>
}
 8009c2a:	bd08      	pop	{r3, pc}
 8009c2c:	20002864 	.word	0x20002864

08009c30 <EE_LoRa_Write>:
{
 8009c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c32:	460f      	mov	r7, r1
 8009c34:	4616      	mov	r6, r2
  if (pv->nb_written_elements < EE_NB_MAX_ELT * pv->nb_pages)
 8009c36:	4b1c      	ldr	r3, [pc, #112]	; (8009ca8 <EE_LoRa_Write+0x78>)
 8009c38:	88d8      	ldrh	r0, [r3, #6]
 8009c3a:	791b      	ldrb	r3, [r3, #4]
 8009c3c:	ebc3 1583 	rsb	r5, r3, r3, lsl #6
 8009c40:	ebb0 0f85 	cmp.w	r0, r5, lsl #2
 8009c44:	d323      	bcc.n	8009c8e <EE_LoRa_Write+0x5e>
 8009c46:	461c      	mov	r4, r3
  page = EE_NEXT_POOL(pv);
 8009c48:	4a17      	ldr	r2, [pc, #92]	; (8009ca8 <EE_LoRa_Write+0x78>)
 8009c4a:	7952      	ldrb	r2, [r2, #5]
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d800      	bhi.n	8009c52 <EE_LoRa_Write+0x22>
 8009c50:	2400      	movs	r4, #0
  if (EE_LoRa_GetState(pv, page) != EE_STATE_ERASED)
 8009c52:	4621      	mov	r1, r4
 8009c54:	4814      	ldr	r0, [pc, #80]	; (8009ca8 <EE_LoRa_Write+0x78>)
 8009c56:	f7ff fde7 	bl	8009828 <EE_LoRa_GetState>
 8009c5a:	b9e0      	cbnz	r0, 8009c96 <EE_LoRa_Write+0x66>
  if (EE_LoRa_SetState(pv, page, EE_STATE_RECEIVE) != EE_OK)
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	4621      	mov	r1, r4
 8009c60:	4811      	ldr	r0, [pc, #68]	; (8009ca8 <EE_LoRa_Write+0x78>)
 8009c62:	f7ff fe8b 	bl	800997c <EE_LoRa_SetState>
 8009c66:	b9c0      	cbnz	r0, 8009c9a <EE_LoRa_Write+0x6a>
  pv->current_write_page = page;
 8009c68:	480f      	ldr	r0, [pc, #60]	; (8009ca8 <EE_LoRa_Write+0x78>)
 8009c6a:	7144      	strb	r4, [r0, #5]
  pv->nb_written_elements = 0;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	80c3      	strh	r3, [r0, #6]
  pv->next_write_offset = EE_HEADER_SIZE;
 8009c70:	2320      	movs	r3, #32
 8009c72:	8103      	strh	r3, [r0, #8]
  if (EE_LoRa_WriteEl(pv, addr, data) != EE_OK)
 8009c74:	4632      	mov	r2, r6
 8009c76:	4639      	mov	r1, r7
 8009c78:	f7ff fe92 	bl	80099a0 <EE_LoRa_WriteEl>
 8009c7c:	b978      	cbnz	r0, 8009c9e <EE_LoRa_Write+0x6e>
  if (EE_LoRa_Transfer(pv, addr, page) != EE_OK)
 8009c7e:	4622      	mov	r2, r4
 8009c80:	4639      	mov	r1, r7
 8009c82:	4809      	ldr	r0, [pc, #36]	; (8009ca8 <EE_LoRa_Write+0x78>)
 8009c84:	f7ff fed4 	bl	8009a30 <EE_LoRa_Transfer>
 8009c88:	b958      	cbnz	r0, 8009ca2 <EE_LoRa_Write+0x72>
  return EE_CLEAN_NEEDED;
 8009c8a:	2002      	movs	r0, #2
 8009c8c:	e004      	b.n	8009c98 <EE_LoRa_Write+0x68>
    return EE_LoRa_WriteEl(pv, addr, data);
 8009c8e:	4806      	ldr	r0, [pc, #24]	; (8009ca8 <EE_LoRa_Write+0x78>)
 8009c90:	f7ff fe86 	bl	80099a0 <EE_LoRa_WriteEl>
 8009c94:	e000      	b.n	8009c98 <EE_LoRa_Write+0x68>
    return EE_STATE_ERROR;
 8009c96:	2005      	movs	r0, #5
}
 8009c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return EE_WRITE_ERROR;
 8009c9a:	2004      	movs	r0, #4
 8009c9c:	e7fc      	b.n	8009c98 <EE_LoRa_Write+0x68>
    return EE_WRITE_ERROR;
 8009c9e:	2004      	movs	r0, #4
 8009ca0:	e7fa      	b.n	8009c98 <EE_LoRa_Write+0x68>
    return EE_WRITE_ERROR;
 8009ca2:	2004      	movs	r0, #4
 8009ca4:	e7f8      	b.n	8009c98 <EE_LoRa_Write+0x68>
 8009ca6:	bf00      	nop
 8009ca8:	20002864 	.word	0x20002864

08009cac <EE_LoRa_Clean>:
{
 8009cac:	b570      	push	{r4, r5, r6, lr}
 8009cae:	460e      	mov	r6, r1
  page = EE_NEXT_POOL(pv);
 8009cb0:	4b0e      	ldr	r3, [pc, #56]	; (8009cec <EE_LoRa_Clean+0x40>)
 8009cb2:	795a      	ldrb	r2, [r3, #5]
 8009cb4:	791c      	ldrb	r4, [r3, #4]
 8009cb6:	42a2      	cmp	r2, r4
 8009cb8:	d208      	bcs.n	8009ccc <EE_LoRa_Clean+0x20>
 8009cba:	4625      	mov	r5, r4
  if (EE_LoRa_GetState(pv, page) != EE_STATE_ERASING)
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	480b      	ldr	r0, [pc, #44]	; (8009cec <EE_LoRa_Clean+0x40>)
 8009cc0:	f7ff fdb2 	bl	8009828 <EE_LoRa_GetState>
 8009cc4:	2804      	cmp	r0, #4
 8009cc6:	d003      	beq.n	8009cd0 <EE_LoRa_Clean+0x24>
    return EE_STATE_ERROR;
 8009cc8:	2005      	movs	r0, #5
}
 8009cca:	bd70      	pop	{r4, r5, r6, pc}
  page = EE_NEXT_POOL(pv);
 8009ccc:	2500      	movs	r5, #0
 8009cce:	e7f5      	b.n	8009cbc <EE_LoRa_Clean+0x10>
  if (FLASH_IF_EraseByPages(EE_FLASH_PAGE(pv, page), pv->nb_pages, interrupt)
 8009cd0:	4b06      	ldr	r3, [pc, #24]	; (8009cec <EE_LoRa_Clean+0x40>)
 8009cd2:	6818      	ldr	r0, [r3, #0]
 8009cd4:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8009cd8:	4632      	mov	r2, r6
 8009cda:	4621      	mov	r1, r4
 8009cdc:	eb05 20d0 	add.w	r0, r5, r0, lsr #11
 8009ce0:	f7fc ff1a 	bl	8006b18 <FLASH_IF_EraseByPages>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d0f0      	beq.n	8009cca <EE_LoRa_Clean+0x1e>
    return EE_ERASE_ERROR;
 8009ce8:	2003      	movs	r0, #3
 8009cea:	e7ee      	b.n	8009cca <EE_LoRa_Clean+0x1e>
 8009cec:	20002864 	.word	0x20002864

08009cf0 <E2P_LORA_Write>:
}


/* Private Functions Definition -----------------------------------------------*/
void E2P_LORA_Write(e_EE_LORA_ID addr, uint32_t data)
{
 8009cf0:	b508      	push	{r3, lr}
 8009cf2:	460a      	mov	r2, r1
  /* USER CODE BEGIN E2P_Write_1 */

  /* USER CODE END E2P_Write_1 */
  if (EE_LoRa_Write(EE_BANK_0, (uint16_t) addr, data) == EE_CLEAN_NEEDED)
 8009cf4:	4601      	mov	r1, r0
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	f7ff ff9a 	bl	8009c30 <EE_LoRa_Write>
 8009cfc:	2802      	cmp	r0, #2
 8009cfe:	d000      	beq.n	8009d02 <E2P_LORA_Write+0x12>
    EE_LoRa_Clean(EE_BANK_0, EE_CLEAN_MODE_POLLING);
  }
  /* USER CODE BEGIN E2P_Write_2 */

  /* USER CODE END E2P_Write_2 */
}
 8009d00:	bd08      	pop	{r3, pc}
    EE_LoRa_Clean(EE_BANK_0, EE_CLEAN_MODE_POLLING);
 8009d02:	2100      	movs	r1, #0
 8009d04:	4608      	mov	r0, r1
 8009d06:	f7ff ffd1 	bl	8009cac <EE_LoRa_Clean>
}
 8009d0a:	e7f9      	b.n	8009d00 <E2P_LORA_Write+0x10>

08009d0c <E2P_LORA_RestoreFs>:
{
 8009d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_FLASH_Unlock();
 8009d0e:	f005 fb49 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_LORA_Write(EE_LORA_TYPE_ID, 2);							// 0: NONE 		1:ABP		2: OTAA 
 8009d12:	2102      	movs	r1, #2
 8009d14:	2001      	movs	r0, #1
 8009d16:	f7ff ffeb 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_CLASS_ID, 0);							// 0: CLASS_A 	1:CLASS_B	2: CLASS_C 
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	2002      	movs	r0, #2
 8009d1e:	f7ff ffe7 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD0_APPKEY_ID, LORA_APPKEY_WORD_0);
 8009d22:	4f2c      	ldr	r7, [pc, #176]	; (8009dd4 <E2P_LORA_RestoreFs+0xc8>)
 8009d24:	4639      	mov	r1, r7
 8009d26:	2004      	movs	r0, #4
 8009d28:	f7ff ffe2 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD1_APPKEY_ID, LORA_APPKEY_WORD_1);
 8009d2c:	4e2a      	ldr	r6, [pc, #168]	; (8009dd8 <E2P_LORA_RestoreFs+0xcc>)
 8009d2e:	4631      	mov	r1, r6
 8009d30:	2005      	movs	r0, #5
 8009d32:	f7ff ffdd 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD2_APPKEY_ID, LORA_APPKEY_WORD_2);
 8009d36:	4d29      	ldr	r5, [pc, #164]	; (8009ddc <E2P_LORA_RestoreFs+0xd0>)
 8009d38:	4629      	mov	r1, r5
 8009d3a:	2006      	movs	r0, #6
 8009d3c:	f7ff ffd8 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD3_APPKEY_ID, LORA_APPKEY_WORD_3);
 8009d40:	4c27      	ldr	r4, [pc, #156]	; (8009de0 <E2P_LORA_RestoreFs+0xd4>)
 8009d42:	4621      	mov	r1, r4
 8009d44:	2007      	movs	r0, #7
 8009d46:	f7ff ffd3 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD0_NWKKEY_ID, LORA_NWKKEY_WORD_0);
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	2008      	movs	r0, #8
 8009d4e:	f7ff ffcf 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD1_NWKKEY_ID, LORA_NWKKEY_WORD_1);
 8009d52:	4631      	mov	r1, r6
 8009d54:	2009      	movs	r0, #9
 8009d56:	f7ff ffcb 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD2_NWKKEY_ID, LORA_NWKKEY_WORD_2);
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	200a      	movs	r0, #10
 8009d5e:	f7ff ffc7 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD3_NWKKEY_ID, LORA_NWKKEY_WORD_3);
 8009d62:	4621      	mov	r1, r4
 8009d64:	200b      	movs	r0, #11
 8009d66:	f7ff ffc3 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD0_APPSKEY_ID, LORA_APPSKEY_WORD_0);
 8009d6a:	4639      	mov	r1, r7
 8009d6c:	200c      	movs	r0, #12
 8009d6e:	f7ff ffbf 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD1_APPSKEY_ID, LORA_APPSKEY_WORD_1);
 8009d72:	4631      	mov	r1, r6
 8009d74:	200d      	movs	r0, #13
 8009d76:	f7ff ffbb 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD2_APPSKEY_ID, LORA_APPSKEY_WORD_2);
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	200e      	movs	r0, #14
 8009d7e:	f7ff ffb7 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD3_APPSKEY_ID, LORA_APPSKEY_WORD_3);
 8009d82:	4621      	mov	r1, r4
 8009d84:	200f      	movs	r0, #15
 8009d86:	f7ff ffb3 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD0_NWKSKEY_ID, LORA_NWKSKEY_WORD_0);
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	2010      	movs	r0, #16
 8009d8e:	f7ff ffaf 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD1_NWKSKEY_ID, LORA_NWKSKEY_WORD_1);
 8009d92:	4631      	mov	r1, r6
 8009d94:	2011      	movs	r0, #17
 8009d96:	f7ff ffab 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD2_NWKSKEY_ID, LORA_NWKSKEY_WORD_2);
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	2012      	movs	r0, #18
 8009d9e:	f7ff ffa7 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD3_NWKSKEY_ID, LORA_NWKSKEY_WORD_3);
 8009da2:	4621      	mov	r1, r4
 8009da4:	2013      	movs	r0, #19
 8009da6:	f7ff ffa3 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD0_APPEUI_ID, LORA_APPEUI_WORD_0);
 8009daa:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
 8009dae:	2014      	movs	r0, #20
 8009db0:	f7ff ff9e 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD1_APPEUI_ID, LORA_APPEUI_WORD_1);
 8009db4:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
 8009db8:	2015      	movs	r0, #21
 8009dba:	f7ff ff99 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_MODE_ID, 1);					  		//  0: Disable	  	1: enable
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	2016      	movs	r0, #22
 8009dc2:	f7ff ff95 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_FW_MODE_ID, 0);			  	//  0: HIGH/LOW		1: LOW		  2: HIGH
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	2017      	movs	r0, #23
 8009dca:	f7ff ff91 	bl	8009cf0 <E2P_LORA_Write>
  HAL_FLASH_Lock();
 8009dce:	f005 fb01 	bl	800f3d4 <HAL_FLASH_Lock>
}
 8009dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dd4:	2b7e1516 	.word	0x2b7e1516
 8009dd8:	28aed2a6 	.word	0x28aed2a6
 8009ddc:	abf71588 	.word	0xabf71588
 8009de0:	09cf4f3c 	.word	0x09cf4f3c

08009de4 <E2P_LORA_Init>:
{
 8009de4:	b508      	push	{r3, lr}
  HAL_FLASH_Unlock();
 8009de6:	f005 fadd 	bl	800f3a4 <HAL_FLASH_Unlock>
  if (EE_LoRa_Init(NO_FORMAT, EE_LORA_BASE_ADRESS) != EE_OK)
 8009dea:	4909      	ldr	r1, [pc, #36]	; (8009e10 <E2P_LORA_Init+0x2c>)
 8009dec:	2000      	movs	r0, #0
 8009dee:	f7ff fef7 	bl	8009be0 <EE_LoRa_Init>
 8009df2:	b910      	cbnz	r0, 8009dfa <E2P_LORA_Init+0x16>
  HAL_FLASH_Lock();
 8009df4:	f005 faee 	bl	800f3d4 <HAL_FLASH_Lock>
}
 8009df8:	bd08      	pop	{r3, pc}
    if (EE_LoRa_Init(FORMAT, EE_LORA_BASE_ADRESS) == EE_OK)
 8009dfa:	4905      	ldr	r1, [pc, #20]	; (8009e10 <E2P_LORA_Init+0x2c>)
 8009dfc:	2001      	movs	r0, #1
 8009dfe:	f7ff feef 	bl	8009be0 <EE_LoRa_Init>
 8009e02:	b910      	cbnz	r0, 8009e0a <E2P_LORA_Init+0x26>
      E2P_LORA_RestoreFs();
 8009e04:	f7ff ff82 	bl	8009d0c <E2P_LORA_RestoreFs>
 8009e08:	e7f4      	b.n	8009df4 <E2P_LORA_Init+0x10>
      Error_Handler();
 8009e0a:	f7fc feff 	bl	8006c0c <Error_Handler>
 8009e0e:	e7f1      	b.n	8009df4 <E2P_LORA_Init+0x10>
 8009e10:	0803a000 	.word	0x0803a000

08009e14 <E2P_LORA_Write_Class>:
{
 8009e14:	b510      	push	{r4, lr}
 8009e16:	4604      	mov	r4, r0
  HAL_FLASH_Unlock();
 8009e18:	f005 fac4 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_LORA_Write(EE_LORA_CLASS_ID, (uint32_t)Class);
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	2002      	movs	r0, #2
 8009e20:	f7ff ff66 	bl	8009cf0 <E2P_LORA_Write>
  HAL_FLASH_Lock();
 8009e24:	f005 fad6 	bl	800f3d4 <HAL_FLASH_Lock>
}
 8009e28:	bd10      	pop	{r4, pc}

08009e2a <E2P_LORA_Write_Type>:
{
 8009e2a:	b510      	push	{r4, lr}
 8009e2c:	4604      	mov	r4, r0
  HAL_FLASH_Unlock();
 8009e2e:	f005 fab9 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_LORA_Write(EE_LORA_TYPE_ID, (uint32_t)Type);
 8009e32:	4621      	mov	r1, r4
 8009e34:	2001      	movs	r0, #1
 8009e36:	f7ff ff5b 	bl	8009cf0 <E2P_LORA_Write>
  HAL_FLASH_Lock();
 8009e3a:	f005 facb 	bl	800f3d4 <HAL_FLASH_Lock>
}
 8009e3e:	bd10      	pop	{r4, pc}

08009e40 <E2P_LORA_Write_Mode>:
{
 8009e40:	b510      	push	{r4, lr}
 8009e42:	4604      	mov	r4, r0
  HAL_FLASH_Unlock();
 8009e44:	f005 faae 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_LORA_Write(EE_LORA_MODE_ID, (uint32_t) LoRaMode);
 8009e48:	4621      	mov	r1, r4
 8009e4a:	2016      	movs	r0, #22
 8009e4c:	f7ff ff50 	bl	8009cf0 <E2P_LORA_Write>
  HAL_FLASH_Lock();
 8009e50:	f005 fac0 	bl	800f3d4 <HAL_FLASH_Lock>
}
 8009e54:	bd10      	pop	{r4, pc}

08009e56 <E2P_LORA_FW_Write_Mode>:
{
 8009e56:	b510      	push	{r4, lr}
 8009e58:	4604      	mov	r4, r0
  HAL_FLASH_Unlock();
 8009e5a:	f005 faa3 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_LORA_Write(EE_LORA_FW_MODE_ID, (uint32_t) LoRaMode);
 8009e5e:	4621      	mov	r1, r4
 8009e60:	2017      	movs	r0, #23
 8009e62:	f7ff ff45 	bl	8009cf0 <E2P_LORA_Write>
  HAL_FLASH_Lock();
 8009e66:	f005 fab5 	bl	800f3d4 <HAL_FLASH_Lock>
}
 8009e6a:	bd10      	pop	{r4, pc}

08009e6c <E2P_LORA_Write_Network_Type>:
{
 8009e6c:	b510      	push	{r4, lr}
 8009e6e:	4604      	mov	r4, r0
  HAL_FLASH_Unlock();
 8009e70:	f005 fa98 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_LORA_Write(EE_LORA_NETWORK_TYPE_ID, (uint32_t) NetworkType);
 8009e74:	4621      	mov	r1, r4
 8009e76:	2003      	movs	r0, #3
 8009e78:	f7ff ff3a 	bl	8009cf0 <E2P_LORA_Write>
  HAL_FLASH_Lock();
 8009e7c:	f005 faaa 	bl	800f3d4 <HAL_FLASH_Lock>
}
 8009e80:	bd10      	pop	{r4, pc}

08009e82 <E2P_LORA_Write_Appeui>:
{
 8009e82:	b510      	push	{r4, lr}
 8009e84:	b084      	sub	sp, #16
 8009e86:	4604      	mov	r4, r0
  memset1(WappEui, 0, sizeof(WappEui));
 8009e88:	2208      	movs	r2, #8
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	4668      	mov	r0, sp
 8009e8e:	f016 f830 	bl	801fef2 <memset1>
  memcpy1(WappEui, pWappEui, sizeof(WappEui));
 8009e92:	2208      	movs	r2, #8
 8009e94:	4621      	mov	r1, r4
 8009e96:	4668      	mov	r0, sp
 8009e98:	f016 f815 	bl	801fec6 <memcpy1>
  for(int i = 0; i < 2; i++)
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	e01a      	b.n	8009ed6 <E2P_LORA_Write_Appeui+0x54>
  	config_words[i] = (lora_u32) (WappEui[i*4+3] + (WappEui[i*4+2] << 8) + (WappEui[i*4+1] << 16) + (WappEui[i*4+0] << 24));
 8009ea0:	008b      	lsls	r3, r1, #2
 8009ea2:	1cda      	adds	r2, r3, #3
 8009ea4:	a804      	add	r0, sp, #16
 8009ea6:	4402      	add	r2, r0
 8009ea8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8009eac:	1c98      	adds	r0, r3, #2
 8009eae:	ac04      	add	r4, sp, #16
 8009eb0:	4420      	add	r0, r4
 8009eb2:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8009eb6:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8009eba:	1c58      	adds	r0, r3, #1
 8009ebc:	4420      	add	r0, r4
 8009ebe:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8009ec2:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 8009ec6:	4423      	add	r3, r4
 8009ec8:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 8009ecc:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 8009ed0:	f843 2c08 	str.w	r2, [r3, #-8]
  for(int i = 0; i < 2; i++)
 8009ed4:	3101      	adds	r1, #1
 8009ed6:	2901      	cmp	r1, #1
 8009ed8:	dde2      	ble.n	8009ea0 <E2P_LORA_Write_Appeui+0x1e>
  HAL_FLASH_Unlock();
 8009eda:	f005 fa63 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_LORA_Write(EE_LORA_WORD0_APPEUI_ID, config_words[0]);
 8009ede:	9902      	ldr	r1, [sp, #8]
 8009ee0:	2014      	movs	r0, #20
 8009ee2:	f7ff ff05 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD1_APPEUI_ID, config_words[1]);
 8009ee6:	9903      	ldr	r1, [sp, #12]
 8009ee8:	2015      	movs	r0, #21
 8009eea:	f7ff ff01 	bl	8009cf0 <E2P_LORA_Write>
  HAL_FLASH_Lock();
 8009eee:	f005 fa71 	bl	800f3d4 <HAL_FLASH_Lock>
}
 8009ef2:	b004      	add	sp, #16
 8009ef4:	bd10      	pop	{r4, pc}

08009ef6 <E2P_LORA_Write_Appkey>:
{
 8009ef6:	b510      	push	{r4, lr}
 8009ef8:	b088      	sub	sp, #32
 8009efa:	4604      	mov	r4, r0
  memset1(WappKey, 0, sizeof(WappKey));
 8009efc:	2210      	movs	r2, #16
 8009efe:	2100      	movs	r1, #0
 8009f00:	4668      	mov	r0, sp
 8009f02:	f015 fff6 	bl	801fef2 <memset1>
  memcpy1(WappKey, pWappKey, sizeof(WappKey));
 8009f06:	2210      	movs	r2, #16
 8009f08:	4621      	mov	r1, r4
 8009f0a:	4668      	mov	r0, sp
 8009f0c:	f015 ffdb 	bl	801fec6 <memcpy1>
  for(int i = 0; i < 4; i++)
 8009f10:	2100      	movs	r1, #0
 8009f12:	e01a      	b.n	8009f4a <E2P_LORA_Write_Appkey+0x54>
  	config_words[i] = (lora_u32) (WappKey[i*4+3] + (WappKey[i*4+2] << 8) + (WappKey[i*4+1] << 16) + (WappKey[i*4+0] << 24));
 8009f14:	008b      	lsls	r3, r1, #2
 8009f16:	1cda      	adds	r2, r3, #3
 8009f18:	a808      	add	r0, sp, #32
 8009f1a:	4402      	add	r2, r0
 8009f1c:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8009f20:	1c98      	adds	r0, r3, #2
 8009f22:	ac08      	add	r4, sp, #32
 8009f24:	4420      	add	r0, r4
 8009f26:	f810 0c20 	ldrb.w	r0, [r0, #-32]
 8009f2a:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8009f2e:	1c58      	adds	r0, r3, #1
 8009f30:	4420      	add	r0, r4
 8009f32:	f810 0c20 	ldrb.w	r0, [r0, #-32]
 8009f36:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 8009f3a:	4423      	add	r3, r4
 8009f3c:	f813 0c20 	ldrb.w	r0, [r3, #-32]
 8009f40:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 8009f44:	f843 2c10 	str.w	r2, [r3, #-16]
  for(int i = 0; i < 4; i++)
 8009f48:	3101      	adds	r1, #1
 8009f4a:	2903      	cmp	r1, #3
 8009f4c:	dde2      	ble.n	8009f14 <E2P_LORA_Write_Appkey+0x1e>
  HAL_FLASH_Unlock();
 8009f4e:	f005 fa29 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_LORA_Write(EE_LORA_WORD0_APPKEY_ID, config_words[0]);
 8009f52:	9904      	ldr	r1, [sp, #16]
 8009f54:	2004      	movs	r0, #4
 8009f56:	f7ff fecb 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD1_APPKEY_ID, config_words[1]);
 8009f5a:	9905      	ldr	r1, [sp, #20]
 8009f5c:	2005      	movs	r0, #5
 8009f5e:	f7ff fec7 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD2_APPKEY_ID, config_words[2]);
 8009f62:	9906      	ldr	r1, [sp, #24]
 8009f64:	2006      	movs	r0, #6
 8009f66:	f7ff fec3 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD3_APPKEY_ID, config_words[3]);
 8009f6a:	9907      	ldr	r1, [sp, #28]
 8009f6c:	2007      	movs	r0, #7
 8009f6e:	f7ff febf 	bl	8009cf0 <E2P_LORA_Write>
  HAL_FLASH_Lock();
 8009f72:	f005 fa2f 	bl	800f3d4 <HAL_FLASH_Lock>
}
 8009f76:	b008      	add	sp, #32
 8009f78:	bd10      	pop	{r4, pc}

08009f7a <E2P_LORA_Write_Nwkkey>:
{
 8009f7a:	b510      	push	{r4, lr}
 8009f7c:	b088      	sub	sp, #32
 8009f7e:	4604      	mov	r4, r0
  memset1(WnwkKey, 0, sizeof(WnwkKey));
 8009f80:	2210      	movs	r2, #16
 8009f82:	2100      	movs	r1, #0
 8009f84:	4668      	mov	r0, sp
 8009f86:	f015 ffb4 	bl	801fef2 <memset1>
  memcpy1(WnwkKey, pWnwkKey, sizeof(WnwkKey));
 8009f8a:	2210      	movs	r2, #16
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	4668      	mov	r0, sp
 8009f90:	f015 ff99 	bl	801fec6 <memcpy1>
  for(int i = 0; i < 4; i++)
 8009f94:	2100      	movs	r1, #0
 8009f96:	e01a      	b.n	8009fce <E2P_LORA_Write_Nwkkey+0x54>
  	config_words[i] = (lora_u32) (WnwkKey[i*4+3] + (WnwkKey[i*4+2] << 8) + (WnwkKey[i*4+1] << 16) + (WnwkKey[i*4+0] << 24));
 8009f98:	008b      	lsls	r3, r1, #2
 8009f9a:	1cda      	adds	r2, r3, #3
 8009f9c:	a808      	add	r0, sp, #32
 8009f9e:	4402      	add	r2, r0
 8009fa0:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8009fa4:	1c98      	adds	r0, r3, #2
 8009fa6:	ac08      	add	r4, sp, #32
 8009fa8:	4420      	add	r0, r4
 8009faa:	f810 0c20 	ldrb.w	r0, [r0, #-32]
 8009fae:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8009fb2:	1c58      	adds	r0, r3, #1
 8009fb4:	4420      	add	r0, r4
 8009fb6:	f810 0c20 	ldrb.w	r0, [r0, #-32]
 8009fba:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 8009fbe:	4423      	add	r3, r4
 8009fc0:	f813 0c20 	ldrb.w	r0, [r3, #-32]
 8009fc4:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 8009fc8:	f843 2c10 	str.w	r2, [r3, #-16]
  for(int i = 0; i < 4; i++)
 8009fcc:	3101      	adds	r1, #1
 8009fce:	2903      	cmp	r1, #3
 8009fd0:	dde2      	ble.n	8009f98 <E2P_LORA_Write_Nwkkey+0x1e>
  HAL_FLASH_Unlock();
 8009fd2:	f005 f9e7 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_LORA_Write(EE_LORA_WORD0_NWKKEY_ID, config_words[0]);
 8009fd6:	9904      	ldr	r1, [sp, #16]
 8009fd8:	2008      	movs	r0, #8
 8009fda:	f7ff fe89 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD1_NWKKEY_ID, config_words[1]);
 8009fde:	9905      	ldr	r1, [sp, #20]
 8009fe0:	2009      	movs	r0, #9
 8009fe2:	f7ff fe85 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD2_NWKKEY_ID, config_words[2]);
 8009fe6:	9906      	ldr	r1, [sp, #24]
 8009fe8:	200a      	movs	r0, #10
 8009fea:	f7ff fe81 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD3_NWKKEY_ID, config_words[3]);
 8009fee:	9907      	ldr	r1, [sp, #28]
 8009ff0:	200b      	movs	r0, #11
 8009ff2:	f7ff fe7d 	bl	8009cf0 <E2P_LORA_Write>
  HAL_FLASH_Lock();
 8009ff6:	f005 f9ed 	bl	800f3d4 <HAL_FLASH_Lock>
}
 8009ffa:	b008      	add	sp, #32
 8009ffc:	bd10      	pop	{r4, pc}

08009ffe <E2P_LORA_Write_App_S_key>:
{
 8009ffe:	b510      	push	{r4, lr}
 800a000:	b088      	sub	sp, #32
 800a002:	4604      	mov	r4, r0
  memset1(WappSKey, 0, sizeof(WappSKey));
 800a004:	2210      	movs	r2, #16
 800a006:	2100      	movs	r1, #0
 800a008:	4668      	mov	r0, sp
 800a00a:	f015 ff72 	bl	801fef2 <memset1>
  memcpy1(WappSKey, pWappSKey, sizeof(WappSKey));
 800a00e:	2210      	movs	r2, #16
 800a010:	4621      	mov	r1, r4
 800a012:	4668      	mov	r0, sp
 800a014:	f015 ff57 	bl	801fec6 <memcpy1>
  for(int i = 0; i < 4; i++)
 800a018:	2100      	movs	r1, #0
 800a01a:	e01a      	b.n	800a052 <E2P_LORA_Write_App_S_key+0x54>
  	config_words[i] = (lora_u32) (WappSKey[i*4+3] + (WappSKey[i*4+2] << 8) + (WappSKey[i*4+1] << 16) + (WappSKey[i*4+0] << 24));
 800a01c:	008b      	lsls	r3, r1, #2
 800a01e:	1cda      	adds	r2, r3, #3
 800a020:	a808      	add	r0, sp, #32
 800a022:	4402      	add	r2, r0
 800a024:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 800a028:	1c98      	adds	r0, r3, #2
 800a02a:	ac08      	add	r4, sp, #32
 800a02c:	4420      	add	r0, r4
 800a02e:	f810 0c20 	ldrb.w	r0, [r0, #-32]
 800a032:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 800a036:	1c58      	adds	r0, r3, #1
 800a038:	4420      	add	r0, r4
 800a03a:	f810 0c20 	ldrb.w	r0, [r0, #-32]
 800a03e:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 800a042:	4423      	add	r3, r4
 800a044:	f813 0c20 	ldrb.w	r0, [r3, #-32]
 800a048:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 800a04c:	f843 2c10 	str.w	r2, [r3, #-16]
  for(int i = 0; i < 4; i++)
 800a050:	3101      	adds	r1, #1
 800a052:	2903      	cmp	r1, #3
 800a054:	dde2      	ble.n	800a01c <E2P_LORA_Write_App_S_key+0x1e>
  HAL_FLASH_Unlock();
 800a056:	f005 f9a5 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_LORA_Write(EE_LORA_WORD0_APPSKEY_ID, config_words[0]);
 800a05a:	9904      	ldr	r1, [sp, #16]
 800a05c:	200c      	movs	r0, #12
 800a05e:	f7ff fe47 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD1_APPSKEY_ID, config_words[1]);
 800a062:	9905      	ldr	r1, [sp, #20]
 800a064:	200d      	movs	r0, #13
 800a066:	f7ff fe43 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD2_APPSKEY_ID, config_words[2]);
 800a06a:	9906      	ldr	r1, [sp, #24]
 800a06c:	200e      	movs	r0, #14
 800a06e:	f7ff fe3f 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD3_APPSKEY_ID, config_words[3]);
 800a072:	9907      	ldr	r1, [sp, #28]
 800a074:	200f      	movs	r0, #15
 800a076:	f7ff fe3b 	bl	8009cf0 <E2P_LORA_Write>
  HAL_FLASH_Lock();
 800a07a:	f005 f9ab 	bl	800f3d4 <HAL_FLASH_Lock>
}
 800a07e:	b008      	add	sp, #32
 800a080:	bd10      	pop	{r4, pc}

0800a082 <E2P_LORA_Write_Nwk_S_key>:
{
 800a082:	b510      	push	{r4, lr}
 800a084:	b088      	sub	sp, #32
 800a086:	4604      	mov	r4, r0
  memset1(WnwkSKey, 0, sizeof(WnwkSKey));
 800a088:	2210      	movs	r2, #16
 800a08a:	2100      	movs	r1, #0
 800a08c:	4668      	mov	r0, sp
 800a08e:	f015 ff30 	bl	801fef2 <memset1>
  memcpy1(WnwkSKey, pWnwkSKey, sizeof(WnwkSKey));
 800a092:	2210      	movs	r2, #16
 800a094:	4621      	mov	r1, r4
 800a096:	4668      	mov	r0, sp
 800a098:	f015 ff15 	bl	801fec6 <memcpy1>
  for(int i = 0; i < 4; i++)
 800a09c:	2100      	movs	r1, #0
 800a09e:	e01a      	b.n	800a0d6 <E2P_LORA_Write_Nwk_S_key+0x54>
  	config_words[i] = (lora_u32) (WnwkSKey[i*4+3] + (WnwkSKey[i*4+2] << 8) + (WnwkSKey[i*4+1] << 16) + (WnwkSKey[i*4+0] << 24));
 800a0a0:	008b      	lsls	r3, r1, #2
 800a0a2:	1cda      	adds	r2, r3, #3
 800a0a4:	a808      	add	r0, sp, #32
 800a0a6:	4402      	add	r2, r0
 800a0a8:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 800a0ac:	1c98      	adds	r0, r3, #2
 800a0ae:	ac08      	add	r4, sp, #32
 800a0b0:	4420      	add	r0, r4
 800a0b2:	f810 0c20 	ldrb.w	r0, [r0, #-32]
 800a0b6:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 800a0ba:	1c58      	adds	r0, r3, #1
 800a0bc:	4420      	add	r0, r4
 800a0be:	f810 0c20 	ldrb.w	r0, [r0, #-32]
 800a0c2:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 800a0c6:	4423      	add	r3, r4
 800a0c8:	f813 0c20 	ldrb.w	r0, [r3, #-32]
 800a0cc:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 800a0d0:	f843 2c10 	str.w	r2, [r3, #-16]
  for(int i = 0; i < 4; i++)
 800a0d4:	3101      	adds	r1, #1
 800a0d6:	2903      	cmp	r1, #3
 800a0d8:	dde2      	ble.n	800a0a0 <E2P_LORA_Write_Nwk_S_key+0x1e>
  HAL_FLASH_Unlock();
 800a0da:	f005 f963 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_LORA_Write(EE_LORA_WORD0_NWKSKEY_ID, config_words[0]);
 800a0de:	9904      	ldr	r1, [sp, #16]
 800a0e0:	2010      	movs	r0, #16
 800a0e2:	f7ff fe05 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD1_NWKSKEY_ID, config_words[1]);
 800a0e6:	9905      	ldr	r1, [sp, #20]
 800a0e8:	2011      	movs	r0, #17
 800a0ea:	f7ff fe01 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD2_NWKSKEY_ID, config_words[2]);
 800a0ee:	9906      	ldr	r1, [sp, #24]
 800a0f0:	2012      	movs	r0, #18
 800a0f2:	f7ff fdfd 	bl	8009cf0 <E2P_LORA_Write>
  E2P_LORA_Write(EE_LORA_WORD3_NWKSKEY_ID, config_words[3]);
 800a0f6:	9907      	ldr	r1, [sp, #28]
 800a0f8:	2013      	movs	r0, #19
 800a0fa:	f7ff fdf9 	bl	8009cf0 <E2P_LORA_Write>
  HAL_FLASH_Lock();
 800a0fe:	f005 f969 	bl	800f3d4 <HAL_FLASH_Lock>
}
 800a102:	b008      	add	sp, #32
 800a104:	bd10      	pop	{r4, pc}

0800a106 <E2P_LORA_Read>:

void E2P_LORA_Read(e_EE_LORA_ID addr, uint32_t *data)
{
 800a106:	b508      	push	{r3, lr}
 800a108:	460a      	mov	r2, r1
  /* USER CODE BEGIN E2P_Read_1 */

  /* USER CODE END E2P_Read_1 */
  EE_LoRa_Read(EE_BANK_0, (uint16_t) addr, data);
 800a10a:	4601      	mov	r1, r0
 800a10c:	2000      	movs	r0, #0
 800a10e:	f7ff fd87 	bl	8009c20 <EE_LoRa_Read>
  /* USER CODE BEGIN E2P_Read_2 */

  /* USER CODE END E2P_Read_2 */
}
 800a112:	bd08      	pop	{r3, pc}

0800a114 <E2P_LORA_Read_Class>:
{
 800a114:	b500      	push	{lr}
 800a116:	b083      	sub	sp, #12
  uint32_t Class = 0 ;
 800a118:	2300      	movs	r3, #0
 800a11a:	9301      	str	r3, [sp, #4]
  E2P_LORA_Read(EE_LORA_CLASS_ID, &Class);
 800a11c:	a901      	add	r1, sp, #4
 800a11e:	2002      	movs	r0, #2
 800a120:	f7ff fff1 	bl	800a106 <E2P_LORA_Read>
}
 800a124:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800a128:	b003      	add	sp, #12
 800a12a:	f85d fb04 	ldr.w	pc, [sp], #4

0800a12e <E2P_LORA_Read_Type>:
{
 800a12e:	b500      	push	{lr}
 800a130:	b083      	sub	sp, #12
  uint32_t Type = 0 ;
 800a132:	2300      	movs	r3, #0
 800a134:	9301      	str	r3, [sp, #4]
  E2P_LORA_Read(EE_LORA_TYPE_ID, &Type);
 800a136:	a901      	add	r1, sp, #4
 800a138:	2001      	movs	r0, #1
 800a13a:	f7ff ffe4 	bl	800a106 <E2P_LORA_Read>
}
 800a13e:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800a142:	b003      	add	sp, #12
 800a144:	f85d fb04 	ldr.w	pc, [sp], #4

0800a148 <E2P_LORA_Read_Mode>:
{
 800a148:	b500      	push	{lr}
 800a14a:	b083      	sub	sp, #12
  uint32_t LoRaMode = 1;
 800a14c:	2301      	movs	r3, #1
 800a14e:	9301      	str	r3, [sp, #4]
  E2P_LORA_Read(EE_LORA_MODE_ID, &LoRaMode);
 800a150:	a901      	add	r1, sp, #4
 800a152:	2016      	movs	r0, #22
 800a154:	f7ff ffd7 	bl	800a106 <E2P_LORA_Read>
}
 800a158:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800a15c:	b003      	add	sp, #12
 800a15e:	f85d fb04 	ldr.w	pc, [sp], #4

0800a162 <E2P_LORA_Read_Network_Type>:
{
 800a162:	b500      	push	{lr}
 800a164:	b083      	sub	sp, #12
  E2P_LORA_Read(EE_LORA_NETWORK_TYPE_ID, &NetworkType);
 800a166:	a901      	add	r1, sp, #4
 800a168:	2003      	movs	r0, #3
 800a16a:	f7ff ffcc 	bl	800a106 <E2P_LORA_Read>
}
 800a16e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800a172:	b003      	add	sp, #12
 800a174:	f85d fb04 	ldr.w	pc, [sp], #4

0800a178 <E2P_LORA_Read_Appeui>:
{
 800a178:	b530      	push	{r4, r5, lr}
 800a17a:	b085      	sub	sp, #20
 800a17c:	4605      	mov	r5, r0
  memset1(RappEui, 0, sizeof(RappEui));
 800a17e:	2208      	movs	r2, #8
 800a180:	2100      	movs	r1, #0
 800a182:	4668      	mov	r0, sp
 800a184:	f015 feb5 	bl	801fef2 <memset1>
  E2P_LORA_Read(EE_LORA_WORD0_APPEUI_ID, (uint32_t *) &config_words[0]);
 800a188:	a902      	add	r1, sp, #8
 800a18a:	2014      	movs	r0, #20
 800a18c:	f7ff ffbb 	bl	800a106 <E2P_LORA_Read>
  E2P_LORA_Read(EE_LORA_WORD1_APPEUI_ID, (uint32_t *) &config_words[1]);
 800a190:	a903      	add	r1, sp, #12
 800a192:	2015      	movs	r0, #21
 800a194:	f7ff ffb7 	bl	800a106 <E2P_LORA_Read>
  for(int i = 0; i < 2; i++)
 800a198:	2200      	movs	r2, #0
 800a19a:	e01b      	b.n	800a1d4 <E2P_LORA_Read_Appeui+0x5c>
  	RappEui[i*4+0] = (uint8_t) (config_words[i] >> 24);
 800a19c:	0093      	lsls	r3, r2, #2
 800a19e:	a904      	add	r1, sp, #16
 800a1a0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800a1a4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a1a8:	0e0c      	lsrs	r4, r1, #24
 800a1aa:	f800 4c10 	strb.w	r4, [r0, #-16]
  	RappEui[i*4+1] = (uint8_t) (config_words[i] >> 16);
 800a1ae:	1c58      	adds	r0, r3, #1
 800a1b0:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800a1b4:	f10d 0c10 	add.w	ip, sp, #16
 800a1b8:	4460      	add	r0, ip
 800a1ba:	f800 4c10 	strb.w	r4, [r0, #-16]
  	RappEui[i*4+2] = (uint8_t) (config_words[i] >> 8);
 800a1be:	1c9c      	adds	r4, r3, #2
 800a1c0:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800a1c4:	4464      	add	r4, ip
 800a1c6:	f804 0c10 	strb.w	r0, [r4, #-16]
  	RappEui[i*4+3] = (uint8_t) (config_words[i]);
 800a1ca:	3303      	adds	r3, #3
 800a1cc:	4463      	add	r3, ip
 800a1ce:	f803 1c10 	strb.w	r1, [r3, #-16]
  for(int i = 0; i < 2; i++)
 800a1d2:	3201      	adds	r2, #1
 800a1d4:	2a01      	cmp	r2, #1
 800a1d6:	dde1      	ble.n	800a19c <E2P_LORA_Read_Appeui+0x24>
  memcpy1(pRappEui, RappEui, sizeof(RappEui));
 800a1d8:	2208      	movs	r2, #8
 800a1da:	4669      	mov	r1, sp
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f015 fe72 	bl	801fec6 <memcpy1>
}
 800a1e2:	b005      	add	sp, #20
 800a1e4:	bd30      	pop	{r4, r5, pc}

0800a1e6 <E2P_LORA_Read_Appkey>:
{
 800a1e6:	b530      	push	{r4, r5, lr}
 800a1e8:	b089      	sub	sp, #36	; 0x24
 800a1ea:	4605      	mov	r5, r0
  memset1(RappKey, 0, sizeof(RappKey));
 800a1ec:	2210      	movs	r2, #16
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	4668      	mov	r0, sp
 800a1f2:	f015 fe7e 	bl	801fef2 <memset1>
  E2P_LORA_Read(EE_LORA_WORD0_APPKEY_ID, (uint32_t *) &config_words[0]);
 800a1f6:	a904      	add	r1, sp, #16
 800a1f8:	2004      	movs	r0, #4
 800a1fa:	f7ff ff84 	bl	800a106 <E2P_LORA_Read>
  E2P_LORA_Read(EE_LORA_WORD1_APPKEY_ID, (uint32_t *) &config_words[1]);
 800a1fe:	a905      	add	r1, sp, #20
 800a200:	2005      	movs	r0, #5
 800a202:	f7ff ff80 	bl	800a106 <E2P_LORA_Read>
  E2P_LORA_Read(EE_LORA_WORD2_APPKEY_ID, (uint32_t *) &config_words[2]);
 800a206:	a906      	add	r1, sp, #24
 800a208:	2006      	movs	r0, #6
 800a20a:	f7ff ff7c 	bl	800a106 <E2P_LORA_Read>
  E2P_LORA_Read(EE_LORA_WORD3_APPKEY_ID, (uint32_t *) &config_words[3]);
 800a20e:	a907      	add	r1, sp, #28
 800a210:	2007      	movs	r0, #7
 800a212:	f7ff ff78 	bl	800a106 <E2P_LORA_Read>
  for(int i = 0; i < 4; i++)
 800a216:	2200      	movs	r2, #0
 800a218:	e01b      	b.n	800a252 <E2P_LORA_Read_Appkey+0x6c>
  	RappKey[i*4+0] = (uint8_t) (config_words[i] >> 24);
 800a21a:	0093      	lsls	r3, r2, #2
 800a21c:	a908      	add	r1, sp, #32
 800a21e:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800a222:	f850 1c10 	ldr.w	r1, [r0, #-16]
 800a226:	0e0c      	lsrs	r4, r1, #24
 800a228:	f800 4c20 	strb.w	r4, [r0, #-32]
  	RappKey[i*4+1] = (uint8_t) (config_words[i] >> 16);
 800a22c:	1c58      	adds	r0, r3, #1
 800a22e:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800a232:	f10d 0c20 	add.w	ip, sp, #32
 800a236:	4460      	add	r0, ip
 800a238:	f800 4c20 	strb.w	r4, [r0, #-32]
  	RappKey[i*4+2] = (uint8_t) (config_words[i] >> 8);
 800a23c:	1c9c      	adds	r4, r3, #2
 800a23e:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800a242:	4464      	add	r4, ip
 800a244:	f804 0c20 	strb.w	r0, [r4, #-32]
  	RappKey[i*4+3] = (uint8_t) (config_words[i]);
 800a248:	3303      	adds	r3, #3
 800a24a:	4463      	add	r3, ip
 800a24c:	f803 1c20 	strb.w	r1, [r3, #-32]
  for(int i = 0; i < 4; i++)
 800a250:	3201      	adds	r2, #1
 800a252:	2a03      	cmp	r2, #3
 800a254:	dde1      	ble.n	800a21a <E2P_LORA_Read_Appkey+0x34>
  memcpy1(pRappKey, RappKey, sizeof(RappKey));	
 800a256:	2210      	movs	r2, #16
 800a258:	4669      	mov	r1, sp
 800a25a:	4628      	mov	r0, r5
 800a25c:	f015 fe33 	bl	801fec6 <memcpy1>
}
 800a260:	b009      	add	sp, #36	; 0x24
 800a262:	bd30      	pop	{r4, r5, pc}

0800a264 <E2P_LORA_Read_Nwkkey>:
{
 800a264:	b530      	push	{r4, r5, lr}
 800a266:	b089      	sub	sp, #36	; 0x24
 800a268:	4605      	mov	r5, r0
  memset1(RnwkKey, 0, sizeof(RnwkKey));
 800a26a:	2210      	movs	r2, #16
 800a26c:	2100      	movs	r1, #0
 800a26e:	4668      	mov	r0, sp
 800a270:	f015 fe3f 	bl	801fef2 <memset1>
  E2P_LORA_Read(EE_LORA_WORD0_NWKKEY_ID, (uint32_t *) &config_words[0]);
 800a274:	a904      	add	r1, sp, #16
 800a276:	2008      	movs	r0, #8
 800a278:	f7ff ff45 	bl	800a106 <E2P_LORA_Read>
  E2P_LORA_Read(EE_LORA_WORD1_NWKKEY_ID, (uint32_t *) &config_words[1]);
 800a27c:	a905      	add	r1, sp, #20
 800a27e:	2009      	movs	r0, #9
 800a280:	f7ff ff41 	bl	800a106 <E2P_LORA_Read>
  E2P_LORA_Read(EE_LORA_WORD2_NWKKEY_ID, (uint32_t *) &config_words[2]);
 800a284:	a906      	add	r1, sp, #24
 800a286:	200a      	movs	r0, #10
 800a288:	f7ff ff3d 	bl	800a106 <E2P_LORA_Read>
  E2P_LORA_Read(EE_LORA_WORD3_NWKKEY_ID, (uint32_t *) &config_words[3]);
 800a28c:	a907      	add	r1, sp, #28
 800a28e:	200b      	movs	r0, #11
 800a290:	f7ff ff39 	bl	800a106 <E2P_LORA_Read>
  for(int i = 0; i < 4; i++)
 800a294:	2200      	movs	r2, #0
 800a296:	e01b      	b.n	800a2d0 <E2P_LORA_Read_Nwkkey+0x6c>
  	RnwkKey[i*4+0] = (uint8_t) (config_words[i] >> 24);
 800a298:	0093      	lsls	r3, r2, #2
 800a29a:	a908      	add	r1, sp, #32
 800a29c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800a2a0:	f850 1c10 	ldr.w	r1, [r0, #-16]
 800a2a4:	0e0c      	lsrs	r4, r1, #24
 800a2a6:	f800 4c20 	strb.w	r4, [r0, #-32]
  	RnwkKey[i*4+1] = (uint8_t) (config_words[i] >> 16);
 800a2aa:	1c58      	adds	r0, r3, #1
 800a2ac:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800a2b0:	f10d 0c20 	add.w	ip, sp, #32
 800a2b4:	4460      	add	r0, ip
 800a2b6:	f800 4c20 	strb.w	r4, [r0, #-32]
  	RnwkKey[i*4+2] = (uint8_t) (config_words[i] >> 8);
 800a2ba:	1c9c      	adds	r4, r3, #2
 800a2bc:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800a2c0:	4464      	add	r4, ip
 800a2c2:	f804 0c20 	strb.w	r0, [r4, #-32]
  	RnwkKey[i*4+3] = (uint8_t) (config_words[i]);
 800a2c6:	3303      	adds	r3, #3
 800a2c8:	4463      	add	r3, ip
 800a2ca:	f803 1c20 	strb.w	r1, [r3, #-32]
  for(int i = 0; i < 4; i++)
 800a2ce:	3201      	adds	r2, #1
 800a2d0:	2a03      	cmp	r2, #3
 800a2d2:	dde1      	ble.n	800a298 <E2P_LORA_Read_Nwkkey+0x34>
  memcpy1(pRnwkKey, RnwkKey, sizeof(RnwkKey));
 800a2d4:	2210      	movs	r2, #16
 800a2d6:	4669      	mov	r1, sp
 800a2d8:	4628      	mov	r0, r5
 800a2da:	f015 fdf4 	bl	801fec6 <memcpy1>
}
 800a2de:	b009      	add	sp, #36	; 0x24
 800a2e0:	bd30      	pop	{r4, r5, pc}

0800a2e2 <E2P_LORA_Read_App_S_key>:
{
 800a2e2:	b530      	push	{r4, r5, lr}
 800a2e4:	b089      	sub	sp, #36	; 0x24
 800a2e6:	4605      	mov	r5, r0
  memset1(RappSKey, 0, sizeof(RappSKey));
 800a2e8:	2210      	movs	r2, #16
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	4668      	mov	r0, sp
 800a2ee:	f015 fe00 	bl	801fef2 <memset1>
  E2P_LORA_Read(EE_LORA_WORD0_APPSKEY_ID, (uint32_t *) &config_words[0]);
 800a2f2:	a904      	add	r1, sp, #16
 800a2f4:	200c      	movs	r0, #12
 800a2f6:	f7ff ff06 	bl	800a106 <E2P_LORA_Read>
  E2P_LORA_Read(EE_LORA_WORD1_APPSKEY_ID, (uint32_t *) &config_words[1]);
 800a2fa:	a905      	add	r1, sp, #20
 800a2fc:	200d      	movs	r0, #13
 800a2fe:	f7ff ff02 	bl	800a106 <E2P_LORA_Read>
  E2P_LORA_Read(EE_LORA_WORD2_APPSKEY_ID, (uint32_t *) &config_words[2]);
 800a302:	a906      	add	r1, sp, #24
 800a304:	200e      	movs	r0, #14
 800a306:	f7ff fefe 	bl	800a106 <E2P_LORA_Read>
  E2P_LORA_Read(EE_LORA_WORD3_APPSKEY_ID, (uint32_t *) &config_words[3]);
 800a30a:	a907      	add	r1, sp, #28
 800a30c:	200f      	movs	r0, #15
 800a30e:	f7ff fefa 	bl	800a106 <E2P_LORA_Read>
  for(int i = 0; i < 4; i++)
 800a312:	2200      	movs	r2, #0
 800a314:	e01b      	b.n	800a34e <E2P_LORA_Read_App_S_key+0x6c>
  	RappSKey[i*4+0] = (uint8_t) (config_words[i] >> 24);
 800a316:	0093      	lsls	r3, r2, #2
 800a318:	a908      	add	r1, sp, #32
 800a31a:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800a31e:	f850 1c10 	ldr.w	r1, [r0, #-16]
 800a322:	0e0c      	lsrs	r4, r1, #24
 800a324:	f800 4c20 	strb.w	r4, [r0, #-32]
  	RappSKey[i*4+1] = (uint8_t) (config_words[i] >> 16);
 800a328:	1c58      	adds	r0, r3, #1
 800a32a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800a32e:	f10d 0c20 	add.w	ip, sp, #32
 800a332:	4460      	add	r0, ip
 800a334:	f800 4c20 	strb.w	r4, [r0, #-32]
  	RappSKey[i*4+2] = (uint8_t) (config_words[i] >> 8);
 800a338:	1c9c      	adds	r4, r3, #2
 800a33a:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800a33e:	4464      	add	r4, ip
 800a340:	f804 0c20 	strb.w	r0, [r4, #-32]
  	RappSKey[i*4+3] = (uint8_t) (config_words[i]);
 800a344:	3303      	adds	r3, #3
 800a346:	4463      	add	r3, ip
 800a348:	f803 1c20 	strb.w	r1, [r3, #-32]
  for(int i = 0; i < 4; i++)
 800a34c:	3201      	adds	r2, #1
 800a34e:	2a03      	cmp	r2, #3
 800a350:	dde1      	ble.n	800a316 <E2P_LORA_Read_App_S_key+0x34>
  memcpy1(pRappSKey, RappSKey, sizeof(RappSKey));
 800a352:	2210      	movs	r2, #16
 800a354:	4669      	mov	r1, sp
 800a356:	4628      	mov	r0, r5
 800a358:	f015 fdb5 	bl	801fec6 <memcpy1>
}
 800a35c:	b009      	add	sp, #36	; 0x24
 800a35e:	bd30      	pop	{r4, r5, pc}

0800a360 <E2P_LORA_Read_Nwk_S_key>:
{
 800a360:	b530      	push	{r4, r5, lr}
 800a362:	b089      	sub	sp, #36	; 0x24
 800a364:	4605      	mov	r5, r0
  memset1(RnwkSKey, 0, sizeof(RnwkSKey));
 800a366:	2210      	movs	r2, #16
 800a368:	2100      	movs	r1, #0
 800a36a:	4668      	mov	r0, sp
 800a36c:	f015 fdc1 	bl	801fef2 <memset1>
  E2P_LORA_Read(EE_LORA_WORD0_NWKSKEY_ID, (uint32_t *) &config_words[0]);
 800a370:	a904      	add	r1, sp, #16
 800a372:	2010      	movs	r0, #16
 800a374:	f7ff fec7 	bl	800a106 <E2P_LORA_Read>
  E2P_LORA_Read(EE_LORA_WORD1_NWKSKEY_ID, (uint32_t *) &config_words[1]);
 800a378:	a905      	add	r1, sp, #20
 800a37a:	2011      	movs	r0, #17
 800a37c:	f7ff fec3 	bl	800a106 <E2P_LORA_Read>
  E2P_LORA_Read(EE_LORA_WORD2_NWKSKEY_ID, (uint32_t *) &config_words[2]);
 800a380:	a906      	add	r1, sp, #24
 800a382:	2012      	movs	r0, #18
 800a384:	f7ff febf 	bl	800a106 <E2P_LORA_Read>
  E2P_LORA_Read(EE_LORA_WORD3_NWKSKEY_ID, (uint32_t *) &config_words[3]);
 800a388:	a907      	add	r1, sp, #28
 800a38a:	2013      	movs	r0, #19
 800a38c:	f7ff febb 	bl	800a106 <E2P_LORA_Read>
  for(int i = 0; i < 4; i++)
 800a390:	2200      	movs	r2, #0
 800a392:	e01b      	b.n	800a3cc <E2P_LORA_Read_Nwk_S_key+0x6c>
  	RnwkSKey[i*4+0] = (uint8_t) (config_words[i] >> 24);
 800a394:	0093      	lsls	r3, r2, #2
 800a396:	a908      	add	r1, sp, #32
 800a398:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800a39c:	f850 1c10 	ldr.w	r1, [r0, #-16]
 800a3a0:	0e0c      	lsrs	r4, r1, #24
 800a3a2:	f800 4c20 	strb.w	r4, [r0, #-32]
  	RnwkSKey[i*4+1] = (uint8_t) (config_words[i] >> 16);
 800a3a6:	1c58      	adds	r0, r3, #1
 800a3a8:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800a3ac:	f10d 0c20 	add.w	ip, sp, #32
 800a3b0:	4460      	add	r0, ip
 800a3b2:	f800 4c20 	strb.w	r4, [r0, #-32]
  	RnwkSKey[i*4+2] = (uint8_t) (config_words[i] >> 8);
 800a3b6:	1c9c      	adds	r4, r3, #2
 800a3b8:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800a3bc:	4464      	add	r4, ip
 800a3be:	f804 0c20 	strb.w	r0, [r4, #-32]
  	RnwkSKey[i*4+3] = (uint8_t) (config_words[i]);
 800a3c2:	3303      	adds	r3, #3
 800a3c4:	4463      	add	r3, ip
 800a3c6:	f803 1c20 	strb.w	r1, [r3, #-32]
  for(int i = 0; i < 4; i++)
 800a3ca:	3201      	adds	r2, #1
 800a3cc:	2a03      	cmp	r2, #3
 800a3ce:	dde1      	ble.n	800a394 <E2P_LORA_Read_Nwk_S_key+0x34>
  memcpy1(pRnwkSKey, RnwkSKey, sizeof(RnwkSKey));
 800a3d0:	2210      	movs	r2, #16
 800a3d2:	4669      	mov	r1, sp
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	f015 fd76 	bl	801fec6 <memcpy1>
}
 800a3da:	b009      	add	sp, #36	; 0x24
 800a3dc:	bd30      	pop	{r4, r5, pc}
	...

0800a3e0 <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 800a3e0:	4b04      	ldr	r3, [pc, #16]	; (800a3f4 <LoraInfo_Init+0x14>)
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a3e6:	60da      	str	r2, [r3, #12]
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
 800a3e8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a3ec:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 800a3ee:	2203      	movs	r2, #3
 800a3f0:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a3f2:	4770      	bx	lr
 800a3f4:	20000a48 	.word	0x20000a48

0800a3f8 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 800a3f8:	4800      	ldr	r0, [pc, #0]	; (800a3fc <LoraInfo_GetPtr+0x4>)
 800a3fa:	4770      	bx	lr
 800a3fc:	20000a48 	.word	0x20000a48

0800a400 <Prbs9_generator>:

  /* USER CODE END OnRxError_2 */
}

static int32_t Prbs9_generator(uint8_t *payload, uint8_t len)
{
 800a400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a402:	4604      	mov	r4, r0
 800a404:	460d      	mov	r5, r1
  /* USER CODE BEGIN Prbs9_generator_1 */

  /* USER CODE END Prbs9_generator_1 */
  uint16_t prbs9_val = PRBS9_INIT;
  /*init payload to 0*/
  UTIL_MEM_set_8(payload, 0, len);
 800a406:	460a      	mov	r2, r1
 800a408:	2100      	movs	r1, #0
 800a40a:	f018 f825 	bl	8022458 <UTIL_MEM_set_8>

  for (int32_t i = 0; i < len * 8; i++)
 800a40e:	2200      	movs	r2, #0
  uint16_t prbs9_val = PRBS9_INIT;
 800a410:	2002      	movs	r0, #2
  for (int32_t i = 0; i < len * 8; i++)
 800a412:	e00e      	b.n	800a432 <Prbs9_generator+0x32>
  {
    /*fill buffer with prbs9 sequence*/
    int32_t newbit = (((prbs9_val >> 8) ^ (prbs9_val >> 4)) & 1);
    prbs9_val = ((prbs9_val << 1) | newbit) & 0x01ff;
    payload[i / 8] |= ((prbs9_val & 0x1) << (i % 8));
 800a414:	10c9      	asrs	r1, r1, #3
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	4257      	negs	r7, r2
 800a41c:	f002 0607 	and.w	r6, r2, #7
 800a420:	f007 0707 	and.w	r7, r7, #7
 800a424:	bf58      	it	pl
 800a426:	427e      	negpl	r6, r7
 800a428:	40b3      	lsls	r3, r6
 800a42a:	5c66      	ldrb	r6, [r4, r1]
 800a42c:	4333      	orrs	r3, r6
 800a42e:	5463      	strb	r3, [r4, r1]
  for (int32_t i = 0; i < len * 8; i++)
 800a430:	3201      	adds	r2, #1
 800a432:	ebb2 0fc5 	cmp.w	r2, r5, lsl #3
 800a436:	da0d      	bge.n	800a454 <Prbs9_generator+0x54>
    int32_t newbit = (((prbs9_val >> 8) ^ (prbs9_val >> 4)) & 1);
 800a438:	0903      	lsrs	r3, r0, #4
 800a43a:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
    prbs9_val = ((prbs9_val << 1) | newbit) & 0x01ff;
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 800a446:	f3c3 0008 	ubfx	r0, r3, #0, #9
    payload[i / 8] |= ((prbs9_val & 0x1) << (i % 8));
 800a44a:	4611      	mov	r1, r2
 800a44c:	2a00      	cmp	r2, #0
 800a44e:	dae1      	bge.n	800a414 <Prbs9_generator+0x14>
 800a450:	1dd1      	adds	r1, r2, #7
 800a452:	e7df      	b.n	800a414 <Prbs9_generator+0x14>
  }
  return 0;
  /* USER CODE BEGIN Prbs9_generator_2 */

  /* USER CODE END Prbs9_generator_2 */
}
 800a454:	2000      	movs	r0, #0
 800a456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a458 <OnTxDone>:
{
 800a458:	b508      	push	{r3, lr}
  RadioTxDone_flag = 1;
 800a45a:	2001      	movs	r0, #1
 800a45c:	4b02      	ldr	r3, [pc, #8]	; (800a468 <OnTxDone+0x10>)
 800a45e:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800a460:	f018 f818 	bl	8022494 <UTIL_SEQ_SetEvt>
}
 800a464:	bd08      	pop	{r3, pc}
 800a466:	bf00      	nop
 800a468:	20000a88 	.word	0x20000a88

0800a46c <OnRxDone>:
{
 800a46c:	b510      	push	{r4, lr}
  last_rx_rssi = rssi;
 800a46e:	4c07      	ldr	r4, [pc, #28]	; (800a48c <OnRxDone+0x20>)
 800a470:	8022      	strh	r2, [r4, #0]
  last_rx_LoraSnr_FskCfo = LoraSnr_FskCfo;
 800a472:	4a07      	ldr	r2, [pc, #28]	; (800a490 <OnRxDone+0x24>)
 800a474:	7013      	strb	r3, [r2, #0]
  RXpayload = payload;
 800a476:	4b07      	ldr	r3, [pc, #28]	; (800a494 <OnRxDone+0x28>)
 800a478:	6018      	str	r0, [r3, #0]
  RXpayload_len = size;
 800a47a:	4b07      	ldr	r3, [pc, #28]	; (800a498 <OnRxDone+0x2c>)
 800a47c:	8019      	strh	r1, [r3, #0]
  RadioRxDone_flag = 1;
 800a47e:	2001      	movs	r0, #1
 800a480:	4b06      	ldr	r3, [pc, #24]	; (800a49c <OnRxDone+0x30>)
 800a482:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800a484:	f018 f806 	bl	8022494 <UTIL_SEQ_SetEvt>
}
 800a488:	bd10      	pop	{r4, pc}
 800a48a:	bf00      	nop
 800a48c:	20000a92 	.word	0x20000a92
 800a490:	20000a91 	.word	0x20000a91
 800a494:	20000a58 	.word	0x20000a58
 800a498:	20000a5c 	.word	0x20000a5c
 800a49c:	20000a80 	.word	0x20000a80

0800a4a0 <OnTxTimeout>:
{
 800a4a0:	b508      	push	{r3, lr}
  RadioTxTimeout_flag = 1;
 800a4a2:	2001      	movs	r0, #1
 800a4a4:	4b02      	ldr	r3, [pc, #8]	; (800a4b0 <OnTxTimeout+0x10>)
 800a4a6:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800a4a8:	f017 fff4 	bl	8022494 <UTIL_SEQ_SetEvt>
}
 800a4ac:	bd08      	pop	{r3, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20000a8c 	.word	0x20000a8c

0800a4b4 <OnRxTimeout>:
{
 800a4b4:	b508      	push	{r3, lr}
  RadioRxTimeout_flag = 1;
 800a4b6:	2001      	movs	r0, #1
 800a4b8:	4b02      	ldr	r3, [pc, #8]	; (800a4c4 <OnRxTimeout+0x10>)
 800a4ba:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800a4bc:	f017 ffea 	bl	8022494 <UTIL_SEQ_SetEvt>
}
 800a4c0:	bd08      	pop	{r3, pc}
 800a4c2:	bf00      	nop
 800a4c4:	20000a84 	.word	0x20000a84

0800a4c8 <OnRxError>:
{
 800a4c8:	b508      	push	{r3, lr}
  RadioError_flag = 1;
 800a4ca:	2001      	movs	r0, #1
 800a4cc:	4b02      	ldr	r3, [pc, #8]	; (800a4d8 <OnRxError+0x10>)
 800a4ce:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800a4d0:	f017 ffe0 	bl	8022494 <UTIL_SEQ_SetEvt>
}
 800a4d4:	bd08      	pop	{r3, pc}
 800a4d6:	bf00      	nop
 800a4d8:	20000a60 	.word	0x20000a60

0800a4dc <TST_TxTone>:
  if ((TestState & TX_TEST_TONE) != TX_TEST_TONE)
 800a4dc:	4b0e      	ldr	r3, [pc, #56]	; (800a518 <TST_TxTone+0x3c>)
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	f013 0f01 	tst.w	r3, #1
 800a4e4:	d115      	bne.n	800a512 <TST_TxTone+0x36>
{
 800a4e6:	b510      	push	{r4, lr}
    TestState |= TX_TEST_TONE;
 800a4e8:	f043 0301 	orr.w	r3, r3, #1
 800a4ec:	4a0a      	ldr	r2, [pc, #40]	; (800a518 <TST_TxTone+0x3c>)
 800a4ee:	7013      	strb	r3, [r2, #0]
    APP_TPRINTF("Tx FSK Test\r\n");
 800a4f0:	4b0a      	ldr	r3, [pc, #40]	; (800a51c <TST_TxTone+0x40>)
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	4608      	mov	r0, r1
 800a4f8:	f017 fe90 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    Radio.SetTxContinuousWave(testParam.freq, testParam.power, CONTINUOUS_TIMEOUT);
 800a4fc:	4b08      	ldr	r3, [pc, #32]	; (800a520 <TST_TxTone+0x44>)
 800a4fe:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800a500:	4b08      	ldr	r3, [pc, #32]	; (800a524 <TST_TxTone+0x48>)
 800a502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a506:	f993 1008 	ldrsb.w	r1, [r3, #8]
 800a50a:	6858      	ldr	r0, [r3, #4]
 800a50c:	47a0      	blx	r4
    return 0;
 800a50e:	2000      	movs	r0, #0
}
 800a510:	bd10      	pop	{r4, pc}
    return -1;
 800a512:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a516:	4770      	bx	lr
 800a518:	20000a90 	.word	0x20000a90
 800a51c:	08026de8 	.word	0x08026de8
 800a520:	08028984 	.word	0x08028984
 800a524:	20000130 	.word	0x20000130

0800a528 <TST_RxRssi>:
{
 800a528:	b530      	push	{r4, r5, lr}
 800a52a:	b095      	sub	sp, #84	; 0x54
  if ((TestState & RX_TEST_RSSI) != RX_TEST_RSSI)
 800a52c:	4b34      	ldr	r3, [pc, #208]	; (800a600 <TST_RxRssi+0xd8>)
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	f013 0502 	ands.w	r5, r3, #2
 800a534:	d161      	bne.n	800a5fa <TST_RxRssi+0xd2>
    TestState |= RX_TEST_RSSI;
 800a536:	f043 0302 	orr.w	r3, r3, #2
 800a53a:	4a31      	ldr	r2, [pc, #196]	; (800a600 <TST_RxRssi+0xd8>)
 800a53c:	7013      	strb	r3, [r2, #0]
    APP_TPRINTF("Rx FSK Test\r\n");
 800a53e:	4b31      	ldr	r3, [pc, #196]	; (800a604 <TST_RxRssi+0xdc>)
 800a540:	2201      	movs	r2, #1
 800a542:	2100      	movs	r1, #0
 800a544:	4608      	mov	r0, r1
 800a546:	f017 fe69 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    Radio.SetChannel(testParam.freq);
 800a54a:	4b2f      	ldr	r3, [pc, #188]	; (800a608 <TST_RxRssi+0xe0>)
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	4c2f      	ldr	r4, [pc, #188]	; (800a60c <TST_RxRssi+0xe4>)
 800a550:	6860      	ldr	r0, [r4, #4]
 800a552:	4798      	blx	r3
    uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a554:	4a2e      	ldr	r2, [pc, #184]	; (800a610 <TST_RxRssi+0xe8>)
 800a556:	ab03      	add	r3, sp, #12
 800a558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a55c:	e883 0003 	stmia.w	r3, {r0, r1}
    RxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 8);
 800a560:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a562:	b10b      	cbz	r3, 800a568 <TST_RxRssi+0x40>
 800a564:	3308      	adds	r3, #8
 800a566:	b2dd      	uxtb	r5, r3
 800a568:	f88d 5018 	strb.w	r5, [sp, #24]
    RxConfig.fsk.Bandwidth = testParam.bandwidth;
 800a56c:	4c27      	ldr	r4, [pc, #156]	; (800a60c <TST_RxRssi+0xe4>)
 800a56e:	68e3      	ldr	r3, [r4, #12]
 800a570:	9307      	str	r3, [sp, #28]
    RxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800a572:	6923      	ldr	r3, [r4, #16]
 800a574:	9308      	str	r3, [sp, #32]
    RxConfig.fsk.PreambleLen = 3;   /*in Byte*/
 800a576:	2303      	movs	r3, #3
 800a578:	9309      	str	r3, [sp, #36]	; 0x24
    RxConfig.fsk.SyncWordLength = 3; /*in Byte*/
 800a57a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    RxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800a57e:	ab03      	add	r3, sp, #12
 800a580:	930b      	str	r3, [sp, #44]	; 0x2c
    RxConfig.fsk.whiteSeed = 0x01FF; /*WhiteningSeed*/
 800a582:	f240 13ff 	movw	r3, #511	; 0x1ff
 800a586:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    RxConfig.fsk.LengthMode = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800a58a:	2201      	movs	r2, #1
 800a58c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    RxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800a590:	23f2      	movs	r3, #242	; 0xf2
 800a592:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    RxConfig.fsk.CrcPolynomial = 0x1021;
 800a596:	f241 0321 	movw	r3, #4129	; 0x1021
 800a59a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    RxConfig.fsk.Whitening = RADIO_FSK_DC_FREEWHITENING;
 800a59e:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
    Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0);
 800a5a2:	4b19      	ldr	r3, [pc, #100]	; (800a608 <TST_RxRssi+0xe0>)
 800a5a4:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	a905      	add	r1, sp, #20
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	47a8      	blx	r5
    if (testParam.lna == 0)
 800a5ae:	69a3      	ldr	r3, [r4, #24]
 800a5b0:	b9eb      	cbnz	r3, 800a5ee <TST_RxRssi+0xc6>
      Radio.Rx(timeout);
 800a5b2:	4b15      	ldr	r3, [pc, #84]	; (800a608 <TST_RxRssi+0xe0>)
 800a5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a5ba:	4798      	blx	r3
    HAL_Delay(Radio.GetWakeupTime());   /* Wait for 50ms */
 800a5bc:	4c12      	ldr	r4, [pc, #72]	; (800a608 <TST_RxRssi+0xe0>)
 800a5be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a5c0:	4798      	blx	r3
 800a5c2:	f7fc fe9d 	bl	8007300 <HAL_Delay>
    rssiVal = Radio.Rssi(MODEM_FSK);
 800a5c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	4798      	blx	r3
    APP_TPRINTF(">>> RSSI Value= %d dBm\r\n", rssiVal);
 800a5cc:	9000      	str	r0, [sp, #0]
 800a5ce:	4b11      	ldr	r3, [pc, #68]	; (800a614 <TST_RxRssi+0xec>)
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	4608      	mov	r0, r1
 800a5d6:	f017 fe21 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    Radio.Sleep();
 800a5da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a5dc:	4798      	blx	r3
    TestState &= ~RX_TEST_RSSI;
 800a5de:	4a08      	ldr	r2, [pc, #32]	; (800a600 <TST_RxRssi+0xd8>)
 800a5e0:	7813      	ldrb	r3, [r2, #0]
 800a5e2:	f023 0302 	bic.w	r3, r3, #2
 800a5e6:	7013      	strb	r3, [r2, #0]
    return 0;
 800a5e8:	2000      	movs	r0, #0
}
 800a5ea:	b015      	add	sp, #84	; 0x54
 800a5ec:	bd30      	pop	{r4, r5, pc}
      Radio.RxBoosted(timeout);
 800a5ee:	4b06      	ldr	r3, [pc, #24]	; (800a608 <TST_RxRssi+0xe0>)
 800a5f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5f2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a5f6:	4798      	blx	r3
 800a5f8:	e7e0      	b.n	800a5bc <TST_RxRssi+0x94>
    return -1;
 800a5fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a5fe:	e7f4      	b.n	800a5ea <TST_RxRssi+0xc2>
 800a600:	20000a90 	.word	0x20000a90
 800a604:	08026df8 	.word	0x08026df8
 800a608:	08028984 	.word	0x08028984
 800a60c:	20000130 	.word	0x20000130
 800a610:	08024920 	.word	0x08024920
 800a614:	08026e08 	.word	0x08026e08

0800a618 <TST_set_config>:
{
 800a618:	b508      	push	{r3, lr}
 800a61a:	4601      	mov	r1, r0
  UTIL_MEM_cpy_8(&testParam, Param, sizeof(testParameter_t));
 800a61c:	2230      	movs	r2, #48	; 0x30
 800a61e:	4802      	ldr	r0, [pc, #8]	; (800a628 <TST_set_config+0x10>)
 800a620:	f017 ff10 	bl	8022444 <UTIL_MEM_cpy_8>
}
 800a624:	2000      	movs	r0, #0
 800a626:	bd08      	pop	{r3, pc}
 800a628:	20000130 	.word	0x20000130

0800a62c <TST_get_config>:
{
 800a62c:	b508      	push	{r3, lr}
  UTIL_MEM_cpy_8(Param, &testParam, sizeof(testParameter_t));
 800a62e:	2230      	movs	r2, #48	; 0x30
 800a630:	4902      	ldr	r1, [pc, #8]	; (800a63c <TST_get_config+0x10>)
 800a632:	f017 ff07 	bl	8022444 <UTIL_MEM_cpy_8>
}
 800a636:	2000      	movs	r0, #0
 800a638:	bd08      	pop	{r3, pc}
 800a63a:	bf00      	nop
 800a63c:	20000130 	.word	0x20000130

0800a640 <TST_stop>:
{
 800a640:	b510      	push	{r4, lr}
  TestState = 0;
 800a642:	2400      	movs	r4, #0
 800a644:	4b03      	ldr	r3, [pc, #12]	; (800a654 <TST_stop+0x14>)
 800a646:	701c      	strb	r4, [r3, #0]
  Radio.Sleep();
 800a648:	4b03      	ldr	r3, [pc, #12]	; (800a658 <TST_stop+0x18>)
 800a64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64c:	4798      	blx	r3
}
 800a64e:	4620      	mov	r0, r4
 800a650:	bd10      	pop	{r4, pc}
 800a652:	bf00      	nop
 800a654:	20000a90 	.word	0x20000a90
 800a658:	08028984 	.word	0x08028984

0800a65c <TST_TX_Start>:
{
 800a65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a65e:	b093      	sub	sp, #76	; 0x4c
  if ((TestState & TX_TEST_LORA) != TX_TEST_LORA)
 800a660:	4b73      	ldr	r3, [pc, #460]	; (800a830 <TST_TX_Start+0x1d4>)
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	f013 0704 	ands.w	r7, r3, #4
 800a668:	f040 80db 	bne.w	800a822 <TST_TX_Start+0x1c6>
 800a66c:	4606      	mov	r6, r0
    TestState |= TX_TEST_LORA;
 800a66e:	f043 0304 	orr.w	r3, r3, #4
 800a672:	4a6f      	ldr	r2, [pc, #444]	; (800a830 <TST_TX_Start+0x1d4>)
 800a674:	7013      	strb	r3, [r2, #0]
    APP_TPRINTF("Tx LoRa Test\r\n");
 800a676:	4b6f      	ldr	r3, [pc, #444]	; (800a834 <TST_TX_Start+0x1d8>)
 800a678:	2201      	movs	r2, #1
 800a67a:	2100      	movs	r1, #0
 800a67c:	4608      	mov	r0, r1
 800a67e:	f017 fdcd 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    RadioEvents.TxDone = OnTxDone;
 800a682:	486d      	ldr	r0, [pc, #436]	; (800a838 <TST_TX_Start+0x1dc>)
 800a684:	4b6d      	ldr	r3, [pc, #436]	; (800a83c <TST_TX_Start+0x1e0>)
 800a686:	6003      	str	r3, [r0, #0]
    RadioEvents.RxDone = OnRxDone;
 800a688:	4b6d      	ldr	r3, [pc, #436]	; (800a840 <TST_TX_Start+0x1e4>)
 800a68a:	6083      	str	r3, [r0, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 800a68c:	4b6d      	ldr	r3, [pc, #436]	; (800a844 <TST_TX_Start+0x1e8>)
 800a68e:	6043      	str	r3, [r0, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 800a690:	4b6d      	ldr	r3, [pc, #436]	; (800a848 <TST_TX_Start+0x1ec>)
 800a692:	60c3      	str	r3, [r0, #12]
    RadioEvents.RxError = OnRxError;
 800a694:	4b6d      	ldr	r3, [pc, #436]	; (800a84c <TST_TX_Start+0x1f0>)
 800a696:	6103      	str	r3, [r0, #16]
    Radio.Init(&RadioEvents);
 800a698:	4b6d      	ldr	r3, [pc, #436]	; (800a850 <TST_TX_Start+0x1f4>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4798      	blx	r3
    Prbs9_generator(payload, testParam.payloadLen);
 800a69e:	4b6d      	ldr	r3, [pc, #436]	; (800a854 <TST_TX_Start+0x1f8>)
 800a6a0:	f893 1020 	ldrb.w	r1, [r3, #32]
 800a6a4:	486c      	ldr	r0, [pc, #432]	; (800a858 <TST_TX_Start+0x1fc>)
 800a6a6:	f7ff feab 	bl	800a400 <Prbs9_generator>
    for (i = 1; i <= nb_packet; i++)
 800a6aa:	2401      	movs	r4, #1
 800a6ac:	e04c      	b.n	800a748 <TST_TX_Start+0xec>
        TxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 7);
 800a6ae:	463b      	mov	r3, r7
 800a6b0:	f88d 3010 	strb.w	r3, [sp, #16]
        TxConfig.fsk.Bandwidth = testParam.bandwidth;
 800a6b4:	4a67      	ldr	r2, [pc, #412]	; (800a854 <TST_TX_Start+0x1f8>)
 800a6b6:	68d3      	ldr	r3, [r2, #12]
 800a6b8:	9305      	str	r3, [sp, #20]
        TxConfig.fsk.FrequencyDeviation = testParam.fskDev;
 800a6ba:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800a6bc:	9307      	str	r3, [sp, #28]
        TxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800a6be:	6913      	ldr	r3, [r2, #16]
 800a6c0:	9306      	str	r3, [sp, #24]
        TxConfig.fsk.PreambleLen = 3;   /*in Byte        */
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	9308      	str	r3, [sp, #32]
        TxConfig.fsk.SyncWordLength = 3; /*in Byte        */
 800a6c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        TxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800a6ca:	ab02      	add	r3, sp, #8
 800a6cc:	930a      	str	r3, [sp, #40]	; 0x28
        TxConfig.fsk.whiteSeed = 0x01FF ; /*WhiteningSeed  */
 800a6ce:	f240 13ff 	movw	r3, #511	; 0x1ff
 800a6d2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        TxConfig.fsk.HeaderType = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
        TxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800a6dc:	23f2      	movs	r3, #242	; 0xf2
 800a6de:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
        TxConfig.fsk.CrcPolynomial = 0x1021;
 800a6e2:	f241 0321 	movw	r3, #4129	; 0x1021
 800a6e6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        TxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
        Radio.RadioSetTxGenericConfig(GENERIC_FSK, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 800a6f0:	4b57      	ldr	r3, [pc, #348]	; (800a850 <TST_TX_Start+0x1f4>)
 800a6f2:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800a6f4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a6f8:	f992 2008 	ldrsb.w	r2, [r2, #8]
 800a6fc:	a904      	add	r1, sp, #16
 800a6fe:	47a8      	blx	r5
      Radio.Send(payload, testParam.payloadLen);
 800a700:	4d53      	ldr	r5, [pc, #332]	; (800a850 <TST_TX_Start+0x1f4>)
 800a702:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a704:	4a53      	ldr	r2, [pc, #332]	; (800a854 <TST_TX_Start+0x1f8>)
 800a706:	f892 1020 	ldrb.w	r1, [r2, #32]
 800a70a:	4853      	ldr	r0, [pc, #332]	; (800a858 <TST_TX_Start+0x1fc>)
 800a70c:	4798      	blx	r3
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800a70e:	2001      	movs	r0, #1
 800a710:	f017 ff88 	bl	8022624 <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 800a714:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a716:	4798      	blx	r3
      if (RadioTxDone_flag == 1)
 800a718:	4b50      	ldr	r3, [pc, #320]	; (800a85c <TST_TX_Start+0x200>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d063      	beq.n	800a7e8 <TST_TX_Start+0x18c>
      if (RadioTxTimeout_flag == 1)
 800a720:	4b4f      	ldr	r3, [pc, #316]	; (800a860 <TST_TX_Start+0x204>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d066      	beq.n	800a7f6 <TST_TX_Start+0x19a>
      if (RadioError_flag == 1)
 800a728:	4b4e      	ldr	r3, [pc, #312]	; (800a864 <TST_TX_Start+0x208>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d069      	beq.n	800a804 <TST_TX_Start+0x1a8>
      HAL_Delay(500);
 800a730:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a734:	f7fc fde4 	bl	8007300 <HAL_Delay>
      RadioTxDone_flag = 0;
 800a738:	2300      	movs	r3, #0
 800a73a:	4a48      	ldr	r2, [pc, #288]	; (800a85c <TST_TX_Start+0x200>)
 800a73c:	6013      	str	r3, [r2, #0]
      RadioTxTimeout_flag = 0;
 800a73e:	4a48      	ldr	r2, [pc, #288]	; (800a860 <TST_TX_Start+0x204>)
 800a740:	6013      	str	r3, [r2, #0]
      RadioError_flag = 0;
 800a742:	4a48      	ldr	r2, [pc, #288]	; (800a864 <TST_TX_Start+0x208>)
 800a744:	6013      	str	r3, [r2, #0]
    for (i = 1; i <= nb_packet; i++)
 800a746:	3401      	adds	r4, #1
 800a748:	42b4      	cmp	r4, r6
 800a74a:	dc62      	bgt.n	800a812 <TST_TX_Start+0x1b6>
      APP_TPRINTF("Tx %d of %d\r\n", i, nb_packet);
 800a74c:	9601      	str	r6, [sp, #4]
 800a74e:	9400      	str	r4, [sp, #0]
 800a750:	4b45      	ldr	r3, [pc, #276]	; (800a868 <TST_TX_Start+0x20c>)
 800a752:	2201      	movs	r2, #1
 800a754:	2100      	movs	r1, #0
 800a756:	4608      	mov	r0, r1
 800a758:	f017 fd60 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      Radio.SetChannel(testParam.freq);
 800a75c:	4b3c      	ldr	r3, [pc, #240]	; (800a850 <TST_TX_Start+0x1f4>)
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	4d3c      	ldr	r5, [pc, #240]	; (800a854 <TST_TX_Start+0x1f8>)
 800a762:	6868      	ldr	r0, [r5, #4]
 800a764:	4798      	blx	r3
      if (testParam.modulation == TEST_FSK)
 800a766:	682b      	ldr	r3, [r5, #0]
 800a768:	b95b      	cbnz	r3, 800a782 <TST_TX_Start+0x126>
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a76a:	4a40      	ldr	r2, [pc, #256]	; (800a86c <TST_TX_Start+0x210>)
 800a76c:	ab02      	add	r3, sp, #8
 800a76e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a772:	e883 0003 	stmia.w	r3, {r0, r1}
        TxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 7);
 800a776:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d098      	beq.n	800a6ae <TST_TX_Start+0x52>
 800a77c:	3307      	adds	r3, #7
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	e796      	b.n	800a6b0 <TST_TX_Start+0x54>
      else if (testParam.modulation == TEST_LORA)
 800a782:	2b01      	cmp	r3, #1
 800a784:	d00e      	beq.n	800a7a4 <TST_TX_Start+0x148>
      else if (testParam.modulation == TEST_BPSK)
 800a786:	2b02      	cmp	r3, #2
 800a788:	d14e      	bne.n	800a828 <TST_TX_Start+0x1cc>
        TxConfig.bpsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800a78a:	4a32      	ldr	r2, [pc, #200]	; (800a854 <TST_TX_Start+0x1f8>)
 800a78c:	6913      	ldr	r3, [r2, #16]
 800a78e:	9311      	str	r3, [sp, #68]	; 0x44
        Radio.RadioSetTxGenericConfig(GENERIC_BPSK, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 800a790:	4b2f      	ldr	r3, [pc, #188]	; (800a850 <TST_TX_Start+0x1f4>)
 800a792:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800a794:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a798:	f992 2008 	ldrsb.w	r2, [r2, #8]
 800a79c:	a904      	add	r1, sp, #16
 800a79e:	2002      	movs	r0, #2
 800a7a0:	47a8      	blx	r5
 800a7a2:	e7ad      	b.n	800a700 <TST_TX_Start+0xa4>
        TxConfig.lora.Bandwidth = (RADIO_LoRaBandwidths_t) testParam.bandwidth;
 800a7a4:	4a2b      	ldr	r2, [pc, #172]	; (800a854 <TST_TX_Start+0x1f8>)
 800a7a6:	7b13      	ldrb	r3, [r2, #12]
 800a7a8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
        TxConfig.lora.SpreadingFactor = (RADIO_LoRaSpreadingFactors_t) testParam.loraSf_datarate; /*BitRate*/
 800a7ac:	7c13      	ldrb	r3, [r2, #16]
 800a7ae:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
        TxConfig.lora.Coderate = (RADIO_LoRaCodingRates_t)testParam.codingRate;
 800a7b2:	7d13      	ldrb	r3, [r2, #20]
 800a7b4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
        TxConfig.lora.LowDatarateOptimize = (RADIO_Ld_Opt_t)testParam.lowDrOpt; /*0 inactive, 1 active, 2: auto*/
 800a7b8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800a7bc:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        TxConfig.lora.PreambleLen = LORA_PREAMBLE_LENGTH;
 800a7c0:	2308      	movs	r3, #8
 800a7c2:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        TxConfig.lora.LengthMode = RADIO_LORA_PACKET_VARIABLE_LENGTH;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
        TxConfig.lora.CrcMode = RADIO_LORA_CRC_ON;
 800a7cc:	2001      	movs	r0, #1
 800a7ce:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
        TxConfig.lora.IqInverted = RADIO_LORA_IQ_NORMAL;
 800a7d2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        Radio.RadioSetTxGenericConfig(GENERIC_LORA, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 800a7d6:	4b1e      	ldr	r3, [pc, #120]	; (800a850 <TST_TX_Start+0x1f4>)
 800a7d8:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800a7da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a7de:	f992 2008 	ldrsb.w	r2, [r2, #8]
 800a7e2:	a904      	add	r1, sp, #16
 800a7e4:	47a8      	blx	r5
 800a7e6:	e78b      	b.n	800a700 <TST_TX_Start+0xa4>
        APP_TPRINTF("OnTxDone\r\n");
 800a7e8:	4b21      	ldr	r3, [pc, #132]	; (800a870 <TST_TX_Start+0x214>)
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	4608      	mov	r0, r1
 800a7f0:	f017 fd14 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800a7f4:	e794      	b.n	800a720 <TST_TX_Start+0xc4>
        APP_TPRINTF("OnTxTimeout\r\n");
 800a7f6:	4b1f      	ldr	r3, [pc, #124]	; (800a874 <TST_TX_Start+0x218>)
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	4608      	mov	r0, r1
 800a7fe:	f017 fd0d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800a802:	e791      	b.n	800a728 <TST_TX_Start+0xcc>
        APP_TPRINTF("OnRxError\r\n");
 800a804:	4b1c      	ldr	r3, [pc, #112]	; (800a878 <TST_TX_Start+0x21c>)
 800a806:	2201      	movs	r2, #1
 800a808:	2100      	movs	r1, #0
 800a80a:	4608      	mov	r0, r1
 800a80c:	f017 fd06 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800a810:	e78e      	b.n	800a730 <TST_TX_Start+0xd4>
    TestState &= ~TX_TEST_LORA;
 800a812:	4a07      	ldr	r2, [pc, #28]	; (800a830 <TST_TX_Start+0x1d4>)
 800a814:	7813      	ldrb	r3, [r2, #0]
 800a816:	f023 0304 	bic.w	r3, r3, #4
 800a81a:	7013      	strb	r3, [r2, #0]
    return 0;
 800a81c:	2000      	movs	r0, #0
}
 800a81e:	b013      	add	sp, #76	; 0x4c
 800a820:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return -1;
 800a822:	f04f 30ff 	mov.w	r0, #4294967295
 800a826:	e7fa      	b.n	800a81e <TST_TX_Start+0x1c2>
        return -1; /*error*/
 800a828:	f04f 30ff 	mov.w	r0, #4294967295
 800a82c:	e7f7      	b.n	800a81e <TST_TX_Start+0x1c2>
 800a82e:	bf00      	nop
 800a830:	20000a90 	.word	0x20000a90
 800a834:	08026e24 	.word	0x08026e24
 800a838:	20000a64 	.word	0x20000a64
 800a83c:	0800a459 	.word	0x0800a459
 800a840:	0800a46d 	.word	0x0800a46d
 800a844:	0800a4a1 	.word	0x0800a4a1
 800a848:	0800a4b5 	.word	0x0800a4b5
 800a84c:	0800a4c9 	.word	0x0800a4c9
 800a850:	08028984 	.word	0x08028984
 800a854:	20000130 	.word	0x20000130
 800a858:	20000a94 	.word	0x20000a94
 800a85c:	20000a88 	.word	0x20000a88
 800a860:	20000a8c 	.word	0x20000a8c
 800a864:	20000a60 	.word	0x20000a60
 800a868:	08026e34 	.word	0x08026e34
 800a86c:	08024920 	.word	0x08024920
 800a870:	08026e44 	.word	0x08026e44
 800a874:	08026e50 	.word	0x08026e50
 800a878:	08026e60 	.word	0x08026e60

0800a87c <TST_RX_Start>:
{
 800a87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a880:	b096      	sub	sp, #88	; 0x58
 800a882:	4606      	mov	r6, r0
  RxConfigGeneric_t RxConfig = {0};
 800a884:	223c      	movs	r2, #60	; 0x3c
 800a886:	2100      	movs	r1, #0
 800a888:	a807      	add	r0, sp, #28
 800a88a:	f019 fb45 	bl	8023f18 <memset>
  if (((TestState & RX_TEST_LORA) != RX_TEST_LORA) && (nb_packet > 0))
 800a88e:	4b94      	ldr	r3, [pc, #592]	; (800aae0 <TST_RX_Start+0x264>)
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	f013 0808 	ands.w	r8, r3, #8
 800a896:	f040 8119 	bne.w	800aacc <TST_RX_Start+0x250>
 800a89a:	2e00      	cmp	r6, #0
 800a89c:	f340 8119 	ble.w	800aad2 <TST_RX_Start+0x256>
    TestState |= RX_TEST_LORA;
 800a8a0:	f043 0308 	orr.w	r3, r3, #8
 800a8a4:	4a8e      	ldr	r2, [pc, #568]	; (800aae0 <TST_RX_Start+0x264>)
 800a8a6:	7013      	strb	r3, [r2, #0]
	whileEnd = 1;
 800a8a8:	2401      	movs	r4, #1
 800a8aa:	4b8e      	ldr	r3, [pc, #568]	; (800aae4 <TST_RX_Start+0x268>)
 800a8ac:	601c      	str	r4, [r3, #0]
    RadioEvents.TxDone = OnTxDone;
 800a8ae:	488e      	ldr	r0, [pc, #568]	; (800aae8 <TST_RX_Start+0x26c>)
 800a8b0:	4b8e      	ldr	r3, [pc, #568]	; (800aaec <TST_RX_Start+0x270>)
 800a8b2:	6003      	str	r3, [r0, #0]
    RadioEvents.RxDone = OnRxDone;
 800a8b4:	4b8e      	ldr	r3, [pc, #568]	; (800aaf0 <TST_RX_Start+0x274>)
 800a8b6:	6083      	str	r3, [r0, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 800a8b8:	4b8e      	ldr	r3, [pc, #568]	; (800aaf4 <TST_RX_Start+0x278>)
 800a8ba:	6043      	str	r3, [r0, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 800a8bc:	4b8e      	ldr	r3, [pc, #568]	; (800aaf8 <TST_RX_Start+0x27c>)
 800a8be:	60c3      	str	r3, [r0, #12]
    RadioEvents.RxError = OnRxError;
 800a8c0:	4b8e      	ldr	r3, [pc, #568]	; (800aafc <TST_RX_Start+0x280>)
 800a8c2:	6103      	str	r3, [r0, #16]
    Radio.Init(&RadioEvents);
 800a8c4:	4b8e      	ldr	r3, [pc, #568]	; (800ab00 <TST_RX_Start+0x284>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4798      	blx	r3
  uint32_t count_RxKo = 0;
 800a8ca:	2500      	movs	r5, #0
  uint32_t count_RxOk = 0;
 800a8cc:	462f      	mov	r7, r5
    for (i = 1; i <= nb_packet; i++)
 800a8ce:	e082      	b.n	800a9d6 <TST_RX_Start+0x15a>
        RxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 8);
 800a8d0:	4643      	mov	r3, r8
 800a8d2:	e09b      	b.n	800aa0c <TST_RX_Start+0x190>
      else if (testParam.modulation == TEST_LORA)
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	f040 80ff 	bne.w	800aad8 <TST_RX_Start+0x25c>
        RxConfig.lora.Bandwidth = (RADIO_LoRaBandwidths_t) testParam.bandwidth;
 800a8da:	4b8a      	ldr	r3, [pc, #552]	; (800ab04 <TST_RX_Start+0x288>)
 800a8dc:	7b1a      	ldrb	r2, [r3, #12]
 800a8de:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
        RxConfig.lora.SpreadingFactor = (RADIO_LoRaSpreadingFactors_t) testParam.loraSf_datarate; /*BitRate*/
 800a8e2:	7c1a      	ldrb	r2, [r3, #16]
 800a8e4:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
        RxConfig.lora.Coderate = (RADIO_LoRaCodingRates_t)testParam.codingRate;
 800a8e8:	7d1a      	ldrb	r2, [r3, #20]
 800a8ea:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
        RxConfig.lora.LowDatarateOptimize = (RADIO_Ld_Opt_t)testParam.lowDrOpt; /*0 inactive, 1 active, 2: auto*/
 800a8ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8f2:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
        RxConfig.lora.PreambleLen = LORA_PREAMBLE_LENGTH;
 800a8f6:	2308      	movs	r3, #8
 800a8f8:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        RxConfig.lora.LengthMode = RADIO_LORA_PACKET_VARIABLE_LENGTH;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
        RxConfig.lora.CrcMode = RADIO_LORA_CRC_ON;
 800a902:	2001      	movs	r0, #1
 800a904:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
        RxConfig.lora.IqInverted = RADIO_LORA_IQ_NORMAL;
 800a908:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
        Radio.RadioSetRxGenericConfig(GENERIC_LORA, &RxConfig, RX_CONTINUOUS_ON, LORA_SYMBOL_TIMEOUT);
 800a90c:	4b7c      	ldr	r3, [pc, #496]	; (800ab00 <TST_RX_Start+0x284>)
 800a90e:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
 800a912:	231e      	movs	r3, #30
 800a914:	4602      	mov	r2, r0
 800a916:	a907      	add	r1, sp, #28
 800a918:	47c8      	blx	r9
 800a91a:	e0a2      	b.n	800aa62 <TST_RX_Start+0x1e6>
        Radio.RxBoosted(RX_TIMEOUT_VALUE);
 800a91c:	4b78      	ldr	r3, [pc, #480]	; (800ab00 <TST_RX_Start+0x284>)
 800a91e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a920:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a924:	4798      	blx	r3
 800a926:	e0a6      	b.n	800aa76 <TST_RX_Start+0x1fa>
        int16_t rssi = last_rx_rssi;
 800a928:	4b77      	ldr	r3, [pc, #476]	; (800ab08 <TST_RX_Start+0x28c>)
 800a92a:	f8b3 9000 	ldrh.w	r9, [r3]
 800a92e:	fa0f f989 	sxth.w	r9, r9
        int8_t LoraSnr_FskCfo = last_rx_LoraSnr_FskCfo;
 800a932:	4b76      	ldr	r3, [pc, #472]	; (800ab0c <TST_RX_Start+0x290>)
 800a934:	f893 a000 	ldrb.w	sl, [r3]
 800a938:	fa4f fa8a 	sxtb.w	sl, sl
        APP_TPRINTF("OnRxDone\r\n");
 800a93c:	4b74      	ldr	r3, [pc, #464]	; (800ab10 <TST_RX_Start+0x294>)
 800a93e:	2201      	movs	r2, #1
 800a940:	2100      	movs	r1, #0
 800a942:	4608      	mov	r0, r1
 800a944:	f017 fc6a 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
        if (testParam.modulation == TEST_FSK)
 800a948:	4b6e      	ldr	r3, [pc, #440]	; (800ab04 <TST_RX_Start+0x288>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	b953      	cbnz	r3, 800a964 <TST_RX_Start+0xe8>
          APP_TPRINTF("RssiValue=%d dBm, cfo=%dkHz\r\n", rssi, LoraSnr_FskCfo);
 800a94e:	f8cd a004 	str.w	sl, [sp, #4]
 800a952:	f8cd 9000 	str.w	r9, [sp]
 800a956:	4b6f      	ldr	r3, [pc, #444]	; (800ab14 <TST_RX_Start+0x298>)
 800a958:	2201      	movs	r2, #1
 800a95a:	2100      	movs	r1, #0
 800a95c:	4608      	mov	r0, r1
 800a95e:	f017 fc5d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800a962:	e093      	b.n	800aa8c <TST_RX_Start+0x210>
          APP_TPRINTF("RssiValue=%d dBm, SnrValue=%ddB\r\n", rssi, LoraSnr_FskCfo);
 800a964:	f8cd a004 	str.w	sl, [sp, #4]
 800a968:	f8cd 9000 	str.w	r9, [sp]
 800a96c:	4b6a      	ldr	r3, [pc, #424]	; (800ab18 <TST_RX_Start+0x29c>)
 800a96e:	2201      	movs	r2, #1
 800a970:	2100      	movs	r1, #0
 800a972:	4608      	mov	r0, r1
 800a974:	f017 fc52 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800a978:	e088      	b.n	800aa8c <TST_RX_Start+0x210>
        APP_TPRINTF("OnRxTimeout\r\n");
 800a97a:	4b68      	ldr	r3, [pc, #416]	; (800ab1c <TST_RX_Start+0x2a0>)
 800a97c:	2201      	movs	r2, #1
 800a97e:	2100      	movs	r1, #0
 800a980:	4608      	mov	r0, r1
 800a982:	f017 fc4b 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800a986:	e086      	b.n	800aa96 <TST_RX_Start+0x21a>
        APP_TPRINTF("OnRxError\r\n");
 800a988:	4b65      	ldr	r3, [pc, #404]	; (800ab20 <TST_RX_Start+0x2a4>)
 800a98a:	2201      	movs	r2, #1
 800a98c:	2100      	movs	r1, #0
 800a98e:	4608      	mov	r0, r1
 800a990:	f017 fc44 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800a994:	e084      	b.n	800aaa0 <TST_RX_Start+0x224>
        count_RxKo++;
 800a996:	3501      	adds	r5, #1
      if (RadioRxDone_flag == 1)
 800a998:	4b62      	ldr	r3, [pc, #392]	; (800ab24 <TST_RX_Start+0x2a8>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	f000 808a 	beq.w	800aab6 <TST_RX_Start+0x23a>
      RadioRxDone_flag = 0;
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	4b5f      	ldr	r3, [pc, #380]	; (800ab24 <TST_RX_Start+0x2a8>)
 800a9a6:	6018      	str	r0, [r3, #0]
      RadioRxTimeout_flag = 0;
 800a9a8:	4b5f      	ldr	r3, [pc, #380]	; (800ab28 <TST_RX_Start+0x2ac>)
 800a9aa:	6018      	str	r0, [r3, #0]
      RadioError_flag = 0;
 800a9ac:	4b5f      	ldr	r3, [pc, #380]	; (800ab2c <TST_RX_Start+0x2b0>)
 800a9ae:	6018      	str	r0, [r3, #0]
      PER = (100 * (count_RxKo)) / (count_RxKo + count_RxOk);
 800a9b0:	2364      	movs	r3, #100	; 0x64
 800a9b2:	fb03 f305 	mul.w	r3, r3, r5
 800a9b6:	197a      	adds	r2, r7, r5
 800a9b8:	fbb3 f3f2 	udiv	r3, r3, r2
      APP_TPRINTF("Rx %d of %d  >>> PER= %d %%\r\n", i, nb_packet, PER);
 800a9bc:	9302      	str	r3, [sp, #8]
 800a9be:	9601      	str	r6, [sp, #4]
 800a9c0:	9400      	str	r4, [sp, #0]
 800a9c2:	4b5b      	ldr	r3, [pc, #364]	; (800ab30 <TST_RX_Start+0x2b4>)
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	4601      	mov	r1, r0
 800a9c8:	f017 fc28 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
	  if(whileEnd == 0)
 800a9cc:	4b45      	ldr	r3, [pc, #276]	; (800aae4 <TST_RX_Start+0x268>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	b903      	cbnz	r3, 800a9d4 <TST_RX_Start+0x158>
	  	i = nb_packet;
 800a9d2:	4634      	mov	r4, r6
    for (i = 1; i <= nb_packet; i++)
 800a9d4:	3401      	adds	r4, #1
 800a9d6:	42b4      	cmp	r4, r6
 800a9d8:	dc6f      	bgt.n	800aaba <TST_RX_Start+0x23e>
      Radio.SetChannel(testParam.freq);
 800a9da:	4b49      	ldr	r3, [pc, #292]	; (800ab00 <TST_RX_Start+0x284>)
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800ab04 <TST_RX_Start+0x288>
 800a9e2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800a9e6:	4798      	blx	r3
      if (testParam.modulation == TEST_FSK)
 800a9e8:	f8d9 3000 	ldr.w	r3, [r9]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f47f af71 	bne.w	800a8d4 <TST_RX_Start+0x58>
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a9f2:	4a50      	ldr	r2, [pc, #320]	; (800ab34 <TST_RX_Start+0x2b8>)
 800a9f4:	ab05      	add	r3, sp, #20
 800a9f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9fa:	e883 0003 	stmia.w	r3, {r0, r1}
        RxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 8);
 800a9fe:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f43f af64 	beq.w	800a8d0 <TST_RX_Start+0x54>
 800aa08:	3308      	adds	r3, #8
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	f88d 3020 	strb.w	r3, [sp, #32]
        RxConfig.fsk.Bandwidth = testParam.bandwidth;
 800aa10:	4b3c      	ldr	r3, [pc, #240]	; (800ab04 <TST_RX_Start+0x288>)
 800aa12:	68da      	ldr	r2, [r3, #12]
 800aa14:	9209      	str	r2, [sp, #36]	; 0x24
        RxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	930a      	str	r3, [sp, #40]	; 0x28
        RxConfig.fsk.PreambleLen = 3; /*in Byte*/
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	930b      	str	r3, [sp, #44]	; 0x2c
        RxConfig.fsk.SyncWordLength = 3; /*in Byte*/
 800aa1e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
        RxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800aa22:	ab05      	add	r3, sp, #20
 800aa24:	930d      	str	r3, [sp, #52]	; 0x34
        RxConfig.fsk.PreambleMinDetect = RADIO_FSK_PREAMBLE_DETECTOR_08_BITS;
 800aa26:	2304      	movs	r3, #4
 800aa28:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        RxConfig.fsk.whiteSeed = 0x01FF ; /*WhiteningSeed*/
 800aa2c:	f240 13ff 	movw	r3, #511	; 0x1ff
 800aa30:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        RxConfig.fsk.LengthMode = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800aa34:	2201      	movs	r2, #1
 800aa36:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
        RxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800aa3a:	23f2      	movs	r3, #242	; 0xf2
 800aa3c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        RxConfig.fsk.CrcPolynomial = 0x1021;
 800aa40:	f241 0321 	movw	r3, #4129	; 0x1021
 800aa44:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        RxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
 800aa48:	2000      	movs	r0, #0
 800aa4a:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
        RxConfig.fsk.MaxPayloadLength = 255;
 800aa4e:	23ff      	movs	r3, #255	; 0xff
 800aa50:	930e      	str	r3, [sp, #56]	; 0x38
        RxConfig.fsk.AddrComp = RADIO_FSK_ADDRESSCOMP_FILT_OFF;
 800aa52:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
        Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0);
 800aa56:	4b2a      	ldr	r3, [pc, #168]	; (800ab00 <TST_RX_Start+0x284>)
 800aa58:	f8d3 9074 	ldr.w	r9, [r3, #116]	; 0x74
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	a907      	add	r1, sp, #28
 800aa60:	47c8      	blx	r9
      if (testParam.lna == 0)
 800aa62:	4b28      	ldr	r3, [pc, #160]	; (800ab04 <TST_RX_Start+0x288>)
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	f47f af58 	bne.w	800a91c <TST_RX_Start+0xa0>
        Radio.Rx(RX_TIMEOUT_VALUE);
 800aa6c:	4b24      	ldr	r3, [pc, #144]	; (800ab00 <TST_RX_Start+0x284>)
 800aa6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa70:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aa74:	4798      	blx	r3
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800aa76:	2001      	movs	r0, #1
 800aa78:	f017 fdd4 	bl	8022624 <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 800aa7c:	4b20      	ldr	r3, [pc, #128]	; (800ab00 <TST_RX_Start+0x284>)
 800aa7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa80:	4798      	blx	r3
      if (RadioRxDone_flag == 1)
 800aa82:	4b28      	ldr	r3, [pc, #160]	; (800ab24 <TST_RX_Start+0x2a8>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	f43f af4e 	beq.w	800a928 <TST_RX_Start+0xac>
      if (RadioRxTimeout_flag == 1)
 800aa8c:	4b26      	ldr	r3, [pc, #152]	; (800ab28 <TST_RX_Start+0x2ac>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	f43f af72 	beq.w	800a97a <TST_RX_Start+0xfe>
      if (RadioError_flag == 1)
 800aa96:	4b25      	ldr	r3, [pc, #148]	; (800ab2c <TST_RX_Start+0x2b0>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	f43f af74 	beq.w	800a988 <TST_RX_Start+0x10c>
      if ((RadioRxTimeout_flag == 1) || (RadioError_flag == 1))
 800aaa0:	4b21      	ldr	r3, [pc, #132]	; (800ab28 <TST_RX_Start+0x2ac>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	f43f af76 	beq.w	800a996 <TST_RX_Start+0x11a>
 800aaaa:	4b20      	ldr	r3, [pc, #128]	; (800ab2c <TST_RX_Start+0x2b0>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	f47f af72 	bne.w	800a998 <TST_RX_Start+0x11c>
 800aab4:	e76f      	b.n	800a996 <TST_RX_Start+0x11a>
        count_RxOk++;
 800aab6:	3701      	adds	r7, #1
 800aab8:	e773      	b.n	800a9a2 <TST_RX_Start+0x126>
    TestState &= ~RX_TEST_LORA;
 800aaba:	4a09      	ldr	r2, [pc, #36]	; (800aae0 <TST_RX_Start+0x264>)
 800aabc:	7813      	ldrb	r3, [r2, #0]
 800aabe:	f023 0308 	bic.w	r3, r3, #8
 800aac2:	7013      	strb	r3, [r2, #0]
    return 0;
 800aac4:	2000      	movs	r0, #0
}
 800aac6:	b016      	add	sp, #88	; 0x58
 800aac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return -1;
 800aacc:	f04f 30ff 	mov.w	r0, #4294967295
 800aad0:	e7f9      	b.n	800aac6 <TST_RX_Start+0x24a>
 800aad2:	f04f 30ff 	mov.w	r0, #4294967295
 800aad6:	e7f6      	b.n	800aac6 <TST_RX_Start+0x24a>
        return -1; /*error*/
 800aad8:	f04f 30ff 	mov.w	r0, #4294967295
 800aadc:	e7f3      	b.n	800aac6 <TST_RX_Start+0x24a>
 800aade:	bf00      	nop
 800aae0:	20000a90 	.word	0x20000a90
 800aae4:	20002870 	.word	0x20002870
 800aae8:	20000a64 	.word	0x20000a64
 800aaec:	0800a459 	.word	0x0800a459
 800aaf0:	0800a46d 	.word	0x0800a46d
 800aaf4:	0800a4a1 	.word	0x0800a4a1
 800aaf8:	0800a4b5 	.word	0x0800a4b5
 800aafc:	0800a4c9 	.word	0x0800a4c9
 800ab00:	08028984 	.word	0x08028984
 800ab04:	20000130 	.word	0x20000130
 800ab08:	20000a92 	.word	0x20000a92
 800ab0c:	20000a91 	.word	0x20000a91
 800ab10:	08026e6c 	.word	0x08026e6c
 800ab14:	08026e78 	.word	0x08026e78
 800ab18:	08026e98 	.word	0x08026e98
 800ab1c:	08026ebc 	.word	0x08026ebc
 800ab20:	08026e60 	.word	0x08026e60
 800ab24:	20000a80 	.word	0x20000a80
 800ab28:	20000a84 	.word	0x20000a84
 800ab2c:	20000a60 	.word	0x20000a60
 800ab30:	08026ecc 	.word	0x08026ecc
 800ab34:	08024920 	.word	0x08024920

0800ab38 <TST_Modu_TX_Start>:

/* USER CODE BEGIN PrFD */
int32_t TST_Modu_TX_Start(void)
{
 800ab38:	b570      	push	{r4, r5, r6, lr}
 800ab3a:	b090      	sub	sp, #64	; 0x40
  /* USER CODE BEGIN TST_TX_Start_1 */

  /* USER CODE END TST_TX_Start_1 */
  TxConfigGeneric_t TxConfig;

  if ((TestState & TX_TEST_LORA) != TX_TEST_LORA)
 800ab3c:	4b4a      	ldr	r3, [pc, #296]	; (800ac68 <TST_Modu_TX_Start+0x130>)
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	f013 0604 	ands.w	r6, r3, #4
 800ab44:	d14f      	bne.n	800abe6 <TST_Modu_TX_Start+0xae>
  {
    TestState |= TX_TEST_LORA;
 800ab46:	f043 0304 	orr.w	r3, r3, #4
 800ab4a:	4a47      	ldr	r2, [pc, #284]	; (800ac68 <TST_Modu_TX_Start+0x130>)
 800ab4c:	7013      	strb	r3, [r2, #0]


    /* Radio initialization */
    RadioEvents.TxDone = OnTxDone;
 800ab4e:	4847      	ldr	r0, [pc, #284]	; (800ac6c <TST_Modu_TX_Start+0x134>)
 800ab50:	4b47      	ldr	r3, [pc, #284]	; (800ac70 <TST_Modu_TX_Start+0x138>)
 800ab52:	6003      	str	r3, [r0, #0]
    RadioEvents.RxDone = OnRxDone;
 800ab54:	4b47      	ldr	r3, [pc, #284]	; (800ac74 <TST_Modu_TX_Start+0x13c>)
 800ab56:	6083      	str	r3, [r0, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 800ab58:	4b47      	ldr	r3, [pc, #284]	; (800ac78 <TST_Modu_TX_Start+0x140>)
 800ab5a:	6043      	str	r3, [r0, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 800ab5c:	4b47      	ldr	r3, [pc, #284]	; (800ac7c <TST_Modu_TX_Start+0x144>)
 800ab5e:	60c3      	str	r3, [r0, #12]
    RadioEvents.RxError = OnRxError;
 800ab60:	4b47      	ldr	r3, [pc, #284]	; (800ac80 <TST_Modu_TX_Start+0x148>)
 800ab62:	6103      	str	r3, [r0, #16]
    Radio.Init(&RadioEvents);
 800ab64:	4d47      	ldr	r5, [pc, #284]	; (800ac84 <TST_Modu_TX_Start+0x14c>)
 800ab66:	682b      	ldr	r3, [r5, #0]
 800ab68:	4798      	blx	r3
    /*Fill payload with PRBS9 data*/
    Prbs9_generator(payload, testParam.payloadLen);
 800ab6a:	4c47      	ldr	r4, [pc, #284]	; (800ac88 <TST_Modu_TX_Start+0x150>)
 800ab6c:	f894 1020 	ldrb.w	r1, [r4, #32]
 800ab70:	4846      	ldr	r0, [pc, #280]	; (800ac8c <TST_Modu_TX_Start+0x154>)
 800ab72:	f7ff fc45 	bl	800a400 <Prbs9_generator>

      Radio.SetChannel(testParam.freq);
 800ab76:	68eb      	ldr	r3, [r5, #12]
 800ab78:	6860      	ldr	r0, [r4, #4]
 800ab7a:	4798      	blx	r3

      if (testParam.modulation == TEST_FSK)
 800ab7c:	6823      	ldr	r3, [r4, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d13c      	bne.n	800abfc <TST_Modu_TX_Start+0xc4>
      {
        /*fsk modulation*/
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800ab82:	4a43      	ldr	r2, [pc, #268]	; (800ac90 <TST_Modu_TX_Start+0x158>)
 800ab84:	466b      	mov	r3, sp
 800ab86:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ab8a:	e883 0003 	stmia.w	r3, {r0, r1}
        TxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 7);
 800ab8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab90:	b10b      	cbz	r3, 800ab96 <TST_Modu_TX_Start+0x5e>
 800ab92:	1dde      	adds	r6, r3, #7
 800ab94:	b2f6      	uxtb	r6, r6
 800ab96:	f88d 6008 	strb.w	r6, [sp, #8]
        TxConfig.fsk.Bandwidth = testParam.bandwidth;
 800ab9a:	4a3b      	ldr	r2, [pc, #236]	; (800ac88 <TST_Modu_TX_Start+0x150>)
 800ab9c:	68d3      	ldr	r3, [r2, #12]
 800ab9e:	9303      	str	r3, [sp, #12]
        TxConfig.fsk.FrequencyDeviation = testParam.fskDev;
 800aba0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800aba2:	9305      	str	r3, [sp, #20]
        TxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800aba4:	6913      	ldr	r3, [r2, #16]
 800aba6:	9304      	str	r3, [sp, #16]
        TxConfig.fsk.PreambleLen = 3;   /*in Byte        */
 800aba8:	2303      	movs	r3, #3
 800abaa:	9306      	str	r3, [sp, #24]
        TxConfig.fsk.SyncWordLength = 3; /*in Byte        */
 800abac:	f88d 301c 	strb.w	r3, [sp, #28]
        TxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800abb0:	f8cd d020 	str.w	sp, [sp, #32]
        TxConfig.fsk.whiteSeed = 0x01FF ; /*WhiteningSeed  */
 800abb4:	f240 13ff 	movw	r3, #511	; 0x1ff
 800abb8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        TxConfig.fsk.HeaderType = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800abbc:	2301      	movs	r3, #1
 800abbe:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        TxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800abc2:	23f2      	movs	r3, #242	; 0xf2
 800abc4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        TxConfig.fsk.CrcPolynomial = 0x1021;
 800abc8:	f241 0321 	movw	r3, #4129	; 0x1021
 800abcc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        TxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
 800abd0:	2000      	movs	r0, #0
 800abd2:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
        Radio.RadioSetTxGenericConfig(GENERIC_FSK, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 800abd6:	4b2b      	ldr	r3, [pc, #172]	; (800ac84 <TST_Modu_TX_Start+0x14c>)
 800abd8:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800abda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800abde:	f992 2008 	ldrsb.w	r2, [r2, #8]
 800abe2:	a902      	add	r1, sp, #8
 800abe4:	47a0      	blx	r4
        return -1; /*error*/
      }
		
    }
	//Modulation Continuous Test
  	Radio.TxPrbs();
 800abe6:	4b27      	ldr	r3, [pc, #156]	; (800ac84 <TST_Modu_TX_Start+0x14c>)
 800abe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abea:	4798      	blx	r3
  
    TestState &= ~TX_TEST_LORA;
 800abec:	4a1e      	ldr	r2, [pc, #120]	; (800ac68 <TST_Modu_TX_Start+0x130>)
 800abee:	7813      	ldrb	r3, [r2, #0]
 800abf0:	f023 0304 	bic.w	r3, r3, #4
 800abf4:	7013      	strb	r3, [r2, #0]
    return 0;
 800abf6:	2000      	movs	r0, #0
  /* USER CODE BEGIN TST_TX_Start_2 */

  /* USER CODE END TST_TX_Start_2 */
}
 800abf8:	b010      	add	sp, #64	; 0x40
 800abfa:	bd70      	pop	{r4, r5, r6, pc}
      else if (testParam.modulation == TEST_LORA)
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d00e      	beq.n	800ac1e <TST_Modu_TX_Start+0xe6>
      else if (testParam.modulation == TEST_BPSK)
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d12e      	bne.n	800ac62 <TST_Modu_TX_Start+0x12a>
        TxConfig.bpsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800ac04:	4a20      	ldr	r2, [pc, #128]	; (800ac88 <TST_Modu_TX_Start+0x150>)
 800ac06:	6913      	ldr	r3, [r2, #16]
 800ac08:	930f      	str	r3, [sp, #60]	; 0x3c
        Radio.RadioSetTxGenericConfig(GENERIC_BPSK, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 800ac0a:	4b1e      	ldr	r3, [pc, #120]	; (800ac84 <TST_Modu_TX_Start+0x14c>)
 800ac0c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800ac0e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800ac12:	f992 2008 	ldrsb.w	r2, [r2, #8]
 800ac16:	a902      	add	r1, sp, #8
 800ac18:	2002      	movs	r0, #2
 800ac1a:	47a0      	blx	r4
 800ac1c:	e7e3      	b.n	800abe6 <TST_Modu_TX_Start+0xae>
        TxConfig.lora.Bandwidth = (RADIO_LoRaBandwidths_t) testParam.bandwidth;
 800ac1e:	4a1a      	ldr	r2, [pc, #104]	; (800ac88 <TST_Modu_TX_Start+0x150>)
 800ac20:	7b13      	ldrb	r3, [r2, #12]
 800ac22:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
        TxConfig.lora.SpreadingFactor = (RADIO_LoRaSpreadingFactors_t) testParam.loraSf_datarate; /*BitRate*/
 800ac26:	7c13      	ldrb	r3, [r2, #16]
 800ac28:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        TxConfig.lora.Coderate = (RADIO_LoRaCodingRates_t)testParam.codingRate;
 800ac2c:	7d13      	ldrb	r3, [r2, #20]
 800ac2e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        TxConfig.lora.LowDatarateOptimize = (RADIO_Ld_Opt_t)testParam.lowDrOpt; /*0 inactive, 1 active, 2: auto*/
 800ac32:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800ac36:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        TxConfig.lora.PreambleLen = LORA_PREAMBLE_LENGTH;
 800ac3a:	2308      	movs	r3, #8
 800ac3c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        TxConfig.lora.LengthMode = RADIO_LORA_PACKET_VARIABLE_LENGTH;
 800ac40:	2300      	movs	r3, #0
 800ac42:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
        TxConfig.lora.CrcMode = RADIO_LORA_CRC_ON;
 800ac46:	2001      	movs	r0, #1
 800ac48:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
        TxConfig.lora.IqInverted = RADIO_LORA_IQ_NORMAL;
 800ac4c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
        Radio.RadioSetTxGenericConfig(GENERIC_LORA, &TxConfig, testParam.power, CONTINUOUS_TIMEOUT);
 800ac50:	4b0c      	ldr	r3, [pc, #48]	; (800ac84 <TST_Modu_TX_Start+0x14c>)
 800ac52:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800ac54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac58:	f992 2008 	ldrsb.w	r2, [r2, #8]
 800ac5c:	a902      	add	r1, sp, #8
 800ac5e:	47a0      	blx	r4
 800ac60:	e7c1      	b.n	800abe6 <TST_Modu_TX_Start+0xae>
        return -1; /*error*/
 800ac62:	f04f 30ff 	mov.w	r0, #4294967295
 800ac66:	e7c7      	b.n	800abf8 <TST_Modu_TX_Start+0xc0>
 800ac68:	20000a90 	.word	0x20000a90
 800ac6c:	20000a64 	.word	0x20000a64
 800ac70:	0800a459 	.word	0x0800a459
 800ac74:	0800a46d 	.word	0x0800a46d
 800ac78:	0800a4a1 	.word	0x0800a4a1
 800ac7c:	0800a4b5 	.word	0x0800a4b5
 800ac80:	0800a4c9 	.word	0x0800a4c9
 800ac84:	08028984 	.word	0x08028984
 800ac88:	20000130 	.word	0x20000130
 800ac8c:	20000a94 	.word	0x20000a94
 800ac90:	08024920 	.word	0x08024920

0800ac94 <TST_Modu_RX_Start>:

int32_t TST_Modu_RX_Start(void)
{
 800ac94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac98:	b094      	sub	sp, #80	; 0x50
  int32_t i = 0;
  /* init of PER counter */
  uint32_t count_RxOk = 0;
  uint32_t count_RxKo = 0;
  uint32_t PER = 0;
  RxConfigGeneric_t RxConfig = {0};
 800ac9a:	223c      	movs	r2, #60	; 0x3c
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	a805      	add	r0, sp, #20
 800aca0:	f019 f93a 	bl	8023f18 <memset>

  if (((TestState & RX_TEST_LORA) != RX_TEST_LORA))
 800aca4:	4b7d      	ldr	r3, [pc, #500]	; (800ae9c <TST_Modu_RX_Start+0x208>)
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	f013 0508 	ands.w	r5, r3, #8
 800acac:	f040 80f0 	bne.w	800ae90 <TST_Modu_RX_Start+0x1fc>
  {
    TestState |= RX_TEST_LORA;
 800acb0:	f043 0308 	orr.w	r3, r3, #8
 800acb4:	4a79      	ldr	r2, [pc, #484]	; (800ae9c <TST_Modu_RX_Start+0x208>)
 800acb6:	7013      	strb	r3, [r2, #0]
	whileEnd = 1;
 800acb8:	4b79      	ldr	r3, [pc, #484]	; (800aea0 <TST_Modu_RX_Start+0x20c>)
 800acba:	2201      	movs	r2, #1
 800acbc:	601a      	str	r2, [r3, #0]

    /* Radio initialization */
    RadioEvents.TxDone = OnTxDone;
 800acbe:	4879      	ldr	r0, [pc, #484]	; (800aea4 <TST_Modu_RX_Start+0x210>)
 800acc0:	4b79      	ldr	r3, [pc, #484]	; (800aea8 <TST_Modu_RX_Start+0x214>)
 800acc2:	6003      	str	r3, [r0, #0]
    RadioEvents.RxDone = OnRxDone;
 800acc4:	4b79      	ldr	r3, [pc, #484]	; (800aeac <TST_Modu_RX_Start+0x218>)
 800acc6:	6083      	str	r3, [r0, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 800acc8:	4b79      	ldr	r3, [pc, #484]	; (800aeb0 <TST_Modu_RX_Start+0x21c>)
 800acca:	6043      	str	r3, [r0, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 800accc:	4b79      	ldr	r3, [pc, #484]	; (800aeb4 <TST_Modu_RX_Start+0x220>)
 800acce:	60c3      	str	r3, [r0, #12]
    RadioEvents.RxError = OnRxError;
 800acd0:	4b79      	ldr	r3, [pc, #484]	; (800aeb8 <TST_Modu_RX_Start+0x224>)
 800acd2:	6103      	str	r3, [r0, #16]
    Radio.Init(&RadioEvents);
 800acd4:	4c79      	ldr	r4, [pc, #484]	; (800aebc <TST_Modu_RX_Start+0x228>)
 800acd6:	6823      	ldr	r3, [r4, #0]
 800acd8:	4798      	blx	r3

    /* Rx config */
    Radio.SetChannel(testParam.freq);
 800acda:	68e3      	ldr	r3, [r4, #12]
 800acdc:	4c78      	ldr	r4, [pc, #480]	; (800aec0 <TST_Modu_RX_Start+0x22c>)
 800acde:	6860      	ldr	r0, [r4, #4]
 800ace0:	4798      	blx	r3

    if (testParam.modulation == TEST_FSK)
 800ace2:	6823      	ldr	r3, [r4, #0]
 800ace4:	b32b      	cbz	r3, 800ad32 <TST_Modu_RX_Start+0x9e>
        RxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
        RxConfig.fsk.MaxPayloadLength = 255;
        RxConfig.fsk.AddrComp = RADIO_FSK_ADDRESSCOMP_FILT_OFF;
        Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0);
    }
    else if (testParam.modulation == TEST_LORA)
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	f040 80d5 	bne.w	800ae96 <TST_Modu_RX_Start+0x202>
    {
        /*Lora*/
        RxConfig.lora.Bandwidth = (RADIO_LoRaBandwidths_t) testParam.bandwidth;
 800acec:	4b74      	ldr	r3, [pc, #464]	; (800aec0 <TST_Modu_RX_Start+0x22c>)
 800acee:	7b1a      	ldrb	r2, [r3, #12]
 800acf0:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
        RxConfig.lora.SpreadingFactor = (RADIO_LoRaSpreadingFactors_t) testParam.loraSf_datarate; /*BitRate*/
 800acf4:	7c1a      	ldrb	r2, [r3, #16]
 800acf6:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
        RxConfig.lora.Coderate = (RADIO_LoRaCodingRates_t)testParam.codingRate;
 800acfa:	7d1a      	ldrb	r2, [r3, #20]
 800acfc:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
        RxConfig.lora.LowDatarateOptimize = (RADIO_Ld_Opt_t)testParam.lowDrOpt; /*0 inactive, 1 active, 2: auto*/
 800ad00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad04:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
        RxConfig.lora.PreambleLen = LORA_PREAMBLE_LENGTH;
 800ad08:	2308      	movs	r3, #8
 800ad0a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        RxConfig.lora.LengthMode = RADIO_LORA_PACKET_VARIABLE_LENGTH;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
        RxConfig.lora.CrcMode = RADIO_LORA_CRC_ON;
 800ad14:	2001      	movs	r0, #1
 800ad16:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
        RxConfig.lora.IqInverted = RADIO_LORA_IQ_NORMAL;
 800ad1a:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
        Radio.RadioSetRxGenericConfig(GENERIC_LORA, &RxConfig, RX_CONTINUOUS_ON, LORA_SYMBOL_TIMEOUT);
 800ad1e:	4b67      	ldr	r3, [pc, #412]	; (800aebc <TST_Modu_RX_Start+0x228>)
 800ad20:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800ad22:	231e      	movs	r3, #30
 800ad24:	4602      	mov	r2, r0
 800ad26:	a905      	add	r1, sp, #20
 800ad28:	47a0      	blx	r4
{
 800ad2a:	2400      	movs	r4, #0
 800ad2c:	4627      	mov	r7, r4
 800ad2e:	4625      	mov	r5, r4
 800ad30:	e082      	b.n	800ae38 <TST_Modu_RX_Start+0x1a4>
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800ad32:	4a64      	ldr	r2, [pc, #400]	; (800aec4 <TST_Modu_RX_Start+0x230>)
 800ad34:	ab03      	add	r3, sp, #12
 800ad36:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ad3a:	e883 0003 	stmia.w	r3, {r0, r1}
        RxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 8);
 800ad3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ad40:	b113      	cbz	r3, 800ad48 <TST_Modu_RX_Start+0xb4>
 800ad42:	f103 0508 	add.w	r5, r3, #8
 800ad46:	b2ed      	uxtb	r5, r5
 800ad48:	f88d 5018 	strb.w	r5, [sp, #24]
        RxConfig.fsk.Bandwidth = testParam.bandwidth;
 800ad4c:	4b5c      	ldr	r3, [pc, #368]	; (800aec0 <TST_Modu_RX_Start+0x22c>)
 800ad4e:	68da      	ldr	r2, [r3, #12]
 800ad50:	9207      	str	r2, [sp, #28]
        RxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	9308      	str	r3, [sp, #32]
        RxConfig.fsk.PreambleLen = 3; /*in Byte*/
 800ad56:	2303      	movs	r3, #3
 800ad58:	9309      	str	r3, [sp, #36]	; 0x24
        RxConfig.fsk.SyncWordLength = 3; /*in Byte*/
 800ad5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
        RxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800ad5e:	ab03      	add	r3, sp, #12
 800ad60:	930b      	str	r3, [sp, #44]	; 0x2c
        RxConfig.fsk.PreambleMinDetect = RADIO_FSK_PREAMBLE_DETECTOR_08_BITS;
 800ad62:	2304      	movs	r3, #4
 800ad64:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        RxConfig.fsk.whiteSeed = 0x01FF ; /*WhiteningSeed*/
 800ad68:	f240 13ff 	movw	r3, #511	; 0x1ff
 800ad6c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        RxConfig.fsk.LengthMode = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800ad70:	2201      	movs	r2, #1
 800ad72:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
        RxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800ad76:	23f2      	movs	r3, #242	; 0xf2
 800ad78:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
        RxConfig.fsk.CrcPolynomial = 0x1021;
 800ad7c:	f241 0321 	movw	r3, #4129	; 0x1021
 800ad80:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        RxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
 800ad84:	2000      	movs	r0, #0
 800ad86:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
        RxConfig.fsk.MaxPayloadLength = 255;
 800ad8a:	23ff      	movs	r3, #255	; 0xff
 800ad8c:	930c      	str	r3, [sp, #48]	; 0x30
        RxConfig.fsk.AddrComp = RADIO_FSK_ADDRESSCOMP_FILT_OFF;
 800ad8e:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
        Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0);
 800ad92:	4b4a      	ldr	r3, [pc, #296]	; (800aebc <TST_Modu_RX_Start+0x228>)
 800ad94:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800ad96:	4603      	mov	r3, r0
 800ad98:	a905      	add	r1, sp, #20
 800ad9a:	47a0      	blx	r4
 800ad9c:	e7c5      	b.n	800ad2a <TST_Modu_RX_Start+0x96>
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
      Radio.Sleep();

      if (RadioRxDone_flag == 1)
      {
        int16_t rssi = last_rx_rssi;
 800ad9e:	4b4a      	ldr	r3, [pc, #296]	; (800aec8 <TST_Modu_RX_Start+0x234>)
 800ada0:	881e      	ldrh	r6, [r3, #0]
 800ada2:	b236      	sxth	r6, r6
        int8_t LoraSnr_FskCfo = last_rx_LoraSnr_FskCfo;
 800ada4:	4b49      	ldr	r3, [pc, #292]	; (800aecc <TST_Modu_RX_Start+0x238>)
 800ada6:	f893 8000 	ldrb.w	r8, [r3]
 800adaa:	fa4f f888 	sxtb.w	r8, r8
        APP_TPRINTF("OnRxDone\r\n");
 800adae:	4b48      	ldr	r3, [pc, #288]	; (800aed0 <TST_Modu_RX_Start+0x23c>)
 800adb0:	2201      	movs	r2, #1
 800adb2:	2100      	movs	r1, #0
 800adb4:	4608      	mov	r0, r1
 800adb6:	f017 fa31 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
        if (testParam.modulation == TEST_FSK)
 800adba:	4b41      	ldr	r3, [pc, #260]	; (800aec0 <TST_Modu_RX_Start+0x22c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	b94b      	cbnz	r3, 800add4 <TST_Modu_RX_Start+0x140>
        {
          APP_TPRINTF("RssiValue=%d dBm, cfo=%dkHz\r\n", rssi, LoraSnr_FskCfo);
 800adc0:	f8cd 8004 	str.w	r8, [sp, #4]
 800adc4:	9600      	str	r6, [sp, #0]
 800adc6:	4b43      	ldr	r3, [pc, #268]	; (800aed4 <TST_Modu_RX_Start+0x240>)
 800adc8:	2201      	movs	r2, #1
 800adca:	2100      	movs	r1, #0
 800adcc:	4608      	mov	r0, r1
 800adce:	f017 fa25 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800add2:	e042      	b.n	800ae5a <TST_Modu_RX_Start+0x1c6>
        }
        else
        {
          APP_TPRINTF("RssiValue=%d dBm, SnrValue=%ddB\r\n", rssi, LoraSnr_FskCfo);
 800add4:	f8cd 8004 	str.w	r8, [sp, #4]
 800add8:	9600      	str	r6, [sp, #0]
 800adda:	4b3f      	ldr	r3, [pc, #252]	; (800aed8 <TST_Modu_RX_Start+0x244>)
 800addc:	2201      	movs	r2, #1
 800adde:	2100      	movs	r1, #0
 800ade0:	4608      	mov	r0, r1
 800ade2:	f017 fa1b 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800ade6:	e038      	b.n	800ae5a <TST_Modu_RX_Start+0x1c6>
        }
      }

      if (RadioRxTimeout_flag == 1)
      {
        APP_TPRINTF("OnRxTimeout\r\n");
 800ade8:	4b3c      	ldr	r3, [pc, #240]	; (800aedc <TST_Modu_RX_Start+0x248>)
 800adea:	2201      	movs	r2, #1
 800adec:	2100      	movs	r1, #0
 800adee:	4608      	mov	r0, r1
 800adf0:	f017 fa14 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800adf4:	e035      	b.n	800ae62 <TST_Modu_RX_Start+0x1ce>
      }

      if (RadioError_flag == 1)
      {
        APP_TPRINTF("OnRxError\r\n");
 800adf6:	4b3a      	ldr	r3, [pc, #232]	; (800aee0 <TST_Modu_RX_Start+0x24c>)
 800adf8:	2201      	movs	r2, #1
 800adfa:	2100      	movs	r1, #0
 800adfc:	4608      	mov	r0, r1
 800adfe:	f017 fa0d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800ae02:	e032      	b.n	800ae6a <TST_Modu_RX_Start+0x1d6>
      }

      /*check flag*/
      if ((RadioRxTimeout_flag == 1) || (RadioError_flag == 1))
      {
        count_RxKo++;
 800ae04:	3401      	adds	r4, #1
      }
      if (RadioRxDone_flag == 1)
 800ae06:	4b37      	ldr	r3, [pc, #220]	; (800aee4 <TST_Modu_RX_Start+0x250>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d036      	beq.n	800ae7c <TST_Modu_RX_Start+0x1e8>
      {
        count_RxOk++;
      }
      /* Reset timeout flag */
      RadioRxDone_flag = 0;
 800ae0e:	2000      	movs	r0, #0
 800ae10:	4b34      	ldr	r3, [pc, #208]	; (800aee4 <TST_Modu_RX_Start+0x250>)
 800ae12:	6018      	str	r0, [r3, #0]
      RadioRxTimeout_flag = 0;
 800ae14:	4b34      	ldr	r3, [pc, #208]	; (800aee8 <TST_Modu_RX_Start+0x254>)
 800ae16:	6018      	str	r0, [r3, #0]
      RadioError_flag = 0;
 800ae18:	4b34      	ldr	r3, [pc, #208]	; (800aeec <TST_Modu_RX_Start+0x258>)
 800ae1a:	6018      	str	r0, [r3, #0]

      /* Compute PER */
      PER = (100 * (count_RxKo)) / (count_RxKo + count_RxOk);
 800ae1c:	2364      	movs	r3, #100	; 0x64
 800ae1e:	fb03 f304 	mul.w	r3, r3, r4
 800ae22:	193a      	adds	r2, r7, r4
 800ae24:	fbb3 f3f2 	udiv	r3, r3, r2
      APP_TPRINTF("Rx %d  >>>  PER= %d %%\r\n", i, PER);
 800ae28:	9301      	str	r3, [sp, #4]
 800ae2a:	9500      	str	r5, [sp, #0]
 800ae2c:	4b30      	ldr	r3, [pc, #192]	; (800aef0 <TST_Modu_RX_Start+0x25c>)
 800ae2e:	2201      	movs	r2, #1
 800ae30:	4601      	mov	r1, r0
 800ae32:	f017 f9f3 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
	  i++;
 800ae36:	3501      	adds	r5, #1
	while(whileEnd)
 800ae38:	4b19      	ldr	r3, [pc, #100]	; (800aea0 <TST_Modu_RX_Start+0x20c>)
 800ae3a:	6818      	ldr	r0, [r3, #0]
 800ae3c:	b300      	cbz	r0, 800ae80 <TST_Modu_RX_Start+0x1ec>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800ae3e:	4e1f      	ldr	r6, [pc, #124]	; (800aebc <TST_Modu_RX_Start+0x228>)
 800ae40:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800ae42:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ae46:	4798      	blx	r3
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800ae48:	2001      	movs	r0, #1
 800ae4a:	f017 fbeb 	bl	8022624 <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 800ae4e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800ae50:	4798      	blx	r3
      if (RadioRxDone_flag == 1)
 800ae52:	4b24      	ldr	r3, [pc, #144]	; (800aee4 <TST_Modu_RX_Start+0x250>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d0a1      	beq.n	800ad9e <TST_Modu_RX_Start+0x10a>
      if (RadioRxTimeout_flag == 1)
 800ae5a:	4b23      	ldr	r3, [pc, #140]	; (800aee8 <TST_Modu_RX_Start+0x254>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d0c2      	beq.n	800ade8 <TST_Modu_RX_Start+0x154>
      if (RadioError_flag == 1)
 800ae62:	4b22      	ldr	r3, [pc, #136]	; (800aeec <TST_Modu_RX_Start+0x258>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d0c5      	beq.n	800adf6 <TST_Modu_RX_Start+0x162>
      if ((RadioRxTimeout_flag == 1) || (RadioError_flag == 1))
 800ae6a:	4b1f      	ldr	r3, [pc, #124]	; (800aee8 <TST_Modu_RX_Start+0x254>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d0c8      	beq.n	800ae04 <TST_Modu_RX_Start+0x170>
 800ae72:	4b1e      	ldr	r3, [pc, #120]	; (800aeec <TST_Modu_RX_Start+0x258>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d1c5      	bne.n	800ae06 <TST_Modu_RX_Start+0x172>
 800ae7a:	e7c3      	b.n	800ae04 <TST_Modu_RX_Start+0x170>
        count_RxOk++;
 800ae7c:	3701      	adds	r7, #1
 800ae7e:	e7c6      	b.n	800ae0e <TST_Modu_RX_Start+0x17a>
    }
    TestState &= ~RX_TEST_LORA;
 800ae80:	4a06      	ldr	r2, [pc, #24]	; (800ae9c <TST_Modu_RX_Start+0x208>)
 800ae82:	7813      	ldrb	r3, [r2, #0]
 800ae84:	f023 0308 	bic.w	r3, r3, #8
 800ae88:	7013      	strb	r3, [r2, #0]
    return -1;
  }
  /* USER CODE BEGIN TST_RX_Start_2 */

  /* USER CODE END TST_RX_Start_2 */
}
 800ae8a:	b014      	add	sp, #80	; 0x50
 800ae8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
 800ae90:	f04f 30ff 	mov.w	r0, #4294967295
 800ae94:	e7f9      	b.n	800ae8a <TST_Modu_RX_Start+0x1f6>
        return -1; /*error*/
 800ae96:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9a:	e7f6      	b.n	800ae8a <TST_Modu_RX_Start+0x1f6>
 800ae9c:	20000a90 	.word	0x20000a90
 800aea0:	20002870 	.word	0x20002870
 800aea4:	20000a64 	.word	0x20000a64
 800aea8:	0800a459 	.word	0x0800a459
 800aeac:	0800a46d 	.word	0x0800a46d
 800aeb0:	0800a4a1 	.word	0x0800a4a1
 800aeb4:	0800a4b5 	.word	0x0800a4b5
 800aeb8:	0800a4c9 	.word	0x0800a4c9
 800aebc:	08028984 	.word	0x08028984
 800aec0:	20000130 	.word	0x20000130
 800aec4:	08024920 	.word	0x08024920
 800aec8:	20000a92 	.word	0x20000a92
 800aecc:	20000a91 	.word	0x20000a91
 800aed0:	08026e6c 	.word	0x08026e6c
 800aed4:	08026e78 	.word	0x08026e78
 800aed8:	08026e98 	.word	0x08026e98
 800aedc:	08026ebc 	.word	0x08026ebc
 800aee0:	08026e60 	.word	0x08026e60
 800aee4:	20000a80 	.word	0x20000a80
 800aee8:	20000a84 	.word	0x20000a84
 800aeec:	20000a60 	.word	0x20000a60
 800aef0:	08026eec 	.word	0x08026eec

0800aef4 <P2P_set_config>:

int32_t  P2P_set_config(P2PParameter_t *Param)
{
 800aef4:	b508      	push	{r3, lr}
 800aef6:	4601      	mov	r1, r0
  /* USER CODE BEGIN P2P_set_config_1 */

  /* USER CODE END P2P_set_config_1 */
  UTIL_MEM_cpy_8(&P2PParam, Param, sizeof(P2PParameter_t));
 800aef8:	2230      	movs	r2, #48	; 0x30
 800aefa:	4802      	ldr	r0, [pc, #8]	; (800af04 <P2P_set_config+0x10>)
 800aefc:	f017 faa2 	bl	8022444 <UTIL_MEM_cpy_8>

  return 0;
  /* USER CODE BEGIN P2P_set_config_2 */

  /* USER CODE END P2P_set_config_2 */
}
 800af00:	2000      	movs	r0, #0
 800af02:	bd08      	pop	{r3, pc}
 800af04:	20000100 	.word	0x20000100

0800af08 <P2P_get_config>:

int32_t P2P_get_config(P2PParameter_t *Param)
{
 800af08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN P2P_get_config_1 */

  /* USER CODE END P2P_get_config_1 */
  UTIL_MEM_cpy_8(Param, &P2PParam, sizeof(P2PParameter_t));
 800af0a:	2230      	movs	r2, #48	; 0x30
 800af0c:	4902      	ldr	r1, [pc, #8]	; (800af18 <P2P_get_config+0x10>)
 800af0e:	f017 fa99 	bl	8022444 <UTIL_MEM_cpy_8>
  return 0;
  /* USER CODE BEGIN P2P_get_config_2 */

  /* USER CODE END P2P_get_config_2 */
}
 800af12:	2000      	movs	r0, #0
 800af14:	bd08      	pop	{r3, pc}
 800af16:	bf00      	nop
 800af18:	20000100 	.word	0x20000100

0800af1c <P2P_TX_Start>:

int32_t P2P_TX_Start(uint8_t *P2Ppayload, uint8_t P2Ppayload_len)
{
 800af1c:	b570      	push	{r4, r5, r6, lr}
 800af1e:	b0d0      	sub	sp, #320	; 0x140
 800af20:	4605      	mov	r5, r0
 800af22:	460c      	mov	r4, r1
  /* USER CODE BEGIN P2P_TX_Start_1 */

  /* USER CODE END P2P_TX_Start_1 */
  TxConfigGeneric_t TxConfig;
  uint8_t Wpayload[255] = {0};
 800af24:	2600      	movs	r6, #0
 800af26:	9602      	str	r6, [sp, #8]
 800af28:	22fb      	movs	r2, #251	; 0xfb
 800af2a:	4631      	mov	r1, r6
 800af2c:	a803      	add	r0, sp, #12
 800af2e:	f018 fff3 	bl	8023f18 <memset>

  memset(Wpayload, 0, P2Ppayload_len);
 800af32:	4622      	mov	r2, r4
 800af34:	4631      	mov	r1, r6
 800af36:	a802      	add	r0, sp, #8
 800af38:	f018 ffee 	bl	8023f18 <memset>
  memcpy(Wpayload, P2Ppayload, P2Ppayload_len);
 800af3c:	4622      	mov	r2, r4
 800af3e:	4629      	mov	r1, r5
 800af40:	a802      	add	r0, sp, #8
 800af42:	f018 ffdb 	bl	8023efc <memcpy>

  if ((TestState & TX_TEST_LORA) != TX_TEST_LORA)
 800af46:	4b69      	ldr	r3, [pc, #420]	; (800b0ec <P2P_TX_Start+0x1d0>)
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	f013 0604 	ands.w	r6, r3, #4
 800af4e:	f040 80c6 	bne.w	800b0de <P2P_TX_Start+0x1c2>
  {
    TestState |= TX_TEST_LORA;
 800af52:	f043 0304 	orr.w	r3, r3, #4
 800af56:	4a65      	ldr	r2, [pc, #404]	; (800b0ec <P2P_TX_Start+0x1d0>)
 800af58:	7013      	strb	r3, [r2, #0]

    APP_TPRINTF("P2P Tx Start\r\n");
 800af5a:	4b65      	ldr	r3, [pc, #404]	; (800b0f0 <P2P_TX_Start+0x1d4>)
 800af5c:	2201      	movs	r2, #1
 800af5e:	2100      	movs	r1, #0
 800af60:	4608      	mov	r0, r1
 800af62:	f017 f95b 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>

    /* Radio initialization */
    RadioEvents.TxDone = OnTxDone;
 800af66:	4863      	ldr	r0, [pc, #396]	; (800b0f4 <P2P_TX_Start+0x1d8>)
 800af68:	4b63      	ldr	r3, [pc, #396]	; (800b0f8 <P2P_TX_Start+0x1dc>)
 800af6a:	6003      	str	r3, [r0, #0]
    RadioEvents.RxDone = OnRxDone;
 800af6c:	4b63      	ldr	r3, [pc, #396]	; (800b0fc <P2P_TX_Start+0x1e0>)
 800af6e:	6083      	str	r3, [r0, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 800af70:	4b63      	ldr	r3, [pc, #396]	; (800b100 <P2P_TX_Start+0x1e4>)
 800af72:	6043      	str	r3, [r0, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 800af74:	4b63      	ldr	r3, [pc, #396]	; (800b104 <P2P_TX_Start+0x1e8>)
 800af76:	60c3      	str	r3, [r0, #12]
    RadioEvents.RxError = OnRxError;
 800af78:	4b63      	ldr	r3, [pc, #396]	; (800b108 <P2P_TX_Start+0x1ec>)
 800af7a:	6103      	str	r3, [r0, #16]
    Radio.Init(&RadioEvents);
 800af7c:	4d63      	ldr	r5, [pc, #396]	; (800b10c <P2P_TX_Start+0x1f0>)
 800af7e:	682b      	ldr	r3, [r5, #0]
 800af80:	4798      	blx	r3

    Radio.SetChannel(P2PParam.freq);
 800af82:	68eb      	ldr	r3, [r5, #12]
 800af84:	4a62      	ldr	r2, [pc, #392]	; (800b110 <P2P_TX_Start+0x1f4>)
 800af86:	6850      	ldr	r0, [r2, #4]
 800af88:	4798      	blx	r3

      if (testParam.modulation == TEST_FSK)
 800af8a:	4b62      	ldr	r3, [pc, #392]	; (800b114 <P2P_TX_Start+0x1f8>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d03a      	beq.n	800b008 <P2P_TX_Start+0xec>
        TxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
        TxConfig.fsk.CrcPolynomial = 0x1021;
        TxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
        Radio.RadioSetTxGenericConfig(GENERIC_FSK, &TxConfig, P2PParam.power, TX_TIMEOUT_VALUE);
      }
      else if (P2PParam.modulation == TEST_LORA)
 800af92:	4a5f      	ldr	r2, [pc, #380]	; (800b110 <P2P_TX_Start+0x1f4>)
 800af94:	6812      	ldr	r2, [r2, #0]
 800af96:	2a01      	cmp	r2, #1
 800af98:	d06a      	beq.n	800b070 <P2P_TX_Start+0x154>
		TxConfig.lora.LengthMode = RADIO_LORA_PACKET_VARIABLE_LENGTH;
		TxConfig.lora.CrcMode = RADIO_LORA_CRC_ON;
		TxConfig.lora.IqInverted = RADIO_LORA_IQ_NORMAL;
		Radio.RadioSetTxGenericConfig(GENERIC_LORA, &TxConfig, P2PParam.power, TX_TIMEOUT_VALUE);
	  }
      else if (testParam.modulation == TEST_BPSK)
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	f040 80a2 	bne.w	800b0e4 <P2P_TX_Start+0x1c8>
      {
        TxConfig.bpsk.BitRate = P2PParam.loraSf_datarate; /*BitRate*/
 800afa0:	4a5b      	ldr	r2, [pc, #364]	; (800b110 <P2P_TX_Start+0x1f4>)
 800afa2:	6913      	ldr	r3, [r2, #16]
 800afa4:	934f      	str	r3, [sp, #316]	; 0x13c
        Radio.RadioSetTxGenericConfig(GENERIC_BPSK, &TxConfig, P2PParam.power, TX_TIMEOUT_VALUE);
 800afa6:	4b59      	ldr	r3, [pc, #356]	; (800b10c <P2P_TX_Start+0x1f0>)
 800afa8:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800afaa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800afae:	f992 2008 	ldrsb.w	r2, [r2, #8]
 800afb2:	a942      	add	r1, sp, #264	; 0x108
 800afb4:	2002      	movs	r0, #2
 800afb6:	47a8      	blx	r5
	  else
	  {
		return -1; /*error*/
	  }
	/* Send payload once*/
	Radio.Send(Wpayload, P2Ppayload_len);
 800afb8:	4d54      	ldr	r5, [pc, #336]	; (800b10c <P2P_TX_Start+0x1f0>)
 800afba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800afbc:	4621      	mov	r1, r4
 800afbe:	a802      	add	r0, sp, #8
 800afc0:	4798      	blx	r3
	
	/* Wait Tx done/timeout */
	UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800afc2:	2001      	movs	r0, #1
 800afc4:	f017 fb2e 	bl	8022624 <UTIL_SEQ_WaitEvt>
	Radio.Sleep();
 800afc8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800afca:	4798      	blx	r3

	if (RadioTxDone_flag == 1)
 800afcc:	4b52      	ldr	r3, [pc, #328]	; (800b118 <P2P_TX_Start+0x1fc>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d06f      	beq.n	800b0b4 <P2P_TX_Start+0x198>
	{
		APP_TPRINTF("OnTxDone\r\n");
	}

	if (RadioTxTimeout_flag == 1)
 800afd4:	4b51      	ldr	r3, [pc, #324]	; (800b11c <P2P_TX_Start+0x200>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d072      	beq.n	800b0c2 <P2P_TX_Start+0x1a6>
	{
		APP_TPRINTF("OnTxTimeout\r\n");
	}

	if (RadioError_flag == 1)
 800afdc:	4b50      	ldr	r3, [pc, #320]	; (800b120 <P2P_TX_Start+0x204>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d075      	beq.n	800b0d0 <P2P_TX_Start+0x1b4>
	{
		APP_TPRINTF("OnRxError\r\n");
	}

	/*Delay between 2 consecutive Tx*/
	HAL_Delay(500);
 800afe4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800afe8:	f7fc f98a 	bl	8007300 <HAL_Delay>
	/* Reset TX Done or timeout flags */
	RadioTxDone_flag = 0;
 800afec:	2000      	movs	r0, #0
 800afee:	4b4a      	ldr	r3, [pc, #296]	; (800b118 <P2P_TX_Start+0x1fc>)
 800aff0:	6018      	str	r0, [r3, #0]
	RadioTxTimeout_flag = 0;
 800aff2:	4b4a      	ldr	r3, [pc, #296]	; (800b11c <P2P_TX_Start+0x200>)
 800aff4:	6018      	str	r0, [r3, #0]
	RadioError_flag = 0;
 800aff6:	4b4a      	ldr	r3, [pc, #296]	; (800b120 <P2P_TX_Start+0x204>)
 800aff8:	6018      	str	r0, [r3, #0]
	
    TestState &= ~TX_TEST_LORA;
 800affa:	4a3c      	ldr	r2, [pc, #240]	; (800b0ec <P2P_TX_Start+0x1d0>)
 800affc:	7813      	ldrb	r3, [r2, #0]
 800affe:	f023 0304 	bic.w	r3, r3, #4
 800b002:	7013      	strb	r3, [r2, #0]
    return -1;
  }
  /* USER CODE BEGIN P2P_TX_Start_2 */

  /* USER CODE END P2P_TX_Start_2 */
}
 800b004:	b050      	add	sp, #320	; 0x140
 800b006:	bd70      	pop	{r4, r5, r6, pc}
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b008:	466b      	mov	r3, sp
 800b00a:	4a46      	ldr	r2, [pc, #280]	; (800b124 <P2P_TX_Start+0x208>)
 800b00c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b010:	e883 0003 	stmia.w	r3, {r0, r1}
        TxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((P2PParam.BTproduct == 0) ? 0 : P2PParam.BTproduct + 7);
 800b014:	4b3e      	ldr	r3, [pc, #248]	; (800b110 <P2P_TX_Start+0x1f4>)
 800b016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b018:	b10b      	cbz	r3, 800b01e <P2P_TX_Start+0x102>
 800b01a:	1dde      	adds	r6, r3, #7
 800b01c:	b2f6      	uxtb	r6, r6
 800b01e:	f88d 6108 	strb.w	r6, [sp, #264]	; 0x108
        TxConfig.fsk.Bandwidth = P2PParam.bandwidth;
 800b022:	4a3b      	ldr	r2, [pc, #236]	; (800b110 <P2P_TX_Start+0x1f4>)
 800b024:	68d3      	ldr	r3, [r2, #12]
 800b026:	9343      	str	r3, [sp, #268]	; 0x10c
        TxConfig.fsk.FrequencyDeviation = P2PParam.fskDev;
 800b028:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800b02a:	9345      	str	r3, [sp, #276]	; 0x114
        TxConfig.fsk.BitRate = P2PParam.loraSf_datarate; /*BitRate*/
 800b02c:	6913      	ldr	r3, [r2, #16]
 800b02e:	9344      	str	r3, [sp, #272]	; 0x110
        TxConfig.fsk.PreambleLen = 3;   /*in Byte        */
 800b030:	2303      	movs	r3, #3
 800b032:	9346      	str	r3, [sp, #280]	; 0x118
        TxConfig.fsk.SyncWordLength = 3; /*in Byte        */
 800b034:	f88d 311c 	strb.w	r3, [sp, #284]	; 0x11c
        TxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800b038:	f8cd d120 	str.w	sp, [sp, #288]	; 0x120
        TxConfig.fsk.whiteSeed = 0x01FF; /*WhiteningSeed  */
 800b03c:	f240 13ff 	movw	r3, #511	; 0x1ff
 800b040:	f8ad 3124 	strh.w	r3, [sp, #292]	; 0x124
        TxConfig.fsk.HeaderType = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800b044:	2301      	movs	r3, #1
 800b046:	f88d 3126 	strb.w	r3, [sp, #294]	; 0x126
        TxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800b04a:	23f2      	movs	r3, #242	; 0xf2
 800b04c:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
        TxConfig.fsk.CrcPolynomial = 0x1021;
 800b050:	f241 0321 	movw	r3, #4129	; 0x1021
 800b054:	f8ad 3128 	strh.w	r3, [sp, #296]	; 0x128
        TxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
 800b058:	2000      	movs	r0, #0
 800b05a:	f88d 012c 	strb.w	r0, [sp, #300]	; 0x12c
        Radio.RadioSetTxGenericConfig(GENERIC_FSK, &TxConfig, P2PParam.power, TX_TIMEOUT_VALUE);
 800b05e:	4b2b      	ldr	r3, [pc, #172]	; (800b10c <P2P_TX_Start+0x1f0>)
 800b060:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800b062:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b066:	f992 2008 	ldrsb.w	r2, [r2, #8]
 800b06a:	a942      	add	r1, sp, #264	; 0x108
 800b06c:	47a8      	blx	r5
 800b06e:	e7a3      	b.n	800afb8 <P2P_TX_Start+0x9c>
		TxConfig.lora.Bandwidth = (RADIO_LoRaBandwidths_t) P2PParam.bandwidth;
 800b070:	4a27      	ldr	r2, [pc, #156]	; (800b110 <P2P_TX_Start+0x1f4>)
 800b072:	7b13      	ldrb	r3, [r2, #12]
 800b074:	f88d 3131 	strb.w	r3, [sp, #305]	; 0x131
		TxConfig.lora.SpreadingFactor = (RADIO_LoRaSpreadingFactors_t) P2PParam.loraSf_datarate; /*BitRate*/
 800b078:	7c13      	ldrb	r3, [r2, #16]
 800b07a:	f88d 3130 	strb.w	r3, [sp, #304]	; 0x130
		TxConfig.lora.Coderate = (RADIO_LoRaCodingRates_t)P2PParam.codingRate;
 800b07e:	7d13      	ldrb	r3, [r2, #20]
 800b080:	f88d 3132 	strb.w	r3, [sp, #306]	; 0x132
		TxConfig.lora.LowDatarateOptimize = (RADIO_Ld_Opt_t)P2PParam.lowDrOpt; /*0 inactive, 1 active, 2: auto*/
 800b084:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800b088:	f88d 3133 	strb.w	r3, [sp, #307]	; 0x133
		TxConfig.lora.PreambleLen = LORA_PREAMBLE_LENGTH;
 800b08c:	2308      	movs	r3, #8
 800b08e:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
		TxConfig.lora.LengthMode = RADIO_LORA_PACKET_VARIABLE_LENGTH;
 800b092:	2300      	movs	r3, #0
 800b094:	f88d 3136 	strb.w	r3, [sp, #310]	; 0x136
		TxConfig.lora.CrcMode = RADIO_LORA_CRC_ON;
 800b098:	2001      	movs	r0, #1
 800b09a:	f88d 0137 	strb.w	r0, [sp, #311]	; 0x137
		TxConfig.lora.IqInverted = RADIO_LORA_IQ_NORMAL;
 800b09e:	f88d 3138 	strb.w	r3, [sp, #312]	; 0x138
		Radio.RadioSetTxGenericConfig(GENERIC_LORA, &TxConfig, P2PParam.power, TX_TIMEOUT_VALUE);
 800b0a2:	4b1a      	ldr	r3, [pc, #104]	; (800b10c <P2P_TX_Start+0x1f0>)
 800b0a4:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800b0a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b0aa:	f992 2008 	ldrsb.w	r2, [r2, #8]
 800b0ae:	a942      	add	r1, sp, #264	; 0x108
 800b0b0:	47a8      	blx	r5
 800b0b2:	e781      	b.n	800afb8 <P2P_TX_Start+0x9c>
		APP_TPRINTF("OnTxDone\r\n");
 800b0b4:	4b1c      	ldr	r3, [pc, #112]	; (800b128 <P2P_TX_Start+0x20c>)
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	4608      	mov	r0, r1
 800b0bc:	f017 f8ae 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800b0c0:	e788      	b.n	800afd4 <P2P_TX_Start+0xb8>
		APP_TPRINTF("OnTxTimeout\r\n");
 800b0c2:	4b1a      	ldr	r3, [pc, #104]	; (800b12c <P2P_TX_Start+0x210>)
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	4608      	mov	r0, r1
 800b0ca:	f017 f8a7 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800b0ce:	e785      	b.n	800afdc <P2P_TX_Start+0xc0>
		APP_TPRINTF("OnRxError\r\n");
 800b0d0:	4b17      	ldr	r3, [pc, #92]	; (800b130 <P2P_TX_Start+0x214>)
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	4608      	mov	r0, r1
 800b0d8:	f017 f8a0 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800b0dc:	e782      	b.n	800afe4 <P2P_TX_Start+0xc8>
    return -1;
 800b0de:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e2:	e78f      	b.n	800b004 <P2P_TX_Start+0xe8>
		return -1; /*error*/
 800b0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e8:	e78c      	b.n	800b004 <P2P_TX_Start+0xe8>
 800b0ea:	bf00      	nop
 800b0ec:	20000a90 	.word	0x20000a90
 800b0f0:	08026f08 	.word	0x08026f08
 800b0f4:	20000a64 	.word	0x20000a64
 800b0f8:	0800a459 	.word	0x0800a459
 800b0fc:	0800a46d 	.word	0x0800a46d
 800b100:	0800a4a1 	.word	0x0800a4a1
 800b104:	0800a4b5 	.word	0x0800a4b5
 800b108:	0800a4c9 	.word	0x0800a4c9
 800b10c:	08028984 	.word	0x08028984
 800b110:	20000100 	.word	0x20000100
 800b114:	20000130 	.word	0x20000130
 800b118:	20000a88 	.word	0x20000a88
 800b11c:	20000a8c 	.word	0x20000a8c
 800b120:	20000a60 	.word	0x20000a60
 800b124:	08024920 	.word	0x08024920
 800b128:	08026e44 	.word	0x08026e44
 800b12c:	08026e50 	.word	0x08026e50
 800b130:	08026e60 	.word	0x08026e60

0800b134 <P2P_RX_Start>:


int32_t P2P_RX_Start(void)
{
 800b134:	b570      	push	{r4, r5, r6, lr}
 800b136:	b0d2      	sub	sp, #328	; 0x148
  /* USER CODE END P2P_RX_Start_1 */
  /* init of PER counter */
  uint32_t count_RxOk = 0;
  uint32_t count_RxKo = 0;
  uint32_t PER = 0;
  RxConfigGeneric_t RxConfig = {0};
 800b138:	223c      	movs	r2, #60	; 0x3c
 800b13a:	2100      	movs	r1, #0
 800b13c:	a843      	add	r0, sp, #268	; 0x10c
 800b13e:	f018 feeb 	bl	8023f18 <memset>

  if (((TestState & RX_TEST_LORA) != RX_TEST_LORA))
 800b142:	4b86      	ldr	r3, [pc, #536]	; (800b35c <P2P_RX_Start+0x228>)
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	f013 0508 	ands.w	r5, r3, #8
 800b14a:	f040 8101 	bne.w	800b350 <P2P_RX_Start+0x21c>
  {
    TestState |= RX_TEST_LORA;
 800b14e:	f043 0308 	orr.w	r3, r3, #8
 800b152:	4a82      	ldr	r2, [pc, #520]	; (800b35c <P2P_RX_Start+0x228>)
 800b154:	7013      	strb	r3, [r2, #0]
	whileEnd = 1;
 800b156:	4b82      	ldr	r3, [pc, #520]	; (800b360 <P2P_RX_Start+0x22c>)
 800b158:	2201      	movs	r2, #1
 800b15a:	601a      	str	r2, [r3, #0]

    /* Radio initialization */
    RadioEvents.TxDone = OnTxDone;
 800b15c:	4881      	ldr	r0, [pc, #516]	; (800b364 <P2P_RX_Start+0x230>)
 800b15e:	4b82      	ldr	r3, [pc, #520]	; (800b368 <P2P_RX_Start+0x234>)
 800b160:	6003      	str	r3, [r0, #0]
    RadioEvents.RxDone = OnRxDone;
 800b162:	4b82      	ldr	r3, [pc, #520]	; (800b36c <P2P_RX_Start+0x238>)
 800b164:	6083      	str	r3, [r0, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 800b166:	4b82      	ldr	r3, [pc, #520]	; (800b370 <P2P_RX_Start+0x23c>)
 800b168:	6043      	str	r3, [r0, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 800b16a:	4b82      	ldr	r3, [pc, #520]	; (800b374 <P2P_RX_Start+0x240>)
 800b16c:	60c3      	str	r3, [r0, #12]
    RadioEvents.RxError = OnRxError;
 800b16e:	4b82      	ldr	r3, [pc, #520]	; (800b378 <P2P_RX_Start+0x244>)
 800b170:	6103      	str	r3, [r0, #16]
    Radio.Init(&RadioEvents);
 800b172:	4c82      	ldr	r4, [pc, #520]	; (800b37c <P2P_RX_Start+0x248>)
 800b174:	6823      	ldr	r3, [r4, #0]
 800b176:	4798      	blx	r3

      /* Rx config */
      Radio.SetChannel(P2PParam.freq);
 800b178:	68e3      	ldr	r3, [r4, #12]
 800b17a:	4a81      	ldr	r2, [pc, #516]	; (800b380 <P2P_RX_Start+0x24c>)
 800b17c:	6850      	ldr	r0, [r2, #4]
 800b17e:	4798      	blx	r3

      if (testParam.modulation == TEST_FSK)
 800b180:	4b80      	ldr	r3, [pc, #512]	; (800b384 <P2P_RX_Start+0x250>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	b323      	cbz	r3, 800b1d0 <P2P_RX_Start+0x9c>
        RxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
        RxConfig.fsk.MaxPayloadLength = 255;
        RxConfig.fsk.AddrComp = RADIO_FSK_ADDRESSCOMP_FILT_OFF;
        Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0);
      }
      else if (P2PParam.modulation == TEST_LORA)
 800b186:	4b7e      	ldr	r3, [pc, #504]	; (800b380 <P2P_RX_Start+0x24c>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	f040 80e3 	bne.w	800b356 <P2P_RX_Start+0x222>
      {
        /*Lora*/
        RxConfig.lora.Bandwidth = (RADIO_LoRaBandwidths_t) P2PParam.bandwidth;
 800b190:	4b7b      	ldr	r3, [pc, #492]	; (800b380 <P2P_RX_Start+0x24c>)
 800b192:	7b1a      	ldrb	r2, [r3, #12]
 800b194:	f88d 213d 	strb.w	r2, [sp, #317]	; 0x13d
        RxConfig.lora.SpreadingFactor = (RADIO_LoRaSpreadingFactors_t) P2PParam.loraSf_datarate; /*BitRate*/
 800b198:	7c1a      	ldrb	r2, [r3, #16]
 800b19a:	f88d 213c 	strb.w	r2, [sp, #316]	; 0x13c
        RxConfig.lora.Coderate = (RADIO_LoRaCodingRates_t)P2PParam.codingRate;
 800b19e:	7d1a      	ldrb	r2, [r3, #20]
 800b1a0:	f88d 213e 	strb.w	r2, [sp, #318]	; 0x13e
        RxConfig.lora.LowDatarateOptimize = (RADIO_Ld_Opt_t)P2PParam.lowDrOpt; /*0 inactive, 1 active, 2: auto*/
 800b1a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1a8:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
        RxConfig.lora.PreambleLen = LORA_PREAMBLE_LENGTH;
 800b1ac:	2308      	movs	r3, #8
 800b1ae:	f8ad 3140 	strh.w	r3, [sp, #320]	; 0x140
        RxConfig.lora.LengthMode = RADIO_LORA_PACKET_VARIABLE_LENGTH;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	f88d 3142 	strb.w	r3, [sp, #322]	; 0x142
        RxConfig.lora.CrcMode = RADIO_LORA_CRC_ON;
 800b1b8:	2001      	movs	r0, #1
 800b1ba:	f88d 0144 	strb.w	r0, [sp, #324]	; 0x144
        RxConfig.lora.IqInverted = RADIO_LORA_IQ_NORMAL;
 800b1be:	f88d 3145 	strb.w	r3, [sp, #325]	; 0x145
        Radio.RadioSetRxGenericConfig(GENERIC_LORA, &RxConfig, RX_CONTINUOUS_ON, LORA_SYMBOL_TIMEOUT);
 800b1c2:	4b6e      	ldr	r3, [pc, #440]	; (800b37c <P2P_RX_Start+0x248>)
 800b1c4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800b1c6:	231e      	movs	r3, #30
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	a943      	add	r1, sp, #268	; 0x10c
 800b1cc:	47a0      	blx	r4
 800b1ce:	e057      	b.n	800b280 <P2P_RX_Start+0x14c>
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b1d0:	ab03      	add	r3, sp, #12
 800b1d2:	4a6d      	ldr	r2, [pc, #436]	; (800b388 <P2P_RX_Start+0x254>)
 800b1d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b1d8:	e883 0003 	stmia.w	r3, {r0, r1}
        RxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((P2PParam.BTproduct == 0) ? 0 : P2PParam.BTproduct + 8);
 800b1dc:	4b68      	ldr	r3, [pc, #416]	; (800b380 <P2P_RX_Start+0x24c>)
 800b1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e0:	b113      	cbz	r3, 800b1e8 <P2P_RX_Start+0xb4>
 800b1e2:	f103 0508 	add.w	r5, r3, #8
 800b1e6:	b2ed      	uxtb	r5, r5
 800b1e8:	f88d 5110 	strb.w	r5, [sp, #272]	; 0x110
        RxConfig.fsk.Bandwidth = P2PParam.bandwidth;
 800b1ec:	4b64      	ldr	r3, [pc, #400]	; (800b380 <P2P_RX_Start+0x24c>)
 800b1ee:	68da      	ldr	r2, [r3, #12]
 800b1f0:	9245      	str	r2, [sp, #276]	; 0x114
        RxConfig.fsk.BitRate = P2PParam.loraSf_datarate; /*BitRate*/
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	9346      	str	r3, [sp, #280]	; 0x118
        RxConfig.fsk.PreambleLen = 3; /*in Byte*/
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	9347      	str	r3, [sp, #284]	; 0x11c
        RxConfig.fsk.SyncWordLength = 3; /*in Byte*/
 800b1fa:	f88d 3121 	strb.w	r3, [sp, #289]	; 0x121
        RxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800b1fe:	ab03      	add	r3, sp, #12
 800b200:	9349      	str	r3, [sp, #292]	; 0x124
        RxConfig.fsk.PreambleMinDetect = RADIO_FSK_PREAMBLE_DETECTOR_08_BITS;
 800b202:	2304      	movs	r3, #4
 800b204:	f88d 3120 	strb.w	r3, [sp, #288]	; 0x120
        RxConfig.fsk.whiteSeed = 0x01FF; /*WhiteningSeed*/
 800b208:	f240 13ff 	movw	r3, #511	; 0x1ff
 800b20c:	f8ad 312c 	strh.w	r3, [sp, #300]	; 0x12c
        RxConfig.fsk.LengthMode = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800b210:	2201      	movs	r2, #1
 800b212:	f88d 212f 	strb.w	r2, [sp, #303]	; 0x12f
        RxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800b216:	23f2      	movs	r3, #242	; 0xf2
 800b218:	f88d 3130 	strb.w	r3, [sp, #304]	; 0x130
        RxConfig.fsk.CrcPolynomial = 0x1021;
 800b21c:	f241 0321 	movw	r3, #4129	; 0x1021
 800b220:	f8ad 3132 	strh.w	r3, [sp, #306]	; 0x132
        RxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
 800b224:	2000      	movs	r0, #0
 800b226:	f88d 0136 	strb.w	r0, [sp, #310]	; 0x136
        RxConfig.fsk.MaxPayloadLength = 255;
 800b22a:	23ff      	movs	r3, #255	; 0xff
 800b22c:	934a      	str	r3, [sp, #296]	; 0x128
        RxConfig.fsk.AddrComp = RADIO_FSK_ADDRESSCOMP_FILT_OFF;
 800b22e:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
        Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0);
 800b232:	4b52      	ldr	r3, [pc, #328]	; (800b37c <P2P_RX_Start+0x248>)
 800b234:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800b236:	4603      	mov	r3, r0
 800b238:	a943      	add	r1, sp, #268	; 0x10c
 800b23a:	47a0      	blx	r4
 800b23c:	e020      	b.n	800b280 <P2P_RX_Start+0x14c>
      {
        Radio.Rx(RX_TIMEOUT_VALUE);
      }
      else
      {
        Radio.RxBoosted(RX_TIMEOUT_VALUE);
 800b23e:	4b4f      	ldr	r3, [pc, #316]	; (800b37c <P2P_RX_Start+0x248>)
 800b240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b242:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b246:	4798      	blx	r3
      }
      /* Wait Rx done/timeout */
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800b248:	2001      	movs	r0, #1
 800b24a:	f017 f9eb 	bl	8022624 <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 800b24e:	4b4b      	ldr	r3, [pc, #300]	; (800b37c <P2P_RX_Start+0x248>)
 800b250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b252:	4798      	blx	r3

      if (RadioRxDone_flag == 1)
 800b254:	4b4d      	ldr	r3, [pc, #308]	; (800b38c <P2P_RX_Start+0x258>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d01f      	beq.n	800b29c <P2P_RX_Start+0x168>
		  APP_PRINTF("\r\n");
		  
        }
      }

      if (RadioError_flag == 1)
 800b25c:	4b4c      	ldr	r3, [pc, #304]	; (800b390 <P2P_RX_Start+0x25c>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d067      	beq.n	800b334 <P2P_RX_Start+0x200>
      {
        APP_TPRINTF("OnRxError\r\n");
      }

      /*check flag*/
      if ((RadioRxTimeout_flag == 1) || (RadioError_flag == 1))
 800b264:	4b4b      	ldr	r3, [pc, #300]	; (800b394 <P2P_RX_Start+0x260>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d001      	beq.n	800b270 <P2P_RX_Start+0x13c>
 800b26c:	4b48      	ldr	r3, [pc, #288]	; (800b390 <P2P_RX_Start+0x25c>)
 800b26e:	681b      	ldr	r3, [r3, #0]
      {
        count_RxKo++;
      }
      if (RadioRxDone_flag == 1)
 800b270:	4a46      	ldr	r2, [pc, #280]	; (800b38c <P2P_RX_Start+0x258>)
 800b272:	6813      	ldr	r3, [r2, #0]
      {
        count_RxOk++;
      }
      /* Reset timeout flag */
      RadioRxDone_flag = 0;
 800b274:	2300      	movs	r3, #0
 800b276:	6013      	str	r3, [r2, #0]
      RadioRxTimeout_flag = 0;
 800b278:	4a46      	ldr	r2, [pc, #280]	; (800b394 <P2P_RX_Start+0x260>)
 800b27a:	6013      	str	r3, [r2, #0]
      RadioError_flag = 0;
 800b27c:	4a44      	ldr	r2, [pc, #272]	; (800b390 <P2P_RX_Start+0x25c>)
 800b27e:	6013      	str	r3, [r2, #0]
	while(whileEnd)
 800b280:	4b37      	ldr	r3, [pc, #220]	; (800b360 <P2P_RX_Start+0x22c>)
 800b282:	6818      	ldr	r0, [r3, #0]
 800b284:	2800      	cmp	r0, #0
 800b286:	d05c      	beq.n	800b342 <P2P_RX_Start+0x20e>
      if (P2PParam.lna == 0)
 800b288:	4b3d      	ldr	r3, [pc, #244]	; (800b380 <P2P_RX_Start+0x24c>)
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1d6      	bne.n	800b23e <P2P_RX_Start+0x10a>
        Radio.Rx(RX_TIMEOUT_VALUE);
 800b290:	4b3a      	ldr	r3, [pc, #232]	; (800b37c <P2P_RX_Start+0x248>)
 800b292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b294:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b298:	4798      	blx	r3
 800b29a:	e7d5      	b.n	800b248 <P2P_RX_Start+0x114>
        int16_t rssi = last_rx_rssi;
 800b29c:	4b3e      	ldr	r3, [pc, #248]	; (800b398 <P2P_RX_Start+0x264>)
 800b29e:	881b      	ldrh	r3, [r3, #0]
 800b2a0:	b21d      	sxth	r5, r3
        int8_t LoraSnr_FskCfo = last_rx_LoraSnr_FskCfo;
 800b2a2:	4b3e      	ldr	r3, [pc, #248]	; (800b39c <P2P_RX_Start+0x268>)
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	b25c      	sxtb	r4, r3
		uint16_t Rpayload_len = RXpayload_len;
 800b2a8:	4b3d      	ldr	r3, [pc, #244]	; (800b3a0 <P2P_RX_Start+0x26c>)
 800b2aa:	881e      	ldrh	r6, [r3, #0]
        APP_TPRINTF("OnRxDone\r\n");
 800b2ac:	4b3d      	ldr	r3, [pc, #244]	; (800b3a4 <P2P_RX_Start+0x270>)
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	4608      	mov	r0, r1
 800b2b4:	f016 ffb2 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
        if (testParam.modulation == TEST_FSK)
 800b2b8:	4b32      	ldr	r3, [pc, #200]	; (800b384 <P2P_RX_Start+0x250>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	b1f3      	cbz	r3, 800b2fc <P2P_RX_Start+0x1c8>
	else if (P2PParam.modulation == TEST_LORA)
 800b2be:	4b30      	ldr	r3, [pc, #192]	; (800b380 <P2P_RX_Start+0x24c>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d1ca      	bne.n	800b25c <P2P_RX_Start+0x128>
          APP_TPRINTF("RssiValue=%d dBm, SnrValue=%ddB\r\n", rssi, LoraSnr_FskCfo);
 800b2c6:	9401      	str	r4, [sp, #4]
 800b2c8:	9500      	str	r5, [sp, #0]
 800b2ca:	4b37      	ldr	r3, [pc, #220]	; (800b3a8 <P2P_RX_Start+0x274>)
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	4608      	mov	r0, r1
 800b2d2:	f016 ffa3 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
		  memset(Rpayload, 0, Rpayload_len);
 800b2d6:	4632      	mov	r2, r6
 800b2d8:	2100      	movs	r1, #0
 800b2da:	a803      	add	r0, sp, #12
 800b2dc:	f018 fe1c 	bl	8023f18 <memset>
		  memcpy(Rpayload, RXpayload, Rpayload_len);
 800b2e0:	4632      	mov	r2, r6
 800b2e2:	4b32      	ldr	r3, [pc, #200]	; (800b3ac <P2P_RX_Start+0x278>)
 800b2e4:	6819      	ldr	r1, [r3, #0]
 800b2e6:	a803      	add	r0, sp, #12
 800b2e8:	f018 fe08 	bl	8023efc <memcpy>
		  APP_TPRINTF("R payload = ");
 800b2ec:	4b30      	ldr	r3, [pc, #192]	; (800b3b0 <P2P_RX_Start+0x27c>)
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	4608      	mov	r0, r1
 800b2f4:	f016 ff92 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
		  for(int i = 0; i < Rpayload_len; i ++)
 800b2f8:	2400      	movs	r4, #0
 800b2fa:	e012      	b.n	800b322 <P2P_RX_Start+0x1ee>
          APP_TPRINTF("RssiValue=%d dBm, cfo=%dkHz\r\n", rssi, LoraSnr_FskCfo);
 800b2fc:	9401      	str	r4, [sp, #4]
 800b2fe:	9500      	str	r5, [sp, #0]
 800b300:	4b2c      	ldr	r3, [pc, #176]	; (800b3b4 <P2P_RX_Start+0x280>)
 800b302:	2201      	movs	r2, #1
 800b304:	2100      	movs	r1, #0
 800b306:	4608      	mov	r0, r1
 800b308:	f016 ff88 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800b30c:	e7a6      	b.n	800b25c <P2P_RX_Start+0x128>
		    APP_PRINTF("%02X ", Rpayload[i]);
 800b30e:	ab03      	add	r3, sp, #12
 800b310:	5d1b      	ldrb	r3, [r3, r4]
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	4b28      	ldr	r3, [pc, #160]	; (800b3b8 <P2P_RX_Start+0x284>)
 800b316:	2200      	movs	r2, #0
 800b318:	4611      	mov	r1, r2
 800b31a:	4610      	mov	r0, r2
 800b31c:	f016 ff7e 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
		  for(int i = 0; i < Rpayload_len; i ++)
 800b320:	3401      	adds	r4, #1
 800b322:	42a6      	cmp	r6, r4
 800b324:	dcf3      	bgt.n	800b30e <P2P_RX_Start+0x1da>
		  APP_PRINTF("\r\n");
 800b326:	4b25      	ldr	r3, [pc, #148]	; (800b3bc <P2P_RX_Start+0x288>)
 800b328:	2200      	movs	r2, #0
 800b32a:	4611      	mov	r1, r2
 800b32c:	4610      	mov	r0, r2
 800b32e:	f016 ff75 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800b332:	e793      	b.n	800b25c <P2P_RX_Start+0x128>
        APP_TPRINTF("OnRxError\r\n");
 800b334:	4b22      	ldr	r3, [pc, #136]	; (800b3c0 <P2P_RX_Start+0x28c>)
 800b336:	2201      	movs	r2, #1
 800b338:	2100      	movs	r1, #0
 800b33a:	4608      	mov	r0, r1
 800b33c:	f016 ff6e 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800b340:	e790      	b.n	800b264 <P2P_RX_Start+0x130>
	  if(whileEnd == 0)
	  {
	  	//i = nb_packet;
	  }
	}
    TestState &= ~RX_TEST_LORA;
 800b342:	4a06      	ldr	r2, [pc, #24]	; (800b35c <P2P_RX_Start+0x228>)
 800b344:	7813      	ldrb	r3, [r2, #0]
 800b346:	f023 0308 	bic.w	r3, r3, #8
 800b34a:	7013      	strb	r3, [r2, #0]
    return -1;
  }
  /* USER CODE BEGIN P2P_RX_Start_2 */

  /* USER CODE END P2P_RX_Start_2 */
}
 800b34c:	b052      	add	sp, #328	; 0x148
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
 800b350:	f04f 30ff 	mov.w	r0, #4294967295
 800b354:	e7fa      	b.n	800b34c <P2P_RX_Start+0x218>
        return -1; /* error */
 800b356:	f04f 30ff 	mov.w	r0, #4294967295
 800b35a:	e7f7      	b.n	800b34c <P2P_RX_Start+0x218>
 800b35c:	20000a90 	.word	0x20000a90
 800b360:	20002870 	.word	0x20002870
 800b364:	20000a64 	.word	0x20000a64
 800b368:	0800a459 	.word	0x0800a459
 800b36c:	0800a46d 	.word	0x0800a46d
 800b370:	0800a4a1 	.word	0x0800a4a1
 800b374:	0800a4b5 	.word	0x0800a4b5
 800b378:	0800a4c9 	.word	0x0800a4c9
 800b37c:	08028984 	.word	0x08028984
 800b380:	20000100 	.word	0x20000100
 800b384:	20000130 	.word	0x20000130
 800b388:	08024920 	.word	0x08024920
 800b38c:	20000a80 	.word	0x20000a80
 800b390:	20000a60 	.word	0x20000a60
 800b394:	20000a84 	.word	0x20000a84
 800b398:	20000a92 	.word	0x20000a92
 800b39c:	20000a91 	.word	0x20000a91
 800b3a0:	20000a5c 	.word	0x20000a5c
 800b3a4:	08026e6c 	.word	0x08026e6c
 800b3a8:	08026e98 	.word	0x08026e98
 800b3ac:	20000a58 	.word	0x20000a58
 800b3b0:	08026f18 	.word	0x08026f18
 800b3b4:	08026e78 	.word	0x08026e78
 800b3b8:	08025734 	.word	0x08025734
 800b3bc:	080267cc 	.word	0x080267cc
 800b3c0:	08026e60 	.word	0x08026e60

0800b3c4 <MX_Sigfox_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_Sigfox_Init(void)
{
 800b3c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_Sigfox_Init_1 */

  /* USER CODE END MX_Sigfox_Init_1 */
  //SystemApp_Init(ACTIVE_APP_SIGFOX);
  Sigfox_Init();
 800b3c6:	f000 fb1d 	bl	800ba04 <Sigfox_Init>
#endif /* FEATURE_SIGFOX_API_MODE */

  /* USER CODE BEGIN MX_Sigfox_Init_2 */

  /* USER CODE END MX_Sigfox_Init_2 */
}
 800b3ca:	bd08      	pop	{r3, pc}

0800b3cc <MX_Sigfox_Process>:

void MX_Sigfox_Process(void)
{
 800b3cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_Sigfox_Process_1 */

  /* USER CODE END MX_Sigfox_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800b3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d2:	f017 f899 	bl	8022508 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_Sigfox_Process_2 */

  /* USER CODE END MX_Sigfox_Process_2 */
}
 800b3d6:	bd08      	pop	{r3, pc}

0800b3d8 <EE_Reset>:
{
  /* USER CODE BEGIN EE_Reset_1 */

  /* USER CODE END EE_Reset_1 */
  /* Reset global variables of the bank */
  pv->address = address;
 800b3d8:	6001      	str	r1, [r0, #0]
  pv->nb_pages = nb_pages;
 800b3da:	7102      	strb	r2, [r0, #4]
  pv->current_write_page = 0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	7143      	strb	r3, [r0, #5]
  pv->nb_written_elements = 0;
 800b3e0:	80c3      	strh	r3, [r0, #6]
  pv->next_write_offset = EE_HEADER_SIZE;
 800b3e2:	2320      	movs	r3, #32
 800b3e4:	8103      	strh	r3, [r0, #8]
  /* USER CODE BEGIN EE_Reset_2 */

  /* USER CODE END EE_Reset_2 */
}
 800b3e6:	4770      	bx	lr

0800b3e8 <EE_GetState>:

  /* USER CODE END EE_GetState_1 */
  uint32_t state;
  uint32_t flash_addr;

  flash_addr = EE_FLASH_ADDR(pv, page) + EE_HEADER_SIZE;
 800b3e8:	6803      	ldr	r3, [r0, #0]
 800b3ea:	eb03 21c1 	add.w	r1, r3, r1, lsl #11
 800b3ee:	3120      	adds	r1, #32

  for (state = EE_STATE_ERASING; state > EE_STATE_ERASED; state--)
 800b3f0:	2004      	movs	r0, #4
 800b3f2:	b148      	cbz	r0, 800b408 <EE_GetState+0x20>
  {
    flash_addr -= HW_FLASH_WIDTH;

    /* If page header word is not ERASED, return word index as page state */
    if (*EE_PTR(flash_addr) != EE_ERASED)
 800b3f4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3fc:	bf08      	it	eq
 800b3fe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800b402:	d101      	bne.n	800b408 <EE_GetState+0x20>
  for (state = EE_STATE_ERASING; state > EE_STATE_ERASED; state--)
 800b404:	3801      	subs	r0, #1
 800b406:	e7f4      	b.n	800b3f2 <EE_GetState+0xa>

  return state;
  /* USER CODE BEGIN EE_GetState_2 */

  /* USER CODE END EE_GetState_2 */
}
 800b408:	4770      	bx	lr

0800b40a <EE_Crc>:

static uint16_t EE_Crc(uint64_t v)
{
 800b40a:	b410      	push	{r4}
  /* USER CODE END EE_Crc_1 */
  uint32_t x = 0;
  uint32_t crc = 0;

  v >>= 16;
  EE_CRC16_STEP((uint32_t)v, x, crc);
 800b40c:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800b410:	f3c0 5303 	ubfx	r3, r0, #20, #4
 800b414:	4063      	eors	r3, r4
 800b416:	015c      	lsls	r4, r3, #5
 800b418:	ea84 3403 	eor.w	r4, r4, r3, lsl #12
 800b41c:	4063      	eors	r3, r4
  v >>= 8;
 800b41e:	0e00      	lsrs	r0, r0, #24
 800b420:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  EE_CRC16_STEP((uint32_t)v, x, crc);
 800b424:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
 800b428:	b2c2      	uxtb	r2, r0
 800b42a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800b42e:	4050      	eors	r0, r2
 800b430:	0304      	lsls	r4, r0, #12
 800b432:	ea84 2403 	eor.w	r4, r4, r3, lsl #8
 800b436:	ea84 1440 	eor.w	r4, r4, r0, lsl #5
 800b43a:	4044      	eors	r4, r0
  v >>= 8;
  EE_CRC16_STEP((uint32_t)v, x, crc);
 800b43c:	ea81 2314 	eor.w	r3, r1, r4, lsr #8
 800b440:	b2d8      	uxtb	r0, r3
 800b442:	f3c3 1203 	ubfx	r2, r3, #4, #4
 800b446:	4042      	eors	r2, r0
 800b448:	0310      	lsls	r0, r2, #12
 800b44a:	ea80 2004 	eor.w	r0, r0, r4, lsl #8
 800b44e:	ea80 1042 	eor.w	r0, r0, r2, lsl #5
 800b452:	4042      	eors	r2, r0
  v >>= 8;
  EE_CRC16_STEP((uint32_t)v, x, crc);
 800b454:	0a13      	lsrs	r3, r2, #8
 800b456:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 800b45a:	b2d8      	uxtb	r0, r3
 800b45c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b460:	4043      	eors	r3, r0
 800b462:	0318      	lsls	r0, r3, #12
 800b464:	ea80 2002 	eor.w	r0, r0, r2, lsl #8
 800b468:	ea80 1043 	eor.w	r0, r0, r3, lsl #5
 800b46c:	ea80 0203 	eor.w	r2, r0, r3
  v >>= 8;
  EE_CRC16_STEP((uint32_t)v, x, crc);
 800b470:	0a13      	lsrs	r3, r2, #8
 800b472:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 800b476:	b2d8      	uxtb	r0, r3
 800b478:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b47c:	4043      	eors	r3, r0
 800b47e:	0318      	lsls	r0, r3, #12
 800b480:	ea80 2002 	eor.w	r0, r0, r2, lsl #8
 800b484:	ea80 1043 	eor.w	r0, r0, r3, lsl #5
 800b488:	4043      	eors	r3, r0
  v >>= 8;
  EE_CRC16_STEP((uint32_t)v, x, crc);
 800b48a:	0a18      	lsrs	r0, r3, #8
 800b48c:	ea80 6111 	eor.w	r1, r0, r1, lsr #24
 800b490:	b2ca      	uxtb	r2, r1
 800b492:	f3c1 1003 	ubfx	r0, r1, #4, #4
 800b496:	4050      	eors	r0, r2
 800b498:	0302      	lsls	r2, r0, #12
 800b49a:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
 800b49e:	ea83 1340 	eor.w	r3, r3, r0, lsl #5
 800b4a2:	4058      	eors	r0, r3

  return crc;
  /* USER CODE BEGIN EE_Crc_2 */

  /* USER CODE END EE_Crc_2 */
}
 800b4a4:	b280      	uxth	r0, r0
 800b4a6:	bc10      	pop	{r4}
 800b4a8:	4770      	bx	lr

0800b4aa <EE_ReadEl>:
{
 800b4aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	9002      	str	r0, [sp, #8]
 800b4b2:	9100      	str	r1, [sp, #0]
 800b4b4:	9203      	str	r2, [sp, #12]
 800b4b6:	9301      	str	r3, [sp, #4]
    flash_addr = EE_FLASH_ADDR(pv, page);
 800b4b8:	9b02      	ldr	r3, [sp, #8]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	9a01      	ldr	r2, [sp, #4]
 800b4be:	eb03 29c2 	add.w	r9, r3, r2, lsl #11
    for (offset = HW_FLASH_PAGE_SIZE - HW_FLASH_WIDTH;
 800b4c2:	f44f 65ff 	mov.w	r5, #2040	; 0x7f8
 800b4c6:	e000      	b.n	800b4ca <EE_ReadEl+0x20>
         offset >= EE_HEADER_SIZE; offset -= HW_FLASH_WIDTH)
 800b4c8:	3d08      	subs	r5, #8
    for (offset = HW_FLASH_PAGE_SIZE - HW_FLASH_WIDTH;
 800b4ca:	2d1f      	cmp	r5, #31
 800b4cc:	d929      	bls.n	800b522 <EE_ReadEl+0x78>
      el = *EE_PTR(flash_addr + offset);
 800b4ce:	eb05 0309 	add.w	r3, r5, r9
 800b4d2:	681c      	ldr	r4, [r3, #0]
 800b4d4:	f8d3 8004 	ldr.w	r8, [r3, #4]
      if ((el != EE_ERASED) && (el != 0ULL) &&
 800b4d8:	f114 36ff 	adds.w	r6, r4, #4294967295
 800b4dc:	f148 37ff 	adc.w	r7, r8, #4294967295
 800b4e0:	f06f 0202 	mvn.w	r2, #2
 800b4e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4e8:	42bb      	cmp	r3, r7
 800b4ea:	bf08      	it	eq
 800b4ec:	42b2      	cmpeq	r2, r6
 800b4ee:	d3eb      	bcc.n	800b4c8 <EE_ReadEl+0x1e>
          (((el & 0x3FFFFFFFUL) >> 16) == addr) &&
 800b4f0:	f3c4 4a0d 	ubfx	sl, r4, #16, #14
 800b4f4:	f04f 0b00 	mov.w	fp, #0
 800b4f8:	f8bd 2000 	ldrh.w	r2, [sp]
 800b4fc:	2300      	movs	r3, #0
      if ((el != EE_ERASED) && (el != 0ULL) &&
 800b4fe:	459b      	cmp	fp, r3
 800b500:	bf08      	it	eq
 800b502:	4592      	cmpeq	sl, r2
 800b504:	d1e0      	bne.n	800b4c8 <EE_ReadEl+0x1e>
          (EE_Crc(el) == (uint16_t)el))
 800b506:	4620      	mov	r0, r4
 800b508:	4641      	mov	r1, r8
 800b50a:	f7ff ff7e 	bl	800b40a <EE_Crc>
 800b50e:	b2a4      	uxth	r4, r4
          (((el & 0x3FFFFFFFUL) >> 16) == addr) &&
 800b510:	42a0      	cmp	r0, r4
 800b512:	d1d9      	bne.n	800b4c8 <EE_ReadEl+0x1e>
        *data = (uint32_t)(el >> 32);
 800b514:	9b03      	ldr	r3, [sp, #12]
 800b516:	f8c3 8000 	str.w	r8, [r3]
        return EE_OK;
 800b51a:	4658      	mov	r0, fp
}
 800b51c:	b005      	add	sp, #20
 800b51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((page == 0) || (page == pv->nb_pages))
 800b522:	9a01      	ldr	r2, [sp, #4]
 800b524:	b132      	cbz	r2, 800b534 <EE_ReadEl+0x8a>
 800b526:	9b02      	ldr	r3, [sp, #8]
 800b528:	791b      	ldrb	r3, [r3, #4]
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d004      	beq.n	800b538 <EE_ReadEl+0x8e>
    page--;
 800b52e:	1e53      	subs	r3, r2, #1
 800b530:	9301      	str	r3, [sp, #4]
    flash_addr = EE_FLASH_ADDR(pv, page);
 800b532:	e7c1      	b.n	800b4b8 <EE_ReadEl+0xe>
      return EE_NOT_FOUND;
 800b534:	2001      	movs	r0, #1
 800b536:	e7f1      	b.n	800b51c <EE_ReadEl+0x72>
 800b538:	2001      	movs	r0, #1
 800b53a:	e7ef      	b.n	800b51c <EE_ReadEl+0x72>

0800b53c <EE_SetState>:
{
 800b53c:	b508      	push	{r3, lr}
  flash_addr = EE_FLASH_ADDR(pv, page) + ((state - 1) * HW_FLASH_WIDTH);
 800b53e:	6800      	ldr	r0, [r0, #0]
 800b540:	eb02 2101 	add.w	r1, r2, r1, lsl #8
 800b544:	3901      	subs	r1, #1
  if (FLASH_IF_Write64(flash_addr, EE_PROGRAMMED) != 0)
 800b546:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800b54a:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800b54e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b552:	f7fb fac5 	bl	8006ae0 <FLASH_IF_Write64>
 800b556:	b900      	cbnz	r0, 800b55a <EE_SetState+0x1e>
}
 800b558:	bd08      	pop	{r3, pc}
    return EE_WRITE_ERROR;
 800b55a:	2004      	movs	r0, #4
 800b55c:	e7fc      	b.n	800b558 <EE_SetState+0x1c>
	...

0800b560 <EE_WriteEl>:
{
 800b560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b562:	4604      	mov	r4, r0
 800b564:	460e      	mov	r6, r1
 800b566:	4615      	mov	r5, r2
  if (pv->next_write_offset >= HW_FLASH_PAGE_SIZE)
 800b568:	8903      	ldrh	r3, [r0, #8]
 800b56a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b56e:	d21e      	bcs.n	800b5ae <EE_WriteEl+0x4e>
  if (addr == EE_TAG)
 800b570:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800b574:	d030      	beq.n	800b5d8 <EE_WriteEl+0x78>
    el = ((((uint64_t)data) << 32) | ((EE_TAG | (addr & 0x3FFFUL)) << 16));
 800b576:	491d      	ldr	r1, [pc, #116]	; (800b5ec <EE_WriteEl+0x8c>)
 800b578:	ea01 4606 	and.w	r6, r1, r6, lsl #16
 800b57c:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
    el |= EE_Crc(el);
 800b580:	4630      	mov	r0, r6
 800b582:	4629      	mov	r1, r5
 800b584:	f7ff ff41 	bl	800b40a <EE_Crc>
 800b588:	ea40 0206 	orr.w	r2, r0, r6
 800b58c:	462b      	mov	r3, r5
    EE_FLASH_ADDR(pv, pv->current_write_page) + pv->next_write_offset;
 800b58e:	6821      	ldr	r1, [r4, #0]
 800b590:	7960      	ldrb	r0, [r4, #5]
 800b592:	eb01 21c0 	add.w	r1, r1, r0, lsl #11
 800b596:	8920      	ldrh	r0, [r4, #8]
  if (FLASH_IF_Write64(flash_addr, el) != 0)
 800b598:	4408      	add	r0, r1
 800b59a:	f7fb faa1 	bl	8006ae0 <FLASH_IF_Write64>
 800b59e:	bb10      	cbnz	r0, 800b5e6 <EE_WriteEl+0x86>
  pv->next_write_offset += HW_FLASH_WIDTH;
 800b5a0:	8923      	ldrh	r3, [r4, #8]
 800b5a2:	3308      	adds	r3, #8
 800b5a4:	8123      	strh	r3, [r4, #8]
  pv->nb_written_elements++;
 800b5a6:	88e3      	ldrh	r3, [r4, #6]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	80e3      	strh	r3, [r4, #6]
}
 800b5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    page = pv->current_write_page;
 800b5ae:	7947      	ldrb	r7, [r0, #5]
    if (EE_SetState(pv, page + 1, EE_GetState(pv, page)) != EE_OK)
 800b5b0:	4639      	mov	r1, r7
 800b5b2:	f7ff ff19 	bl	800b3e8 <EE_GetState>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	1c79      	adds	r1, r7, #1
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f7ff ffbe 	bl	800b53c <EE_SetState>
 800b5c0:	b968      	cbnz	r0, 800b5de <EE_WriteEl+0x7e>
    if (EE_SetState(pv, page, EE_STATE_VALID) != EE_OK)
 800b5c2:	2203      	movs	r2, #3
 800b5c4:	4639      	mov	r1, r7
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f7ff ffb8 	bl	800b53c <EE_SetState>
 800b5cc:	b948      	cbnz	r0, 800b5e2 <EE_WriteEl+0x82>
    pv->current_write_page = page + 1;
 800b5ce:	3701      	adds	r7, #1
 800b5d0:	7167      	strb	r7, [r4, #5]
    pv->next_write_offset = EE_HEADER_SIZE;
 800b5d2:	2320      	movs	r3, #32
 800b5d4:	8123      	strh	r3, [r4, #8]
 800b5d6:	e7cb      	b.n	800b570 <EE_WriteEl+0x10>
    el = 0ULL;
 800b5d8:	2200      	movs	r2, #0
 800b5da:	4613      	mov	r3, r2
 800b5dc:	e7d7      	b.n	800b58e <EE_WriteEl+0x2e>
      return EE_WRITE_ERROR;
 800b5de:	2004      	movs	r0, #4
 800b5e0:	e7e4      	b.n	800b5ac <EE_WriteEl+0x4c>
      return EE_WRITE_ERROR;
 800b5e2:	2004      	movs	r0, #4
 800b5e4:	e7e2      	b.n	800b5ac <EE_WriteEl+0x4c>
    return EE_WRITE_ERROR;
 800b5e6:	2004      	movs	r0, #4
 800b5e8:	e7e0      	b.n	800b5ac <EE_WriteEl+0x4c>
 800b5ea:	bf00      	nop
 800b5ec:	3fff0000 	.word	0x3fff0000

0800b5f0 <EE_Transfer>:
{
 800b5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f4:	b082      	sub	sp, #8
 800b5f6:	4605      	mov	r5, r0
 800b5f8:	460e      	mov	r6, r1
    (page < pv->nb_pages) ? (2 * pv->nb_pages - 1) : (pv->nb_pages - 1);
 800b5fa:	7907      	ldrb	r7, [r0, #4]
 800b5fc:	4297      	cmp	r7, r2
 800b5fe:	d906      	bls.n	800b60e <EE_Transfer+0x1e>
 800b600:	007f      	lsls	r7, r7, #1
 800b602:	3f01      	subs	r7, #1
  if (addr != EE_TAG)
 800b604:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800b608:	d018      	beq.n	800b63c <EE_Transfer+0x4c>
    page = last_page;
 800b60a:	463c      	mov	r4, r7
 800b60c:	e006      	b.n	800b61c <EE_Transfer+0x2c>
    (page < pv->nb_pages) ? (2 * pv->nb_pages - 1) : (pv->nb_pages - 1);
 800b60e:	3f01      	subs	r7, #1
 800b610:	e7f8      	b.n	800b604 <EE_Transfer+0x14>
      if ((page == 0) || (page == pv->nb_pages))
 800b612:	b19c      	cbz	r4, 800b63c <EE_Transfer+0x4c>
 800b614:	792b      	ldrb	r3, [r5, #4]
 800b616:	42a3      	cmp	r3, r4
 800b618:	d010      	beq.n	800b63c <EE_Transfer+0x4c>
      page--;
 800b61a:	3c01      	subs	r4, #1
      state = EE_GetState(pv, page);
 800b61c:	4621      	mov	r1, r4
 800b61e:	4628      	mov	r0, r5
 800b620:	f7ff fee2 	bl	800b3e8 <EE_GetState>
      if ((state == EE_STATE_ACTIVE) || (state == EE_STATE_VALID))
 800b624:	3802      	subs	r0, #2
 800b626:	2801      	cmp	r0, #1
 800b628:	d8f3      	bhi.n	800b612 <EE_Transfer+0x22>
        if (EE_SetState(pv, page, EE_STATE_ERASING) != EE_OK)
 800b62a:	2204      	movs	r2, #4
 800b62c:	4621      	mov	r1, r4
 800b62e:	4628      	mov	r0, r5
 800b630:	f7ff ff84 	bl	800b53c <EE_SetState>
 800b634:	2800      	cmp	r0, #0
 800b636:	d0ec      	beq.n	800b612 <EE_Transfer+0x22>
          return EE_WRITE_ERROR;
 800b638:	2004      	movs	r0, #4
 800b63a:	e02c      	b.n	800b696 <EE_Transfer+0xa6>
    page = last_page;
 800b63c:	2400      	movs	r4, #0
 800b63e:	e007      	b.n	800b650 <EE_Transfer+0x60>
         (EE_ReadEl(pv, var, &data, pv->current_write_page) != EE_OK)))
 800b640:	796b      	ldrb	r3, [r5, #5]
 800b642:	aa01      	add	r2, sp, #4
 800b644:	b2a1      	uxth	r1, r4
 800b646:	4628      	mov	r0, r5
 800b648:	f7ff ff2f 	bl	800b4aa <EE_ReadEl>
        ((addr != EE_TAG) ||
 800b64c:	b958      	cbnz	r0, 800b666 <EE_Transfer+0x76>
  for (var = 0; var < EE_NB_MAX_ELT * pv->nb_pages; var++)
 800b64e:	3401      	adds	r4, #1
 800b650:	792b      	ldrb	r3, [r5, #4]
 800b652:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 800b656:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 800b65a:	d217      	bcs.n	800b68c <EE_Transfer+0x9c>
    if ((var != addr) &&
 800b65c:	42a6      	cmp	r6, r4
 800b65e:	d0f6      	beq.n	800b64e <EE_Transfer+0x5e>
 800b660:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800b664:	d0ec      	beq.n	800b640 <EE_Transfer+0x50>
      if (EE_ReadEl(pv, var, &data, last_page) == EE_OK)
 800b666:	fa1f f884 	uxth.w	r8, r4
 800b66a:	463b      	mov	r3, r7
 800b66c:	aa01      	add	r2, sp, #4
 800b66e:	4641      	mov	r1, r8
 800b670:	4628      	mov	r0, r5
 800b672:	f7ff ff1a 	bl	800b4aa <EE_ReadEl>
 800b676:	2800      	cmp	r0, #0
 800b678:	d1e9      	bne.n	800b64e <EE_Transfer+0x5e>
        if (EE_WriteEl(pv, var, data) != EE_OK)
 800b67a:	9a01      	ldr	r2, [sp, #4]
 800b67c:	4641      	mov	r1, r8
 800b67e:	4628      	mov	r0, r5
 800b680:	f7ff ff6e 	bl	800b560 <EE_WriteEl>
 800b684:	2800      	cmp	r0, #0
 800b686:	d0e2      	beq.n	800b64e <EE_Transfer+0x5e>
          return EE_WRITE_ERROR;
 800b688:	2004      	movs	r0, #4
 800b68a:	e004      	b.n	800b696 <EE_Transfer+0xa6>
  return EE_SetState(pv, pv->current_write_page, EE_STATE_ACTIVE);
 800b68c:	2202      	movs	r2, #2
 800b68e:	7969      	ldrb	r1, [r5, #5]
 800b690:	4628      	mov	r0, r5
 800b692:	f7ff ff53 	bl	800b53c <EE_SetState>
}
 800b696:	b002      	add	sp, #8
 800b698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b69c <EE_Recovery>:
{
 800b69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69e:	4604      	mov	r4, r0
  for (state = EE_STATE_RECEIVE; state <= EE_STATE_ACTIVE; state++)
 800b6a0:	2601      	movs	r6, #1
 800b6a2:	2e02      	cmp	r6, #2
 800b6a4:	d87a      	bhi.n	800b79c <EE_Recovery+0x100>
    for (page = 0; page < 2UL * pv->nb_pages; page++)
 800b6a6:	2500      	movs	r5, #0
 800b6a8:	e05e      	b.n	800b768 <EE_Recovery+0xcc>
        if (EE_GetState(pv, page + 1) != EE_STATE_ERASED)
 800b6aa:	1c69      	adds	r1, r5, #1
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f7ff fe9b 	bl	800b3e8 <EE_GetState>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d157      	bne.n	800b766 <EE_Recovery+0xca>
      pv->current_write_page = page;
 800b6b6:	7165      	strb	r5, [r4, #5]
      flash_addr = EE_FLASH_ADDR(pv, page) + EE_HEADER_SIZE;
 800b6b8:	6821      	ldr	r1, [r4, #0]
 800b6ba:	eb01 21c5 	add.w	r1, r1, r5, lsl #11
 800b6be:	3120      	adds	r1, #32
      for (i = 0; i < EE_NB_MAX_ELT; i++)
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	28fb      	cmp	r0, #251	; 0xfb
 800b6c4:	d819      	bhi.n	800b6fa <EE_Recovery+0x5e>
        if (*EE_PTR(flash_addr) == EE_ERASED)
 800b6c6:	e9d1 2300 	ldrd	r2, r3, [r1]
 800b6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ce:	bf08      	it	eq
 800b6d0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800b6d4:	d011      	beq.n	800b6fa <EE_Recovery+0x5e>
        pv->nb_written_elements++;
 800b6d6:	88e3      	ldrh	r3, [r4, #6]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	80e3      	strh	r3, [r4, #6]
        pv->next_write_offset += HW_FLASH_WIDTH;
 800b6dc:	8923      	ldrh	r3, [r4, #8]
 800b6de:	3308      	adds	r3, #8
 800b6e0:	8123      	strh	r3, [r4, #8]
        flash_addr += HW_FLASH_WIDTH;
 800b6e2:	3108      	adds	r1, #8
      for (i = 0; i < EE_NB_MAX_ELT; i++)
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	e7ec      	b.n	800b6c2 <EE_Recovery+0x26>
          if (EE_SetState(pv, page - 1, EE_STATE_VALID) != EE_OK)
 800b6e8:	2203      	movs	r2, #3
 800b6ea:	4639      	mov	r1, r7
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f7ff ff25 	bl	800b53c <EE_SetState>
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	d0df      	beq.n	800b6b6 <EE_Recovery+0x1a>
            return EE_WRITE_ERROR;
 800b6f6:	2004      	movs	r0, #4
 800b6f8:	e034      	b.n	800b764 <EE_Recovery+0xc8>
      while (!((page == 0) || (page == pv->nb_pages)))
 800b6fa:	b13d      	cbz	r5, 800b70c <EE_Recovery+0x70>
 800b6fc:	7923      	ldrb	r3, [r4, #4]
 800b6fe:	42ab      	cmp	r3, r5
 800b700:	d004      	beq.n	800b70c <EE_Recovery+0x70>
        pv->nb_written_elements += EE_NB_MAX_ELT;
 800b702:	88e3      	ldrh	r3, [r4, #6]
 800b704:	33fc      	adds	r3, #252	; 0xfc
 800b706:	80e3      	strh	r3, [r4, #6]
        page--;
 800b708:	3d01      	subs	r5, #1
 800b70a:	e7f6      	b.n	800b6fa <EE_Recovery+0x5e>
      if (state == EE_STATE_RECEIVE)
 800b70c:	2e01      	cmp	r6, #1
 800b70e:	d006      	beq.n	800b71e <EE_Recovery+0x82>
      first_page = EE_NEXT_POOL(pv);
 800b710:	7963      	ldrb	r3, [r4, #5]
 800b712:	7926      	ldrb	r6, [r4, #4]
 800b714:	42b3      	cmp	r3, r6
 800b716:	d300      	bcc.n	800b71a <EE_Recovery+0x7e>
 800b718:	2600      	movs	r6, #0
      for (page = first_page; page < first_page + pv->nb_pages; page++)
 800b71a:	4635      	mov	r5, r6
 800b71c:	e00a      	b.n	800b734 <EE_Recovery+0x98>
        if (EE_Transfer(pv, EE_TAG, page) != EE_OK)
 800b71e:	462a      	mov	r2, r5
 800b720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b724:	4620      	mov	r0, r4
 800b726:	f7ff ff63 	bl	800b5f0 <EE_Transfer>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	d0f0      	beq.n	800b710 <EE_Recovery+0x74>
          return EE_WRITE_ERROR;
 800b72e:	2004      	movs	r0, #4
 800b730:	e018      	b.n	800b764 <EE_Recovery+0xc8>
      for (page = first_page; page < first_page + pv->nb_pages; page++)
 800b732:	3501      	adds	r5, #1
 800b734:	7923      	ldrb	r3, [r4, #4]
 800b736:	4433      	add	r3, r6
 800b738:	42ab      	cmp	r3, r5
 800b73a:	d912      	bls.n	800b762 <EE_Recovery+0xc6>
        if (EE_GetState(pv, page) != EE_STATE_ERASED)
 800b73c:	4629      	mov	r1, r5
 800b73e:	4620      	mov	r0, r4
 800b740:	f7ff fe52 	bl	800b3e8 <EE_GetState>
 800b744:	2800      	cmp	r0, #0
 800b746:	d0f4      	beq.n	800b732 <EE_Recovery+0x96>
          if (FLASH_IF_EraseByPages(EE_FLASH_PAGE(pv, page), 1, 0) != 0)
 800b748:	6820      	ldr	r0, [r4, #0]
 800b74a:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 800b74e:	2200      	movs	r2, #0
 800b750:	2101      	movs	r1, #1
 800b752:	eb05 20d0 	add.w	r0, r5, r0, lsr #11
 800b756:	f7fb f9df 	bl	8006b18 <FLASH_IF_EraseByPages>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d0e9      	beq.n	800b732 <EE_Recovery+0x96>
            return EE_ERASE_ERROR;
 800b75e:	2003      	movs	r0, #3
 800b760:	e000      	b.n	800b764 <EE_Recovery+0xc8>
      return EE_OK;
 800b762:	2000      	movs	r0, #0
}
 800b764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (page = 0; page < 2UL * pv->nb_pages; page++)
 800b766:	3501      	adds	r5, #1
 800b768:	7927      	ldrb	r7, [r4, #4]
 800b76a:	ebb5 0f47 	cmp.w	r5, r7, lsl #1
 800b76e:	d213      	bcs.n	800b798 <EE_Recovery+0xfc>
      if (state != EE_GetState(pv, page))
 800b770:	4629      	mov	r1, r5
 800b772:	4620      	mov	r0, r4
 800b774:	f7ff fe38 	bl	800b3e8 <EE_GetState>
 800b778:	42b0      	cmp	r0, r6
 800b77a:	d1f4      	bne.n	800b766 <EE_Recovery+0xca>
      if ((page == 0) || (page == pv->nb_pages))
 800b77c:	2d00      	cmp	r5, #0
 800b77e:	d094      	beq.n	800b6aa <EE_Recovery+0xe>
 800b780:	42af      	cmp	r7, r5
 800b782:	d092      	beq.n	800b6aa <EE_Recovery+0xe>
        prev_state = EE_GetState(pv, page - 1);
 800b784:	1e6f      	subs	r7, r5, #1
 800b786:	4639      	mov	r1, r7
 800b788:	4620      	mov	r0, r4
 800b78a:	f7ff fe2d 	bl	800b3e8 <EE_GetState>
        if (prev_state != state)
 800b78e:	4286      	cmp	r6, r0
 800b790:	d0aa      	beq.n	800b6e8 <EE_Recovery+0x4c>
          if (prev_state != EE_STATE_VALID)
 800b792:	2803      	cmp	r0, #3
 800b794:	d08f      	beq.n	800b6b6 <EE_Recovery+0x1a>
 800b796:	e7e6      	b.n	800b766 <EE_Recovery+0xca>
  for (state = EE_STATE_RECEIVE; state <= EE_STATE_ACTIVE; state++)
 800b798:	3601      	adds	r6, #1
 800b79a:	e782      	b.n	800b6a2 <EE_Recovery+0x6>
  return EE_STATE_ERROR;
 800b79c:	2005      	movs	r0, #5
 800b79e:	e7e1      	b.n	800b764 <EE_Recovery+0xc8>

0800b7a0 <EE_Init>:
{
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	4604      	mov	r4, r0
  EE_Reset(&EE_var[0],
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	480d      	ldr	r0, [pc, #52]	; (800b7dc <EE_Init+0x3c>)
 800b7a8:	f7ff fe16 	bl	800b3d8 <EE_Reset>
  if (format)
 800b7ac:	b194      	cbz	r4, 800b7d4 <EE_Init+0x34>
      2 * (EE_var[0].nb_pages + (CFG_EE_BANK1_SIZE ? EE_var[1].nb_pages : 0));
 800b7ae:	4b0b      	ldr	r3, [pc, #44]	; (800b7dc <EE_Init+0x3c>)
 800b7b0:	7919      	ldrb	r1, [r3, #4]
    if (FLASH_IF_EraseByPages(EE_FLASH_PAGE(EE_var, 0), total_nb_pages, 0) != 0)
 800b7b2:	6818      	ldr	r0, [r3, #0]
 800b7b4:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	0049      	lsls	r1, r1, #1
 800b7bc:	0ac0      	lsrs	r0, r0, #11
 800b7be:	f7fb f9ab 	bl	8006b18 <FLASH_IF_EraseByPages>
 800b7c2:	b108      	cbz	r0, 800b7c8 <EE_Init+0x28>
      return EE_ERASE_ERROR;
 800b7c4:	2003      	movs	r0, #3
 800b7c6:	e008      	b.n	800b7da <EE_Init+0x3a>
    status = EE_SetState(&EE_var[0], 0, EE_STATE_ACTIVE);
 800b7c8:	2202      	movs	r2, #2
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	4803      	ldr	r0, [pc, #12]	; (800b7dc <EE_Init+0x3c>)
 800b7ce:	f7ff feb5 	bl	800b53c <EE_SetState>
    return status;
 800b7d2:	e002      	b.n	800b7da <EE_Init+0x3a>
  status = EE_Recovery(&EE_var[0]);
 800b7d4:	4801      	ldr	r0, [pc, #4]	; (800b7dc <EE_Init+0x3c>)
 800b7d6:	f7ff ff61 	bl	800b69c <EE_Recovery>
}
 800b7da:	bd10      	pop	{r4, pc}
 800b7dc:	20002874 	.word	0x20002874

0800b7e0 <EE_Read>:
{
 800b7e0:	b508      	push	{r3, lr}
  return EE_ReadEl(pv, addr, data, pv->current_write_page);
 800b7e2:	4802      	ldr	r0, [pc, #8]	; (800b7ec <EE_Read+0xc>)
 800b7e4:	7943      	ldrb	r3, [r0, #5]
 800b7e6:	f7ff fe60 	bl	800b4aa <EE_ReadEl>
}
 800b7ea:	bd08      	pop	{r3, pc}
 800b7ec:	20002874 	.word	0x20002874

0800b7f0 <EE_Write>:
{
 800b7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f2:	460f      	mov	r7, r1
 800b7f4:	4616      	mov	r6, r2
  if (pv->nb_written_elements < EE_NB_MAX_ELT * pv->nb_pages)
 800b7f6:	4b1c      	ldr	r3, [pc, #112]	; (800b868 <EE_Write+0x78>)
 800b7f8:	88d8      	ldrh	r0, [r3, #6]
 800b7fa:	791b      	ldrb	r3, [r3, #4]
 800b7fc:	ebc3 1583 	rsb	r5, r3, r3, lsl #6
 800b800:	ebb0 0f85 	cmp.w	r0, r5, lsl #2
 800b804:	d323      	bcc.n	800b84e <EE_Write+0x5e>
 800b806:	461c      	mov	r4, r3
  page = EE_NEXT_POOL(pv);
 800b808:	4a17      	ldr	r2, [pc, #92]	; (800b868 <EE_Write+0x78>)
 800b80a:	7952      	ldrb	r2, [r2, #5]
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d800      	bhi.n	800b812 <EE_Write+0x22>
 800b810:	2400      	movs	r4, #0
  if (EE_GetState(pv, page) != EE_STATE_ERASED)
 800b812:	4621      	mov	r1, r4
 800b814:	4814      	ldr	r0, [pc, #80]	; (800b868 <EE_Write+0x78>)
 800b816:	f7ff fde7 	bl	800b3e8 <EE_GetState>
 800b81a:	b9e0      	cbnz	r0, 800b856 <EE_Write+0x66>
  if (EE_SetState(pv, page, EE_STATE_RECEIVE) != EE_OK)
 800b81c:	2201      	movs	r2, #1
 800b81e:	4621      	mov	r1, r4
 800b820:	4811      	ldr	r0, [pc, #68]	; (800b868 <EE_Write+0x78>)
 800b822:	f7ff fe8b 	bl	800b53c <EE_SetState>
 800b826:	b9c0      	cbnz	r0, 800b85a <EE_Write+0x6a>
  pv->current_write_page = page;
 800b828:	480f      	ldr	r0, [pc, #60]	; (800b868 <EE_Write+0x78>)
 800b82a:	7144      	strb	r4, [r0, #5]
  pv->nb_written_elements = 0;
 800b82c:	2300      	movs	r3, #0
 800b82e:	80c3      	strh	r3, [r0, #6]
  pv->next_write_offset = EE_HEADER_SIZE;
 800b830:	2320      	movs	r3, #32
 800b832:	8103      	strh	r3, [r0, #8]
  if (EE_WriteEl(pv, addr, data) != EE_OK)
 800b834:	4632      	mov	r2, r6
 800b836:	4639      	mov	r1, r7
 800b838:	f7ff fe92 	bl	800b560 <EE_WriteEl>
 800b83c:	b978      	cbnz	r0, 800b85e <EE_Write+0x6e>
  if (EE_Transfer(pv, addr, page) != EE_OK)
 800b83e:	4622      	mov	r2, r4
 800b840:	4639      	mov	r1, r7
 800b842:	4809      	ldr	r0, [pc, #36]	; (800b868 <EE_Write+0x78>)
 800b844:	f7ff fed4 	bl	800b5f0 <EE_Transfer>
 800b848:	b958      	cbnz	r0, 800b862 <EE_Write+0x72>
  return EE_CLEAN_NEEDED;
 800b84a:	2002      	movs	r0, #2
 800b84c:	e004      	b.n	800b858 <EE_Write+0x68>
    return EE_WriteEl(pv, addr, data);
 800b84e:	4806      	ldr	r0, [pc, #24]	; (800b868 <EE_Write+0x78>)
 800b850:	f7ff fe86 	bl	800b560 <EE_WriteEl>
 800b854:	e000      	b.n	800b858 <EE_Write+0x68>
    return EE_STATE_ERROR;
 800b856:	2005      	movs	r0, #5
}
 800b858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return EE_WRITE_ERROR;
 800b85a:	2004      	movs	r0, #4
 800b85c:	e7fc      	b.n	800b858 <EE_Write+0x68>
    return EE_WRITE_ERROR;
 800b85e:	2004      	movs	r0, #4
 800b860:	e7fa      	b.n	800b858 <EE_Write+0x68>
    return EE_WRITE_ERROR;
 800b862:	2004      	movs	r0, #4
 800b864:	e7f8      	b.n	800b858 <EE_Write+0x68>
 800b866:	bf00      	nop
 800b868:	20002874 	.word	0x20002874

0800b86c <EE_Clean>:
{
 800b86c:	b570      	push	{r4, r5, r6, lr}
 800b86e:	460e      	mov	r6, r1
  page = EE_NEXT_POOL(pv);
 800b870:	4b0e      	ldr	r3, [pc, #56]	; (800b8ac <EE_Clean+0x40>)
 800b872:	795a      	ldrb	r2, [r3, #5]
 800b874:	791c      	ldrb	r4, [r3, #4]
 800b876:	42a2      	cmp	r2, r4
 800b878:	d208      	bcs.n	800b88c <EE_Clean+0x20>
 800b87a:	4625      	mov	r5, r4
  if (EE_GetState(pv, page) != EE_STATE_ERASING)
 800b87c:	4629      	mov	r1, r5
 800b87e:	480b      	ldr	r0, [pc, #44]	; (800b8ac <EE_Clean+0x40>)
 800b880:	f7ff fdb2 	bl	800b3e8 <EE_GetState>
 800b884:	2804      	cmp	r0, #4
 800b886:	d003      	beq.n	800b890 <EE_Clean+0x24>
    return EE_STATE_ERROR;
 800b888:	2005      	movs	r0, #5
}
 800b88a:	bd70      	pop	{r4, r5, r6, pc}
  page = EE_NEXT_POOL(pv);
 800b88c:	2500      	movs	r5, #0
 800b88e:	e7f5      	b.n	800b87c <EE_Clean+0x10>
  if (FLASH_IF_EraseByPages(EE_FLASH_PAGE(pv, page), pv->nb_pages, interrupt)
 800b890:	4b06      	ldr	r3, [pc, #24]	; (800b8ac <EE_Clean+0x40>)
 800b892:	6818      	ldr	r0, [r3, #0]
 800b894:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 800b898:	4632      	mov	r2, r6
 800b89a:	4621      	mov	r1, r4
 800b89c:	eb05 20d0 	add.w	r0, r5, r0, lsr #11
 800b8a0:	f7fb f93a 	bl	8006b18 <FLASH_IF_EraseByPages>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d0f0      	beq.n	800b88a <EE_Clean+0x1e>
    return EE_ERASE_ERROR;
 800b8a8:	2003      	movs	r0, #3
 800b8aa:	e7ee      	b.n	800b88a <EE_Clean+0x1e>
 800b8ac:	20002874 	.word	0x20002874

0800b8b0 <CmdProcessNotify>:

  /* USER CODE END st_sigfox_open_2 */
}

static void CmdProcessNotify(void)
{
 800b8b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CmdProcessNotify_1 */

  /* USER CODE END CmdProcessNotify_1 */
  UTIL_SEQ_SetTask(1 << CFG_SEQ_Task_Vcom, CFG_SEQ_Prio_0);
 800b8b2:	2100      	movs	r1, #0
 800b8b4:	2001      	movs	r0, #1
 800b8b6:	f016 fdd7 	bl	8022468 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN CmdProcessNotify_2 */

  /* USER CODE END CmdProcessNotify_2 */
}
 800b8ba:	bd08      	pop	{r3, pc}

0800b8bc <st_sigfox_open>:
{
 800b8bc:	b530      	push	{r4, r5, lr}
 800b8be:	b08b      	sub	sp, #44	; 0x2c
 800b8c0:	4604      	mov	r4, r0
  sfx_u32 config_words[3] = {0};
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	9307      	str	r3, [sp, #28]
 800b8c6:	9308      	str	r3, [sp, #32]
 800b8c8:	9309      	str	r3, [sp, #36]	; 0x24
  E2P_Read_ConfigWords(sfx_rc, config_words);
 800b8ca:	a907      	add	r1, sp, #28
 800b8cc:	f001 fe30 	bl	800d530 <E2P_Read_ConfigWords>
  switch (sfx_rc)
 800b8d0:	2c07      	cmp	r4, #7
 800b8d2:	f200 8085 	bhi.w	800b9e0 <st_sigfox_open+0x124>
 800b8d6:	e8df f004 	tbb	[pc, r4]
 800b8da:	1104      	.short	0x1104
 800b8dc:	59473523 	.word	0x59473523
 800b8e0:	776b      	.short	0x776b
      sfx_rc_t SgfxRc = RC1;
 800b8e2:	466c      	mov	r4, sp
 800b8e4:	4d3f      	ldr	r5, [pc, #252]	; (800b9e4 <st_sigfox_open+0x128>)
 800b8e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b8ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800b8f2:	4668      	mov	r0, sp
 800b8f4:	f7f6 fc44 	bl	8002180 <SIGFOX_API_open>
}
 800b8f8:	b00b      	add	sp, #44	; 0x2c
 800b8fa:	bd30      	pop	{r4, r5, pc}
      sfx_rc_t SgfxRc = RC2;
 800b8fc:	466c      	mov	r4, sp
 800b8fe:	4d3a      	ldr	r5, [pc, #232]	; (800b9e8 <st_sigfox_open+0x12c>)
 800b900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b904:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b908:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800b90c:	4668      	mov	r0, sp
 800b90e:	f7f6 fc37 	bl	8002180 <SIGFOX_API_open>
      if (error == SFX_ERR_NONE)
 800b912:	2800      	cmp	r0, #0
 800b914:	d1f0      	bne.n	800b8f8 <st_sigfox_open+0x3c>
        error = SIGFOX_API_set_std_config(config_words, RC2_SET_STD_TIMER_ENABLE);
 800b916:	2101      	movs	r1, #1
 800b918:	a807      	add	r0, sp, #28
 800b91a:	f7f6 fe41 	bl	80025a0 <SIGFOX_API_set_std_config>
      break;
 800b91e:	e7eb      	b.n	800b8f8 <st_sigfox_open+0x3c>
      sfx_rc_t SgfxRc = RC3A;
 800b920:	466c      	mov	r4, sp
 800b922:	4d32      	ldr	r5, [pc, #200]	; (800b9ec <st_sigfox_open+0x130>)
 800b924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b928:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b92c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800b930:	4668      	mov	r0, sp
 800b932:	f7f6 fc25 	bl	8002180 <SIGFOX_API_open>
      if (error == SFX_ERR_NONE)
 800b936:	2800      	cmp	r0, #0
 800b938:	d1de      	bne.n	800b8f8 <st_sigfox_open+0x3c>
        error = SIGFOX_API_set_std_config(config_words, NA);
 800b93a:	2100      	movs	r1, #0
 800b93c:	a807      	add	r0, sp, #28
 800b93e:	f7f6 fe2f 	bl	80025a0 <SIGFOX_API_set_std_config>
      break;
 800b942:	e7d9      	b.n	800b8f8 <st_sigfox_open+0x3c>
      sfx_rc_t SgfxRc = RC3C;
 800b944:	466c      	mov	r4, sp
 800b946:	4d2a      	ldr	r5, [pc, #168]	; (800b9f0 <st_sigfox_open+0x134>)
 800b948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b94a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b94c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b950:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800b954:	4668      	mov	r0, sp
 800b956:	f7f6 fc13 	bl	8002180 <SIGFOX_API_open>
      if (error == SFX_ERR_NONE)
 800b95a:	2800      	cmp	r0, #0
 800b95c:	d1cc      	bne.n	800b8f8 <st_sigfox_open+0x3c>
        error = SIGFOX_API_set_std_config(config_words, NA);
 800b95e:	2100      	movs	r1, #0
 800b960:	a807      	add	r0, sp, #28
 800b962:	f7f6 fe1d 	bl	80025a0 <SIGFOX_API_set_std_config>
      break;
 800b966:	e7c7      	b.n	800b8f8 <st_sigfox_open+0x3c>
      sfx_rc_t SgfxRc = RC4;
 800b968:	466c      	mov	r4, sp
 800b96a:	4d22      	ldr	r5, [pc, #136]	; (800b9f4 <st_sigfox_open+0x138>)
 800b96c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b96e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b970:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b974:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800b978:	4668      	mov	r0, sp
 800b97a:	f7f6 fc01 	bl	8002180 <SIGFOX_API_open>
      if (error == SFX_ERR_NONE)
 800b97e:	2800      	cmp	r0, #0
 800b980:	d1ba      	bne.n	800b8f8 <st_sigfox_open+0x3c>
        error = SIGFOX_API_set_std_config(config_words, RC4_SET_STD_TIMER_ENABLE);
 800b982:	2101      	movs	r1, #1
 800b984:	a807      	add	r0, sp, #28
 800b986:	f7f6 fe0b 	bl	80025a0 <SIGFOX_API_set_std_config>
      break;
 800b98a:	e7b5      	b.n	800b8f8 <st_sigfox_open+0x3c>
      sfx_rc_t SgfxRc = RC5;
 800b98c:	466c      	mov	r4, sp
 800b98e:	4d1a      	ldr	r5, [pc, #104]	; (800b9f8 <st_sigfox_open+0x13c>)
 800b990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b994:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b998:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800b99c:	4668      	mov	r0, sp
 800b99e:	f7f6 fbef 	bl	8002180 <SIGFOX_API_open>
      if (error == SFX_ERR_NONE)
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	d1a8      	bne.n	800b8f8 <st_sigfox_open+0x3c>
        error = SIGFOX_API_set_std_config(config_words, NA);
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	a807      	add	r0, sp, #28
 800b9aa:	f7f6 fdf9 	bl	80025a0 <SIGFOX_API_set_std_config>
      break;
 800b9ae:	e7a3      	b.n	800b8f8 <st_sigfox_open+0x3c>
      sfx_rc_t SgfxRc = RC6;
 800b9b0:	466c      	mov	r4, sp
 800b9b2:	4d12      	ldr	r5, [pc, #72]	; (800b9fc <st_sigfox_open+0x140>)
 800b9b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b9bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800b9c0:	4668      	mov	r0, sp
 800b9c2:	f7f6 fbdd 	bl	8002180 <SIGFOX_API_open>
      break;
 800b9c6:	e797      	b.n	800b8f8 <st_sigfox_open+0x3c>
      sfx_rc_t SgfxRc = RC7;
 800b9c8:	466c      	mov	r4, sp
 800b9ca:	4d0d      	ldr	r5, [pc, #52]	; (800ba00 <st_sigfox_open+0x144>)
 800b9cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b9d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800b9d8:	4668      	mov	r0, sp
 800b9da:	f7f6 fbd1 	bl	8002180 <SIGFOX_API_open>
      break;
 800b9de:	e78b      	b.n	800b8f8 <st_sigfox_open+0x3c>
  E2P_Read_ConfigWords(sfx_rc, config_words);
 800b9e0:	2010      	movs	r0, #16
 800b9e2:	e789      	b.n	800b8f8 <st_sigfox_open+0x3c>
 800b9e4:	08024928 	.word	0x08024928
 800b9e8:	08024944 	.word	0x08024944
 800b9ec:	08024960 	.word	0x08024960
 800b9f0:	0802497c 	.word	0x0802497c
 800b9f4:	08024998 	.word	0x08024998
 800b9f8:	080249b4 	.word	0x080249b4
 800b9fc:	080249d0 	.word	0x080249d0
 800ba00:	080249ec 	.word	0x080249ec

0800ba04 <Sigfox_Init>:
{
 800ba04:	b510      	push	{r4, lr}
 800ba06:	b084      	sub	sp, #16
  CMD_Init(CmdProcessNotify);
 800ba08:	4864      	ldr	r0, [pc, #400]	; (800bb9c <Sigfox_Init+0x198>)
 800ba0a:	f001 fb15 	bl	800d038 <CMD_Init>
  APP_PPRINTF(">> APP_VERSION:        V%X.%X.%X\r\n",
 800ba0e:	2301      	movs	r3, #1
 800ba10:	9302      	str	r3, [sp, #8]
 800ba12:	2000      	movs	r0, #0
 800ba14:	9001      	str	r0, [sp, #4]
 800ba16:	9300      	str	r3, [sp, #0]
 800ba18:	4b61      	ldr	r3, [pc, #388]	; (800bba0 <Sigfox_Init+0x19c>)
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	4601      	mov	r1, r0
 800ba1e:	f016 fbfd 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d1f3      	bne.n	800ba0e <Sigfox_Init+0xa>
  APP_PPRINTF(">> MW_SIGFOX_VERSION:  V%X.%X.%X\r\n",
 800ba26:	2000      	movs	r0, #0
 800ba28:	9002      	str	r0, [sp, #8]
 800ba2a:	2307      	movs	r3, #7
 800ba2c:	9301      	str	r3, [sp, #4]
 800ba2e:	2301      	movs	r3, #1
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	4b5c      	ldr	r3, [pc, #368]	; (800bba4 <Sigfox_Init+0x1a0>)
 800ba34:	4602      	mov	r2, r0
 800ba36:	4601      	mov	r1, r0
 800ba38:	f016 fbf0 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	d1f2      	bne.n	800ba26 <Sigfox_Init+0x22>
  APP_PPRINTF(">> MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800ba40:	2000      	movs	r0, #0
 800ba42:	9002      	str	r0, [sp, #8]
 800ba44:	2301      	movs	r3, #1
 800ba46:	9301      	str	r3, [sp, #4]
 800ba48:	9300      	str	r3, [sp, #0]
 800ba4a:	4b57      	ldr	r3, [pc, #348]	; (800bba8 <Sigfox_Init+0x1a4>)
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	4601      	mov	r1, r0
 800ba50:	f016 fbe4 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d1f3      	bne.n	800ba40 <Sigfox_Init+0x3c>
 800ba58:	e008      	b.n	800ba6c <Sigfox_Init+0x68>
  APP_PPRINTF(">> TXPOWER MODE :   %s \r\n", (RBI_GetTxConfig() == RBI_CONF_RFO_HP ? "HIGH POWER" : "LOWPOWER"));
 800ba5a:	4b54      	ldr	r3, [pc, #336]	; (800bbac <Sigfox_Init+0x1a8>)
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	4b54      	ldr	r3, [pc, #336]	; (800bbb0 <Sigfox_Init+0x1ac>)
 800ba60:	2200      	movs	r2, #0
 800ba62:	4611      	mov	r1, r2
 800ba64:	4610      	mov	r0, r2
 800ba66:	f016 fbd9 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800ba6a:	b128      	cbz	r0, 800ba78 <Sigfox_Init+0x74>
 800ba6c:	f7fb f9f6 	bl	8006e5c <RBI_GetTxConfig>
 800ba70:	2802      	cmp	r0, #2
 800ba72:	d0f2      	beq.n	800ba5a <Sigfox_Init+0x56>
 800ba74:	4b4f      	ldr	r3, [pc, #316]	; (800bbb4 <Sigfox_Init+0x1b0>)
 800ba76:	e7f1      	b.n	800ba5c <Sigfox_Init+0x58>
  sfx_rc = E2P_Read_Rc();
 800ba78:	f001 fcca 	bl	800d410 <E2P_Read_Rc>
 800ba7c:	4604      	mov	r4, r0
  switch (sfx_rc)
 800ba7e:	2807      	cmp	r0, #7
 800ba80:	d86f      	bhi.n	800bb62 <Sigfox_Init+0x15e>
 800ba82:	e8df f000 	tbb	[pc, r0]
 800ba86:	2f04      	.short	0x2f04
 800ba88:	534a4138 	.word	0x534a4138
 800ba8c:	655c      	.short	0x655c
      APP_PPRINTF(">> SIGFOX sfx_rc : RC1 \r\n");
 800ba8e:	4b4a      	ldr	r3, [pc, #296]	; (800bbb8 <Sigfox_Init+0x1b4>)
 800ba90:	2200      	movs	r2, #0
 800ba92:	4611      	mov	r1, r2
 800ba94:	4610      	mov	r0, r2
 800ba96:	f016 fbc1 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d1f7      	bne.n	800ba8e <Sigfox_Init+0x8a>
  error = st_sigfox_open(sfx_rc);
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f7ff ff0c 	bl	800b8bc <st_sigfox_open>
 800baa4:	4604      	mov	r4, r0
  Radio.Init(&RfApiRadioEvents);
 800baa6:	4b45      	ldr	r3, [pc, #276]	; (800bbbc <Sigfox_Init+0x1b8>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4845      	ldr	r0, [pc, #276]	; (800bbc0 <Sigfox_Init+0x1bc>)
 800baac:	4798      	blx	r3
  if (1U == E2P_Read_AtEcho())
 800baae:	f001 fcdf 	bl	800d470 <E2P_Read_AtEcho>
 800bab2:	2801      	cmp	r0, #1
 800bab4:	d05e      	beq.n	800bb74 <Sigfox_Init+0x170>
  APP_PPRINTF("-------------------------------------\r\n\r\n");
 800bab6:	4b43      	ldr	r3, [pc, #268]	; (800bbc4 <Sigfox_Init+0x1c0>)
 800bab8:	2200      	movs	r2, #0
 800baba:	4611      	mov	r1, r2
 800babc:	4610      	mov	r0, r2
 800babe:	f016 fbad 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d1f7      	bne.n	800bab6 <Sigfox_Init+0xb2>
  APP_PPRINTF("BOOTALERT\r\n");
 800bac6:	4b40      	ldr	r3, [pc, #256]	; (800bbc8 <Sigfox_Init+0x1c4>)
 800bac8:	2200      	movs	r2, #0
 800baca:	4611      	mov	r1, r2
 800bacc:	4610      	mov	r0, r2
 800bace:	f016 fba5 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800bad2:	2800      	cmp	r0, #0
 800bad4:	d1f7      	bne.n	800bac6 <Sigfox_Init+0xc2>
  UTIL_SEQ_RegTask(1 << CFG_SEQ_Task_Vcom, UTIL_SEQ_RFU, CMD_Process);
 800bad6:	4a3d      	ldr	r2, [pc, #244]	; (800bbcc <Sigfox_Init+0x1c8>)
 800bad8:	2100      	movs	r1, #0
 800bada:	2001      	movs	r0, #1
 800badc:	f016 fdc8 	bl	8022670 <UTIL_SEQ_RegTask>
}
 800bae0:	b004      	add	sp, #16
 800bae2:	bd10      	pop	{r4, pc}
      APP_PPRINTF(">> SIGFOX sfx_rc : RC2 \r\n");
 800bae4:	4b3a      	ldr	r3, [pc, #232]	; (800bbd0 <Sigfox_Init+0x1cc>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	4611      	mov	r1, r2
 800baea:	4610      	mov	r0, r2
 800baec:	f016 fb96 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d1f7      	bne.n	800bae4 <Sigfox_Init+0xe0>
 800baf4:	e7d3      	b.n	800ba9e <Sigfox_Init+0x9a>
      APP_PPRINTF(">> SIGFOX sfx_rc : RC3A \r\n");
 800baf6:	4b37      	ldr	r3, [pc, #220]	; (800bbd4 <Sigfox_Init+0x1d0>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	4611      	mov	r1, r2
 800bafc:	4610      	mov	r0, r2
 800bafe:	f016 fb8d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	d1f7      	bne.n	800baf6 <Sigfox_Init+0xf2>
 800bb06:	e7ca      	b.n	800ba9e <Sigfox_Init+0x9a>
      APP_PPRINTF(">> SIGFOX sfx_rc : RC3C \r\n");
 800bb08:	4b33      	ldr	r3, [pc, #204]	; (800bbd8 <Sigfox_Init+0x1d4>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	4611      	mov	r1, r2
 800bb0e:	4610      	mov	r0, r2
 800bb10:	f016 fb84 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d1f7      	bne.n	800bb08 <Sigfox_Init+0x104>
 800bb18:	e7c1      	b.n	800ba9e <Sigfox_Init+0x9a>
      APP_PPRINTF(">> SIGFOX sfx_rc : RC4 \r\n");
 800bb1a:	4b30      	ldr	r3, [pc, #192]	; (800bbdc <Sigfox_Init+0x1d8>)
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	4611      	mov	r1, r2
 800bb20:	4610      	mov	r0, r2
 800bb22:	f016 fb7b 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	d1f7      	bne.n	800bb1a <Sigfox_Init+0x116>
 800bb2a:	e7b8      	b.n	800ba9e <Sigfox_Init+0x9a>
      APP_PPRINTF(">> SIGFOX sfx_rc : RC5 \r\n");
 800bb2c:	4b2c      	ldr	r3, [pc, #176]	; (800bbe0 <Sigfox_Init+0x1dc>)
 800bb2e:	2200      	movs	r2, #0
 800bb30:	4611      	mov	r1, r2
 800bb32:	4610      	mov	r0, r2
 800bb34:	f016 fb72 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	d1f7      	bne.n	800bb2c <Sigfox_Init+0x128>
 800bb3c:	e7af      	b.n	800ba9e <Sigfox_Init+0x9a>
      APP_PPRINTF(">> SIGFOX sfx_rc : RC6 \r\n");
 800bb3e:	4b29      	ldr	r3, [pc, #164]	; (800bbe4 <Sigfox_Init+0x1e0>)
 800bb40:	2200      	movs	r2, #0
 800bb42:	4611      	mov	r1, r2
 800bb44:	4610      	mov	r0, r2
 800bb46:	f016 fb69 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d1f7      	bne.n	800bb3e <Sigfox_Init+0x13a>
 800bb4e:	e7a6      	b.n	800ba9e <Sigfox_Init+0x9a>
      APP_PPRINTF(">> SIGFOX sfx_rc : RC7 \r\n");
 800bb50:	4b25      	ldr	r3, [pc, #148]	; (800bbe8 <Sigfox_Init+0x1e4>)
 800bb52:	2200      	movs	r2, #0
 800bb54:	4611      	mov	r1, r2
 800bb56:	4610      	mov	r0, r2
 800bb58:	f016 fb60 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d1f7      	bne.n	800bb50 <Sigfox_Init+0x14c>
 800bb60:	e79d      	b.n	800ba9e <Sigfox_Init+0x9a>
	  APP_PPRINTF(">> SIGFOX sfx_rc : NONE \r\n");
 800bb62:	4b22      	ldr	r3, [pc, #136]	; (800bbec <Sigfox_Init+0x1e8>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	4611      	mov	r1, r2
 800bb68:	4610      	mov	r0, r2
 800bb6a:	f016 fb57 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	d1f7      	bne.n	800bb62 <Sigfox_Init+0x15e>
 800bb72:	e794      	b.n	800ba9e <Sigfox_Init+0x9a>
    if (error == SFX_ERR_NONE)
 800bb74:	b944      	cbnz	r4, 800bb88 <Sigfox_Init+0x184>
      APP_PPRINTF(">> SIGFOX APPLICATION READY\r\n");
 800bb76:	4b1e      	ldr	r3, [pc, #120]	; (800bbf0 <Sigfox_Init+0x1ec>)
 800bb78:	2200      	movs	r2, #0
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	f016 fb4d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d1f7      	bne.n	800bb76 <Sigfox_Init+0x172>
 800bb86:	e796      	b.n	800bab6 <Sigfox_Init+0xb2>
      APP_PPRINTF(">> SIGFOX APPLICATION ERROR: 0x%04X\r\n", error);
 800bb88:	9400      	str	r4, [sp, #0]
 800bb8a:	4b1a      	ldr	r3, [pc, #104]	; (800bbf4 <Sigfox_Init+0x1f0>)
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	4611      	mov	r1, r2
 800bb90:	4610      	mov	r0, r2
 800bb92:	f016 fb43 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800bb96:	2800      	cmp	r0, #0
 800bb98:	d1f6      	bne.n	800bb88 <Sigfox_Init+0x184>
 800bb9a:	e78c      	b.n	800bab6 <Sigfox_Init+0xb2>
 800bb9c:	0800b8b1 	.word	0x0800b8b1
 800bba0:	08024e40 	.word	0x08024e40
 800bba4:	08026f28 	.word	0x08026f28
 800bba8:	08024e88 	.word	0x08024e88
 800bbac:	08024e34 	.word	0x08024e34
 800bbb0:	08024eac 	.word	0x08024eac
 800bbb4:	08024e28 	.word	0x08024e28
 800bbb8:	08026f4c 	.word	0x08026f4c
 800bbbc:	08028984 	.word	0x08028984
 800bbc0:	08028038 	.word	0x08028038
 800bbc4:	08027090 	.word	0x08027090
 800bbc8:	08024ec8 	.word	0x08024ec8
 800bbcc:	0800d085 	.word	0x0800d085
 800bbd0:	08026f68 	.word	0x08026f68
 800bbd4:	08026f84 	.word	0x08026f84
 800bbd8:	08026fa0 	.word	0x08026fa0
 800bbdc:	08026fbc 	.word	0x08026fbc
 800bbe0:	08026fd8 	.word	0x08026fd8
 800bbe4:	08026ff4 	.word	0x08026ff4
 800bbe8:	08027010 	.word	0x08027010
 800bbec:	0802702c 	.word	0x0802702c
 800bbf0:	08027048 	.word	0x08027048
 800bbf4:	08027068 	.word	0x08027068

0800bbf8 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800bbf8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800bbfc:	4905      	ldr	r1, [pc, #20]	; (800bc14 <__NVIC_SystemReset+0x1c>)
 800bbfe:	68ca      	ldr	r2, [r1, #12]
 800bc00:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800bc04:	4b04      	ldr	r3, [pc, #16]	; (800bc18 <__NVIC_SystemReset+0x20>)
 800bc06:	4313      	orrs	r3, r2
 800bc08:	60cb      	str	r3, [r1, #12]
 800bc0a:	f3bf 8f4f 	dsb	sy
    __NOP();
 800bc0e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800bc10:	e7fd      	b.n	800bc0e <__NVIC_SystemReset+0x16>
 800bc12:	bf00      	nop
 800bc14:	e000ed00 	.word	0xe000ed00
 800bc18:	05fa0004 	.word	0x05fa0004

0800bc1c <isHex>:
static ErrorStatus isHex(char Char)
{
  /* USER CODE BEGIN isHex_1 */

  /* USER CODE END isHex_1 */
  if (((Char >= '0') && (Char <= '9')) ||
 800bc1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b09      	cmp	r3, #9
 800bc24:	d90a      	bls.n	800bc3c <isHex+0x20>
      ((Char >= 'a') && (Char <= 'f')) ||
 800bc26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bc2a:	b2db      	uxtb	r3, r3
  if (((Char >= '0') && (Char <= '9')) ||
 800bc2c:	2b05      	cmp	r3, #5
 800bc2e:	d907      	bls.n	800bc40 <isHex+0x24>
      ((Char >= 'A') && (Char <= 'F')))
 800bc30:	3841      	subs	r0, #65	; 0x41
 800bc32:	b2c0      	uxtb	r0, r0
      ((Char >= 'a') && (Char <= 'f')) ||
 800bc34:	2805      	cmp	r0, #5
 800bc36:	d805      	bhi.n	800bc44 <isHex+0x28>
  {
    return SUCCESS;
 800bc38:	2001      	movs	r0, #1
 800bc3a:	4770      	bx	lr
 800bc3c:	2001      	movs	r0, #1
 800bc3e:	4770      	bx	lr
 800bc40:	2001      	movs	r0, #1
 800bc42:	4770      	bx	lr
  }
  else
  {
    return ERROR;
 800bc44:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN isHex_2 */

  /* USER CODE END isHex_2 */
}
 800bc46:	4770      	bx	lr

0800bc48 <Char2Nibble>:

static uint8_t Char2Nibble(char Char)
{
 800bc48:	4603      	mov	r3, r0
  /* USER CODE BEGIN Char2Nibble_1 */

  /* USER CODE END Char2Nibble_1 */
  if (((Char >= '0') && (Char <= '9')))
 800bc4a:	3830      	subs	r0, #48	; 0x30
 800bc4c:	b2c0      	uxtb	r0, r0
 800bc4e:	2809      	cmp	r0, #9
 800bc50:	d910      	bls.n	800bc74 <Char2Nibble+0x2c>
  {
    return Char - '0';
  }
  else if (((Char >= 'a') && (Char <= 'f')))
 800bc52:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bc56:	b2d2      	uxtb	r2, r2
 800bc58:	2a05      	cmp	r2, #5
 800bc5a:	d907      	bls.n	800bc6c <Char2Nibble+0x24>
  {
    return Char - 'a' + 10;
  }
  else if ((Char >= 'A') && (Char <= 'F'))
 800bc5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bc60:	b2d2      	uxtb	r2, r2
 800bc62:	2a05      	cmp	r2, #5
 800bc64:	d805      	bhi.n	800bc72 <Char2Nibble+0x2a>
  {
    return Char - 'A' + 10;
 800bc66:	3b37      	subs	r3, #55	; 0x37
 800bc68:	b2d8      	uxtb	r0, r3
 800bc6a:	4770      	bx	lr
    return Char - 'a' + 10;
 800bc6c:	3b57      	subs	r3, #87	; 0x57
 800bc6e:	b2d8      	uxtb	r0, r3
 800bc70:	4770      	bx	lr
  }
  else
  {
    return 0xF0;
 800bc72:	20f0      	movs	r0, #240	; 0xf0
  }
  /* USER CODE BEGIN Char2Nibble_2 */

  /* USER CODE END Char2Nibble_2 */
}
 800bc74:	4770      	bx	lr
	...

0800bc78 <print_u>:
{
 800bc78:	b500      	push	{lr}
 800bc7a:	b083      	sub	sp, #12
  AT_PRINTF("%u\r\n", value);
 800bc7c:	9000      	str	r0, [sp, #0]
 800bc7e:	4b04      	ldr	r3, [pc, #16]	; (800bc90 <print_u+0x18>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	4611      	mov	r1, r2
 800bc84:	4610      	mov	r0, r2
 800bc86:	f016 fac9 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800bc8a:	b003      	add	sp, #12
 800bc8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc90:	08024f60 	.word	0x08024f60

0800bc94 <print_rx>:
{
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	4606      	mov	r6, r0
 800bc9a:	460d      	mov	r5, r1
  AT_PRINTF("\r\n+RX=");
 800bc9c:	4b0d      	ldr	r3, [pc, #52]	; (800bcd4 <print_rx+0x40>)
 800bc9e:	2200      	movs	r2, #0
 800bca0:	4611      	mov	r1, r2
 800bca2:	4610      	mov	r0, r2
 800bca4:	f016 faba 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = 0; i < n; i++)
 800bca8:	2400      	movs	r4, #0
 800bcaa:	42ac      	cmp	r4, r5
 800bcac:	d209      	bcs.n	800bcc2 <print_rx+0x2e>
    AT_PRINTF("%c", pt[i]);
 800bcae:	5d33      	ldrb	r3, [r6, r4]
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	4b09      	ldr	r3, [pc, #36]	; (800bcd8 <print_rx+0x44>)
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	4610      	mov	r0, r2
 800bcba:	f016 faaf 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = 0; i < n; i++)
 800bcbe:	3401      	adds	r4, #1
 800bcc0:	e7f3      	b.n	800bcaa <print_rx+0x16>
  AT_PRINTF("\r\n");
 800bcc2:	4b06      	ldr	r3, [pc, #24]	; (800bcdc <print_rx+0x48>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	4611      	mov	r1, r2
 800bcc8:	4610      	mov	r0, r2
 800bcca:	f016 faa7 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800bcce:	b002      	add	sp, #8
 800bcd0:	bd70      	pop	{r4, r5, r6, pc}
 800bcd2:	bf00      	nop
 800bcd4:	080270bc 	.word	0x080270bc
 800bcd8:	080270c4 	.word	0x080270c4
 800bcdc:	080267cc 	.word	0x080267cc

0800bce0 <print_n>:
{
 800bce0:	b570      	push	{r4, r5, r6, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	4606      	mov	r6, r0
 800bce6:	460d      	mov	r5, r1
  for (int32_t i = 0; i < n; i++)
 800bce8:	2400      	movs	r4, #0
 800bcea:	42ac      	cmp	r4, r5
 800bcec:	d209      	bcs.n	800bd02 <print_n+0x22>
    AT_PRINTF("%c", pt[i]);
 800bcee:	5d33      	ldrb	r3, [r6, r4]
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	4b05      	ldr	r3, [pc, #20]	; (800bd08 <print_n+0x28>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	4611      	mov	r1, r2
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	f016 fa8f 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = 0; i < n; i++)
 800bcfe:	3401      	adds	r4, #1
 800bd00:	e7f3      	b.n	800bcea <print_n+0xa>
}
 800bd02:	b002      	add	sp, #8
 800bd04:	bd70      	pop	{r4, r5, r6, pc}
 800bd06:	bf00      	nop
 800bd08:	080270c4 	.word	0x080270c4

0800bd0c <stringToData>:
{
 800bd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd10:	b082      	sub	sp, #8
 800bd12:	4603      	mov	r3, r0
 800bd14:	460f      	mov	r7, r1
 800bd16:	4690      	mov	r8, r2
  hex[2] = 0;
 800bd18:	2400      	movs	r4, #0
 800bd1a:	f88d 4006 	strb.w	r4, [sp, #6]
  while ((*str != '\0') && (*str != ','))
 800bd1e:	7818      	ldrb	r0, [r3, #0]
 800bd20:	b300      	cbz	r0, 800bd64 <stringToData+0x58>
 800bd22:	282c      	cmp	r0, #44	; 0x2c
 800bd24:	d01e      	beq.n	800bd64 <stringToData+0x58>
    hex[0] = *str++;
 800bd26:	f88d 0004 	strb.w	r0, [sp, #4]
    hex[1] = *str++;
 800bd2a:	1c9e      	adds	r6, r3, #2
 800bd2c:	785d      	ldrb	r5, [r3, #1]
 800bd2e:	f88d 5005 	strb.w	r5, [sp, #5]
    if ((isHex(hex[0]) == ERROR) || (isHex(hex[1]) == ERROR))
 800bd32:	f7ff ff73 	bl	800bc1c <isHex>
 800bd36:	4603      	mov	r3, r0
 800bd38:	b300      	cbz	r0, 800bd7c <stringToData+0x70>
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	f7ff ff6e 	bl	800bc1c <isHex>
 800bd40:	4603      	mov	r3, r0
 800bd42:	b1d8      	cbz	r0, 800bd7c <stringToData+0x70>
    if ((hex[1] == '\0') || (hex[1] == ','))
 800bd44:	b19d      	cbz	r5, 800bd6e <stringToData+0x62>
 800bd46:	2d2c      	cmp	r5, #44	; 0x2c
 800bd48:	d013      	beq.n	800bd72 <stringToData+0x66>
    if (tiny_sscanf(hex, "%hhx", &data[ii]) != 1)
 800bd4a:	193a      	adds	r2, r7, r4
 800bd4c:	490e      	ldr	r1, [pc, #56]	; (800bd88 <stringToData+0x7c>)
 800bd4e:	a801      	add	r0, sp, #4
 800bd50:	f017 f9d0 	bl	80230f4 <tiny_sscanf>
 800bd54:	2801      	cmp	r0, #1
 800bd56:	d10e      	bne.n	800bd76 <stringToData+0x6a>
    ii++;
 800bd58:	3401      	adds	r4, #1
 800bd5a:	b2e4      	uxtb	r4, r4
    if (ii > SGFX_MAX_UL_PAYLOAD_SIZE)
 800bd5c:	2c0c      	cmp	r4, #12
 800bd5e:	d80c      	bhi.n	800bd7a <stringToData+0x6e>
    hex[1] = *str++;
 800bd60:	4633      	mov	r3, r6
 800bd62:	e7dc      	b.n	800bd1e <stringToData+0x12>
  *dataSize = ii;
 800bd64:	f8c8 4000 	str.w	r4, [r8]
  if (ii == 0)
 800bd68:	b164      	cbz	r4, 800bd84 <stringToData+0x78>
  return SUCCESS;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e006      	b.n	800bd7c <stringToData+0x70>
      return ERROR;
 800bd6e:	462b      	mov	r3, r5
 800bd70:	e004      	b.n	800bd7c <stringToData+0x70>
 800bd72:	2300      	movs	r3, #0
 800bd74:	e002      	b.n	800bd7c <stringToData+0x70>
      return ERROR;
 800bd76:	2300      	movs	r3, #0
 800bd78:	e000      	b.n	800bd7c <stringToData+0x70>
      return ERROR;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	b002      	add	sp, #8
 800bd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERROR;
 800bd84:	4623      	mov	r3, r4
 800bd86:	e7f9      	b.n	800bd7c <stringToData+0x70>
 800bd88:	080252a0 	.word	0x080252a0

0800bd8c <SIGFOX_reopen_and_reconf>:

static sfx_error_t SIGFOX_reopen_and_reconf(sfx_rc_enum_t sfx_rc,  sfx_u32 *config_words)
{
 800bd8c:	b570      	push	{r4, r5, r6, lr}
 800bd8e:	b088      	sub	sp, #32
 800bd90:	460c      	mov	r4, r1

  /* USER CODE END SIGFOX_reopen_and_reconf_1 */
  sfx_error_t error = SFX_ERR_NONE;

  /*record RCZ*/
  switch (sfx_rc)
 800bd92:	2807      	cmp	r0, #7
 800bd94:	f200 8085 	bhi.w	800bea2 <SIGFOX_reopen_and_reconf+0x116>
 800bd98:	e8df f000 	tbb	[pc, r0]
 800bd9c:	35231104 	.word	0x35231104
 800bda0:	776b5947 	.word	0x776b5947
  {
    case SFX_RC1:
    {
      sfx_rc_t SgfxRc = RC1;
 800bda4:	ac01      	add	r4, sp, #4
 800bda6:	4d40      	ldr	r5, [pc, #256]	; (800bea8 <SIGFOX_reopen_and_reconf+0x11c>)
 800bda8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bdb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800bdb4:	a801      	add	r0, sp, #4
 800bdb6:	f7f6 f9e3 	bl	8002180 <SIGFOX_API_open>
  }
  return error;
  /* USER CODE BEGIN SIGFOX_reopen_and_reconf_2 */

  /* USER CODE END SIGFOX_reopen_and_reconf_2 */
}
 800bdba:	b008      	add	sp, #32
 800bdbc:	bd70      	pop	{r4, r5, r6, pc}
      sfx_rc_t SgfxRc = RC2;
 800bdbe:	ad01      	add	r5, sp, #4
 800bdc0:	4e3a      	ldr	r6, [pc, #232]	; (800beac <SIGFOX_reopen_and_reconf+0x120>)
 800bdc2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bdc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bdc6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800bdca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800bdce:	a801      	add	r0, sp, #4
 800bdd0:	f7f6 f9d6 	bl	8002180 <SIGFOX_API_open>
      if (error == SFX_ERR_NONE)
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d1f0      	bne.n	800bdba <SIGFOX_reopen_and_reconf+0x2e>
        error = SIGFOX_API_set_std_config(config_words, RC2_SET_STD_TIMER_ENABLE);
 800bdd8:	2101      	movs	r1, #1
 800bdda:	4620      	mov	r0, r4
 800bddc:	f7f6 fbe0 	bl	80025a0 <SIGFOX_API_set_std_config>
      break;
 800bde0:	e7eb      	b.n	800bdba <SIGFOX_reopen_and_reconf+0x2e>
      sfx_rc_t SgfxRc = RC3A;
 800bde2:	ad01      	add	r5, sp, #4
 800bde4:	4e32      	ldr	r6, [pc, #200]	; (800beb0 <SIGFOX_reopen_and_reconf+0x124>)
 800bde6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bde8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bdea:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800bdee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800bdf2:	a801      	add	r0, sp, #4
 800bdf4:	f7f6 f9c4 	bl	8002180 <SIGFOX_API_open>
      if (error == SFX_ERR_NONE)
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	d1de      	bne.n	800bdba <SIGFOX_reopen_and_reconf+0x2e>
        error = SIGFOX_API_set_std_config(config_words, NA);
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	4620      	mov	r0, r4
 800be00:	f7f6 fbce 	bl	80025a0 <SIGFOX_API_set_std_config>
      break;
 800be04:	e7d9      	b.n	800bdba <SIGFOX_reopen_and_reconf+0x2e>
      sfx_rc_t SgfxRc = RC3C;
 800be06:	ad01      	add	r5, sp, #4
 800be08:	4e2a      	ldr	r6, [pc, #168]	; (800beb4 <SIGFOX_reopen_and_reconf+0x128>)
 800be0a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800be0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800be0e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800be12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800be16:	a801      	add	r0, sp, #4
 800be18:	f7f6 f9b2 	bl	8002180 <SIGFOX_API_open>
      if (error == SFX_ERR_NONE)
 800be1c:	2800      	cmp	r0, #0
 800be1e:	d1cc      	bne.n	800bdba <SIGFOX_reopen_and_reconf+0x2e>
        error = SIGFOX_API_set_std_config(config_words, NA);
 800be20:	2100      	movs	r1, #0
 800be22:	4620      	mov	r0, r4
 800be24:	f7f6 fbbc 	bl	80025a0 <SIGFOX_API_set_std_config>
      break;
 800be28:	e7c7      	b.n	800bdba <SIGFOX_reopen_and_reconf+0x2e>
      sfx_rc_t SgfxRc = RC4;
 800be2a:	ad01      	add	r5, sp, #4
 800be2c:	4e22      	ldr	r6, [pc, #136]	; (800beb8 <SIGFOX_reopen_and_reconf+0x12c>)
 800be2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800be30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800be32:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800be36:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800be3a:	a801      	add	r0, sp, #4
 800be3c:	f7f6 f9a0 	bl	8002180 <SIGFOX_API_open>
      if (error == SFX_ERR_NONE)
 800be40:	2800      	cmp	r0, #0
 800be42:	d1ba      	bne.n	800bdba <SIGFOX_reopen_and_reconf+0x2e>
        error = SIGFOX_API_set_std_config(config_words, RC4_SET_STD_TIMER_ENABLE);
 800be44:	2101      	movs	r1, #1
 800be46:	4620      	mov	r0, r4
 800be48:	f7f6 fbaa 	bl	80025a0 <SIGFOX_API_set_std_config>
      break;
 800be4c:	e7b5      	b.n	800bdba <SIGFOX_reopen_and_reconf+0x2e>
      sfx_rc_t SgfxRc = RC5;
 800be4e:	ad01      	add	r5, sp, #4
 800be50:	4e1a      	ldr	r6, [pc, #104]	; (800bebc <SIGFOX_reopen_and_reconf+0x130>)
 800be52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800be54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800be56:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800be5a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800be5e:	a801      	add	r0, sp, #4
 800be60:	f7f6 f98e 	bl	8002180 <SIGFOX_API_open>
      if (error == SFX_ERR_NONE)
 800be64:	2800      	cmp	r0, #0
 800be66:	d1a8      	bne.n	800bdba <SIGFOX_reopen_and_reconf+0x2e>
        error = SIGFOX_API_set_std_config(config_words, NA);
 800be68:	2100      	movs	r1, #0
 800be6a:	4620      	mov	r0, r4
 800be6c:	f7f6 fb98 	bl	80025a0 <SIGFOX_API_set_std_config>
      break;
 800be70:	e7a3      	b.n	800bdba <SIGFOX_reopen_and_reconf+0x2e>
      sfx_rc_t SgfxRc = RC6;
 800be72:	ac01      	add	r4, sp, #4
 800be74:	4d12      	ldr	r5, [pc, #72]	; (800bec0 <SIGFOX_reopen_and_reconf+0x134>)
 800be76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800be82:	a801      	add	r0, sp, #4
 800be84:	f7f6 f97c 	bl	8002180 <SIGFOX_API_open>
      break;
 800be88:	e797      	b.n	800bdba <SIGFOX_reopen_and_reconf+0x2e>
      sfx_rc_t SgfxRc = RC7;
 800be8a:	ac01      	add	r4, sp, #4
 800be8c:	4d0d      	ldr	r5, [pc, #52]	; (800bec4 <SIGFOX_reopen_and_reconf+0x138>)
 800be8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      error = SIGFOX_API_open(&SgfxRc);
 800be9a:	a801      	add	r0, sp, #4
 800be9c:	f7f6 f970 	bl	8002180 <SIGFOX_API_open>
      break;
 800bea0:	e78b      	b.n	800bdba <SIGFOX_reopen_and_reconf+0x2e>
{
 800bea2:	2010      	movs	r0, #16
 800bea4:	e789      	b.n	800bdba <SIGFOX_reopen_and_reconf+0x2e>
 800bea6:	bf00      	nop
 800bea8:	08024a08 	.word	0x08024a08
 800beac:	08024a24 	.word	0x08024a24
 800beb0:	08024a40 	.word	0x08024a40
 800beb4:	08024a5c 	.word	0x08024a5c
 800beb8:	08024a78 	.word	0x08024a78
 800bebc:	08024a94 	.word	0x08024a94
 800bec0:	08024ab0 	.word	0x08024ab0
 800bec4:	08024acc 	.word	0x08024acc

0800bec8 <testmode_12>:

static sfx_error_t testmode_12(sfx_rc_enum_t rc_enum)
{
 800bec8:	b570      	push	{r4, r5, r6, lr}
 800beca:	b086      	sub	sp, #24
 800becc:	4605      	mov	r5, r0
  /* USER CODE END testmode_12_1 */
  sfx_error_t sfx_err = SFX_ERR_NONE;

  sfx_u8 test_data[1];

  sfx_key_type_t key = E2P_Read_KeyType();
 800bece:	f001 fae7 	bl	800d4a0 <E2P_Read_KeyType>
 800bed2:	4606      	mov	r6, r0

  test_data[0] = 0xAB;
 800bed4:	23ab      	movs	r3, #171	; 0xab
 800bed6:	f88d 3014 	strb.w	r3, [sp, #20]

  sfx_u32 config_words[3] = {0};
 800beda:	2400      	movs	r4, #0
 800bedc:	9402      	str	r4, [sp, #8]
 800bede:	9403      	str	r4, [sp, #12]
 800bee0:	9404      	str	r4, [sp, #16]

  E2P_Read_ConfigWords(rc_enum, config_words);
 800bee2:	a902      	add	r1, sp, #8
 800bee4:	4628      	mov	r0, r5
 800bee6:	f001 fb23 	bl	800d530 <E2P_Read_ConfigWords>

  /*open for test mode 12 with right rc_enum and conf*/
  sfx_err = SIGFOX_reopen_and_reconf(rc_enum, config_words);
 800beea:	a902      	add	r1, sp, #8
 800beec:	4628      	mov	r0, r5
 800beee:	f7ff ff4d 	bl	800bd8c <SIGFOX_reopen_and_reconf>

  /* Switch public key ON */
  E2P_Write_KeyType(CREDENTIALS_KEY_PUBLIC);
 800bef2:	2001      	movs	r0, #1
 800bef4:	f001 fae1 	bl	800d4ba <E2P_Write_KeyType>

  /* Only call SIGFOX_API_send_xxx */
  sfx_err = SIGFOX_API_send_frame(test_data, 1 /* size of the test data */, (sfx_u8 *)SFX_NULL, 2, SFX_FALSE);
 800bef8:	9400      	str	r4, [sp, #0]
 800befa:	2302      	movs	r3, #2
 800befc:	4622      	mov	r2, r4
 800befe:	2101      	movs	r1, #1
 800bf00:	a805      	add	r0, sp, #20
 800bf02:	f7f6 fa67 	bl	80023d4 <SIGFOX_API_send_frame>
 800bf06:	4604      	mov	r4, r0

  /* Switch back key type */
  E2P_Write_KeyType(key);
 800bf08:	4630      	mov	r0, r6
 800bf0a:	f001 fad6 	bl	800d4ba <E2P_Write_KeyType>

  /* Close the lib before return */
  SIGFOX_API_close();
 800bf0e:	f7f6 fa44 	bl	800239a <SIGFOX_API_close>

  return sfx_err;
  /* USER CODE BEGIN testmode_12_2 */

  /* USER CODE END testmode_12_2 */
}
 800bf12:	4620      	mov	r0, r4
 800bf14:	b006      	add	sp, #24
 800bf16:	bd70      	pop	{r4, r5, r6, pc}

0800bf18 <AT_return_error>:
}
 800bf18:	2001      	movs	r0, #1
 800bf1a:	4770      	bx	lr

0800bf1c <AT_reset>:
{
 800bf1c:	b508      	push	{r3, lr}
  NVIC_SystemReset();
 800bf1e:	f7ff fe6b 	bl	800bbf8 <__NVIC_SystemReset>

0800bf22 <AT_selection_get>:
{
 800bf22:	b508      	push	{r3, lr}
  if(E2P_Read_Mode() == 0 && E2P_LORA_Read_Mode() == 1)
 800bf24:	f001 fa51 	bl	800d3ca <E2P_Read_Mode>
 800bf28:	b918      	cbnz	r0, 800bf32 <AT_selection_get+0x10>
 800bf2a:	f7fe f90d 	bl	800a148 <E2P_LORA_Read_Mode>
 800bf2e:	2801      	cmp	r0, #1
 800bf30:	d004      	beq.n	800bf3c <AT_selection_get+0x1a>
    print_u(ACTIVE_APP_SIGFOX);
 800bf32:	2000      	movs	r0, #0
 800bf34:	f7ff fea0 	bl	800bc78 <print_u>
}
 800bf38:	2000      	movs	r0, #0
 800bf3a:	bd08      	pop	{r3, pc}
    print_u(ACTIVE_APP_LORAWAN);
 800bf3c:	f7ff fe9c 	bl	800bc78 <print_u>
 800bf40:	e7fa      	b.n	800bf38 <AT_selection_get+0x16>
	...

0800bf44 <AT_selection_set>:
{
 800bf44:	b510      	push	{r4, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	4604      	mov	r4, r0
	AT_PRINTF(">> AT_selection_set 1 \r\n");
 800bf4a:	4b19      	ldr	r3, [pc, #100]	; (800bfb0 <AT_selection_set+0x6c>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	4611      	mov	r1, r2
 800bf50:	4610      	mov	r0, r2
 800bf52:	f016 f963 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
	if (1 != tiny_sscanf(buf, "%u", &selection))
 800bf56:	aa03      	add	r2, sp, #12
 800bf58:	4916      	ldr	r1, [pc, #88]	; (800bfb4 <AT_selection_set+0x70>)
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f017 f8ca 	bl	80230f4 <tiny_sscanf>
 800bf60:	2801      	cmp	r0, #1
 800bf62:	d008      	beq.n	800bf76 <AT_selection_set+0x32>
		AT_PRINTF("AT+MODE: LoRa/SigFox Selection error\r\n");
 800bf64:	4b14      	ldr	r3, [pc, #80]	; (800bfb8 <AT_selection_set+0x74>)
 800bf66:	2200      	movs	r2, #0
 800bf68:	4611      	mov	r1, r2
 800bf6a:	4610      	mov	r0, r2
 800bf6c:	f016 f956 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800bf70:	2002      	movs	r0, #2
 800bf72:	b004      	add	sp, #16
 800bf74:	bd10      	pop	{r4, pc}
	AT_PRINTF(">> selection Set %u \r\n", selection);
 800bf76:	9b03      	ldr	r3, [sp, #12]
 800bf78:	9300      	str	r3, [sp, #0]
 800bf7a:	4b10      	ldr	r3, [pc, #64]	; (800bfbc <AT_selection_set+0x78>)
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	4611      	mov	r1, r2
 800bf80:	4610      	mov	r0, r2
 800bf82:	f016 f94b 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
	if(selection == ACTIVE_APP_LORAWAN)
 800bf86:	9b03      	ldr	r3, [sp, #12]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d002      	beq.n	800bf92 <AT_selection_set+0x4e>
	else if(selection == ACTIVE_APP_SIGFOX)
 800bf8c:	b143      	cbz	r3, 800bfa0 <AT_selection_set+0x5c>
	NVIC_SystemReset();
 800bf8e:	f7ff fe33 	bl	800bbf8 <__NVIC_SystemReset>
        E2P_Write_Mode(0);
 800bf92:	2000      	movs	r0, #0
 800bf94:	f001 fa26 	bl	800d3e4 <E2P_Write_Mode>
		E2P_LORA_Write_Mode(1);
 800bf98:	2001      	movs	r0, #1
 800bf9a:	f7fd ff51 	bl	8009e40 <E2P_LORA_Write_Mode>
 800bf9e:	e7f6      	b.n	800bf8e <AT_selection_set+0x4a>
		E2P_Write_Mode(1);
 800bfa0:	2001      	movs	r0, #1
 800bfa2:	f001 fa1f 	bl	800d3e4 <E2P_Write_Mode>
		E2P_LORA_Write_Mode(0);
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	f7fd ff4a 	bl	8009e40 <E2P_LORA_Write_Mode>
 800bfac:	e7ef      	b.n	800bf8e <AT_selection_set+0x4a>
 800bfae:	bf00      	nop
 800bfb0:	080270c8 	.word	0x080270c8
 800bfb4:	0802500c 	.word	0x0802500c
 800bfb8:	08025010 	.word	0x08025010
 800bfbc:	080270e4 	.word	0x080270e4

0800bfc0 <AT_fw_set>:
{
 800bfc0:	b508      	push	{r3, lr}
  E2P_LORA_FW_Write_Mode(1);
 800bfc2:	2001      	movs	r0, #1
 800bfc4:	f7fd ff47 	bl	8009e56 <E2P_LORA_FW_Write_Mode>
  E2P_FW_Write_Mode(1);
 800bfc8:	2001      	movs	r0, #1
 800bfca:	f001 fa16 	bl	800d3fa <E2P_FW_Write_Mode>
  AT_PRINTF("FW MODE\r\n");
 800bfce:	4b04      	ldr	r3, [pc, #16]	; (800bfe0 <AT_fw_set+0x20>)
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	4611      	mov	r1, r2
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	f016 f921 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  NVIC_SystemReset();
 800bfda:	f7ff fe0d 	bl	800bbf8 <__NVIC_SystemReset>
 800bfde:	bf00      	nop
 800bfe0:	08025038 	.word	0x08025038

0800bfe4 <AT_restore_factory_settings>:
{
 800bfe4:	b508      	push	{r3, lr}
  E2P_RestoreFs();
 800bfe6:	f001 f8be 	bl	800d166 <E2P_RestoreFs>
  E2P_Write_Mode(1);
 800bfea:	2001      	movs	r0, #1
 800bfec:	f001 f9fa 	bl	800d3e4 <E2P_Write_Mode>
}
 800bff0:	2000      	movs	r0, #0
 800bff2:	bd08      	pop	{r3, pc}

0800bff4 <AT_SendBit>:
{
 800bff4:	b510      	push	{r4, lr}
 800bff6:	b088      	sub	sp, #32
 800bff8:	4604      	mov	r4, r0
  uint32_t dlFlag = 0;
 800bffa:	2300      	movs	r3, #0
 800bffc:	9306      	str	r3, [sp, #24]
  uint32_t txRepeat = 1;
 800bffe:	2301      	movs	r3, #1
 800c000:	9305      	str	r3, [sp, #20]
  uint8_t dl_msg[SGFX_MAX_DL_PAYLOAD_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800c002:	ab03      	add	r3, sp, #12
 800c004:	4a23      	ldr	r2, [pc, #140]	; (800c094 <AT_SendBit+0xa0>)
 800c006:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c00a:	e883 0003 	stmia.w	r3, {r0, r1}
  nbParam = tiny_sscanf(param, "%u,%u,%d", &Bit, &dlFlag, &txRepeat);
 800c00e:	ab05      	add	r3, sp, #20
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	ab06      	add	r3, sp, #24
 800c014:	aa07      	add	r2, sp, #28
 800c016:	4920      	ldr	r1, [pc, #128]	; (800c098 <AT_SendBit+0xa4>)
 800c018:	4620      	mov	r0, r4
 800c01a:	f017 f86b 	bl	80230f4 <tiny_sscanf>
  if (nbParam > 3)
 800c01e:	2803      	cmp	r0, #3
 800c020:	dc32      	bgt.n	800c088 <AT_SendBit+0x94>
  if (dlFlag == 0)
 800c022:	9b06      	ldr	r3, [sp, #24]
 800c024:	b9a3      	cbnz	r3, 800c050 <AT_SendBit+0x5c>
    error = SIGFOX_API_send_bit(Bit, (sfx_u8 *) dl_msg, txRepeat, SFX_FALSE);
 800c026:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800c02a:	a903      	add	r1, sp, #12
 800c02c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800c030:	f7f6 fa05 	bl	800243e <SIGFOX_API_send_bit>
    if (error != SFX_ERR_NONE)
 800c034:	b358      	cbz	r0, 800c08e <AT_SendBit+0x9a>
      if (error == SFX_ERR_INT_PROCESS_UPLINK_CS_TIMEOUT)
 800c036:	287e      	cmp	r0, #126	; 0x7e
 800c038:	d101      	bne.n	800c03e <AT_SendBit+0x4a>
        return AT_TX_TIMEOUT;
 800c03a:	2006      	movs	r0, #6
 800c03c:	e025      	b.n	800c08a <AT_SendBit+0x96>
        APP_LOG(TS_OFF, VLEVEL_H, "ERROR 0x%04X\r\n", error);
 800c03e:	9000      	str	r0, [sp, #0]
 800c040:	4b16      	ldr	r3, [pc, #88]	; (800c09c <AT_SendBit+0xa8>)
 800c042:	2200      	movs	r2, #0
 800c044:	4611      	mov	r1, r2
 800c046:	2003      	movs	r0, #3
 800c048:	f016 f8e8 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
        return AT_LIB_ERROR;
 800c04c:	2005      	movs	r0, #5
 800c04e:	e01c      	b.n	800c08a <AT_SendBit+0x96>
    error = SIGFOX_API_send_bit(Bit, (sfx_u8 *) dl_msg, txRepeat, SFX_TRUE);
 800c050:	2301      	movs	r3, #1
 800c052:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800c056:	a903      	add	r1, sp, #12
 800c058:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800c05c:	f7f6 f9ef 	bl	800243e <SIGFOX_API_send_bit>
    if (error == SFX_ERR_NONE)
 800c060:	b118      	cbz	r0, 800c06a <AT_SendBit+0x76>
    else if (error == SFX_ERR_INT_GET_RECEIVED_FRAMES_TIMEOUT)
 800c062:	289b      	cmp	r0, #155	; 0x9b
 800c064:	d107      	bne.n	800c076 <AT_SendBit+0x82>
      return AT_RX_TIMEOUT;
 800c066:	2007      	movs	r0, #7
 800c068:	e00f      	b.n	800c08a <AT_SendBit+0x96>
      print_rx(dl_msg, SGFX_MAX_DL_PAYLOAD_SIZE * 2);
 800c06a:	2110      	movs	r1, #16
 800c06c:	a803      	add	r0, sp, #12
 800c06e:	f7ff fe11 	bl	800bc94 <print_rx>
  return AT_OK;
 800c072:	2000      	movs	r0, #0
 800c074:	e009      	b.n	800c08a <AT_SendBit+0x96>
      APP_LOG(TS_OFF, VLEVEL_H, "ERROR 0x%04X\r\n", error);
 800c076:	9000      	str	r0, [sp, #0]
 800c078:	4b08      	ldr	r3, [pc, #32]	; (800c09c <AT_SendBit+0xa8>)
 800c07a:	2200      	movs	r2, #0
 800c07c:	4611      	mov	r1, r2
 800c07e:	2003      	movs	r0, #3
 800c080:	f016 f8cc 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      return AT_LIB_ERROR;
 800c084:	2005      	movs	r0, #5
 800c086:	e000      	b.n	800c08a <AT_SendBit+0x96>
    return AT_PARAM_ERROR;
 800c088:	2002      	movs	r0, #2
}
 800c08a:	b008      	add	sp, #32
 800c08c:	bd10      	pop	{r4, pc}
  return AT_OK;
 800c08e:	2000      	movs	r0, #0
 800c090:	e7fb      	b.n	800c08a <AT_SendBit+0x96>
 800c092:	bf00      	nop
 800c094:	08024ae8 	.word	0x08024ae8
 800c098:	080270fc 	.word	0x080270fc
 800c09c:	08027108 	.word	0x08027108

0800c0a0 <AT_SendFrame>:
{
 800c0a0:	b530      	push	{r4, r5, lr}
 800c0a2:	b08b      	sub	sp, #44	; 0x2c
 800c0a4:	4604      	mov	r4, r0
  uint8_t ul_msg[SGFX_MAX_UL_PAYLOAD_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800c0a6:	4d34      	ldr	r5, [pc, #208]	; (800c178 <AT_SendFrame+0xd8>)
 800c0a8:	ab07      	add	r3, sp, #28
 800c0aa:	f105 02e8 	add.w	r2, r5, #232	; 0xe8
 800c0ae:	ca07      	ldmia	r2, {r0, r1, r2}
 800c0b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t dl_msg[SGFX_MAX_DL_PAYLOAD_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800c0b4:	aa05      	add	r2, sp, #20
 800c0b6:	f8d5 10e4 	ldr.w	r1, [r5, #228]	; 0xe4
 800c0ba:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
 800c0be:	e882 0003 	stmia.w	r2, {r0, r1}
  uint32_t dlFlag = 0;   /* default */
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	9204      	str	r2, [sp, #16]
  uint32_t  ul_size = 0;
 800c0c6:	9203      	str	r2, [sp, #12]
  uint32_t txRepeat = 1;
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	9202      	str	r2, [sp, #8]
  if (stringToData(param, ul_msg, &ul_size) != SUCCESS)
 800c0cc:	aa03      	add	r2, sp, #12
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f7ff fe1b 	bl	800bd0c <stringToData>
 800c0d6:	2801      	cmp	r0, #1
 800c0d8:	d148      	bne.n	800c16c <AT_SendFrame+0xcc>
  if (param[2 * ul_size] == ',')
 800c0da:	9b03      	ldr	r3, [sp, #12]
 800c0dc:	0058      	lsls	r0, r3, #1
 800c0de:	f814 3013 	ldrb.w	r3, [r4, r3, lsl #1]
 800c0e2:	2b2c      	cmp	r3, #44	; 0x2c
 800c0e4:	d010      	beq.n	800c108 <AT_SendFrame+0x68>
  if (dlFlag == 0)
 800c0e6:	9b04      	ldr	r3, [sp, #16]
 800c0e8:	bb13      	cbnz	r3, 800c130 <AT_SendFrame+0x90>
    error = SIGFOX_API_send_frame(ul_msg, ul_size, dl_msg, txRepeat, SFX_FALSE);
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c0f0:	aa05      	add	r2, sp, #20
 800c0f2:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800c0f6:	a807      	add	r0, sp, #28
 800c0f8:	f7f6 f96c 	bl	80023d4 <SIGFOX_API_send_frame>
    if (error != SFX_ERR_NONE)
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d038      	beq.n	800c172 <AT_SendFrame+0xd2>
      if (error == SFX_ERR_INT_PROCESS_UPLINK_CS_TIMEOUT)
 800c100:	287e      	cmp	r0, #126	; 0x7e
 800c102:	d10c      	bne.n	800c11e <AT_SendFrame+0x7e>
        return AT_TX_TIMEOUT;
 800c104:	2006      	movs	r0, #6
 800c106:	e032      	b.n	800c16e <AT_SendFrame+0xce>
    nbParam = tiny_sscanf(&param[2 * ul_size + 1], "%u,%u", &dlFlag, &txRepeat);
 800c108:	3001      	adds	r0, #1
 800c10a:	ab02      	add	r3, sp, #8
 800c10c:	aa04      	add	r2, sp, #16
 800c10e:	491b      	ldr	r1, [pc, #108]	; (800c17c <AT_SendFrame+0xdc>)
 800c110:	4420      	add	r0, r4
 800c112:	f016 ffef 	bl	80230f4 <tiny_sscanf>
    if (nbParam > 2)
 800c116:	2802      	cmp	r0, #2
 800c118:	d9e5      	bls.n	800c0e6 <AT_SendFrame+0x46>
      return AT_PARAM_ERROR;
 800c11a:	2002      	movs	r0, #2
 800c11c:	e027      	b.n	800c16e <AT_SendFrame+0xce>
        APP_LOG(TS_OFF, VLEVEL_H, "ERROR 0x%04X\r\n", error);
 800c11e:	9000      	str	r0, [sp, #0]
 800c120:	4b17      	ldr	r3, [pc, #92]	; (800c180 <AT_SendFrame+0xe0>)
 800c122:	2200      	movs	r2, #0
 800c124:	4611      	mov	r1, r2
 800c126:	2003      	movs	r0, #3
 800c128:	f016 f878 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
        return AT_LIB_ERROR;
 800c12c:	2005      	movs	r0, #5
 800c12e:	e01e      	b.n	800c16e <AT_SendFrame+0xce>
    error = SIGFOX_API_send_frame(ul_msg, ul_size, dl_msg, txRepeat, SFX_TRUE);
 800c130:	2301      	movs	r3, #1
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c138:	aa05      	add	r2, sp, #20
 800c13a:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800c13e:	a807      	add	r0, sp, #28
 800c140:	f7f6 f948 	bl	80023d4 <SIGFOX_API_send_frame>
    if (error == SFX_ERR_NONE)
 800c144:	b118      	cbz	r0, 800c14e <AT_SendFrame+0xae>
    else if (error == SFX_ERR_INT_GET_RECEIVED_FRAMES_TIMEOUT)
 800c146:	289b      	cmp	r0, #155	; 0x9b
 800c148:	d107      	bne.n	800c15a <AT_SendFrame+0xba>
      return AT_RX_TIMEOUT;
 800c14a:	2007      	movs	r0, #7
 800c14c:	e00f      	b.n	800c16e <AT_SendFrame+0xce>
      print_rx(dl_msg, SGFX_MAX_DL_PAYLOAD_SIZE * 2);
 800c14e:	2110      	movs	r1, #16
 800c150:	a805      	add	r0, sp, #20
 800c152:	f7ff fd9f 	bl	800bc94 <print_rx>
  return AT_OK;
 800c156:	2000      	movs	r0, #0
 800c158:	e009      	b.n	800c16e <AT_SendFrame+0xce>
      APP_LOG(TS_OFF, VLEVEL_H, "ERROR 0x%04X\r\n", error);
 800c15a:	9000      	str	r0, [sp, #0]
 800c15c:	4b08      	ldr	r3, [pc, #32]	; (800c180 <AT_SendFrame+0xe0>)
 800c15e:	2200      	movs	r2, #0
 800c160:	4611      	mov	r1, r2
 800c162:	2003      	movs	r0, #3
 800c164:	f016 f85a 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      return AT_LIB_ERROR;
 800c168:	2005      	movs	r0, #5
 800c16a:	e000      	b.n	800c16e <AT_SendFrame+0xce>
    return AT_PARAM_ERROR;
 800c16c:	2002      	movs	r0, #2
}
 800c16e:	b00b      	add	sp, #44	; 0x2c
 800c170:	bd30      	pop	{r4, r5, pc}
  return AT_OK;
 800c172:	2000      	movs	r0, #0
 800c174:	e7fb      	b.n	800c16e <AT_SendFrame+0xce>
 800c176:	bf00      	nop
 800c178:	08024a08 	.word	0x08024a08
 800c17c:	08027118 	.word	0x08027118
 800c180:	08027108 	.word	0x08027108

0800c184 <AT_SendHexFrame>:
{
 800c184:	b530      	push	{r4, r5, lr}
 800c186:	b08b      	sub	sp, #44	; 0x2c
 800c188:	4605      	mov	r5, r0
  uint8_t ul_msg[SGFX_MAX_UL_PAYLOAD_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800c18a:	4b3a      	ldr	r3, [pc, #232]	; (800c274 <AT_SendHexFrame+0xf0>)
 800c18c:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800c190:	ca07      	ldmia	r2, {r0, r1, r2}
 800c192:	ac0a      	add	r4, sp, #40	; 0x28
 800c194:	e904 0007 	stmdb	r4, {r0, r1, r2}
  uint8_t dl_msg[SGFX_MAX_DL_PAYLOAD_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800c198:	aa05      	add	r2, sp, #20
 800c19a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800c19e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800c1a2:	e882 0003 	stmia.w	r2, {r0, r1}
  uint32_t dlFlag = 0;   /* default */
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	9304      	str	r3, [sp, #16]
  uint32_t  ul_size = 0;
 800c1aa:	9303      	str	r3, [sp, #12]
  uint32_t txRepeat = 1;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	9302      	str	r3, [sp, #8]
  tiny_sscanf(param, "%u", &ul_size);
 800c1b0:	aa03      	add	r2, sp, #12
 800c1b2:	4931      	ldr	r1, [pc, #196]	; (800c278 <AT_SendHexFrame+0xf4>)
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	f016 ff9d 	bl	80230f4 <tiny_sscanf>
  if (ul_size > SGFX_MAX_UL_PAYLOAD_SIZE)
 800c1ba:	9c03      	ldr	r4, [sp, #12]
 800c1bc:	2c0c      	cmp	r4, #12
 800c1be:	d854      	bhi.n	800c26a <AT_SendHexFrame+0xe6>
  payload = strchr(param, ',');
 800c1c0:	212c      	movs	r1, #44	; 0x2c
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	f017 ff88 	bl	80240d8 <strchr>
  payload++;
 800c1c8:	3001      	adds	r0, #1
  for (int32_t i = 0; i < ul_size; i++)
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	e005      	b.n	800c1da <AT_SendHexFrame+0x56>
    ul_msg[i] = payload[i];
 800c1ce:	5cc1      	ldrb	r1, [r0, r3]
 800c1d0:	aa0a      	add	r2, sp, #40	; 0x28
 800c1d2:	441a      	add	r2, r3
 800c1d4:	f802 1c0c 	strb.w	r1, [r2, #-12]
  for (int32_t i = 0; i < ul_size; i++)
 800c1d8:	3301      	adds	r3, #1
 800c1da:	429c      	cmp	r4, r3
 800c1dc:	d8f7      	bhi.n	800c1ce <AT_SendHexFrame+0x4a>
  if (payload[ul_size] == ',')
 800c1de:	5d03      	ldrb	r3, [r0, r4]
 800c1e0:	2b2c      	cmp	r3, #44	; 0x2c
 800c1e2:	d010      	beq.n	800c206 <AT_SendHexFrame+0x82>
  if (dlFlag == 0)
 800c1e4:	9b04      	ldr	r3, [sp, #16]
 800c1e6:	bb13      	cbnz	r3, 800c22e <AT_SendHexFrame+0xaa>
    error = SIGFOX_API_send_frame(ul_msg, ul_size, dl_msg, txRepeat, SFX_FALSE);
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c1ee:	aa05      	add	r2, sp, #20
 800c1f0:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800c1f4:	a807      	add	r0, sp, #28
 800c1f6:	f7f6 f8ed 	bl	80023d4 <SIGFOX_API_send_frame>
    if (error != SFX_ERR_NONE)
 800c1fa:	2800      	cmp	r0, #0
 800c1fc:	d038      	beq.n	800c270 <AT_SendHexFrame+0xec>
      if (error == SFX_ERR_INT_PROCESS_UPLINK_CS_TIMEOUT)
 800c1fe:	287e      	cmp	r0, #126	; 0x7e
 800c200:	d10c      	bne.n	800c21c <AT_SendHexFrame+0x98>
        return AT_TX_TIMEOUT;
 800c202:	2006      	movs	r0, #6
 800c204:	e032      	b.n	800c26c <AT_SendHexFrame+0xe8>
    nbParam = tiny_sscanf(&payload[ul_size + 1], "%u,%u", &dlFlag, &txRepeat);
 800c206:	3401      	adds	r4, #1
 800c208:	ab02      	add	r3, sp, #8
 800c20a:	aa04      	add	r2, sp, #16
 800c20c:	491b      	ldr	r1, [pc, #108]	; (800c27c <AT_SendHexFrame+0xf8>)
 800c20e:	4420      	add	r0, r4
 800c210:	f016 ff70 	bl	80230f4 <tiny_sscanf>
    if (nbParam > 2)
 800c214:	2802      	cmp	r0, #2
 800c216:	d9e5      	bls.n	800c1e4 <AT_SendHexFrame+0x60>
      return AT_PARAM_ERROR;
 800c218:	2002      	movs	r0, #2
 800c21a:	e027      	b.n	800c26c <AT_SendHexFrame+0xe8>
        APP_LOG(TS_OFF, VLEVEL_H, "ERROR 0x%04X\r\n", error);
 800c21c:	9000      	str	r0, [sp, #0]
 800c21e:	4b18      	ldr	r3, [pc, #96]	; (800c280 <AT_SendHexFrame+0xfc>)
 800c220:	2200      	movs	r2, #0
 800c222:	4611      	mov	r1, r2
 800c224:	2003      	movs	r0, #3
 800c226:	f015 fff9 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
        return AT_LIB_ERROR;
 800c22a:	2005      	movs	r0, #5
 800c22c:	e01e      	b.n	800c26c <AT_SendHexFrame+0xe8>
    error = SIGFOX_API_send_frame(ul_msg, ul_size, dl_msg, txRepeat, SFX_TRUE);
 800c22e:	2301      	movs	r3, #1
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c236:	aa05      	add	r2, sp, #20
 800c238:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800c23c:	a807      	add	r0, sp, #28
 800c23e:	f7f6 f8c9 	bl	80023d4 <SIGFOX_API_send_frame>
    if (error == SFX_ERR_NONE)
 800c242:	b118      	cbz	r0, 800c24c <AT_SendHexFrame+0xc8>
    else if (error == SFX_ERR_INT_GET_RECEIVED_FRAMES_TIMEOUT)
 800c244:	289b      	cmp	r0, #155	; 0x9b
 800c246:	d107      	bne.n	800c258 <AT_SendHexFrame+0xd4>
      return AT_RX_TIMEOUT;
 800c248:	2007      	movs	r0, #7
 800c24a:	e00f      	b.n	800c26c <AT_SendHexFrame+0xe8>
      print_rx(dl_msg, SGFX_MAX_DL_PAYLOAD_SIZE * 2);
 800c24c:	2110      	movs	r1, #16
 800c24e:	a805      	add	r0, sp, #20
 800c250:	f7ff fd20 	bl	800bc94 <print_rx>
  return AT_OK;
 800c254:	2000      	movs	r0, #0
 800c256:	e009      	b.n	800c26c <AT_SendHexFrame+0xe8>
      APP_LOG(TS_OFF, VLEVEL_H, "ERROR 0x%04X\r\n", error);
 800c258:	9000      	str	r0, [sp, #0]
 800c25a:	4b09      	ldr	r3, [pc, #36]	; (800c280 <AT_SendHexFrame+0xfc>)
 800c25c:	2200      	movs	r2, #0
 800c25e:	4611      	mov	r1, r2
 800c260:	2003      	movs	r0, #3
 800c262:	f015 ffdb 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      return AT_LIB_ERROR;
 800c266:	2005      	movs	r0, #5
 800c268:	e000      	b.n	800c26c <AT_SendHexFrame+0xe8>
    return AT_PARAM_ERROR;
 800c26a:	2002      	movs	r0, #2
}
 800c26c:	b00b      	add	sp, #44	; 0x2c
 800c26e:	bd30      	pop	{r4, r5, pc}
  return AT_OK;
 800c270:	2000      	movs	r0, #0
 800c272:	e7fb      	b.n	800c26c <AT_SendHexFrame+0xe8>
 800c274:	08024a08 	.word	0x08024a08
 800c278:	0802500c 	.word	0x0802500c
 800c27c:	08027118 	.word	0x08027118
 800c280:	08027108 	.word	0x08027108

0800c284 <AT_version_get>:
{
 800c284:	b510      	push	{r4, lr}
 800c286:	b086      	sub	sp, #24
  SIGFOX_API_get_version(&version, &size, VERSION_SIGFOX);
 800c288:	2200      	movs	r2, #0
 800c28a:	f10d 0113 	add.w	r1, sp, #19
 800c28e:	a805      	add	r0, sp, #20
 800c290:	f7f6 f93c 	bl	800250c <SIGFOX_API_get_version>
  print_n(version, size);
 800c294:	f89d 1013 	ldrb.w	r1, [sp, #19]
 800c298:	9805      	ldr	r0, [sp, #20]
 800c29a:	f7ff fd21 	bl	800bce0 <print_n>
  AT_PRINTF("\r\n");
 800c29e:	4c2c      	ldr	r4, [pc, #176]	; (800c350 <AT_version_get+0xcc>)
 800c2a0:	4623      	mov	r3, r4
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	4611      	mov	r1, r2
 800c2a6:	4610      	mov	r0, r2
 800c2a8:	f015 ffb8 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  SIGFOX_API_get_version(&version, &size, VERSION_RF);
 800c2ac:	2202      	movs	r2, #2
 800c2ae:	f10d 0113 	add.w	r1, sp, #19
 800c2b2:	a805      	add	r0, sp, #20
 800c2b4:	f7f6 f92a 	bl	800250c <SIGFOX_API_get_version>
  print_n(version, size);
 800c2b8:	f89d 1013 	ldrb.w	r1, [sp, #19]
 800c2bc:	9805      	ldr	r0, [sp, #20]
 800c2be:	f7ff fd0f 	bl	800bce0 <print_n>
  AT_PRINTF("\r\n");
 800c2c2:	4623      	mov	r3, r4
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	f015 ffa7 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  SIGFOX_API_get_version(&version, &size, VERSION_MCU);
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f10d 0113 	add.w	r1, sp, #19
 800c2d4:	a805      	add	r0, sp, #20
 800c2d6:	f7f6 f919 	bl	800250c <SIGFOX_API_get_version>
  print_n(version, size);
 800c2da:	f89d 1013 	ldrb.w	r1, [sp, #19]
 800c2de:	9805      	ldr	r0, [sp, #20]
 800c2e0:	f7ff fcfe 	bl	800bce0 <print_n>
  AT_PRINTF("\r\n");
 800c2e4:	4623      	mov	r3, r4
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	4610      	mov	r0, r2
 800c2ec:	f015 ff96 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  SIGFOX_API_get_version(&version, &size, VERSION_SE);
 800c2f0:	2203      	movs	r2, #3
 800c2f2:	f10d 0113 	add.w	r1, sp, #19
 800c2f6:	a805      	add	r0, sp, #20
 800c2f8:	f7f6 f908 	bl	800250c <SIGFOX_API_get_version>
  print_n(version, size);
 800c2fc:	f89d 1013 	ldrb.w	r1, [sp, #19]
 800c300:	9805      	ldr	r0, [sp, #20]
 800c302:	f7ff fced 	bl	800bce0 <print_n>
  AT_PRINTF("\r\n");
 800c306:	4623      	mov	r3, r4
 800c308:	2200      	movs	r2, #0
 800c30a:	4611      	mov	r1, r2
 800c30c:	4610      	mov	r0, r2
 800c30e:	f015 ff85 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  SIGFOX_API_get_version(&version, &size, VERSION_MONARCH);
 800c312:	2205      	movs	r2, #5
 800c314:	f10d 0113 	add.w	r1, sp, #19
 800c318:	a805      	add	r0, sp, #20
 800c31a:	f7f6 f8f7 	bl	800250c <SIGFOX_API_get_version>
  print_n(version, size);
 800c31e:	f89d 1013 	ldrb.w	r1, [sp, #19]
 800c322:	9805      	ldr	r0, [sp, #20]
 800c324:	f7ff fcdc 	bl	800bce0 <print_n>
  AT_PRINTF("\r\n");
 800c328:	4623      	mov	r3, r4
 800c32a:	2200      	movs	r2, #0
 800c32c:	4611      	mov	r1, r2
 800c32e:	4610      	mov	r0, r2
 800c330:	f015 ff74 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  AT_PPRINTF("APP_VERSION: V%X.%X.%X\r\n", __APP_VERSION_MAIN,
 800c334:	2301      	movs	r3, #1
 800c336:	9302      	str	r3, [sp, #8]
 800c338:	2000      	movs	r0, #0
 800c33a:	9001      	str	r0, [sp, #4]
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	4b05      	ldr	r3, [pc, #20]	; (800c354 <AT_version_get+0xd0>)
 800c340:	4602      	mov	r2, r0
 800c342:	4601      	mov	r1, r0
 800c344:	f015 ff6a 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800c348:	2800      	cmp	r0, #0
 800c34a:	d1f3      	bne.n	800c334 <AT_version_get+0xb0>
}
 800c34c:	b006      	add	sp, #24
 800c34e:	bd10      	pop	{r4, pc}
 800c350:	080267cc 	.word	0x080267cc
 800c354:	08027120 	.word	0x08027120

0800c358 <AT_DevPac_get>:
{
 800c358:	b510      	push	{r4, lr}
 800c35a:	b084      	sub	sp, #16
  error = SIGFOX_API_get_initial_pac(SfxPac);
 800c35c:	a802      	add	r0, sp, #8
 800c35e:	f7f6 fad7 	bl	8002910 <SIGFOX_API_get_initial_pac>
  if (error != SFX_ERR_NONE)
 800c362:	b9c0      	cbnz	r0, 800c396 <AT_DevPac_get+0x3e>
  for (int32_t i = 0; i < PAC_LENGTH; i++)
 800c364:	2400      	movs	r4, #0
 800c366:	e00b      	b.n	800c380 <AT_DevPac_get+0x28>
    AT_PRINTF("%02X", SfxPac[i]);
 800c368:	ab04      	add	r3, sp, #16
 800c36a:	4423      	add	r3, r4
 800c36c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	4b0a      	ldr	r3, [pc, #40]	; (800c39c <AT_DevPac_get+0x44>)
 800c374:	2200      	movs	r2, #0
 800c376:	4611      	mov	r1, r2
 800c378:	4610      	mov	r0, r2
 800c37a:	f015 ff4f 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = 0; i < PAC_LENGTH; i++)
 800c37e:	3401      	adds	r4, #1
 800c380:	2c07      	cmp	r4, #7
 800c382:	ddf1      	ble.n	800c368 <AT_DevPac_get+0x10>
  AT_PRINTF("\r\n");
 800c384:	4b06      	ldr	r3, [pc, #24]	; (800c3a0 <AT_DevPac_get+0x48>)
 800c386:	2200      	movs	r2, #0
 800c388:	4611      	mov	r1, r2
 800c38a:	4610      	mov	r0, r2
 800c38c:	f015 ff46 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 800c390:	2000      	movs	r0, #0
}
 800c392:	b004      	add	sp, #16
 800c394:	bd10      	pop	{r4, pc}
    return AT_LIB_ERROR;
 800c396:	2005      	movs	r0, #5
 800c398:	e7fb      	b.n	800c392 <AT_DevPac_get+0x3a>
 800c39a:	bf00      	nop
 800c39c:	08027144 	.word	0x08027144
 800c3a0:	080267cc 	.word	0x080267cc

0800c3a4 <AT_DevId_get>:
{
 800c3a4:	b510      	push	{r4, lr}
 800c3a6:	b084      	sub	sp, #16
  error = SIGFOX_API_get_device_id(SfxId);
 800c3a8:	a803      	add	r0, sp, #12
 800c3aa:	f7f6 faad 	bl	8002908 <SIGFOX_API_get_device_id>
  if (error != SFX_ERR_NONE)
 800c3ae:	b9c0      	cbnz	r0, 800c3e2 <AT_DevId_get+0x3e>
  for (int32_t i = ID_LENGTH; i > 0; i--)
 800c3b0:	2404      	movs	r4, #4
 800c3b2:	e00b      	b.n	800c3cc <AT_DevId_get+0x28>
    AT_PRINTF("%02X", SfxId[i - 1]);
 800c3b4:	3c01      	subs	r4, #1
 800c3b6:	ab04      	add	r3, sp, #16
 800c3b8:	4423      	add	r3, r4
 800c3ba:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	4b09      	ldr	r3, [pc, #36]	; (800c3e8 <AT_DevId_get+0x44>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	f015 ff28 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = ID_LENGTH; i > 0; i--)
 800c3cc:	2c00      	cmp	r4, #0
 800c3ce:	dcf1      	bgt.n	800c3b4 <AT_DevId_get+0x10>
  AT_PRINTF("\r\n");
 800c3d0:	4b06      	ldr	r3, [pc, #24]	; (800c3ec <AT_DevId_get+0x48>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	4611      	mov	r1, r2
 800c3d6:	4610      	mov	r0, r2
 800c3d8:	f015 ff20 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 800c3dc:	2000      	movs	r0, #0
}
 800c3de:	b004      	add	sp, #16
 800c3e0:	bd10      	pop	{r4, pc}
    return AT_LIB_ERROR;
 800c3e2:	2005      	movs	r0, #5
 800c3e4:	e7fb      	b.n	800c3de <AT_DevId_get+0x3a>
 800c3e6:	bf00      	nop
 800c3e8:	08027144 	.word	0x08027144
 800c3ec:	080267cc 	.word	0x080267cc

0800c3f0 <AT_PublicKey_set>:
{
 800c3f0:	b510      	push	{r4, lr}
  if ((param[0] == '0') && (param[1] == '\0'))
 800c3f2:	7803      	ldrb	r3, [r0, #0]
 800c3f4:	2b30      	cmp	r3, #48	; 0x30
 800c3f6:	d008      	beq.n	800c40a <AT_PublicKey_set+0x1a>
  else if ((param[0] == '1') && (param[1] == '\0'))
 800c3f8:	2b31      	cmp	r3, #49	; 0x31
 800c3fa:	d10d      	bne.n	800c418 <AT_PublicKey_set+0x28>
 800c3fc:	7844      	ldrb	r4, [r0, #1]
 800c3fe:	b96c      	cbnz	r4, 800c41c <AT_PublicKey_set+0x2c>
    E2P_Write_KeyType(CREDENTIALS_KEY_PUBLIC);
 800c400:	2001      	movs	r0, #1
 800c402:	f001 f85a 	bl	800d4ba <E2P_Write_KeyType>
}
 800c406:	4620      	mov	r0, r4
 800c408:	bd10      	pop	{r4, pc}
  if ((param[0] == '0') && (param[1] == '\0'))
 800c40a:	7844      	ldrb	r4, [r0, #1]
 800c40c:	2c00      	cmp	r4, #0
 800c40e:	d1f3      	bne.n	800c3f8 <AT_PublicKey_set+0x8>
    E2P_Write_KeyType(CREDENTIALS_KEY_PRIVATE);
 800c410:	2000      	movs	r0, #0
 800c412:	f001 f852 	bl	800d4ba <E2P_Write_KeyType>
 800c416:	e7f6      	b.n	800c406 <AT_PublicKey_set+0x16>
    return AT_PARAM_ERROR;
 800c418:	2402      	movs	r4, #2
 800c41a:	e7f4      	b.n	800c406 <AT_PublicKey_set+0x16>
 800c41c:	2402      	movs	r4, #2
 800c41e:	e7f2      	b.n	800c406 <AT_PublicKey_set+0x16>

0800c420 <AT_PublicKey_get>:
{
 800c420:	b500      	push	{lr}
 800c422:	b083      	sub	sp, #12
  AT_PRINTF("%d\r\n", (uint8_t) E2P_Read_KeyType());
 800c424:	f001 f83c 	bl	800d4a0 <E2P_Read_KeyType>
 800c428:	9000      	str	r0, [sp, #0]
 800c42a:	4b05      	ldr	r3, [pc, #20]	; (800c440 <AT_PublicKey_get+0x20>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	4611      	mov	r1, r2
 800c430:	4610      	mov	r0, r2
 800c432:	f015 fef3 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800c436:	2000      	movs	r0, #0
 800c438:	b003      	add	sp, #12
 800c43a:	f85d fb04 	ldr.w	pc, [sp], #4
 800c43e:	bf00      	nop
 800c440:	0802511c 	.word	0x0802511c

0800c444 <AT_PayloadEncryption_set>:
{
 800c444:	b510      	push	{r4, lr}
  if ((param[0] == '0') && (param[1] == '\0'))
 800c446:	7803      	ldrb	r3, [r0, #0]
 800c448:	2b30      	cmp	r3, #48	; 0x30
 800c44a:	d008      	beq.n	800c45e <AT_PayloadEncryption_set+0x1a>
  else if ((param[0] == '1') && (param[1] == '\0'))
 800c44c:	2b31      	cmp	r3, #49	; 0x31
 800c44e:	d10d      	bne.n	800c46c <AT_PayloadEncryption_set+0x28>
 800c450:	7844      	ldrb	r4, [r0, #1]
 800c452:	b96c      	cbnz	r4, 800c470 <AT_PayloadEncryption_set+0x2c>
    E2P_Write_EncryptionFlag(1);
 800c454:	2001      	movs	r0, #1
 800c456:	f001 f848 	bl	800d4ea <E2P_Write_EncryptionFlag>
}
 800c45a:	4620      	mov	r0, r4
 800c45c:	bd10      	pop	{r4, pc}
  if ((param[0] == '0') && (param[1] == '\0'))
 800c45e:	7844      	ldrb	r4, [r0, #1]
 800c460:	2c00      	cmp	r4, #0
 800c462:	d1f3      	bne.n	800c44c <AT_PayloadEncryption_set+0x8>
    E2P_Write_EncryptionFlag(0);
 800c464:	2000      	movs	r0, #0
 800c466:	f001 f840 	bl	800d4ea <E2P_Write_EncryptionFlag>
 800c46a:	e7f6      	b.n	800c45a <AT_PayloadEncryption_set+0x16>
    return AT_PARAM_ERROR;
 800c46c:	2402      	movs	r4, #2
 800c46e:	e7f4      	b.n	800c45a <AT_PayloadEncryption_set+0x16>
 800c470:	2402      	movs	r4, #2
 800c472:	e7f2      	b.n	800c45a <AT_PayloadEncryption_set+0x16>

0800c474 <AT_PayloadEncryption_get>:
{
 800c474:	b500      	push	{lr}
 800c476:	b083      	sub	sp, #12
  AT_PRINTF("%d\r\n", (uint8_t) E2P_Read_EncryptionFlag());
 800c478:	f001 f82a 	bl	800d4d0 <E2P_Read_EncryptionFlag>
 800c47c:	9000      	str	r0, [sp, #0]
 800c47e:	4b05      	ldr	r3, [pc, #20]	; (800c494 <AT_PayloadEncryption_get+0x20>)
 800c480:	2200      	movs	r2, #0
 800c482:	4611      	mov	r1, r2
 800c484:	4610      	mov	r0, r2
 800c486:	f015 fec9 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800c48a:	2000      	movs	r0, #0
 800c48c:	b003      	add	sp, #12
 800c48e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c492:	bf00      	nop
 800c494:	0802511c 	.word	0x0802511c

0800c498 <AT_bat_get>:
{
 800c498:	b508      	push	{r3, lr}
  print_u(SYS_GetBatteryLevel());
 800c49a:	f7fa fa8b 	bl	80069b4 <SYS_GetBatteryLevel>
 800c49e:	f7ff fbeb 	bl	800bc78 <print_u>
}
 800c4a2:	2000      	movs	r0, #0
 800c4a4:	bd08      	pop	{r3, pc}
	...

0800c4a8 <AT_test_cw>:
{
 800c4a8:	b510      	push	{r4, lr}
 800c4aa:	b084      	sub	sp, #16
  uint32_t freq = 0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	9303      	str	r3, [sp, #12]
  if (tiny_sscanf(param, "%u", &freq) > 1)
 800c4b0:	aa03      	add	r2, sp, #12
 800c4b2:	4920      	ldr	r1, [pc, #128]	; (800c534 <AT_test_cw+0x8c>)
 800c4b4:	f016 fe1e 	bl	80230f4 <tiny_sscanf>
 800c4b8:	2801      	cmp	r0, #1
 800c4ba:	dc35      	bgt.n	800c528 <AT_test_cw+0x80>
  if (freq == 0)
 800c4bc:	9b03      	ldr	r3, [sp, #12]
 800c4be:	b1ab      	cbz	r3, 800c4ec <AT_test_cw+0x44>
  else if ((freq > ((uint32_t) 100e6)) && (freq < ((uint32_t) 1e9)))
 800c4c0:	4a1d      	ldr	r2, [pc, #116]	; (800c538 <AT_test_cw+0x90>)
 800c4c2:	441a      	add	r2, r3
 800c4c4:	491d      	ldr	r1, [pc, #116]	; (800c53c <AT_test_cw+0x94>)
 800c4c6:	428a      	cmp	r2, r1
 800c4c8:	d325      	bcc.n	800c516 <AT_test_cw+0x6e>
  else if ((freq >  100) && (freq <  1000))
 800c4ca:	3b65      	subs	r3, #101	; 0x65
 800c4cc:	f240 3282 	movw	r2, #898	; 0x382
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d82c      	bhi.n	800c52e <AT_test_cw+0x86>
    SIGFOX_API_close();
 800c4d4:	f7f5 ff61 	bl	800239a <SIGFOX_API_close>
    if (SIGFOX_API_start_continuous_transmission(freq * 1000000, SFX_NO_MODULATION) != SFX_ERR_NONE)
 800c4d8:	2100      	movs	r1, #0
 800c4da:	9b03      	ldr	r3, [sp, #12]
 800c4dc:	4818      	ldr	r0, [pc, #96]	; (800c540 <AT_test_cw+0x98>)
 800c4de:	fb00 f003 	mul.w	r0, r0, r3
 800c4e2:	f7f6 f8b3 	bl	800264c <SIGFOX_API_start_continuous_transmission>
 800c4e6:	b300      	cbz	r0, 800c52a <AT_test_cw+0x82>
      return AT_PARAM_ERROR;
 800c4e8:	2002      	movs	r0, #2
 800c4ea:	e01e      	b.n	800c52a <AT_test_cw+0x82>
    sfx_rc_enum_t sfx_rc = E2P_Read_Rc();
 800c4ec:	f000 ff90 	bl	800d410 <E2P_Read_Rc>
 800c4f0:	4604      	mov	r4, r0
    sfx_u32 config_words[3] = {0};
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	9300      	str	r3, [sp, #0]
 800c4f6:	9301      	str	r3, [sp, #4]
 800c4f8:	9302      	str	r3, [sp, #8]
    E2P_Read_ConfigWords(sfx_rc, config_words);
 800c4fa:	4669      	mov	r1, sp
 800c4fc:	f001 f818 	bl	800d530 <E2P_Read_ConfigWords>
    SIGFOX_API_stop_continuous_transmission();
 800c500:	f7f6 f8de 	bl	80026c0 <SIGFOX_API_stop_continuous_transmission>
    if (SIGFOX_reopen_and_reconf(sfx_rc, config_words) != SFX_ERR_NONE)
 800c504:	4669      	mov	r1, sp
 800c506:	4620      	mov	r0, r4
 800c508:	f7ff fc40 	bl	800bd8c <SIGFOX_reopen_and_reconf>
 800c50c:	b908      	cbnz	r0, 800c512 <AT_test_cw+0x6a>
  return AT_OK;
 800c50e:	2000      	movs	r0, #0
 800c510:	e00b      	b.n	800c52a <AT_test_cw+0x82>
      return AT_RECONF_ERROR;
 800c512:	2009      	movs	r0, #9
 800c514:	e009      	b.n	800c52a <AT_test_cw+0x82>
    SIGFOX_API_close();
 800c516:	f7f5 ff40 	bl	800239a <SIGFOX_API_close>
    if (SIGFOX_API_start_continuous_transmission(freq, SFX_NO_MODULATION) != SFX_ERR_NONE)
 800c51a:	2100      	movs	r1, #0
 800c51c:	9803      	ldr	r0, [sp, #12]
 800c51e:	f7f6 f895 	bl	800264c <SIGFOX_API_start_continuous_transmission>
 800c522:	b110      	cbz	r0, 800c52a <AT_test_cw+0x82>
      return AT_PARAM_ERROR;
 800c524:	2002      	movs	r0, #2
 800c526:	e000      	b.n	800c52a <AT_test_cw+0x82>
    return AT_PARAM_ERROR;
 800c528:	2002      	movs	r0, #2
}
 800c52a:	b004      	add	sp, #16
 800c52c:	bd10      	pop	{r4, pc}
    return AT_PARAM_ERROR;
 800c52e:	2002      	movs	r0, #2
 800c530:	e7fb      	b.n	800c52a <AT_test_cw+0x82>
 800c532:	bf00      	nop
 800c534:	0802500c 	.word	0x0802500c
 800c538:	fa0a1eff 	.word	0xfa0a1eff
 800c53c:	35a4e8ff 	.word	0x35a4e8ff
 800c540:	000f4240 	.word	0x000f4240

0800c544 <AT_test_pn>:
{
 800c544:	b510      	push	{r4, lr}
 800c546:	b086      	sub	sp, #24
  uint32_t freq = 0;
 800c548:	2300      	movs	r3, #0
 800c54a:	9305      	str	r3, [sp, #20]
  uint32_t bitrate = 0;
 800c54c:	9304      	str	r3, [sp, #16]
  if (tiny_sscanf(param, "%u,%u", &freq, &bitrate) > 2)
 800c54e:	ab04      	add	r3, sp, #16
 800c550:	aa05      	add	r2, sp, #20
 800c552:	492a      	ldr	r1, [pc, #168]	; (800c5fc <AT_test_pn+0xb8>)
 800c554:	f016 fdce 	bl	80230f4 <tiny_sscanf>
 800c558:	2802      	cmp	r0, #2
 800c55a:	dc45      	bgt.n	800c5e8 <AT_test_pn+0xa4>
  if (bitrate == 100)
 800c55c:	9b04      	ldr	r3, [sp, #16]
 800c55e:	2b64      	cmp	r3, #100	; 0x64
 800c560:	d009      	beq.n	800c576 <AT_test_pn+0x32>
  else if (bitrate == 600)
 800c562:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800c566:	d01f      	beq.n	800c5a8 <AT_test_pn+0x64>
  else if (bitrate == 0)
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d140      	bne.n	800c5ee <AT_test_pn+0xaa>
    if (freq != 0)
 800c56c:	9b05      	ldr	r3, [sp, #20]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d13f      	bne.n	800c5f2 <AT_test_pn+0xae>
  sfx_modulation_type_t sfx_bitrate = SFX_DBPSK_100BPS;
 800c572:	2401      	movs	r4, #1
 800c574:	e000      	b.n	800c578 <AT_test_pn+0x34>
    sfx_bitrate = SFX_DBPSK_100BPS;
 800c576:	2401      	movs	r4, #1
  if (freq == 0)
 800c578:	9b05      	ldr	r3, [sp, #20]
 800c57a:	b1bb      	cbz	r3, 800c5ac <AT_test_pn+0x68>
  else if ((freq > ((uint32_t) 100e6)) && (freq < ((uint32_t) 1e9)))
 800c57c:	4a20      	ldr	r2, [pc, #128]	; (800c600 <AT_test_pn+0xbc>)
 800c57e:	441a      	add	r2, r3
 800c580:	4920      	ldr	r1, [pc, #128]	; (800c604 <AT_test_pn+0xc0>)
 800c582:	428a      	cmp	r2, r1
 800c584:	d327      	bcc.n	800c5d6 <AT_test_pn+0x92>
  else if ((freq >  100) && (freq <  1000))
 800c586:	3b65      	subs	r3, #101	; 0x65
 800c588:	f240 3282 	movw	r2, #898	; 0x382
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d832      	bhi.n	800c5f6 <AT_test_pn+0xb2>
    SIGFOX_API_close();
 800c590:	f7f5 ff03 	bl	800239a <SIGFOX_API_close>
    if (SIGFOX_API_start_continuous_transmission(freq * 1000000, sfx_bitrate) != SFX_ERR_NONE)
 800c594:	4621      	mov	r1, r4
 800c596:	9b05      	ldr	r3, [sp, #20]
 800c598:	481b      	ldr	r0, [pc, #108]	; (800c608 <AT_test_pn+0xc4>)
 800c59a:	fb00 f003 	mul.w	r0, r0, r3
 800c59e:	f7f6 f855 	bl	800264c <SIGFOX_API_start_continuous_transmission>
 800c5a2:	b310      	cbz	r0, 800c5ea <AT_test_pn+0xa6>
      return AT_PARAM_ERROR;
 800c5a4:	2002      	movs	r0, #2
 800c5a6:	e020      	b.n	800c5ea <AT_test_pn+0xa6>
    sfx_bitrate = SFX_DBPSK_600BPS;
 800c5a8:	2402      	movs	r4, #2
 800c5aa:	e7e5      	b.n	800c578 <AT_test_pn+0x34>
    sfx_rc_enum_t sfx_rc = E2P_Read_Rc();
 800c5ac:	f000 ff30 	bl	800d410 <E2P_Read_Rc>
 800c5b0:	4604      	mov	r4, r0
    sfx_u32 config_words[3] = {0};
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	9301      	str	r3, [sp, #4]
 800c5b6:	9302      	str	r3, [sp, #8]
 800c5b8:	9303      	str	r3, [sp, #12]
    E2P_Read_ConfigWords(sfx_rc, config_words);
 800c5ba:	a901      	add	r1, sp, #4
 800c5bc:	f000 ffb8 	bl	800d530 <E2P_Read_ConfigWords>
    SIGFOX_API_stop_continuous_transmission();
 800c5c0:	f7f6 f87e 	bl	80026c0 <SIGFOX_API_stop_continuous_transmission>
    if (SIGFOX_reopen_and_reconf(sfx_rc, config_words) != SFX_ERR_NONE)
 800c5c4:	a901      	add	r1, sp, #4
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	f7ff fbe0 	bl	800bd8c <SIGFOX_reopen_and_reconf>
 800c5cc:	b908      	cbnz	r0, 800c5d2 <AT_test_pn+0x8e>
  return AT_OK;
 800c5ce:	2000      	movs	r0, #0
 800c5d0:	e00b      	b.n	800c5ea <AT_test_pn+0xa6>
      return AT_RECONF_ERROR;
 800c5d2:	2009      	movs	r0, #9
 800c5d4:	e009      	b.n	800c5ea <AT_test_pn+0xa6>
    SIGFOX_API_close();
 800c5d6:	f7f5 fee0 	bl	800239a <SIGFOX_API_close>
    if (SIGFOX_API_start_continuous_transmission(freq, sfx_bitrate) != SFX_ERR_NONE)
 800c5da:	4621      	mov	r1, r4
 800c5dc:	9805      	ldr	r0, [sp, #20]
 800c5de:	f7f6 f835 	bl	800264c <SIGFOX_API_start_continuous_transmission>
 800c5e2:	b110      	cbz	r0, 800c5ea <AT_test_pn+0xa6>
      return AT_PARAM_ERROR;
 800c5e4:	2002      	movs	r0, #2
 800c5e6:	e000      	b.n	800c5ea <AT_test_pn+0xa6>
    return AT_PARAM_ERROR;
 800c5e8:	2002      	movs	r0, #2
}
 800c5ea:	b006      	add	sp, #24
 800c5ec:	bd10      	pop	{r4, pc}
    return AT_PARAM_ERROR;
 800c5ee:	2002      	movs	r0, #2
 800c5f0:	e7fb      	b.n	800c5ea <AT_test_pn+0xa6>
      return AT_PARAM_ERROR;
 800c5f2:	2002      	movs	r0, #2
 800c5f4:	e7f9      	b.n	800c5ea <AT_test_pn+0xa6>
    return AT_PARAM_ERROR;
 800c5f6:	2002      	movs	r0, #2
 800c5f8:	e7f7      	b.n	800c5ea <AT_test_pn+0xa6>
 800c5fa:	bf00      	nop
 800c5fc:	08027118 	.word	0x08027118
 800c600:	fa0a1eff 	.word	0xfa0a1eff
 800c604:	35a4e8ff 	.word	0x35a4e8ff
 800c608:	000f4240 	.word	0x000f4240

0800c60c <AT_scan_mn>:
}
 800c60c:	2001      	movs	r0, #1
 800c60e:	4770      	bx	lr

0800c610 <AT_test_mode>:
{
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	b086      	sub	sp, #24
 800c614:	4604      	mov	r4, r0
  sfx_u32 config_words_restore[3] = {0};
 800c616:	2300      	movs	r3, #0
 800c618:	9302      	str	r3, [sp, #8]
 800c61a:	9303      	str	r3, [sp, #12]
 800c61c:	9304      	str	r3, [sp, #16]
  sfx_rc_enum_t rc_enum_restore = E2P_Read_Rc();
 800c61e:	f000 fef7 	bl	800d410 <E2P_Read_Rc>
 800c622:	4605      	mov	r5, r0
  if ((param[0] == '1') && (param[1] == ','))
 800c624:	7823      	ldrb	r3, [r4, #0]
 800c626:	2b31      	cmp	r3, #49	; 0x31
 800c628:	d030      	beq.n	800c68c <AT_test_mode+0x7c>
  else if ((param[0] == '2') && (param[1] == ','))
 800c62a:	2b32      	cmp	r3, #50	; 0x32
 800c62c:	d034      	beq.n	800c698 <AT_test_mode+0x88>
  else if ((param[0] == '3') && (param[2] == ','))
 800c62e:	2b33      	cmp	r3, #51	; 0x33
 800c630:	d038      	beq.n	800c6a4 <AT_test_mode+0x94>
  else if ((param[0] == '4') && (param[1] == ','))
 800c632:	2b34      	cmp	r3, #52	; 0x34
 800c634:	d048      	beq.n	800c6c8 <AT_test_mode+0xb8>
  else if ((param[0] == '5') && (param[1] == ','))
 800c636:	2b35      	cmp	r3, #53	; 0x35
 800c638:	d04c      	beq.n	800c6d4 <AT_test_mode+0xc4>
  else if ((param[0] == '6') && (param[1] == ','))
 800c63a:	2b36      	cmp	r3, #54	; 0x36
 800c63c:	d050      	beq.n	800c6e0 <AT_test_mode+0xd0>
  else if ((param[0] == '7') && (param[1] == ','))
 800c63e:	2b37      	cmp	r3, #55	; 0x37
 800c640:	d175      	bne.n	800c72e <AT_test_mode+0x11e>
 800c642:	7863      	ldrb	r3, [r4, #1]
 800c644:	2b2c      	cmp	r3, #44	; 0x2c
 800c646:	d174      	bne.n	800c732 <AT_test_mode+0x122>
    param += 2;
 800c648:	1ca0      	adds	r0, r4, #2
    rc = SFX_RC7;
 800c64a:	2607      	movs	r6, #7
  tiny_sscanf(param, "%u", &test_mode);
 800c64c:	f10d 0217 	add.w	r2, sp, #23
 800c650:	493b      	ldr	r1, [pc, #236]	; (800c740 <AT_test_mode+0x130>)
 800c652:	f016 fd4f 	bl	80230f4 <tiny_sscanf>
  if (test_mode < 14)
 800c656:	f89d 4017 	ldrb.w	r4, [sp, #23]
 800c65a:	2c0d      	cmp	r4, #13
 800c65c:	d86b      	bhi.n	800c736 <AT_test_mode+0x126>
  SIGFOX_API_close();
 800c65e:	f7f5 fe9c 	bl	800239a <SIGFOX_API_close>
  E2P_Write_Rc(rc);
 800c662:	4630      	mov	r0, r6
 800c664:	f000 fee1 	bl	800d42a <E2P_Write_Rc>
  if ((test_mode >= 7) && (test_mode <= 10))
 800c668:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800c66c:	1fd3      	subs	r3, r2, #7
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	2b03      	cmp	r3, #3
 800c672:	d948      	bls.n	800c706 <AT_test_mode+0xf6>
  else if (test_mode == 12)
 800c674:	2a0c      	cmp	r2, #12
 800c676:	d039      	beq.n	800c6ec <AT_test_mode+0xdc>
    sfx_error = ADDON_SIGFOX_RF_PROTOCOL_API_test_mode(rc, tm);
 800c678:	4621      	mov	r1, r4
 800c67a:	4630      	mov	r0, r6
 800c67c:	f7f7 ff5e 	bl	800453c <ADDON_SIGFOX_RF_PROTOCOL_API_test_mode>
  if (sfx_error != SFX_ERR_NONE)
 800c680:	2800      	cmp	r0, #0
 800c682:	d050      	beq.n	800c726 <AT_test_mode+0x116>
    if (sfx_error == SFX_ERR_INT_GET_RECEIVED_FRAMES_TIMEOUT)
 800c684:	289b      	cmp	r0, #155	; 0x9b
 800c686:	d135      	bne.n	800c6f4 <AT_test_mode+0xe4>
      at_status = AT_RX_TIMEOUT;
 800c688:	2407      	movs	r4, #7
 800c68a:	e03d      	b.n	800c708 <AT_test_mode+0xf8>
  if ((param[0] == '1') && (param[1] == ','))
 800c68c:	7862      	ldrb	r2, [r4, #1]
 800c68e:	2a2c      	cmp	r2, #44	; 0x2c
 800c690:	d1cb      	bne.n	800c62a <AT_test_mode+0x1a>
    param += 2;
 800c692:	1ca0      	adds	r0, r4, #2
    rc = SFX_RC1;
 800c694:	2600      	movs	r6, #0
    param += 2;
 800c696:	e7d9      	b.n	800c64c <AT_test_mode+0x3c>
  else if ((param[0] == '2') && (param[1] == ','))
 800c698:	7862      	ldrb	r2, [r4, #1]
 800c69a:	2a2c      	cmp	r2, #44	; 0x2c
 800c69c:	d1c7      	bne.n	800c62e <AT_test_mode+0x1e>
    param += 2;
 800c69e:	1ca0      	adds	r0, r4, #2
    rc = SFX_RC2;
 800c6a0:	2601      	movs	r6, #1
    param += 2;
 800c6a2:	e7d3      	b.n	800c64c <AT_test_mode+0x3c>
  else if ((param[0] == '3') && (param[2] == ','))
 800c6a4:	78a2      	ldrb	r2, [r4, #2]
 800c6a6:	2a2c      	cmp	r2, #44	; 0x2c
 800c6a8:	d1c3      	bne.n	800c632 <AT_test_mode+0x22>
    if ((param[1] == 'A') || (param[1] == 'a'))
 800c6aa:	7863      	ldrb	r3, [r4, #1]
 800c6ac:	2b41      	cmp	r3, #65	; 0x41
 800c6ae:	d008      	beq.n	800c6c2 <AT_test_mode+0xb2>
 800c6b0:	2b61      	cmp	r3, #97	; 0x61
 800c6b2:	d006      	beq.n	800c6c2 <AT_test_mode+0xb2>
    else if ((param[1] == 'C') || (param[1] == 'c'))
 800c6b4:	2b43      	cmp	r3, #67	; 0x43
 800c6b6:	d001      	beq.n	800c6bc <AT_test_mode+0xac>
 800c6b8:	2b63      	cmp	r3, #99	; 0x63
 800c6ba:	d136      	bne.n	800c72a <AT_test_mode+0x11a>
      param += 3;
 800c6bc:	1ce0      	adds	r0, r4, #3
      rc = SFX_RC3C;
 800c6be:	2603      	movs	r6, #3
      param += 3;
 800c6c0:	e7c4      	b.n	800c64c <AT_test_mode+0x3c>
      param += 3;
 800c6c2:	1ce0      	adds	r0, r4, #3
      rc = SFX_RC3A;
 800c6c4:	2602      	movs	r6, #2
      param += 3;
 800c6c6:	e7c1      	b.n	800c64c <AT_test_mode+0x3c>
  else if ((param[0] == '4') && (param[1] == ','))
 800c6c8:	7862      	ldrb	r2, [r4, #1]
 800c6ca:	2a2c      	cmp	r2, #44	; 0x2c
 800c6cc:	d1b3      	bne.n	800c636 <AT_test_mode+0x26>
    param += 2;
 800c6ce:	1ca0      	adds	r0, r4, #2
    rc = SFX_RC4;
 800c6d0:	2604      	movs	r6, #4
    param += 2;
 800c6d2:	e7bb      	b.n	800c64c <AT_test_mode+0x3c>
  else if ((param[0] == '5') && (param[1] == ','))
 800c6d4:	7862      	ldrb	r2, [r4, #1]
 800c6d6:	2a2c      	cmp	r2, #44	; 0x2c
 800c6d8:	d1af      	bne.n	800c63a <AT_test_mode+0x2a>
    param += 2;
 800c6da:	1ca0      	adds	r0, r4, #2
    rc = SFX_RC5;
 800c6dc:	2605      	movs	r6, #5
    param += 2;
 800c6de:	e7b5      	b.n	800c64c <AT_test_mode+0x3c>
  else if ((param[0] == '6') && (param[1] == ','))
 800c6e0:	7862      	ldrb	r2, [r4, #1]
 800c6e2:	2a2c      	cmp	r2, #44	; 0x2c
 800c6e4:	d1ab      	bne.n	800c63e <AT_test_mode+0x2e>
    param += 2;
 800c6e6:	1ca0      	adds	r0, r4, #2
    rc = SFX_RC6;
 800c6e8:	2606      	movs	r6, #6
    param += 2;
 800c6ea:	e7af      	b.n	800c64c <AT_test_mode+0x3c>
    sfx_error = testmode_12(rc);
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	f7ff fbeb 	bl	800bec8 <testmode_12>
 800c6f2:	e7c5      	b.n	800c680 <AT_test_mode+0x70>
      APP_LOG(TS_OFF, VLEVEL_L, "ERROR 0x%02X", sfx_error);
 800c6f4:	9000      	str	r0, [sp, #0]
 800c6f6:	4b13      	ldr	r3, [pc, #76]	; (800c744 <AT_test_mode+0x134>)
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	4611      	mov	r1, r2
 800c6fc:	2001      	movs	r0, #1
 800c6fe:	f015 fd8d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      at_status = AT_ERROR;
 800c702:	2401      	movs	r4, #1
 800c704:	e000      	b.n	800c708 <AT_test_mode+0xf8>
    at_status = AT_ERROR;
 800c706:	2401      	movs	r4, #1
  E2P_Write_Rc(rc_enum_restore);
 800c708:	4628      	mov	r0, r5
 800c70a:	f000 fe8e 	bl	800d42a <E2P_Write_Rc>
  E2P_Read_ConfigWords(rc_enum_restore, config_words_restore);
 800c70e:	a902      	add	r1, sp, #8
 800c710:	4628      	mov	r0, r5
 800c712:	f000 ff0d 	bl	800d530 <E2P_Read_ConfigWords>
  if (SIGFOX_reopen_and_reconf(rc_enum_restore, config_words_restore) != SFX_ERR_NONE)
 800c716:	a902      	add	r1, sp, #8
 800c718:	4628      	mov	r0, r5
 800c71a:	f7ff fb37 	bl	800bd8c <SIGFOX_reopen_and_reconf>
 800c71e:	b960      	cbnz	r0, 800c73a <AT_test_mode+0x12a>
}
 800c720:	4620      	mov	r0, r4
 800c722:	b006      	add	sp, #24
 800c724:	bd70      	pop	{r4, r5, r6, pc}
 800c726:	2400      	movs	r4, #0
 800c728:	e7ee      	b.n	800c708 <AT_test_mode+0xf8>
      return AT_PARAM_ERROR;
 800c72a:	2402      	movs	r4, #2
 800c72c:	e7f8      	b.n	800c720 <AT_test_mode+0x110>
    return AT_PARAM_ERROR;
 800c72e:	2402      	movs	r4, #2
 800c730:	e7f6      	b.n	800c720 <AT_test_mode+0x110>
 800c732:	2402      	movs	r4, #2
 800c734:	e7f4      	b.n	800c720 <AT_test_mode+0x110>
    return AT_PARAM_ERROR;
 800c736:	2402      	movs	r4, #2
 800c738:	e7f2      	b.n	800c720 <AT_test_mode+0x110>
    at_status = AT_RECONF_ERROR;
 800c73a:	2409      	movs	r4, #9
 800c73c:	e7f0      	b.n	800c720 <AT_test_mode+0x110>
 800c73e:	bf00      	nop
 800c740:	0802500c 	.word	0x0802500c
 800c744:	0802713c 	.word	0x0802713c

0800c748 <AT_power_set>:
{
 800c748:	b500      	push	{lr}
 800c74a:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%hhd", &power) != 1)
 800c74c:	f10d 0207 	add.w	r2, sp, #7
 800c750:	4908      	ldr	r1, [pc, #32]	; (800c774 <AT_power_set+0x2c>)
 800c752:	f016 fccf 	bl	80230f4 <tiny_sscanf>
 800c756:	2801      	cmp	r0, #1
 800c758:	d003      	beq.n	800c762 <AT_power_set+0x1a>
    return AT_PARAM_ERROR;
 800c75a:	2002      	movs	r0, #2
}
 800c75c:	b003      	add	sp, #12
 800c75e:	f85d fb04 	ldr.w	pc, [sp], #4
  E2P_Write_Power(E2P_Read_Rc(), power);
 800c762:	f000 fe55 	bl	800d410 <E2P_Read_Rc>
 800c766:	f99d 1007 	ldrsb.w	r1, [sp, #7]
 800c76a:	f000 fdf7 	bl	800d35c <E2P_Write_Power>
  return AT_OK;
 800c76e:	2000      	movs	r0, #0
 800c770:	e7f4      	b.n	800c75c <AT_power_set+0x14>
 800c772:	bf00      	nop
 800c774:	0802714c 	.word	0x0802714c

0800c778 <AT_power_get>:
{
 800c778:	b500      	push	{lr}
 800c77a:	b083      	sub	sp, #12
  AT_PRINTF("%d\r\n", E2P_Read_Power(E2P_Read_Rc()));
 800c77c:	f000 fe48 	bl	800d410 <E2P_Read_Rc>
 800c780:	f000 fdb4 	bl	800d2ec <E2P_Read_Power>
 800c784:	9000      	str	r0, [sp, #0]
 800c786:	4b05      	ldr	r3, [pc, #20]	; (800c79c <AT_power_get+0x24>)
 800c788:	2200      	movs	r2, #0
 800c78a:	4611      	mov	r1, r2
 800c78c:	4610      	mov	r0, r2
 800c78e:	f015 fd45 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800c792:	2000      	movs	r0, #0
 800c794:	b003      	add	sp, #12
 800c796:	f85d fb04 	ldr.w	pc, [sp], #4
 800c79a:	bf00      	nop
 800c79c:	0802511c 	.word	0x0802511c

0800c7a0 <AT_outOfBand_run>:
{
 800c7a0:	b508      	push	{r3, lr}
  SIGFOX_API_send_outofband(SFX_OOB_SERVICE);
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	f7f5 fe80 	bl	80024a8 <SIGFOX_API_send_outofband>
}
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	bd08      	pop	{r3, pc}

0800c7ac <AT_ChannelConfigFcc_set>:
{
 800c7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ae:	b08d      	sub	sp, #52	; 0x34
 800c7b0:	4604      	mov	r4, r0
  sfx_u32 config_words[3] = {0};
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b6:	930a      	str	r3, [sp, #40]	; 0x28
 800c7b8:	930b      	str	r3, [sp, #44]	; 0x2c
  sfx_rc_enum_t sfx_rc = E2P_Read_Rc();
 800c7ba:	f000 fe29 	bl	800d410 <E2P_Read_Rc>
 800c7be:	4607      	mov	r7, r0
  if ((sfx_rc != SFX_RC2) && (sfx_rc != SFX_RC4))
 800c7c0:	2801      	cmp	r0, #1
 800c7c2:	d024      	beq.n	800c80e <AT_ChannelConfigFcc_set+0x62>
 800c7c4:	2804      	cmp	r0, #4
 800c7c6:	d16b      	bne.n	800c8a0 <AT_ChannelConfigFcc_set+0xf4>
 800c7c8:	265c      	movs	r6, #92	; 0x5c
 800c7ca:	2500      	movs	r5, #0
 800c7cc:	e012      	b.n	800c7f4 <AT_ChannelConfigFcc_set+0x48>
      config_words[i / 8] |= (nibble << (j % 32));
 800c7ce:	10db      	asrs	r3, r3, #3
 800c7d0:	4271      	negs	r1, r6
 800c7d2:	f006 021f 	and.w	r2, r6, #31
 800c7d6:	f001 011f 	and.w	r1, r1, #31
 800c7da:	bf58      	it	pl
 800c7dc:	424a      	negpl	r2, r1
 800c7de:	4090      	lsls	r0, r2
 800c7e0:	aa0c      	add	r2, sp, #48	; 0x30
 800c7e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7e6:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 800c7ea:	4310      	orrs	r0, r2
 800c7ec:	f843 0c0c 	str.w	r0, [r3, #-12]
  for (i = 0, j = (2 * 32 + 28); i < 24; i++, j -= 4)
 800c7f0:	3501      	adds	r5, #1
 800c7f2:	3e04      	subs	r6, #4
 800c7f4:	2d17      	cmp	r5, #23
 800c7f6:	dc0d      	bgt.n	800c814 <AT_ChannelConfigFcc_set+0x68>
    nibble = Char2Nibble(*param++);
 800c7f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c7fc:	f7ff fa24 	bl	800bc48 <Char2Nibble>
    if (nibble < 16)
 800c800:	280f      	cmp	r0, #15
 800c802:	d84f      	bhi.n	800c8a4 <AT_ChannelConfigFcc_set+0xf8>
      config_words[i / 8] |= (nibble << (j % 32));
 800c804:	462b      	mov	r3, r5
 800c806:	2d00      	cmp	r5, #0
 800c808:	dae1      	bge.n	800c7ce <AT_ChannelConfigFcc_set+0x22>
 800c80a:	1deb      	adds	r3, r5, #7
 800c80c:	e7df      	b.n	800c7ce <AT_ChannelConfigFcc_set+0x22>
 800c80e:	265c      	movs	r6, #92	; 0x5c
 800c810:	2500      	movs	r5, #0
 800c812:	e7ef      	b.n	800c7f4 <AT_ChannelConfigFcc_set+0x48>
  if (tiny_sscanf(param, ",%hu", &timer_state) != 1)
 800c814:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800c818:	4924      	ldr	r1, [pc, #144]	; (800c8ac <AT_ChannelConfigFcc_set+0x100>)
 800c81a:	4620      	mov	r0, r4
 800c81c:	f016 fc6a 	bl	80230f4 <tiny_sscanf>
 800c820:	2801      	cmp	r0, #1
 800c822:	d001      	beq.n	800c828 <AT_ChannelConfigFcc_set+0x7c>
    return AT_PARAM_ERROR;
 800c824:	2702      	movs	r7, #2
 800c826:	e03e      	b.n	800c8a6 <AT_ChannelConfigFcc_set+0xfa>
  E2P_Write_ConfigWords(sfx_rc, config_words);
 800c828:	a909      	add	r1, sp, #36	; 0x24
 800c82a:	4638      	mov	r0, r7
 800c82c:	f000 fecb 	bl	800d5c6 <E2P_Write_ConfigWords>
  if (sfx_rc == SFX_RC2)
 800c830:	2f01      	cmp	r7, #1
 800c832:	d003      	beq.n	800c83c <AT_ChannelConfigFcc_set+0x90>
  if (sfx_rc == SFX_RC4)
 800c834:	2f04      	cmp	r7, #4
 800c836:	d018      	beq.n	800c86a <AT_ChannelConfigFcc_set+0xbe>
  return AT_OK;
 800c838:	2700      	movs	r7, #0
 800c83a:	e034      	b.n	800c8a6 <AT_ChannelConfigFcc_set+0xfa>
    sfx_rc_t rc = RC2;
 800c83c:	ac01      	add	r4, sp, #4
 800c83e:	4d1c      	ldr	r5, [pc, #112]	; (800c8b0 <AT_ChannelConfigFcc_set+0x104>)
 800c840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c844:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c848:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if ((SIGFOX_API_close()) != SFX_ERR_NONE)
 800c84c:	f7f5 fda5 	bl	800239a <SIGFOX_API_close>
 800c850:	bb48      	cbnz	r0, 800c8a6 <AT_ChannelConfigFcc_set+0xfa>
    if ((SIGFOX_API_open(&rc)) != SFX_ERR_NONE)
 800c852:	a801      	add	r0, sp, #4
 800c854:	f7f5 fc94 	bl	8002180 <SIGFOX_API_open>
 800c858:	bb28      	cbnz	r0, 800c8a6 <AT_ChannelConfigFcc_set+0xfa>
    if (SIGFOX_API_set_std_config(config_words, (sfx_bool) timer_state) != SFX_ERR_NONE)
 800c85a:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 800c85e:	a809      	add	r0, sp, #36	; 0x24
 800c860:	f7f5 fe9e 	bl	80025a0 <SIGFOX_API_set_std_config>
 800c864:	2800      	cmp	r0, #0
 800c866:	d0e5      	beq.n	800c834 <AT_ChannelConfigFcc_set+0x88>
 800c868:	e01d      	b.n	800c8a6 <AT_ChannelConfigFcc_set+0xfa>
    sfx_rc_t rc = RC4;
 800c86a:	ac01      	add	r4, sp, #4
 800c86c:	4d11      	ldr	r5, [pc, #68]	; (800c8b4 <AT_ChannelConfigFcc_set+0x108>)
 800c86e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c872:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c876:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if ((SIGFOX_API_close()) != SFX_ERR_NONE)
 800c87a:	f7f5 fd8e 	bl	800239a <SIGFOX_API_close>
 800c87e:	b108      	cbz	r0, 800c884 <AT_ChannelConfigFcc_set+0xd8>
      return AT_ERROR;
 800c880:	2701      	movs	r7, #1
 800c882:	e010      	b.n	800c8a6 <AT_ChannelConfigFcc_set+0xfa>
    if ((SIGFOX_API_open(&rc)) != SFX_ERR_NONE)
 800c884:	a801      	add	r0, sp, #4
 800c886:	f7f5 fc7b 	bl	8002180 <SIGFOX_API_open>
 800c88a:	2800      	cmp	r0, #0
 800c88c:	d1f8      	bne.n	800c880 <AT_ChannelConfigFcc_set+0xd4>
    if (SIGFOX_API_set_std_config(config_words, (sfx_bool) timer_state) != SFX_ERR_NONE)
 800c88e:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 800c892:	a809      	add	r0, sp, #36	; 0x24
 800c894:	f7f5 fe84 	bl	80025a0 <SIGFOX_API_set_std_config>
 800c898:	2800      	cmp	r0, #0
 800c89a:	d1f1      	bne.n	800c880 <AT_ChannelConfigFcc_set+0xd4>
  return AT_OK;
 800c89c:	2700      	movs	r7, #0
 800c89e:	e002      	b.n	800c8a6 <AT_ChannelConfigFcc_set+0xfa>
    return AT_PARAM_ERROR;
 800c8a0:	2702      	movs	r7, #2
 800c8a2:	e000      	b.n	800c8a6 <AT_ChannelConfigFcc_set+0xfa>
      return AT_PARAM_ERROR;
 800c8a4:	2702      	movs	r7, #2
}
 800c8a6:	4638      	mov	r0, r7
 800c8a8:	b00d      	add	sp, #52	; 0x34
 800c8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8ac:	08027154 	.word	0x08027154
 800c8b0:	08024a24 	.word	0x08024a24
 800c8b4:	08024a78 	.word	0x08024a78

0800c8b8 <AT_rc_get>:
{
 800c8b8:	b508      	push	{r3, lr}
  sfx_rc_enum_t sfx_rc = E2P_Read_Rc();
 800c8ba:	f000 fda9 	bl	800d410 <E2P_Read_Rc>
  switch (sfx_rc)
 800c8be:	2807      	cmp	r0, #7
 800c8c0:	d80b      	bhi.n	800c8da <AT_rc_get+0x22>
 800c8c2:	e8df f000 	tbb	[pc, r0]
 800c8c6:	0c04      	.short	0x0c04
 800c8c8:	28211a13 	.word	0x28211a13
 800c8cc:	362f      	.short	0x362f
      AT_PRINTF("1\r\n");
 800c8ce:	4b1c      	ldr	r3, [pc, #112]	; (800c940 <AT_rc_get+0x88>)
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	4611      	mov	r1, r2
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	f015 fca1 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800c8da:	2000      	movs	r0, #0
 800c8dc:	bd08      	pop	{r3, pc}
      AT_PRINTF("2\r\n");
 800c8de:	4b19      	ldr	r3, [pc, #100]	; (800c944 <AT_rc_get+0x8c>)
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	4611      	mov	r1, r2
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	f015 fc99 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      break;
 800c8ea:	e7f6      	b.n	800c8da <AT_rc_get+0x22>
      AT_PRINTF("3A\r\n");
 800c8ec:	4b16      	ldr	r3, [pc, #88]	; (800c948 <AT_rc_get+0x90>)
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	4611      	mov	r1, r2
 800c8f2:	4610      	mov	r0, r2
 800c8f4:	f015 fc92 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      break;
 800c8f8:	e7ef      	b.n	800c8da <AT_rc_get+0x22>
      AT_PRINTF("3C\r\n");
 800c8fa:	4b14      	ldr	r3, [pc, #80]	; (800c94c <AT_rc_get+0x94>)
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	4611      	mov	r1, r2
 800c900:	4610      	mov	r0, r2
 800c902:	f015 fc8b 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      break;
 800c906:	e7e8      	b.n	800c8da <AT_rc_get+0x22>
      AT_PRINTF("4\r\n");
 800c908:	4b11      	ldr	r3, [pc, #68]	; (800c950 <AT_rc_get+0x98>)
 800c90a:	2200      	movs	r2, #0
 800c90c:	4611      	mov	r1, r2
 800c90e:	4610      	mov	r0, r2
 800c910:	f015 fc84 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      break;
 800c914:	e7e1      	b.n	800c8da <AT_rc_get+0x22>
      AT_PRINTF("5\r\n");
 800c916:	4b0f      	ldr	r3, [pc, #60]	; (800c954 <AT_rc_get+0x9c>)
 800c918:	2200      	movs	r2, #0
 800c91a:	4611      	mov	r1, r2
 800c91c:	4610      	mov	r0, r2
 800c91e:	f015 fc7d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      break;
 800c922:	e7da      	b.n	800c8da <AT_rc_get+0x22>
      AT_PRINTF("6\r\n");
 800c924:	4b0c      	ldr	r3, [pc, #48]	; (800c958 <AT_rc_get+0xa0>)
 800c926:	2200      	movs	r2, #0
 800c928:	4611      	mov	r1, r2
 800c92a:	4610      	mov	r0, r2
 800c92c:	f015 fc76 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      break;
 800c930:	e7d3      	b.n	800c8da <AT_rc_get+0x22>
      AT_PRINTF("7\r\n");
 800c932:	4b0a      	ldr	r3, [pc, #40]	; (800c95c <AT_rc_get+0xa4>)
 800c934:	2200      	movs	r2, #0
 800c936:	4611      	mov	r1, r2
 800c938:	4610      	mov	r0, r2
 800c93a:	f015 fc6f 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      break;
 800c93e:	e7cc      	b.n	800c8da <AT_rc_get+0x22>
 800c940:	0802715c 	.word	0x0802715c
 800c944:	08027160 	.word	0x08027160
 800c948:	08027164 	.word	0x08027164
 800c94c:	0802716c 	.word	0x0802716c
 800c950:	08027174 	.word	0x08027174
 800c954:	08027178 	.word	0x08027178
 800c958:	0802717c 	.word	0x0802717c
 800c95c:	08027180 	.word	0x08027180

0800c960 <AT_rc_set>:
{
 800c960:	b570      	push	{r4, r5, r6, lr}
 800c962:	b088      	sub	sp, #32
  if (param[0] == '1' && param[1] == '\0')
 800c964:	7803      	ldrb	r3, [r0, #0]
 800c966:	2b31      	cmp	r3, #49	; 0x31
 800c968:	d116      	bne.n	800c998 <AT_rc_set+0x38>
 800c96a:	7846      	ldrb	r6, [r0, #1]
 800c96c:	b9c6      	cbnz	r6, 800c9a0 <AT_rc_set+0x40>
    sfx_rc_t SgfxRc = RC1;
 800c96e:	ac01      	add	r4, sp, #4
 800c970:	4d0c      	ldr	r5, [pc, #48]	; (800c9a4 <AT_rc_set+0x44>)
 800c972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c976:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c97a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    E2P_Write_Rc(SgfxRcId);
 800c97e:	2000      	movs	r0, #0
 800c980:	f000 fd53 	bl	800d42a <E2P_Write_Rc>
    if ((SIGFOX_API_close()) != SFX_ERR_NONE)
 800c984:	f7f5 fd09 	bl	800239a <SIGFOX_API_close>
 800c988:	b108      	cbz	r0, 800c98e <AT_rc_set+0x2e>
      return AT_ERROR;
 800c98a:	2601      	movs	r6, #1
 800c98c:	e005      	b.n	800c99a <AT_rc_set+0x3a>
    if ((SIGFOX_API_open(&SgfxRc)) != SFX_ERR_NONE)
 800c98e:	a801      	add	r0, sp, #4
 800c990:	f7f5 fbf6 	bl	8002180 <SIGFOX_API_open>
 800c994:	b108      	cbz	r0, 800c99a <AT_rc_set+0x3a>
 800c996:	e7f8      	b.n	800c98a <AT_rc_set+0x2a>
    return AT_PARAM_ERROR;
 800c998:	2602      	movs	r6, #2
}
 800c99a:	4630      	mov	r0, r6
 800c99c:	b008      	add	sp, #32
 800c99e:	bd70      	pop	{r4, r5, r6, pc}
    return AT_PARAM_ERROR;
 800c9a0:	2602      	movs	r6, #2
 800c9a2:	e7fa      	b.n	800c99a <AT_rc_set+0x3a>
 800c9a4:	08024a08 	.word	0x08024a08

0800c9a8 <AT_rssi_cal_set>:
{
 800c9a8:	b500      	push	{lr}
 800c9aa:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%hd", &rssi_cal) != 1)
 800c9ac:	f10d 0206 	add.w	r2, sp, #6
 800c9b0:	4907      	ldr	r1, [pc, #28]	; (800c9d0 <AT_rssi_cal_set+0x28>)
 800c9b2:	f016 fb9f 	bl	80230f4 <tiny_sscanf>
 800c9b6:	2801      	cmp	r0, #1
 800c9b8:	d003      	beq.n	800c9c2 <AT_rssi_cal_set+0x1a>
    return AT_PARAM_ERROR;
 800c9ba:	2002      	movs	r0, #2
}
 800c9bc:	b003      	add	sp, #12
 800c9be:	f85d fb04 	ldr.w	pc, [sp], #4
  E2P_Write_RssiCal(rssi_cal);
 800c9c2:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 800c9c6:	f000 fd48 	bl	800d45a <E2P_Write_RssiCal>
  return AT_OK;
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	e7f6      	b.n	800c9bc <AT_rssi_cal_set+0x14>
 800c9ce:	bf00      	nop
 800c9d0:	08027184 	.word	0x08027184

0800c9d4 <AT_rssi_cal_get>:
{
 800c9d4:	b500      	push	{lr}
 800c9d6:	b083      	sub	sp, #12
  int16_t rssi_cal =  E2P_Read_RssiCal();
 800c9d8:	f000 fd32 	bl	800d440 <E2P_Read_RssiCal>
  AT_PRINTF("%d dB\r\n", rssi_cal);
 800c9dc:	9000      	str	r0, [sp, #0]
 800c9de:	4b05      	ldr	r3, [pc, #20]	; (800c9f4 <AT_rssi_cal_get+0x20>)
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	4611      	mov	r1, r2
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	f015 fc19 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	b003      	add	sp, #12
 800c9ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800c9f2:	bf00      	nop
 800c9f4:	08027188 	.word	0x08027188

0800c9f8 <AT_echo_set>:
{
 800c9f8:	b500      	push	{lr}
 800c9fa:	b083      	sub	sp, #12
  if (tiny_sscanf(param, "%u", &echoState) != 1)
 800c9fc:	aa01      	add	r2, sp, #4
 800c9fe:	490b      	ldr	r1, [pc, #44]	; (800ca2c <AT_echo_set+0x34>)
 800ca00:	f016 fb78 	bl	80230f4 <tiny_sscanf>
 800ca04:	2801      	cmp	r0, #1
 800ca06:	d10d      	bne.n	800ca24 <AT_echo_set+0x2c>
  if (echoState == 0)
 800ca08:	9801      	ldr	r0, [sp, #4]
 800ca0a:	b118      	cbz	r0, 800ca14 <AT_echo_set+0x1c>
  else if (echoState == 1)
 800ca0c:	2801      	cmp	r0, #1
 800ca0e:	d005      	beq.n	800ca1c <AT_echo_set+0x24>
    return AT_PARAM_ERROR;
 800ca10:	2002      	movs	r0, #2
 800ca12:	e008      	b.n	800ca26 <AT_echo_set+0x2e>
    E2P_Write_AtEcho(echoState);
 800ca14:	f000 fd39 	bl	800d48a <E2P_Write_AtEcho>
  return AT_OK;
 800ca18:	2000      	movs	r0, #0
 800ca1a:	e004      	b.n	800ca26 <AT_echo_set+0x2e>
    E2P_Write_AtEcho(echoState);
 800ca1c:	f000 fd35 	bl	800d48a <E2P_Write_AtEcho>
  return AT_OK;
 800ca20:	2000      	movs	r0, #0
 800ca22:	e000      	b.n	800ca26 <AT_echo_set+0x2e>
    return AT_PARAM_ERROR;
 800ca24:	2002      	movs	r0, #2
}
 800ca26:	b003      	add	sp, #12
 800ca28:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca2c:	0802500c 	.word	0x0802500c

0800ca30 <AT_echo_get>:
{
 800ca30:	b500      	push	{lr}
 800ca32:	b083      	sub	sp, #12
  uint32_t echoState = E2P_Read_AtEcho();
 800ca34:	f000 fd1c 	bl	800d470 <E2P_Read_AtEcho>
  AT_PRINTF("%d\r\n", echoState);
 800ca38:	9000      	str	r0, [sp, #0]
 800ca3a:	4b05      	ldr	r3, [pc, #20]	; (800ca50 <AT_echo_get+0x20>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	4611      	mov	r1, r2
 800ca40:	4610      	mov	r0, r2
 800ca42:	f015 fbeb 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800ca46:	2000      	movs	r0, #0
 800ca48:	b003      	add	sp, #12
 800ca4a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca4e:	bf00      	nop
 800ca50:	0802511c 	.word	0x0802511c

0800ca54 <AT_verbose_set>:
{
 800ca54:	b500      	push	{lr}
 800ca56:	b083      	sub	sp, #12
  if (1 != tiny_sscanf(buf, "%u", &lvl_nb))
 800ca58:	aa01      	add	r2, sp, #4
 800ca5a:	4911      	ldr	r1, [pc, #68]	; (800caa0 <AT_verbose_set+0x4c>)
 800ca5c:	f016 fb4a 	bl	80230f4 <tiny_sscanf>
 800ca60:	2801      	cmp	r0, #1
 800ca62:	d10d      	bne.n	800ca80 <AT_verbose_set+0x2c>
  if ((lvl_nb > VLEVEL_H) || (lvl_nb < VLEVEL_OFF))
 800ca64:	9801      	ldr	r0, [sp, #4]
 800ca66:	2803      	cmp	r0, #3
 800ca68:	d812      	bhi.n	800ca90 <AT_verbose_set+0x3c>
  UTIL_ADV_TRACE_SetVerboseLevel(lvl_nb);
 800ca6a:	b2c0      	uxtb	r0, r0
 800ca6c:	f015 fb7c 	bl	8022168 <UTIL_ADV_TRACE_SetVerboseLevel>
  E2P_Write_VerboseLevel(lvl_nb);
 800ca70:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800ca74:	f000 fd51 	bl	800d51a <E2P_Write_VerboseLevel>
  return AT_OK;
 800ca78:	2000      	movs	r0, #0
}
 800ca7a:	b003      	add	sp, #12
 800ca7c:	f85d fb04 	ldr.w	pc, [sp], #4
    AT_PRINTF("AT+VL: verbose level is not well set");
 800ca80:	4b08      	ldr	r3, [pc, #32]	; (800caa4 <AT_verbose_set+0x50>)
 800ca82:	2200      	movs	r2, #0
 800ca84:	4611      	mov	r1, r2
 800ca86:	4610      	mov	r0, r2
 800ca88:	f015 fbc8 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800ca8c:	2002      	movs	r0, #2
 800ca8e:	e7f4      	b.n	800ca7a <AT_verbose_set+0x26>
    AT_PRINTF("AT+VL: verbose level out of range => 0(VLEVEL_OFF) to 3(VLEVEL_H)");
 800ca90:	4b05      	ldr	r3, [pc, #20]	; (800caa8 <AT_verbose_set+0x54>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	4611      	mov	r1, r2
 800ca96:	4610      	mov	r0, r2
 800ca98:	f015 fbc0 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800ca9c:	2002      	movs	r0, #2
 800ca9e:	e7ec      	b.n	800ca7a <AT_verbose_set+0x26>
 800caa0:	0802500c 	.word	0x0802500c
 800caa4:	08027190 	.word	0x08027190
 800caa8:	080271b8 	.word	0x080271b8

0800caac <AT_verbose_get>:
{
 800caac:	b508      	push	{r3, lr}
  print_u(UTIL_ADV_TRACE_GetVerboseLevel());
 800caae:	f015 fb61 	bl	8022174 <UTIL_ADV_TRACE_GetVerboseLevel>
 800cab2:	f7ff f8e1 	bl	800bc78 <print_u>
}
 800cab6:	2000      	movs	r0, #0
 800cab8:	bd08      	pop	{r3, pc}
	...

0800cabc <AT_test_rl>:
{
 800cabc:	b570      	push	{r4, r5, r6, lr}
 800cabe:	b090      	sub	sp, #64	; 0x40
 800cac0:	4606      	mov	r6, r0
	uint32_t freq = 0;
 800cac2:	2400      	movs	r4, #0
 800cac4:	9406      	str	r4, [sp, #24]
	uint32_t timeout = 0;
 800cac6:	9405      	str	r4, [sp, #20]
	sfx_u32 config_words_restore[3] = {0};
 800cac8:	9402      	str	r4, [sp, #8]
 800caca:	9403      	str	r4, [sp, #12]
 800cacc:	9404      	str	r4, [sp, #16]
	sfx_rc_enum_t rc_enum_restore = E2P_Read_Rc();
 800cace:	f000 fc9f 	bl	800d410 <E2P_Read_Rc>
 800cad2:	4605      	mov	r5, r0
	g_iRxTestInterrupt = 0;
 800cad4:	4b2f      	ldr	r3, [pc, #188]	; (800cb94 <AT_test_rl+0xd8>)
 800cad6:	601c      	str	r4, [r3, #0]
	if(tiny_sscanf(param, "%u,%u", &freq, &timeout) > 2)
 800cad8:	ab05      	add	r3, sp, #20
 800cada:	aa06      	add	r2, sp, #24
 800cadc:	492e      	ldr	r1, [pc, #184]	; (800cb98 <AT_test_rl+0xdc>)
 800cade:	4630      	mov	r0, r6
 800cae0:	f016 fb08 	bl	80230f4 <tiny_sscanf>
 800cae4:	2802      	cmp	r0, #2
 800cae6:	dc53      	bgt.n	800cb90 <AT_test_rl+0xd4>
	AT_PRINTF("\r\nRX_TEST_START\r\n");
 800cae8:	4b2c      	ldr	r3, [pc, #176]	; (800cb9c <AT_test_rl+0xe0>)
 800caea:	4622      	mov	r2, r4
 800caec:	4621      	mov	r1, r4
 800caee:	4620      	mov	r0, r4
 800caf0:	f015 fb94 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
	RF_API_init(SFX_RF_MODE_RX);
 800caf4:	2001      	movs	r0, #1
 800caf6:	f001 f9bd 	bl	800de74 <RF_API_init>
    if(freq > 0)
 800cafa:	9806      	ldr	r0, [sp, #24]
 800cafc:	b908      	cbnz	r0, 800cb02 <AT_test_rl+0x46>
{
 800cafe:	2400      	movs	r4, #0
 800cb00:	e01a      	b.n	800cb38 <AT_test_rl+0x7c>
	  result = RF_API_change_frequency(freq);
 800cb02:	f001 fb1d 	bl	800e140 <RF_API_change_frequency>
 800cb06:	e7fa      	b.n	800cafe <AT_test_rl+0x42>
			MCU_API_timer_start(timeout);
 800cb08:	f000 ff42 	bl	800d990 <MCU_API_timer_start>
		result = RF_API_wait_frame(frame,&rssi,&state);
 800cb0c:	f10d 021d 	add.w	r2, sp, #29
 800cb10:	f10d 011e 	add.w	r1, sp, #30
 800cb14:	a808      	add	r0, sp, #32
 800cb16:	f001 fb29 	bl	800e16c <RF_API_wait_frame>
		if(DL_PASSED == state)
 800cb1a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d117      	bne.n	800cb52 <AT_test_rl+0x96>
			receivedCnt++;
 800cb22:	3401      	adds	r4, #1
			AT_PRINTF("{#%d RSSI=%d TEST PASSED!}\r\n",receivedCnt,rssi);
 800cb24:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	9400      	str	r4, [sp, #0]
 800cb2c:	4b1c      	ldr	r3, [pc, #112]	; (800cba0 <AT_test_rl+0xe4>)
 800cb2e:	2200      	movs	r2, #0
 800cb30:	4611      	mov	r1, r2
 800cb32:	4610      	mov	r0, r2
 800cb34:	f015 fb72 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
	while(g_iRxTestInterrupt==0)
 800cb38:	4b16      	ldr	r3, [pc, #88]	; (800cb94 <AT_test_rl+0xd8>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	b98b      	cbnz	r3, 800cb62 <AT_test_rl+0xa6>
		memset(frame,0,sizeof(frame));
 800cb3e:	2220      	movs	r2, #32
 800cb40:	2100      	movs	r1, #0
 800cb42:	eb0d 0002 	add.w	r0, sp, r2
 800cb46:	f017 f9e7 	bl	8023f18 <memset>
		if(timeout > 0)
 800cb4a:	9805      	ldr	r0, [sp, #20]
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d0dd      	beq.n	800cb0c <AT_test_rl+0x50>
 800cb50:	e7da      	b.n	800cb08 <AT_test_rl+0x4c>
			AT_PRINTF("RF_API_wait_frame : result[%x] state[%d] - TIMEOUT!!\r\n\r\n", result, state);
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	9000      	str	r0, [sp, #0]
 800cb56:	4b13      	ldr	r3, [pc, #76]	; (800cba4 <AT_test_rl+0xe8>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	4611      	mov	r1, r2
 800cb5c:	4610      	mov	r0, r2
 800cb5e:	f015 fb5d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
	RF_API_stop();
 800cb62:	f001 fa2f 	bl	800dfc4 <RF_API_stop>
	E2P_Read_ConfigWords(rc_enum_restore, config_words_restore);
 800cb66:	a902      	add	r1, sp, #8
 800cb68:	4628      	mov	r0, r5
 800cb6a:	f000 fce1 	bl	800d530 <E2P_Read_ConfigWords>
	SIGFOX_reopen_and_reconf(rc_enum_restore, config_words_restore);
 800cb6e:	a902      	add	r1, sp, #8
 800cb70:	4628      	mov	r0, r5
 800cb72:	f7ff f90b 	bl	800bd8c <SIGFOX_reopen_and_reconf>
	AT_PRINTF("\r\nRX_TEST_STOP\r\n");
 800cb76:	4b0c      	ldr	r3, [pc, #48]	; (800cba8 <AT_test_rl+0xec>)
 800cb78:	2200      	movs	r2, #0
 800cb7a:	4611      	mov	r1, r2
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	f015 fb4d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
	g_iRxTestInterrupt = -1;
 800cb82:	4b04      	ldr	r3, [pc, #16]	; (800cb94 <AT_test_rl+0xd8>)
 800cb84:	f04f 32ff 	mov.w	r2, #4294967295
 800cb88:	601a      	str	r2, [r3, #0]
	return AT_OK;
 800cb8a:	2000      	movs	r0, #0
}
 800cb8c:	b010      	add	sp, #64	; 0x40
 800cb8e:	bd70      	pop	{r4, r5, r6, pc}
		return AT_PARAM_ERROR;
 800cb90:	2002      	movs	r0, #2
 800cb92:	e7fb      	b.n	800cb8c <AT_test_rl+0xd0>
 800cb94:	20000160 	.word	0x20000160
 800cb98:	08027118 	.word	0x08027118
 800cb9c:	080271fc 	.word	0x080271fc
 800cba0:	08027210 	.word	0x08027210
 800cba4:	08027230 	.word	0x08027230
 800cba8:	0802726c 	.word	0x0802726c

0800cbac <AT_test_sl>:
{
 800cbac:	b510      	push	{r4, lr}
 800cbae:	b088      	sub	sp, #32
 800cbb0:	4604      	mov	r4, r0
  uint8_t data_buffer[12] = {0x84, 0x32, 0x68, 0xC5, 0xBA, 0x53, 0xAE, 0x79, 0xE7, 0xF6, 0xDD, 0x9B};
 800cbb2:	4b19      	ldr	r3, [pc, #100]	; (800cc18 <AT_test_sl+0x6c>)
 800cbb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cbb8:	ab08      	add	r3, sp, #32
 800cbba:	e903 0007 	stmdb	r3, {r0, r1, r2}
  uint32_t freq = 0;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	9304      	str	r3, [sp, #16]
  uint32_t count = 0;
 800cbc2:	9303      	str	r3, [sp, #12]
  uint32_t dataRate = 0;
 800cbc4:	9302      	str	r3, [sp, #8]
  if(tiny_sscanf(param, "%u,%u,%u", &freq, &dataRate, &count) > 3)
 800cbc6:	ab03      	add	r3, sp, #12
 800cbc8:	9300      	str	r3, [sp, #0]
 800cbca:	ab02      	add	r3, sp, #8
 800cbcc:	aa04      	add	r2, sp, #16
 800cbce:	4913      	ldr	r1, [pc, #76]	; (800cc1c <AT_test_sl+0x70>)
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f016 fa8f 	bl	80230f4 <tiny_sscanf>
 800cbd6:	2803      	cmp	r0, #3
 800cbd8:	dc1b      	bgt.n	800cc12 <AT_test_sl+0x66>
  AT_PRINTF("FREP[%u] dataRate[%u]\r\n", freq, dataRate);
 800cbda:	9b02      	ldr	r3, [sp, #8]
 800cbdc:	9301      	str	r3, [sp, #4]
 800cbde:	9b04      	ldr	r3, [sp, #16]
 800cbe0:	9300      	str	r3, [sp, #0]
 800cbe2:	4b0f      	ldr	r3, [pc, #60]	; (800cc20 <AT_test_sl+0x74>)
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	4611      	mov	r1, r2
 800cbe8:	4610      	mov	r0, r2
 800cbea:	f015 fb17 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  for(j=0;j<count;j++)
 800cbee:	2400      	movs	r4, #0
 800cbf0:	e009      	b.n	800cc06 <AT_test_sl+0x5a>
    RF_Tx_Local_loop(freq, dataRate, data_buffer, sizeof(data_buffer));
 800cbf2:	230c      	movs	r3, #12
 800cbf4:	aa05      	add	r2, sp, #20
 800cbf6:	9902      	ldr	r1, [sp, #8]
 800cbf8:	9804      	ldr	r0, [sp, #16]
 800cbfa:	f001 fb31 	bl	800e260 <RF_Tx_Local_loop>
	HAL_Delay(100);
 800cbfe:	2064      	movs	r0, #100	; 0x64
 800cc00:	f7fa fb7e 	bl	8007300 <HAL_Delay>
  for(j=0;j<count;j++)
 800cc04:	3401      	adds	r4, #1
 800cc06:	9b03      	ldr	r3, [sp, #12]
 800cc08:	429c      	cmp	r4, r3
 800cc0a:	d3f2      	bcc.n	800cbf2 <AT_test_sl+0x46>
  return AT_OK;
 800cc0c:	2000      	movs	r0, #0
}
 800cc0e:	b008      	add	sp, #32
 800cc10:	bd10      	pop	{r4, pc}
  	return AT_PARAM_ERROR;
 800cc12:	2002      	movs	r0, #2
 800cc14:	e7fb      	b.n	800cc0e <AT_test_sl+0x62>
 800cc16:	bf00      	nop
 800cc18:	080272a4 	.word	0x080272a4
 800cc1c:	08027280 	.word	0x08027280
 800cc20:	0802728c 	.word	0x0802728c

0800cc24 <AT_sw_version_get>:
{
 800cc24:	b500      	push	{lr}
 800cc26:	b083      	sub	sp, #12
  AT_PPRINTF("SW_VERSION: %s\r\n", APP_SW_VERSION);
 800cc28:	4b06      	ldr	r3, [pc, #24]	; (800cc44 <AT_sw_version_get+0x20>)
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	4b06      	ldr	r3, [pc, #24]	; (800cc48 <AT_sw_version_get+0x24>)
 800cc2e:	2200      	movs	r2, #0
 800cc30:	4611      	mov	r1, r2
 800cc32:	4610      	mov	r0, r2
 800cc34:	f015 faf2 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d1f5      	bne.n	800cc28 <AT_sw_version_get+0x4>
}
 800cc3c:	b003      	add	sp, #12
 800cc3e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc42:	bf00      	nop
 800cc44:	08025774 	.word	0x08025774
 800cc48:	08025760 	.word	0x08025760

0800cc4c <AT_Send_P2P_Data>:
{
 800cc4c:	b570      	push	{r4, r5, r6, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	4606      	mov	r6, r0
  uint8_t ul_msg[SGFX_MAX_UL_PAYLOAD_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800cc52:	ac01      	add	r4, sp, #4
 800cc54:	4b1e      	ldr	r3, [pc, #120]	; (800ccd0 <AT_Send_P2P_Data+0x84>)
 800cc56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uint32_t ul_size = 0;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	9300      	str	r3, [sp, #0]
  sfx_rc_enum_t sfx_rc = E2P_Read_Rc();
 800cc62:	f000 fbd5 	bl	800d410 <E2P_Read_Rc>
 800cc66:	4605      	mov	r5, r0
  if (stringToData(param, ul_msg, &ul_size) != SUCCESS)
 800cc68:	466a      	mov	r2, sp
 800cc6a:	4621      	mov	r1, r4
 800cc6c:	4630      	mov	r0, r6
 800cc6e:	f7ff f84d 	bl	800bd0c <stringToData>
 800cc72:	2801      	cmp	r0, #1
 800cc74:	d002      	beq.n	800cc7c <AT_Send_P2P_Data+0x30>
    return AT_PARAM_ERROR;
 800cc76:	2002      	movs	r0, #2
}
 800cc78:	b004      	add	sp, #16
 800cc7a:	bd70      	pop	{r4, r5, r6, pc}
  AT_PRINTF("Send DATA.....\r\n");
 800cc7c:	4b15      	ldr	r3, [pc, #84]	; (800ccd4 <AT_Send_P2P_Data+0x88>)
 800cc7e:	2200      	movs	r2, #0
 800cc80:	4611      	mov	r1, r2
 800cc82:	4610      	mov	r0, r2
 800cc84:	f015 faca 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  if(sfx_rc == SFX_RC1)
 800cc88:	b17d      	cbz	r5, 800ccaa <AT_Send_P2P_Data+0x5e>
  else if(sfx_rc == SFX_RC2)
 800cc8a:	2d01      	cmp	r5, #1
 800cc8c:	d016      	beq.n	800ccbc <AT_Send_P2P_Data+0x70>
  else if(sfx_rc == SFX_RC3A)
 800cc8e:	2d02      	cmp	r5, #2
 800cc90:	d016      	beq.n	800ccc0 <AT_Send_P2P_Data+0x74>
  else if(sfx_rc == SFX_RC3C)
 800cc92:	2d03      	cmp	r5, #3
 800cc94:	d016      	beq.n	800ccc4 <AT_Send_P2P_Data+0x78>
  else if(sfx_rc == SFX_RC4)
 800cc96:	2d04      	cmp	r5, #4
 800cc98:	d016      	beq.n	800ccc8 <AT_Send_P2P_Data+0x7c>
  else if(sfx_rc == SFX_RC5)
 800cc9a:	2d05      	cmp	r5, #5
 800cc9c:	d016      	beq.n	800cccc <AT_Send_P2P_Data+0x80>
  else if(sfx_rc == SFX_RC6)
 800cc9e:	2d06      	cmp	r5, #6
 800cca0:	d001      	beq.n	800cca6 <AT_Send_P2P_Data+0x5a>
  uint32_t freq = 869525000;
 800cca2:	480d      	ldr	r0, [pc, #52]	; (800ccd8 <AT_Send_P2P_Data+0x8c>)
 800cca4:	e002      	b.n	800ccac <AT_Send_P2P_Data+0x60>
    freq = 869100000;
 800cca6:	480d      	ldr	r0, [pc, #52]	; (800ccdc <AT_Send_P2P_Data+0x90>)
 800cca8:	e000      	b.n	800ccac <AT_Send_P2P_Data+0x60>
    freq = 869525000;
 800ccaa:	480b      	ldr	r0, [pc, #44]	; (800ccd8 <AT_Send_P2P_Data+0x8c>)
  RF_Tx_Local_loop(freq, dataRate, ul_msg, ul_size);
 800ccac:	9b00      	ldr	r3, [sp, #0]
 800ccae:	aa01      	add	r2, sp, #4
 800ccb0:	f44f 7116 	mov.w	r1, #600	; 0x258
 800ccb4:	f001 fad4 	bl	800e260 <RF_Tx_Local_loop>
  return AT_OK;
 800ccb8:	2000      	movs	r0, #0
 800ccba:	e7dd      	b.n	800cc78 <AT_Send_P2P_Data+0x2c>
    freq = 905200000;
 800ccbc:	4808      	ldr	r0, [pc, #32]	; (800cce0 <AT_Send_P2P_Data+0x94>)
 800ccbe:	e7f5      	b.n	800ccac <AT_Send_P2P_Data+0x60>
    freq = 922200000;
 800ccc0:	4808      	ldr	r0, [pc, #32]	; (800cce4 <AT_Send_P2P_Data+0x98>)
 800ccc2:	e7f3      	b.n	800ccac <AT_Send_P2P_Data+0x60>
    freq = 922300000;
 800ccc4:	4808      	ldr	r0, [pc, #32]	; (800cce8 <AT_Send_P2P_Data+0x9c>)
 800ccc6:	e7f1      	b.n	800ccac <AT_Send_P2P_Data+0x60>
    freq = 922300000;
 800ccc8:	4807      	ldr	r0, [pc, #28]	; (800cce8 <AT_Send_P2P_Data+0x9c>)
 800ccca:	e7ef      	b.n	800ccac <AT_Send_P2P_Data+0x60>
    freq = 866300000;
 800cccc:	4807      	ldr	r0, [pc, #28]	; (800ccec <AT_Send_P2P_Data+0xa0>)
 800ccce:	e7ed      	b.n	800ccac <AT_Send_P2P_Data+0x60>
 800ccd0:	08024af0 	.word	0x08024af0
 800ccd4:	080272b4 	.word	0x080272b4
 800ccd8:	33d3e608 	.word	0x33d3e608
 800ccdc:	33cd69e0 	.word	0x33cd69e0
 800cce0:	35f44180 	.word	0x35f44180
 800cce4:	36f7a7c0 	.word	0x36f7a7c0
 800cce8:	36f92e60 	.word	0x36f92e60
 800ccec:	33a2b060 	.word	0x33a2b060

0800ccf0 <AT_Receive_P2P_Data>:
{
 800ccf0:	b570      	push	{r4, r5, r6, lr}
 800ccf2:	b08c      	sub	sp, #48	; 0x30
  sfx_rc_enum_t sfx_rc = E2P_Read_Rc();
 800ccf4:	f000 fb8c 	bl	800d410 <E2P_Read_Rc>
 800ccf8:	4605      	mov	r5, r0
  g_iRxTestInterrupt = 0;
 800ccfa:	2400      	movs	r4, #0
 800ccfc:	4b4c      	ldr	r3, [pc, #304]	; (800ce30 <AT_Receive_P2P_Data+0x140>)
 800ccfe:	601c      	str	r4, [r3, #0]
  AT_PRINTF("\r\nOK\r\n");
 800cd00:	4b4c      	ldr	r3, [pc, #304]	; (800ce34 <AT_Receive_P2P_Data+0x144>)
 800cd02:	4622      	mov	r2, r4
 800cd04:	4621      	mov	r1, r4
 800cd06:	4620      	mov	r0, r4
 800cd08:	f015 fa88 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("\r\nRecevie DATA.... START\r\n");
 800cd0c:	4b4a      	ldr	r3, [pc, #296]	; (800ce38 <AT_Receive_P2P_Data+0x148>)
 800cd0e:	4622      	mov	r2, r4
 800cd10:	4621      	mov	r1, r4
 800cd12:	4620      	mov	r0, r4
 800cd14:	f015 fa82 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  RF_API_init(SFX_RF_MODE_RX);
 800cd18:	2001      	movs	r0, #1
 800cd1a:	f001 f8ab 	bl	800de74 <RF_API_init>
  if(sfx_rc == SFX_RC1)
 800cd1e:	b17d      	cbz	r5, 800cd40 <AT_Receive_P2P_Data+0x50>
  else if(sfx_rc == SFX_RC2)
 800cd20:	2d01      	cmp	r5, #1
 800cd22:	d012      	beq.n	800cd4a <AT_Receive_P2P_Data+0x5a>
  else if(sfx_rc == SFX_RC3A)
 800cd24:	2d02      	cmp	r5, #2
 800cd26:	d012      	beq.n	800cd4e <AT_Receive_P2P_Data+0x5e>
  else if(sfx_rc == SFX_RC3C)
 800cd28:	2d03      	cmp	r5, #3
 800cd2a:	d012      	beq.n	800cd52 <AT_Receive_P2P_Data+0x62>
  else if(sfx_rc == SFX_RC4)
 800cd2c:	2d04      	cmp	r5, #4
 800cd2e:	d012      	beq.n	800cd56 <AT_Receive_P2P_Data+0x66>
  else if(sfx_rc == SFX_RC5)
 800cd30:	2d05      	cmp	r5, #5
 800cd32:	d012      	beq.n	800cd5a <AT_Receive_P2P_Data+0x6a>
  else if(sfx_rc == SFX_RC6)
 800cd34:	2d06      	cmp	r5, #6
 800cd36:	d001      	beq.n	800cd3c <AT_Receive_P2P_Data+0x4c>
  uint32_t freq = 869525000;
 800cd38:	4840      	ldr	r0, [pc, #256]	; (800ce3c <AT_Receive_P2P_Data+0x14c>)
 800cd3a:	e002      	b.n	800cd42 <AT_Receive_P2P_Data+0x52>
    freq = 869100000;
 800cd3c:	4840      	ldr	r0, [pc, #256]	; (800ce40 <AT_Receive_P2P_Data+0x150>)
 800cd3e:	e000      	b.n	800cd42 <AT_Receive_P2P_Data+0x52>
    freq = 869525000;
 800cd40:	483e      	ldr	r0, [pc, #248]	; (800ce3c <AT_Receive_P2P_Data+0x14c>)
  RF_API_change_frequency(freq);
 800cd42:	f001 f9fd 	bl	800e140 <RF_API_change_frequency>
  sfx_s32 receivedCnt = 0;
 800cd46:	2600      	movs	r6, #0
  while(g_iRxTestInterrupt==0)
 800cd48:	e02a      	b.n	800cda0 <AT_Receive_P2P_Data+0xb0>
    freq = 905200000;
 800cd4a:	483e      	ldr	r0, [pc, #248]	; (800ce44 <AT_Receive_P2P_Data+0x154>)
 800cd4c:	e7f9      	b.n	800cd42 <AT_Receive_P2P_Data+0x52>
    freq = 922200000;
 800cd4e:	483e      	ldr	r0, [pc, #248]	; (800ce48 <AT_Receive_P2P_Data+0x158>)
 800cd50:	e7f7      	b.n	800cd42 <AT_Receive_P2P_Data+0x52>
    freq = 922300000;
 800cd52:	483e      	ldr	r0, [pc, #248]	; (800ce4c <AT_Receive_P2P_Data+0x15c>)
 800cd54:	e7f5      	b.n	800cd42 <AT_Receive_P2P_Data+0x52>
    freq = 922300000;
 800cd56:	483d      	ldr	r0, [pc, #244]	; (800ce4c <AT_Receive_P2P_Data+0x15c>)
 800cd58:	e7f3      	b.n	800cd42 <AT_Receive_P2P_Data+0x52>
    freq = 866300000;
 800cd5a:	483d      	ldr	r0, [pc, #244]	; (800ce50 <AT_Receive_P2P_Data+0x160>)
 800cd5c:	e7f1      	b.n	800cd42 <AT_Receive_P2P_Data+0x52>
  					AT_PRINTF("%02X ", frame[j]);
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	4b3c      	ldr	r3, [pc, #240]	; (800ce54 <AT_Receive_P2P_Data+0x164>)
 800cd62:	2200      	movs	r2, #0
 800cd64:	4611      	mov	r1, r2
 800cd66:	4610      	mov	r0, r2
 800cd68:	f015 fa58 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  			for(j=0; j<sizeof(frame); j++)
 800cd6c:	3401      	adds	r4, #1
 800cd6e:	2c1f      	cmp	r4, #31
 800cd70:	d806      	bhi.n	800cd80 <AT_Receive_P2P_Data+0x90>
  				if(frame[j] > 0)
 800cd72:	ab0c      	add	r3, sp, #48	; 0x30
 800cd74:	4423      	add	r3, r4
 800cd76:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d0f6      	beq.n	800cd6c <AT_Receive_P2P_Data+0x7c>
 800cd7e:	e7ee      	b.n	800cd5e <AT_Receive_P2P_Data+0x6e>
  			AT_PRINTF("\r\n");
 800cd80:	4b35      	ldr	r3, [pc, #212]	; (800ce58 <AT_Receive_P2P_Data+0x168>)
 800cd82:	2200      	movs	r2, #0
 800cd84:	4611      	mov	r1, r2
 800cd86:	4610      	mov	r0, r2
 800cd88:	f015 fa48 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  		AT_PRINTF("{#%d RSSI=%d RECEIVED!!}\r\n\r\n",receivedCnt,rssi);
 800cd8c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800cd90:	9301      	str	r3, [sp, #4]
 800cd92:	9600      	str	r6, [sp, #0]
 800cd94:	4b31      	ldr	r3, [pc, #196]	; (800ce5c <AT_Receive_P2P_Data+0x16c>)
 800cd96:	2200      	movs	r2, #0
 800cd98:	4611      	mov	r1, r2
 800cd9a:	4610      	mov	r0, r2
 800cd9c:	f015 fa3e 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  while(g_iRxTestInterrupt==0)
 800cda0:	4b23      	ldr	r3, [pc, #140]	; (800ce30 <AT_Receive_P2P_Data+0x140>)
 800cda2:	681c      	ldr	r4, [r3, #0]
 800cda4:	bb54      	cbnz	r4, 800cdfc <AT_Receive_P2P_Data+0x10c>
  	memset(frame,0,sizeof(frame));
 800cda6:	2220      	movs	r2, #32
 800cda8:	2100      	movs	r1, #0
 800cdaa:	a804      	add	r0, sp, #16
 800cdac:	f017 f8b4 	bl	8023f18 <memset>
  	result = RF_API_wait_frame(frame,&rssi,&state);
 800cdb0:	f10d 020d 	add.w	r2, sp, #13
 800cdb4:	f10d 010e 	add.w	r1, sp, #14
 800cdb8:	a804      	add	r0, sp, #16
 800cdba:	f001 f9d7 	bl	800e16c <RF_API_wait_frame>
 800cdbe:	4605      	mov	r5, r0
  	if(DL_PASSED == state)
 800cdc0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d115      	bne.n	800cdf4 <AT_Receive_P2P_Data+0x104>
  		receivedCnt++;
 800cdc8:	3601      	adds	r6, #1
  		if(UTIL_ADV_TRACE_GetVerboseLevel() > 2)
 800cdca:	f015 f9d3 	bl	8022174 <UTIL_ADV_TRACE_GetVerboseLevel>
 800cdce:	2802      	cmp	r0, #2
 800cdd0:	d9dc      	bls.n	800cd8c <AT_Receive_P2P_Data+0x9c>
  			AT_PRINTF("RF_API_wait_frame : result[%x] state[%d]\r\n\r\n", result, state);
 800cdd2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	9500      	str	r5, [sp, #0]
 800cdda:	4b21      	ldr	r3, [pc, #132]	; (800ce60 <AT_Receive_P2P_Data+0x170>)
 800cddc:	2200      	movs	r2, #0
 800cdde:	4611      	mov	r1, r2
 800cde0:	4610      	mov	r0, r2
 800cde2:	f015 fa1b 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  			AT_PRINTF("RP2P=");
 800cde6:	4b1f      	ldr	r3, [pc, #124]	; (800ce64 <AT_Receive_P2P_Data+0x174>)
 800cde8:	2200      	movs	r2, #0
 800cdea:	4611      	mov	r1, r2
 800cdec:	4610      	mov	r0, r2
 800cdee:	f015 fa15 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  			for(j=0; j<sizeof(frame); j++)
 800cdf2:	e7bc      	b.n	800cd6e <AT_Receive_P2P_Data+0x7e>
  		if(UTIL_ADV_TRACE_GetVerboseLevel() > 2)
 800cdf4:	f015 f9be 	bl	8022174 <UTIL_ADV_TRACE_GetVerboseLevel>
 800cdf8:	2802      	cmp	r0, #2
 800cdfa:	d80e      	bhi.n	800ce1a <AT_Receive_P2P_Data+0x12a>
  RF_API_stop();
 800cdfc:	f001 f8e2 	bl	800dfc4 <RF_API_stop>
  AT_PRINTF("\r\nRecevie DATA.... STOP\r\n");
 800ce00:	4b19      	ldr	r3, [pc, #100]	; (800ce68 <AT_Receive_P2P_Data+0x178>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	4611      	mov	r1, r2
 800ce06:	4610      	mov	r0, r2
 800ce08:	f015 fa08 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  g_iRxTestInterrupt = -1;
 800ce0c:	4b08      	ldr	r3, [pc, #32]	; (800ce30 <AT_Receive_P2P_Data+0x140>)
 800ce0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce12:	601a      	str	r2, [r3, #0]
}
 800ce14:	2000      	movs	r0, #0
 800ce16:	b00c      	add	sp, #48	; 0x30
 800ce18:	bd70      	pop	{r4, r5, r6, pc}
  			AT_PRINTF("RF_API_wait_frame : result[%x] state[%d] - TIMEOUT!!\r\n\r\n", result, state);
 800ce1a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800ce1e:	9301      	str	r3, [sp, #4]
 800ce20:	9500      	str	r5, [sp, #0]
 800ce22:	4b12      	ldr	r3, [pc, #72]	; (800ce6c <AT_Receive_P2P_Data+0x17c>)
 800ce24:	2200      	movs	r2, #0
 800ce26:	4611      	mov	r1, r2
 800ce28:	4610      	mov	r0, r2
 800ce2a:	f015 f9f7 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800ce2e:	e7e5      	b.n	800cdfc <AT_Receive_P2P_Data+0x10c>
 800ce30:	20000160 	.word	0x20000160
 800ce34:	0802686c 	.word	0x0802686c
 800ce38:	080272c8 	.word	0x080272c8
 800ce3c:	33d3e608 	.word	0x33d3e608
 800ce40:	33cd69e0 	.word	0x33cd69e0
 800ce44:	35f44180 	.word	0x35f44180
 800ce48:	36f7a7c0 	.word	0x36f7a7c0
 800ce4c:	36f92e60 	.word	0x36f92e60
 800ce50:	33a2b060 	.word	0x33a2b060
 800ce54:	08025734 	.word	0x08025734
 800ce58:	080267cc 	.word	0x080267cc
 800ce5c:	0802731c 	.word	0x0802731c
 800ce60:	080272e4 	.word	0x080272e4
 800ce64:	08027314 	.word	0x08027314
 800ce68:	0802733c 	.word	0x0802733c
 800ce6c:	08027230 	.word	0x08027230

0800ce70 <CMD_ProcessBackSpace>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t CMD_ProcessBackSpace(char *cmd)
{
 800ce70:	b470      	push	{r4, r5, r6}
  /* USER CODE BEGIN CMD_ProcessBackSpace_1 */

  /* USER CODE END CMD_ProcessBackSpace_1 */
  uint32_t i = 0;
  uint32_t bs_cnt = 0;
  uint32_t cmd_len = 0;
 800ce72:	2200      	movs	r2, #0
  uint32_t bs_cnt = 0;
 800ce74:	4614      	mov	r4, r2
  /*get command length and number of backspace*/
  while (cmd[cmd_len] != '\0')
 800ce76:	e000      	b.n	800ce7a <CMD_ProcessBackSpace+0xa>
  {
    if (cmd[cmd_len] == '\b')
    {
      bs_cnt++;
    }
    cmd_len++;
 800ce78:	3201      	adds	r2, #1
  while (cmd[cmd_len] != '\0')
 800ce7a:	5c83      	ldrb	r3, [r0, r2]
 800ce7c:	b11b      	cbz	r3, 800ce86 <CMD_ProcessBackSpace+0x16>
    if (cmd[cmd_len] == '\b')
 800ce7e:	2b08      	cmp	r3, #8
 800ce80:	d1fa      	bne.n	800ce78 <CMD_ProcessBackSpace+0x8>
      bs_cnt++;
 800ce82:	3401      	adds	r4, #1
 800ce84:	e7f8      	b.n	800ce78 <CMD_ProcessBackSpace+0x8>
  }
  /*for every backspace, remove backspace and its preceding character*/
  for (i = 0; i < bs_cnt; i++)
 800ce86:	2600      	movs	r6, #0
 800ce88:	42a6      	cmp	r6, r4
 800ce8a:	d21c      	bcs.n	800cec6 <CMD_ProcessBackSpace+0x56>
  {
    int curs = 0;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	e000      	b.n	800ce92 <CMD_ProcessBackSpace+0x22>
    int j = 0;

    /*set cursor to backspace*/
    while (cmd[curs] != '\b')
    {
      curs++;
 800ce90:	3301      	adds	r3, #1
    while (cmd[curs] != '\b')
 800ce92:	5cc1      	ldrb	r1, [r0, r3]
 800ce94:	2908      	cmp	r1, #8
 800ce96:	d1fb      	bne.n	800ce90 <CMD_ProcessBackSpace+0x20>
    }
    if (curs > 0)
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	dc03      	bgt.n	800cea4 <CMD_ProcessBackSpace+0x34>
      cmd[j++] = '\0';
      cmd_len -= 2;
    }
    else
    {
      return -1;
 800ce9c:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return 0;
  /* USER CODE BEGIN CMD_ProcessBackSpace_2 */

  /* USER CODE END CMD_ProcessBackSpace_2 */
}
 800cea0:	bc70      	pop	{r4, r5, r6}
 800cea2:	4770      	bx	lr
      for (j = curs - 1; j < cmd_len - 2; j++)
 800cea4:	3b01      	subs	r3, #1
 800cea6:	e003      	b.n	800ceb0 <CMD_ProcessBackSpace+0x40>
        cmd[j] = cmd[j + 2];
 800cea8:	18c1      	adds	r1, r0, r3
 800ceaa:	7889      	ldrb	r1, [r1, #2]
 800ceac:	54c1      	strb	r1, [r0, r3]
      for (j = curs - 1; j < cmd_len - 2; j++)
 800ceae:	3301      	adds	r3, #1
 800ceb0:	1e91      	subs	r1, r2, #2
 800ceb2:	461d      	mov	r5, r3
 800ceb4:	4299      	cmp	r1, r3
 800ceb6:	d8f7      	bhi.n	800cea8 <CMD_ProcessBackSpace+0x38>
      cmd[j++] = '\0';
 800ceb8:	3301      	adds	r3, #1
 800ceba:	2200      	movs	r2, #0
 800cebc:	5542      	strb	r2, [r0, r5]
      cmd[j++] = '\0';
 800cebe:	54c2      	strb	r2, [r0, r3]
  for (i = 0; i < bs_cnt; i++)
 800cec0:	3601      	adds	r6, #1
      cmd_len -= 2;
 800cec2:	460a      	mov	r2, r1
 800cec4:	e7e0      	b.n	800ce88 <CMD_ProcessBackSpace+0x18>
  return 0;
 800cec6:	2000      	movs	r0, #0
 800cec8:	e7ea      	b.n	800cea0 <CMD_ProcessBackSpace+0x30>
	...

0800cecc <CMD_GetChar>:

static void CMD_GetChar(uint8_t *rxChar, uint16_t size, uint8_t error)
{
 800cecc:	b510      	push	{r4, lr}
 800cece:	4604      	mov	r4, r0
  /* USER CODE BEGIN CMD_GetChar_1 */

  /* USER CODE END CMD_GetChar_1 */
  command[i] = *rxChar;
 800ced0:	4b0a      	ldr	r3, [pc, #40]	; (800cefc <CMD_GetChar+0x30>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	7801      	ldrb	r1, [r0, #0]
 800ced6:	4a0a      	ldr	r2, [pc, #40]	; (800cf00 <CMD_GetChar+0x34>)
 800ced8:	54d1      	strb	r1, [r2, r3]

  NotifyCb();
 800ceda:	4b0a      	ldr	r3, [pc, #40]	; (800cf04 <CMD_GetChar+0x38>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4798      	blx	r3

  /* For stopping AT$RL */
  if(g_iRxTestInterrupt==0)
 800cee0:	4b09      	ldr	r3, [pc, #36]	; (800cf08 <CMD_GetChar+0x3c>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	b913      	cbnz	r3, 800ceec <CMD_GetChar+0x20>
  {
  	if(*rxChar == 'X')
 800cee6:	7823      	ldrb	r3, [r4, #0]
 800cee8:	2b58      	cmp	r3, #88	; 0x58
 800ceea:	d000      	beq.n	800ceee <CMD_GetChar+0x22>
  }

  /* USER CODE BEGIN CMD_GetChar_2 */

  /* USER CODE END CMD_GetChar_2 */
}
 800ceec:	bd10      	pop	{r4, pc}
      g_iRxTestInterrupt = 1;
 800ceee:	2001      	movs	r0, #1
 800cef0:	4b05      	ldr	r3, [pc, #20]	; (800cf08 <CMD_GetChar+0x3c>)
 800cef2:	6018      	str	r0, [r3, #0]
      MCU_API_timer_start(1);
 800cef4:	f000 fd4c 	bl	800d990 <MCU_API_timer_start>
}
 800cef8:	e7f8      	b.n	800ceec <CMD_GetChar+0x20>
 800cefa:	bf00      	nop
 800cefc:	20000c1c 	.word	0x20000c1c
 800cf00:	20000b9c 	.word	0x20000b9c
 800cf04:	20000b98 	.word	0x20000b98
 800cf08:	20000160 	.word	0x20000160

0800cf0c <com_error>:

  /* USER CODE END parse_cmd_2 */
}

static void com_error(ATEerror_t error_type)
{
 800cf0c:	b510      	push	{r4, lr}
 800cf0e:	4604      	mov	r4, r0
  /* USER CODE BEGIN com_error_1 */

  /* USER CODE END com_error_1 */
  if (error_type > AT_MAX)
 800cf10:	280a      	cmp	r0, #10
 800cf12:	d900      	bls.n	800cf16 <com_error+0xa>
  {
    error_type = AT_MAX;
 800cf14:	240a      	movs	r4, #10
  }
  AT_PPRINTF(ATError_description[error_type]);
 800cf16:	4b05      	ldr	r3, [pc, #20]	; (800cf2c <com_error+0x20>)
 800cf18:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	4611      	mov	r1, r2
 800cf20:	4610      	mov	r0, r2
 800cf22:	f015 f97b 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800cf26:	2800      	cmp	r0, #0
 800cf28:	d1f5      	bne.n	800cf16 <com_error+0xa>
  /* USER CODE BEGIN com_error_2 */

  /* USER CODE END com_error_2 */
}
 800cf2a:	bd10      	pop	{r4, pc}
 800cf2c:	08027c90 	.word	0x08027c90

0800cf30 <parse_cmd>:
{
 800cf30:	b570      	push	{r4, r5, r6, lr}
  if ((cmd[0] != 'A') || (cmd[1] != 'T'))
 800cf32:	7802      	ldrb	r2, [r0, #0]
 800cf34:	2a41      	cmp	r2, #65	; 0x41
 800cf36:	d003      	beq.n	800cf40 <parse_cmd+0x10>
    status = AT_ERROR;
 800cf38:	2001      	movs	r0, #1
  com_error(status);
 800cf3a:	f7ff ffe7 	bl	800cf0c <com_error>
}
 800cf3e:	bd70      	pop	{r4, r5, r6, pc}
 800cf40:	4603      	mov	r3, r0
  if ((cmd[0] != 'A') || (cmd[1] != 'T'))
 800cf42:	7842      	ldrb	r2, [r0, #1]
 800cf44:	2a54      	cmp	r2, #84	; 0x54
 800cf46:	d001      	beq.n	800cf4c <parse_cmd+0x1c>
    status = AT_ERROR;
 800cf48:	2001      	movs	r0, #1
 800cf4a:	e7f6      	b.n	800cf3a <parse_cmd+0xa>
  else if (cmd[2] == '\0')
 800cf4c:	7880      	ldrb	r0, [r0, #2]
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	d0f3      	beq.n	800cf3a <parse_cmd+0xa>
  else if (cmd[2] == '?')
 800cf52:	283f      	cmp	r0, #63	; 0x3f
 800cf54:	d012      	beq.n	800cf7c <parse_cmd+0x4c>
    cmd += 2;
 800cf56:	1c9c      	adds	r4, r3, #2
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 800cf58:	2500      	movs	r5, #0
 800cf5a:	2d1c      	cmp	r5, #28
 800cf5c:	d865      	bhi.n	800d02a <parse_cmd+0xfa>
      if (strncmp(cmd, ATCommand[i].string, ATCommand[i].size_string) == 0)
 800cf5e:	4b34      	ldr	r3, [pc, #208]	; (800d030 <parse_cmd+0x100>)
 800cf60:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800cf64:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 800cf68:	6856      	ldr	r6, [r2, #4]
 800cf6a:	4632      	mov	r2, r6
 800cf6c:	f853 1031 	ldr.w	r1, [r3, r1, lsl #3]
 800cf70:	4620      	mov	r0, r4
 800cf72:	f017 f8be 	bl	80240f2 <strncmp>
 800cf76:	b310      	cbz	r0, 800cfbe <parse_cmd+0x8e>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 800cf78:	3501      	adds	r5, #1
 800cf7a:	e7ee      	b.n	800cf5a <parse_cmd+0x2a>
    AT_PPRINTF("AT+<CMD>?        : Help on <CMD>\r\n"
 800cf7c:	4b2d      	ldr	r3, [pc, #180]	; (800d034 <parse_cmd+0x104>)
 800cf7e:	2200      	movs	r2, #0
 800cf80:	4611      	mov	r1, r2
 800cf82:	4610      	mov	r0, r2
 800cf84:	f015 f94a 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d1f7      	bne.n	800cf7c <parse_cmd+0x4c>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 800cf8c:	2400      	movs	r4, #0
 800cf8e:	e000      	b.n	800cf92 <parse_cmd+0x62>
 800cf90:	3401      	adds	r4, #1
 800cf92:	2c1c      	cmp	r4, #28
 800cf94:	d80d      	bhi.n	800cfb2 <parse_cmd+0x82>
      AT_PPRINTF(ATCommand[i].help_string);
 800cf96:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800cf9a:	4a25      	ldr	r2, [pc, #148]	; (800d030 <parse_cmd+0x100>)
 800cf9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cfa0:	695b      	ldr	r3, [r3, #20]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	4611      	mov	r1, r2
 800cfa6:	4610      	mov	r0, r2
 800cfa8:	f015 f938 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d1f2      	bne.n	800cf96 <parse_cmd+0x66>
 800cfb0:	e7ee      	b.n	800cf90 <parse_cmd+0x60>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800cfb2:	f015 f8bf 	bl	8022134 <UTIL_ADV_TRACE_IsBufferEmpty>
 800cfb6:	2801      	cmp	r0, #1
 800cfb8:	d1fb      	bne.n	800cfb2 <parse_cmd+0x82>
  ATEerror_t status = AT_OK;
 800cfba:	2000      	movs	r0, #0
 800cfbc:	e7bd      	b.n	800cf3a <parse_cmd+0xa>
        cmd += Current_ATCommand->size_string;
 800cfbe:	19a0      	adds	r0, r4, r6
        switch (cmd[0])
 800cfc0:	5da3      	ldrb	r3, [r4, r6]
 800cfc2:	2b3d      	cmp	r3, #61	; 0x3d
 800cfc4:	d00c      	beq.n	800cfe0 <parse_cmd+0xb0>
 800cfc6:	2b3f      	cmp	r3, #63	; 0x3f
 800cfc8:	d021      	beq.n	800d00e <parse_cmd+0xde>
 800cfca:	b10b      	cbz	r3, 800cfd0 <parse_cmd+0xa0>
 800cfcc:	2001      	movs	r0, #1
 800cfce:	e7b4      	b.n	800cf3a <parse_cmd+0xa>
            status = Current_ATCommand->run(cmd);
 800cfd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cfd4:	4b16      	ldr	r3, [pc, #88]	; (800d030 <parse_cmd+0x100>)
 800cfd6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cfda:	691b      	ldr	r3, [r3, #16]
 800cfdc:	4798      	blx	r3
            break;
 800cfde:	e7ac      	b.n	800cf3a <parse_cmd+0xa>
            if ((cmd[1] == '?') && (cmd[2] == '\0'))
 800cfe0:	7843      	ldrb	r3, [r0, #1]
 800cfe2:	2b3f      	cmp	r3, #63	; 0x3f
 800cfe4:	d008      	beq.n	800cff8 <parse_cmd+0xc8>
              status = Current_ATCommand->set(cmd + 1);
 800cfe6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cfea:	4b11      	ldr	r3, [pc, #68]	; (800d030 <parse_cmd+0x100>)
 800cfec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cff0:	68eb      	ldr	r3, [r5, #12]
 800cff2:	3001      	adds	r0, #1
 800cff4:	4798      	blx	r3
 800cff6:	e7a0      	b.n	800cf3a <parse_cmd+0xa>
            if ((cmd[1] == '?') && (cmd[2] == '\0'))
 800cff8:	7883      	ldrb	r3, [r0, #2]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1f3      	bne.n	800cfe6 <parse_cmd+0xb6>
              status = Current_ATCommand->get(cmd + 1);
 800cffe:	4a0c      	ldr	r2, [pc, #48]	; (800d030 <parse_cmd+0x100>)
 800d000:	2318      	movs	r3, #24
 800d002:	fb03 2505 	mla	r5, r3, r5, r2
 800d006:	68ab      	ldr	r3, [r5, #8]
 800d008:	3001      	adds	r0, #1
 800d00a:	4798      	blx	r3
 800d00c:	e795      	b.n	800cf3a <parse_cmd+0xa>
            AT_PPRINTF(Current_ATCommand->help_string);
 800d00e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800d012:	4a07      	ldr	r2, [pc, #28]	; (800d030 <parse_cmd+0x100>)
 800d014:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d018:	695b      	ldr	r3, [r3, #20]
 800d01a:	2200      	movs	r2, #0
 800d01c:	4611      	mov	r1, r2
 800d01e:	4610      	mov	r0, r2
 800d020:	f015 f8fc 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800d024:	2800      	cmp	r0, #0
 800d026:	d1f2      	bne.n	800d00e <parse_cmd+0xde>
 800d028:	e787      	b.n	800cf3a <parse_cmd+0xa>
    status = AT_ERROR;
 800d02a:	2001      	movs	r0, #1
 800d02c:	e785      	b.n	800cf3a <parse_cmd+0xa>
 800d02e:	bf00      	nop
 800d030:	080279d8 	.word	0x080279d8
 800d034:	0802577c 	.word	0x0802577c

0800d038 <CMD_Init>:
{
 800d038:	b510      	push	{r4, lr}
 800d03a:	4604      	mov	r4, r0
  UTIL_ADV_TRACE_StartRxProcess(CMD_GetChar);
 800d03c:	480c      	ldr	r0, [pc, #48]	; (800d070 <CMD_Init+0x38>)
 800d03e:	f015 f885 	bl	802214c <UTIL_ADV_TRACE_StartRxProcess>
  if (CmdProcessNotify != NULL)
 800d042:	b10c      	cbz	r4, 800d048 <CMD_Init+0x10>
    NotifyCb = CmdProcessNotify;
 800d044:	4b0b      	ldr	r3, [pc, #44]	; (800d074 <CMD_Init+0x3c>)
 800d046:	601c      	str	r4, [r3, #0]
  for (i = 0; i < CMD_SIZE; i++)
 800d048:	4b0b      	ldr	r3, [pc, #44]	; (800d078 <CMD_Init+0x40>)
 800d04a:	2200      	movs	r2, #0
 800d04c:	601a      	str	r2, [r3, #0]
 800d04e:	4b0a      	ldr	r3, [pc, #40]	; (800d078 <CMD_Init+0x40>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	2b7f      	cmp	r3, #127	; 0x7f
 800d054:	d806      	bhi.n	800d064 <CMD_Init+0x2c>
    command[i] = 0;
 800d056:	4a09      	ldr	r2, [pc, #36]	; (800d07c <CMD_Init+0x44>)
 800d058:	2100      	movs	r1, #0
 800d05a:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < CMD_SIZE; i++)
 800d05c:	3301      	adds	r3, #1
 800d05e:	4a06      	ldr	r2, [pc, #24]	; (800d078 <CMD_Init+0x40>)
 800d060:	6013      	str	r3, [r2, #0]
 800d062:	e7f4      	b.n	800d04e <CMD_Init+0x16>
  i = 0;
 800d064:	2300      	movs	r3, #0
 800d066:	4a04      	ldr	r2, [pc, #16]	; (800d078 <CMD_Init+0x40>)
 800d068:	6013      	str	r3, [r2, #0]
  IsBusy = 0;
 800d06a:	4a05      	ldr	r2, [pc, #20]	; (800d080 <CMD_Init+0x48>)
 800d06c:	6013      	str	r3, [r2, #0]
}
 800d06e:	bd10      	pop	{r4, pc}
 800d070:	0800cecd 	.word	0x0800cecd
 800d074:	20000b98 	.word	0x20000b98
 800d078:	20000c1c 	.word	0x20000c1c
 800d07c:	20000b9c 	.word	0x20000b9c
 800d080:	20000b94 	.word	0x20000b94

0800d084 <CMD_Process>:
{
 800d084:	b570      	push	{r4, r5, r6, lr}
  if (command[i] == AT_ERROR_RX_CHAR)
 800d086:	4b21      	ldr	r3, [pc, #132]	; (800d10c <CMD_Process+0x88>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a21      	ldr	r2, [pc, #132]	; (800d110 <CMD_Process+0x8c>)
 800d08c:	5cd2      	ldrb	r2, [r2, r3]
 800d08e:	2a01      	cmp	r2, #1
 800d090:	d00b      	beq.n	800d0aa <CMD_Process+0x26>
  else if ((command[i] == '\r') || (command[i] == '\n'))
 800d092:	2a0d      	cmp	r2, #13
 800d094:	d010      	beq.n	800d0b8 <CMD_Process+0x34>
 800d096:	2a0a      	cmp	r2, #10
 800d098:	d00e      	beq.n	800d0b8 <CMD_Process+0x34>
  else if (i == (CMD_SIZE - 1))
 800d09a:	2b7f      	cmp	r3, #127	; 0x7f
 800d09c:	d02e      	beq.n	800d0fc <CMD_Process+0x78>
    if(i==0 && command[i] == '\0')
 800d09e:	b903      	cbnz	r3, 800d0a2 <CMD_Process+0x1e>
 800d0a0:	b17a      	cbz	r2, 800d0c2 <CMD_Process+0x3e>
      i++;
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	4a19      	ldr	r2, [pc, #100]	; (800d10c <CMD_Process+0x88>)
 800d0a6:	6013      	str	r3, [r2, #0]
}
 800d0a8:	e00b      	b.n	800d0c2 <CMD_Process+0x3e>
    i = 0;
 800d0aa:	4b18      	ldr	r3, [pc, #96]	; (800d10c <CMD_Process+0x88>)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	601a      	str	r2, [r3, #0]
    com_error(AT_RX_ERROR);
 800d0b0:	2008      	movs	r0, #8
 800d0b2:	f7ff ff2b 	bl	800cf0c <com_error>
 800d0b6:	e004      	b.n	800d0c2 <CMD_Process+0x3e>
    if (IsBusy == 1)
 800d0b8:	4a16      	ldr	r2, [pc, #88]	; (800d114 <CMD_Process+0x90>)
 800d0ba:	6812      	ldr	r2, [r2, #0]
 800d0bc:	2a01      	cmp	r2, #1
 800d0be:	d001      	beq.n	800d0c4 <CMD_Process+0x40>
    else if (i != 0)
 800d0c0:	b93b      	cbnz	r3, 800d0d2 <CMD_Process+0x4e>
}
 800d0c2:	bd70      	pop	{r4, r5, r6, pc}
      i = 0;
 800d0c4:	4b11      	ldr	r3, [pc, #68]	; (800d10c <CMD_Process+0x88>)
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	601a      	str	r2, [r3, #0]
      com_error(AT_BUSY_ERROR);
 800d0ca:	2003      	movs	r0, #3
 800d0cc:	f7ff ff1e 	bl	800cf0c <com_error>
 800d0d0:	e7f7      	b.n	800d0c2 <CMD_Process+0x3e>
      command[i] = '\0';
 800d0d2:	4c0f      	ldr	r4, [pc, #60]	; (800d110 <CMD_Process+0x8c>)
 800d0d4:	2500      	movs	r5, #0
 800d0d6:	54e5      	strb	r5, [r4, r3]
      IsBusy = 1;
 800d0d8:	4e0e      	ldr	r6, [pc, #56]	; (800d114 <CMD_Process+0x90>)
 800d0da:	2301      	movs	r3, #1
 800d0dc:	6033      	str	r3, [r6, #0]
      CMD_ProcessBackSpace(command);
 800d0de:	4620      	mov	r0, r4
 800d0e0:	f7ff fec6 	bl	800ce70 <CMD_ProcessBackSpace>
      parse_cmd(command);
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	f7ff ff23 	bl	800cf30 <parse_cmd>
      IsBusy = 0;
 800d0ea:	6035      	str	r5, [r6, #0]
      i = 0;
 800d0ec:	4b07      	ldr	r3, [pc, #28]	; (800d10c <CMD_Process+0x88>)
 800d0ee:	601d      	str	r5, [r3, #0]
	  memset(command, 0, sizeof(command));
 800d0f0:	2280      	movs	r2, #128	; 0x80
 800d0f2:	4629      	mov	r1, r5
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	f016 ff0f 	bl	8023f18 <memset>
 800d0fa:	e7e2      	b.n	800d0c2 <CMD_Process+0x3e>
    i = 0;
 800d0fc:	4b03      	ldr	r3, [pc, #12]	; (800d10c <CMD_Process+0x88>)
 800d0fe:	2200      	movs	r2, #0
 800d100:	601a      	str	r2, [r3, #0]
    com_error(AT_TEST_PARAM_OVERFLOW);
 800d102:	2004      	movs	r0, #4
 800d104:	f7ff ff02 	bl	800cf0c <com_error>
 800d108:	e7db      	b.n	800d0c2 <CMD_Process+0x3e>
 800d10a:	bf00      	nop
 800d10c:	20000c1c 	.word	0x20000c1c
 800d110:	20000b9c 	.word	0x20000b9c
 800d114:	20000b94 	.word	0x20000b94

0800d118 <RxCarrierSenseInitStatus>:
{
  /* USER CODE BEGIN RxCarrierSenseInitStatus_1 */

  /* USER CODE END RxCarrierSenseInitStatus_1 */
  /*Initialize the Flag*/
  rxCarrierSenseFlag = 0;
 800d118:	4b01      	ldr	r3, [pc, #4]	; (800d120 <RxCarrierSenseInitStatus+0x8>)
 800d11a:	2200      	movs	r2, #0
 800d11c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RxCarrierSenseInitStatus_2 */

  /* USER CODE END RxCarrierSenseInitStatus_2 */
}
 800d11e:	4770      	bx	lr
 800d120:	20000c20 	.word	0x20000c20

0800d124 <RxCarrierSenseGetStatus>:
  /* USER CODE END RxCarrierSenseGetStatus_1 */
  return rxCarrierSenseFlag ;
  /* USER CODE BEGIN RxCarrierSenseGetStatus_2 */

  /* USER CODE END RxCarrierSenseGetStatus_2 */
}
 800d124:	4b01      	ldr	r3, [pc, #4]	; (800d12c <RxCarrierSenseGetStatus+0x8>)
 800d126:	6818      	ldr	r0, [r3, #0]
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop
 800d12c:	20000c20 	.word	0x20000c20

0800d130 <OnTimerTimeoutCsEvt>:
void OnTimerTimeoutCsEvt(void *context)
{
  /* USER CODE BEGIN OnTimerTimeoutCsEvt_1 */

  /* USER CODE END OnTimerTimeoutCsEvt_1 */
  rxCarrierSenseFlag = 1;
 800d130:	4b01      	ldr	r3, [pc, #4]	; (800d138 <OnTimerTimeoutCsEvt+0x8>)
 800d132:	2201      	movs	r2, #1
 800d134:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN OnTimerTimeoutCsEvt_2 */

  /* USER CODE END OnTimerTimeoutCsEvt_2 */
}
 800d136:	4770      	bx	lr
 800d138:	20000c20 	.word	0x20000c20

0800d13c <E2P_Write>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static void E2P_Write(e_EE_ID addr, uint32_t data)
{
 800d13c:	b508      	push	{r3, lr}
 800d13e:	460a      	mov	r2, r1
  /* USER CODE BEGIN E2P_Write_1 */

  /* USER CODE END E2P_Write_1 */
  if (EE_Write(EE_BANK_0, (uint16_t) addr, data) == EE_CLEAN_NEEDED)
 800d140:	4601      	mov	r1, r0
 800d142:	2000      	movs	r0, #0
 800d144:	f7fe fb54 	bl	800b7f0 <EE_Write>
 800d148:	2802      	cmp	r0, #2
 800d14a:	d000      	beq.n	800d14e <E2P_Write+0x12>
    EE_Clean(EE_BANK_0, EE_CLEAN_MODE_POLLING);
  }
  /* USER CODE BEGIN E2P_Write_2 */

  /* USER CODE END E2P_Write_2 */
}
 800d14c:	bd08      	pop	{r3, pc}
    EE_Clean(EE_BANK_0, EE_CLEAN_MODE_POLLING);
 800d14e:	2100      	movs	r1, #0
 800d150:	4608      	mov	r0, r1
 800d152:	f7fe fb8b 	bl	800b86c <EE_Clean>
}
 800d156:	e7f9      	b.n	800d14c <E2P_Write+0x10>

0800d158 <E2P_Read>:

static void E2P_Read(e_EE_ID addr, uint32_t *data)
{
 800d158:	b508      	push	{r3, lr}
 800d15a:	460a      	mov	r2, r1
  /* USER CODE BEGIN E2P_Read_1 */

  /* USER CODE END E2P_Read_1 */
  EE_Read(EE_BANK_0, (uint16_t) addr, data);
 800d15c:	4601      	mov	r1, r0
 800d15e:	2000      	movs	r0, #0
 800d160:	f7fe fb3e 	bl	800b7e0 <EE_Read>
  /* USER CODE BEGIN E2P_Read_2 */

  /* USER CODE END E2P_Read_2 */
}
 800d164:	bd08      	pop	{r3, pc}

0800d166 <E2P_RestoreFs>:
{
 800d166:	b508      	push	{r3, lr}
  HAL_FLASH_Unlock();
 800d168:	f002 f91c 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_Write(EE_RSSI_CAL_ID, 0);
 800d16c:	2100      	movs	r1, #0
 800d16e:	200a      	movs	r0, #10
 800d170:	f7ff ffe4 	bl	800d13c <E2P_Write>
  E2P_Write(EE_AT_ECHO_ID, 1);   /* AtEcho  =  Set */
 800d174:	2101      	movs	r1, #1
 800d176:	200b      	movs	r0, #11
 800d178:	f7ff ffe0 	bl	800d13c <E2P_Write>
  E2P_Write(EE_TX_POWER_RC1_ID, 15);
 800d17c:	210f      	movs	r1, #15
 800d17e:	200c      	movs	r0, #12
 800d180:	f7ff ffdc 	bl	800d13c <E2P_Write>
  E2P_Write(EE_TX_POWER_RC2_ID, 22);
 800d184:	2116      	movs	r1, #22
 800d186:	200d      	movs	r0, #13
 800d188:	f7ff ffd8 	bl	800d13c <E2P_Write>
  E2P_Write(EE_TX_POWER_RC3A_ID, 15);
 800d18c:	210f      	movs	r1, #15
 800d18e:	200e      	movs	r0, #14
 800d190:	f7ff ffd4 	bl	800d13c <E2P_Write>
  E2P_Write(EE_TX_POWER_RC3C_ID, 15);
 800d194:	210f      	movs	r1, #15
 800d196:	4608      	mov	r0, r1
 800d198:	f7ff ffd0 	bl	800d13c <E2P_Write>
  E2P_Write(EE_TX_POWER_RC4_ID, 22);
 800d19c:	2116      	movs	r1, #22
 800d19e:	2010      	movs	r0, #16
 800d1a0:	f7ff ffcc 	bl	800d13c <E2P_Write>
  E2P_Write(EE_TX_POWER_RC5_ID, 15);
 800d1a4:	210f      	movs	r1, #15
 800d1a6:	2011      	movs	r0, #17
 800d1a8:	f7ff ffc8 	bl	800d13c <E2P_Write>
  E2P_Write(EE_TX_POWER_RC6_ID, 15);
 800d1ac:	210f      	movs	r1, #15
 800d1ae:	2012      	movs	r0, #18
 800d1b0:	f7ff ffc4 	bl	800d13c <E2P_Write>
  E2P_Write(EE_TX_POWER_RC7_ID, 15);
 800d1b4:	210f      	movs	r1, #15
 800d1b6:	2013      	movs	r0, #19
 800d1b8:	f7ff ffc0 	bl	800d13c <E2P_Write>
  E2P_Write(EE_SGFX_RC_ID, SFX_RC1);    /* Default RC at device birth*/
 800d1bc:	2100      	movs	r1, #0
 800d1be:	2014      	movs	r0, #20
 800d1c0:	f7ff ffbc 	bl	800d13c <E2P_Write>
  E2P_Write(EE_SGFX_KEYTYPE_ID, CREDENTIALS_KEY_PRIVATE);
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	2015      	movs	r0, #21
 800d1c8:	f7ff ffb8 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MACROCH_CONFIG_WORD0_RC2_ID, RC2_SET_STD_CONFIG_SM_WORD_0);
 800d1cc:	2101      	movs	r1, #1
 800d1ce:	2016      	movs	r0, #22
 800d1d0:	f7ff ffb4 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MACROCH_CONFIG_WORD1_RC2_ID, RC2_SET_STD_CONFIG_SM_WORD_1);
 800d1d4:	2100      	movs	r1, #0
 800d1d6:	2017      	movs	r0, #23
 800d1d8:	f7ff ffb0 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MACROCH_CONFIG_WORD2_RC2_ID, RC2_SET_STD_CONFIG_SM_WORD_2);
 800d1dc:	2100      	movs	r1, #0
 800d1de:	2018      	movs	r0, #24
 800d1e0:	f7ff ffac 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MACROCH_CONFIG_WORD0_RC3A_ID, rc3a_config[0]);
 800d1e4:	2103      	movs	r1, #3
 800d1e6:	2019      	movs	r0, #25
 800d1e8:	f7ff ffa8 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MACROCH_CONFIG_WORD1_RC3A_ID, rc3a_config[1]);
 800d1ec:	f241 3188 	movw	r1, #5000	; 0x1388
 800d1f0:	201a      	movs	r0, #26
 800d1f2:	f7ff ffa3 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MACROCH_CONFIG_WORD2_RC3A_ID, rc3a_config[2]);
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	201b      	movs	r0, #27
 800d1fa:	f7ff ff9f 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MACROCH_CONFIG_WORD0_RC3C_ID, rc3c_config[0]);
 800d1fe:	2103      	movs	r1, #3
 800d200:	201c      	movs	r0, #28
 800d202:	f7ff ff9b 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MACROCH_CONFIG_WORD1_RC3C_ID, rc3c_config[1]);
 800d206:	f241 3188 	movw	r1, #5000	; 0x1388
 800d20a:	201d      	movs	r0, #29
 800d20c:	f7ff ff96 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MACROCH_CONFIG_WORD2_RC3C_ID, rc3c_config[2]);
 800d210:	2100      	movs	r1, #0
 800d212:	201e      	movs	r0, #30
 800d214:	f7ff ff92 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MACROCH_CONFIG_WORD0_RC4_ID, RC4_SET_STD_CONFIG_SM_WORD_0);
 800d218:	2100      	movs	r1, #0
 800d21a:	201f      	movs	r0, #31
 800d21c:	f7ff ff8e 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MACROCH_CONFIG_WORD1_RC4_ID, RC4_SET_STD_CONFIG_SM_WORD_1);
 800d220:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d224:	2020      	movs	r0, #32
 800d226:	f7ff ff89 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MACROCH_CONFIG_WORD2_RC4_ID, RC4_SET_STD_CONFIG_SM_WORD_2);
 800d22a:	2100      	movs	r1, #0
 800d22c:	2021      	movs	r0, #33	; 0x21
 800d22e:	f7ff ff85 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MACROCH_CONFIG_WORD0_RC5_ID, rc5_config[0]);
 800d232:	2103      	movs	r1, #3
 800d234:	2022      	movs	r0, #34	; 0x22
 800d236:	f7ff ff81 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MACROCH_CONFIG_WORD1_RC5_ID, rc5_config[1]);
 800d23a:	f241 3188 	movw	r1, #5000	; 0x1388
 800d23e:	2023      	movs	r0, #35	; 0x23
 800d240:	f7ff ff7c 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MACROCH_CONFIG_WORD2_RC5_ID, rc5_config[2]);
 800d244:	2100      	movs	r1, #0
 800d246:	2024      	movs	r0, #36	; 0x24
 800d248:	f7ff ff78 	bl	800d13c <E2P_Write>
  E2P_Write(EE_SE_NVM_0_ID, 0xFF);
 800d24c:	21ff      	movs	r1, #255	; 0xff
 800d24e:	2001      	movs	r0, #1
 800d250:	f7ff ff74 	bl	800d13c <E2P_Write>
  E2P_Write(EE_SE_NVM_1_ID, 0x0F);
 800d254:	210f      	movs	r1, #15
 800d256:	2002      	movs	r0, #2
 800d258:	f7ff ff70 	bl	800d13c <E2P_Write>
  E2P_Write(EE_SE_NVM_2_ID, 0);
 800d25c:	2100      	movs	r1, #0
 800d25e:	2003      	movs	r0, #3
 800d260:	f7ff ff6c 	bl	800d13c <E2P_Write>
  E2P_Write(EE_SE_NVM_3_ID, 0);
 800d264:	2100      	movs	r1, #0
 800d266:	2004      	movs	r0, #4
 800d268:	f7ff ff68 	bl	800d13c <E2P_Write>
  E2P_Write(EE_SE_NVM_4_ID, 0xFF);
 800d26c:	21ff      	movs	r1, #255	; 0xff
 800d26e:	2005      	movs	r0, #5
 800d270:	f7ff ff64 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MCU_NVM_0_ID, 0);
 800d274:	2100      	movs	r1, #0
 800d276:	2006      	movs	r0, #6
 800d278:	f7ff ff60 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MCU_NVM_1_ID, 0);
 800d27c:	2100      	movs	r1, #0
 800d27e:	2007      	movs	r0, #7
 800d280:	f7ff ff5c 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MCU_NVM_2_ID, 0);
 800d284:	2100      	movs	r1, #0
 800d286:	2008      	movs	r0, #8
 800d288:	f7ff ff58 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MCU_NVM_3_ID, 0);
 800d28c:	2100      	movs	r1, #0
 800d28e:	2009      	movs	r0, #9
 800d290:	f7ff ff54 	bl	800d13c <E2P_Write>
  E2P_Write(EE_SGFX_ENCRYPTIONFLAG_ID, 0);
 800d294:	2100      	movs	r1, #0
 800d296:	2025      	movs	r0, #37	; 0x25
 800d298:	f7ff ff50 	bl	800d13c <E2P_Write>
  E2P_Write(EE_SGFX_VERBOSELEVEL_ID, VERBOSE_LEVEL);
 800d29c:	2102      	movs	r1, #2
 800d29e:	2026      	movs	r0, #38	; 0x26
 800d2a0:	f7ff ff4c 	bl	800d13c <E2P_Write>
  E2P_Write(EE_SGFX_MODE_ID, 0);                                //	0: Disable		1: enable
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	2027      	movs	r0, #39	; 0x27
 800d2a8:	f7ff ff48 	bl	800d13c <E2P_Write>
  E2P_Write(EE_FW_MODE_ID, 0);                                //	0: Disable		1: enable
 800d2ac:	2100      	movs	r1, #0
 800d2ae:	2028      	movs	r0, #40	; 0x28
 800d2b0:	f7ff ff44 	bl	800d13c <E2P_Write>
  HAL_FLASH_Lock();
 800d2b4:	f002 f88e 	bl	800f3d4 <HAL_FLASH_Lock>
}
 800d2b8:	bd08      	pop	{r3, pc}
	...

0800d2bc <E2P_Init>:
{
 800d2bc:	b508      	push	{r3, lr}
  HAL_FLASH_Unlock();
 800d2be:	f002 f871 	bl	800f3a4 <HAL_FLASH_Unlock>
  if (EE_Init(NO_FORMAT, EE_BASE_ADRESS) != EE_OK)
 800d2c2:	4909      	ldr	r1, [pc, #36]	; (800d2e8 <E2P_Init+0x2c>)
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	f7fe fa6b 	bl	800b7a0 <EE_Init>
 800d2ca:	b910      	cbnz	r0, 800d2d2 <E2P_Init+0x16>
  HAL_FLASH_Lock();
 800d2cc:	f002 f882 	bl	800f3d4 <HAL_FLASH_Lock>
}
 800d2d0:	bd08      	pop	{r3, pc}
    if (EE_Init(FORMAT, EE_BASE_ADRESS) == EE_OK)
 800d2d2:	4905      	ldr	r1, [pc, #20]	; (800d2e8 <E2P_Init+0x2c>)
 800d2d4:	2001      	movs	r0, #1
 800d2d6:	f7fe fa63 	bl	800b7a0 <EE_Init>
 800d2da:	b910      	cbnz	r0, 800d2e2 <E2P_Init+0x26>
      E2P_RestoreFs();
 800d2dc:	f7ff ff43 	bl	800d166 <E2P_RestoreFs>
 800d2e0:	e7f4      	b.n	800d2cc <E2P_Init+0x10>
      Error_Handler();
 800d2e2:	f7f9 fc93 	bl	8006c0c <Error_Handler>
 800d2e6:	e7f1      	b.n	800d2cc <E2P_Init+0x10>
 800d2e8:	0803c000 	.word	0x0803c000

0800d2ec <E2P_Read_Power>:
{
 800d2ec:	b500      	push	{lr}
 800d2ee:	b083      	sub	sp, #12
  uint32_t power = 0;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	9301      	str	r3, [sp, #4]
  switch (SgfxRc)
 800d2f4:	2807      	cmp	r0, #7
 800d2f6:	d809      	bhi.n	800d30c <E2P_Read_Power+0x20>
 800d2f8:	e8df f000 	tbb	[pc, r0]
 800d2fc:	17120d04 	.word	0x17120d04
 800d300:	2b26211c 	.word	0x2b26211c
      E2P_Read(EE_TX_POWER_RC1_ID, &power);
 800d304:	a901      	add	r1, sp, #4
 800d306:	200c      	movs	r0, #12
 800d308:	f7ff ff26 	bl	800d158 <E2P_Read>
}
 800d30c:	f99d 0004 	ldrsb.w	r0, [sp, #4]
 800d310:	b003      	add	sp, #12
 800d312:	f85d fb04 	ldr.w	pc, [sp], #4
      E2P_Read(EE_TX_POWER_RC2_ID, &power);
 800d316:	a901      	add	r1, sp, #4
 800d318:	200d      	movs	r0, #13
 800d31a:	f7ff ff1d 	bl	800d158 <E2P_Read>
      break;
 800d31e:	e7f5      	b.n	800d30c <E2P_Read_Power+0x20>
      E2P_Read(EE_TX_POWER_RC3A_ID, &power);
 800d320:	a901      	add	r1, sp, #4
 800d322:	200e      	movs	r0, #14
 800d324:	f7ff ff18 	bl	800d158 <E2P_Read>
      break;
 800d328:	e7f0      	b.n	800d30c <E2P_Read_Power+0x20>
      E2P_Read(EE_TX_POWER_RC3C_ID, &power);
 800d32a:	a901      	add	r1, sp, #4
 800d32c:	200f      	movs	r0, #15
 800d32e:	f7ff ff13 	bl	800d158 <E2P_Read>
      break;
 800d332:	e7eb      	b.n	800d30c <E2P_Read_Power+0x20>
      E2P_Read(EE_TX_POWER_RC4_ID, &power);
 800d334:	a901      	add	r1, sp, #4
 800d336:	2010      	movs	r0, #16
 800d338:	f7ff ff0e 	bl	800d158 <E2P_Read>
      break;
 800d33c:	e7e6      	b.n	800d30c <E2P_Read_Power+0x20>
      E2P_Read(EE_TX_POWER_RC5_ID, &power);
 800d33e:	a901      	add	r1, sp, #4
 800d340:	2011      	movs	r0, #17
 800d342:	f7ff ff09 	bl	800d158 <E2P_Read>
      break;
 800d346:	e7e1      	b.n	800d30c <E2P_Read_Power+0x20>
      E2P_Read(EE_TX_POWER_RC6_ID, &power);
 800d348:	a901      	add	r1, sp, #4
 800d34a:	2012      	movs	r0, #18
 800d34c:	f7ff ff04 	bl	800d158 <E2P_Read>
      break;
 800d350:	e7dc      	b.n	800d30c <E2P_Read_Power+0x20>
      E2P_Read(EE_TX_POWER_RC7_ID, &power);
 800d352:	a901      	add	r1, sp, #4
 800d354:	2013      	movs	r0, #19
 800d356:	f7ff feff 	bl	800d158 <E2P_Read>
      break;
 800d35a:	e7d7      	b.n	800d30c <E2P_Read_Power+0x20>

0800d35c <E2P_Write_Power>:
{
 800d35c:	b538      	push	{r3, r4, r5, lr}
 800d35e:	4604      	mov	r4, r0
 800d360:	460d      	mov	r5, r1
  HAL_FLASH_Unlock();
 800d362:	f002 f81f 	bl	800f3a4 <HAL_FLASH_Unlock>
  switch (SgfxRc)
 800d366:	2c07      	cmp	r4, #7
 800d368:	d809      	bhi.n	800d37e <E2P_Write_Power+0x22>
 800d36a:	e8df f004 	tbb	[pc, r4]
 800d36e:	0b04      	.short	0x0b04
 800d370:	1f1a1510 	.word	0x1f1a1510
 800d374:	2924      	.short	0x2924
      E2P_Write(EE_TX_POWER_RC1_ID, (uint32_t) power);
 800d376:	4629      	mov	r1, r5
 800d378:	200c      	movs	r0, #12
 800d37a:	f7ff fedf 	bl	800d13c <E2P_Write>
  HAL_FLASH_Lock();
 800d37e:	f002 f829 	bl	800f3d4 <HAL_FLASH_Lock>
}
 800d382:	bd38      	pop	{r3, r4, r5, pc}
      E2P_Write(EE_TX_POWER_RC2_ID, (uint32_t) power);
 800d384:	4629      	mov	r1, r5
 800d386:	200d      	movs	r0, #13
 800d388:	f7ff fed8 	bl	800d13c <E2P_Write>
      break;
 800d38c:	e7f7      	b.n	800d37e <E2P_Write_Power+0x22>
      E2P_Write(EE_TX_POWER_RC3A_ID, (uint32_t) power);
 800d38e:	4629      	mov	r1, r5
 800d390:	200e      	movs	r0, #14
 800d392:	f7ff fed3 	bl	800d13c <E2P_Write>
      break;
 800d396:	e7f2      	b.n	800d37e <E2P_Write_Power+0x22>
      E2P_Write(EE_TX_POWER_RC3C_ID, (uint32_t) power);
 800d398:	4629      	mov	r1, r5
 800d39a:	200f      	movs	r0, #15
 800d39c:	f7ff fece 	bl	800d13c <E2P_Write>
      break;
 800d3a0:	e7ed      	b.n	800d37e <E2P_Write_Power+0x22>
      E2P_Write(EE_TX_POWER_RC4_ID, (uint32_t) power);
 800d3a2:	4629      	mov	r1, r5
 800d3a4:	2010      	movs	r0, #16
 800d3a6:	f7ff fec9 	bl	800d13c <E2P_Write>
      break;
 800d3aa:	e7e8      	b.n	800d37e <E2P_Write_Power+0x22>
      E2P_Write(EE_TX_POWER_RC5_ID, (uint32_t) power);
 800d3ac:	4629      	mov	r1, r5
 800d3ae:	2011      	movs	r0, #17
 800d3b0:	f7ff fec4 	bl	800d13c <E2P_Write>
      break;
 800d3b4:	e7e3      	b.n	800d37e <E2P_Write_Power+0x22>
      E2P_Write(EE_TX_POWER_RC6_ID, (uint32_t) power);
 800d3b6:	4629      	mov	r1, r5
 800d3b8:	2012      	movs	r0, #18
 800d3ba:	f7ff febf 	bl	800d13c <E2P_Write>
      break;
 800d3be:	e7de      	b.n	800d37e <E2P_Write_Power+0x22>
      E2P_Write(EE_TX_POWER_RC7_ID, (uint32_t) power);
 800d3c0:	4629      	mov	r1, r5
 800d3c2:	2013      	movs	r0, #19
 800d3c4:	f7ff feba 	bl	800d13c <E2P_Write>
      break;
 800d3c8:	e7d9      	b.n	800d37e <E2P_Write_Power+0x22>

0800d3ca <E2P_Read_Mode>:
{
 800d3ca:	b500      	push	{lr}
 800d3cc:	b083      	sub	sp, #12
  uint32_t SgfxMode = 0;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	9301      	str	r3, [sp, #4]
  E2P_Read(EE_SGFX_MODE_ID, &SgfxMode);
 800d3d2:	a901      	add	r1, sp, #4
 800d3d4:	2027      	movs	r0, #39	; 0x27
 800d3d6:	f7ff febf 	bl	800d158 <E2P_Read>
}
 800d3da:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800d3de:	b003      	add	sp, #12
 800d3e0:	f85d fb04 	ldr.w	pc, [sp], #4

0800d3e4 <E2P_Write_Mode>:
{
 800d3e4:	b510      	push	{r4, lr}
 800d3e6:	4604      	mov	r4, r0
  HAL_FLASH_Unlock();
 800d3e8:	f001 ffdc 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_Write(EE_SGFX_MODE_ID, (uint32_t) SgfxMode);
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	2027      	movs	r0, #39	; 0x27
 800d3f0:	f7ff fea4 	bl	800d13c <E2P_Write>
  HAL_FLASH_Lock();
 800d3f4:	f001 ffee 	bl	800f3d4 <HAL_FLASH_Lock>
}
 800d3f8:	bd10      	pop	{r4, pc}

0800d3fa <E2P_FW_Write_Mode>:
{
 800d3fa:	b510      	push	{r4, lr}
 800d3fc:	4604      	mov	r4, r0
  HAL_FLASH_Unlock();
 800d3fe:	f001 ffd1 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_Write(EE_FW_MODE_ID, (uint32_t) SgfxMode);
 800d402:	4621      	mov	r1, r4
 800d404:	2028      	movs	r0, #40	; 0x28
 800d406:	f7ff fe99 	bl	800d13c <E2P_Write>
  HAL_FLASH_Lock();
 800d40a:	f001 ffe3 	bl	800f3d4 <HAL_FLASH_Lock>
}
 800d40e:	bd10      	pop	{r4, pc}

0800d410 <E2P_Read_Rc>:
{
 800d410:	b500      	push	{lr}
 800d412:	b083      	sub	sp, #12
  uint32_t SgfxRc = 0;
 800d414:	2300      	movs	r3, #0
 800d416:	9301      	str	r3, [sp, #4]
  E2P_Read(EE_SGFX_RC_ID, &SgfxRc);
 800d418:	a901      	add	r1, sp, #4
 800d41a:	2014      	movs	r0, #20
 800d41c:	f7ff fe9c 	bl	800d158 <E2P_Read>
}
 800d420:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800d424:	b003      	add	sp, #12
 800d426:	f85d fb04 	ldr.w	pc, [sp], #4

0800d42a <E2P_Write_Rc>:
{
 800d42a:	b510      	push	{r4, lr}
 800d42c:	4604      	mov	r4, r0
  HAL_FLASH_Unlock();
 800d42e:	f001 ffb9 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_Write(EE_SGFX_RC_ID, (uint32_t) SgfxRc);
 800d432:	4621      	mov	r1, r4
 800d434:	2014      	movs	r0, #20
 800d436:	f7ff fe81 	bl	800d13c <E2P_Write>
  HAL_FLASH_Lock();
 800d43a:	f001 ffcb 	bl	800f3d4 <HAL_FLASH_Lock>
}
 800d43e:	bd10      	pop	{r4, pc}

0800d440 <E2P_Read_RssiCal>:
{
 800d440:	b500      	push	{lr}
 800d442:	b083      	sub	sp, #12
  uint32_t rssi_cal = 0;
 800d444:	2300      	movs	r3, #0
 800d446:	9301      	str	r3, [sp, #4]
  E2P_Read(EE_RSSI_CAL_ID, &rssi_cal);
 800d448:	a901      	add	r1, sp, #4
 800d44a:	200a      	movs	r0, #10
 800d44c:	f7ff fe84 	bl	800d158 <E2P_Read>
}
 800d450:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800d454:	b003      	add	sp, #12
 800d456:	f85d fb04 	ldr.w	pc, [sp], #4

0800d45a <E2P_Write_RssiCal>:
{
 800d45a:	b510      	push	{r4, lr}
 800d45c:	4604      	mov	r4, r0
  HAL_FLASH_Unlock();
 800d45e:	f001 ffa1 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_Write(EE_RSSI_CAL_ID, (uint32_t) rssi_cal);
 800d462:	4621      	mov	r1, r4
 800d464:	200a      	movs	r0, #10
 800d466:	f7ff fe69 	bl	800d13c <E2P_Write>
  HAL_FLASH_Lock();
 800d46a:	f001 ffb3 	bl	800f3d4 <HAL_FLASH_Lock>
}
 800d46e:	bd10      	pop	{r4, pc}

0800d470 <E2P_Read_AtEcho>:
{
 800d470:	b500      	push	{lr}
 800d472:	b083      	sub	sp, #12
  uint32_t at_echo = 0;
 800d474:	2300      	movs	r3, #0
 800d476:	9301      	str	r3, [sp, #4]
  E2P_Read(EE_AT_ECHO_ID, &at_echo);
 800d478:	a901      	add	r1, sp, #4
 800d47a:	200b      	movs	r0, #11
 800d47c:	f7ff fe6c 	bl	800d158 <E2P_Read>
}
 800d480:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800d484:	b003      	add	sp, #12
 800d486:	f85d fb04 	ldr.w	pc, [sp], #4

0800d48a <E2P_Write_AtEcho>:
{
 800d48a:	b510      	push	{r4, lr}
 800d48c:	4604      	mov	r4, r0
  HAL_FLASH_Unlock();
 800d48e:	f001 ff89 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_Write(EE_AT_ECHO_ID, (uint32_t) at_echo);
 800d492:	4621      	mov	r1, r4
 800d494:	200b      	movs	r0, #11
 800d496:	f7ff fe51 	bl	800d13c <E2P_Write>
  HAL_FLASH_Lock();
 800d49a:	f001 ff9b 	bl	800f3d4 <HAL_FLASH_Lock>
}
 800d49e:	bd10      	pop	{r4, pc}

0800d4a0 <E2P_Read_KeyType>:
{
 800d4a0:	b500      	push	{lr}
 800d4a2:	b083      	sub	sp, #12
  uint32_t data_from_eeprom = 0;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	9301      	str	r3, [sp, #4]
  E2P_Read(EE_SGFX_KEYTYPE_ID, &data_from_eeprom);
 800d4a8:	a901      	add	r1, sp, #4
 800d4aa:	2015      	movs	r0, #21
 800d4ac:	f7ff fe54 	bl	800d158 <E2P_Read>
}
 800d4b0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800d4b4:	b003      	add	sp, #12
 800d4b6:	f85d fb04 	ldr.w	pc, [sp], #4

0800d4ba <E2P_Write_KeyType>:
{
 800d4ba:	b510      	push	{r4, lr}
 800d4bc:	4604      	mov	r4, r0
  HAL_FLASH_Unlock();
 800d4be:	f001 ff71 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_Write(EE_SGFX_KEYTYPE_ID, (uint32_t) key_type);
 800d4c2:	4621      	mov	r1, r4
 800d4c4:	2015      	movs	r0, #21
 800d4c6:	f7ff fe39 	bl	800d13c <E2P_Write>
  HAL_FLASH_Lock();
 800d4ca:	f001 ff83 	bl	800f3d4 <HAL_FLASH_Lock>
}
 800d4ce:	bd10      	pop	{r4, pc}

0800d4d0 <E2P_Read_EncryptionFlag>:
{
 800d4d0:	b500      	push	{lr}
 800d4d2:	b083      	sub	sp, #12
  uint32_t data_from_eeprom = 0;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	9301      	str	r3, [sp, #4]
  E2P_Read(EE_SGFX_ENCRYPTIONFLAG_ID, &data_from_eeprom);
 800d4d8:	a901      	add	r1, sp, #4
 800d4da:	2025      	movs	r0, #37	; 0x25
 800d4dc:	f7ff fe3c 	bl	800d158 <E2P_Read>
}
 800d4e0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800d4e4:	b003      	add	sp, #12
 800d4e6:	f85d fb04 	ldr.w	pc, [sp], #4

0800d4ea <E2P_Write_EncryptionFlag>:
{
 800d4ea:	b510      	push	{r4, lr}
 800d4ec:	4604      	mov	r4, r0
  HAL_FLASH_Unlock();
 800d4ee:	f001 ff59 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_Write(EE_SGFX_ENCRYPTIONFLAG_ID, (uint32_t) encryption_flag);
 800d4f2:	4621      	mov	r1, r4
 800d4f4:	2025      	movs	r0, #37	; 0x25
 800d4f6:	f7ff fe21 	bl	800d13c <E2P_Write>
  HAL_FLASH_Lock();
 800d4fa:	f001 ff6b 	bl	800f3d4 <HAL_FLASH_Lock>
}
 800d4fe:	bd10      	pop	{r4, pc}

0800d500 <E2P_Read_VerboseLevel>:
{
 800d500:	b500      	push	{lr}
 800d502:	b083      	sub	sp, #12
  uint32_t data_from_eeprom = 0;
 800d504:	2300      	movs	r3, #0
 800d506:	9301      	str	r3, [sp, #4]
  E2P_Read(EE_SGFX_VERBOSELEVEL_ID, &data_from_eeprom);
 800d508:	a901      	add	r1, sp, #4
 800d50a:	2026      	movs	r0, #38	; 0x26
 800d50c:	f7ff fe24 	bl	800d158 <E2P_Read>
}
 800d510:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800d514:	b003      	add	sp, #12
 800d516:	f85d fb04 	ldr.w	pc, [sp], #4

0800d51a <E2P_Write_VerboseLevel>:
{
 800d51a:	b510      	push	{r4, lr}
 800d51c:	4604      	mov	r4, r0
  HAL_FLASH_Unlock();
 800d51e:	f001 ff41 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_Write(EE_SGFX_VERBOSELEVEL_ID, (uint32_t) verboselevel);
 800d522:	4621      	mov	r1, r4
 800d524:	2026      	movs	r0, #38	; 0x26
 800d526:	f7ff fe09 	bl	800d13c <E2P_Write>
  HAL_FLASH_Lock();
 800d52a:	f001 ff53 	bl	800f3d4 <HAL_FLASH_Lock>
}
 800d52e:	bd10      	pop	{r4, pc}

0800d530 <E2P_Read_ConfigWords>:
{
 800d530:	b510      	push	{r4, lr}
 800d532:	460c      	mov	r4, r1
  switch (sfx_rc)
 800d534:	3801      	subs	r0, #1
 800d536:	2804      	cmp	r0, #4
 800d538:	d810      	bhi.n	800d55c <E2P_Read_ConfigWords+0x2c>
 800d53a:	e8df f000 	tbb	[pc, r0]
 800d53e:	1003      	.short	0x1003
 800d540:	2a1d      	.short	0x2a1d
 800d542:	37          	.byte	0x37
 800d543:	00          	.byte	0x00
      E2P_Read(EE_MACROCH_CONFIG_WORD0_RC2_ID, (uint32_t *) &config_words[0]);
 800d544:	2016      	movs	r0, #22
 800d546:	f7ff fe07 	bl	800d158 <E2P_Read>
      E2P_Read(EE_MACROCH_CONFIG_WORD1_RC2_ID, (uint32_t *) &config_words[1]);
 800d54a:	1d21      	adds	r1, r4, #4
 800d54c:	2017      	movs	r0, #23
 800d54e:	f7ff fe03 	bl	800d158 <E2P_Read>
      E2P_Read(EE_MACROCH_CONFIG_WORD2_RC2_ID, (uint32_t *) &config_words[2]);
 800d552:	f104 0108 	add.w	r1, r4, #8
 800d556:	2018      	movs	r0, #24
 800d558:	f7ff fdfe 	bl	800d158 <E2P_Read>
}
 800d55c:	bd10      	pop	{r4, pc}
      E2P_Read(EE_MACROCH_CONFIG_WORD0_RC3A_ID, (uint32_t *) &config_words[0]);
 800d55e:	2019      	movs	r0, #25
 800d560:	f7ff fdfa 	bl	800d158 <E2P_Read>
      E2P_Read(EE_MACROCH_CONFIG_WORD1_RC3A_ID, (uint32_t *) &config_words[1]);
 800d564:	1d21      	adds	r1, r4, #4
 800d566:	201a      	movs	r0, #26
 800d568:	f7ff fdf6 	bl	800d158 <E2P_Read>
      E2P_Read(EE_MACROCH_CONFIG_WORD2_RC3A_ID, (uint32_t *) &config_words[2]);
 800d56c:	f104 0108 	add.w	r1, r4, #8
 800d570:	201b      	movs	r0, #27
 800d572:	f7ff fdf1 	bl	800d158 <E2P_Read>
      break;
 800d576:	e7f1      	b.n	800d55c <E2P_Read_ConfigWords+0x2c>
      E2P_Read(EE_MACROCH_CONFIG_WORD0_RC3C_ID, (uint32_t *) &config_words[0]);
 800d578:	201c      	movs	r0, #28
 800d57a:	f7ff fded 	bl	800d158 <E2P_Read>
      E2P_Read(EE_MACROCH_CONFIG_WORD1_RC3C_ID, (uint32_t *) &config_words[1]);
 800d57e:	1d21      	adds	r1, r4, #4
 800d580:	201d      	movs	r0, #29
 800d582:	f7ff fde9 	bl	800d158 <E2P_Read>
      E2P_Read(EE_MACROCH_CONFIG_WORD2_RC3C_ID, (uint32_t *) &config_words[2]);
 800d586:	f104 0108 	add.w	r1, r4, #8
 800d58a:	201e      	movs	r0, #30
 800d58c:	f7ff fde4 	bl	800d158 <E2P_Read>
      break;
 800d590:	e7e4      	b.n	800d55c <E2P_Read_ConfigWords+0x2c>
      E2P_Read(EE_MACROCH_CONFIG_WORD0_RC4_ID, (uint32_t *) &config_words[0]);
 800d592:	201f      	movs	r0, #31
 800d594:	f7ff fde0 	bl	800d158 <E2P_Read>
      E2P_Read(EE_MACROCH_CONFIG_WORD1_RC4_ID, (uint32_t *) &config_words[1]);
 800d598:	1d21      	adds	r1, r4, #4
 800d59a:	2020      	movs	r0, #32
 800d59c:	f7ff fddc 	bl	800d158 <E2P_Read>
      E2P_Read(EE_MACROCH_CONFIG_WORD2_RC4_ID, (uint32_t *) &config_words[2]);
 800d5a0:	f104 0108 	add.w	r1, r4, #8
 800d5a4:	2021      	movs	r0, #33	; 0x21
 800d5a6:	f7ff fdd7 	bl	800d158 <E2P_Read>
      break;
 800d5aa:	e7d7      	b.n	800d55c <E2P_Read_ConfigWords+0x2c>
      E2P_Read(EE_MACROCH_CONFIG_WORD0_RC5_ID, (uint32_t *) &config_words[0]);
 800d5ac:	2022      	movs	r0, #34	; 0x22
 800d5ae:	f7ff fdd3 	bl	800d158 <E2P_Read>
      E2P_Read(EE_MACROCH_CONFIG_WORD1_RC5_ID, (uint32_t *) &config_words[1]);
 800d5b2:	1d21      	adds	r1, r4, #4
 800d5b4:	2023      	movs	r0, #35	; 0x23
 800d5b6:	f7ff fdcf 	bl	800d158 <E2P_Read>
      E2P_Read(EE_MACROCH_CONFIG_WORD2_RC5_ID, (uint32_t *) &config_words[2]);
 800d5ba:	f104 0108 	add.w	r1, r4, #8
 800d5be:	2024      	movs	r0, #36	; 0x24
 800d5c0:	f7ff fdca 	bl	800d158 <E2P_Read>
}
 800d5c4:	e7ca      	b.n	800d55c <E2P_Read_ConfigWords+0x2c>

0800d5c6 <E2P_Write_ConfigWords>:
{
 800d5c6:	b538      	push	{r3, r4, r5, lr}
 800d5c8:	4604      	mov	r4, r0
 800d5ca:	460d      	mov	r5, r1
  HAL_FLASH_Unlock();
 800d5cc:	f001 feea 	bl	800f3a4 <HAL_FLASH_Unlock>
  switch (sfx_rc)
 800d5d0:	1e60      	subs	r0, r4, #1
 800d5d2:	2804      	cmp	r0, #4
 800d5d4:	d810      	bhi.n	800d5f8 <E2P_Write_ConfigWords+0x32>
 800d5d6:	e8df f000 	tbb	[pc, r0]
 800d5da:	1203      	.short	0x1203
 800d5dc:	2c1f      	.short	0x2c1f
 800d5de:	39          	.byte	0x39
 800d5df:	00          	.byte	0x00
      E2P_Write(EE_MACROCH_CONFIG_WORD0_RC2_ID, config_words[0]);
 800d5e0:	6829      	ldr	r1, [r5, #0]
 800d5e2:	2016      	movs	r0, #22
 800d5e4:	f7ff fdaa 	bl	800d13c <E2P_Write>
      E2P_Write(EE_MACROCH_CONFIG_WORD1_RC2_ID, config_words[1]);
 800d5e8:	6869      	ldr	r1, [r5, #4]
 800d5ea:	2017      	movs	r0, #23
 800d5ec:	f7ff fda6 	bl	800d13c <E2P_Write>
      E2P_Write(EE_MACROCH_CONFIG_WORD2_RC2_ID, config_words[2]);
 800d5f0:	68a9      	ldr	r1, [r5, #8]
 800d5f2:	2018      	movs	r0, #24
 800d5f4:	f7ff fda2 	bl	800d13c <E2P_Write>
  HAL_FLASH_Lock();
 800d5f8:	f001 feec 	bl	800f3d4 <HAL_FLASH_Lock>
}
 800d5fc:	bd38      	pop	{r3, r4, r5, pc}
      E2P_Write(EE_MACROCH_CONFIG_WORD0_RC3A_ID, config_words[0]);
 800d5fe:	6829      	ldr	r1, [r5, #0]
 800d600:	2019      	movs	r0, #25
 800d602:	f7ff fd9b 	bl	800d13c <E2P_Write>
      E2P_Write(EE_MACROCH_CONFIG_WORD1_RC3A_ID, config_words[1]);
 800d606:	6869      	ldr	r1, [r5, #4]
 800d608:	201a      	movs	r0, #26
 800d60a:	f7ff fd97 	bl	800d13c <E2P_Write>
      E2P_Write(EE_MACROCH_CONFIG_WORD2_RC3A_ID, config_words[2]);
 800d60e:	68a9      	ldr	r1, [r5, #8]
 800d610:	201b      	movs	r0, #27
 800d612:	f7ff fd93 	bl	800d13c <E2P_Write>
      break;
 800d616:	e7ef      	b.n	800d5f8 <E2P_Write_ConfigWords+0x32>
      E2P_Write(EE_MACROCH_CONFIG_WORD0_RC3C_ID, config_words[0]);
 800d618:	6829      	ldr	r1, [r5, #0]
 800d61a:	201c      	movs	r0, #28
 800d61c:	f7ff fd8e 	bl	800d13c <E2P_Write>
      E2P_Write(EE_MACROCH_CONFIG_WORD1_RC3C_ID, config_words[1]);
 800d620:	6869      	ldr	r1, [r5, #4]
 800d622:	201d      	movs	r0, #29
 800d624:	f7ff fd8a 	bl	800d13c <E2P_Write>
      E2P_Write(EE_MACROCH_CONFIG_WORD2_RC3C_ID, config_words[2]);
 800d628:	68a9      	ldr	r1, [r5, #8]
 800d62a:	201e      	movs	r0, #30
 800d62c:	f7ff fd86 	bl	800d13c <E2P_Write>
      break;
 800d630:	e7e2      	b.n	800d5f8 <E2P_Write_ConfigWords+0x32>
      E2P_Write(EE_MACROCH_CONFIG_WORD0_RC4_ID, config_words[0]);
 800d632:	6829      	ldr	r1, [r5, #0]
 800d634:	201f      	movs	r0, #31
 800d636:	f7ff fd81 	bl	800d13c <E2P_Write>
      E2P_Write(EE_MACROCH_CONFIG_WORD1_RC4_ID, config_words[1]);
 800d63a:	6869      	ldr	r1, [r5, #4]
 800d63c:	2020      	movs	r0, #32
 800d63e:	f7ff fd7d 	bl	800d13c <E2P_Write>
      E2P_Write(EE_MACROCH_CONFIG_WORD2_RC4_ID, config_words[2]);
 800d642:	68a9      	ldr	r1, [r5, #8]
 800d644:	2021      	movs	r0, #33	; 0x21
 800d646:	f7ff fd79 	bl	800d13c <E2P_Write>
      break;
 800d64a:	e7d5      	b.n	800d5f8 <E2P_Write_ConfigWords+0x32>
      E2P_Write(EE_MACROCH_CONFIG_WORD0_RC5_ID, config_words[0]);
 800d64c:	6829      	ldr	r1, [r5, #0]
 800d64e:	2022      	movs	r0, #34	; 0x22
 800d650:	f7ff fd74 	bl	800d13c <E2P_Write>
      E2P_Write(EE_MACROCH_CONFIG_WORD1_RC5_ID, config_words[1]);
 800d654:	6869      	ldr	r1, [r5, #4]
 800d656:	2023      	movs	r0, #35	; 0x23
 800d658:	f7ff fd70 	bl	800d13c <E2P_Write>
      E2P_Write(EE_MACROCH_CONFIG_WORD2_RC5_ID, config_words[2]);
 800d65c:	68a9      	ldr	r1, [r5, #8]
 800d65e:	2024      	movs	r0, #36	; 0x24
 800d660:	f7ff fd6c 	bl	800d13c <E2P_Write>
      break;
 800d664:	e7c8      	b.n	800d5f8 <E2P_Write_ConfigWords+0x32>

0800d666 <E2P_Read_SeNvm>:
{
 800d666:	b530      	push	{r4, r5, lr}
 800d668:	b083      	sub	sp, #12
 800d66a:	4604      	mov	r4, r0
 800d66c:	460d      	mov	r5, r1
  uint32_t data_from_eeprom = 0;
 800d66e:	2300      	movs	r3, #0
 800d670:	9301      	str	r3, [sp, #4]
  E2P_Read(EE_SE_NVM_0_ID, &data_from_eeprom);
 800d672:	a901      	add	r1, sp, #4
 800d674:	2001      	movs	r0, #1
 800d676:	f7ff fd6f 	bl	800d158 <E2P_Read>
  read_data[i++] = (sfx_u8) data_from_eeprom;
 800d67a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d67e:	7023      	strb	r3, [r4, #0]
  E2P_Read(EE_SE_NVM_1_ID, &data_from_eeprom);
 800d680:	a901      	add	r1, sp, #4
 800d682:	2002      	movs	r0, #2
 800d684:	f7ff fd68 	bl	800d158 <E2P_Read>
  read_data[i++] = (sfx_u8) data_from_eeprom;
 800d688:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d68c:	7063      	strb	r3, [r4, #1]
  E2P_Read(EE_SE_NVM_2_ID, &data_from_eeprom);
 800d68e:	a901      	add	r1, sp, #4
 800d690:	2003      	movs	r0, #3
 800d692:	f7ff fd61 	bl	800d158 <E2P_Read>
  read_data[i++] = (sfx_u8) data_from_eeprom;
 800d696:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d69a:	70a3      	strb	r3, [r4, #2]
  E2P_Read(EE_SE_NVM_3_ID, &data_from_eeprom);
 800d69c:	a901      	add	r1, sp, #4
 800d69e:	2004      	movs	r0, #4
 800d6a0:	f7ff fd5a 	bl	800d158 <E2P_Read>
  read_data[i++] = (sfx_u8) data_from_eeprom;
 800d6a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d6a8:	70e3      	strb	r3, [r4, #3]
  E2P_Read(EE_SE_NVM_4_ID, &data_from_eeprom);
 800d6aa:	a901      	add	r1, sp, #4
 800d6ac:	2005      	movs	r0, #5
 800d6ae:	f7ff fd53 	bl	800d158 <E2P_Read>
  read_data[i++] = (sfx_u8) data_from_eeprom;
 800d6b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d6b6:	7123      	strb	r3, [r4, #4]
  if (i != len)
 800d6b8:	2d05      	cmp	r5, #5
 800d6ba:	d002      	beq.n	800d6c2 <E2P_Read_SeNvm+0x5c>
    error =  E2P_KO;
 800d6bc:	2000      	movs	r0, #0
}
 800d6be:	b003      	add	sp, #12
 800d6c0:	bd30      	pop	{r4, r5, pc}
  E2P_ErrorStatus_t error = E2P_OK;
 800d6c2:	2001      	movs	r0, #1
 800d6c4:	e7fb      	b.n	800d6be <E2P_Read_SeNvm+0x58>

0800d6c6 <E2P_Write_SeNvm>:
{
 800d6c6:	b538      	push	{r3, r4, r5, lr}
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	460d      	mov	r5, r1
  HAL_FLASH_Unlock();
 800d6cc:	f001 fe6a 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_Write(EE_SE_NVM_0_ID, (uint32_t) data_to_write[i++]);
 800d6d0:	7821      	ldrb	r1, [r4, #0]
 800d6d2:	2001      	movs	r0, #1
 800d6d4:	f7ff fd32 	bl	800d13c <E2P_Write>
  E2P_Write(EE_SE_NVM_1_ID, (uint32_t) data_to_write[i++]);
 800d6d8:	7861      	ldrb	r1, [r4, #1]
 800d6da:	2002      	movs	r0, #2
 800d6dc:	f7ff fd2e 	bl	800d13c <E2P_Write>
  E2P_Write(EE_SE_NVM_2_ID, (uint32_t) data_to_write[i++]);
 800d6e0:	78a1      	ldrb	r1, [r4, #2]
 800d6e2:	2003      	movs	r0, #3
 800d6e4:	f7ff fd2a 	bl	800d13c <E2P_Write>
  E2P_Write(EE_SE_NVM_3_ID, (uint32_t) data_to_write[i++]);
 800d6e8:	78e1      	ldrb	r1, [r4, #3]
 800d6ea:	2004      	movs	r0, #4
 800d6ec:	f7ff fd26 	bl	800d13c <E2P_Write>
  E2P_Write(EE_SE_NVM_4_ID, (uint32_t) data_to_write[i++]);
 800d6f0:	7921      	ldrb	r1, [r4, #4]
 800d6f2:	2005      	movs	r0, #5
 800d6f4:	f7ff fd22 	bl	800d13c <E2P_Write>
  HAL_FLASH_Lock();
 800d6f8:	f001 fe6c 	bl	800f3d4 <HAL_FLASH_Lock>
  if (i != len)
 800d6fc:	2d05      	cmp	r5, #5
 800d6fe:	d001      	beq.n	800d704 <E2P_Write_SeNvm+0x3e>
    error =  E2P_KO;
 800d700:	2000      	movs	r0, #0
}
 800d702:	bd38      	pop	{r3, r4, r5, pc}
  E2P_ErrorStatus_t error = E2P_OK;
 800d704:	2001      	movs	r0, #1
 800d706:	e7fc      	b.n	800d702 <E2P_Write_SeNvm+0x3c>

0800d708 <E2P_Read_McuNvm>:
{
 800d708:	b530      	push	{r4, r5, lr}
 800d70a:	b083      	sub	sp, #12
 800d70c:	4604      	mov	r4, r0
 800d70e:	460d      	mov	r5, r1
  uint32_t data_from_eeprom = 0;
 800d710:	2300      	movs	r3, #0
 800d712:	9301      	str	r3, [sp, #4]
  E2P_Read(EE_MCU_NVM_0_ID, &data_from_eeprom);
 800d714:	a901      	add	r1, sp, #4
 800d716:	2006      	movs	r0, #6
 800d718:	f7ff fd1e 	bl	800d158 <E2P_Read>
  read_data[i++] = (sfx_u8) data_from_eeprom;
 800d71c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d720:	7023      	strb	r3, [r4, #0]
  E2P_Read(EE_MCU_NVM_1_ID, &data_from_eeprom);
 800d722:	a901      	add	r1, sp, #4
 800d724:	2007      	movs	r0, #7
 800d726:	f7ff fd17 	bl	800d158 <E2P_Read>
  read_data[i++] = (sfx_u8) data_from_eeprom;
 800d72a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d72e:	7063      	strb	r3, [r4, #1]
  E2P_Read(EE_MCU_NVM_2_ID, &data_from_eeprom);
 800d730:	a901      	add	r1, sp, #4
 800d732:	2008      	movs	r0, #8
 800d734:	f7ff fd10 	bl	800d158 <E2P_Read>
  read_data[i++] = (sfx_u8) data_from_eeprom;
 800d738:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d73c:	70a3      	strb	r3, [r4, #2]
  E2P_Read(EE_MCU_NVM_3_ID, &data_from_eeprom);
 800d73e:	a901      	add	r1, sp, #4
 800d740:	2009      	movs	r0, #9
 800d742:	f7ff fd09 	bl	800d158 <E2P_Read>
  read_data[i++] = (sfx_u8) data_from_eeprom;
 800d746:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d74a:	70e3      	strb	r3, [r4, #3]
  if (i != len)
 800d74c:	2d04      	cmp	r5, #4
 800d74e:	d002      	beq.n	800d756 <E2P_Read_McuNvm+0x4e>
    error =  E2P_KO;
 800d750:	2000      	movs	r0, #0
}
 800d752:	b003      	add	sp, #12
 800d754:	bd30      	pop	{r4, r5, pc}
  E2P_ErrorStatus_t error = E2P_OK;
 800d756:	2001      	movs	r0, #1
 800d758:	e7fb      	b.n	800d752 <E2P_Read_McuNvm+0x4a>

0800d75a <E2P_Write_McuNvm>:
{
 800d75a:	b538      	push	{r3, r4, r5, lr}
 800d75c:	4604      	mov	r4, r0
 800d75e:	460d      	mov	r5, r1
  HAL_FLASH_Unlock();
 800d760:	f001 fe20 	bl	800f3a4 <HAL_FLASH_Unlock>
  E2P_Write(EE_MCU_NVM_0_ID, (uint32_t) data_to_write[i++]);
 800d764:	7821      	ldrb	r1, [r4, #0]
 800d766:	2006      	movs	r0, #6
 800d768:	f7ff fce8 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MCU_NVM_1_ID, (uint32_t) data_to_write[i++]);
 800d76c:	7861      	ldrb	r1, [r4, #1]
 800d76e:	2007      	movs	r0, #7
 800d770:	f7ff fce4 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MCU_NVM_2_ID, (uint32_t) data_to_write[i++]);
 800d774:	78a1      	ldrb	r1, [r4, #2]
 800d776:	2008      	movs	r0, #8
 800d778:	f7ff fce0 	bl	800d13c <E2P_Write>
  E2P_Write(EE_MCU_NVM_3_ID, (uint32_t) data_to_write[i++]);
 800d77c:	78e1      	ldrb	r1, [r4, #3]
 800d77e:	2009      	movs	r0, #9
 800d780:	f7ff fcdc 	bl	800d13c <E2P_Write>
  HAL_FLASH_Lock();
 800d784:	f001 fe26 	bl	800f3d4 <HAL_FLASH_Lock>
  if (i != len)
 800d788:	2d04      	cmp	r5, #4
 800d78a:	d001      	beq.n	800d790 <E2P_Write_McuNvm+0x36>
    error =  E2P_KO;
 800d78c:	2000      	movs	r0, #0
}
 800d78e:	bd38      	pop	{r3, r4, r5, pc}
  E2P_ErrorStatus_t error = E2P_OK;
 800d790:	2001      	movs	r0, #1
 800d792:	e7fc      	b.n	800d78e <E2P_Write_McuNvm+0x34>

0800d794 <Delay_Lp>:

  return ret;
}

static void Delay_Lp(uint32_t delay_ms)
{
 800d794:	b530      	push	{r4, r5, lr}
 800d796:	b083      	sub	sp, #12
 800d798:	4604      	mov	r4, r0
  /* USER CODE BEGIN Delay_Lp_1 */

  /* USER CODE END Delay_Lp_1 */
  APP_LOG(TS_ON, VLEVEL_M, "Delay= %d ms\n\r", delay_ms);
 800d79a:	9000      	str	r0, [sp, #0]
 800d79c:	4b14      	ldr	r3, [pc, #80]	; (800d7f0 <Delay_Lp+0x5c>)
 800d79e:	2201      	movs	r2, #1
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	2002      	movs	r0, #2
 800d7a4:	f014 fd3a 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  if (delay_ms > 5)
 800d7a8:	2c05      	cmp	r4, #5
 800d7aa:	d91d      	bls.n	800d7e8 <Delay_Lp+0x54>
  {
    UTIL_TIMER_Create(&Timer_delayMs, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTimerDelayEvt, NULL);
 800d7ac:	4d11      	ldr	r5, [pc, #68]	; (800d7f4 <Delay_Lp+0x60>)
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	9200      	str	r2, [sp, #0]
 800d7b2:	4b11      	ldr	r3, [pc, #68]	; (800d7f8 <Delay_Lp+0x64>)
 800d7b4:	f04f 31ff 	mov.w	r1, #4294967295
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	f015 f93d 	bl	8022a38 <UTIL_TIMER_Create>
    UTIL_TIMER_Stop(&Timer_delayMs);
 800d7be:	4628      	mov	r0, r5
 800d7c0:	f015 f998 	bl	8022af4 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&Timer_delayMs,  delay_ms);
 800d7c4:	4621      	mov	r1, r4
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	f015 fa3c 	bl	8022c44 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&Timer_delayMs);
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	f015 f9f3 	bl	8022bb8 <UTIL_TIMER_Start>
    UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_Delay);
 800d7d2:	2008      	movs	r0, #8
 800d7d4:	f014 ff26 	bl	8022624 <UTIL_SEQ_WaitEvt>
  }
  else
  {
    HAL_Delay(delay_ms);
  }
  APP_LOG(TS_ON, VLEVEL_M, "Delay Up\n\r");
 800d7d8:	4b08      	ldr	r3, [pc, #32]	; (800d7fc <Delay_Lp+0x68>)
 800d7da:	2201      	movs	r2, #1
 800d7dc:	2100      	movs	r1, #0
 800d7de:	2002      	movs	r0, #2
 800d7e0:	f014 fd1c 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE BEGIN Delay_Lp_2 */

  /* USER CODE END Delay_Lp_2 */
}
 800d7e4:	b003      	add	sp, #12
 800d7e6:	bd30      	pop	{r4, r5, pc}
    HAL_Delay(delay_ms);
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f7f9 fd89 	bl	8007300 <HAL_Delay>
 800d7ee:	e7f3      	b.n	800d7d8 <Delay_Lp+0x44>
 800d7f0:	08027cbc 	.word	0x08027cbc
 800d7f4:	20000d1c 	.word	0x20000d1c
 800d7f8:	0800d801 	.word	0x0800d801
 800d7fc:	08027ccc 	.word	0x08027ccc

0800d800 <OnTimerDelayEvt>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static void OnTimerDelayEvt(void *context)
{
 800d800:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnTimerDelayEvt_1 */

  /* USER CODE END OnTimerDelayEvt_1 */
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_Delay);
 800d802:	2008      	movs	r0, #8
 800d804:	f014 fe46 	bl	8022494 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnTimerDelayEvt_2 */

  /* USER CODE END OnTimerDelayEvt_2 */
}
 800d808:	bd08      	pop	{r3, pc}
	...

0800d80c <OnTimerTimeoutEvt>:

static void OnTimerTimeoutEvt(void *context)
{
 800d80c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnTimerTimeoutEvt_1 */

  /* USER CODE END OnTimerTimeoutEvt_1 */
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_Timeout);
 800d80e:	2002      	movs	r0, #2
 800d810:	f014 fe40 	bl	8022494 <UTIL_SEQ_SetEvt>

  APP_LOG(TS_ON, VLEVEL_M, "TIM timeout Stopped\n\r");
 800d814:	4b03      	ldr	r3, [pc, #12]	; (800d824 <OnTimerTimeoutEvt+0x18>)
 800d816:	2201      	movs	r2, #1
 800d818:	2100      	movs	r1, #0
 800d81a:	2002      	movs	r0, #2
 800d81c:	f014 fcfe 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE BEGIN OnTimerTimeoutEvt_2 */

  /* USER CODE END OnTimerTimeoutEvt_2 */
}
 800d820:	bd08      	pop	{r3, pc}
 800d822:	bf00      	nop
 800d824:	08027cd8 	.word	0x08027cd8

0800d828 <MCU_API_malloc>:
  if (size <= LIBRARY_MEM_SIZE_MAX)
 800d828:	28c8      	cmp	r0, #200	; 0xc8
 800d82a:	d803      	bhi.n	800d834 <MCU_API_malloc+0xc>
    *returned_pointer = LibraryMem ;
 800d82c:	4b02      	ldr	r3, [pc, #8]	; (800d838 <MCU_API_malloc+0x10>)
 800d82e:	600b      	str	r3, [r1, #0]
  sfx_error_t error = SFX_ERR_NONE;
 800d830:	2000      	movs	r0, #0
 800d832:	4770      	bx	lr
    error = MCU_ERR_API_MALLOC;
 800d834:	2011      	movs	r0, #17
}
 800d836:	4770      	bx	lr
 800d838:	20000c24 	.word	0x20000c24

0800d83c <MCU_API_free>:
}
 800d83c:	2000      	movs	r0, #0
 800d83e:	4770      	bx	lr

0800d840 <MCU_API_get_voltage_temperature>:
{
 800d840:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d842:	b083      	sub	sp, #12
 800d844:	4605      	mov	r5, r0
 800d846:	460f      	mov	r7, r1
 800d848:	4616      	mov	r6, r2
  *voltage_idle = (uint16_t) SYS_GetBatteryLevel(); /* mV */
 800d84a:	f7f9 f8b3 	bl	80069b4 <SYS_GetBatteryLevel>
 800d84e:	8028      	strh	r0, [r5, #0]
  *voltage_tx = 0;   /* mV */
 800d850:	2400      	movs	r4, #0
 800d852:	803c      	strh	r4, [r7, #0]
  *temperature = (uint16_t)((SYS_GetTemperatureLevel() * 10) >> 8);  /* */
 800d854:	f7f9 f8d0 	bl	80069f8 <SYS_GetTemperatureLevel>
 800d858:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800d85c:	f343 13cf 	sbfx	r3, r3, #7, #16
 800d860:	8033      	strh	r3, [r6, #0]
  APP_LOG(TS_ON, VLEVEL_M, "temp=%d , ", (int32_t) *temperature);
 800d862:	9300      	str	r3, [sp, #0]
 800d864:	4b08      	ldr	r3, [pc, #32]	; (800d888 <MCU_API_get_voltage_temperature+0x48>)
 800d866:	2201      	movs	r2, #1
 800d868:	4621      	mov	r1, r4
 800d86a:	2002      	movs	r0, #2
 800d86c:	f014 fcd6 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "voltage=%u\n\r", (uint32_t) *voltage_idle);
 800d870:	882b      	ldrh	r3, [r5, #0]
 800d872:	9300      	str	r3, [sp, #0]
 800d874:	4b05      	ldr	r3, [pc, #20]	; (800d88c <MCU_API_get_voltage_temperature+0x4c>)
 800d876:	4622      	mov	r2, r4
 800d878:	4621      	mov	r1, r4
 800d87a:	2002      	movs	r0, #2
 800d87c:	f014 fcce 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800d880:	4620      	mov	r0, r4
 800d882:	b003      	add	sp, #12
 800d884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d886:	bf00      	nop
 800d888:	08027cf0 	.word	0x08027cf0
 800d88c:	08027cfc 	.word	0x08027cfc

0800d890 <MCU_API_delay>:
{
 800d890:	b510      	push	{r4, lr}
 800d892:	4604      	mov	r4, r0
  sfx_rc_enum_t sfx_rc = E2P_Read_Rc();
 800d894:	f7ff fdbc 	bl	800d410 <E2P_Read_Rc>
  switch (delay_type)
 800d898:	2c03      	cmp	r4, #3
 800d89a:	d83a      	bhi.n	800d912 <MCU_API_delay+0x82>
 800d89c:	e8df f004 	tbb	[pc, r4]
 800d8a0:	332d1c02 	.word	0x332d1c02
      if ((sfx_rc == SFX_RC3A) ||
 800d8a4:	1e83      	subs	r3, r0, #2
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d90b      	bls.n	800d8c4 <MCU_API_delay+0x34>
          (sfx_rc == SFX_RC3C) ||
 800d8ac:	2805      	cmp	r0, #5
 800d8ae:	d009      	beq.n	800d8c4 <MCU_API_delay+0x34>
      else if ((sfx_rc == SFX_RC2) ||
 800d8b0:	2801      	cmp	r0, #1
 800d8b2:	d001      	beq.n	800d8b8 <MCU_API_delay+0x28>
 800d8b4:	2804      	cmp	r0, #4
 800d8b6:	d10a      	bne.n	800d8ce <MCU_API_delay+0x3e>
        Delay_Lp(510 - T_RADIO_DELAY_ON - T_RADIO_DELAY_OFF / 6); /* 500-525ms */
 800d8b8:	f44f 70ab 	mov.w	r0, #342	; 0x156
 800d8bc:	f7ff ff6a 	bl	800d794 <Delay_Lp>
  sfx_error_t err = SFX_ERR_NONE;
 800d8c0:	2000      	movs	r0, #0
        Delay_Lp(510 - T_RADIO_DELAY_ON - T_RADIO_DELAY_OFF / 6); /* 500-525ms */
 800d8c2:	e01f      	b.n	800d904 <MCU_API_delay+0x74>
        Delay_Lp(ARIB_DELAY);
 800d8c4:	2001      	movs	r0, #1
 800d8c6:	f7ff ff65 	bl	800d794 <Delay_Lp>
  sfx_error_t err = SFX_ERR_NONE;
 800d8ca:	2000      	movs	r0, #0
        Delay_Lp(ARIB_DELAY);
 800d8cc:	e01a      	b.n	800d904 <MCU_API_delay+0x74>
        Delay_Lp(510 - (T_RADIO_DELAY_ON) - T_RADIO_DELAY_OFF); /* 500-525 ms */
 800d8ce:	20fa      	movs	r0, #250	; 0xfa
 800d8d0:	f7ff ff60 	bl	800d794 <Delay_Lp>
  sfx_error_t err = SFX_ERR_NONE;
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	e015      	b.n	800d904 <MCU_API_delay+0x74>
      if ((sfx_rc == SFX_RC3A) ||
 800d8d8:	1e83      	subs	r3, r0, #2
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d901      	bls.n	800d8e4 <MCU_API_delay+0x54>
          (sfx_rc == SFX_RC3C) ||
 800d8e0:	2805      	cmp	r0, #5
 800d8e2:	d104      	bne.n	800d8ee <MCU_API_delay+0x5e>
        Delay_Lp(ARIB_DELAY);
 800d8e4:	2001      	movs	r0, #1
 800d8e6:	f7ff ff55 	bl	800d794 <Delay_Lp>
  sfx_error_t err = SFX_ERR_NONE;
 800d8ea:	2000      	movs	r0, #0
        Delay_Lp(ARIB_DELAY);
 800d8ec:	e00a      	b.n	800d904 <MCU_API_delay+0x74>
        Delay_Lp(1000 - T_RADIO_DELAY_ON - T_RADIO_DELAY_OFF); /* 1000 ms */
 800d8ee:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 800d8f2:	f7ff ff4f 	bl	800d794 <Delay_Lp>
  sfx_error_t err = SFX_ERR_NONE;
 800d8f6:	2000      	movs	r0, #0
 800d8f8:	e004      	b.n	800d904 <MCU_API_delay+0x74>
      Delay_Lp(1600 - T_RADIO_DELAY_ON);
 800d8fa:	f240 50aa 	movw	r0, #1450	; 0x5aa
 800d8fe:	f7ff ff49 	bl	800d794 <Delay_Lp>
  sfx_error_t err = SFX_ERR_NONE;
 800d902:	2000      	movs	r0, #0
}
 800d904:	bd10      	pop	{r4, pc}
      Delay_Lp(500 - T_RADIO_DELAY_ON); /* 500 ms */
 800d906:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800d90a:	f7ff ff43 	bl	800d794 <Delay_Lp>
  sfx_error_t err = SFX_ERR_NONE;
 800d90e:	2000      	movs	r0, #0
      break;
 800d910:	e7f8      	b.n	800d904 <MCU_API_delay+0x74>
  sfx_rc_enum_t sfx_rc = E2P_Read_Rc();
 800d912:	2014      	movs	r0, #20
 800d914:	e7f6      	b.n	800d904 <MCU_API_delay+0x74>

0800d916 <MCU_API_get_nv_mem>:
{
 800d916:	b508      	push	{r3, lr}
  if (E2P_Read_McuNvm(read_data, SFX_NVMEM_BLOCK_SIZE) != E2P_OK)
 800d918:	2104      	movs	r1, #4
 800d91a:	f7ff fef5 	bl	800d708 <E2P_Read_McuNvm>
 800d91e:	2801      	cmp	r0, #1
 800d920:	d101      	bne.n	800d926 <MCU_API_get_nv_mem+0x10>
  return ret;
 800d922:	2000      	movs	r0, #0
}
 800d924:	bd08      	pop	{r3, pc}
    return MCU_ERR_API_GETNVMEM;
 800d926:	2016      	movs	r0, #22
 800d928:	e7fc      	b.n	800d924 <MCU_API_get_nv_mem+0xe>

0800d92a <MCU_API_set_nv_mem>:
{
 800d92a:	b508      	push	{r3, lr}
  if (E2P_Write_McuNvm(data_to_write, SFX_NVMEM_BLOCK_SIZE) != E2P_OK)
 800d92c:	2104      	movs	r1, #4
 800d92e:	f7ff ff14 	bl	800d75a <E2P_Write_McuNvm>
 800d932:	2801      	cmp	r0, #1
 800d934:	d101      	bne.n	800d93a <MCU_API_set_nv_mem+0x10>
  return ret;
 800d936:	2000      	movs	r0, #0
}
 800d938:	bd08      	pop	{r3, pc}
    return MCU_ERR_API_SETNVMEM;
 800d93a:	2017      	movs	r0, #23
 800d93c:	e7fc      	b.n	800d938 <MCU_API_set_nv_mem+0xe>
	...

0800d940 <MCU_API_timer_start_carrier_sense>:
{
 800d940:	b570      	push	{r4, r5, r6, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	4605      	mov	r5, r0
  APP_LOG(TS_ON, VLEVEL_M, "CS timeout Started= %d msec\n\r", time_duration_in_ms);
 800d946:	9000      	str	r0, [sp, #0]
 800d948:	4b0e      	ldr	r3, [pc, #56]	; (800d984 <MCU_API_timer_start_carrier_sense+0x44>)
 800d94a:	2201      	movs	r2, #1
 800d94c:	2100      	movs	r1, #0
 800d94e:	2002      	movs	r0, #2
 800d950:	f014 fc64 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&Timer_TimeoutCs, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTimerTimeoutCsEvt, NULL);
 800d954:	4c0c      	ldr	r4, [pc, #48]	; (800d988 <MCU_API_timer_start_carrier_sense+0x48>)
 800d956:	2600      	movs	r6, #0
 800d958:	9600      	str	r6, [sp, #0]
 800d95a:	4b0c      	ldr	r3, [pc, #48]	; (800d98c <MCU_API_timer_start_carrier_sense+0x4c>)
 800d95c:	4632      	mov	r2, r6
 800d95e:	f04f 31ff 	mov.w	r1, #4294967295
 800d962:	4620      	mov	r0, r4
 800d964:	f015 f868 	bl	8022a38 <UTIL_TIMER_Create>
  UTIL_TIMER_Stop(&Timer_TimeoutCs);
 800d968:	4620      	mov	r0, r4
 800d96a:	f015 f8c3 	bl	8022af4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&Timer_TimeoutCs,  time_duration_in_ms);
 800d96e:	4629      	mov	r1, r5
 800d970:	4620      	mov	r0, r4
 800d972:	f015 f967 	bl	8022c44 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&Timer_TimeoutCs);
 800d976:	4620      	mov	r0, r4
 800d978:	f015 f91e 	bl	8022bb8 <UTIL_TIMER_Start>
}
 800d97c:	4630      	mov	r0, r6
 800d97e:	b002      	add	sp, #8
 800d980:	bd70      	pop	{r4, r5, r6, pc}
 800d982:	bf00      	nop
 800d984:	08027d0c 	.word	0x08027d0c
 800d988:	20000d04 	.word	0x20000d04
 800d98c:	0800d131 	.word	0x0800d131

0800d990 <MCU_API_timer_start>:
{
 800d990:	b570      	push	{r4, r5, r6, lr}
 800d992:	b082      	sub	sp, #8
  uint32_t time_duration_in_millisec = time_duration_in_s * 1000;
 800d994:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800d998:	fb06 f600 	mul.w	r6, r6, r0
  APP_LOG(TS_ON, VLEVEL_M, "TIM timeout Started= %d sec\n\r", time_duration_in_s);
 800d99c:	9000      	str	r0, [sp, #0]
 800d99e:	4b0e      	ldr	r3, [pc, #56]	; (800d9d8 <MCU_API_timer_start+0x48>)
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	2002      	movs	r0, #2
 800d9a6:	f014 fc39 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&Timer_Timeout, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTimerTimeoutEvt, NULL);
 800d9aa:	4c0c      	ldr	r4, [pc, #48]	; (800d9dc <MCU_API_timer_start+0x4c>)
 800d9ac:	2500      	movs	r5, #0
 800d9ae:	9500      	str	r5, [sp, #0]
 800d9b0:	4b0b      	ldr	r3, [pc, #44]	; (800d9e0 <MCU_API_timer_start+0x50>)
 800d9b2:	462a      	mov	r2, r5
 800d9b4:	f04f 31ff 	mov.w	r1, #4294967295
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	f015 f83d 	bl	8022a38 <UTIL_TIMER_Create>
  UTIL_TIMER_Stop(&Timer_Timeout);
 800d9be:	4620      	mov	r0, r4
 800d9c0:	f015 f898 	bl	8022af4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&Timer_Timeout, time_duration_in_millisec);
 800d9c4:	4631      	mov	r1, r6
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	f015 f93c 	bl	8022c44 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&Timer_Timeout);
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f015 f8f3 	bl	8022bb8 <UTIL_TIMER_Start>
}
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	b002      	add	sp, #8
 800d9d6:	bd70      	pop	{r4, r5, r6, pc}
 800d9d8:	08027d2c 	.word	0x08027d2c
 800d9dc:	20000cec 	.word	0x20000cec
 800d9e0:	0800d80d 	.word	0x0800d80d

0800d9e4 <MCU_API_timer_stop>:
{
 800d9e4:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_M, "timer_stop\n\r");
 800d9e6:	4b05      	ldr	r3, [pc, #20]	; (800d9fc <MCU_API_timer_stop+0x18>)
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	2100      	movs	r1, #0
 800d9ec:	2002      	movs	r0, #2
 800d9ee:	f014 fc15 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Stop(&Timer_Timeout);
 800d9f2:	4803      	ldr	r0, [pc, #12]	; (800da00 <MCU_API_timer_stop+0x1c>)
 800d9f4:	f015 f87e 	bl	8022af4 <UTIL_TIMER_Stop>
}
 800d9f8:	2000      	movs	r0, #0
 800d9fa:	bd08      	pop	{r3, pc}
 800d9fc:	08027d4c 	.word	0x08027d4c
 800da00:	20000cec 	.word	0x20000cec

0800da04 <MCU_API_timer_stop_carrier_sense>:
{
 800da04:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_M, "CS timer_stop\n\r");
 800da06:	4b05      	ldr	r3, [pc, #20]	; (800da1c <MCU_API_timer_stop_carrier_sense+0x18>)
 800da08:	2201      	movs	r2, #1
 800da0a:	2100      	movs	r1, #0
 800da0c:	2002      	movs	r0, #2
 800da0e:	f014 fc05 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Stop(&Timer_TimeoutCs);
 800da12:	4803      	ldr	r0, [pc, #12]	; (800da20 <MCU_API_timer_stop_carrier_sense+0x1c>)
 800da14:	f015 f86e 	bl	8022af4 <UTIL_TIMER_Stop>
}
 800da18:	2000      	movs	r0, #0
 800da1a:	bd08      	pop	{r3, pc}
 800da1c:	08027d5c 	.word	0x08027d5c
 800da20:	20000d04 	.word	0x20000d04

0800da24 <MCU_API_timer_wait_for_end>:
{
 800da24:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_M, "TIM timeout Wait\n\r");
 800da26:	4b05      	ldr	r3, [pc, #20]	; (800da3c <MCU_API_timer_wait_for_end+0x18>)
 800da28:	2201      	movs	r2, #1
 800da2a:	2100      	movs	r1, #0
 800da2c:	2002      	movs	r0, #2
 800da2e:	f014 fbf5 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_Timeout);
 800da32:	2002      	movs	r0, #2
 800da34:	f014 fdf6 	bl	8022624 <UTIL_SEQ_WaitEvt>
}
 800da38:	2000      	movs	r0, #0
 800da3a:	bd08      	pop	{r3, pc}
 800da3c:	08027d6c 	.word	0x08027d6c

0800da40 <MCU_API_report_test_result>:
{
 800da40:	b500      	push	{lr}
 800da42:	b085      	sub	sp, #20
  rxcount++;
 800da44:	4a17      	ldr	r2, [pc, #92]	; (800daa4 <MCU_API_report_test_result+0x64>)
 800da46:	6813      	ldr	r3, [r2, #0]
 800da48:	3301      	adds	r3, #1
 800da4a:	6013      	str	r3, [r2, #0]
  if (status == SFX_TRUE)
 800da4c:	2801      	cmp	r0, #1
 800da4e:	d014      	beq.n	800da7a <MCU_API_report_test_result+0x3a>
    APP_LOG(TS_ON, VLEVEL_H, TERM_RED"RX KO. RSSI= %d dBm, cnt=%d, PER=%d%""%""\n\r "TERM_RESET, (int32_t)rssi, rxcount,
 800da50:	4a15      	ldr	r2, [pc, #84]	; (800daa8 <MCU_API_report_test_result+0x68>)
 800da52:	6810      	ldr	r0, [r2, #0]
 800da54:	1a18      	subs	r0, r3, r0
 800da56:	2264      	movs	r2, #100	; 0x64
 800da58:	fb02 f200 	mul.w	r2, r2, r0
 800da5c:	fb92 f2f3 	sdiv	r2, r2, r3
 800da60:	9202      	str	r2, [sp, #8]
 800da62:	9301      	str	r3, [sp, #4]
 800da64:	9100      	str	r1, [sp, #0]
 800da66:	4b11      	ldr	r3, [pc, #68]	; (800daac <MCU_API_report_test_result+0x6c>)
 800da68:	2201      	movs	r2, #1
 800da6a:	2100      	movs	r1, #0
 800da6c:	2003      	movs	r0, #3
 800da6e:	f014 fbd5 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800da72:	2000      	movs	r0, #0
 800da74:	b005      	add	sp, #20
 800da76:	f85d fb04 	ldr.w	pc, [sp], #4
    okcount++;
 800da7a:	480b      	ldr	r0, [pc, #44]	; (800daa8 <MCU_API_report_test_result+0x68>)
 800da7c:	6802      	ldr	r2, [r0, #0]
 800da7e:	3201      	adds	r2, #1
 800da80:	6002      	str	r2, [r0, #0]
    APP_LOG(TS_ON, VLEVEL_H, TERM_GREEN"RX OK. RSSI= %d dBm, cnt=%d, PER=%d%""%""\n\r  "TERM_RESET, (int32_t) rssi, rxcount,
 800da82:	1a9a      	subs	r2, r3, r2
 800da84:	2064      	movs	r0, #100	; 0x64
 800da86:	fb00 f202 	mul.w	r2, r0, r2
 800da8a:	fb92 f2f3 	sdiv	r2, r2, r3
 800da8e:	9202      	str	r2, [sp, #8]
 800da90:	9301      	str	r3, [sp, #4]
 800da92:	9100      	str	r1, [sp, #0]
 800da94:	4b06      	ldr	r3, [pc, #24]	; (800dab0 <MCU_API_report_test_result+0x70>)
 800da96:	2201      	movs	r2, #1
 800da98:	2100      	movs	r1, #0
 800da9a:	2003      	movs	r0, #3
 800da9c:	f014 fbbe 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
            ((rxcount - okcount) * 100) / rxcount);
 800daa0:	e7e7      	b.n	800da72 <MCU_API_report_test_result+0x32>
 800daa2:	bf00      	nop
 800daa4:	20000d38 	.word	0x20000d38
 800daa8:	20000d34 	.word	0x20000d34
 800daac:	08027db4 	.word	0x08027db4
 800dab0:	08027d80 	.word	0x08027d80

0800dab4 <MCU_API_get_version>:
  *version = (sfx_u8 *)mcu_api_version;
 800dab4:	4b04      	ldr	r3, [pc, #16]	; (800dac8 <MCU_API_get_version+0x14>)
 800dab6:	6003      	str	r3, [r0, #0]
  if (size == SFX_NULL)
 800dab8:	b119      	cbz	r1, 800dac2 <MCU_API_get_version+0xe>
  *size = sizeof(mcu_api_version);
 800daba:	220d      	movs	r2, #13
 800dabc:	700a      	strb	r2, [r1, #0]
  return ret;
 800dabe:	2000      	movs	r0, #0
 800dac0:	4770      	bx	lr
    return MCU_ERR_API_GET_VERSION;
 800dac2:	201e      	movs	r0, #30
}
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop
 800dac8:	20000164 	.word	0x20000164

0800dacc <process_MonarchBackGround>:
  /* USER CODE END HAL_LPTIM_AutoReloadMatchCallback_2 */
}

#if (MN_PROCESS_IN_BG==1)
static void process_MonarchBackGround(void)
{
 800dacc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN process_MonarchBackGround_1 */

  /* USER CODE END process_MonarchBackGround_1 */
  int16_t rssi;

  while (RssiBuffWriteIdx != RssiBuffReadIdx)
 800dace:	e002      	b.n	800dad6 <process_MonarchBackGround+0xa>

    if (RssiBuffReadIdx == SIZE_OF_RSSI_BUFF)
    {
      RssiBuffReadIdx = 0;
    }
    MN_Timer_CB(rssi);
 800dad0:	4b0c      	ldr	r3, [pc, #48]	; (800db04 <process_MonarchBackGround+0x38>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4798      	blx	r3
  while (RssiBuffWriteIdx != RssiBuffReadIdx)
 800dad6:	4b0c      	ldr	r3, [pc, #48]	; (800db08 <process_MonarchBackGround+0x3c>)
 800dad8:	881b      	ldrh	r3, [r3, #0]
 800dada:	b21b      	sxth	r3, r3
 800dadc:	4a0b      	ldr	r2, [pc, #44]	; (800db0c <process_MonarchBackGround+0x40>)
 800dade:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d00c      	beq.n	800db00 <process_MonarchBackGround+0x34>
    rssi = RssiBuff[RssiBuffReadIdx++];
 800dae6:	1c53      	adds	r3, r2, #1
 800dae8:	b21b      	sxth	r3, r3
 800daea:	4908      	ldr	r1, [pc, #32]	; (800db0c <process_MonarchBackGround+0x40>)
 800daec:	800b      	strh	r3, [r1, #0]
 800daee:	4908      	ldr	r1, [pc, #32]	; (800db10 <process_MonarchBackGround+0x44>)
 800daf0:	f931 0012 	ldrsh.w	r0, [r1, r2, lsl #1]
    if (RssiBuffReadIdx == SIZE_OF_RSSI_BUFF)
 800daf4:	2b10      	cmp	r3, #16
 800daf6:	d1eb      	bne.n	800dad0 <process_MonarchBackGround+0x4>
      RssiBuffReadIdx = 0;
 800daf8:	4b04      	ldr	r3, [pc, #16]	; (800db0c <process_MonarchBackGround+0x40>)
 800dafa:	2200      	movs	r2, #0
 800dafc:	801a      	strh	r2, [r3, #0]
 800dafe:	e7e7      	b.n	800dad0 <process_MonarchBackGround+0x4>
  }
  /* USER CODE BEGIN process_MonarchBackGround_2 */

  /* USER CODE END process_MonarchBackGround_2 */
}
 800db00:	bd08      	pop	{r3, pc}
 800db02:	bf00      	nop
 800db04:	20000d3c 	.word	0x20000d3c
 800db08:	200028a4 	.word	0x200028a4
 800db0c:	20002880 	.word	0x20002880
 800db10:	20002884 	.word	0x20002884

0800db14 <MN_TIM_Stop>:
{
 800db14:	b508      	push	{r3, lr}
  if (HAL_LPTIM_PWM_Stop_IT(&hlptim1) != HAL_OK)
 800db16:	4804      	ldr	r0, [pc, #16]	; (800db28 <MN_TIM_Stop+0x14>)
 800db18:	f002 f9a3 	bl	800fe62 <HAL_LPTIM_PWM_Stop_IT>
 800db1c:	b900      	cbnz	r0, 800db20 <MN_TIM_Stop+0xc>
}
 800db1e:	bd08      	pop	{r3, pc}
    Error_Handler();
 800db20:	f7f9 f874 	bl	8006c0c <Error_Handler>
}
 800db24:	e7fb      	b.n	800db1e <MN_TIM_Stop+0xa>
 800db26:	bf00      	nop
 800db28:	200026ec 	.word	0x200026ec

0800db2c <MN_TIM_Start>:
{
 800db2c:	b508      	push	{r3, lr}
  if (HAL_LPTIM_PWM_Start_IT(&hlptim1, LPTIM_PERIOD - 1, LPTIM_PULSE) != HAL_OK)
 800db2e:	2200      	movs	r2, #0
 800db30:	2101      	movs	r1, #1
 800db32:	4804      	ldr	r0, [pc, #16]	; (800db44 <MN_TIM_Start+0x18>)
 800db34:	f002 f932 	bl	800fd9c <HAL_LPTIM_PWM_Start_IT>
 800db38:	b900      	cbnz	r0, 800db3c <MN_TIM_Start+0x10>
}
 800db3a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800db3c:	f7f9 f866 	bl	8006c0c <Error_Handler>
}
 800db40:	e7fb      	b.n	800db3a <MN_TIM_Start+0xe>
 800db42:	bf00      	nop
 800db44:	200026ec 	.word	0x200026ec

0800db48 <MN_API_Init>:
{
 800db48:	b510      	push	{r4, lr}
  MN_Timer_CB = MN_API_Timer_CB;
 800db4a:	4b15      	ldr	r3, [pc, #84]	; (800dba0 <MN_API_Init+0x58>)
 800db4c:	6018      	str	r0, [r3, #0]
  MN_LPTIM_IF_Init();
 800db4e:	f7f9 f8c9 	bl	8006ce4 <MN_LPTIM_IF_Init>
  APP_LOG(TS_ON, VLEVEL_M, "MN Init\r\n");
 800db52:	4b14      	ldr	r3, [pc, #80]	; (800dba4 <MN_API_Init+0x5c>)
 800db54:	2201      	movs	r2, #1
 800db56:	2100      	movs	r1, #0
 800db58:	2002      	movs	r0, #2
 800db5a:	f014 fb5f 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  Reg0x089B = Radio.Read(0x089B);
 800db5e:	4c12      	ldr	r4, [pc, #72]	; (800dba8 <MN_API_Init+0x60>)
 800db60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800db62:	f640 009b 	movw	r0, #2203	; 0x89b
 800db66:	4798      	blx	r3
 800db68:	4b10      	ldr	r3, [pc, #64]	; (800dbac <MN_API_Init+0x64>)
 800db6a:	7018      	strb	r0, [r3, #0]
  Radio.Write(0x089B, 0x0);
 800db6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db6e:	2100      	movs	r1, #0
 800db70:	f640 009b 	movw	r0, #2203	; 0x89b
 800db74:	4798      	blx	r3
  UTIL_LPM_SetStopMode((1 << CFG_LPM_SGFX_MN_Id), UTIL_LPM_DISABLE);
 800db76:	2101      	movs	r1, #1
 800db78:	2004      	movs	r0, #4
 800db7a:	f014 fc13 	bl	80223a4 <UTIL_LPM_SetStopMode>
  RssiBuffWriteIdx = 0;
 800db7e:	2400      	movs	r4, #0
 800db80:	4b0b      	ldr	r3, [pc, #44]	; (800dbb0 <MN_API_Init+0x68>)
 800db82:	801c      	strh	r4, [r3, #0]
  RssiBuffReadIdx = 0;
 800db84:	4b0b      	ldr	r3, [pc, #44]	; (800dbb4 <MN_API_Init+0x6c>)
 800db86:	801c      	strh	r4, [r3, #0]
  UTIL_MEM_set_8((uint8_t *) RssiBuff, 0, SIZE_OF_RSSI_BUFF * sizeof(int16_t));
 800db88:	2220      	movs	r2, #32
 800db8a:	4621      	mov	r1, r4
 800db8c:	480a      	ldr	r0, [pc, #40]	; (800dbb8 <MN_API_Init+0x70>)
 800db8e:	f014 fc63 	bl	8022458 <UTIL_MEM_set_8>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_Monarch), UTIL_SEQ_RFU, process_MonarchBackGround);
 800db92:	4a0a      	ldr	r2, [pc, #40]	; (800dbbc <MN_API_Init+0x74>)
 800db94:	4621      	mov	r1, r4
 800db96:	2020      	movs	r0, #32
 800db98:	f014 fd6a 	bl	8022670 <UTIL_SEQ_RegTask>
}
 800db9c:	bd10      	pop	{r4, pc}
 800db9e:	bf00      	nop
 800dba0:	20000d3c 	.word	0x20000d3c
 800dba4:	08027de8 	.word	0x08027de8
 800dba8:	08028984 	.word	0x08028984
 800dbac:	20000d58 	.word	0x20000d58
 800dbb0:	200028a4 	.word	0x200028a4
 800dbb4:	20002880 	.word	0x20002880
 800dbb8:	20002884 	.word	0x20002884
 800dbbc:	0800dacd 	.word	0x0800dacd

0800dbc0 <MN_API_DeInit>:
{
 800dbc0:	b508      	push	{r3, lr}
  MN_TIM_Stop();
 800dbc2:	f7ff ffa7 	bl	800db14 <MN_TIM_Stop>
  MN_LPTIM_IF_DeInit();
 800dbc6:	f7f9 f8a5 	bl	8006d14 <MN_LPTIM_IF_DeInit>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_SGFX_MN_Id), UTIL_LPM_ENABLE);
 800dbca:	2100      	movs	r1, #0
 800dbcc:	2004      	movs	r0, #4
 800dbce:	f014 fbe9 	bl	80223a4 <UTIL_LPM_SetStopMode>
  Radio.Write(0x089B, Reg0x089B);
 800dbd2:	4b07      	ldr	r3, [pc, #28]	; (800dbf0 <MN_API_DeInit+0x30>)
 800dbd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbd6:	4a07      	ldr	r2, [pc, #28]	; (800dbf4 <MN_API_DeInit+0x34>)
 800dbd8:	7811      	ldrb	r1, [r2, #0]
 800dbda:	f640 009b 	movw	r0, #2203	; 0x89b
 800dbde:	4798      	blx	r3
  APP_LOG(TS_ON, VLEVEL_M, "MN Deinit\r\n");
 800dbe0:	4b05      	ldr	r3, [pc, #20]	; (800dbf8 <MN_API_DeInit+0x38>)
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	2002      	movs	r0, #2
 800dbe8:	f014 fb18 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800dbec:	bd08      	pop	{r3, pc}
 800dbee:	bf00      	nop
 800dbf0:	08028984 	.word	0x08028984
 800dbf4:	20000d58 	.word	0x20000d58
 800dbf8:	08027df4 	.word	0x08027df4

0800dbfc <MN_API_StartRx>:
{
 800dbfc:	b510      	push	{r4, lr}
  RssiReadOnIT_Enable = 0;
 800dbfe:	4c04      	ldr	r4, [pc, #16]	; (800dc10 <MN_API_StartRx+0x14>)
 800dc00:	2000      	movs	r0, #0
 800dc02:	7020      	strb	r0, [r4, #0]
  Radio.RxBoosted(0);
 800dc04:	4b03      	ldr	r3, [pc, #12]	; (800dc14 <MN_API_StartRx+0x18>)
 800dc06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc08:	4798      	blx	r3
  RssiReadOnIT_Enable = 1;
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	7023      	strb	r3, [r4, #0]
}
 800dc0e:	bd10      	pop	{r4, pc}
 800dc10:	20000171 	.word	0x20000171
 800dc14:	08028984 	.word	0x08028984

0800dc18 <MN_API_StopRx>:
}
 800dc18:	4770      	bx	lr
	...

0800dc1c <MN_API_change_frequency>:
{
 800dc1c:	b510      	push	{r4, lr}
  RssiReadOnIT_Enable = 0;
 800dc1e:	4c04      	ldr	r4, [pc, #16]	; (800dc30 <MN_API_change_frequency+0x14>)
 800dc20:	2300      	movs	r3, #0
 800dc22:	7023      	strb	r3, [r4, #0]
  Radio.SetChannel(frequency);
 800dc24:	4b03      	ldr	r3, [pc, #12]	; (800dc34 <MN_API_change_frequency+0x18>)
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	4798      	blx	r3
  RssiReadOnIT_Enable = 1;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	7023      	strb	r3, [r4, #0]
}
 800dc2e:	bd10      	pop	{r4, pc}
 800dc30:	20000171 	.word	0x20000171
 800dc34:	08028984 	.word	0x08028984

0800dc38 <MN_API_Enable16KHzSamplingTimer>:
{
 800dc38:	b508      	push	{r3, lr}
  MN_TIM_Start();
 800dc3a:	f7ff ff77 	bl	800db2c <MN_TIM_Start>
}
 800dc3e:	bd08      	pop	{r3, pc}

0800dc40 <MN_API_Disable16KHzSamplingTimer>:
{
 800dc40:	b508      	push	{r3, lr}
  MN_TIM_Stop();
 800dc42:	f7ff ff67 	bl	800db14 <MN_TIM_Stop>
}
 800dc46:	bd08      	pop	{r3, pc}

0800dc48 <MN_API_Pattern_Found>:
{
 800dc48:	b500      	push	{lr}
 800dc4a:	b085      	sub	sp, #20
  if (window_type == 0)
 800dc4c:	b958      	cbnz	r0, 800dc66 <MN_API_Pattern_Found+0x1e>
    APP_LOG(TS_ON, VLEVEL_H, "Sweep detected pattern %d on freq %d at %d\n\r", pattern, frequency, best_rssi);
 800dc4e:	9302      	str	r3, [sp, #8]
 800dc50:	9201      	str	r2, [sp, #4]
 800dc52:	9100      	str	r1, [sp, #0]
 800dc54:	4b09      	ldr	r3, [pc, #36]	; (800dc7c <MN_API_Pattern_Found+0x34>)
 800dc56:	2201      	movs	r2, #1
 800dc58:	2100      	movs	r1, #0
 800dc5a:	2003      	movs	r0, #3
 800dc5c:	f014 fade 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800dc60:	b005      	add	sp, #20
 800dc62:	f85d fb04 	ldr.w	pc, [sp], #4
    APP_LOG(TS_ON, VLEVEL_H, "Window detected pattern %d on freq %d at %d\n\r", pattern, frequency, best_rssi);
 800dc66:	9302      	str	r3, [sp, #8]
 800dc68:	9201      	str	r2, [sp, #4]
 800dc6a:	9100      	str	r1, [sp, #0]
 800dc6c:	4b04      	ldr	r3, [pc, #16]	; (800dc80 <MN_API_Pattern_Found+0x38>)
 800dc6e:	2201      	movs	r2, #1
 800dc70:	2100      	movs	r1, #0
 800dc72:	2003      	movs	r0, #3
 800dc74:	f014 fad2 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800dc78:	e7f2      	b.n	800dc60 <MN_API_Pattern_Found+0x18>
 800dc7a:	bf00      	nop
 800dc7c:	08027e00 	.word	0x08027e00
 800dc80:	08027e30 	.word	0x08027e30

0800dc84 <MN_API_TimerSart>:
{
 800dc84:	b570      	push	{r4, r5, r6, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	4605      	mov	r5, r0
 800dc8a:	460e      	mov	r6, r1
  APP_LOG(TS_ON, VLEVEL_H, "MONARCH_TIM_START: %d ms\n\r", timer_value_ms);
 800dc8c:	9000      	str	r0, [sp, #0]
 800dc8e:	4b0d      	ldr	r3, [pc, #52]	; (800dcc4 <MN_API_TimerSart+0x40>)
 800dc90:	2201      	movs	r2, #1
 800dc92:	2100      	movs	r1, #0
 800dc94:	2003      	movs	r0, #3
 800dc96:	f014 fac1 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&Monarch_TimerTimeout, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, TimeoutHandle, NULL);
 800dc9a:	4c0b      	ldr	r4, [pc, #44]	; (800dcc8 <MN_API_TimerSart+0x44>)
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	9200      	str	r2, [sp, #0]
 800dca0:	4633      	mov	r3, r6
 800dca2:	f04f 31ff 	mov.w	r1, #4294967295
 800dca6:	4620      	mov	r0, r4
 800dca8:	f014 fec6 	bl	8022a38 <UTIL_TIMER_Create>
  UTIL_TIMER_Stop(&Monarch_TimerTimeout);
 800dcac:	4620      	mov	r0, r4
 800dcae:	f014 ff21 	bl	8022af4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&Monarch_TimerTimeout, timer_value_ms);
 800dcb2:	4629      	mov	r1, r5
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f014 ffc5 	bl	8022c44 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&Monarch_TimerTimeout);
 800dcba:	4620      	mov	r0, r4
 800dcbc:	f014 ff7c 	bl	8022bb8 <UTIL_TIMER_Start>
}
 800dcc0:	b002      	add	sp, #8
 800dcc2:	bd70      	pop	{r4, r5, r6, pc}
 800dcc4:	08027e60 	.word	0x08027e60
 800dcc8:	20000d40 	.word	0x20000d40

0800dccc <MN_API_TimerStop>:
{
 800dccc:	b508      	push	{r3, lr}
  UTIL_TIMER_Stop(&Monarch_TimerTimeout);
 800dcce:	4805      	ldr	r0, [pc, #20]	; (800dce4 <MN_API_TimerStop+0x18>)
 800dcd0:	f014 ff10 	bl	8022af4 <UTIL_TIMER_Stop>
  APP_LOG(TS_ON, VLEVEL_H, "MONARCH_TIM_STOP\n\r");
 800dcd4:	4b04      	ldr	r3, [pc, #16]	; (800dce8 <MN_API_TimerStop+0x1c>)
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	2100      	movs	r1, #0
 800dcda:	2003      	movs	r0, #3
 800dcdc:	f014 fa9e 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800dce0:	bd08      	pop	{r3, pc}
 800dce2:	bf00      	nop
 800dce4:	20000d40 	.word	0x20000d40
 800dce8:	08027e7c 	.word	0x08027e7c

0800dcec <HAL_LPTIM_AutoReloadMatchCallback>:
{
 800dcec:	b508      	push	{r3, lr}
  if (RssiReadOnIT_Enable == 1)
 800dcee:	4b0f      	ldr	r3, [pc, #60]	; (800dd2c <HAL_LPTIM_AutoReloadMatchCallback+0x40>)
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	d000      	beq.n	800dcf8 <HAL_LPTIM_AutoReloadMatchCallback+0xc>
}
 800dcf6:	bd08      	pop	{r3, pc}
    rssi = Radio.Rssi(MODEM_FSK);
 800dcf8:	4b0d      	ldr	r3, [pc, #52]	; (800dd30 <HAL_LPTIM_AutoReloadMatchCallback+0x44>)
 800dcfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcfc:	2000      	movs	r0, #0
 800dcfe:	4798      	blx	r3
    RssiBuff[RssiBuffWriteIdx++] = rssi;
 800dd00:	4a0c      	ldr	r2, [pc, #48]	; (800dd34 <HAL_LPTIM_AutoReloadMatchCallback+0x48>)
 800dd02:	8813      	ldrh	r3, [r2, #0]
 800dd04:	b219      	sxth	r1, r3
 800dd06:	3301      	adds	r3, #1
 800dd08:	b21b      	sxth	r3, r3
 800dd0a:	8013      	strh	r3, [r2, #0]
 800dd0c:	4b0a      	ldr	r3, [pc, #40]	; (800dd38 <HAL_LPTIM_AutoReloadMatchCallback+0x4c>)
 800dd0e:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
    if (RssiBuffWriteIdx == SIZE_OF_RSSI_BUFF)
 800dd12:	8813      	ldrh	r3, [r2, #0]
 800dd14:	b21b      	sxth	r3, r3
 800dd16:	2b10      	cmp	r3, #16
 800dd18:	d004      	beq.n	800dd24 <HAL_LPTIM_AutoReloadMatchCallback+0x38>
    UTIL_SEQ_SetTask(1 << CFG_SEQ_Task_Monarch, CFG_SEQ_Prio_0);
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	2020      	movs	r0, #32
 800dd1e:	f014 fba3 	bl	8022468 <UTIL_SEQ_SetTask>
}
 800dd22:	e7e8      	b.n	800dcf6 <HAL_LPTIM_AutoReloadMatchCallback+0xa>
      RssiBuffWriteIdx = 0;
 800dd24:	4613      	mov	r3, r2
 800dd26:	2200      	movs	r2, #0
 800dd28:	801a      	strh	r2, [r3, #0]
 800dd2a:	e7f6      	b.n	800dd1a <HAL_LPTIM_AutoReloadMatchCallback+0x2e>
 800dd2c:	20000171 	.word	0x20000171
 800dd30:	08028984 	.word	0x08028984
 800dd34:	200028a4 	.word	0x200028a4
 800dd38:	20002884 	.word	0x20002884

0800dd3c <OnRxError>:

  /* USER CODE END OnRxTimeout_2 */
}

static void OnRxError(void)
{
 800dd3c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnRxError_1 */

  /* USER CODE END OnRxError_1 */
  RxPacketReceived = 0;
 800dd3e:	2400      	movs	r4, #0
 800dd40:	4b05      	ldr	r3, [pc, #20]	; (800dd58 <OnRxError+0x1c>)
 800dd42:	701c      	strb	r4, [r3, #0]

  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_Timeout);
 800dd44:	2002      	movs	r0, #2
 800dd46:	f014 fba5 	bl	8022494 <UTIL_SEQ_SetEvt>

  APP_LOG(TS_ON, VLEVEL_M, "OnRxError\n\r");
 800dd4a:	4b04      	ldr	r3, [pc, #16]	; (800dd5c <OnRxError+0x20>)
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	4621      	mov	r1, r4
 800dd50:	2002      	movs	r0, #2
 800dd52:	f014 fa63 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN OnRxError_2 */

  /* USER CODE END OnRxError_2 */
}
 800dd56:	bd10      	pop	{r4, pc}
 800dd58:	20000d7c 	.word	0x20000d7c
 800dd5c:	08027e90 	.word	0x08027e90

0800dd60 <OnRxTimeout>:
{
 800dd60:	b510      	push	{r4, lr}
  RxPacketReceived = 0;
 800dd62:	2400      	movs	r4, #0
 800dd64:	4b05      	ldr	r3, [pc, #20]	; (800dd7c <OnRxTimeout+0x1c>)
 800dd66:	701c      	strb	r4, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_Timeout);
 800dd68:	2002      	movs	r0, #2
 800dd6a:	f014 fb93 	bl	8022494 <UTIL_SEQ_SetEvt>
  APP_LOG(TS_ON, VLEVEL_M,  "OnRxTimeout\n\r");
 800dd6e:	4b04      	ldr	r3, [pc, #16]	; (800dd80 <OnRxTimeout+0x20>)
 800dd70:	2201      	movs	r2, #1
 800dd72:	4621      	mov	r1, r4
 800dd74:	2002      	movs	r0, #2
 800dd76:	f014 fa51 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800dd7a:	bd10      	pop	{r4, pc}
 800dd7c:	20000d7c 	.word	0x20000d7c
 800dd80:	08027e9c 	.word	0x08027e9c

0800dd84 <OnTxTimeout>:
{
 800dd84:	b508      	push	{r3, lr}
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_TxTimeout);
 800dd86:	2004      	movs	r0, #4
 800dd88:	f014 fb84 	bl	8022494 <UTIL_SEQ_SetEvt>
  APP_LOG(TS_ON, VLEVEL_M,  "OnTxTimeout\n\r");
 800dd8c:	4b03      	ldr	r3, [pc, #12]	; (800dd9c <OnTxTimeout+0x18>)
 800dd8e:	2201      	movs	r2, #1
 800dd90:	2100      	movs	r1, #0
 800dd92:	2002      	movs	r0, #2
 800dd94:	f014 fa42 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800dd98:	bd08      	pop	{r3, pc}
 800dd9a:	bf00      	nop
 800dd9c:	08027eac 	.word	0x08027eac

0800dda0 <OnTxDone>:
{
 800dda0:	b508      	push	{r3, lr}
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_TxTimeout);
 800dda2:	2004      	movs	r0, #4
 800dda4:	f014 fb76 	bl	8022494 <UTIL_SEQ_SetEvt>
  APP_LOG(TS_ON, VLEVEL_M, "OnTxDone\n\r");
 800dda8:	4b03      	ldr	r3, [pc, #12]	; (800ddb8 <OnTxDone+0x18>)
 800ddaa:	2201      	movs	r2, #1
 800ddac:	2100      	movs	r1, #0
 800ddae:	2002      	movs	r0, #2
 800ddb0:	f014 fa34 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800ddb4:	bd08      	pop	{r3, pc}
 800ddb6:	bf00      	nop
 800ddb8:	08027ebc 	.word	0x08027ebc

0800ddbc <OnRxDone>:
{
 800ddbc:	b510      	push	{r4, lr}
 800ddbe:	4614      	mov	r4, r2
  UTIL_MEM_cpy_8(RxFrame, payload, size);
 800ddc0:	460a      	mov	r2, r1
 800ddc2:	4601      	mov	r1, r0
 800ddc4:	4b09      	ldr	r3, [pc, #36]	; (800ddec <OnRxDone+0x30>)
 800ddc6:	6818      	ldr	r0, [r3, #0]
 800ddc8:	f014 fb3c 	bl	8022444 <UTIL_MEM_cpy_8>
  RxRssi = rssi;
 800ddcc:	4b08      	ldr	r3, [pc, #32]	; (800ddf0 <OnRxDone+0x34>)
 800ddce:	801c      	strh	r4, [r3, #0]
  RxPacketReceived = 1;
 800ddd0:	2401      	movs	r4, #1
 800ddd2:	4b08      	ldr	r3, [pc, #32]	; (800ddf4 <OnRxDone+0x38>)
 800ddd4:	701c      	strb	r4, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_Timeout);
 800ddd6:	2002      	movs	r0, #2
 800ddd8:	f014 fb5c 	bl	8022494 <UTIL_SEQ_SetEvt>
  APP_LOG(TS_ON, VLEVEL_M, "OnRxDone\n\r");
 800dddc:	4b06      	ldr	r3, [pc, #24]	; (800ddf8 <OnRxDone+0x3c>)
 800ddde:	4622      	mov	r2, r4
 800dde0:	2100      	movs	r1, #0
 800dde2:	2002      	movs	r0, #2
 800dde4:	f014 fa1a 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800dde8:	bd10      	pop	{r4, pc}
 800ddea:	bf00      	nop
 800ddec:	20000d78 	.word	0x20000d78
 800ddf0:	20000d7e 	.word	0x20000d7e
 800ddf4:	20000d7c 	.word	0x20000d7c
 800ddf8:	08027ec8 	.word	0x08027ec8

0800ddfc <sfx_wait_end_of_rx>:

static sfx_u8 sfx_wait_end_of_rx(void)
{
 800ddfc:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN sfx_wait_end_of_rx_1 */

  /* USER CODE END sfx_wait_end_of_rx_1 */
  RxPacketReceived = 0;
 800ddfe:	4d0d      	ldr	r5, [pc, #52]	; (800de34 <sfx_wait_end_of_rx+0x38>)
 800de00:	2400      	movs	r4, #0
 800de02:	702c      	strb	r4, [r5, #0]

  RxRssi = -150;
 800de04:	4b0c      	ldr	r3, [pc, #48]	; (800de38 <sfx_wait_end_of_rx+0x3c>)
 800de06:	f64f 726a 	movw	r2, #65386	; 0xff6a
 800de0a:	801a      	strh	r2, [r3, #0]

  APP_LOG(TS_ON, VLEVEL_M, "Wait For End of Rx\n\r");
 800de0c:	4b0b      	ldr	r3, [pc, #44]	; (800de3c <sfx_wait_end_of_rx+0x40>)
 800de0e:	2201      	movs	r2, #1
 800de10:	4621      	mov	r1, r4
 800de12:	2002      	movs	r0, #2
 800de14:	f014 fa02 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>

  UTIL_SEQ_ClrEvt(1 << CFG_SEQ_Evt_Timeout);
 800de18:	2002      	movs	r0, #2
 800de1a:	f014 fb47 	bl	80224ac <UTIL_SEQ_ClrEvt>

  UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_Timeout);
 800de1e:	2002      	movs	r0, #2
 800de20:	f014 fc00 	bl	8022624 <UTIL_SEQ_WaitEvt>

  APP_LOG(TS_ON, VLEVEL_M, "End Of Rx\n\r");
 800de24:	4b06      	ldr	r3, [pc, #24]	; (800de40 <sfx_wait_end_of_rx+0x44>)
 800de26:	2201      	movs	r2, #1
 800de28:	4621      	mov	r1, r4
 800de2a:	2002      	movs	r0, #2
 800de2c:	f014 f9f6 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>

  return RxPacketReceived;
  /* USER CODE BEGIN sfx_wait_end_of_rx_2 */

  /* USER CODE END sfx_wait_end_of_rx_2 */
}
 800de30:	7828      	ldrb	r0, [r5, #0]
 800de32:	bd38      	pop	{r3, r4, r5, pc}
 800de34:	20000d7c 	.word	0x20000d7c
 800de38:	20000d7e 	.word	0x20000d7e
 800de3c:	08027ed4 	.word	0x08027ed4
 800de40:	08027eec 	.word	0x08027eec

0800de44 <RF_API_isChannelFree>:

bool RF_API_isChannelFree(int16_t rssiThresh, uint32_t maxCarrierSenseTime)
{
 800de44:	b570      	push	{r4, r5, r6, lr}
 800de46:	4606      	mov	r6, r0
 800de48:	460d      	mov	r5, r1
  /* USER CODE END RF_API_isChannelFree_1 */
  bool status = true;
  int16_t rssi = 0;
  uint32_t carrierSenseTime = 0;

  carrierSenseTime = UTIL_TIMER_GetCurrentTime();
 800de4a:	f014 fe13 	bl	8022a74 <UTIL_TIMER_GetCurrentTime>
 800de4e:	4604      	mov	r4, r0

  /* Perform carrier sense for maxCarrierSenseTime */
  while (UTIL_TIMER_GetElapsedTime(carrierSenseTime) < maxCarrierSenseTime)
 800de50:	4620      	mov	r0, r4
 800de52:	f014 fe19 	bl	8022a88 <UTIL_TIMER_GetElapsedTime>
 800de56:	42a8      	cmp	r0, r5
 800de58:	d207      	bcs.n	800de6a <RF_API_isChannelFree+0x26>
  {
    rssi = Radio.Rssi(MODEM_FSK);
 800de5a:	4b05      	ldr	r3, [pc, #20]	; (800de70 <RF_API_isChannelFree+0x2c>)
 800de5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de5e:	2000      	movs	r0, #0
 800de60:	4798      	blx	r3

    if (rssi > rssiThresh)
 800de62:	42b0      	cmp	r0, r6
 800de64:	ddf4      	ble.n	800de50 <RF_API_isChannelFree+0xc>
    {
      status = false;
 800de66:	2000      	movs	r0, #0
 800de68:	e000      	b.n	800de6c <RF_API_isChannelFree+0x28>
  bool status = true;
 800de6a:	2001      	movs	r0, #1
  }
  return status;
  /* USER CODE BEGIN RF_API_isChannelFree_2 */

  /* USER CODE END RF_API_isChannelFree_2 */
}
 800de6c:	bd70      	pop	{r4, r5, r6, pc}
 800de6e:	bf00      	nop
 800de70:	08028984 	.word	0x08028984

0800de74 <RF_API_init>:
{
 800de74:	b530      	push	{r4, r5, lr}
 800de76:	b08b      	sub	sp, #44	; 0x2c
  switch (rf_mode)
 800de78:	2804      	cmp	r0, #4
 800de7a:	f200 8091 	bhi.w	800dfa0 <RF_API_init+0x12c>
 800de7e:	e8df f000 	tbb	[pc, r0]
 800de82:	0d03      	.short	0x0d03
 800de84:	4e2e      	.short	0x4e2e
 800de86:	6e          	.byte	0x6e
 800de87:	00          	.byte	0x00
 800de88:	4604      	mov	r4, r0
      APP_LOG(TS_ON, VLEVEL_M, "RF_API_init in TX\n\r");
 800de8a:	4b46      	ldr	r3, [pc, #280]	; (800dfa4 <RF_API_init+0x130>)
 800de8c:	2201      	movs	r2, #1
 800de8e:	2100      	movs	r1, #0
 800de90:	2002      	movs	r0, #2
 800de92:	f014 f9c3 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  sfx_u8 status = SFX_ERR_NONE;
 800de96:	4620      	mov	r0, r4
}
 800de98:	b00b      	add	sp, #44	; 0x2c
 800de9a:	bd30      	pop	{r4, r5, pc}
      APP_LOG(TS_ON, VLEVEL_M, "RF_API_init in RX\n\r");
 800de9c:	4b42      	ldr	r3, [pc, #264]	; (800dfa8 <RF_API_init+0x134>)
 800de9e:	2201      	movs	r2, #1
 800dea0:	2100      	movs	r1, #0
 800dea2:	2002      	movs	r0, #2
 800dea4:	f014 f9ba 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      Radio.SetRxConfig(MODEM_SIGFOX_RX, 1600,
 800dea8:	4b40      	ldr	r3, [pc, #256]	; (800dfac <RF_API_init+0x138>)
 800deaa:	699d      	ldr	r5, [r3, #24]
 800deac:	2301      	movs	r3, #1
 800deae:	9309      	str	r3, [sp, #36]	; 0x24
 800deb0:	2400      	movs	r4, #0
 800deb2:	9408      	str	r4, [sp, #32]
 800deb4:	9407      	str	r4, [sp, #28]
 800deb6:	9406      	str	r4, [sp, #24]
 800deb8:	9405      	str	r4, [sp, #20]
 800deba:	220f      	movs	r2, #15
 800debc:	9204      	str	r2, [sp, #16]
 800debe:	9303      	str	r3, [sp, #12]
 800dec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dec4:	9302      	str	r3, [sp, #8]
 800dec6:	2302      	movs	r3, #2
 800dec8:	9301      	str	r3, [sp, #4]
 800deca:	9400      	str	r4, [sp, #0]
 800decc:	4623      	mov	r3, r4
 800dece:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ded2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800ded6:	2004      	movs	r0, #4
 800ded8:	47a8      	blx	r5
  sfx_u8 status = SFX_ERR_NONE;
 800deda:	4620      	mov	r0, r4
      break;
 800dedc:	e7dc      	b.n	800de98 <RF_API_init+0x24>
      APP_LOG(TS_ON, VLEVEL_M, "RF_API_init in CS200\n\r");
 800dede:	4b34      	ldr	r3, [pc, #208]	; (800dfb0 <RF_API_init+0x13c>)
 800dee0:	2201      	movs	r2, #1
 800dee2:	2100      	movs	r1, #0
 800dee4:	2002      	movs	r0, #2
 800dee6:	f014 f999 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      Radio.SetRxConfig(MODEM_SIGFOX_RX, 200000,
 800deea:	4b30      	ldr	r3, [pc, #192]	; (800dfac <RF_API_init+0x138>)
 800deec:	699d      	ldr	r5, [r3, #24]
 800deee:	2301      	movs	r3, #1
 800def0:	9309      	str	r3, [sp, #36]	; 0x24
 800def2:	2400      	movs	r4, #0
 800def4:	9408      	str	r4, [sp, #32]
 800def6:	9407      	str	r4, [sp, #28]
 800def8:	9406      	str	r4, [sp, #24]
 800defa:	9405      	str	r4, [sp, #20]
 800defc:	220f      	movs	r2, #15
 800defe:	9204      	str	r2, [sp, #16]
 800df00:	9303      	str	r3, [sp, #12]
 800df02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df06:	9302      	str	r3, [sp, #8]
 800df08:	2302      	movs	r3, #2
 800df0a:	9301      	str	r3, [sp, #4]
 800df0c:	9400      	str	r4, [sp, #0]
 800df0e:	4623      	mov	r3, r4
 800df10:	f44f 7216 	mov.w	r2, #600	; 0x258
 800df14:	4927      	ldr	r1, [pc, #156]	; (800dfb4 <RF_API_init+0x140>)
 800df16:	2004      	movs	r0, #4
 800df18:	47a8      	blx	r5
  sfx_u8 status = SFX_ERR_NONE;
 800df1a:	4620      	mov	r0, r4
      break;
 800df1c:	e7bc      	b.n	800de98 <RF_API_init+0x24>
      APP_LOG(TS_ON, VLEVEL_M, "RF_API_init in CS300\n\r");
 800df1e:	4b26      	ldr	r3, [pc, #152]	; (800dfb8 <RF_API_init+0x144>)
 800df20:	2201      	movs	r2, #1
 800df22:	2100      	movs	r1, #0
 800df24:	2002      	movs	r0, #2
 800df26:	f014 f979 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      Radio.SetRxConfig(MODEM_SIGFOX_RX, 300000,
 800df2a:	4b20      	ldr	r3, [pc, #128]	; (800dfac <RF_API_init+0x138>)
 800df2c:	699d      	ldr	r5, [r3, #24]
 800df2e:	2301      	movs	r3, #1
 800df30:	9309      	str	r3, [sp, #36]	; 0x24
 800df32:	2400      	movs	r4, #0
 800df34:	9408      	str	r4, [sp, #32]
 800df36:	9407      	str	r4, [sp, #28]
 800df38:	9406      	str	r4, [sp, #24]
 800df3a:	9405      	str	r4, [sp, #20]
 800df3c:	220f      	movs	r2, #15
 800df3e:	9204      	str	r2, [sp, #16]
 800df40:	9303      	str	r3, [sp, #12]
 800df42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df46:	9302      	str	r3, [sp, #8]
 800df48:	2302      	movs	r3, #2
 800df4a:	9301      	str	r3, [sp, #4]
 800df4c:	9400      	str	r4, [sp, #0]
 800df4e:	4623      	mov	r3, r4
 800df50:	f44f 7216 	mov.w	r2, #600	; 0x258
 800df54:	4919      	ldr	r1, [pc, #100]	; (800dfbc <RF_API_init+0x148>)
 800df56:	2004      	movs	r0, #4
 800df58:	47a8      	blx	r5
  sfx_u8 status = SFX_ERR_NONE;
 800df5a:	4620      	mov	r0, r4
      break;
 800df5c:	e79c      	b.n	800de98 <RF_API_init+0x24>
      APP_LOG(TS_ON, VLEVEL_M, "RF_API_init in MN20\n\r");
 800df5e:	4b18      	ldr	r3, [pc, #96]	; (800dfc0 <RF_API_init+0x14c>)
 800df60:	2201      	movs	r2, #1
 800df62:	2100      	movs	r1, #0
 800df64:	2002      	movs	r0, #2
 800df66:	f014 f959 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
      Radio.SetRxConfig(MODEM_SIGFOX_RX, 20000,
 800df6a:	4b10      	ldr	r3, [pc, #64]	; (800dfac <RF_API_init+0x138>)
 800df6c:	699d      	ldr	r5, [r3, #24]
 800df6e:	2301      	movs	r3, #1
 800df70:	9309      	str	r3, [sp, #36]	; 0x24
 800df72:	2400      	movs	r4, #0
 800df74:	9408      	str	r4, [sp, #32]
 800df76:	9407      	str	r4, [sp, #28]
 800df78:	9406      	str	r4, [sp, #24]
 800df7a:	9405      	str	r4, [sp, #20]
 800df7c:	220f      	movs	r2, #15
 800df7e:	9204      	str	r2, [sp, #16]
 800df80:	9303      	str	r3, [sp, #12]
 800df82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df86:	9302      	str	r3, [sp, #8]
 800df88:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800df8c:	9301      	str	r3, [sp, #4]
 800df8e:	9400      	str	r4, [sp, #0]
 800df90:	4623      	mov	r3, r4
 800df92:	2264      	movs	r2, #100	; 0x64
 800df94:	f644 6120 	movw	r1, #20000	; 0x4e20
 800df98:	2004      	movs	r0, #4
 800df9a:	47a8      	blx	r5
  sfx_u8 status = SFX_ERR_NONE;
 800df9c:	4620      	mov	r0, r4
      break;
 800df9e:	e77b      	b.n	800de98 <RF_API_init+0x24>
  sfx_u8 status = SFX_ERR_NONE;
 800dfa0:	2030      	movs	r0, #48	; 0x30
 800dfa2:	e779      	b.n	800de98 <RF_API_init+0x24>
 800dfa4:	08027ef8 	.word	0x08027ef8
 800dfa8:	08027f0c 	.word	0x08027f0c
 800dfac:	08028984 	.word	0x08028984
 800dfb0:	08027f20 	.word	0x08027f20
 800dfb4:	00030d40 	.word	0x00030d40
 800dfb8:	08027f38 	.word	0x08027f38
 800dfbc:	000493e0 	.word	0x000493e0
 800dfc0:	08027f50 	.word	0x08027f50

0800dfc4 <RF_API_stop>:
{
 800dfc4:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_M, "RF_API_stop\n\r");
 800dfc6:	4b05      	ldr	r3, [pc, #20]	; (800dfdc <RF_API_stop+0x18>)
 800dfc8:	2201      	movs	r2, #1
 800dfca:	2100      	movs	r1, #0
 800dfcc:	2002      	movs	r0, #2
 800dfce:	f014 f925 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 800dfd2:	4b03      	ldr	r3, [pc, #12]	; (800dfe0 <RF_API_stop+0x1c>)
 800dfd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd6:	4798      	blx	r3
}
 800dfd8:	2000      	movs	r0, #0
 800dfda:	bd08      	pop	{r3, pc}
 800dfdc:	08027f68 	.word	0x08027f68
 800dfe0:	08028984 	.word	0x08028984

0800dfe4 <RF_API_send>:
{
 800dfe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfe8:	b08b      	sub	sp, #44	; 0x2c
 800dfea:	4681      	mov	r9, r0
 800dfec:	460c      	mov	r4, r1
 800dfee:	4615      	mov	r5, r2
  int8_t power = E2P_Read_Power(E2P_Read_Rc());
 800dff0:	f7ff fa0e 	bl	800d410 <E2P_Read_Rc>
 800dff4:	f7ff f97a 	bl	800d2ec <E2P_Read_Power>
 800dff8:	4680      	mov	r8, r0
  APP_LOG(TS_ON, VLEVEL_M, "TX START:nB=%d\n\r", size);
 800dffa:	9500      	str	r5, [sp, #0]
 800dffc:	4b1f      	ldr	r3, [pc, #124]	; (800e07c <RF_API_send+0x98>)
 800dffe:	2201      	movs	r2, #1
 800e000:	2100      	movs	r1, #0
 800e002:	2002      	movs	r0, #2
 800e004:	f014 f90a 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  switch (type)
 800e008:	2c01      	cmp	r4, #1
 800e00a:	d033      	beq.n	800e074 <RF_API_send+0x90>
 800e00c:	2c02      	cmp	r4, #2
 800e00e:	d133      	bne.n	800e078 <RF_API_send+0x94>
      datarate = SFX_DATARATE_600;
 800e010:	f44f 7316 	mov.w	r3, #600	; 0x258
    Radio.SetTxConfig(MODEM_SIGFOX_TX, power, NA,
 800e014:	4f1a      	ldr	r7, [pc, #104]	; (800e080 <RF_API_send+0x9c>)
 800e016:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800e01a:	9208      	str	r2, [sp, #32]
 800e01c:	2400      	movs	r4, #0
 800e01e:	9407      	str	r4, [sp, #28]
 800e020:	9406      	str	r4, [sp, #24]
 800e022:	9405      	str	r4, [sp, #20]
 800e024:	9404      	str	r4, [sp, #16]
 800e026:	9403      	str	r4, [sp, #12]
 800e028:	9402      	str	r4, [sp, #8]
 800e02a:	9401      	str	r4, [sp, #4]
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	4623      	mov	r3, r4
 800e030:	4622      	mov	r2, r4
 800e032:	4641      	mov	r1, r8
 800e034:	2003      	movs	r0, #3
 800e036:	69fe      	ldr	r6, [r7, #28]
 800e038:	47b0      	blx	r6
    Radio.Send(stream, size);
 800e03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03c:	4629      	mov	r1, r5
 800e03e:	4648      	mov	r0, r9
 800e040:	4798      	blx	r3
    APP_LOG(TS_ON, VLEVEL_M, "Wait For End of Tx\n\r");
 800e042:	4b10      	ldr	r3, [pc, #64]	; (800e084 <RF_API_send+0xa0>)
 800e044:	2201      	movs	r2, #1
 800e046:	4621      	mov	r1, r4
 800e048:	2002      	movs	r0, #2
 800e04a:	f014 f8e7 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_TxTimeout);
 800e04e:	2004      	movs	r0, #4
 800e050:	f014 fae8 	bl	8022624 <UTIL_SEQ_WaitEvt>
    APP_LOG(TS_ON, VLEVEL_M, "End Of Tx\n\r");
 800e054:	4b0c      	ldr	r3, [pc, #48]	; (800e088 <RF_API_send+0xa4>)
 800e056:	2201      	movs	r2, #1
 800e058:	4621      	mov	r1, r4
 800e05a:	2002      	movs	r0, #2
 800e05c:	f014 f8de 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "TX END\n\r");
 800e060:	4b0a      	ldr	r3, [pc, #40]	; (800e08c <RF_API_send+0xa8>)
 800e062:	2201      	movs	r2, #1
 800e064:	2100      	movs	r1, #0
 800e066:	2002      	movs	r0, #2
 800e068:	f014 f8d8 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 800e06c:	4620      	mov	r0, r4
 800e06e:	b00b      	add	sp, #44	; 0x2c
 800e070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type)
 800e074:	2364      	movs	r3, #100	; 0x64
 800e076:	e7cd      	b.n	800e014 <RF_API_send+0x30>
 800e078:	2431      	movs	r4, #49	; 0x31
 800e07a:	e7f1      	b.n	800e060 <RF_API_send+0x7c>
 800e07c:	08027f78 	.word	0x08027f78
 800e080:	08028984 	.word	0x08028984
 800e084:	08027f8c 	.word	0x08027f8c
 800e088:	08027fa4 	.word	0x08027fa4
 800e08c:	08027fb0 	.word	0x08027fb0

0800e090 <RF_API_start_continuous_transmission>:
{
 800e090:	b570      	push	{r4, r5, r6, lr}
 800e092:	b08a      	sub	sp, #40	; 0x28
 800e094:	4604      	mov	r4, r0
  int8_t power = E2P_Read_Power(E2P_Read_Rc());
 800e096:	f7ff f9bb 	bl	800d410 <E2P_Read_Rc>
 800e09a:	f7ff f927 	bl	800d2ec <E2P_Read_Power>
  switch (type)
 800e09e:	2c01      	cmp	r4, #1
 800e0a0:	d00a      	beq.n	800e0b8 <RF_API_start_continuous_transmission+0x28>
 800e0a2:	2c02      	cmp	r4, #2
 800e0a4:	d020      	beq.n	800e0e8 <RF_API_start_continuous_transmission+0x58>
 800e0a6:	b114      	cbz	r4, 800e0ae <RF_API_start_continuous_transmission+0x1e>
 800e0a8:	2031      	movs	r0, #49	; 0x31
}
 800e0aa:	b00a      	add	sp, #40	; 0x28
 800e0ac:	bd70      	pop	{r4, r5, r6, pc}
      Radio.TxCw(power);
 800e0ae:	4b1b      	ldr	r3, [pc, #108]	; (800e11c <RF_API_start_continuous_transmission+0x8c>)
 800e0b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0b2:	4798      	blx	r3
  sfx_u8 status = SFX_ERR_NONE;
 800e0b4:	4620      	mov	r0, r4
      break;
 800e0b6:	e7f8      	b.n	800e0aa <RF_API_start_continuous_transmission+0x1a>
      Radio.SetTxConfig(MODEM_SIGFOX_TX, power, NA,
 800e0b8:	4d18      	ldr	r5, [pc, #96]	; (800e11c <RF_API_start_continuous_transmission+0x8c>)
 800e0ba:	69ee      	ldr	r6, [r5, #28]
 800e0bc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e0c0:	9308      	str	r3, [sp, #32]
 800e0c2:	2400      	movs	r4, #0
 800e0c4:	9407      	str	r4, [sp, #28]
 800e0c6:	9406      	str	r4, [sp, #24]
 800e0c8:	9405      	str	r4, [sp, #20]
 800e0ca:	9404      	str	r4, [sp, #16]
 800e0cc:	9403      	str	r4, [sp, #12]
 800e0ce:	9402      	str	r4, [sp, #8]
 800e0d0:	9401      	str	r4, [sp, #4]
 800e0d2:	2364      	movs	r3, #100	; 0x64
 800e0d4:	9300      	str	r3, [sp, #0]
 800e0d6:	4623      	mov	r3, r4
 800e0d8:	4622      	mov	r2, r4
 800e0da:	4601      	mov	r1, r0
 800e0dc:	2003      	movs	r0, #3
 800e0de:	47b0      	blx	r6
      Radio.TxPrbs();
 800e0e0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800e0e2:	4798      	blx	r3
  sfx_u8 status = SFX_ERR_NONE;
 800e0e4:	4620      	mov	r0, r4
      break;
 800e0e6:	e7e0      	b.n	800e0aa <RF_API_start_continuous_transmission+0x1a>
      Radio.SetTxConfig(MODEM_SIGFOX_TX, power, NA,
 800e0e8:	4d0c      	ldr	r5, [pc, #48]	; (800e11c <RF_API_start_continuous_transmission+0x8c>)
 800e0ea:	69ee      	ldr	r6, [r5, #28]
 800e0ec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e0f0:	9308      	str	r3, [sp, #32]
 800e0f2:	2400      	movs	r4, #0
 800e0f4:	9407      	str	r4, [sp, #28]
 800e0f6:	9406      	str	r4, [sp, #24]
 800e0f8:	9405      	str	r4, [sp, #20]
 800e0fa:	9404      	str	r4, [sp, #16]
 800e0fc:	9403      	str	r4, [sp, #12]
 800e0fe:	9402      	str	r4, [sp, #8]
 800e100:	9401      	str	r4, [sp, #4]
 800e102:	f44f 7316 	mov.w	r3, #600	; 0x258
 800e106:	9300      	str	r3, [sp, #0]
 800e108:	4623      	mov	r3, r4
 800e10a:	4622      	mov	r2, r4
 800e10c:	4601      	mov	r1, r0
 800e10e:	2003      	movs	r0, #3
 800e110:	47b0      	blx	r6
      Radio.TxPrbs();
 800e112:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800e114:	4798      	blx	r3
  sfx_u8 status = SFX_ERR_NONE;
 800e116:	4620      	mov	r0, r4
      break;
 800e118:	e7c7      	b.n	800e0aa <RF_API_start_continuous_transmission+0x1a>
 800e11a:	bf00      	nop
 800e11c:	08028984 	.word	0x08028984

0800e120 <RF_API_stop_continuous_transmission>:
{
 800e120:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_M, "RF_API_stop\n\r");
 800e122:	4b05      	ldr	r3, [pc, #20]	; (800e138 <RF_API_stop_continuous_transmission+0x18>)
 800e124:	2201      	movs	r2, #1
 800e126:	2100      	movs	r1, #0
 800e128:	2002      	movs	r0, #2
 800e12a:	f014 f877 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  Radio.Sleep();
 800e12e:	4b03      	ldr	r3, [pc, #12]	; (800e13c <RF_API_stop_continuous_transmission+0x1c>)
 800e130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e132:	4798      	blx	r3
}
 800e134:	2000      	movs	r0, #0
 800e136:	bd08      	pop	{r3, pc}
 800e138:	08027f68 	.word	0x08027f68
 800e13c:	08028984 	.word	0x08028984

0800e140 <RF_API_change_frequency>:
{
 800e140:	b510      	push	{r4, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	4604      	mov	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "RF at Freq %d\n\r", frequency);
 800e146:	9000      	str	r0, [sp, #0]
 800e148:	4b06      	ldr	r3, [pc, #24]	; (800e164 <RF_API_change_frequency+0x24>)
 800e14a:	2201      	movs	r2, #1
 800e14c:	2100      	movs	r1, #0
 800e14e:	2002      	movs	r0, #2
 800e150:	f014 f864 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  Radio.SetChannel(frequency);
 800e154:	4b04      	ldr	r3, [pc, #16]	; (800e168 <RF_API_change_frequency+0x28>)
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	4620      	mov	r0, r4
 800e15a:	4798      	blx	r3
}
 800e15c:	2000      	movs	r0, #0
 800e15e:	b002      	add	sp, #8
 800e160:	bd10      	pop	{r4, pc}
 800e162:	bf00      	nop
 800e164:	08027fbc 	.word	0x08027fbc
 800e168:	08028984 	.word	0x08028984

0800e16c <RF_API_wait_frame>:
{
 800e16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e16e:	4604      	mov	r4, r0
 800e170:	460d      	mov	r5, r1
 800e172:	4616      	mov	r6, r2
  APP_LOG(TS_ON, VLEVEL_M, "RX START\n\r");
 800e174:	4b0f      	ldr	r3, [pc, #60]	; (800e1b4 <RF_API_wait_frame+0x48>)
 800e176:	2201      	movs	r2, #1
 800e178:	2100      	movs	r1, #0
 800e17a:	2002      	movs	r0, #2
 800e17c:	f014 f84e 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  Radio.RxBoosted(0);
 800e180:	4b0d      	ldr	r3, [pc, #52]	; (800e1b8 <RF_API_wait_frame+0x4c>)
 800e182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e184:	2000      	movs	r0, #0
 800e186:	4798      	blx	r3
  RxFrame = frame;
 800e188:	4b0c      	ldr	r3, [pc, #48]	; (800e1bc <RF_API_wait_frame+0x50>)
 800e18a:	601c      	str	r4, [r3, #0]
  if (sfx_wait_end_of_rx() == 1)
 800e18c:	f7ff fe36 	bl	800ddfc <sfx_wait_end_of_rx>
 800e190:	4604      	mov	r4, r0
 800e192:	2801      	cmp	r0, #1
 800e194:	d000      	beq.n	800e198 <RF_API_wait_frame+0x2c>
    ret_state = DL_TIMEOUT;
 800e196:	2400      	movs	r4, #0
  res_rssi = (sfx_s16) RxRssi;
 800e198:	4b09      	ldr	r3, [pc, #36]	; (800e1c0 <RF_API_wait_frame+0x54>)
 800e19a:	f9b3 7000 	ldrsh.w	r7, [r3]
  APP_LOG(TS_ON, VLEVEL_M, "RX END\n\r");
 800e19e:	4b09      	ldr	r3, [pc, #36]	; (800e1c4 <RF_API_wait_frame+0x58>)
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	2002      	movs	r0, #2
 800e1a6:	f014 f839 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  *state = ret_state;
 800e1aa:	7034      	strb	r4, [r6, #0]
  *rssi = res_rssi;
 800e1ac:	802f      	strh	r7, [r5, #0]
}
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	08027fcc 	.word	0x08027fcc
 800e1b8:	08028984 	.word	0x08028984
 800e1bc:	20000d78 	.word	0x20000d78
 800e1c0:	20000d7e 	.word	0x20000d7e
 800e1c4:	08027fd8 	.word	0x08027fd8

0800e1c8 <RF_API_wait_for_clear_channel>:
{
 800e1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1ca:	b083      	sub	sp, #12
 800e1cc:	4604      	mov	r4, r0
 800e1ce:	460d      	mov	r5, r1
 800e1d0:	4616      	mov	r6, r2
  RxCarrierSenseInitStatus();
 800e1d2:	f7fe ffa1 	bl	800d118 <RxCarrierSenseInitStatus>
  Radio.Rx(0);
 800e1d6:	4f18      	ldr	r7, [pc, #96]	; (800e238 <RF_API_wait_for_clear_channel+0x70>)
 800e1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1da:	2000      	movs	r0, #0
 800e1dc:	4798      	blx	r3
  HAL_Delay(Radio.GetWakeupTime());
 800e1de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1e0:	4798      	blx	r3
 800e1e2:	f7f9 f88d 	bl	8007300 <HAL_Delay>
  APP_LOG(TS_ON, VLEVEL_M, "CS start cs_min=%dms, cs_threshold=%dBm\n\r", cs_min, cs_threshold);
 800e1e6:	9501      	str	r5, [sp, #4]
 800e1e8:	9400      	str	r4, [sp, #0]
 800e1ea:	4b14      	ldr	r3, [pc, #80]	; (800e23c <RF_API_wait_for_clear_channel+0x74>)
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	2100      	movs	r1, #0
 800e1f0:	2002      	movs	r0, #2
 800e1f2:	f014 f813 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  while (RxCarrierSenseGetStatus() == 0)
 800e1f6:	f7fe ff95 	bl	800d124 <RxCarrierSenseGetStatus>
 800e1fa:	b938      	cbnz	r0, 800e20c <RF_API_wait_for_clear_channel+0x44>
    if (RF_API_isChannelFree((int16_t) cs_threshold, (uint32_t) cs_min) == true)
 800e1fc:	4621      	mov	r1, r4
 800e1fe:	4628      	mov	r0, r5
 800e200:	f7ff fe20 	bl	800de44 <RF_API_isChannelFree>
 800e204:	2800      	cmp	r0, #0
 800e206:	d0f6      	beq.n	800e1f6 <RF_API_wait_for_clear_channel+0x2e>
      cs_state = DL_PASSED;
 800e208:	2401      	movs	r4, #1
 800e20a:	e000      	b.n	800e20e <RF_API_wait_for_clear_channel+0x46>
  sfx_rx_state_enum_t cs_state = DL_TIMEOUT;
 800e20c:	2400      	movs	r4, #0
  Radio.Standby();
 800e20e:	4b0a      	ldr	r3, [pc, #40]	; (800e238 <RF_API_wait_for_clear_channel+0x70>)
 800e210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e212:	4798      	blx	r3
  if (cs_state == DL_PASSED)
 800e214:	b94c      	cbnz	r4, 800e22a <RF_API_wait_for_clear_channel+0x62>
    APP_LOG(TS_ON, VLEVEL_M, "LBT Channel Busy\n\r");
 800e216:	4b0a      	ldr	r3, [pc, #40]	; (800e240 <RF_API_wait_for_clear_channel+0x78>)
 800e218:	2201      	movs	r2, #1
 800e21a:	2100      	movs	r1, #0
 800e21c:	2002      	movs	r0, #2
 800e21e:	f013 fffd 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  *state = cs_state;
 800e222:	7034      	strb	r4, [r6, #0]
}
 800e224:	2000      	movs	r0, #0
 800e226:	b003      	add	sp, #12
 800e228:	bdf0      	pop	{r4, r5, r6, r7, pc}
    APP_LOG(TS_ON, VLEVEL_M, "LBT Channel Free\n\r");
 800e22a:	4b06      	ldr	r3, [pc, #24]	; (800e244 <RF_API_wait_for_clear_channel+0x7c>)
 800e22c:	2201      	movs	r2, #1
 800e22e:	2100      	movs	r1, #0
 800e230:	2002      	movs	r0, #2
 800e232:	f013 fff3 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 800e236:	e7f4      	b.n	800e222 <RF_API_wait_for_clear_channel+0x5a>
 800e238:	08028984 	.word	0x08028984
 800e23c:	08027fe4 	.word	0x08027fe4
 800e240:	08028024 	.word	0x08028024
 800e244:	08028010 	.word	0x08028010

0800e248 <RF_API_get_version>:
  *version = (sfx_u8 *)rf_api_version;
 800e248:	4b04      	ldr	r3, [pc, #16]	; (800e25c <RF_API_get_version+0x14>)
 800e24a:	6003      	str	r3, [r0, #0]
  if (size == SFX_NULL)
 800e24c:	b119      	cbz	r1, 800e256 <RF_API_get_version+0xe>
  *size = sizeof(rf_api_version);
 800e24e:	220c      	movs	r2, #12
 800e250:	700a      	strb	r2, [r1, #0]
  return status;
 800e252:	2000      	movs	r0, #0
 800e254:	4770      	bx	lr
    return RF_ERR_API_GET_VERSION;
 800e256:	2038      	movs	r0, #56	; 0x38
}
 800e258:	4770      	bx	lr
 800e25a:	bf00      	nop
 800e25c:	20000174 	.word	0x20000174

0800e260 <RF_Tx_Local_loop>:

sfx_u8 RF_Tx_Local_loop(uint32_t freq, uint32_t dataRate, uint8_t *data_buffer, int data_len)
{
 800e260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e264:	b090      	sub	sp, #64	; 0x40
 800e266:	4680      	mov	r8, r0
 800e268:	460f      	mov	r7, r1
 800e26a:	4614      	mov	r4, r2
 800e26c:	461d      	mov	r5, r3
  TxConfigGeneric_t TxConfig;
  sfx_u8 status = SFX_ERR_NONE;
  uint8_t syncword[2] = {0xB2, 0x27};
 800e26e:	f242 73b2 	movw	r3, #10162	; 0x27b2
 800e272:	f8ad 3004 	strh.w	r3, [sp, #4]

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800e276:	482a      	ldr	r0, [pc, #168]	; (800e320 <RF_Tx_Local_loop+0xc0>)
 800e278:	4b2a      	ldr	r3, [pc, #168]	; (800e324 <RF_Tx_Local_loop+0xc4>)
 800e27a:	6003      	str	r3, [r0, #0]
  RadioEvents.RxDone = OnRxDone;
 800e27c:	4b2a      	ldr	r3, [pc, #168]	; (800e328 <RF_Tx_Local_loop+0xc8>)
 800e27e:	6083      	str	r3, [r0, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800e280:	4b2a      	ldr	r3, [pc, #168]	; (800e32c <RF_Tx_Local_loop+0xcc>)
 800e282:	6043      	str	r3, [r0, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800e284:	4b2a      	ldr	r3, [pc, #168]	; (800e330 <RF_Tx_Local_loop+0xd0>)
 800e286:	60c3      	str	r3, [r0, #12]
  RadioEvents.RxError = OnRxError;
 800e288:	4b2a      	ldr	r3, [pc, #168]	; (800e334 <RF_Tx_Local_loop+0xd4>)
 800e28a:	6103      	str	r3, [r0, #16]
  
  Radio.Init(&RadioEvents);
 800e28c:	4e2a      	ldr	r6, [pc, #168]	; (800e338 <RF_Tx_Local_loop+0xd8>)
 800e28e:	6833      	ldr	r3, [r6, #0]
 800e290:	4798      	blx	r3
  
  /* Radio Set frequency */
  Radio.SetChannel(freq);
 800e292:	68f3      	ldr	r3, [r6, #12]
 800e294:	4640      	mov	r0, r8
 800e296:	4798      	blx	r3
  
  /*fsk modulation*/
  TxConfig.fsk.ModulationShaping = RADIO_FSK_MOD_SHAPING_G_BT_1;			//let's make it more sharp
 800e298:	230b      	movs	r3, #11
 800e29a:	f88d 3008 	strb.w	r3, [sp, #8]
  TxConfig.fsk.Bandwidth = FSK_BANDWIDTH;
 800e29e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e2a2:	9303      	str	r3, [sp, #12]
  TxConfig.fsk.FrequencyDeviation = FSK_FDEV;
 800e2a4:	f44f 7348 	mov.w	r3, #800	; 0x320
 800e2a8:	9305      	str	r3, [sp, #20]
  TxConfig.fsk.BitRate = dataRate; /*BitRate*/
 800e2aa:	9704      	str	r7, [sp, #16]
  TxConfig.fsk.PreambleLen = SFX_PREAMBLE_LENGTH; //0xAA 0xAA
 800e2ac:	2302      	movs	r3, #2
 800e2ae:	9306      	str	r3, [sp, #24]
  TxConfig.fsk.SyncWordLength = sizeof(syncword); /*in Byte	   */
 800e2b0:	f88d 301c 	strb.w	r3, [sp, #28]
  TxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800e2b4:	ab01      	add	r3, sp, #4
 800e2b6:	9308      	str	r3, [sp, #32]
  TxConfig.fsk.whiteSeed =  0x01FF ; /*WhiteningSeed	  */
 800e2b8:	f240 13ff 	movw	r3, #511	; 0x1ff
 800e2bc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  TxConfig.fsk.HeaderType  = RADIO_FSK_PACKET_FIXED_LENGTH;	//Sigfox downlink packet has no length field
 800e2c0:	2000      	movs	r0, #0
 800e2c2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
  TxConfig.fsk.CrcLength = RADIO_FSK_CRC_OFF;   //For Sigfox downlink packet
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  TxConfig.fsk.CrcPolynomial = 0x8005;
 800e2cc:	f248 0305 	movw	r3, #32773	; 0x8005
 800e2d0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  TxConfig.fsk.CrcSeed = 0xFFFF;
 800e2d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2d8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  TxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF; 	//For Sigfox downlink packet
 800e2dc:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
  if (0UL != Radio.RadioSetTxGenericConfig(GENERIC_FSK, &TxConfig, 14, 3000))
 800e2e0:	6fb6      	ldr	r6, [r6, #120]	; 0x78
 800e2e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e2e6:	220e      	movs	r2, #14
 800e2e8:	a902      	add	r1, sp, #8
 800e2ea:	47b0      	blx	r6
 800e2ec:	b100      	cbz	r0, 800e2f0 <RF_Tx_Local_loop+0x90>
  {
   while (1);
 800e2ee:	e7fe      	b.n	800e2ee <RF_Tx_Local_loop+0x8e>
  }
  
  Radio.Send(data_buffer, data_len);
 800e2f0:	4b11      	ldr	r3, [pc, #68]	; (800e338 <RF_Tx_Local_loop+0xd8>)
 800e2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2f4:	b2e9      	uxtb	r1, r5
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	4798      	blx	r3
  APP_LOG(TS_ON, VLEVEL_M, "Wait For End of Tx\n\r");
 800e2fa:	4b10      	ldr	r3, [pc, #64]	; (800e33c <RF_Tx_Local_loop+0xdc>)
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	2100      	movs	r1, #0
 800e300:	2002      	movs	r0, #2
 800e302:	f013 ff8b 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
  
  UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_TxTimeout);
 800e306:	2004      	movs	r0, #4
 800e308:	f014 f98c 	bl	8022624 <UTIL_SEQ_WaitEvt>
  
  APP_LOG(TS_ON, VLEVEL_M, "End Of Tx\n\r");
 800e30c:	4b0c      	ldr	r3, [pc, #48]	; (800e340 <RF_Tx_Local_loop+0xe0>)
 800e30e:	2201      	movs	r2, #1
 800e310:	2100      	movs	r1, #0
 800e312:	2002      	movs	r0, #2
 800e314:	f013 ff82 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>

  return status;

}
 800e318:	2000      	movs	r0, #0
 800e31a:	b010      	add	sp, #64	; 0x40
 800e31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e320:	20000d5c 	.word	0x20000d5c
 800e324:	0800dda1 	.word	0x0800dda1
 800e328:	0800ddbd 	.word	0x0800ddbd
 800e32c:	0800dd85 	.word	0x0800dd85
 800e330:	0800dd61 	.word	0x0800dd61
 800e334:	0800dd3d 	.word	0x0800dd3d
 800e338:	08028984 	.word	0x08028984
 800e33c:	08027f8c 	.word	0x08027f8c
 800e340:	08027fa4 	.word	0x08027fa4

0800e344 <SE_NVM_get>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
sfx_u8 SE_NVM_get(sfx_u8 read_data[SFX_SE_NVMEM_BLOCK_SIZE])
{
 800e344:	b508      	push	{r3, lr}
  sfx_u8  ret = SFX_ERR_NONE;
  /* USER CODE BEGIN SE_NVM_get_1 */

  /* USER CODE END SE_NVM_get_1 */

  if (E2P_Read_SeNvm(read_data, SFX_SE_NVMEM_BLOCK_SIZE) != E2P_OK)
 800e346:	2105      	movs	r1, #5
 800e348:	f7ff f98d 	bl	800d666 <E2P_Read_SeNvm>
 800e34c:	2801      	cmp	r0, #1
 800e34e:	d001      	beq.n	800e354 <SE_NVM_get+0x10>
  {
    ret = SE_ERR_API_SE_NVM;
 800e350:	204a      	movs	r0, #74	; 0x4a

  /* USER CODE BEGIN SE_NVM_get_2 */

  /* USER CODE END SE_NVM_get_2 */
  return ret;
}
 800e352:	bd08      	pop	{r3, pc}
  sfx_u8  ret = SFX_ERR_NONE;
 800e354:	2000      	movs	r0, #0
 800e356:	e7fc      	b.n	800e352 <SE_NVM_get+0xe>

0800e358 <SE_NVM_set>:

sfx_u8 SE_NVM_set(sfx_u8 data_to_write[SFX_SE_NVMEM_BLOCK_SIZE])
{
 800e358:	b508      	push	{r3, lr}
  sfx_u8  ret = SFX_ERR_NONE;
  /* USER CODE BEGIN SE_NVM_set_1 */

  /* USER CODE END SE_NVM_set_1 */

  if (E2P_Write_SeNvm(data_to_write, SFX_SE_NVMEM_BLOCK_SIZE) != E2P_OK)
 800e35a:	2105      	movs	r1, #5
 800e35c:	f7ff f9b3 	bl	800d6c6 <E2P_Write_SeNvm>
 800e360:	2801      	cmp	r0, #1
 800e362:	d001      	beq.n	800e368 <SE_NVM_set+0x10>
  {
    ret = SE_ERR_API_SE_NVM;
 800e364:	204a      	movs	r0, #74	; 0x4a
  }
  /* USER CODE BEGIN SE_NVM_set_2 */

  /* USER CODE END SE_NVM_set_2 */
  return ret;
}
 800e366:	bd08      	pop	{r3, pc}
  sfx_u8  ret = SFX_ERR_NONE;
 800e368:	2000      	movs	r0, #0
 800e36a:	e7fc      	b.n	800e366 <SE_NVM_set+0xe>

0800e36c <SE_NVM_get_key_type>:

sfx_key_type_t SE_NVM_get_key_type(void)
{
 800e36c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SE_NVM_get_key_type_1 */

  /* USER CODE END SE_NVM_get_key_type_1 */
  return E2P_Read_KeyType();
 800e36e:	f7ff f897 	bl	800d4a0 <E2P_Read_KeyType>
  /* USER CODE BEGIN SE_NVM_get_key_type_2 */

  /* USER CODE END SE_NVM_get_key_type_2 */
}
 800e372:	bd08      	pop	{r3, pc}

0800e374 <SE_NVM_get_encrypt_flag>:

  /* USER CODE END SE_NVM_set_key_type_2 */
}

sfx_u8 SE_NVM_get_encrypt_flag(void)
{
 800e374:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SE_NVM_get_encrypt_flag_1 */

  /* USER CODE END SE_NVM_get_encrypt_flag_1 */
  return E2P_Read_EncryptionFlag();
 800e376:	f7ff f8ab 	bl	800d4d0 <E2P_Read_EncryptionFlag>
  /* USER CODE BEGIN SE_NVM_get_encrypt_flag_2 */

  /* USER CODE END SE_NVM_get_encrypt_flag_2 */
}
 800e37a:	bd08      	pop	{r3, pc}

0800e37c <CREDENTIALS_get_payload_encryption_flag>:
}
#endif /* !FEATURE_SECURE_MODE */


sfx_bool CREDENTIALS_get_payload_encryption_flag(void)
{
 800e37c:	b508      	push	{r3, lr}
  sfx_bool ret = SFX_FALSE;

  ret = (sfx_bool) SE_NVM_get_encrypt_flag();
 800e37e:	f7ff fff9 	bl	800e374 <SE_NVM_get_encrypt_flag>
  /* USER CODE BEGIN CREDENTIALS_get_payload_encryption_flag_1 */

  /* USER CODE END CREDENTIALS_get_payload_encryption_flag_1 */
  return ret;
}
 800e382:	bd08      	pop	{r3, pc}

0800e384 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e384:	480d      	ldr	r0, [pc, #52]	; (800e3bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800e386:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800e388:	f000 f825 	bl	800e3d6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e38c:	480c      	ldr	r0, [pc, #48]	; (800e3c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800e38e:	490d      	ldr	r1, [pc, #52]	; (800e3c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800e390:	4a0d      	ldr	r2, [pc, #52]	; (800e3c8 <LoopForever+0xe>)
  movs r3, #0
 800e392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e394:	e002      	b.n	800e39c <LoopCopyDataInit>

0800e396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e39a:	3304      	adds	r3, #4

0800e39c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e39c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e39e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e3a0:	d3f9      	bcc.n	800e396 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e3a2:	4a0a      	ldr	r2, [pc, #40]	; (800e3cc <LoopForever+0x12>)
  ldr r4, =_ebss
 800e3a4:	4c0a      	ldr	r4, [pc, #40]	; (800e3d0 <LoopForever+0x16>)
  movs r3, #0
 800e3a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e3a8:	e001      	b.n	800e3ae <LoopFillZerobss>

0800e3aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e3aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e3ac:	3204      	adds	r2, #4

0800e3ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e3ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e3b0:	d3fb      	bcc.n	800e3aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800e3b2:	f015 fd6f 	bl	8023e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e3b6:	f7f8 fc71 	bl	8006c9c <main>

0800e3ba <LoopForever>:

LoopForever:
    b LoopForever
 800e3ba:	e7fe      	b.n	800e3ba <LoopForever>
  ldr   r0, =_estack
 800e3bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800e3c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e3c4:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 800e3c8:	08029378 	.word	0x08029378
  ldr r2, =_sbss
 800e3cc:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 800e3d0:	20002954 	.word	0x20002954

0800e3d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e3d4:	e7fe      	b.n	800e3d4 <ADC_IRQHandler>

0800e3d6 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800e3d6:	4770      	bx	lr

0800e3d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e3d8:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e3da:	2003      	movs	r0, #3
 800e3dc:	f000 fce6 	bl	800edac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e3e0:	f001 ff00 	bl	80101e4 <HAL_RCC_GetHCLKFreq>
 800e3e4:	4b06      	ldr	r3, [pc, #24]	; (800e400 <HAL_Init+0x28>)
 800e3e6:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e3e8:	200f      	movs	r0, #15
 800e3ea:	f7f8 ff83 	bl	80072f4 <HAL_InitTick>
 800e3ee:	b110      	cbz	r0, 800e3f6 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800e3f0:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	bd10      	pop	{r4, pc}
 800e3f6:	4604      	mov	r4, r0
    HAL_MspInit();
 800e3f8:	f7f8 fdd4 	bl	8006fa4 <HAL_MspInit>
 800e3fc:	e7f9      	b.n	800e3f2 <HAL_Init+0x1a>
 800e3fe:	bf00      	nop
 800e400:	20000180 	.word	0x20000180

0800e404 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800e404:	4a02      	ldr	r2, [pc, #8]	; (800e410 <HAL_SuspendTick+0xc>)
 800e406:	6813      	ldr	r3, [r2, #0]
 800e408:	f023 0302 	bic.w	r3, r3, #2
 800e40c:	6013      	str	r3, [r2, #0]
}
 800e40e:	4770      	bx	lr
 800e410:	e000e010 	.word	0xe000e010

0800e414 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800e414:	4a02      	ldr	r2, [pc, #8]	; (800e420 <HAL_ResumeTick+0xc>)
 800e416:	6813      	ldr	r3, [r2, #0]
 800e418:	f043 0302 	orr.w	r3, r3, #2
 800e41c:	6013      	str	r3, [r2, #0]
}
 800e41e:	4770      	bx	lr
 800e420:	e000e010 	.word	0xe000e010

0800e424 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 800e424:	4b01      	ldr	r3, [pc, #4]	; (800e42c <HAL_GetUIDw0+0x8>)
 800e426:	6818      	ldr	r0, [r3, #0]
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop
 800e42c:	1fff7590 	.word	0x1fff7590

0800e430 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 800e430:	4b01      	ldr	r3, [pc, #4]	; (800e438 <HAL_GetUIDw1+0x8>)
 800e432:	6818      	ldr	r0, [r3, #0]
 800e434:	4770      	bx	lr
 800e436:	bf00      	nop
 800e438:	1fff7594 	.word	0x1fff7594

0800e43c <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 800e43c:	4b01      	ldr	r3, [pc, #4]	; (800e444 <HAL_GetUIDw2+0x8>)
 800e43e:	6818      	ldr	r0, [r3, #0]
 800e440:	4770      	bx	lr
 800e442:	bf00      	nop
 800e444:	1fff7598 	.word	0x1fff7598

0800e448 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800e448:	4a02      	ldr	r2, [pc, #8]	; (800e454 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800e44a:	6853      	ldr	r3, [r2, #4]
 800e44c:	f043 0301 	orr.w	r3, r3, #1
 800e450:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 800e452:	4770      	bx	lr
 800e454:	e0042000 	.word	0xe0042000

0800e458 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800e458:	4a02      	ldr	r2, [pc, #8]	; (800e464 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 800e45a:	6853      	ldr	r3, [r2, #4]
 800e45c:	f023 0301 	bic.w	r3, r3, #1
 800e460:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 800e462:	4770      	bx	lr
 800e464:	e0042000 	.word	0xe0042000

0800e468 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800e468:	4a02      	ldr	r2, [pc, #8]	; (800e474 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800e46a:	6853      	ldr	r3, [r2, #4]
 800e46c:	f043 0302 	orr.w	r3, r3, #2
 800e470:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 800e472:	4770      	bx	lr
 800e474:	e0042000 	.word	0xe0042000

0800e478 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800e478:	4a02      	ldr	r2, [pc, #8]	; (800e484 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 800e47a:	6853      	ldr	r3, [r2, #4]
 800e47c:	f023 0302 	bic.w	r3, r3, #2
 800e480:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 800e482:	4770      	bx	lr
 800e484:	e0042000 	.word	0xe0042000

0800e488 <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800e488:	4a02      	ldr	r2, [pc, #8]	; (800e494 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 800e48a:	6853      	ldr	r3, [r2, #4]
 800e48c:	f043 0304 	orr.w	r3, r3, #4
 800e490:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 800e492:	4770      	bx	lr
 800e494:	e0042000 	.word	0xe0042000

0800e498 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800e498:	4a02      	ldr	r2, [pc, #8]	; (800e4a4 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 800e49a:	6853      	ldr	r3, [r2, #4]
 800e49c:	f023 0304 	bic.w	r3, r3, #4
 800e4a0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 800e4a2:	4770      	bx	lr
 800e4a4:	e0042000 	.word	0xe0042000

0800e4a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800e4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4aa:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	f000 8121 	beq.w	800e6f8 <HAL_ADC_Init+0x250>
 800e4b6:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800e4b8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800e4ba:	b1bb      	cbz	r3, 800e4ec <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800e4bc:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800e4be:	6893      	ldr	r3, [r2, #8]
 800e4c0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800e4c4:	d11f      	bne.n	800e506 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 800e4c6:	6893      	ldr	r3, [r2, #8]
 800e4c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800e4cc:	f023 0317 	bic.w	r3, r3, #23
 800e4d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e4d4:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e4d6:	4b89      	ldr	r3, [pc, #548]	; (800e6fc <HAL_ADC_Init+0x254>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	099b      	lsrs	r3, r3, #6
 800e4dc:	4a88      	ldr	r2, [pc, #544]	; (800e700 <HAL_ADC_Init+0x258>)
 800e4de:	fba2 2303 	umull	r2, r3, r2, r3
 800e4e2:	099b      	lsrs	r3, r3, #6
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	005b      	lsls	r3, r3, #1
 800e4e8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800e4ea:	e009      	b.n	800e500 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 800e4ec:	f7f8 f9fe 	bl	80068ec <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800e4f4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800e4f8:	e7e0      	b.n	800e4bc <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800e4fa:	9b01      	ldr	r3, [sp, #4]
 800e4fc:	3b01      	subs	r3, #1
 800e4fe:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800e500:	9b01      	ldr	r3, [sp, #4]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d1f9      	bne.n	800e4fa <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800e506:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800e508:	6893      	ldr	r3, [r2, #8]
 800e50a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800e50e:	d109      	bne.n	800e524 <HAL_ADC_Init+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e510:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e512:	f043 0310 	orr.w	r3, r3, #16
 800e516:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e518:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e51a:	f043 0301 	orr.w	r3, r3, #1
 800e51e:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800e520:	2001      	movs	r0, #1
 800e522:	e000      	b.n	800e526 <HAL_ADC_Init+0x7e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e524:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800e526:	6893      	ldr	r3, [r2, #8]
 800e528:	f013 0304 	ands.w	r3, r3, #4
 800e52c:	d000      	beq.n	800e530 <HAL_ADC_Init+0x88>
 800e52e:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800e530:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e532:	f011 0f10 	tst.w	r1, #16
 800e536:	f040 80d8 	bne.w	800e6ea <HAL_ADC_Init+0x242>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f040 80d5 	bne.w	800e6ea <HAL_ADC_Init+0x242>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e540:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e542:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 800e546:	f041 0102 	orr.w	r1, r1, #2
 800e54a:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e54c:	6891      	ldr	r1, [r2, #8]
 800e54e:	f011 0f01 	tst.w	r1, #1
 800e552:	d131      	bne.n	800e5b8 <HAL_ADC_Init+0x110>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800e554:	68d1      	ldr	r1, [r2, #12]
 800e556:	f021 0118 	bic.w	r1, r1, #24
 800e55a:	68a5      	ldr	r5, [r4, #8]
 800e55c:	4329      	orrs	r1, r5
 800e55e:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800e560:	6862      	ldr	r2, [r4, #4]
 800e562:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800e566:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800e568:	4315      	orrs	r5, r2
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800e56a:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800e56e:	2901      	cmp	r1, #1
 800e570:	d018      	beq.n	800e5a4 <HAL_ADC_Init+0xfc>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800e572:	6821      	ldr	r1, [r4, #0]
 800e574:	690e      	ldr	r6, [r1, #16]
 800e576:	4a63      	ldr	r2, [pc, #396]	; (800e704 <HAL_ADC_Init+0x25c>)
 800e578:	4032      	ands	r2, r6
 800e57a:	432a      	orrs	r2, r5
 800e57c:	610a      	str	r2, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800e57e:	6862      	ldr	r2, [r4, #4]
 800e580:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800e584:	d019      	beq.n	800e5ba <HAL_ADC_Init+0x112>
 800e586:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800e58a:	d016      	beq.n	800e5ba <HAL_ADC_Init+0x112>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800e58c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800e590:	d013      	beq.n	800e5ba <HAL_ADC_Init+0x112>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800e592:	4e5d      	ldr	r6, [pc, #372]	; (800e708 <HAL_ADC_Init+0x260>)
 800e594:	6831      	ldr	r1, [r6, #0]
 800e596:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 800e59a:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 800e59e:	430a      	orrs	r2, r1
 800e5a0:	6032      	str	r2, [r6, #0]
 800e5a2:	e00a      	b.n	800e5ba <HAL_ADC_Init+0x112>
                     hadc->Init.Oversampling.Ratio         |
 800e5a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800e5a6:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 800e5a8:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800e5aa:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 800e5ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800e5ae:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800e5b0:	4315      	orrs	r5, r2
 800e5b2:	f045 0501 	orr.w	r5, r5, #1
 800e5b6:	e7dc      	b.n	800e572 <HAL_ADC_Init+0xca>
  uint32_t tmpCFGR2 = 0UL;
 800e5b8:	461d      	mov	r5, r3
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800e5ba:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800e5bc:	7e62      	ldrb	r2, [r4, #25]
 800e5be:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800e5c0:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800e5c4:	7ea6      	ldrb	r6, [r4, #26]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800e5c6:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800e5ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e5cc:	b109      	cbz	r1, 800e5d2 <HAL_ADC_Init+0x12a>
 800e5ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800e5d2:	430a      	orrs	r2, r1
                 hadc->Init.DataAlign                                           |
 800e5d4:	68e1      	ldr	r1, [r4, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800e5d6:	430a      	orrs	r2, r1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800e5d8:	6921      	ldr	r1, [r4, #16]
 800e5da:	2900      	cmp	r1, #0
 800e5dc:	db47      	blt.n	800e66e <HAL_ADC_Init+0x1c6>
 800e5de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 800e5e2:	430a      	orrs	r2, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800e5e4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800e5e8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800e5ec:	f894 1020 	ldrb.w	r1, [r4, #32]
 800e5f0:	2901      	cmp	r1, #1
 800e5f2:	d03f      	beq.n	800e674 <HAL_ADC_Init+0x1cc>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e5f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e5f6:	b121      	cbz	r1, 800e602 <HAL_ADC_Init+0x15a>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800e5f8:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 800e5fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800e5fe:	4331      	orrs	r1, r6
 800e600:	430a      	orrs	r2, r1
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 800e602:	6826      	ldr	r6, [r4, #0]
 800e604:	68f1      	ldr	r1, [r6, #12]
 800e606:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 800e60a:	f421 71f3 	bic.w	r1, r1, #486	; 0x1e6
 800e60e:	4311      	orrs	r1, r2
 800e610:	60f1      	str	r1, [r6, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800e612:	6826      	ldr	r6, [r4, #0]
 800e614:	6937      	ldr	r7, [r6, #16]
 800e616:	493d      	ldr	r1, [pc, #244]	; (800e70c <HAL_ADC_Init+0x264>)
 800e618:	4039      	ands	r1, r7
 800e61a:	430d      	orrs	r5, r1
 800e61c:	6135      	str	r5, [r6, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800e61e:	6826      	ldr	r6, [r4, #0]
 800e620:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 800e622:	6975      	ldr	r5, [r6, #20]
 800e624:	f025 0507 	bic.w	r5, r5, #7
 800e628:	4329      	orrs	r1, r5
 800e62a:	6171      	str	r1, [r6, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800e62c:	6825      	ldr	r5, [r4, #0]
 800e62e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e630:	6969      	ldr	r1, [r5, #20]
 800e632:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800e636:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 800e63a:	6169      	str	r1, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800e63c:	6921      	ldr	r1, [r4, #16]
 800e63e:	bb31      	cbnz	r1, 800e68e <HAL_ADC_Init+0x1e6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800e640:	6821      	ldr	r1, [r4, #0]
 800e642:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800e644:	f063 030f 	orn	r3, r3, #15
 800e648:	628b      	str	r3, [r1, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800e64a:	6823      	ldr	r3, [r4, #0]
 800e64c:	68d9      	ldr	r1, [r3, #12]
 800e64e:	4b30      	ldr	r3, [pc, #192]	; (800e710 <HAL_ADC_Init+0x268>)
 800e650:	400b      	ands	r3, r1
 800e652:	4293      	cmp	r3, r2
 800e654:	d040      	beq.n	800e6d8 <HAL_ADC_Init+0x230>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800e656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e658:	f023 0312 	bic.w	r3, r3, #18
 800e65c:	f043 0310 	orr.w	r3, r3, #16
 800e660:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e662:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e664:	f043 0301 	orr.w	r3, r3, #1
 800e668:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800e66a:	2001      	movs	r0, #1
 800e66c:	e042      	b.n	800e6f4 <HAL_ADC_Init+0x24c>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800e66e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e672:	e7b6      	b.n	800e5e2 <HAL_ADC_Init+0x13a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800e674:	b916      	cbnz	r6, 800e67c <HAL_ADC_Init+0x1d4>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800e676:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e67a:	e7bb      	b.n	800e5f4 <HAL_ADC_Init+0x14c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e67c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e67e:	f041 0120 	orr.w	r1, r1, #32
 800e682:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e684:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e686:	f041 0101 	orr.w	r1, r1, #1
 800e68a:	65e1      	str	r1, [r4, #92]	; 0x5c
 800e68c:	e7b2      	b.n	800e5f4 <HAL_ADC_Init+0x14c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800e68e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800e692:	d1da      	bne.n	800e64a <HAL_ADC_Init+0x1a2>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800e694:	2b07      	cmp	r3, #7
 800e696:	d808      	bhi.n	800e6aa <HAL_ADC_Init+0x202>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800e698:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800e69a:	009d      	lsls	r5, r3, #2
 800e69c:	40e9      	lsrs	r1, r5
 800e69e:	f001 010f 	and.w	r1, r1, #15
 800e6a2:	290f      	cmp	r1, #15
 800e6a4:	d001      	beq.n	800e6aa <HAL_ADC_Init+0x202>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	e7f4      	b.n	800e694 <HAL_ADC_Init+0x1ec>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d00e      	beq.n	800e6cc <HAL_ADC_Init+0x224>
        MODIFY_REG(hadc->Instance->CHSELR,
 800e6ae:	6825      	ldr	r5, [r4, #0]
 800e6b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e6b2:	69e3      	ldr	r3, [r4, #28]
 800e6b4:	3b01      	subs	r3, #1
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	f003 031c 	and.w	r3, r3, #28
 800e6bc:	f06f 010f 	mvn.w	r1, #15
 800e6c0:	fa01 f303 	lsl.w	r3, r1, r3
 800e6c4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800e6c6:	430b      	orrs	r3, r1
 800e6c8:	62ab      	str	r3, [r5, #40]	; 0x28
 800e6ca:	e7be      	b.n	800e64a <HAL_ADC_Init+0x1a2>
        SET_BIT(hadc->Instance->CHSELR,
 800e6cc:	6821      	ldr	r1, [r4, #0]
 800e6ce:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800e6d0:	f063 030f 	orn	r3, r3, #15
 800e6d4:	628b      	str	r3, [r1, #40]	; 0x28
 800e6d6:	e7b8      	b.n	800e64a <HAL_ADC_Init+0x1a2>
      ADC_CLEAR_ERRORCODE(hadc);
 800e6d8:	2300      	movs	r3, #0
 800e6da:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800e6dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e6de:	f023 0303 	bic.w	r3, r3, #3
 800e6e2:	f043 0301 	orr.w	r3, r3, #1
 800e6e6:	65a3      	str	r3, [r4, #88]	; 0x58
 800e6e8:	e004      	b.n	800e6f4 <HAL_ADC_Init+0x24c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e6ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e6ec:	f043 0310 	orr.w	r3, r3, #16
 800e6f0:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800e6f2:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 800e6f4:	b003      	add	sp, #12
 800e6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800e6f8:	2001      	movs	r0, #1
 800e6fa:	e7fb      	b.n	800e6f4 <HAL_ADC_Init+0x24c>
 800e6fc:	20000180 	.word	0x20000180
 800e700:	053e2d63 	.word	0x053e2d63
 800e704:	1ffffc02 	.word	0x1ffffc02
 800e708:	40012708 	.word	0x40012708
 800e70c:	dffffc02 	.word	0xdffffc02
 800e710:	833fffe7 	.word	0x833fffe7

0800e714 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800e714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e716:	4604      	mov	r4, r0
 800e718:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800e71a:	6946      	ldr	r6, [r0, #20]
 800e71c:	2e08      	cmp	r6, #8
 800e71e:	d005      	beq.n	800e72c <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800e720:	6803      	ldr	r3, [r0, #0]
 800e722:	68db      	ldr	r3, [r3, #12]
 800e724:	f013 0f01 	tst.w	r3, #1
 800e728:	d11e      	bne.n	800e768 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800e72a:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800e72c:	f7f8 fde4 	bl	80072f8 <HAL_GetTick>
 800e730:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800e732:	6823      	ldr	r3, [r4, #0]
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	4232      	tst	r2, r6
 800e738:	d11c      	bne.n	800e774 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800e73a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e73e:	d0f8      	beq.n	800e732 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800e740:	f7f8 fdda 	bl	80072f8 <HAL_GetTick>
 800e744:	1bc3      	subs	r3, r0, r7
 800e746:	42ab      	cmp	r3, r5
 800e748:	d801      	bhi.n	800e74e <HAL_ADC_PollForConversion+0x3a>
 800e74a:	2d00      	cmp	r5, #0
 800e74c:	d1f1      	bne.n	800e732 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800e74e:	6823      	ldr	r3, [r4, #0]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4233      	tst	r3, r6
 800e754:	d1ed      	bne.n	800e732 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800e756:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e758:	f043 0304 	orr.w	r3, r3, #4
 800e75c:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800e75e:	2300      	movs	r3, #0
 800e760:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 800e764:	2003      	movs	r0, #3
 800e766:	e028      	b.n	800e7ba <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e768:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800e76a:	f043 0320 	orr.w	r3, r3, #32
 800e76e:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 800e770:	2001      	movs	r0, #1
 800e772:	e022      	b.n	800e7ba <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e774:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e77a:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800e77c:	68da      	ldr	r2, [r3, #12]
 800e77e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800e782:	d115      	bne.n	800e7b0 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800e784:	7ea2      	ldrb	r2, [r4, #26]
 800e786:	b99a      	cbnz	r2, 800e7b0 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	f012 0f08 	tst.w	r2, #8
 800e78e:	d00f      	beq.n	800e7b0 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800e790:	689a      	ldr	r2, [r3, #8]
 800e792:	f012 0f04 	tst.w	r2, #4
 800e796:	d111      	bne.n	800e7bc <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e798:	685a      	ldr	r2, [r3, #4]
 800e79a:	f022 020c 	bic.w	r2, r2, #12
 800e79e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800e7a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e7a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e7a6:	f023 0301 	bic.w	r3, r3, #1
 800e7aa:	f043 0301 	orr.w	r3, r3, #1
 800e7ae:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800e7b0:	7e20      	ldrb	r0, [r4, #24]
 800e7b2:	b960      	cbnz	r0, 800e7ce <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e7b4:	6823      	ldr	r3, [r4, #0]
 800e7b6:	220c      	movs	r2, #12
 800e7b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800e7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e7bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e7be:	f043 0320 	orr.w	r3, r3, #32
 800e7c2:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e7c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e7c6:	f043 0301 	orr.w	r3, r3, #1
 800e7ca:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e7cc:	e7f0      	b.n	800e7b0 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 800e7ce:	2000      	movs	r0, #0
 800e7d0:	e7f3      	b.n	800e7ba <HAL_ADC_PollForConversion+0xa6>

0800e7d2 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800e7d2:	6803      	ldr	r3, [r0, #0]
 800e7d4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800e7d6:	4770      	bx	lr

0800e7d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800e7d8:	b470      	push	{r4, r5, r6}
 800e7da:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800e7dc:	2200      	movs	r2, #0
 800e7de:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e7e0:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800e7e2:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 800e7e6:	2a01      	cmp	r2, #1
 800e7e8:	f000 80ee 	beq.w	800e9c8 <HAL_ADC_ConfigChannel+0x1f0>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e7f4:	6802      	ldr	r2, [r0, #0]
 800e7f6:	6890      	ldr	r0, [r2, #8]
 800e7f8:	f010 0f04 	tst.w	r0, #4
 800e7fc:	d00a      	beq.n	800e814 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e7fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e800:	f042 0220 	orr.w	r2, r2, #32
 800e804:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800e806:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 800e808:	2200      	movs	r2, #0
 800e80a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 800e80e:	b003      	add	sp, #12
 800e810:	bc70      	pop	{r4, r5, r6}
 800e812:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 800e814:	6848      	ldr	r0, [r1, #4]
 800e816:	2802      	cmp	r0, #2
 800e818:	f000 8097 	beq.w	800e94a <HAL_ADC_ConfigChannel+0x172>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e81c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800e820:	d029      	beq.n	800e876 <HAL_ADC_ConfigChannel+0x9e>
 800e822:	4d6a      	ldr	r5, [pc, #424]	; (800e9cc <HAL_ADC_ConfigChannel+0x1f4>)
 800e824:	42ac      	cmp	r4, r5
 800e826:	d026      	beq.n	800e876 <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800e828:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800e82a:	f000 001f 	and.w	r0, r0, #31
 800e82e:	250f      	movs	r5, #15
 800e830:	4085      	lsls	r5, r0
 800e832:	ea24 0505 	bic.w	r5, r4, r5
 800e836:	680c      	ldr	r4, [r1, #0]
 800e838:	f3c4 0611 	ubfx	r6, r4, #0, #18
 800e83c:	2e00      	cmp	r6, #0
 800e83e:	d133      	bne.n	800e8a8 <HAL_ADC_ConfigChannel+0xd0>
 800e840:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800e844:	fa04 f000 	lsl.w	r0, r4, r0
 800e848:	4328      	orrs	r0, r5
 800e84a:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800e84c:	684c      	ldr	r4, [r1, #4]
 800e84e:	08a0      	lsrs	r0, r4, #2
 800e850:	3001      	adds	r0, #1
 800e852:	69dd      	ldr	r5, [r3, #28]
 800e854:	42a8      	cmp	r0, r5
 800e856:	d814      	bhi.n	800e882 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800e858:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 800e85a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800e85c:	f004 041f 	and.w	r4, r4, #31
 800e860:	260f      	movs	r6, #15
 800e862:	40a6      	lsls	r6, r4
 800e864:	ea20 0006 	bic.w	r0, r0, r6
 800e868:	f3c5 6583 	ubfx	r5, r5, #26, #4
 800e86c:	fa05 f404 	lsl.w	r4, r5, r4
 800e870:	4304      	orrs	r4, r0
 800e872:	6294      	str	r4, [r2, #40]	; 0x28
}
 800e874:	e005      	b.n	800e882 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800e876:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800e878:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800e87a:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800e87e:	4320      	orrs	r0, r4
 800e880:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800e882:	681d      	ldr	r5, [r3, #0]
 800e884:	680e      	ldr	r6, [r1, #0]
 800e886:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 800e888:	696c      	ldr	r4, [r5, #20]
 800e88a:	ea24 2406 	bic.w	r4, r4, r6, lsl #8
 800e88e:	ea00 2206 	and.w	r2, r0, r6, lsl #8
 800e892:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 800e896:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800e89a:	4322      	orrs	r2, r4
 800e89c:	616a      	str	r2, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800e89e:	680a      	ldr	r2, [r1, #0]
 800e8a0:	2a00      	cmp	r2, #0
 800e8a2:	db09      	blt.n	800e8b8 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	e7af      	b.n	800e808 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e8a8:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800e8ac:	b114      	cbz	r4, 800e8b4 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800e8ae:	fab4 f484 	clz	r4, r4
 800e8b2:	e7c7      	b.n	800e844 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 800e8b4:	2420      	movs	r4, #32
 800e8b6:	e7c5      	b.n	800e844 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800e8b8:	4945      	ldr	r1, [pc, #276]	; (800e9d0 <HAL_ADC_ConfigChannel+0x1f8>)
 800e8ba:	6808      	ldr	r0, [r1, #0]
 800e8bc:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800e8c0:	4c44      	ldr	r4, [pc, #272]	; (800e9d4 <HAL_ADC_ConfigChannel+0x1fc>)
 800e8c2:	42a2      	cmp	r2, r4
 800e8c4:	d007      	beq.n	800e8d6 <HAL_ADC_ConfigChannel+0xfe>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800e8c6:	4c44      	ldr	r4, [pc, #272]	; (800e9d8 <HAL_ADC_ConfigChannel+0x200>)
 800e8c8:	42a2      	cmp	r2, r4
 800e8ca:	d024      	beq.n	800e916 <HAL_ADC_ConfigChannel+0x13e>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800e8cc:	4c43      	ldr	r4, [pc, #268]	; (800e9dc <HAL_ADC_ConfigChannel+0x204>)
 800e8ce:	42a2      	cmp	r2, r4
 800e8d0:	d02e      	beq.n	800e930 <HAL_ADC_ConfigChannel+0x158>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e8d2:	2000      	movs	r0, #0
 800e8d4:	e798      	b.n	800e808 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800e8d6:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800e8da:	d1f4      	bne.n	800e8c6 <HAL_ADC_ConfigChannel+0xee>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e8dc:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800e8e0:	483b      	ldr	r0, [pc, #236]	; (800e9d0 <HAL_ADC_ConfigChannel+0x1f8>)
 800e8e2:	6802      	ldr	r2, [r0, #0]
 800e8e4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800e8e8:	4311      	orrs	r1, r2
 800e8ea:	6001      	str	r1, [r0, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e8ec:	4a3c      	ldr	r2, [pc, #240]	; (800e9e0 <HAL_ADC_ConfigChannel+0x208>)
 800e8ee:	6812      	ldr	r2, [r2, #0]
 800e8f0:	0992      	lsrs	r2, r2, #6
 800e8f2:	493c      	ldr	r1, [pc, #240]	; (800e9e4 <HAL_ADC_ConfigChannel+0x20c>)
 800e8f4:	fba1 1202 	umull	r1, r2, r1, r2
 800e8f8:	0992      	lsrs	r2, r2, #6
 800e8fa:	3201      	adds	r2, #1
 800e8fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e900:	0092      	lsls	r2, r2, #2
 800e902:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800e904:	e002      	b.n	800e90c <HAL_ADC_ConfigChannel+0x134>
            wait_loop_index--;
 800e906:	9a01      	ldr	r2, [sp, #4]
 800e908:	3a01      	subs	r2, #1
 800e90a:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800e90c:	9a01      	ldr	r2, [sp, #4]
 800e90e:	2a00      	cmp	r2, #0
 800e910:	d1f9      	bne.n	800e906 <HAL_ADC_ConfigChannel+0x12e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e912:	2000      	movs	r0, #0
 800e914:	e778      	b.n	800e808 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800e916:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 800e91a:	d1d7      	bne.n	800e8cc <HAL_ADC_ConfigChannel+0xf4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e91c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800e920:	482b      	ldr	r0, [pc, #172]	; (800e9d0 <HAL_ADC_ConfigChannel+0x1f8>)
 800e922:	6802      	ldr	r2, [r0, #0]
 800e924:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800e928:	4311      	orrs	r1, r2
 800e92a:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e92c:	2000      	movs	r0, #0
}
 800e92e:	e76b      	b.n	800e808 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800e930:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800e934:	d146      	bne.n	800e9c4 <HAL_ADC_ConfigChannel+0x1ec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e936:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800e93a:	4825      	ldr	r0, [pc, #148]	; (800e9d0 <HAL_ADC_ConfigChannel+0x1f8>)
 800e93c:	6801      	ldr	r1, [r0, #0]
 800e93e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800e942:	430a      	orrs	r2, r1
 800e944:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e946:	2000      	movs	r0, #0
}
 800e948:	e75e      	b.n	800e808 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e94a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800e94e:	d002      	beq.n	800e956 <HAL_ADC_ConfigChannel+0x17e>
 800e950:	481e      	ldr	r0, [pc, #120]	; (800e9cc <HAL_ADC_ConfigChannel+0x1f4>)
 800e952:	4284      	cmp	r4, r0
 800e954:	d106      	bne.n	800e964 <HAL_ADC_ConfigChannel+0x18c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800e956:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800e958:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800e95a:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800e95e:	ea20 0004 	bic.w	r0, r0, r4
 800e962:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800e964:	680a      	ldr	r2, [r1, #0]
 800e966:	2a00      	cmp	r2, #0
 800e968:	db01      	blt.n	800e96e <HAL_ADC_ConfigChannel+0x196>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e96a:	2000      	movs	r0, #0
 800e96c:	e74c      	b.n	800e808 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800e96e:	4918      	ldr	r1, [pc, #96]	; (800e9d0 <HAL_ADC_ConfigChannel+0x1f8>)
 800e970:	6809      	ldr	r1, [r1, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800e972:	4818      	ldr	r0, [pc, #96]	; (800e9d4 <HAL_ADC_ConfigChannel+0x1fc>)
 800e974:	4282      	cmp	r2, r0
 800e976:	d007      	beq.n	800e988 <HAL_ADC_ConfigChannel+0x1b0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800e978:	4817      	ldr	r0, [pc, #92]	; (800e9d8 <HAL_ADC_ConfigChannel+0x200>)
 800e97a:	4282      	cmp	r2, r0
 800e97c:	d00e      	beq.n	800e99c <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800e97e:	4817      	ldr	r0, [pc, #92]	; (800e9dc <HAL_ADC_ConfigChannel+0x204>)
 800e980:	4282      	cmp	r2, r0
 800e982:	d015      	beq.n	800e9b0 <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e984:	2000      	movs	r0, #0
 800e986:	e73f      	b.n	800e808 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e988:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800e98c:	4810      	ldr	r0, [pc, #64]	; (800e9d0 <HAL_ADC_ConfigChannel+0x1f8>)
 800e98e:	6802      	ldr	r2, [r0, #0]
 800e990:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800e994:	4311      	orrs	r1, r2
 800e996:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e998:	2000      	movs	r0, #0
}
 800e99a:	e735      	b.n	800e808 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e99c:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800e9a0:	480b      	ldr	r0, [pc, #44]	; (800e9d0 <HAL_ADC_ConfigChannel+0x1f8>)
 800e9a2:	6801      	ldr	r1, [r0, #0]
 800e9a4:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800e9a8:	430a      	orrs	r2, r1
 800e9aa:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e9ac:	2000      	movs	r0, #0
}
 800e9ae:	e72b      	b.n	800e808 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e9b0:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800e9b4:	4806      	ldr	r0, [pc, #24]	; (800e9d0 <HAL_ADC_ConfigChannel+0x1f8>)
 800e9b6:	6801      	ldr	r1, [r0, #0]
 800e9b8:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800e9bc:	430a      	orrs	r2, r1
 800e9be:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e9c0:	2000      	movs	r0, #0
}
 800e9c2:	e721      	b.n	800e808 <HAL_ADC_ConfigChannel+0x30>
 800e9c4:	2000      	movs	r0, #0
 800e9c6:	e71f      	b.n	800e808 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 800e9c8:	2002      	movs	r0, #2
 800e9ca:	e720      	b.n	800e80e <HAL_ADC_ConfigChannel+0x36>
 800e9cc:	80000004 	.word	0x80000004
 800e9d0:	40012708 	.word	0x40012708
 800e9d4:	b0001000 	.word	0xb0001000
 800e9d8:	b8004000 	.word	0xb8004000
 800e9dc:	b4002000 	.word	0xb4002000
 800e9e0:	20000180 	.word	0x20000180
 800e9e4:	053e2d63 	.word	0x053e2d63

0800e9e8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800e9e8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800e9ea:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800e9ec:	689a      	ldr	r2, [r3, #8]
 800e9ee:	f012 0f04 	tst.w	r2, #4
 800e9f2:	d02a      	beq.n	800ea4a <ADC_ConversionStop+0x62>
 800e9f4:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800e9f6:	689a      	ldr	r2, [r3, #8]
 800e9f8:	f012 0f02 	tst.w	r2, #2
 800e9fc:	d107      	bne.n	800ea0e <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800e9fe:	689a      	ldr	r2, [r3, #8]
 800ea00:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ea04:	f022 0217 	bic.w	r2, r2, #23
 800ea08:	f042 0210 	orr.w	r2, r2, #16
 800ea0c:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800ea0e:	f7f8 fc73 	bl	80072f8 <HAL_GetTick>
 800ea12:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800ea14:	6823      	ldr	r3, [r4, #0]
 800ea16:	689b      	ldr	r3, [r3, #8]
 800ea18:	f013 0f04 	tst.w	r3, #4
 800ea1c:	d013      	beq.n	800ea46 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800ea1e:	f7f8 fc6b 	bl	80072f8 <HAL_GetTick>
 800ea22:	1b43      	subs	r3, r0, r5
 800ea24:	2b02      	cmp	r3, #2
 800ea26:	d9f5      	bls.n	800ea14 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800ea28:	6823      	ldr	r3, [r4, #0]
 800ea2a:	689b      	ldr	r3, [r3, #8]
 800ea2c:	f013 0f04 	tst.w	r3, #4
 800ea30:	d0f0      	beq.n	800ea14 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ea32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea34:	f043 0310 	orr.w	r3, r3, #16
 800ea38:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ea3a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ea3c:	f043 0301 	orr.w	r3, r3, #1
 800ea40:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 800ea42:	2001      	movs	r0, #1
 800ea44:	e002      	b.n	800ea4c <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800ea46:	2000      	movs	r0, #0
 800ea48:	e000      	b.n	800ea4c <ADC_ConversionStop+0x64>
 800ea4a:	2000      	movs	r0, #0
}
 800ea4c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ea50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ea50:	b530      	push	{r4, r5, lr}
 800ea52:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800ea54:	2300      	movs	r3, #0
 800ea56:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ea58:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ea5a:	689a      	ldr	r2, [r3, #8]
 800ea5c:	f012 0f01 	tst.w	r2, #1
 800ea60:	d159      	bne.n	800eb16 <ADC_Enable+0xc6>
 800ea62:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800ea64:	6899      	ldr	r1, [r3, #8]
 800ea66:	4a2d      	ldr	r2, [pc, #180]	; (800eb1c <ADC_Enable+0xcc>)
 800ea68:	4211      	tst	r1, r2
 800ea6a:	d11b      	bne.n	800eaa4 <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 800ea6c:	689a      	ldr	r2, [r3, #8]
 800ea6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ea72:	f022 0217 	bic.w	r2, r2, #23
 800ea76:	f042 0201 	orr.w	r2, r2, #1
 800ea7a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800ea7c:	4b28      	ldr	r3, [pc, #160]	; (800eb20 <ADC_Enable+0xd0>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800ea80:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800ea84:	d018      	beq.n	800eab8 <ADC_Enable+0x68>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ea86:	4b27      	ldr	r3, [pc, #156]	; (800eb24 <ADC_Enable+0xd4>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	099b      	lsrs	r3, r3, #6
 800ea8c:	4a26      	ldr	r2, [pc, #152]	; (800eb28 <ADC_Enable+0xd8>)
 800ea8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ea92:	099b      	lsrs	r3, r3, #6
 800ea94:	3301      	adds	r3, #1
 800ea96:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800ea98:	9b01      	ldr	r3, [sp, #4]
 800ea9a:	b16b      	cbz	r3, 800eab8 <ADC_Enable+0x68>
      {
        wait_loop_index--;
 800ea9c:	9b01      	ldr	r3, [sp, #4]
 800ea9e:	3b01      	subs	r3, #1
 800eaa0:	9301      	str	r3, [sp, #4]
 800eaa2:	e7f9      	b.n	800ea98 <ADC_Enable+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800eaa4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800eaa6:	f043 0310 	orr.w	r3, r3, #16
 800eaaa:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eaac:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eaae:	f043 0301 	orr.w	r3, r3, #1
 800eab2:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 800eab4:	2001      	movs	r0, #1
 800eab6:	e02f      	b.n	800eb18 <ADC_Enable+0xc8>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800eab8:	7e63      	ldrb	r3, [r4, #25]
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d101      	bne.n	800eac2 <ADC_Enable+0x72>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800eabe:	2000      	movs	r0, #0
 800eac0:	e02a      	b.n	800eb18 <ADC_Enable+0xc8>
      tickstart = HAL_GetTick();
 800eac2:	f7f8 fc19 	bl	80072f8 <HAL_GetTick>
 800eac6:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800eac8:	6823      	ldr	r3, [r4, #0]
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	f012 0f01 	tst.w	r2, #1
 800ead0:	d11f      	bne.n	800eb12 <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ead2:	689a      	ldr	r2, [r3, #8]
 800ead4:	f012 0f01 	tst.w	r2, #1
 800ead8:	d107      	bne.n	800eaea <ADC_Enable+0x9a>
  MODIFY_REG(ADCx->CR,
 800eada:	689a      	ldr	r2, [r3, #8]
 800eadc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800eae0:	f022 0217 	bic.w	r2, r2, #23
 800eae4:	f042 0201 	orr.w	r2, r2, #1
 800eae8:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800eaea:	f7f8 fc05 	bl	80072f8 <HAL_GetTick>
 800eaee:	1b40      	subs	r0, r0, r5
 800eaf0:	2802      	cmp	r0, #2
 800eaf2:	d9e9      	bls.n	800eac8 <ADC_Enable+0x78>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800eaf4:	6823      	ldr	r3, [r4, #0]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	f013 0f01 	tst.w	r3, #1
 800eafc:	d1e4      	bne.n	800eac8 <ADC_Enable+0x78>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800eafe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb00:	f043 0310 	orr.w	r3, r3, #16
 800eb04:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eb06:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800eb08:	f043 0301 	orr.w	r3, r3, #1
 800eb0c:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 800eb0e:	2001      	movs	r0, #1
 800eb10:	e002      	b.n	800eb18 <ADC_Enable+0xc8>
  return HAL_OK;
 800eb12:	2000      	movs	r0, #0
 800eb14:	e000      	b.n	800eb18 <ADC_Enable+0xc8>
 800eb16:	2000      	movs	r0, #0
}
 800eb18:	b003      	add	sp, #12
 800eb1a:	bd30      	pop	{r4, r5, pc}
 800eb1c:	80000017 	.word	0x80000017
 800eb20:	40012708 	.word	0x40012708
 800eb24:	20000180 	.word	0x20000180
 800eb28:	053e2d63 	.word	0x053e2d63

0800eb2c <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800eb2c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800eb2e:	689b      	ldr	r3, [r3, #8]
 800eb30:	f013 0f04 	tst.w	r3, #4
 800eb34:	d128      	bne.n	800eb88 <HAL_ADC_Start+0x5c>
{
 800eb36:	b510      	push	{r4, lr}
 800eb38:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800eb3a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d024      	beq.n	800eb8c <HAL_ADC_Start+0x60>
 800eb42:	2301      	movs	r3, #1
 800eb44:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 800eb48:	f7ff ff82 	bl	800ea50 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800eb4c:	b9c0      	cbnz	r0, 800eb80 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 800eb4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800eb54:	f023 0301 	bic.w	r3, r3, #1
 800eb58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb5c:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800eb5e:	2300      	movs	r3, #0
 800eb60:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800eb62:	6822      	ldr	r2, [r4, #0]
 800eb64:	211c      	movs	r1, #28
 800eb66:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 800eb68:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 800eb6c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800eb6e:	6893      	ldr	r3, [r2, #8]
 800eb70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eb74:	f023 0317 	bic.w	r3, r3, #23
 800eb78:	f043 0304 	orr.w	r3, r3, #4
 800eb7c:	6093      	str	r3, [r2, #8]
}
 800eb7e:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 800eb80:	2300      	movs	r3, #0
 800eb82:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800eb86:	e7fa      	b.n	800eb7e <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 800eb88:	2002      	movs	r0, #2
}
 800eb8a:	4770      	bx	lr
    __HAL_LOCK(hadc);
 800eb8c:	2002      	movs	r0, #2
 800eb8e:	e7f6      	b.n	800eb7e <HAL_ADC_Start+0x52>

0800eb90 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800eb90:	b538      	push	{r3, r4, r5, lr}
 800eb92:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800eb94:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800eb96:	6893      	ldr	r3, [r2, #8]
 800eb98:	f013 0302 	ands.w	r3, r3, #2
 800eb9c:	d000      	beq.n	800eba0 <ADC_Disable+0x10>
 800eb9e:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800eba0:	6891      	ldr	r1, [r2, #8]
 800eba2:	f011 0f01 	tst.w	r1, #1
 800eba6:	d039      	beq.n	800ec1c <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d139      	bne.n	800ec20 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800ebac:	6893      	ldr	r3, [r2, #8]
 800ebae:	f003 0305 	and.w	r3, r3, #5
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d009      	beq.n	800ebca <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ebb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ebb8:	f043 0310 	orr.w	r3, r3, #16
 800ebbc:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ebbe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ebc0:	f043 0301 	orr.w	r3, r3, #1
 800ebc4:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 800ebc6:	2001      	movs	r0, #1
 800ebc8:	e029      	b.n	800ec1e <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 800ebca:	6893      	ldr	r3, [r2, #8]
 800ebcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ebd0:	f023 0317 	bic.w	r3, r3, #23
 800ebd4:	f043 0302 	orr.w	r3, r3, #2
 800ebd8:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800ebda:	6823      	ldr	r3, [r4, #0]
 800ebdc:	2203      	movs	r2, #3
 800ebde:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800ebe0:	f7f8 fb8a 	bl	80072f8 <HAL_GetTick>
 800ebe4:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ebe6:	6823      	ldr	r3, [r4, #0]
 800ebe8:	689b      	ldr	r3, [r3, #8]
 800ebea:	f013 0f01 	tst.w	r3, #1
 800ebee:	d013      	beq.n	800ec18 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ebf0:	f7f8 fb82 	bl	80072f8 <HAL_GetTick>
 800ebf4:	1b40      	subs	r0, r0, r5
 800ebf6:	2802      	cmp	r0, #2
 800ebf8:	d9f5      	bls.n	800ebe6 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ebfa:	6823      	ldr	r3, [r4, #0]
 800ebfc:	689b      	ldr	r3, [r3, #8]
 800ebfe:	f013 0f01 	tst.w	r3, #1
 800ec02:	d0f0      	beq.n	800ebe6 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ec04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec06:	f043 0310 	orr.w	r3, r3, #16
 800ec0a:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ec0c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ec0e:	f043 0301 	orr.w	r3, r3, #1
 800ec12:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 800ec14:	2001      	movs	r0, #1
 800ec16:	e002      	b.n	800ec1e <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ec18:	2000      	movs	r0, #0
 800ec1a:	e000      	b.n	800ec1e <ADC_Disable+0x8e>
 800ec1c:	2000      	movs	r0, #0
}
 800ec1e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800ec20:	2000      	movs	r0, #0
 800ec22:	e7fc      	b.n	800ec1e <ADC_Disable+0x8e>

0800ec24 <HAL_ADC_DeInit>:
{
 800ec24:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 800ec26:	2800      	cmp	r0, #0
 800ec28:	d04a      	beq.n	800ecc0 <HAL_ADC_DeInit+0x9c>
 800ec2a:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800ec2c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800ec2e:	f043 0302 	orr.w	r3, r3, #2
 800ec32:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 800ec34:	f7ff fed8 	bl	800e9e8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800ec38:	4606      	mov	r6, r0
 800ec3a:	2800      	cmp	r0, #0
 800ec3c:	d031      	beq.n	800eca2 <HAL_ADC_DeInit+0x7e>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800ec3e:	6822      	ldr	r2, [r4, #0]
 800ec40:	6853      	ldr	r3, [r2, #4]
 800ec42:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 800ec46:	f023 0303 	bic.w	r3, r3, #3
 800ec4a:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800ec4c:	6823      	ldr	r3, [r4, #0]
 800ec4e:	f240 329f 	movw	r2, #927	; 0x39f
 800ec52:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800ec54:	6822      	ldr	r2, [r4, #0]
 800ec56:	68d1      	ldr	r1, [r2, #12]
 800ec58:	4b1a      	ldr	r3, [pc, #104]	; (800ecc4 <HAL_ADC_DeInit+0xa0>)
 800ec5a:	400b      	ands	r3, r1
 800ec5c:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800ec5e:	6822      	ldr	r2, [r4, #0]
 800ec60:	6913      	ldr	r3, [r2, #16]
 800ec62:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800ec66:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800ec68:	6822      	ldr	r2, [r4, #0]
 800ec6a:	6953      	ldr	r3, [r2, #20]
 800ec6c:	f023 0307 	bic.w	r3, r3, #7
 800ec70:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800ec72:	6822      	ldr	r2, [r4, #0]
 800ec74:	6a13      	ldr	r3, [r2, #32]
 800ec76:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800ec7a:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800ec7c:	6823      	ldr	r3, [r4, #0]
 800ec7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec80:	2500      	movs	r5, #0
 800ec82:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800ec84:	4a10      	ldr	r2, [pc, #64]	; (800ecc8 <HAL_ADC_DeInit+0xa4>)
 800ec86:	6813      	ldr	r3, [r2, #0]
 800ec88:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800ec8c:	6013      	str	r3, [r2, #0]
  HAL_ADC_MspDeInit(hadc);
 800ec8e:	4620      	mov	r0, r4
 800ec90:	f7f7 fe42 	bl	8006918 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800ec94:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 800ec96:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 800ec98:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 800ec9a:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 800ec9e:	4630      	mov	r0, r6
 800eca0:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800eca2:	4620      	mov	r0, r4
 800eca4:	f7ff ff74 	bl	800eb90 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800eca8:	4606      	mov	r6, r0
 800ecaa:	b908      	cbnz	r0, 800ecb0 <HAL_ADC_DeInit+0x8c>
      hadc->State = HAL_ADC_STATE_READY;
 800ecac:	2301      	movs	r3, #1
 800ecae:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800ecb0:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800ecb2:	6893      	ldr	r3, [r2, #8]
 800ecb4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800ecb8:	f023 0317 	bic.w	r3, r3, #23
 800ecbc:	6093      	str	r3, [r2, #8]
}
 800ecbe:	e7be      	b.n	800ec3e <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 800ecc0:	2601      	movs	r6, #1
 800ecc2:	e7ec      	b.n	800ec9e <HAL_ADC_DeInit+0x7a>
 800ecc4:	833e0200 	.word	0x833e0200
 800ecc8:	40012708 	.word	0x40012708

0800eccc <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800eccc:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800ecd0:	2b01      	cmp	r3, #1
 800ecd2:	d019      	beq.n	800ed08 <HAL_ADC_Stop+0x3c>
{
 800ecd4:	b510      	push	{r4, lr}
 800ecd6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800ecd8:	2301      	movs	r3, #1
 800ecda:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 800ecde:	f7ff fe83 	bl	800e9e8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800ece2:	b118      	cbz	r0, 800ecec <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800ece4:	2300      	movs	r3, #0
 800ece6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 800ecea:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800ecec:	4620      	mov	r0, r4
 800ecee:	f7ff ff4f 	bl	800eb90 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	d1f6      	bne.n	800ece4 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800ecf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ecf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ecfc:	f023 0301 	bic.w	r3, r3, #1
 800ed00:	f043 0301 	orr.w	r3, r3, #1
 800ed04:	65a3      	str	r3, [r4, #88]	; 0x58
 800ed06:	e7ed      	b.n	800ece4 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800ed08:	2002      	movs	r0, #2
}
 800ed0a:	4770      	bx	lr

0800ed0c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800ed0c:	b530      	push	{r4, r5, lr}
 800ed0e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800ed10:	2300      	movs	r3, #0
 800ed12:	9301      	str	r3, [sp, #4]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800ed14:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d045      	beq.n	800eda8 <HAL_ADCEx_Calibration_Start+0x9c>
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	2301      	movs	r3, #1
 800ed20:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800ed24:	f7ff ff34 	bl	800eb90 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ed28:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ed2a:	689a      	ldr	r2, [r3, #8]
 800ed2c:	f012 0f01 	tst.w	r2, #1
 800ed30:	d008      	beq.n	800ed44 <HAL_ADCEx_Calibration_Start+0x38>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed34:	f043 0310 	orr.w	r3, r3, #16
 800ed38:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 800ed40:	b003      	add	sp, #12
 800ed42:	bd30      	pop	{r4, r5, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800ed44:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ed46:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800ed4a:	f042 0202 	orr.w	r2, r2, #2
 800ed4e:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800ed50:	68dd      	ldr	r5, [r3, #12]
 800ed52:	f005 0503 	and.w	r5, r5, #3
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800ed56:	68da      	ldr	r2, [r3, #12]
 800ed58:	f022 0203 	bic.w	r2, r2, #3
 800ed5c:	60da      	str	r2, [r3, #12]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 800ed5e:	6821      	ldr	r1, [r4, #0]
 800ed60:	688b      	ldr	r3, [r1, #8]
 800ed62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ed66:	608b      	str	r3, [r1, #8]
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800ed68:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800ed6a:	6899      	ldr	r1, [r3, #8]
 800ed6c:	2900      	cmp	r1, #0
 800ed6e:	db09      	blt.n	800ed84 <HAL_ADCEx_Calibration_Start+0x78>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800ed70:	68da      	ldr	r2, [r3, #12]
 800ed72:	432a      	orrs	r2, r5
 800ed74:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800ed76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed78:	f023 0303 	bic.w	r3, r3, #3
 800ed7c:	f043 0301 	orr.w	r3, r3, #1
 800ed80:	65a3      	str	r3, [r4, #88]	; 0x58
 800ed82:	e7da      	b.n	800ed3a <HAL_ADCEx_Calibration_Start+0x2e>
      wait_loop_index++;
 800ed84:	9b01      	ldr	r3, [sp, #4]
 800ed86:	3301      	adds	r3, #1
 800ed88:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800ed8a:	9b01      	ldr	r3, [sp, #4]
 800ed8c:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 800ed90:	d3ea      	bcc.n	800ed68 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 800ed92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed94:	f023 0312 	bic.w	r3, r3, #18
 800ed98:	f043 0310 	orr.w	r3, r3, #16
 800ed9c:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 800ed9e:	2300      	movs	r3, #0
 800eda0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800eda4:	2001      	movs	r0, #1
 800eda6:	e7cb      	b.n	800ed40 <HAL_ADCEx_Calibration_Start+0x34>
  __HAL_LOCK(hadc);
 800eda8:	2002      	movs	r0, #2
 800edaa:	e7c9      	b.n	800ed40 <HAL_ADCEx_Calibration_Start+0x34>

0800edac <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800edac:	4a07      	ldr	r2, [pc, #28]	; (800edcc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800edae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800edb0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800edb4:	041b      	lsls	r3, r3, #16
 800edb6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800edb8:	0200      	lsls	r0, r0, #8
 800edba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800edbe:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800edc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800edc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800edc8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800edca:	4770      	bx	lr
 800edcc:	e000ed00 	.word	0xe000ed00

0800edd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800edd0:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800edd2:	4b17      	ldr	r3, [pc, #92]	; (800ee30 <HAL_NVIC_SetPriority+0x60>)
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800edda:	f1c3 0407 	rsb	r4, r3, #7
 800edde:	2c04      	cmp	r4, #4
 800ede0:	bf28      	it	cs
 800ede2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ede4:	1d1d      	adds	r5, r3, #4
 800ede6:	2d06      	cmp	r5, #6
 800ede8:	d918      	bls.n	800ee1c <HAL_NVIC_SetPriority+0x4c>
 800edea:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800edec:	f04f 35ff 	mov.w	r5, #4294967295
 800edf0:	fa05 f404 	lsl.w	r4, r5, r4
 800edf4:	ea21 0104 	bic.w	r1, r1, r4
 800edf8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800edfa:	fa05 f303 	lsl.w	r3, r5, r3
 800edfe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ee02:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800ee04:	2800      	cmp	r0, #0
 800ee06:	db0b      	blt.n	800ee20 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee08:	0109      	lsls	r1, r1, #4
 800ee0a:	b2c9      	uxtb	r1, r1
 800ee0c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800ee10:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800ee14:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800ee18:	bc30      	pop	{r4, r5}
 800ee1a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	e7e5      	b.n	800edec <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee20:	f000 000f 	and.w	r0, r0, #15
 800ee24:	0109      	lsls	r1, r1, #4
 800ee26:	b2c9      	uxtb	r1, r1
 800ee28:	4b02      	ldr	r3, [pc, #8]	; (800ee34 <HAL_NVIC_SetPriority+0x64>)
 800ee2a:	5419      	strb	r1, [r3, r0]
 800ee2c:	e7f4      	b.n	800ee18 <HAL_NVIC_SetPriority+0x48>
 800ee2e:	bf00      	nop
 800ee30:	e000ed00 	.word	0xe000ed00
 800ee34:	e000ed14 	.word	0xe000ed14

0800ee38 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ee38:	2800      	cmp	r0, #0
 800ee3a:	db07      	blt.n	800ee4c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ee3c:	f000 021f 	and.w	r2, r0, #31
 800ee40:	0940      	lsrs	r0, r0, #5
 800ee42:	2301      	movs	r3, #1
 800ee44:	4093      	lsls	r3, r2
 800ee46:	4a02      	ldr	r2, [pc, #8]	; (800ee50 <HAL_NVIC_EnableIRQ+0x18>)
 800ee48:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop
 800ee50:	e000e100 	.word	0xe000e100

0800ee54 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ee54:	2800      	cmp	r0, #0
 800ee56:	db0c      	blt.n	800ee72 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ee58:	f000 021f 	and.w	r2, r0, #31
 800ee5c:	0940      	lsrs	r0, r0, #5
 800ee5e:	2301      	movs	r3, #1
 800ee60:	4093      	lsls	r3, r2
 800ee62:	3020      	adds	r0, #32
 800ee64:	4a03      	ldr	r2, [pc, #12]	; (800ee74 <HAL_NVIC_DisableIRQ+0x20>)
 800ee66:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ee6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ee6e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800ee72:	4770      	bx	lr
 800ee74:	e000e100 	.word	0xe000e100

0800ee78 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ee78:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ee7a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800ee7c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800ee7e:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800ee80:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800ee82:	b114      	cbz	r4, 800ee8a <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ee84:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800ee86:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800ee88:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ee8a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800ee8c:	f004 051c 	and.w	r5, r4, #28
 800ee90:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800ee92:	2401      	movs	r4, #1
 800ee94:	40ac      	lsls	r4, r5
 800ee96:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ee98:	6804      	ldr	r4, [r0, #0]
 800ee9a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ee9c:	6883      	ldr	r3, [r0, #8]
 800ee9e:	2b10      	cmp	r3, #16
 800eea0:	d005      	beq.n	800eeae <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800eea2:	6803      	ldr	r3, [r0, #0]
 800eea4:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800eea6:	6803      	ldr	r3, [r0, #0]
 800eea8:	60da      	str	r2, [r3, #12]
  }
}
 800eeaa:	bc70      	pop	{r4, r5, r6}
 800eeac:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800eeae:	6803      	ldr	r3, [r0, #0]
 800eeb0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800eeb2:	6803      	ldr	r3, [r0, #0]
 800eeb4:	60d9      	str	r1, [r3, #12]
 800eeb6:	e7f8      	b.n	800eeaa <DMA_SetConfig+0x32>

0800eeb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800eeb8:	6803      	ldr	r3, [r0, #0]
 800eeba:	4a14      	ldr	r2, [pc, #80]	; (800ef0c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d816      	bhi.n	800eeee <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800eec0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eec2:	f022 0203 	bic.w	r2, r2, #3
 800eec6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800eeca:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 800eece:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	3b08      	subs	r3, #8
 800eed4:	4a0e      	ldr	r2, [pc, #56]	; (800ef10 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800eed6:	fba2 2303 	umull	r2, r3, r2, r3
 800eeda:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800eedc:	4a0d      	ldr	r2, [pc, #52]	; (800ef14 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800eede:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800eee0:	f003 031f 	and.w	r3, r3, #31
 800eee4:	2201      	movs	r2, #1
 800eee6:	fa02 f303 	lsl.w	r3, r2, r3
 800eeea:	6503      	str	r3, [r0, #80]	; 0x50
}
 800eeec:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800eeee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eef0:	f022 0103 	bic.w	r1, r2, #3
 800eef4:	4a08      	ldr	r2, [pc, #32]	; (800ef18 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 800eef6:	440a      	add	r2, r1
 800eef8:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800eefa:	b2db      	uxtb	r3, r3
 800eefc:	3b08      	subs	r3, #8
 800eefe:	4a04      	ldr	r2, [pc, #16]	; (800ef10 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800ef00:	fba2 2303 	umull	r2, r3, r2, r3
 800ef04:	091b      	lsrs	r3, r3, #4
 800ef06:	3307      	adds	r3, #7
 800ef08:	e7e8      	b.n	800eedc <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 800ef0a:	bf00      	nop
 800ef0c:	40020407 	.word	0x40020407
 800ef10:	cccccccd 	.word	0xcccccccd
 800ef14:	40020880 	.word	0x40020880
 800ef18:	4002081c 	.word	0x4002081c

0800ef1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ef1c:	6843      	ldr	r3, [r0, #4]
 800ef1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ef22:	4a07      	ldr	r2, [pc, #28]	; (800ef40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 800ef24:	441a      	add	r2, r3
 800ef26:	0092      	lsls	r2, r2, #2
 800ef28:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ef2a:	4a06      	ldr	r2, [pc, #24]	; (800ef44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 800ef2c:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800ef2e:	3b01      	subs	r3, #1
 800ef30:	f003 0303 	and.w	r3, r3, #3
 800ef34:	2201      	movs	r2, #1
 800ef36:	fa02 f303 	lsl.w	r3, r2, r3
 800ef3a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 800ef3c:	4770      	bx	lr
 800ef3e:	bf00      	nop
 800ef40:	1000823f 	.word	0x1000823f
 800ef44:	40020940 	.word	0x40020940

0800ef48 <HAL_DMA_Init>:
  if (hdma == NULL)
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	d060      	beq.n	800f00e <HAL_DMA_Init+0xc6>
{
 800ef4c:	b510      	push	{r4, lr}
 800ef4e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ef50:	6802      	ldr	r2, [r0, #0]
 800ef52:	4b30      	ldr	r3, [pc, #192]	; (800f014 <HAL_DMA_Init+0xcc>)
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d842      	bhi.n	800efde <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800ef58:	4b2f      	ldr	r3, [pc, #188]	; (800f018 <HAL_DMA_Init+0xd0>)
 800ef5a:	4413      	add	r3, r2
 800ef5c:	492f      	ldr	r1, [pc, #188]	; (800f01c <HAL_DMA_Init+0xd4>)
 800ef5e:	fba1 1303 	umull	r1, r3, r1, r3
 800ef62:	091b      	lsrs	r3, r3, #4
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800ef68:	4b2d      	ldr	r3, [pc, #180]	; (800f020 <HAL_DMA_Init+0xd8>)
 800ef6a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800ef6c:	2302      	movs	r3, #2
 800ef6e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800ef72:	6813      	ldr	r3, [r2, #0]
 800ef74:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ef78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef7c:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800ef7e:	6821      	ldr	r1, [r4, #0]
 800ef80:	680a      	ldr	r2, [r1, #0]
 800ef82:	68a3      	ldr	r3, [r4, #8]
 800ef84:	68e0      	ldr	r0, [r4, #12]
 800ef86:	4303      	orrs	r3, r0
 800ef88:	6920      	ldr	r0, [r4, #16]
 800ef8a:	4303      	orrs	r3, r0
 800ef8c:	6960      	ldr	r0, [r4, #20]
 800ef8e:	4303      	orrs	r3, r0
 800ef90:	69a0      	ldr	r0, [r4, #24]
 800ef92:	4303      	orrs	r3, r0
 800ef94:	69e0      	ldr	r0, [r4, #28]
 800ef96:	4303      	orrs	r3, r0
 800ef98:	6a20      	ldr	r0, [r4, #32]
 800ef9a:	4303      	orrs	r3, r0
 800ef9c:	4313      	orrs	r3, r2
 800ef9e:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800efa0:	4620      	mov	r0, r4
 800efa2:	f7ff ff89 	bl	800eeb8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800efa6:	68a3      	ldr	r3, [r4, #8]
 800efa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800efac:	d022      	beq.n	800eff4 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800efae:	6863      	ldr	r3, [r4, #4]
 800efb0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800efb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efb6:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800efb8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800efba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800efbc:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800efbe:	6863      	ldr	r3, [r4, #4]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	2b03      	cmp	r3, #3
 800efc4:	d919      	bls.n	800effa <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 800efc6:	2300      	movs	r3, #0
 800efc8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800efca:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800efcc:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800efce:	2000      	movs	r0, #0
 800efd0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800efd2:	2301      	movs	r3, #1
 800efd4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800efd8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800efdc:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800efde:	4b11      	ldr	r3, [pc, #68]	; (800f024 <HAL_DMA_Init+0xdc>)
 800efe0:	4413      	add	r3, r2
 800efe2:	490e      	ldr	r1, [pc, #56]	; (800f01c <HAL_DMA_Init+0xd4>)
 800efe4:	fba1 1303 	umull	r1, r3, r1, r3
 800efe8:	091b      	lsrs	r3, r3, #4
 800efea:	009b      	lsls	r3, r3, #2
 800efec:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800efee:	4b0e      	ldr	r3, [pc, #56]	; (800f028 <HAL_DMA_Init+0xe0>)
 800eff0:	6403      	str	r3, [r0, #64]	; 0x40
 800eff2:	e7bb      	b.n	800ef6c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800eff4:	2300      	movs	r3, #0
 800eff6:	6063      	str	r3, [r4, #4]
 800eff8:	e7d9      	b.n	800efae <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800effa:	4620      	mov	r0, r4
 800effc:	f7ff ff8e 	bl	800ef1c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800f000:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f002:	2200      	movs	r2, #0
 800f004:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f006:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f008:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f00a:	605a      	str	r2, [r3, #4]
 800f00c:	e7df      	b.n	800efce <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800f00e:	2001      	movs	r0, #1
}
 800f010:	4770      	bx	lr
 800f012:	bf00      	nop
 800f014:	40020407 	.word	0x40020407
 800f018:	bffdfff8 	.word	0xbffdfff8
 800f01c:	cccccccd 	.word	0xcccccccd
 800f020:	40020000 	.word	0x40020000
 800f024:	bffdfbf8 	.word	0xbffdfbf8
 800f028:	40020400 	.word	0x40020400

0800f02c <HAL_DMA_DeInit>:
  if (NULL == hdma)
 800f02c:	2800      	cmp	r0, #0
 800f02e:	d04b      	beq.n	800f0c8 <HAL_DMA_DeInit+0x9c>
{
 800f030:	b538      	push	{r3, r4, r5, lr}
 800f032:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800f034:	6802      	ldr	r2, [r0, #0]
 800f036:	6813      	ldr	r3, [r2, #0]
 800f038:	f023 0301 	bic.w	r3, r3, #1
 800f03c:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800f03e:	6802      	ldr	r2, [r0, #0]
 800f040:	4b22      	ldr	r3, [pc, #136]	; (800f0cc <HAL_DMA_DeInit+0xa0>)
 800f042:	429a      	cmp	r2, r3
 800f044:	d82c      	bhi.n	800f0a0 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800f046:	4b22      	ldr	r3, [pc, #136]	; (800f0d0 <HAL_DMA_DeInit+0xa4>)
 800f048:	4413      	add	r3, r2
 800f04a:	4922      	ldr	r1, [pc, #136]	; (800f0d4 <HAL_DMA_DeInit+0xa8>)
 800f04c:	fba1 1303 	umull	r1, r3, r1, r3
 800f050:	091b      	lsrs	r3, r3, #4
 800f052:	009b      	lsls	r3, r3, #2
 800f054:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800f056:	4b20      	ldr	r3, [pc, #128]	; (800f0d8 <HAL_DMA_DeInit+0xac>)
 800f058:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 800f05a:	2500      	movs	r5, #0
 800f05c:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f05e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f060:	f003 021c 	and.w	r2, r3, #28
 800f064:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f066:	2301      	movs	r3, #1
 800f068:	4093      	lsls	r3, r2
 800f06a:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800f06c:	4620      	mov	r0, r4
 800f06e:	f7ff ff23 	bl	800eeb8 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800f072:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f074:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f076:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f078:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f07a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800f07c:	6863      	ldr	r3, [r4, #4]
 800f07e:	3b01      	subs	r3, #1
 800f080:	2b03      	cmp	r3, #3
 800f082:	d918      	bls.n	800f0b6 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 800f084:	2000      	movs	r0, #0
 800f086:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800f088:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800f08a:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 800f08c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800f08e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800f090:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800f092:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f094:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800f096:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800f09a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800f09e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800f0a0:	4b0e      	ldr	r3, [pc, #56]	; (800f0dc <HAL_DMA_DeInit+0xb0>)
 800f0a2:	4413      	add	r3, r2
 800f0a4:	490b      	ldr	r1, [pc, #44]	; (800f0d4 <HAL_DMA_DeInit+0xa8>)
 800f0a6:	fba1 1303 	umull	r1, r3, r1, r3
 800f0aa:	091b      	lsrs	r3, r3, #4
 800f0ac:	009b      	lsls	r3, r3, #2
 800f0ae:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800f0b0:	4b0b      	ldr	r3, [pc, #44]	; (800f0e0 <HAL_DMA_DeInit+0xb4>)
 800f0b2:	6403      	str	r3, [r0, #64]	; 0x40
 800f0b4:	e7d1      	b.n	800f05a <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	f7ff ff30 	bl	800ef1c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800f0bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f0be:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f0c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f0c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f0c4:	605a      	str	r2, [r3, #4]
 800f0c6:	e7dd      	b.n	800f084 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 800f0c8:	2001      	movs	r0, #1
}
 800f0ca:	4770      	bx	lr
 800f0cc:	40020407 	.word	0x40020407
 800f0d0:	bffdfff8 	.word	0xbffdfff8
 800f0d4:	cccccccd 	.word	0xcccccccd
 800f0d8:	40020000 	.word	0x40020000
 800f0dc:	bffdfbf8 	.word	0xbffdfbf8
 800f0e0:	40020400 	.word	0x40020400

0800f0e4 <HAL_DMA_Start_IT>:
{
 800f0e4:	b538      	push	{r3, r4, r5, lr}
 800f0e6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800f0e8:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 800f0ec:	2801      	cmp	r0, #1
 800f0ee:	d043      	beq.n	800f178 <HAL_DMA_Start_IT+0x94>
 800f0f0:	2001      	movs	r0, #1
 800f0f2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 800f0f6:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800f0fa:	b2c0      	uxtb	r0, r0
 800f0fc:	2801      	cmp	r0, #1
 800f0fe:	d006      	beq.n	800f10e <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800f100:	2380      	movs	r3, #128	; 0x80
 800f102:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800f104:	2300      	movs	r3, #0
 800f106:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 800f10a:	2001      	movs	r0, #1
}
 800f10c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800f10e:	2002      	movs	r0, #2
 800f110:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f114:	2000      	movs	r0, #0
 800f116:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800f118:	6825      	ldr	r5, [r4, #0]
 800f11a:	6828      	ldr	r0, [r5, #0]
 800f11c:	f020 0001 	bic.w	r0, r0, #1
 800f120:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f122:	4620      	mov	r0, r4
 800f124:	f7ff fea8 	bl	800ee78 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800f128:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f12a:	b1d3      	cbz	r3, 800f162 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f12c:	6822      	ldr	r2, [r4, #0]
 800f12e:	6813      	ldr	r3, [r2, #0]
 800f130:	f043 030e 	orr.w	r3, r3, #14
 800f134:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800f136:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f138:	681a      	ldr	r2, [r3, #0]
 800f13a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800f13e:	d003      	beq.n	800f148 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800f140:	681a      	ldr	r2, [r3, #0]
 800f142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f146:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800f148:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f14a:	b11b      	cbz	r3, 800f154 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800f14c:	681a      	ldr	r2, [r3, #0]
 800f14e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f152:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800f154:	6822      	ldr	r2, [r4, #0]
 800f156:	6813      	ldr	r3, [r2, #0]
 800f158:	f043 0301 	orr.w	r3, r3, #1
 800f15c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f15e:	2000      	movs	r0, #0
 800f160:	e7d4      	b.n	800f10c <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f162:	6822      	ldr	r2, [r4, #0]
 800f164:	6813      	ldr	r3, [r2, #0]
 800f166:	f023 0304 	bic.w	r3, r3, #4
 800f16a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f16c:	6822      	ldr	r2, [r4, #0]
 800f16e:	6813      	ldr	r3, [r2, #0]
 800f170:	f043 030a 	orr.w	r3, r3, #10
 800f174:	6013      	str	r3, [r2, #0]
 800f176:	e7de      	b.n	800f136 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 800f178:	2002      	movs	r0, #2
 800f17a:	e7c7      	b.n	800f10c <HAL_DMA_Start_IT+0x28>

0800f17c <HAL_DMA_Abort>:
  if (NULL == hdma)
 800f17c:	4603      	mov	r3, r0
 800f17e:	2800      	cmp	r0, #0
 800f180:	d034      	beq.n	800f1ec <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800f182:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800f186:	b2d2      	uxtb	r2, r2
 800f188:	2a02      	cmp	r2, #2
 800f18a:	d006      	beq.n	800f19a <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f18c:	2204      	movs	r2, #4
 800f18e:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800f190:	2200      	movs	r2, #0
 800f192:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 800f196:	2001      	movs	r0, #1
 800f198:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f19a:	6801      	ldr	r1, [r0, #0]
 800f19c:	680a      	ldr	r2, [r1, #0]
 800f19e:	f022 020e 	bic.w	r2, r2, #14
 800f1a2:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800f1a4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800f1a6:	680a      	ldr	r2, [r1, #0]
 800f1a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f1ac:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800f1ae:	6801      	ldr	r1, [r0, #0]
 800f1b0:	680a      	ldr	r2, [r1, #0]
 800f1b2:	f022 0201 	bic.w	r2, r2, #1
 800f1b6:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f1b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f1ba:	f002 011c 	and.w	r1, r2, #28
 800f1be:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	408a      	lsls	r2, r1
 800f1c4:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f1c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f1c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800f1ca:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800f1cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1ce:	b132      	cbz	r2, 800f1de <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800f1d0:	6811      	ldr	r1, [r2, #0]
 800f1d2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800f1d6:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f1d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f1da:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f1dc:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800f1de:	2201      	movs	r2, #1
 800f1e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 800f1ea:	4770      	bx	lr
    return HAL_ERROR;
 800f1ec:	2001      	movs	r0, #1
}
 800f1ee:	4770      	bx	lr

0800f1f0 <HAL_DMA_Abort_IT>:
{
 800f1f0:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800f1f2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800f1f6:	b2db      	uxtb	r3, r3
 800f1f8:	2b02      	cmp	r3, #2
 800f1fa:	d003      	beq.n	800f204 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f1fc:	2304      	movs	r3, #4
 800f1fe:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800f200:	2001      	movs	r0, #1
}
 800f202:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f204:	6802      	ldr	r2, [r0, #0]
 800f206:	6813      	ldr	r3, [r2, #0]
 800f208:	f023 030e 	bic.w	r3, r3, #14
 800f20c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800f20e:	6802      	ldr	r2, [r0, #0]
 800f210:	6813      	ldr	r3, [r2, #0]
 800f212:	f023 0301 	bic.w	r3, r3, #1
 800f216:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800f218:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800f21a:	6813      	ldr	r3, [r2, #0]
 800f21c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f220:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f222:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f224:	f003 021c 	and.w	r2, r3, #28
 800f228:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800f22a:	2301      	movs	r3, #1
 800f22c:	4093      	lsls	r3, r2
 800f22e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f230:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800f232:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800f234:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800f236:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800f238:	b133      	cbz	r3, 800f248 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f240:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f242:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800f244:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800f246:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800f248:	2301      	movs	r3, #1
 800f24a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800f24e:	2300      	movs	r3, #0
 800f250:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 800f254:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f256:	b113      	cbz	r3, 800f25e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 800f258:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800f25a:	2000      	movs	r0, #0
 800f25c:	e7d1      	b.n	800f202 <HAL_DMA_Abort_IT+0x12>
 800f25e:	2000      	movs	r0, #0
 800f260:	e7cf      	b.n	800f202 <HAL_DMA_Abort_IT+0x12>
	...

0800f264 <HAL_DMA_IRQHandler>:
{
 800f264:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f266:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f268:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800f26a:	6804      	ldr	r4, [r0, #0]
 800f26c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800f26e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f270:	f003 031c 	and.w	r3, r3, #28
 800f274:	2204      	movs	r2, #4
 800f276:	409a      	lsls	r2, r3
 800f278:	420a      	tst	r2, r1
 800f27a:	d015      	beq.n	800f2a8 <HAL_DMA_IRQHandler+0x44>
 800f27c:	f015 0f04 	tst.w	r5, #4
 800f280:	d012      	beq.n	800f2a8 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f282:	6823      	ldr	r3, [r4, #0]
 800f284:	f013 0f20 	tst.w	r3, #32
 800f288:	d103      	bne.n	800f292 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f28a:	6823      	ldr	r3, [r4, #0]
 800f28c:	f023 0304 	bic.w	r3, r3, #4
 800f290:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800f292:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f294:	f003 021c 	and.w	r2, r3, #28
 800f298:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800f29a:	2304      	movs	r3, #4
 800f29c:	4093      	lsls	r3, r2
 800f29e:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800f2a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f2a2:	b103      	cbz	r3, 800f2a6 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 800f2a4:	4798      	blx	r3
}
 800f2a6:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800f2a8:	2202      	movs	r2, #2
 800f2aa:	409a      	lsls	r2, r3
 800f2ac:	420a      	tst	r2, r1
 800f2ae:	d028      	beq.n	800f302 <HAL_DMA_IRQHandler+0x9e>
 800f2b0:	f015 0f02 	tst.w	r5, #2
 800f2b4:	d025      	beq.n	800f302 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f2b6:	6823      	ldr	r3, [r4, #0]
 800f2b8:	f013 0f20 	tst.w	r3, #32
 800f2bc:	d106      	bne.n	800f2cc <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f2be:	6823      	ldr	r3, [r4, #0]
 800f2c0:	f023 030a 	bic.w	r3, r3, #10
 800f2c4:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800f2cc:	6802      	ldr	r2, [r0, #0]
 800f2ce:	4b1c      	ldr	r3, [pc, #112]	; (800f340 <HAL_DMA_IRQHandler+0xdc>)
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d90e      	bls.n	800f2f2 <HAL_DMA_IRQHandler+0x8e>
 800f2d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f2d6:	f003 021c 	and.w	r2, r3, #28
 800f2da:	2302      	movs	r3, #2
 800f2dc:	4093      	lsls	r3, r2
 800f2de:	4a19      	ldr	r2, [pc, #100]	; (800f344 <HAL_DMA_IRQHandler+0xe0>)
 800f2e0:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 800f2e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d0db      	beq.n	800f2a6 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 800f2ee:	4798      	blx	r3
 800f2f0:	e7d9      	b.n	800f2a6 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800f2f2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f2f4:	f003 021c 	and.w	r2, r3, #28
 800f2f8:	2302      	movs	r3, #2
 800f2fa:	4093      	lsls	r3, r2
 800f2fc:	4a12      	ldr	r2, [pc, #72]	; (800f348 <HAL_DMA_IRQHandler+0xe4>)
 800f2fe:	6053      	str	r3, [r2, #4]
 800f300:	e7ef      	b.n	800f2e2 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800f302:	2208      	movs	r2, #8
 800f304:	fa02 f303 	lsl.w	r3, r2, r3
 800f308:	420b      	tst	r3, r1
 800f30a:	d0cc      	beq.n	800f2a6 <HAL_DMA_IRQHandler+0x42>
 800f30c:	f015 0f08 	tst.w	r5, #8
 800f310:	d0c9      	beq.n	800f2a6 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f312:	6823      	ldr	r3, [r4, #0]
 800f314:	f023 030e 	bic.w	r3, r3, #14
 800f318:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f31a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f31c:	f003 031c 	and.w	r3, r3, #28
 800f320:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800f322:	2201      	movs	r2, #1
 800f324:	fa02 f303 	lsl.w	r3, r2, r3
 800f328:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f32a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800f32c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800f330:	2300      	movs	r3, #0
 800f332:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800f336:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d0b4      	beq.n	800f2a6 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800f33c:	4798      	blx	r3
  return;
 800f33e:	e7b2      	b.n	800f2a6 <HAL_DMA_IRQHandler+0x42>
 800f340:	40020080 	.word	0x40020080
 800f344:	40020400 	.word	0x40020400
 800f348:	40020000 	.word	0x40020000

0800f34c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800f34c:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800f34e:	4c05      	ldr	r4, [pc, #20]	; (800f364 <FLASH_Program_DoubleWord+0x18>)
 800f350:	6961      	ldr	r1, [r4, #20]
 800f352:	f041 0101 	orr.w	r1, r1, #1
 800f356:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800f358:	6002      	str	r2, [r0, #0]
 800f35a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800f35e:	6043      	str	r3, [r0, #4]
}
 800f360:	bc10      	pop	{r4}
 800f362:	4770      	bx	lr
 800f364:	58004000 	.word	0x58004000

0800f368 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 800f368:	b410      	push	{r4}

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800f36a:	4a0d      	ldr	r2, [pc, #52]	; (800f3a0 <FLASH_Program_Fast+0x38>)
 800f36c:	6953      	ldr	r3, [r2, #20]
 800f36e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f372:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f374:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f378:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800f37a:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800f37c:	f851 2b04 	ldr.w	r2, [r1], #4
 800f380:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 800f384:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 800f386:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800f38a:	d1f7      	bne.n	800f37c <FLASH_Program_Fast+0x14>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 800f38c:	4b04      	ldr	r3, [pc, #16]	; (800f3a0 <FLASH_Program_Fast+0x38>)
 800f38e:	691b      	ldr	r3, [r3, #16]
 800f390:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800f394:	d1fa      	bne.n	800f38c <FLASH_Program_Fast+0x24>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f396:	f384 8810 	msr	PRIMASK, r4
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800f39a:	bc10      	pop	{r4}
 800f39c:	4770      	bx	lr
 800f39e:	bf00      	nop
 800f3a0:	58004000 	.word	0x58004000

0800f3a4 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800f3a4:	4b09      	ldr	r3, [pc, #36]	; (800f3cc <HAL_FLASH_Unlock+0x28>)
 800f3a6:	695b      	ldr	r3, [r3, #20]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	db01      	blt.n	800f3b0 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800f3ac:	2000      	movs	r0, #0
 800f3ae:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f3b0:	4b06      	ldr	r3, [pc, #24]	; (800f3cc <HAL_FLASH_Unlock+0x28>)
 800f3b2:	4a07      	ldr	r2, [pc, #28]	; (800f3d0 <HAL_FLASH_Unlock+0x2c>)
 800f3b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f3b6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800f3ba:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800f3bc:	695b      	ldr	r3, [r3, #20]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	db01      	blt.n	800f3c6 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800f3c2:	2000      	movs	r0, #0
 800f3c4:	4770      	bx	lr
      status = HAL_ERROR;
 800f3c6:	2001      	movs	r0, #1
}
 800f3c8:	4770      	bx	lr
 800f3ca:	bf00      	nop
 800f3cc:	58004000 	.word	0x58004000
 800f3d0:	45670123 	.word	0x45670123

0800f3d4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800f3d4:	4b05      	ldr	r3, [pc, #20]	; (800f3ec <HAL_FLASH_Lock+0x18>)
 800f3d6:	695a      	ldr	r2, [r3, #20]
 800f3d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800f3dc:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800f3de:	695b      	ldr	r3, [r3, #20]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	db01      	blt.n	800f3e8 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 800f3e4:	2001      	movs	r0, #1
}
 800f3e6:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800f3e8:	2000      	movs	r0, #0
 800f3ea:	4770      	bx	lr
 800f3ec:	58004000 	.word	0x58004000

0800f3f0 <FLASH_WaitForLastOperation>:
{
 800f3f0:	b538      	push	{r3, r4, r5, lr}
 800f3f2:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800f3f4:	f7f7 ff80 	bl	80072f8 <HAL_GetTick>
 800f3f8:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800f3fa:	4b16      	ldr	r3, [pc, #88]	; (800f454 <FLASH_WaitForLastOperation+0x64>)
 800f3fc:	691b      	ldr	r3, [r3, #16]
 800f3fe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800f402:	d006      	beq.n	800f412 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800f404:	f7f7 ff78 	bl	80072f8 <HAL_GetTick>
 800f408:	1b00      	subs	r0, r0, r4
 800f40a:	42a8      	cmp	r0, r5
 800f40c:	d3f5      	bcc.n	800f3fa <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 800f40e:	2003      	movs	r0, #3
}
 800f410:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 800f412:	4b10      	ldr	r3, [pc, #64]	; (800f454 <FLASH_WaitForLastOperation+0x64>)
 800f414:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 800f416:	f013 0f01 	tst.w	r3, #1
 800f41a:	d002      	beq.n	800f422 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800f41c:	4a0d      	ldr	r2, [pc, #52]	; (800f454 <FLASH_WaitForLastOperation+0x64>)
 800f41e:	2101      	movs	r1, #1
 800f420:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 800f422:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 800f426:	4013      	ands	r3, r2
 800f428:	d001      	beq.n	800f42e <FLASH_WaitForLastOperation+0x3e>
 800f42a:	4a0a      	ldr	r2, [pc, #40]	; (800f454 <FLASH_WaitForLastOperation+0x64>)
 800f42c:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 800f42e:	b95b      	cbnz	r3, 800f448 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800f430:	4b08      	ldr	r3, [pc, #32]	; (800f454 <FLASH_WaitForLastOperation+0x64>)
 800f432:	691b      	ldr	r3, [r3, #16]
 800f434:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800f438:	d00a      	beq.n	800f450 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800f43a:	f7f7 ff5d 	bl	80072f8 <HAL_GetTick>
 800f43e:	1b00      	subs	r0, r0, r4
 800f440:	42a8      	cmp	r0, r5
 800f442:	d3f5      	bcc.n	800f430 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 800f444:	2003      	movs	r0, #3
 800f446:	e7e3      	b.n	800f410 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 800f448:	4a03      	ldr	r2, [pc, #12]	; (800f458 <FLASH_WaitForLastOperation+0x68>)
 800f44a:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 800f44c:	2001      	movs	r0, #1
 800f44e:	e7df      	b.n	800f410 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 800f450:	2000      	movs	r0, #0
 800f452:	e7dd      	b.n	800f410 <FLASH_WaitForLastOperation+0x20>
 800f454:	58004000 	.word	0x58004000
 800f458:	20000d80 	.word	0x20000d80

0800f45c <HAL_FLASH_Program>:
{
 800f45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f45e:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 800f460:	4b15      	ldr	r3, [pc, #84]	; (800f4b8 <HAL_FLASH_Program+0x5c>)
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	2b01      	cmp	r3, #1
 800f466:	d025      	beq.n	800f4b4 <HAL_FLASH_Program+0x58>
 800f468:	4604      	mov	r4, r0
 800f46a:	460d      	mov	r5, r1
 800f46c:	4616      	mov	r6, r2
 800f46e:	4b12      	ldr	r3, [pc, #72]	; (800f4b8 <HAL_FLASH_Program+0x5c>)
 800f470:	2201      	movs	r2, #1
 800f472:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f474:	2200      	movs	r2, #0
 800f476:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f47c:	f7ff ffb8 	bl	800f3f0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800f480:	b970      	cbnz	r0, 800f4a0 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800f482:	2c01      	cmp	r4, #1
 800f484:	d010      	beq.n	800f4a8 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800f486:	4631      	mov	r1, r6
 800f488:	4628      	mov	r0, r5
 800f48a:	f7ff ff6d 	bl	800f368 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f48e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f492:	f7ff ffad 	bl	800f3f0 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800f496:	4a09      	ldr	r2, [pc, #36]	; (800f4bc <HAL_FLASH_Program+0x60>)
 800f498:	6953      	ldr	r3, [r2, #20]
 800f49a:	ea23 0404 	bic.w	r4, r3, r4
 800f49e:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 800f4a0:	4b05      	ldr	r3, [pc, #20]	; (800f4b8 <HAL_FLASH_Program+0x5c>)
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	701a      	strb	r2, [r3, #0]
}
 800f4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 800f4a8:	4632      	mov	r2, r6
 800f4aa:	463b      	mov	r3, r7
 800f4ac:	4628      	mov	r0, r5
 800f4ae:	f7ff ff4d 	bl	800f34c <FLASH_Program_DoubleWord>
 800f4b2:	e7ec      	b.n	800f48e <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 800f4b4:	2002      	movs	r0, #2
 800f4b6:	e7f6      	b.n	800f4a6 <HAL_FLASH_Program+0x4a>
 800f4b8:	20000d80 	.word	0x20000d80
 800f4bc:	58004000 	.word	0x58004000

0800f4c0 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 800f4c0:	4a03      	ldr	r2, [pc, #12]	; (800f4d0 <FLASH_MassErase+0x10>)
 800f4c2:	6953      	ldr	r3, [r2, #20]
 800f4c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f4c8:	f043 0304 	orr.w	r3, r3, #4
 800f4cc:	6153      	str	r3, [r2, #20]
#endif
}
 800f4ce:	4770      	bx	lr
 800f4d0:	58004000 	.word	0x58004000

0800f4d4 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800f4d4:	4b18      	ldr	r3, [pc, #96]	; (800f538 <FLASH_FlushCaches+0x64>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f4dc:	2b01      	cmp	r3, #1
 800f4de:	d006      	beq.n	800f4ee <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800f4e0:	4b15      	ldr	r3, [pc, #84]	; (800f538 <FLASH_FlushCaches+0x64>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d012      	beq.n	800f512 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 800f4ec:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800f4ee:	4b12      	ldr	r3, [pc, #72]	; (800f538 <FLASH_FlushCaches+0x64>)
 800f4f0:	681a      	ldr	r2, [r3, #0]
 800f4f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f4f6:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800f4f8:	681a      	ldr	r2, [r3, #0]
 800f4fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f4fe:	601a      	str	r2, [r3, #0]
 800f500:	681a      	ldr	r2, [r3, #0]
 800f502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f506:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f50e:	601a      	str	r2, [r3, #0]
 800f510:	e7e6      	b.n	800f4e0 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800f512:	4b09      	ldr	r3, [pc, #36]	; (800f538 <FLASH_FlushCaches+0x64>)
 800f514:	681a      	ldr	r2, [r3, #0]
 800f516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f51a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 800f51c:	681a      	ldr	r2, [r3, #0]
 800f51e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f522:	601a      	str	r2, [r3, #0]
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f52a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f532:	601a      	str	r2, [r3, #0]
}
 800f534:	e7da      	b.n	800f4ec <FLASH_FlushCaches+0x18>
 800f536:	bf00      	nop
 800f538:	58004000 	.word	0x58004000

0800f53c <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800f53c:	4a03      	ldr	r2, [pc, #12]	; (800f54c <FLASH_AcknowledgePageErase+0x10>)
 800f53e:	6953      	ldr	r3, [r2, #20]
 800f540:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800f544:	f023 0302 	bic.w	r3, r3, #2
 800f548:	6153      	str	r3, [r2, #20]
#endif
}
 800f54a:	4770      	bx	lr
 800f54c:	58004000 	.word	0x58004000

0800f550 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800f550:	4a05      	ldr	r2, [pc, #20]	; (800f568 <FLASH_PageErase+0x18>)
 800f552:	6953      	ldr	r3, [r2, #20]
 800f554:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800f558:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 800f55c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800f560:	f040 0002 	orr.w	r0, r0, #2
 800f564:	6150      	str	r0, [r2, #20]
}
 800f566:	4770      	bx	lr
 800f568:	58004000 	.word	0x58004000

0800f56c <HAL_FLASHEx_Erase>:
{
 800f56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800f56e:	4b1e      	ldr	r3, [pc, #120]	; (800f5e8 <HAL_FLASHEx_Erase+0x7c>)
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	2b01      	cmp	r3, #1
 800f574:	d035      	beq.n	800f5e2 <HAL_FLASHEx_Erase+0x76>
 800f576:	4605      	mov	r5, r0
 800f578:	460f      	mov	r7, r1
 800f57a:	4b1b      	ldr	r3, [pc, #108]	; (800f5e8 <HAL_FLASHEx_Erase+0x7c>)
 800f57c:	2201      	movs	r2, #1
 800f57e:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f580:	2200      	movs	r2, #0
 800f582:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f584:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f588:	f7ff ff32 	bl	800f3f0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800f58c:	4606      	mov	r6, r0
 800f58e:	bb18      	cbnz	r0, 800f5d8 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800f590:	682b      	ldr	r3, [r5, #0]
 800f592:	2b04      	cmp	r3, #4
 800f594:	d013      	beq.n	800f5be <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 800f596:	f04f 33ff 	mov.w	r3, #4294967295
 800f59a:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800f59c:	686c      	ldr	r4, [r5, #4]
 800f59e:	686b      	ldr	r3, [r5, #4]
 800f5a0:	68aa      	ldr	r2, [r5, #8]
 800f5a2:	4413      	add	r3, r2
 800f5a4:	42a3      	cmp	r3, r4
 800f5a6:	d913      	bls.n	800f5d0 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	f7ff ffd1 	bl	800f550 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f5ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f5b2:	f7ff ff1d 	bl	800f3f0 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	b948      	cbnz	r0, 800f5ce <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800f5ba:	3401      	adds	r4, #1
 800f5bc:	e7ef      	b.n	800f59e <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 800f5be:	f7ff ff7f 	bl	800f4c0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f5c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f5c6:	f7ff ff13 	bl	800f3f0 <FLASH_WaitForLastOperation>
 800f5ca:	4606      	mov	r6, r0
 800f5cc:	e002      	b.n	800f5d4 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 800f5ce:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 800f5d0:	f7ff ffb4 	bl	800f53c <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 800f5d4:	f7ff ff7e 	bl	800f4d4 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800f5d8:	4b03      	ldr	r3, [pc, #12]	; (800f5e8 <HAL_FLASHEx_Erase+0x7c>)
 800f5da:	2200      	movs	r2, #0
 800f5dc:	701a      	strb	r2, [r3, #0]
}
 800f5de:	4630      	mov	r0, r6
 800f5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800f5e2:	2602      	movs	r6, #2
 800f5e4:	e7fb      	b.n	800f5de <HAL_FLASHEx_Erase+0x72>
 800f5e6:	bf00      	nop
 800f5e8:	20000d80 	.word	0x20000d80

0800f5ec <HAL_FLASHEx_Erase_IT>:
{
 800f5ec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 800f5ee:	4b17      	ldr	r3, [pc, #92]	; (800f64c <HAL_FLASHEx_Erase_IT+0x60>)
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	2b01      	cmp	r3, #1
 800f5f4:	d028      	beq.n	800f648 <HAL_FLASHEx_Erase_IT+0x5c>
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	4b14      	ldr	r3, [pc, #80]	; (800f64c <HAL_FLASHEx_Erase_IT+0x60>)
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f5fe:	2200      	movs	r2, #0
 800f600:	605a      	str	r2, [r3, #4]
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800f602:	6802      	ldr	r2, [r0, #0]
 800f604:	609a      	str	r2, [r3, #8]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f60a:	f7ff fef1 	bl	800f3f0 <FLASH_WaitForLastOperation>
  if (status != HAL_OK)
 800f60e:	4605      	mov	r5, r0
 800f610:	b120      	cbz	r0, 800f61c <HAL_FLASHEx_Erase_IT+0x30>
    __HAL_UNLOCK(&pFlash);
 800f612:	4b0e      	ldr	r3, [pc, #56]	; (800f64c <HAL_FLASHEx_Erase_IT+0x60>)
 800f614:	2200      	movs	r2, #0
 800f616:	701a      	strb	r2, [r3, #0]
}
 800f618:	4628      	mov	r0, r5
 800f61a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800f61c:	4a0c      	ldr	r2, [pc, #48]	; (800f650 <HAL_FLASHEx_Erase_IT+0x64>)
 800f61e:	6953      	ldr	r3, [r2, #20]
 800f620:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800f624:	6153      	str	r3, [r2, #20]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	2b04      	cmp	r3, #4
 800f62a:	d007      	beq.n	800f63c <HAL_FLASHEx_Erase_IT+0x50>
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 800f62c:	68a2      	ldr	r2, [r4, #8]
 800f62e:	4b07      	ldr	r3, [pc, #28]	; (800f64c <HAL_FLASHEx_Erase_IT+0x60>)
 800f630:	615a      	str	r2, [r3, #20]
      pFlash.Page = pEraseInit->Page;
 800f632:	6860      	ldr	r0, [r4, #4]
 800f634:	6118      	str	r0, [r3, #16]
      FLASH_PageErase(pEraseInit->Page);
 800f636:	f7ff ff8b 	bl	800f550 <FLASH_PageErase>
 800f63a:	e7ed      	b.n	800f618 <HAL_FLASHEx_Erase_IT+0x2c>
      pFlash.Page = 0;
 800f63c:	4b03      	ldr	r3, [pc, #12]	; (800f64c <HAL_FLASHEx_Erase_IT+0x60>)
 800f63e:	2200      	movs	r2, #0
 800f640:	611a      	str	r2, [r3, #16]
      FLASH_MassErase();
 800f642:	f7ff ff3d 	bl	800f4c0 <FLASH_MassErase>
 800f646:	e7e7      	b.n	800f618 <HAL_FLASHEx_Erase_IT+0x2c>
  __HAL_LOCK(&pFlash);
 800f648:	2502      	movs	r5, #2
 800f64a:	e7e5      	b.n	800f618 <HAL_FLASHEx_Erase_IT+0x2c>
 800f64c:	20000d80 	.word	0x20000d80
 800f650:	58004000 	.word	0x58004000

0800f654 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f654:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 800f656:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f658:	e05f      	b.n	800f71a <HAL_GPIO_Init+0xc6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f65a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800f65c:	005f      	lsls	r7, r3, #1
 800f65e:	2503      	movs	r5, #3
 800f660:	40bd      	lsls	r5, r7
 800f662:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f666:	68cd      	ldr	r5, [r1, #12]
 800f668:	40bd      	lsls	r5, r7
 800f66a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800f66c:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f66e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f670:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f674:	684d      	ldr	r5, [r1, #4]
 800f676:	f3c5 1400 	ubfx	r4, r5, #4, #1
 800f67a:	409c      	lsls	r4, r3
 800f67c:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 800f67e:	6044      	str	r4, [r0, #4]
 800f680:	e059      	b.n	800f736 <HAL_GPIO_Init+0xe2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f682:	08dd      	lsrs	r5, r3, #3
 800f684:	3508      	adds	r5, #8
 800f686:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800f68a:	f003 0407 	and.w	r4, r3, #7
 800f68e:	00a6      	lsls	r6, r4, #2
 800f690:	240f      	movs	r4, #15
 800f692:	40b4      	lsls	r4, r6
 800f694:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800f698:	690c      	ldr	r4, [r1, #16]
 800f69a:	40b4      	lsls	r4, r6
 800f69c:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 800f69e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800f6a2:	e05c      	b.n	800f75e <HAL_GPIO_Init+0x10a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800f6a4:	2402      	movs	r4, #2
 800f6a6:	e000      	b.n	800f6aa <HAL_GPIO_Init+0x56>
 800f6a8:	2400      	movs	r4, #0
 800f6aa:	40b4      	lsls	r4, r6
 800f6ac:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800f6ae:	3502      	adds	r5, #2
 800f6b0:	4e41      	ldr	r6, [pc, #260]	; (800f7b8 <HAL_GPIO_Init+0x164>)
 800f6b2:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800f6b6:	4c41      	ldr	r4, [pc, #260]	; (800f7bc <HAL_GPIO_Init+0x168>)
 800f6b8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800f6bc:	43d4      	mvns	r4, r2
 800f6be:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800f6c2:	684f      	ldr	r7, [r1, #4]
 800f6c4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800f6c8:	d001      	beq.n	800f6ce <HAL_GPIO_Init+0x7a>
        {
          temp |= iocurrent;
 800f6ca:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800f6ce:	4d3b      	ldr	r5, [pc, #236]	; (800f7bc <HAL_GPIO_Init+0x168>)
 800f6d0:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800f6d4:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800f6d8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800f6dc:	684f      	ldr	r7, [r1, #4]
 800f6de:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800f6e2:	d001      	beq.n	800f6e8 <HAL_GPIO_Init+0x94>
        {
          temp |= iocurrent;
 800f6e4:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800f6e8:	4d34      	ldr	r5, [pc, #208]	; (800f7bc <HAL_GPIO_Init+0x168>)
 800f6ea:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f6ee:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800f6f0:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800f6f4:	684f      	ldr	r7, [r1, #4]
 800f6f6:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800f6fa:	d001      	beq.n	800f700 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 800f6fc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800f700:	4d2e      	ldr	r5, [pc, #184]	; (800f7bc <HAL_GPIO_Init+0x168>)
 800f702:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800f704:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800f706:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800f708:	684e      	ldr	r6, [r1, #4]
 800f70a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800f70e:	d001      	beq.n	800f714 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 800f710:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 800f714:	4a29      	ldr	r2, [pc, #164]	; (800f7bc <HAL_GPIO_Init+0x168>)
 800f716:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 800f718:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f71a:	680a      	ldr	r2, [r1, #0]
 800f71c:	fa32 f403 	lsrs.w	r4, r2, r3
 800f720:	d048      	beq.n	800f7b4 <HAL_GPIO_Init+0x160>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800f722:	2401      	movs	r4, #1
 800f724:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 800f726:	4022      	ands	r2, r4
 800f728:	d0f6      	beq.n	800f718 <HAL_GPIO_Init+0xc4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f72a:	684d      	ldr	r5, [r1, #4]
 800f72c:	f005 0503 	and.w	r5, r5, #3
 800f730:	3d01      	subs	r5, #1
 800f732:	2d01      	cmp	r5, #1
 800f734:	d991      	bls.n	800f65a <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f736:	684c      	ldr	r4, [r1, #4]
 800f738:	f004 0403 	and.w	r4, r4, #3
 800f73c:	2c03      	cmp	r4, #3
 800f73e:	d009      	beq.n	800f754 <HAL_GPIO_Init+0x100>
        temp = GPIOx->PUPDR;
 800f740:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f742:	005e      	lsls	r6, r3, #1
 800f744:	2403      	movs	r4, #3
 800f746:	40b4      	lsls	r4, r6
 800f748:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f74c:	688c      	ldr	r4, [r1, #8]
 800f74e:	40b4      	lsls	r4, r6
 800f750:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800f752:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f754:	684c      	ldr	r4, [r1, #4]
 800f756:	f004 0403 	and.w	r4, r4, #3
 800f75a:	2c02      	cmp	r4, #2
 800f75c:	d091      	beq.n	800f682 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 800f75e:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800f760:	005e      	lsls	r6, r3, #1
 800f762:	2403      	movs	r4, #3
 800f764:	40b4      	lsls	r4, r6
 800f766:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f76a:	684c      	ldr	r4, [r1, #4]
 800f76c:	f004 0403 	and.w	r4, r4, #3
 800f770:	40b4      	lsls	r4, r6
 800f772:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800f774:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800f776:	684c      	ldr	r4, [r1, #4]
 800f778:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800f77c:	d0cc      	beq.n	800f718 <HAL_GPIO_Init+0xc4>
        temp = SYSCFG->EXTICR[position >> 2u];
 800f77e:	089d      	lsrs	r5, r3, #2
 800f780:	1cae      	adds	r6, r5, #2
 800f782:	4c0d      	ldr	r4, [pc, #52]	; (800f7b8 <HAL_GPIO_Init+0x164>)
 800f784:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800f788:	f003 0403 	and.w	r4, r3, #3
 800f78c:	00a6      	lsls	r6, r4, #2
 800f78e:	2407      	movs	r4, #7
 800f790:	40b4      	lsls	r4, r6
 800f792:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800f796:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800f79a:	d085      	beq.n	800f6a8 <HAL_GPIO_Init+0x54>
 800f79c:	4c08      	ldr	r4, [pc, #32]	; (800f7c0 <HAL_GPIO_Init+0x16c>)
 800f79e:	42a0      	cmp	r0, r4
 800f7a0:	d006      	beq.n	800f7b0 <HAL_GPIO_Init+0x15c>
 800f7a2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800f7a6:	42a0      	cmp	r0, r4
 800f7a8:	f43f af7c 	beq.w	800f6a4 <HAL_GPIO_Init+0x50>
 800f7ac:	2407      	movs	r4, #7
 800f7ae:	e77c      	b.n	800f6aa <HAL_GPIO_Init+0x56>
 800f7b0:	2401      	movs	r4, #1
 800f7b2:	e77a      	b.n	800f6aa <HAL_GPIO_Init+0x56>
  }
}
 800f7b4:	bcf0      	pop	{r4, r5, r6, r7}
 800f7b6:	4770      	bx	lr
 800f7b8:	40010000 	.word	0x40010000
 800f7bc:	58000800 	.word	0x58000800
 800f7c0:	48000400 	.word	0x48000400

0800f7c4 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 800f7c4:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800f7c6:	fa31 f203 	lsrs.w	r2, r1, r3
 800f7ca:	d06f      	beq.n	800f8ac <HAL_GPIO_DeInit+0xe8>
{
 800f7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7ce:	e02d      	b.n	800f82c <HAL_GPIO_DeInit+0x68>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800f7d0:	2702      	movs	r7, #2
 800f7d2:	e000      	b.n	800f7d6 <HAL_GPIO_DeInit+0x12>
 800f7d4:	2700      	movs	r7, #0
 800f7d6:	fa07 f404 	lsl.w	r4, r7, r4
 800f7da:	42b4      	cmp	r4, r6
 800f7dc:	d046      	beq.n	800f86c <HAL_GPIO_DeInit+0xa8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800f7de:	6805      	ldr	r5, [r0, #0]
 800f7e0:	005c      	lsls	r4, r3, #1
 800f7e2:	2603      	movs	r6, #3
 800f7e4:	fa06 f404 	lsl.w	r4, r6, r4
 800f7e8:	4325      	orrs	r5, r4
 800f7ea:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800f7ec:	fa23 f506 	lsr.w	r5, r3, r6
 800f7f0:	3508      	adds	r5, #8
 800f7f2:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800f7f6:	f003 0707 	and.w	r7, r3, #7
 800f7fa:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 800f7fe:	270f      	movs	r7, #15
 800f800:	fa07 f70c 	lsl.w	r7, r7, ip
 800f804:	ea26 0607 	bic.w	r6, r6, r7
 800f808:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800f80c:	6885      	ldr	r5, [r0, #8]
 800f80e:	ea25 0504 	bic.w	r5, r5, r4
 800f812:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800f814:	6845      	ldr	r5, [r0, #4]
 800f816:	ea25 0202 	bic.w	r2, r5, r2
 800f81a:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f81c:	68c2      	ldr	r2, [r0, #12]
 800f81e:	ea22 0404 	bic.w	r4, r2, r4
 800f822:	60c4      	str	r4, [r0, #12]
    }

    position++;
 800f824:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800f826:	fa31 f203 	lsrs.w	r2, r1, r3
 800f82a:	d03e      	beq.n	800f8aa <HAL_GPIO_DeInit+0xe6>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800f82c:	2201      	movs	r2, #1
 800f82e:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800f830:	ea12 0e01 	ands.w	lr, r2, r1
 800f834:	d0f6      	beq.n	800f824 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800f836:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800f83a:	f10c 0502 	add.w	r5, ip, #2
 800f83e:	4c1c      	ldr	r4, [pc, #112]	; (800f8b0 <HAL_GPIO_DeInit+0xec>)
 800f840:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800f844:	f003 0403 	and.w	r4, r3, #3
 800f848:	00a4      	lsls	r4, r4, #2
 800f84a:	2507      	movs	r5, #7
 800f84c:	40a5      	lsls	r5, r4
 800f84e:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800f850:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800f854:	d0be      	beq.n	800f7d4 <HAL_GPIO_DeInit+0x10>
 800f856:	4f17      	ldr	r7, [pc, #92]	; (800f8b4 <HAL_GPIO_DeInit+0xf0>)
 800f858:	42b8      	cmp	r0, r7
 800f85a:	d005      	beq.n	800f868 <HAL_GPIO_DeInit+0xa4>
 800f85c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800f860:	42b8      	cmp	r0, r7
 800f862:	d0b5      	beq.n	800f7d0 <HAL_GPIO_DeInit+0xc>
 800f864:	2707      	movs	r7, #7
 800f866:	e7b6      	b.n	800f7d6 <HAL_GPIO_DeInit+0x12>
 800f868:	2701      	movs	r7, #1
 800f86a:	e7b4      	b.n	800f7d6 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 800f86c:	4c12      	ldr	r4, [pc, #72]	; (800f8b8 <HAL_GPIO_DeInit+0xf4>)
 800f86e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800f872:	ea26 060e 	bic.w	r6, r6, lr
 800f876:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800f87a:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 800f87e:	ea26 060e 	bic.w	r6, r6, lr
 800f882:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800f886:	6826      	ldr	r6, [r4, #0]
 800f888:	ea26 060e 	bic.w	r6, r6, lr
 800f88c:	6026      	str	r6, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800f88e:	6866      	ldr	r6, [r4, #4]
 800f890:	ea26 060e 	bic.w	r6, r6, lr
 800f894:	6066      	str	r6, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800f896:	4e06      	ldr	r6, [pc, #24]	; (800f8b0 <HAL_GPIO_DeInit+0xec>)
 800f898:	f10c 0c02 	add.w	ip, ip, #2
 800f89c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 800f8a0:	ea24 0505 	bic.w	r5, r4, r5
 800f8a4:	f846 502c 	str.w	r5, [r6, ip, lsl #2]
 800f8a8:	e799      	b.n	800f7de <HAL_GPIO_DeInit+0x1a>
  }
}
 800f8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8ac:	4770      	bx	lr
 800f8ae:	bf00      	nop
 800f8b0:	40010000 	.word	0x40010000
 800f8b4:	48000400 	.word	0x48000400
 800f8b8:	58000800 	.word	0x58000800

0800f8bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f8bc:	b10a      	cbz	r2, 800f8c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f8be:	6181      	str	r1, [r0, #24]
 800f8c0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f8c2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800f8c4:	4770      	bx	lr
	...

0800f8c8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800f8c8:	b410      	push	{r4}
 800f8ca:	4604      	mov	r4, r0
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800f8cc:	4b0b      	ldr	r3, [pc, #44]	; (800f8fc <LPTIM_WaitForFlag+0x34>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4a0b      	ldr	r2, [pc, #44]	; (800f900 <LPTIM_WaitForFlag+0x38>)
 800f8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8d6:	0b9a      	lsrs	r2, r3, #14
 800f8d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f8dc:	fb03 f302 	mul.w	r3, r3, r2
  HAL_StatusTypeDef result = HAL_OK;
 800f8e0:	2000      	movs	r0, #0
 800f8e2:	e005      	b.n	800f8f0 <LPTIM_WaitForFlag+0x28>
    count--;
    if (count == 0UL)
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800f8e4:	6822      	ldr	r2, [r4, #0]
 800f8e6:	6812      	ldr	r2, [r2, #0]
 800f8e8:	ea31 0202 	bics.w	r2, r1, r2
 800f8ec:	d004      	beq.n	800f8f8 <LPTIM_WaitForFlag+0x30>
 800f8ee:	b11b      	cbz	r3, 800f8f8 <LPTIM_WaitForFlag+0x30>
    if (count == 0UL)
 800f8f0:	3b01      	subs	r3, #1
 800f8f2:	d1f7      	bne.n	800f8e4 <LPTIM_WaitForFlag+0x1c>
      result = HAL_TIMEOUT;
 800f8f4:	2003      	movs	r0, #3
 800f8f6:	e7f5      	b.n	800f8e4 <LPTIM_WaitForFlag+0x1c>

  return result;
}
 800f8f8:	bc10      	pop	{r4}
 800f8fa:	4770      	bx	lr
 800f8fc:	20000180 	.word	0x20000180
 800f900:	d1b71759 	.word	0xd1b71759

0800f904 <HAL_LPTIM_CompareMatchCallback>:
}
 800f904:	4770      	bx	lr

0800f906 <HAL_LPTIM_TriggerCallback>:
}
 800f906:	4770      	bx	lr

0800f908 <HAL_LPTIM_CompareWriteCallback>:
}
 800f908:	4770      	bx	lr

0800f90a <HAL_LPTIM_AutoReloadWriteCallback>:
}
 800f90a:	4770      	bx	lr

0800f90c <HAL_LPTIM_DirectionUpCallback>:
}
 800f90c:	4770      	bx	lr

0800f90e <HAL_LPTIM_DirectionDownCallback>:
}
 800f90e:	4770      	bx	lr

0800f910 <HAL_LPTIM_UpdateEventCallback>:
}
 800f910:	4770      	bx	lr

0800f912 <HAL_LPTIM_RepCounterWriteCallback>:
}
 800f912:	4770      	bx	lr

0800f914 <HAL_LPTIM_IRQHandler>:
{
 800f914:	b510      	push	{r4, lr}
 800f916:	4604      	mov	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800f918:	6803      	ldr	r3, [r0, #0]
 800f91a:	681a      	ldr	r2, [r3, #0]
 800f91c:	f012 0f01 	tst.w	r2, #1
 800f920:	d003      	beq.n	800f92a <HAL_LPTIM_IRQHandler+0x16>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800f922:	689a      	ldr	r2, [r3, #8]
 800f924:	f012 0f01 	tst.w	r2, #1
 800f928:	d148      	bne.n	800f9bc <HAL_LPTIM_IRQHandler+0xa8>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800f92a:	6823      	ldr	r3, [r4, #0]
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	f012 0f02 	tst.w	r2, #2
 800f932:	d003      	beq.n	800f93c <HAL_LPTIM_IRQHandler+0x28>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800f934:	689a      	ldr	r2, [r3, #8]
 800f936:	f012 0f02 	tst.w	r2, #2
 800f93a:	d144      	bne.n	800f9c6 <HAL_LPTIM_IRQHandler+0xb2>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800f93c:	6823      	ldr	r3, [r4, #0]
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	f012 0f04 	tst.w	r2, #4
 800f944:	d003      	beq.n	800f94e <HAL_LPTIM_IRQHandler+0x3a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800f946:	689a      	ldr	r2, [r3, #8]
 800f948:	f012 0f04 	tst.w	r2, #4
 800f94c:	d141      	bne.n	800f9d2 <HAL_LPTIM_IRQHandler+0xbe>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800f94e:	6823      	ldr	r3, [r4, #0]
 800f950:	681a      	ldr	r2, [r3, #0]
 800f952:	f012 0f08 	tst.w	r2, #8
 800f956:	d003      	beq.n	800f960 <HAL_LPTIM_IRQHandler+0x4c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800f958:	689a      	ldr	r2, [r3, #8]
 800f95a:	f012 0f08 	tst.w	r2, #8
 800f95e:	d13e      	bne.n	800f9de <HAL_LPTIM_IRQHandler+0xca>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800f960:	6823      	ldr	r3, [r4, #0]
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	f012 0f10 	tst.w	r2, #16
 800f968:	d003      	beq.n	800f972 <HAL_LPTIM_IRQHandler+0x5e>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800f96a:	689a      	ldr	r2, [r3, #8]
 800f96c:	f012 0f10 	tst.w	r2, #16
 800f970:	d13b      	bne.n	800f9ea <HAL_LPTIM_IRQHandler+0xd6>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800f972:	6823      	ldr	r3, [r4, #0]
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	f012 0f20 	tst.w	r2, #32
 800f97a:	d003      	beq.n	800f984 <HAL_LPTIM_IRQHandler+0x70>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800f97c:	689a      	ldr	r2, [r3, #8]
 800f97e:	f012 0f20 	tst.w	r2, #32
 800f982:	d138      	bne.n	800f9f6 <HAL_LPTIM_IRQHandler+0xe2>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800f984:	6823      	ldr	r3, [r4, #0]
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f98c:	d003      	beq.n	800f996 <HAL_LPTIM_IRQHandler+0x82>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800f98e:	689a      	ldr	r2, [r3, #8]
 800f990:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f994:	d135      	bne.n	800fa02 <HAL_LPTIM_IRQHandler+0xee>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 800f996:	6823      	ldr	r3, [r4, #0]
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f99e:	d003      	beq.n	800f9a8 <HAL_LPTIM_IRQHandler+0x94>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 800f9a0:	689a      	ldr	r2, [r3, #8]
 800f9a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f9a6:	d132      	bne.n	800fa0e <HAL_LPTIM_IRQHandler+0xfa>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 800f9a8:	6823      	ldr	r3, [r4, #0]
 800f9aa:	681a      	ldr	r2, [r3, #0]
 800f9ac:	f412 7f80 	tst.w	r2, #256	; 0x100
 800f9b0:	d003      	beq.n	800f9ba <HAL_LPTIM_IRQHandler+0xa6>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 800f9b2:	689a      	ldr	r2, [r3, #8]
 800f9b4:	f412 7f80 	tst.w	r2, #256	; 0x100
 800f9b8:	d12f      	bne.n	800fa1a <HAL_LPTIM_IRQHandler+0x106>
}
 800f9ba:	bd10      	pop	{r4, pc}
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800f9bc:	2201      	movs	r2, #1
 800f9be:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800f9c0:	f7ff ffa0 	bl	800f904 <HAL_LPTIM_CompareMatchCallback>
 800f9c4:	e7b1      	b.n	800f92a <HAL_LPTIM_IRQHandler+0x16>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800f9c6:	2202      	movs	r2, #2
 800f9c8:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	f7fe f98e 	bl	800dcec <HAL_LPTIM_AutoReloadMatchCallback>
 800f9d0:	e7b4      	b.n	800f93c <HAL_LPTIM_IRQHandler+0x28>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800f9d2:	2204      	movs	r2, #4
 800f9d4:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	f7ff ff95 	bl	800f906 <HAL_LPTIM_TriggerCallback>
 800f9dc:	e7b7      	b.n	800f94e <HAL_LPTIM_IRQHandler+0x3a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800f9de:	2208      	movs	r2, #8
 800f9e0:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	f7ff ff90 	bl	800f908 <HAL_LPTIM_CompareWriteCallback>
 800f9e8:	e7ba      	b.n	800f960 <HAL_LPTIM_IRQHandler+0x4c>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800f9ea:	2210      	movs	r2, #16
 800f9ec:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f7ff ff8b 	bl	800f90a <HAL_LPTIM_AutoReloadWriteCallback>
 800f9f4:	e7bd      	b.n	800f972 <HAL_LPTIM_IRQHandler+0x5e>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800f9f6:	2220      	movs	r2, #32
 800f9f8:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f7ff ff86 	bl	800f90c <HAL_LPTIM_DirectionUpCallback>
 800fa00:	e7c0      	b.n	800f984 <HAL_LPTIM_IRQHandler+0x70>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800fa02:	2240      	movs	r2, #64	; 0x40
 800fa04:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800fa06:	4620      	mov	r0, r4
 800fa08:	f7ff ff81 	bl	800f90e <HAL_LPTIM_DirectionDownCallback>
 800fa0c:	e7c3      	b.n	800f996 <HAL_LPTIM_IRQHandler+0x82>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 800fa0e:	2280      	movs	r2, #128	; 0x80
 800fa10:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_UpdateEventCallback(hlptim);
 800fa12:	4620      	mov	r0, r4
 800fa14:	f7ff ff7c 	bl	800f910 <HAL_LPTIM_UpdateEventCallback>
 800fa18:	e7c6      	b.n	800f9a8 <HAL_LPTIM_IRQHandler+0x94>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800fa1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fa1e:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 800fa20:	4620      	mov	r0, r4
 800fa22:	f7ff ff76 	bl	800f912 <HAL_LPTIM_RepCounterWriteCallback>
}
 800fa26:	e7c8      	b.n	800f9ba <HAL_LPTIM_IRQHandler+0xa6>

0800fa28 <HAL_LPTIM_GetState>:
  return hlptim->State;
 800fa28:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
}
 800fa2c:	4770      	bx	lr
	...

0800fa30 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 800fa30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa34:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
 800fa36:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800fa38:	6803      	ldr	r3, [r0, #0]
 800fa3a:	4a8f      	ldr	r2, [pc, #572]	; (800fc78 <LPTIM_Disable+0x248>)
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d061      	beq.n	800fb04 <LPTIM_Disable+0xd4>
 800fa40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d067      	beq.n	800fb18 <LPTIM_Disable+0xe8>
 800fa48:	f5a2 52e0 	sub.w	r2, r2, #7168	; 0x1c00
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d04f      	beq.n	800faf0 <LPTIM_Disable+0xc0>
 800fa50:	2500      	movs	r5, #0
    default:
      break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800fa52:	f8d3 8008 	ldr.w	r8, [r3, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 800fa56:	68df      	ldr	r7, [r3, #12]
  tmpCMP = hlptim->Instance->CMP;
 800fa58:	695a      	ldr	r2, [r3, #20]
  tmpARR = hlptim->Instance->ARR;
 800fa5a:	f8d3 9018 	ldr.w	r9, [r3, #24]
  tmpOR = hlptim->Instance->OR;
 800fa5e:	6a1e      	ldr	r6, [r3, #32]
  tmpRCR = hlptim->Instance->RCR;
 800fa60:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800fa64:	4984      	ldr	r1, [pc, #528]	; (800fc78 <LPTIM_Disable+0x248>)
 800fa66:	428b      	cmp	r3, r1
 800fa68:	d06b      	beq.n	800fb42 <LPTIM_Disable+0x112>
 800fa6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fa6e:	428b      	cmp	r3, r1
 800fa70:	d072      	beq.n	800fb58 <LPTIM_Disable+0x128>
 800fa72:	f5a1 51e0 	sub.w	r1, r1, #7168	; 0x1c00
 800fa76:	428b      	cmp	r3, r1
 800fa78:	d058      	beq.n	800fb2c <LPTIM_Disable+0xfc>
    default:
      break;
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 800fa7a:	b92a      	cbnz	r2, 800fa88 <LPTIM_Disable+0x58>
 800fa7c:	f1b9 0f00 	cmp.w	r9, #0
 800fa80:	d102      	bne.n	800fa88 <LPTIM_Disable+0x58>
 800fa82:	f1ba 0f00 	cmp.w	sl, #0
 800fa86:	d024      	beq.n	800fad2 <LPTIM_Disable+0xa2>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800fa88:	6823      	ldr	r3, [r4, #0]
 800fa8a:	497b      	ldr	r1, [pc, #492]	; (800fc78 <LPTIM_Disable+0x248>)
 800fa8c:	428b      	cmp	r3, r1
 800fa8e:	d077      	beq.n	800fb80 <LPTIM_Disable+0x150>
 800fa90:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fa94:	428b      	cmp	r3, r1
 800fa96:	d07c      	beq.n	800fb92 <LPTIM_Disable+0x162>
 800fa98:	f5a1 51e0 	sub.w	r1, r1, #7168	; 0x1c00
 800fa9c:	428b      	cmp	r3, r1
 800fa9e:	d066      	beq.n	800fb6e <LPTIM_Disable+0x13e>
        break;
      default:
        break;
    }

    if (tmpCMP != 0UL)
 800faa0:	2a00      	cmp	r2, #0
 800faa2:	d17f      	bne.n	800fba4 <LPTIM_Disable+0x174>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
    }

    if (tmpARR != 0UL)
 800faa4:	f1b9 0f00 	cmp.w	r9, #0
 800faa8:	f040 8091 	bne.w	800fbce <LPTIM_Disable+0x19e>
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
    }

    if (tmpRCR != 0UL)
 800faac:	f1ba 0f00 	cmp.w	sl, #0
 800fab0:	f040 80a3 	bne.w	800fbfa <LPTIM_Disable+0x1ca>
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800fab4:	6823      	ldr	r3, [r4, #0]
 800fab6:	4a70      	ldr	r2, [pc, #448]	; (800fc78 <LPTIM_Disable+0x248>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	f000 80c3 	beq.w	800fc44 <LPTIM_Disable+0x214>
 800fabe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fac2:	4293      	cmp	r3, r2
 800fac4:	f000 80cb 	beq.w	800fc5e <LPTIM_Disable+0x22e>
 800fac8:	f5a2 52e0 	sub.w	r2, r2, #7168	; 0x1c00
 800facc:	4293      	cmp	r3, r2
 800face:	f000 80ac 	beq.w	800fc2a <LPTIM_Disable+0x1fa>
        break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800fad2:	6822      	ldr	r2, [r4, #0]
 800fad4:	6913      	ldr	r3, [r2, #16]
 800fad6:	f023 0301 	bic.w	r3, r3, #1
 800fada:	6113      	str	r3, [r2, #16]
  hlptim->Instance->IER = tmpIER;
 800fadc:	6823      	ldr	r3, [r4, #0]
 800fade:	f8c3 8008 	str.w	r8, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800fae2:	6823      	ldr	r3, [r4, #0]
 800fae4:	60df      	str	r7, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 800fae6:	6823      	ldr	r3, [r4, #0]
 800fae8:	621e      	str	r6, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 800faea:	b662      	cpsie	i

  __enable_irq();
}
 800faec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 800faf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800faf4:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
 800faf8:	0c2d      	lsrs	r5, r5, #16
 800fafa:	f005 050c 	and.w	r5, r5, #12
 800fafe:	f445 2540 	orr.w	r5, r5, #786432	; 0xc0000
      break;
 800fb02:	e7a6      	b.n	800fa52 <LPTIM_Disable+0x22>
 800fb04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800fb08:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
 800fb0c:	0c2d      	lsrs	r5, r5, #16
 800fb0e:	f005 0530 	and.w	r5, r5, #48	; 0x30
 800fb12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
      break;
 800fb16:	e79c      	b.n	800fa52 <LPTIM_Disable+0x22>
 800fb18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800fb1c:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
 800fb20:	0c2d      	lsrs	r5, r5, #16
 800fb22:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
 800fb26:	f445 0540 	orr.w	r5, r5, #12582912	; 0xc00000
      break;
 800fb2a:	e792      	b.n	800fa52 <LPTIM_Disable+0x22>
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800fb2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fb30:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800fb32:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800fb36:	6399      	str	r1, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800fb38:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800fb3a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fb3e:	6399      	str	r1, [r3, #56]	; 0x38
}
 800fb40:	e79b      	b.n	800fa7a <LPTIM_Disable+0x4a>
  SET_BIT(RCC->APB1RSTR2, Periphs);
 800fb42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fb46:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800fb48:	f041 0120 	orr.w	r1, r1, #32
 800fb4c:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 800fb4e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800fb50:	f021 0120 	bic.w	r1, r1, #32
 800fb54:	63d9      	str	r1, [r3, #60]	; 0x3c
}
 800fb56:	e790      	b.n	800fa7a <LPTIM_Disable+0x4a>
  SET_BIT(RCC->APB1RSTR2, Periphs);
 800fb58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fb5c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800fb5e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800fb62:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 800fb64:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800fb66:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800fb6a:	63d9      	str	r1, [r3, #60]	; 0x3c
}
 800fb6c:	e785      	b.n	800fa7a <LPTIM_Disable+0x4a>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800fb6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fb72:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800fb76:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800fb7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800fb7e:	e78f      	b.n	800faa0 <LPTIM_Disable+0x70>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800fb80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fb84:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800fb88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800fb8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800fb90:	e786      	b.n	800faa0 <LPTIM_Disable+0x70>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800fb92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fb96:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800fb9a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800fb9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800fba2:	e77d      	b.n	800faa0 <LPTIM_Disable+0x70>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800fba4:	6821      	ldr	r1, [r4, #0]
 800fba6:	690b      	ldr	r3, [r1, #16]
 800fba8:	f043 0301 	orr.w	r3, r3, #1
 800fbac:	610b      	str	r3, [r1, #16]
      hlptim->Instance->CMP = tmpCMP;
 800fbae:	6823      	ldr	r3, [r4, #0]
 800fbb0:	615a      	str	r2, [r3, #20]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800fbb2:	2108      	movs	r1, #8
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	f7ff fe87 	bl	800f8c8 <LPTIM_WaitForFlag>
 800fbba:	2803      	cmp	r0, #3
 800fbbc:	d003      	beq.n	800fbc6 <LPTIM_Disable+0x196>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800fbbe:	6823      	ldr	r3, [r4, #0]
 800fbc0:	2208      	movs	r2, #8
 800fbc2:	605a      	str	r2, [r3, #4]
 800fbc4:	e76e      	b.n	800faa4 <LPTIM_Disable+0x74>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800fbc6:	2303      	movs	r3, #3
 800fbc8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 800fbcc:	e7f7      	b.n	800fbbe <LPTIM_Disable+0x18e>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800fbce:	6822      	ldr	r2, [r4, #0]
 800fbd0:	6913      	ldr	r3, [r2, #16]
 800fbd2:	f043 0301 	orr.w	r3, r3, #1
 800fbd6:	6113      	str	r3, [r2, #16]
      hlptim->Instance->ARR = tmpARR;
 800fbd8:	6823      	ldr	r3, [r4, #0]
 800fbda:	f8c3 9018 	str.w	r9, [r3, #24]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800fbde:	2110      	movs	r1, #16
 800fbe0:	4620      	mov	r0, r4
 800fbe2:	f7ff fe71 	bl	800f8c8 <LPTIM_WaitForFlag>
 800fbe6:	2803      	cmp	r0, #3
 800fbe8:	d003      	beq.n	800fbf2 <LPTIM_Disable+0x1c2>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800fbea:	6823      	ldr	r3, [r4, #0]
 800fbec:	2210      	movs	r2, #16
 800fbee:	605a      	str	r2, [r3, #4]
 800fbf0:	e75c      	b.n	800faac <LPTIM_Disable+0x7c>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800fbf2:	2303      	movs	r3, #3
 800fbf4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 800fbf8:	e7f7      	b.n	800fbea <LPTIM_Disable+0x1ba>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800fbfa:	6822      	ldr	r2, [r4, #0]
 800fbfc:	6913      	ldr	r3, [r2, #16]
 800fbfe:	f043 0301 	orr.w	r3, r3, #1
 800fc02:	6113      	str	r3, [r2, #16]
      hlptim->Instance->RCR = tmpRCR;
 800fc04:	6823      	ldr	r3, [r4, #0]
 800fc06:	f8c3 a028 	str.w	sl, [r3, #40]	; 0x28
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800fc0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fc0e:	4620      	mov	r0, r4
 800fc10:	f7ff fe5a 	bl	800f8c8 <LPTIM_WaitForFlag>
 800fc14:	2803      	cmp	r0, #3
 800fc16:	d004      	beq.n	800fc22 <LPTIM_Disable+0x1f2>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800fc18:	6823      	ldr	r3, [r4, #0]
 800fc1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fc1e:	605a      	str	r2, [r3, #4]
 800fc20:	e748      	b.n	800fab4 <LPTIM_Disable+0x84>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800fc22:	2303      	movs	r3, #3
 800fc24:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 800fc28:	e7f6      	b.n	800fc18 <LPTIM_Disable+0x1e8>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800fc2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800fc2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800fc32:	f405 017c 	and.w	r1, r5, #16515072	; 0xfc0000
 800fc36:	ea23 0301 	bic.w	r3, r3, r1
 800fc3a:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800fc3e:	f8c2 5088 	str.w	r5, [r2, #136]	; 0x88
}
 800fc42:	e746      	b.n	800fad2 <LPTIM_Disable+0xa2>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800fc44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800fc48:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800fc4c:	f405 017c 	and.w	r1, r5, #16515072	; 0xfc0000
 800fc50:	ea23 0301 	bic.w	r3, r3, r1
 800fc54:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800fc58:	f8c2 5088 	str.w	r5, [r2, #136]	; 0x88
}
 800fc5c:	e739      	b.n	800fad2 <LPTIM_Disable+0xa2>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800fc5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800fc62:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800fc66:	f405 017c 	and.w	r1, r5, #16515072	; 0xfc0000
 800fc6a:	ea23 0301 	bic.w	r3, r3, r1
 800fc6e:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800fc72:	f8c2 5088 	str.w	r5, [r2, #136]	; 0x88
}
 800fc76:	e72c      	b.n	800fad2 <LPTIM_Disable+0xa2>
 800fc78:	40009400 	.word	0x40009400

0800fc7c <HAL_LPTIM_Init>:
  if (hlptim == NULL)
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	d06e      	beq.n	800fd5e <HAL_LPTIM_Init+0xe2>
{
 800fc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc82:	4604      	mov	r4, r0
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800fc84:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d05e      	beq.n	800fd4a <HAL_LPTIM_Init+0xce>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800fc8c:	2302      	movs	r3, #2
 800fc8e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  __HAL_LPTIM_ENABLE(hlptim);
 800fc92:	6822      	ldr	r2, [r4, #0]
 800fc94:	6913      	ldr	r3, [r2, #16]
 800fc96:	f043 0301 	orr.w	r3, r3, #1
 800fc9a:	6113      	str	r3, [r2, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800fc9c:	6823      	ldr	r3, [r4, #0]
 800fc9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fca2:	6059      	str	r1, [r3, #4]
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800fca4:	6823      	ldr	r3, [r4, #0]
 800fca6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fca8:	629a      	str	r2, [r3, #40]	; 0x28
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800fcaa:	4620      	mov	r0, r4
 800fcac:	f7ff fe0c 	bl	800f8c8 <LPTIM_WaitForFlag>
 800fcb0:	2803      	cmp	r0, #3
 800fcb2:	d049      	beq.n	800fd48 <HAL_LPTIM_Init+0xcc>
  __HAL_LPTIM_DISABLE(hlptim);
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	f7ff febb 	bl	800fa30 <LPTIM_Disable>
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800fcba:	4620      	mov	r0, r4
 800fcbc:	f7ff feb4 	bl	800fa28 <HAL_LPTIM_GetState>
 800fcc0:	2803      	cmp	r0, #3
 800fcc2:	d041      	beq.n	800fd48 <HAL_LPTIM_Init+0xcc>
  tmpcfgr = hlptim->Instance->CFGR;
 800fcc4:	6826      	ldr	r6, [r4, #0]
 800fcc6:	68f2      	ldr	r2, [r6, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800fcc8:	6860      	ldr	r0, [r4, #4]
 800fcca:	2801      	cmp	r0, #1
 800fccc:	d003      	beq.n	800fcd6 <HAL_LPTIM_Init+0x5a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800fcce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fcd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fcd4:	d101      	bne.n	800fcda <HAL_LPTIM_Init+0x5e>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800fcd6:	f022 021e 	bic.w	r2, r2, #30
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800fcda:	6961      	ldr	r1, [r4, #20]
 800fcdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fce0:	4299      	cmp	r1, r3
 800fce2:	d003      	beq.n	800fcec <HAL_LPTIM_Init+0x70>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800fce4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800fce8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800fcec:	4d1d      	ldr	r5, [pc, #116]	; (800fd64 <HAL_LPTIM_Init+0xe8>)
 800fcee:	4015      	ands	r5, r2
              hlptim->Init.Clock.Prescaler |
 800fcf0:	68a2      	ldr	r2, [r4, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800fcf2:	ea40 0302 	orr.w	r3, r0, r2
              hlptim->Init.OutputPolarity  |
 800fcf6:	6a22      	ldr	r2, [r4, #32]
              hlptim->Init.Clock.Prescaler |
 800fcf8:	4313      	orrs	r3, r2
              hlptim->Init.UpdateMode      |
 800fcfa:	6a62      	ldr	r2, [r4, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800fcfc:	4313      	orrs	r3, r2
              hlptim->Init.CounterSource);
 800fcfe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800fd00:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800fd02:	432b      	orrs	r3, r5
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800fd04:	b918      	cbnz	r0, 800fd0e <HAL_LPTIM_Init+0x92>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800fd06:	69e5      	ldr	r5, [r4, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800fd08:	6927      	ldr	r7, [r4, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800fd0a:	433d      	orrs	r5, r7
 800fd0c:	432b      	orrs	r3, r5
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800fd0e:	2801      	cmp	r0, #1
 800fd10:	d002      	beq.n	800fd18 <HAL_LPTIM_Init+0x9c>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800fd12:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800fd16:	d103      	bne.n	800fd20 <HAL_LPTIM_Init+0xa4>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800fd18:	68e2      	ldr	r2, [r4, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800fd1a:	6920      	ldr	r0, [r4, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800fd1c:	4302      	orrs	r2, r0
 800fd1e:	4313      	orrs	r3, r2
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800fd20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd24:	4291      	cmp	r1, r2
 800fd26:	d004      	beq.n	800fd32 <HAL_LPTIM_Init+0xb6>
                hlptim->Init.Trigger.ActiveEdge |
 800fd28:	69a2      	ldr	r2, [r4, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800fd2a:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.SampleTime);
 800fd2c:	69e2      	ldr	r2, [r4, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800fd2e:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800fd30:	430b      	orrs	r3, r1
  hlptim->Instance->CFGR = tmpcfgr;
 800fd32:	60f3      	str	r3, [r6, #12]
  if (hlptim->Instance == LPTIM1)
 800fd34:	6823      	ldr	r3, [r4, #0]
 800fd36:	4a0c      	ldr	r2, [pc, #48]	; (800fd68 <HAL_LPTIM_Init+0xec>)
 800fd38:	4293      	cmp	r3, r2
 800fd3a:	d00b      	beq.n	800fd54 <HAL_LPTIM_Init+0xd8>
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800fd3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fd3e:	621a      	str	r2, [r3, #32]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800fd40:	2301      	movs	r3, #1
 800fd42:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800fd46:	2000      	movs	r0, #0
}
 800fd48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 800fd4a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    HAL_LPTIM_MspInit(hlptim);
 800fd4e:	f7f6 ff19 	bl	8006b84 <HAL_LPTIM_MspInit>
 800fd52:	e79b      	b.n	800fc8c <HAL_LPTIM_Init+0x10>
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800fd54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fd56:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fd58:	430a      	orrs	r2, r1
 800fd5a:	621a      	str	r2, [r3, #32]
 800fd5c:	e7f0      	b.n	800fd40 <HAL_LPTIM_Init+0xc4>
    return HAL_ERROR;
 800fd5e:	2001      	movs	r0, #1
}
 800fd60:	4770      	bx	lr
 800fd62:	bf00      	nop
 800fd64:	ff19f1fe 	.word	0xff19f1fe
 800fd68:	40007c00 	.word	0x40007c00

0800fd6c <HAL_LPTIM_DeInit>:
  if (hlptim == NULL)
 800fd6c:	b1a0      	cbz	r0, 800fd98 <HAL_LPTIM_DeInit+0x2c>
{
 800fd6e:	b510      	push	{r4, lr}
 800fd70:	4604      	mov	r4, r0
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800fd72:	2302      	movs	r3, #2
 800fd74:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  __HAL_LPTIM_DISABLE(hlptim);
 800fd78:	f7ff fe5a 	bl	800fa30 <LPTIM_Disable>
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	f7ff fe53 	bl	800fa28 <HAL_LPTIM_GetState>
 800fd82:	2803      	cmp	r0, #3
 800fd84:	d007      	beq.n	800fd96 <HAL_LPTIM_DeInit+0x2a>
  HAL_LPTIM_MspDeInit(hlptim);
 800fd86:	4620      	mov	r0, r4
 800fd88:	f7f6 ff2e 	bl	8006be8 <HAL_LPTIM_MspDeInit>
  hlptim->State = HAL_LPTIM_STATE_RESET;
 800fd8c:	2000      	movs	r0, #0
 800fd8e:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
  __HAL_UNLOCK(hlptim);
 800fd92:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 800fd96:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800fd98:	2001      	movs	r0, #1
}
 800fd9a:	4770      	bx	lr

0800fd9c <HAL_LPTIM_PWM_Start_IT>:
{
 800fd9c:	b538      	push	{r3, r4, r5, lr}
 800fd9e:	4604      	mov	r4, r0
 800fda0:	460b      	mov	r3, r1
 800fda2:	4615      	mov	r5, r2
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800fda4:	2202      	movs	r2, #2
 800fda6:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 800fdaa:	6802      	ldr	r2, [r0, #0]
 800fdac:	68d1      	ldr	r1, [r2, #12]
 800fdae:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 800fdb2:	60d1      	str	r1, [r2, #12]
  __HAL_LPTIM_ENABLE(hlptim);
 800fdb4:	6802      	ldr	r2, [r0, #0]
 800fdb6:	6911      	ldr	r1, [r2, #16]
 800fdb8:	f041 0101 	orr.w	r1, r1, #1
 800fdbc:	6111      	str	r1, [r2, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800fdbe:	6802      	ldr	r2, [r0, #0]
 800fdc0:	2110      	movs	r1, #16
 800fdc2:	6051      	str	r1, [r2, #4]
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800fdc4:	6802      	ldr	r2, [r0, #0]
 800fdc6:	6193      	str	r3, [r2, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800fdc8:	f7ff fd7e 	bl	800f8c8 <LPTIM_WaitForFlag>
 800fdcc:	2803      	cmp	r0, #3
 800fdce:	d047      	beq.n	800fe60 <HAL_LPTIM_PWM_Start_IT+0xc4>
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800fdd0:	6823      	ldr	r3, [r4, #0]
 800fdd2:	2108      	movs	r1, #8
 800fdd4:	6059      	str	r1, [r3, #4]
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 800fdd6:	6823      	ldr	r3, [r4, #0]
 800fdd8:	615d      	str	r5, [r3, #20]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800fdda:	4620      	mov	r0, r4
 800fddc:	f7ff fd74 	bl	800f8c8 <LPTIM_WaitForFlag>
 800fde0:	2803      	cmp	r0, #3
 800fde2:	d03d      	beq.n	800fe60 <HAL_LPTIM_PWM_Start_IT+0xc4>
  __HAL_LPTIM_DISABLE(hlptim);
 800fde4:	4620      	mov	r0, r4
 800fde6:	f7ff fe23 	bl	800fa30 <LPTIM_Disable>
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800fdea:	4620      	mov	r0, r4
 800fdec:	f7ff fe1c 	bl	800fa28 <HAL_LPTIM_GetState>
 800fdf0:	2803      	cmp	r0, #3
 800fdf2:	d035      	beq.n	800fe60 <HAL_LPTIM_PWM_Start_IT+0xc4>
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800fdf4:	6822      	ldr	r2, [r4, #0]
 800fdf6:	6893      	ldr	r3, [r2, #8]
 800fdf8:	f043 0310 	orr.w	r3, r3, #16
 800fdfc:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 800fdfe:	6822      	ldr	r2, [r4, #0]
 800fe00:	6893      	ldr	r3, [r2, #8]
 800fe02:	f043 0308 	orr.w	r3, r3, #8
 800fe06:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800fe08:	6822      	ldr	r2, [r4, #0]
 800fe0a:	6893      	ldr	r3, [r2, #8]
 800fe0c:	f043 0302 	orr.w	r3, r3, #2
 800fe10:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 800fe12:	6822      	ldr	r2, [r4, #0]
 800fe14:	6893      	ldr	r3, [r2, #8]
 800fe16:	f043 0301 	orr.w	r3, r3, #1
 800fe1a:	6093      	str	r3, [r2, #8]
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800fe1c:	6962      	ldr	r2, [r4, #20]
 800fe1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d004      	beq.n	800fe30 <HAL_LPTIM_PWM_Start_IT+0x94>
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 800fe26:	6822      	ldr	r2, [r4, #0]
 800fe28:	6893      	ldr	r3, [r2, #8]
 800fe2a:	f043 0304 	orr.w	r3, r3, #4
 800fe2e:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 800fe30:	6822      	ldr	r2, [r4, #0]
 800fe32:	6893      	ldr	r3, [r2, #8]
 800fe34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fe38:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 800fe3a:	6822      	ldr	r2, [r4, #0]
 800fe3c:	6893      	ldr	r3, [r2, #8]
 800fe3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe42:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE(hlptim);
 800fe44:	6822      	ldr	r2, [r4, #0]
 800fe46:	6913      	ldr	r3, [r2, #16]
 800fe48:	f043 0301 	orr.w	r3, r3, #1
 800fe4c:	6113      	str	r3, [r2, #16]
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800fe4e:	6822      	ldr	r2, [r4, #0]
 800fe50:	6913      	ldr	r3, [r2, #16]
 800fe52:	f043 0304 	orr.w	r3, r3, #4
 800fe56:	6113      	str	r3, [r2, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800fe58:	2301      	movs	r3, #1
 800fe5a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800fe5e:	2000      	movs	r0, #0
}
 800fe60:	bd38      	pop	{r3, r4, r5, pc}

0800fe62 <HAL_LPTIM_PWM_Stop_IT>:
{
 800fe62:	b510      	push	{r4, lr}
 800fe64:	4604      	mov	r4, r0
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800fe66:	2302      	movs	r3, #2
 800fe68:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  __HAL_LPTIM_DISABLE(hlptim);
 800fe6c:	f7ff fde0 	bl	800fa30 <LPTIM_Disable>
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800fe70:	4620      	mov	r0, r4
 800fe72:	f7ff fdd9 	bl	800fa28 <HAL_LPTIM_GetState>
 800fe76:	2803      	cmp	r0, #3
 800fe78:	d02b      	beq.n	800fed2 <HAL_LPTIM_PWM_Stop_IT+0x70>
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 800fe7a:	6822      	ldr	r2, [r4, #0]
 800fe7c:	6893      	ldr	r3, [r2, #8]
 800fe7e:	f023 0310 	bic.w	r3, r3, #16
 800fe82:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPOK);
 800fe84:	6822      	ldr	r2, [r4, #0]
 800fe86:	6893      	ldr	r3, [r2, #8]
 800fe88:	f023 0308 	bic.w	r3, r3, #8
 800fe8c:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 800fe8e:	6822      	ldr	r2, [r4, #0]
 800fe90:	6893      	ldr	r3, [r2, #8]
 800fe92:	f023 0302 	bic.w	r3, r3, #2
 800fe96:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPM);
 800fe98:	6822      	ldr	r2, [r4, #0]
 800fe9a:	6893      	ldr	r3, [r2, #8]
 800fe9c:	f023 0301 	bic.w	r3, r3, #1
 800fea0:	6093      	str	r3, [r2, #8]
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800fea2:	6962      	ldr	r2, [r4, #20]
 800fea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d004      	beq.n	800feb6 <HAL_LPTIM_PWM_Stop_IT+0x54>
    __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 800feac:	6822      	ldr	r2, [r4, #0]
 800feae:	6893      	ldr	r3, [r2, #8]
 800feb0:	f023 0304 	bic.w	r3, r3, #4
 800feb4:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 800feb6:	6822      	ldr	r2, [r4, #0]
 800feb8:	6893      	ldr	r3, [r2, #8]
 800feba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800febe:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 800fec0:	6822      	ldr	r2, [r4, #0]
 800fec2:	6893      	ldr	r3, [r2, #8]
 800fec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fec8:	6093      	str	r3, [r2, #8]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800feca:	2301      	movs	r3, #1
 800fecc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800fed0:	2000      	movs	r0, #0
}
 800fed2:	bd10      	pop	{r4, pc}

0800fed4 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fed4:	4a02      	ldr	r2, [pc, #8]	; (800fee0 <HAL_PWR_EnableBkUpAccess+0xc>)
 800fed6:	6813      	ldr	r3, [r2, #0]
 800fed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fedc:	6013      	str	r3, [r2, #0]
}
 800fede:	4770      	bx	lr
 800fee0:	58000400 	.word	0x58000400

0800fee4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800fee4:	b510      	push	{r4, lr}
 800fee6:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800fee8:	b9a0      	cbnz	r0, 800ff14 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800feea:	4b0f      	ldr	r3, [pc, #60]	; (800ff28 <HAL_PWR_EnterSLEEPMode+0x44>)
 800feec:	695b      	ldr	r3, [r3, #20]
 800feee:	f413 7f00 	tst.w	r3, #512	; 0x200
 800fef2:	d10a      	bne.n	800ff0a <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800fef4:	4a0d      	ldr	r2, [pc, #52]	; (800ff2c <HAL_PWR_EnterSLEEPMode+0x48>)
 800fef6:	6913      	ldr	r3, [r2, #16]
 800fef8:	f023 0304 	bic.w	r3, r3, #4
 800fefc:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800fefe:	2c01      	cmp	r4, #1
 800ff00:	d010      	beq.n	800ff24 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800ff02:	bf40      	sev
    __WFE();
 800ff04:	bf20      	wfe
    __WFE();
 800ff06:	bf20      	wfe
  }
}
 800ff08:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800ff0a:	f000 f821 	bl	800ff50 <HAL_PWREx_DisableLowPowerRunMode>
 800ff0e:	2800      	cmp	r0, #0
 800ff10:	d0f0      	beq.n	800fef4 <HAL_PWR_EnterSLEEPMode+0x10>
 800ff12:	e7f9      	b.n	800ff08 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800ff14:	4b04      	ldr	r3, [pc, #16]	; (800ff28 <HAL_PWR_EnterSLEEPMode+0x44>)
 800ff16:	695b      	ldr	r3, [r3, #20]
 800ff18:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ff1c:	d1ea      	bne.n	800fef4 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800ff1e:	f000 f80f 	bl	800ff40 <HAL_PWREx_EnableLowPowerRunMode>
 800ff22:	e7e7      	b.n	800fef4 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 800ff24:	bf30      	wfi
 800ff26:	e7ef      	b.n	800ff08 <HAL_PWR_EnterSLEEPMode+0x24>
 800ff28:	58000400 	.word	0x58000400
 800ff2c:	e000ed00 	.word	0xe000ed00

0800ff30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 800ff30:	4b02      	ldr	r3, [pc, #8]	; (800ff3c <HAL_PWREx_GetVoltageRange+0xc>)
 800ff32:	6818      	ldr	r0, [r3, #0]
}
 800ff34:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800ff38:	4770      	bx	lr
 800ff3a:	bf00      	nop
 800ff3c:	58000400 	.word	0x58000400

0800ff40 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800ff40:	4a02      	ldr	r2, [pc, #8]	; (800ff4c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800ff42:	6813      	ldr	r3, [r2, #0]
 800ff44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ff48:	6013      	str	r3, [r2, #0]
}
 800ff4a:	4770      	bx	lr
 800ff4c:	58000400 	.word	0x58000400

0800ff50 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800ff50:	4a0f      	ldr	r2, [pc, #60]	; (800ff90 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800ff52:	6813      	ldr	r3, [r2, #0]
 800ff54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ff58:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800ff5a:	4b0e      	ldr	r3, [pc, #56]	; (800ff94 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 800ff5c:	681a      	ldr	r2, [r3, #0]
 800ff5e:	2332      	movs	r3, #50	; 0x32
 800ff60:	fb03 f302 	mul.w	r3, r3, r2
 800ff64:	4a0c      	ldr	r2, [pc, #48]	; (800ff98 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 800ff66:	fba2 2303 	umull	r2, r3, r2, r3
 800ff6a:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800ff6c:	4a08      	ldr	r2, [pc, #32]	; (800ff90 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800ff6e:	6952      	ldr	r2, [r2, #20]
 800ff70:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ff74:	d002      	beq.n	800ff7c <HAL_PWREx_DisableLowPowerRunMode+0x2c>
 800ff76:	b10b      	cbz	r3, 800ff7c <HAL_PWREx_DisableLowPowerRunMode+0x2c>
  {
    wait_loop_index--;
 800ff78:	3b01      	subs	r3, #1
 800ff7a:	e7f7      	b.n	800ff6c <HAL_PWREx_DisableLowPowerRunMode+0x1c>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800ff7c:	4b04      	ldr	r3, [pc, #16]	; (800ff90 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800ff7e:	695b      	ldr	r3, [r3, #20]
 800ff80:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ff84:	d101      	bne.n	800ff8a <HAL_PWREx_DisableLowPowerRunMode+0x3a>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 800ff86:	2000      	movs	r0, #0
 800ff88:	4770      	bx	lr
    return HAL_TIMEOUT;
 800ff8a:	2003      	movs	r0, #3
}
 800ff8c:	4770      	bx	lr
 800ff8e:	bf00      	nop
 800ff90:	58000400 	.word	0x58000400
 800ff94:	20000180 	.word	0x20000180
 800ff98:	431bde83 	.word	0x431bde83

0800ff9c <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800ff9c:	4a0c      	ldr	r2, [pc, #48]	; (800ffd0 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 800ff9e:	6813      	ldr	r3, [r2, #0]
 800ffa0:	f023 0307 	bic.w	r3, r3, #7
 800ffa4:	f043 0302 	orr.w	r3, r3, #2
 800ffa8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800ffaa:	4a0a      	ldr	r2, [pc, #40]	; (800ffd4 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 800ffac:	6913      	ldr	r3, [r2, #16]
 800ffae:	f043 0304 	orr.w	r3, r3, #4
 800ffb2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800ffb4:	2801      	cmp	r0, #1
 800ffb6:	d008      	beq.n	800ffca <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800ffb8:	bf40      	sev
    __WFE();
 800ffba:	bf20      	wfe
    __WFE();
 800ffbc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800ffbe:	4a05      	ldr	r2, [pc, #20]	; (800ffd4 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 800ffc0:	6913      	ldr	r3, [r2, #16]
 800ffc2:	f023 0304 	bic.w	r3, r3, #4
 800ffc6:	6113      	str	r3, [r2, #16]
}
 800ffc8:	4770      	bx	lr
    __WFI();
 800ffca:	bf30      	wfi
 800ffcc:	e7f7      	b.n	800ffbe <HAL_PWREx_EnterSTOP2Mode+0x22>
 800ffce:	bf00      	nop
 800ffd0:	58000400 	.word	0x58000400
 800ffd4:	e000ed00 	.word	0xe000ed00

0800ffd8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800ffd8:	b570      	push	{r4, r5, r6, lr}
 800ffda:	b088      	sub	sp, #32
 800ffdc:	4604      	mov	r4, r0
 800ffde:	460e      	mov	r6, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800ffe0:	4b29      	ldr	r3, [pc, #164]	; (8010088 <RCC_SetFlashLatency+0xb0>)
 800ffe2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ffe6:	9006      	str	r0, [sp, #24]
 800ffe8:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800ffec:	68d9      	ldr	r1, [r3, #12]
 800ffee:	6898      	ldr	r0, [r3, #8]
 800fff0:	9004      	str	r0, [sp, #16]
 800fff2:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800fff6:	ad01      	add	r5, sp, #4
 800fff8:	3310      	adds	r3, #16
 800fffa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fffe:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010002:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010006:	d01b      	beq.n	8010040 <RCC_SetFlashLatency+0x68>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8010008:	2300      	movs	r3, #0
 801000a:	2b02      	cmp	r3, #2
 801000c:	d822      	bhi.n	8010054 <RCC_SetFlashLatency+0x7c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801000e:	aa08      	add	r2, sp, #32
 8010010:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8010014:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8010018:	42a2      	cmp	r2, r4
 801001a:	d215      	bcs.n	8010048 <RCC_SetFlashLatency+0x70>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801001c:	3301      	adds	r3, #1
 801001e:	e7f4      	b.n	801000a <RCC_SetFlashLatency+0x32>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8010020:	3301      	adds	r3, #1
 8010022:	2b02      	cmp	r3, #2
 8010024:	d80e      	bhi.n	8010044 <RCC_SetFlashLatency+0x6c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8010026:	aa08      	add	r2, sp, #32
 8010028:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801002c:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8010030:	42a2      	cmp	r2, r4
 8010032:	d3f5      	bcc.n	8010020 <RCC_SetFlashLatency+0x48>
        latency = FLASH_LATENCY_RANGE[index];
 8010034:	aa08      	add	r2, sp, #32
 8010036:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801003a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 801003e:	e00a      	b.n	8010056 <RCC_SetFlashLatency+0x7e>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8010040:	2300      	movs	r3, #0
 8010042:	e7ee      	b.n	8010022 <RCC_SetFlashLatency+0x4a>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8010044:	2500      	movs	r5, #0
 8010046:	e006      	b.n	8010056 <RCC_SetFlashLatency+0x7e>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8010048:	aa08      	add	r2, sp, #32
 801004a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801004e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8010052:	e000      	b.n	8010056 <RCC_SetFlashLatency+0x7e>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8010054:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010056:	4a0d      	ldr	r2, [pc, #52]	; (801008c <RCC_SetFlashLatency+0xb4>)
 8010058:	6813      	ldr	r3, [r2, #0]
 801005a:	f023 0307 	bic.w	r3, r3, #7
 801005e:	432b      	orrs	r3, r5
 8010060:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010062:	f7f7 f949 	bl	80072f8 <HAL_GetTick>
 8010066:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8010068:	4b08      	ldr	r3, [pc, #32]	; (801008c <RCC_SetFlashLatency+0xb4>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f003 0307 	and.w	r3, r3, #7
 8010070:	42ab      	cmp	r3, r5
 8010072:	d006      	beq.n	8010082 <RCC_SetFlashLatency+0xaa>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8010074:	f7f7 f940 	bl	80072f8 <HAL_GetTick>
 8010078:	1b00      	subs	r0, r0, r4
 801007a:	2802      	cmp	r0, #2
 801007c:	d9f4      	bls.n	8010068 <RCC_SetFlashLatency+0x90>
    {
      return HAL_TIMEOUT;
 801007e:	2003      	movs	r0, #3
 8010080:	e000      	b.n	8010084 <RCC_SetFlashLatency+0xac>
    }
  }
  return HAL_OK;
 8010082:	2000      	movs	r0, #0
}
 8010084:	b008      	add	sp, #32
 8010086:	bd70      	pop	{r4, r5, r6, pc}
 8010088:	08024afc 	.word	0x08024afc
 801008c:	58004000 	.word	0x58004000

08010090 <RCC_SetFlashLatencyFromMSIRange>:
{
 8010090:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8010092:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8010096:	4b0c      	ldr	r3, [pc, #48]	; (80100c8 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8010098:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 801009c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80100a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80100a4:	f003 030f 	and.w	r3, r3, #15
 80100a8:	4a08      	ldr	r2, [pc, #32]	; (80100cc <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80100aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80100ae:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80100b2:	f7ff ff3d 	bl	800ff30 <HAL_PWREx_GetVoltageRange>
 80100b6:	4601      	mov	r1, r0
 80100b8:	4805      	ldr	r0, [pc, #20]	; (80100d0 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80100ba:	fba0 3004 	umull	r3, r0, r0, r4
 80100be:	0c80      	lsrs	r0, r0, #18
 80100c0:	f7ff ff8a 	bl	800ffd8 <RCC_SetFlashLatency>
}
 80100c4:	bd10      	pop	{r4, pc}
 80100c6:	bf00      	nop
 80100c8:	080280b4 	.word	0x080280b4
 80100cc:	08028054 	.word	0x08028054
 80100d0:	431bde83 	.word	0x431bde83

080100d4 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80100d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80100d8:	689a      	ldr	r2, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80100e0:	f012 020c 	ands.w	r2, r2, #12
 80100e4:	d00a      	beq.n	80100fc <HAL_RCC_GetSysClockFreq+0x28>
 80100e6:	2a0c      	cmp	r2, #12
 80100e8:	d006      	beq.n	80100f8 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80100ea:	2a04      	cmp	r2, #4
 80100ec:	d047      	beq.n	801017e <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80100ee:	2a08      	cmp	r2, #8
 80100f0:	d03b      	beq.n	801016a <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80100f2:	2100      	movs	r1, #0
  uint32_t sysclockfreq = 0U;
 80100f4:	4608      	mov	r0, r1
 80100f6:	e026      	b.n	8010146 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	d1f6      	bne.n	80100ea <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80100fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	f013 0308 	ands.w	r3, r3, #8
 8010106:	d00d      	beq.n	8010124 <HAL_RCC_GetSysClockFreq+0x50>
 8010108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	f013 0308 	ands.w	r3, r3, #8
 8010112:	d124      	bne.n	801015e <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8010114:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010118:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 801011c:	492e      	ldr	r1, [pc, #184]	; (80101d8 <HAL_RCC_GetSysClockFreq+0x104>)
 801011e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010122:	e00e      	b.n	8010142 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8010124:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010128:	6809      	ldr	r1, [r1, #0]
 801012a:	f011 0f08 	tst.w	r1, #8
 801012e:	d112      	bne.n	8010156 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8010130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010138:	f3c3 2303 	ubfx	r3, r3, #8, #4
 801013c:	4926      	ldr	r1, [pc, #152]	; (80101d8 <HAL_RCC_GetSysClockFreq+0x104>)
 801013e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8010142:	b1d2      	cbz	r2, 801017a <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8010144:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8010146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801014a:	689b      	ldr	r3, [r3, #8]
 801014c:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010150:	2b0c      	cmp	r3, #12
 8010152:	d01a      	beq.n	801018a <HAL_RCC_GetSysClockFreq+0xb6>
}
 8010154:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8010156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801015a:	6809      	ldr	r1, [r1, #0]
 801015c:	e7ee      	b.n	801013c <HAL_RCC_GetSysClockFreq+0x68>
 801015e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010162:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8010164:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8010168:	e7d8      	b.n	801011c <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 801016a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801016e:	6819      	ldr	r1, [r3, #0]
 8010170:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
 8010174:	d106      	bne.n	8010184 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8010176:	4819      	ldr	r0, [pc, #100]	; (80101dc <HAL_RCC_GetSysClockFreq+0x108>)
 8010178:	e7e5      	b.n	8010146 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 801017a:	4608      	mov	r0, r1
 801017c:	e7e3      	b.n	8010146 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 801017e:	2100      	movs	r1, #0
    sysclockfreq = HSI_VALUE;
 8010180:	4817      	ldr	r0, [pc, #92]	; (80101e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8010182:	e7e0      	b.n	8010146 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8010184:	2100      	movs	r1, #0
      sysclockfreq = HSE_VALUE / 2U;
 8010186:	4816      	ldr	r0, [pc, #88]	; (80101e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8010188:	e7dd      	b.n	8010146 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 801018a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8010194:	2b02      	cmp	r3, #2
 8010196:	d009      	beq.n	80101ac <HAL_RCC_GetSysClockFreq+0xd8>
 8010198:	2b03      	cmp	r3, #3
 801019a:	d108      	bne.n	80101ae <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 801019c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80101a6:	d115      	bne.n	80101d4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80101a8:	490c      	ldr	r1, [pc, #48]	; (80101dc <HAL_RCC_GetSysClockFreq+0x108>)
 80101aa:	e000      	b.n	80101ae <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80101ac:	490c      	ldr	r1, [pc, #48]	; (80101e0 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80101ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80101b2:	68d0      	ldr	r0, [r2, #12]
 80101b4:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80101b8:	fb00 f001 	mul.w	r0, r0, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80101bc:	68d3      	ldr	r3, [r2, #12]
 80101be:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80101c2:	3301      	adds	r3, #1
 80101c4:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80101c8:	68d3      	ldr	r3, [r2, #12]
 80101ca:	0f5b      	lsrs	r3, r3, #29
 80101cc:	3301      	adds	r3, #1
 80101ce:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80101d2:	e7bf      	b.n	8010154 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80101d4:	4902      	ldr	r1, [pc, #8]	; (80101e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80101d6:	e7ea      	b.n	80101ae <HAL_RCC_GetSysClockFreq+0xda>
 80101d8:	080280b4 	.word	0x080280b4
 80101dc:	01e84800 	.word	0x01e84800
 80101e0:	00f42400 	.word	0x00f42400

080101e4 <HAL_RCC_GetHCLKFreq>:
{
 80101e4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80101e6:	f7ff ff75 	bl	80100d4 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80101ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80101ee:	689b      	ldr	r3, [r3, #8]
 80101f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80101f4:	4a02      	ldr	r2, [pc, #8]	; (8010200 <HAL_RCC_GetHCLKFreq+0x1c>)
 80101f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80101fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80101fe:	bd08      	pop	{r3, pc}
 8010200:	08028054 	.word	0x08028054

08010204 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8010204:	2800      	cmp	r0, #0
 8010206:	f000 8318 	beq.w	801083a <HAL_RCC_OscConfig+0x636>
{
 801020a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801020c:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801020e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010212:	689d      	ldr	r5, [r3, #8]
 8010214:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8010218:	68de      	ldr	r6, [r3, #12]
 801021a:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801021e:	6803      	ldr	r3, [r0, #0]
 8010220:	f013 0f20 	tst.w	r3, #32
 8010224:	f000 808f 	beq.w	8010346 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8010228:	b1ed      	cbz	r5, 8010266 <HAL_RCC_OscConfig+0x62>
 801022a:	2d0c      	cmp	r5, #12
 801022c:	d019      	beq.n	8010262 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801022e:	6a23      	ldr	r3, [r4, #32]
 8010230:	2b00      	cmp	r3, #0
 8010232:	f000 80bc 	beq.w	80103ae <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8010236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801023a:	6813      	ldr	r3, [r2, #0]
 801023c:	f043 0301 	orr.w	r3, r3, #1
 8010240:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8010242:	f7f7 f859 	bl	80072f8 <HAL_GetTick>
 8010246:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8010248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	f013 0f02 	tst.w	r3, #2
 8010252:	d165      	bne.n	8010320 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010254:	f7f7 f850 	bl	80072f8 <HAL_GetTick>
 8010258:	1bc0      	subs	r0, r0, r7
 801025a:	2802      	cmp	r0, #2
 801025c:	d9f4      	bls.n	8010248 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 801025e:	2003      	movs	r0, #3
 8010260:	e2f8      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8010262:	2e01      	cmp	r6, #1
 8010264:	d1e3      	bne.n	801022e <HAL_RCC_OscConfig+0x2a>
 8010266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f013 0f02 	tst.w	r3, #2
 8010270:	d003      	beq.n	801027a <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010272:	6a23      	ldr	r3, [r4, #32]
 8010274:	2b00      	cmp	r3, #0
 8010276:	f000 82e2 	beq.w	801083e <HAL_RCC_OscConfig+0x63a>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801027a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801027c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	f013 0f08 	tst.w	r3, #8
 8010286:	d029      	beq.n	80102dc <HAL_RCC_OscConfig+0xd8>
 8010288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010292:	4298      	cmp	r0, r3
 8010294:	d92a      	bls.n	80102ec <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010296:	f7ff fefb 	bl	8010090 <RCC_SetFlashLatencyFromMSIRange>
 801029a:	2800      	cmp	r0, #0
 801029c:	f040 82d1 	bne.w	8010842 <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80102a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80102a4:	681a      	ldr	r2, [r3, #0]
 80102a6:	f042 0208 	orr.w	r2, r2, #8
 80102aa:	601a      	str	r2, [r3, #0]
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80102b2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80102b4:	430a      	orrs	r2, r1
 80102b6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80102b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80102ba:	685a      	ldr	r2, [r3, #4]
 80102bc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80102c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80102c4:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80102c6:	f7ff ff8d 	bl	80101e4 <HAL_RCC_GetHCLKFreq>
 80102ca:	4bbc      	ldr	r3, [pc, #752]	; (80105bc <HAL_RCC_OscConfig+0x3b8>)
 80102cc:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80102ce:	4bbc      	ldr	r3, [pc, #752]	; (80105c0 <HAL_RCC_OscConfig+0x3bc>)
 80102d0:	6818      	ldr	r0, [r3, #0]
 80102d2:	f7f7 f80f 	bl	80072f4 <HAL_InitTick>
        if (status != HAL_OK)
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d035      	beq.n	8010346 <HAL_RCC_OscConfig+0x142>
 80102da:	e2bb      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80102dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80102e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80102e4:	091b      	lsrs	r3, r3, #4
 80102e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80102ea:	e7d2      	b.n	8010292 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80102ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	f042 0208 	orr.w	r2, r2, #8
 80102f6:	601a      	str	r2, [r3, #0]
 80102f8:	681a      	ldr	r2, [r3, #0]
 80102fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80102fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010300:	430a      	orrs	r2, r1
 8010302:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010304:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010306:	685a      	ldr	r2, [r3, #4]
 8010308:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 801030c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8010310:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010312:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010314:	f7ff febc 	bl	8010090 <RCC_SetFlashLatencyFromMSIRange>
 8010318:	2800      	cmp	r0, #0
 801031a:	d0d4      	beq.n	80102c6 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 801031c:	2001      	movs	r0, #1
 801031e:	e299      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010324:	681a      	ldr	r2, [r3, #0]
 8010326:	f042 0208 	orr.w	r2, r2, #8
 801032a:	601a      	str	r2, [r3, #0]
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8010332:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010334:	430a      	orrs	r2, r1
 8010336:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010338:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801033a:	685a      	ldr	r2, [r3, #4]
 801033c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8010340:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8010344:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010346:	6823      	ldr	r3, [r4, #0]
 8010348:	f013 0f01 	tst.w	r3, #1
 801034c:	d051      	beq.n	80103f2 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 801034e:	2d08      	cmp	r5, #8
 8010350:	d045      	beq.n	80103de <HAL_RCC_OscConfig+0x1da>
 8010352:	2d0c      	cmp	r5, #12
 8010354:	d041      	beq.n	80103da <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8010356:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801035a:	6813      	ldr	r3, [r2, #0]
 801035c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010360:	68a1      	ldr	r1, [r4, #8]
 8010362:	430b      	orrs	r3, r1
 8010364:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010366:	6863      	ldr	r3, [r4, #4]
 8010368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801036c:	d063      	beq.n	8010436 <HAL_RCC_OscConfig+0x232>
 801036e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8010372:	d065      	beq.n	8010440 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8010374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801037e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8010386:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010388:	6863      	ldr	r3, [r4, #4]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d063      	beq.n	8010456 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 801038e:	f7f6 ffb3 	bl	80072f8 <HAL_GetTick>
 8010392:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8010394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 801039e:	d128      	bne.n	80103f2 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80103a0:	f7f6 ffaa 	bl	80072f8 <HAL_GetTick>
 80103a4:	1bc0      	subs	r0, r0, r7
 80103a6:	2864      	cmp	r0, #100	; 0x64
 80103a8:	d9f4      	bls.n	8010394 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80103aa:	2003      	movs	r0, #3
 80103ac:	e252      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80103ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80103b2:	6813      	ldr	r3, [r2, #0]
 80103b4:	f023 0301 	bic.w	r3, r3, #1
 80103b8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80103ba:	f7f6 ff9d 	bl	80072f8 <HAL_GetTick>
 80103be:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80103c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	f013 0f02 	tst.w	r3, #2
 80103ca:	d0bc      	beq.n	8010346 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80103cc:	f7f6 ff94 	bl	80072f8 <HAL_GetTick>
 80103d0:	1bc0      	subs	r0, r0, r7
 80103d2:	2802      	cmp	r0, #2
 80103d4:	d9f4      	bls.n	80103c0 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 80103d6:	2003      	movs	r0, #3
 80103d8:	e23c      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80103da:	2e03      	cmp	r6, #3
 80103dc:	d1bb      	bne.n	8010356 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80103de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80103e8:	d003      	beq.n	80103f2 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80103ea:	6863      	ldr	r3, [r4, #4]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	f000 822a 	beq.w	8010846 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80103f2:	6823      	ldr	r3, [r4, #0]
 80103f4:	f013 0f02 	tst.w	r3, #2
 80103f8:	d052      	beq.n	80104a0 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80103fa:	2d04      	cmp	r5, #4
 80103fc:	d03d      	beq.n	801047a <HAL_RCC_OscConfig+0x276>
 80103fe:	2d0c      	cmp	r5, #12
 8010400:	d039      	beq.n	8010476 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010402:	6923      	ldr	r3, [r4, #16]
 8010404:	2b00      	cmp	r3, #0
 8010406:	f000 8091 	beq.w	801052c <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 801040a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801040e:	6813      	ldr	r3, [r2, #0]
 8010410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010414:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8010416:	f7f6 ff6f 	bl	80072f8 <HAL_GetTick>
 801041a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801041c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8010426:	d177      	bne.n	8010518 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010428:	f7f6 ff66 	bl	80072f8 <HAL_GetTick>
 801042c:	1b80      	subs	r0, r0, r6
 801042e:	2802      	cmp	r0, #2
 8010430:	d9f4      	bls.n	801041c <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8010432:	2003      	movs	r0, #3
 8010434:	e20e      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8010436:	6813      	ldr	r3, [r2, #0]
 8010438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801043c:	6013      	str	r3, [r2, #0]
}
 801043e:	e7a3      	b.n	8010388 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8010440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010444:	681a      	ldr	r2, [r3, #0]
 8010446:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 801044a:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010452:	601a      	str	r2, [r3, #0]
}
 8010454:	e798      	b.n	8010388 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8010456:	f7f6 ff4f 	bl	80072f8 <HAL_GetTick>
 801045a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 801045c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8010466:	d0c4      	beq.n	80103f2 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010468:	f7f6 ff46 	bl	80072f8 <HAL_GetTick>
 801046c:	1bc0      	subs	r0, r0, r7
 801046e:	2864      	cmp	r0, #100	; 0x64
 8010470:	d9f4      	bls.n	801045c <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8010472:	2003      	movs	r0, #3
 8010474:	e1ee      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8010476:	2e02      	cmp	r6, #2
 8010478:	d1c3      	bne.n	8010402 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801047a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8010484:	d003      	beq.n	801048e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010486:	6923      	ldr	r3, [r4, #16]
 8010488:	2b00      	cmp	r3, #0
 801048a:	f000 81de 	beq.w	801084a <HAL_RCC_OscConfig+0x646>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801048e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8010490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010494:	6853      	ldr	r3, [r2, #4]
 8010496:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 801049a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801049e:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80104a0:	6823      	ldr	r3, [r4, #0]
 80104a2:	f013 0f08 	tst.w	r3, #8
 80104a6:	f000 808d 	beq.w	80105c4 <HAL_RCC_OscConfig+0x3c0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80104aa:	69a3      	ldr	r3, [r4, #24]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d06c      	beq.n	801058a <HAL_RCC_OscConfig+0x386>
      uint32_t csr_temp = RCC->CSR;
 80104b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80104b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80104b8:	69e1      	ldr	r1, [r4, #28]
 80104ba:	f003 0210 	and.w	r2, r3, #16
 80104be:	4291      	cmp	r1, r2
 80104c0:	d011      	beq.n	80104e6 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80104c2:	f003 0203 	and.w	r2, r3, #3
 80104c6:	2a02      	cmp	r2, #2
 80104c8:	f000 81c1 	beq.w	801084e <HAL_RCC_OscConfig+0x64a>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80104cc:	f013 0f01 	tst.w	r3, #1
 80104d0:	d142      	bne.n	8010558 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80104d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80104d6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80104da:	f023 0310 	bic.w	r3, r3, #16
 80104de:	69e1      	ldr	r1, [r4, #28]
 80104e0:	430b      	orrs	r3, r1
 80104e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80104e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80104ea:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80104ee:	f043 0301 	orr.w	r3, r3, #1
 80104f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80104f6:	f7f6 feff 	bl	80072f8 <HAL_GetTick>
 80104fa:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80104fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010504:	f013 0f02 	tst.w	r3, #2
 8010508:	d15c      	bne.n	80105c4 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801050a:	f7f6 fef5 	bl	80072f8 <HAL_GetTick>
 801050e:	1b80      	subs	r0, r0, r6
 8010510:	2811      	cmp	r0, #17
 8010512:	d9f3      	bls.n	80104fc <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8010514:	2003      	movs	r0, #3
 8010516:	e19d      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010518:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 801051a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801051e:	6853      	ldr	r3, [r2, #4]
 8010520:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010524:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8010528:	6053      	str	r3, [r2, #4]
}
 801052a:	e7b9      	b.n	80104a0 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 801052c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010530:	6813      	ldr	r3, [r2, #0]
 8010532:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010536:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8010538:	f7f6 fede 	bl	80072f8 <HAL_GetTick>
 801053c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801053e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8010548:	d0aa      	beq.n	80104a0 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801054a:	f7f6 fed5 	bl	80072f8 <HAL_GetTick>
 801054e:	1b80      	subs	r0, r0, r6
 8010550:	2802      	cmp	r0, #2
 8010552:	d9f4      	bls.n	801053e <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8010554:	2003      	movs	r0, #3
 8010556:	e17d      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8010558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801055c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8010560:	f023 0301 	bic.w	r3, r3, #1
 8010564:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8010568:	f7f6 fec6 	bl	80072f8 <HAL_GetTick>
 801056c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 801056e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010576:	f013 0f02 	tst.w	r3, #2
 801057a:	d0aa      	beq.n	80104d2 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801057c:	f7f6 febc 	bl	80072f8 <HAL_GetTick>
 8010580:	1b80      	subs	r0, r0, r6
 8010582:	2811      	cmp	r0, #17
 8010584:	d9f3      	bls.n	801056e <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8010586:	2003      	movs	r0, #3
 8010588:	e164      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 801058a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801058e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8010592:	f023 0301 	bic.w	r3, r3, #1
 8010596:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 801059a:	f7f6 fead 	bl	80072f8 <HAL_GetTick>
 801059e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80105a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80105a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80105a8:	f013 0f02 	tst.w	r3, #2
 80105ac:	d00a      	beq.n	80105c4 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80105ae:	f7f6 fea3 	bl	80072f8 <HAL_GetTick>
 80105b2:	1b80      	subs	r0, r0, r6
 80105b4:	2811      	cmp	r0, #17
 80105b6:	d9f3      	bls.n	80105a0 <HAL_RCC_OscConfig+0x39c>
          return HAL_TIMEOUT;
 80105b8:	2003      	movs	r0, #3
 80105ba:	e14b      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
 80105bc:	20000180 	.word	0x20000180
 80105c0:	20000184 	.word	0x20000184
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80105c4:	6823      	ldr	r3, [r4, #0]
 80105c6:	f013 0f04 	tst.w	r3, #4
 80105ca:	f000 80b1 	beq.w	8010730 <HAL_RCC_OscConfig+0x52c>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80105ce:	4ba9      	ldr	r3, [pc, #676]	; (8010874 <HAL_RCC_OscConfig+0x670>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80105d6:	d110      	bne.n	80105fa <HAL_RCC_OscConfig+0x3f6>
      HAL_PWR_EnableBkUpAccess();
 80105d8:	f7ff fc7c 	bl	800fed4 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80105dc:	f7f6 fe8c 	bl	80072f8 <HAL_GetTick>
 80105e0:	4606      	mov	r6, r0
 80105e2:	4ba4      	ldr	r3, [pc, #656]	; (8010874 <HAL_RCC_OscConfig+0x670>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80105ea:	d106      	bne.n	80105fa <HAL_RCC_OscConfig+0x3f6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80105ec:	f7f6 fe84 	bl	80072f8 <HAL_GetTick>
 80105f0:	1b80      	subs	r0, r0, r6
 80105f2:	2802      	cmp	r0, #2
 80105f4:	d9f5      	bls.n	80105e2 <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 80105f6:	2003      	movs	r0, #3
 80105f8:	e12c      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80105fa:	68e3      	ldr	r3, [r4, #12]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d061      	beq.n	80106c4 <HAL_RCC_OscConfig+0x4c0>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8010600:	2b85      	cmp	r3, #133	; 0x85
 8010602:	d001      	beq.n	8010608 <HAL_RCC_OscConfig+0x404>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8010604:	2b05      	cmp	r3, #5
 8010606:	d107      	bne.n	8010618 <HAL_RCC_OscConfig+0x414>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8010608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801060c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8010610:	f043 0304 	orr.w	r3, r3, #4
 8010614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8010618:	f7f6 fe6e 	bl	80072f8 <HAL_GetTick>
 801061c:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801061e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010622:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8010626:	f043 0301 	orr.w	r3, r3, #1
 801062a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801062e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010636:	f013 0f02 	tst.w	r3, #2
 801063a:	d108      	bne.n	801064e <HAL_RCC_OscConfig+0x44a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801063c:	f7f6 fe5c 	bl	80072f8 <HAL_GetTick>
 8010640:	1b80      	subs	r0, r0, r6
 8010642:	f241 3388 	movw	r3, #5000	; 0x1388
 8010646:	4298      	cmp	r0, r3
 8010648:	d9f1      	bls.n	801062e <HAL_RCC_OscConfig+0x42a>
          return HAL_TIMEOUT;
 801064a:	2003      	movs	r0, #3
 801064c:	e102      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 801064e:	68e3      	ldr	r3, [r4, #12]
 8010650:	2b81      	cmp	r3, #129	; 0x81
 8010652:	d001      	beq.n	8010658 <HAL_RCC_OscConfig+0x454>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8010654:	2b85      	cmp	r3, #133	; 0x85
 8010656:	d11a      	bne.n	801068e <HAL_RCC_OscConfig+0x48a>
        tickstart = HAL_GetTick();
 8010658:	f7f6 fe4e 	bl	80072f8 <HAL_GetTick>
 801065c:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801065e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010662:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8010666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801066a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 801066e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010676:	f413 6f00 	tst.w	r3, #2048	; 0x800
 801067a:	d159      	bne.n	8010730 <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801067c:	f7f6 fe3c 	bl	80072f8 <HAL_GetTick>
 8010680:	1b80      	subs	r0, r0, r6
 8010682:	f241 3388 	movw	r3, #5000	; 0x1388
 8010686:	4298      	cmp	r0, r3
 8010688:	d9f1      	bls.n	801066e <HAL_RCC_OscConfig+0x46a>
            return HAL_TIMEOUT;
 801068a:	2003      	movs	r0, #3
 801068c:	e0e2      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
        tickstart = HAL_GetTick();
 801068e:	f7f6 fe33 	bl	80072f8 <HAL_GetTick>
 8010692:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8010694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010698:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 801069c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80106a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80106a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80106a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106ac:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80106b0:	d03e      	beq.n	8010730 <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80106b2:	f7f6 fe21 	bl	80072f8 <HAL_GetTick>
 80106b6:	1b80      	subs	r0, r0, r6
 80106b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80106bc:	4298      	cmp	r0, r3
 80106be:	d9f1      	bls.n	80106a4 <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 80106c0:	2003      	movs	r0, #3
 80106c2:	e0c7      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 80106c4:	f7f6 fe18 	bl	80072f8 <HAL_GetTick>
 80106c8:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80106ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80106ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80106d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80106d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80106da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80106de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106e2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80106e6:	d008      	beq.n	80106fa <HAL_RCC_OscConfig+0x4f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80106e8:	f7f6 fe06 	bl	80072f8 <HAL_GetTick>
 80106ec:	1b80      	subs	r0, r0, r6
 80106ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80106f2:	4298      	cmp	r0, r3
 80106f4:	d9f1      	bls.n	80106da <HAL_RCC_OscConfig+0x4d6>
          return HAL_TIMEOUT;
 80106f6:	2003      	movs	r0, #3
 80106f8:	e0ac      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 80106fa:	f7f6 fdfd 	bl	80072f8 <HAL_GetTick>
 80106fe:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8010700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010704:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8010708:	f023 0301 	bic.w	r3, r3, #1
 801070c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8010710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010718:	f013 0f02 	tst.w	r3, #2
 801071c:	d008      	beq.n	8010730 <HAL_RCC_OscConfig+0x52c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801071e:	f7f6 fdeb 	bl	80072f8 <HAL_GetTick>
 8010722:	1b80      	subs	r0, r0, r6
 8010724:	f241 3388 	movw	r3, #5000	; 0x1388
 8010728:	4298      	cmp	r0, r3
 801072a:	d9f1      	bls.n	8010710 <HAL_RCC_OscConfig+0x50c>
          return HAL_TIMEOUT;
 801072c:	2003      	movs	r0, #3
 801072e:	e091      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8010730:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010732:	2b00      	cmp	r3, #0
 8010734:	f000 808d 	beq.w	8010852 <HAL_RCC_OscConfig+0x64e>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010738:	2d0c      	cmp	r5, #12
 801073a:	d062      	beq.n	8010802 <HAL_RCC_OscConfig+0x5fe>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801073c:	2b02      	cmp	r3, #2
 801073e:	d01f      	beq.n	8010780 <HAL_RCC_OscConfig+0x57c>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8010740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010744:	681a      	ldr	r2, [r3, #0]
 8010746:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 801074a:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 801074c:	68da      	ldr	r2, [r3, #12]
 801074e:	f022 0203 	bic.w	r2, r2, #3
 8010752:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8010754:	68da      	ldr	r2, [r3, #12]
 8010756:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 801075a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801075e:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8010760:	f7f6 fdca 	bl	80072f8 <HAL_GetTick>
 8010764:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8010766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8010770:	d073      	beq.n	801085a <HAL_RCC_OscConfig+0x656>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010772:	f7f6 fdc1 	bl	80072f8 <HAL_GetTick>
 8010776:	1b00      	subs	r0, r0, r4
 8010778:	280a      	cmp	r0, #10
 801077a:	d9f4      	bls.n	8010766 <HAL_RCC_OscConfig+0x562>
            return HAL_TIMEOUT;
 801077c:	2003      	movs	r0, #3
 801077e:	e069      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8010780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010784:	6813      	ldr	r3, [r2, #0]
 8010786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801078a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801078c:	f7f6 fdb4 	bl	80072f8 <HAL_GetTick>
 8010790:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8010792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 801079c:	d12a      	bne.n	80107f4 <HAL_RCC_OscConfig+0x5f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801079e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80107a2:	68d3      	ldr	r3, [r2, #12]
 80107a4:	4934      	ldr	r1, [pc, #208]	; (8010878 <HAL_RCC_OscConfig+0x674>)
 80107a6:	4019      	ands	r1, r3
 80107a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80107ac:	4303      	orrs	r3, r0
 80107ae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80107b0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80107b4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80107b6:	4303      	orrs	r3, r0
 80107b8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80107ba:	4303      	orrs	r3, r0
 80107bc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80107be:	4303      	orrs	r3, r0
 80107c0:	430b      	orrs	r3, r1
 80107c2:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80107c4:	6813      	ldr	r3, [r2, #0]
 80107c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80107ca:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80107cc:	68d3      	ldr	r3, [r2, #12]
 80107ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80107d2:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80107d4:	f7f6 fd90 	bl	80072f8 <HAL_GetTick>
 80107d8:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80107da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80107e4:	d137      	bne.n	8010856 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80107e6:	f7f6 fd87 	bl	80072f8 <HAL_GetTick>
 80107ea:	1b00      	subs	r0, r0, r4
 80107ec:	280a      	cmp	r0, #10
 80107ee:	d9f4      	bls.n	80107da <HAL_RCC_OscConfig+0x5d6>
            return HAL_TIMEOUT;
 80107f0:	2003      	movs	r0, #3
 80107f2:	e02f      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80107f4:	f7f6 fd80 	bl	80072f8 <HAL_GetTick>
 80107f8:	1b40      	subs	r0, r0, r5
 80107fa:	280a      	cmp	r0, #10
 80107fc:	d9c9      	bls.n	8010792 <HAL_RCC_OscConfig+0x58e>
            return HAL_TIMEOUT;
 80107fe:	2003      	movs	r0, #3
 8010800:	e028      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010802:	2b01      	cmp	r3, #1
 8010804:	d02b      	beq.n	801085e <HAL_RCC_OscConfig+0x65a>
        pll_config = RCC->PLLCFGR;
 8010806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801080a:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 801080c:	f003 0103 	and.w	r1, r3, #3
 8010810:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010812:	4291      	cmp	r1, r2
 8010814:	d125      	bne.n	8010862 <HAL_RCC_OscConfig+0x65e>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8010816:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801081a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801081c:	428a      	cmp	r2, r1
 801081e:	d122      	bne.n	8010866 <HAL_RCC_OscConfig+0x662>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8010820:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8010824:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010826:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 801082a:	d11e      	bne.n	801086a <HAL_RCC_OscConfig+0x666>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 801082c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8010830:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8010832:	4293      	cmp	r3, r2
 8010834:	d11b      	bne.n	801086e <HAL_RCC_OscConfig+0x66a>
  return HAL_OK;
 8010836:	2000      	movs	r0, #0
 8010838:	e00c      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
    return HAL_ERROR;
 801083a:	2001      	movs	r0, #1
}
 801083c:	4770      	bx	lr
        return HAL_ERROR;
 801083e:	2001      	movs	r0, #1
 8010840:	e008      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
            return HAL_ERROR;
 8010842:	2001      	movs	r0, #1
 8010844:	e006      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8010846:	2001      	movs	r0, #1
 8010848:	e004      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 801084a:	2001      	movs	r0, #1
 801084c:	e002      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 801084e:	2001      	movs	r0, #1
 8010850:	e000      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
  return HAL_OK;
 8010852:	2000      	movs	r0, #0
}
 8010854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8010856:	2000      	movs	r0, #0
 8010858:	e7fc      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
 801085a:	2000      	movs	r0, #0
 801085c:	e7fa      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 801085e:	2001      	movs	r0, #1
 8010860:	e7f8      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8010862:	2001      	movs	r0, #1
 8010864:	e7f6      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
 8010866:	2001      	movs	r0, #1
 8010868:	e7f4      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
 801086a:	2001      	movs	r0, #1
 801086c:	e7f2      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
 801086e:	2001      	movs	r0, #1
 8010870:	e7f0      	b.n	8010854 <HAL_RCC_OscConfig+0x650>
 8010872:	bf00      	nop
 8010874:	58000400 	.word	0x58000400
 8010878:	11c1808c 	.word	0x11c1808c

0801087c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 801087c:	2800      	cmp	r0, #0
 801087e:	f000 8104 	beq.w	8010a8a <HAL_RCC_ClockConfig+0x20e>
{
 8010882:	b570      	push	{r4, r5, r6, lr}
 8010884:	460c      	mov	r4, r1
 8010886:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010888:	4b82      	ldr	r3, [pc, #520]	; (8010a94 <HAL_RCC_ClockConfig+0x218>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	f003 0307 	and.w	r3, r3, #7
 8010890:	428b      	cmp	r3, r1
 8010892:	d327      	bcc.n	80108e4 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010894:	682b      	ldr	r3, [r5, #0]
 8010896:	f013 0f02 	tst.w	r3, #2
 801089a:	d139      	bne.n	8010910 <HAL_RCC_ClockConfig+0x94>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 801089c:	682b      	ldr	r3, [r5, #0]
 801089e:	f013 0f40 	tst.w	r3, #64	; 0x40
 80108a2:	d14d      	bne.n	8010940 <HAL_RCC_ClockConfig+0xc4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80108a4:	682b      	ldr	r3, [r5, #0]
 80108a6:	f013 0f04 	tst.w	r3, #4
 80108aa:	d165      	bne.n	8010978 <HAL_RCC_ClockConfig+0xfc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80108ac:	682b      	ldr	r3, [r5, #0]
 80108ae:	f013 0f08 	tst.w	r3, #8
 80108b2:	d179      	bne.n	80109a8 <HAL_RCC_ClockConfig+0x12c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80108b4:	682b      	ldr	r3, [r5, #0]
 80108b6:	f013 0f01 	tst.w	r3, #1
 80108ba:	f000 80c1 	beq.w	8010a40 <HAL_RCC_ClockConfig+0x1c4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80108be:	686b      	ldr	r3, [r5, #4]
 80108c0:	2b02      	cmp	r3, #2
 80108c2:	f000 808b 	beq.w	80109dc <HAL_RCC_ClockConfig+0x160>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80108c6:	2b03      	cmp	r3, #3
 80108c8:	f000 8090 	beq.w	80109ec <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	f040 8095 	bne.w	80109fc <HAL_RCC_ClockConfig+0x180>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80108d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80108d6:	6812      	ldr	r2, [r2, #0]
 80108d8:	f012 0f02 	tst.w	r2, #2
 80108dc:	f040 8094 	bne.w	8010a08 <HAL_RCC_ClockConfig+0x18c>
        return HAL_ERROR;
 80108e0:	2001      	movs	r0, #1
 80108e2:	e0d1      	b.n	8010a88 <HAL_RCC_ClockConfig+0x20c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80108e4:	4a6b      	ldr	r2, [pc, #428]	; (8010a94 <HAL_RCC_ClockConfig+0x218>)
 80108e6:	6813      	ldr	r3, [r2, #0]
 80108e8:	f023 0307 	bic.w	r3, r3, #7
 80108ec:	430b      	orrs	r3, r1
 80108ee:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80108f0:	f7f6 fd02 	bl	80072f8 <HAL_GetTick>
 80108f4:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80108f6:	4b67      	ldr	r3, [pc, #412]	; (8010a94 <HAL_RCC_ClockConfig+0x218>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	f003 0307 	and.w	r3, r3, #7
 80108fe:	42a3      	cmp	r3, r4
 8010900:	d0c8      	beq.n	8010894 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8010902:	f7f6 fcf9 	bl	80072f8 <HAL_GetTick>
 8010906:	1b80      	subs	r0, r0, r6
 8010908:	2802      	cmp	r0, #2
 801090a:	d9f4      	bls.n	80108f6 <HAL_RCC_ClockConfig+0x7a>
        return HAL_TIMEOUT;
 801090c:	2003      	movs	r0, #3
 801090e:	e0bb      	b.n	8010a88 <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8010910:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8010912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010916:	688a      	ldr	r2, [r1, #8]
 8010918:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 801091c:	4313      	orrs	r3, r2
 801091e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8010920:	f7f6 fcea 	bl	80072f8 <HAL_GetTick>
 8010924:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8010926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801092a:	689b      	ldr	r3, [r3, #8]
 801092c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8010930:	d1b4      	bne.n	801089c <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8010932:	f7f6 fce1 	bl	80072f8 <HAL_GetTick>
 8010936:	1b80      	subs	r0, r0, r6
 8010938:	2802      	cmp	r0, #2
 801093a:	d9f4      	bls.n	8010926 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 801093c:	2003      	movs	r0, #3
 801093e:	e0a3      	b.n	8010a88 <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8010940:	6969      	ldr	r1, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8010942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010946:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 801094a:	f023 030f 	bic.w	r3, r3, #15
 801094e:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8010952:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8010956:	f7f6 fccf 	bl	80072f8 <HAL_GetTick>
 801095a:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 801095c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010960:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8010964:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8010968:	d19c      	bne.n	80108a4 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801096a:	f7f6 fcc5 	bl	80072f8 <HAL_GetTick>
 801096e:	1b80      	subs	r0, r0, r6
 8010970:	2802      	cmp	r0, #2
 8010972:	d9f3      	bls.n	801095c <HAL_RCC_ClockConfig+0xe0>
        return HAL_TIMEOUT;
 8010974:	2003      	movs	r0, #3
 8010976:	e087      	b.n	8010a88 <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8010978:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 801097a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801097e:	688a      	ldr	r2, [r1, #8]
 8010980:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010984:	4313      	orrs	r3, r2
 8010986:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8010988:	f7f6 fcb6 	bl	80072f8 <HAL_GetTick>
 801098c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 801098e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010992:	689b      	ldr	r3, [r3, #8]
 8010994:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8010998:	d188      	bne.n	80108ac <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801099a:	f7f6 fcad 	bl	80072f8 <HAL_GetTick>
 801099e:	1b80      	subs	r0, r0, r6
 80109a0:	2802      	cmp	r0, #2
 80109a2:	d9f4      	bls.n	801098e <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 80109a4:	2003      	movs	r0, #3
 80109a6:	e06f      	b.n	8010a88 <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80109a8:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80109aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80109ae:	6893      	ldr	r3, [r2, #8]
 80109b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80109b4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80109b8:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80109ba:	f7f6 fc9d 	bl	80072f8 <HAL_GetTick>
 80109be:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80109c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80109c4:	689b      	ldr	r3, [r3, #8]
 80109c6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80109ca:	f47f af73 	bne.w	80108b4 <HAL_RCC_ClockConfig+0x38>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80109ce:	f7f6 fc93 	bl	80072f8 <HAL_GetTick>
 80109d2:	1b80      	subs	r0, r0, r6
 80109d4:	2802      	cmp	r0, #2
 80109d6:	d9f3      	bls.n	80109c0 <HAL_RCC_ClockConfig+0x144>
        return HAL_TIMEOUT;
 80109d8:	2003      	movs	r0, #3
 80109da:	e055      	b.n	8010a88 <HAL_RCC_ClockConfig+0x20c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80109dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80109e0:	6812      	ldr	r2, [r2, #0]
 80109e2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80109e6:	d10f      	bne.n	8010a08 <HAL_RCC_ClockConfig+0x18c>
        return HAL_ERROR;
 80109e8:	2001      	movs	r0, #1
 80109ea:	e04d      	b.n	8010a88 <HAL_RCC_ClockConfig+0x20c>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80109ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80109f0:	6812      	ldr	r2, [r2, #0]
 80109f2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80109f6:	d107      	bne.n	8010a08 <HAL_RCC_ClockConfig+0x18c>
        return HAL_ERROR;
 80109f8:	2001      	movs	r0, #1
 80109fa:	e045      	b.n	8010a88 <HAL_RCC_ClockConfig+0x20c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80109fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010a00:	6812      	ldr	r2, [r2, #0]
 8010a02:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8010a06:	d042      	beq.n	8010a8e <HAL_RCC_ClockConfig+0x212>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8010a08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010a0c:	688a      	ldr	r2, [r1, #8]
 8010a0e:	f022 0203 	bic.w	r2, r2, #3
 8010a12:	4313      	orrs	r3, r2
 8010a14:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8010a16:	f7f6 fc6f 	bl	80072f8 <HAL_GetTick>
 8010a1a:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8010a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010a20:	689b      	ldr	r3, [r3, #8]
 8010a22:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010a26:	686a      	ldr	r2, [r5, #4]
 8010a28:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8010a2c:	d008      	beq.n	8010a40 <HAL_RCC_ClockConfig+0x1c4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010a2e:	f7f6 fc63 	bl	80072f8 <HAL_GetTick>
 8010a32:	1b80      	subs	r0, r0, r6
 8010a34:	f241 3388 	movw	r3, #5000	; 0x1388
 8010a38:	4298      	cmp	r0, r3
 8010a3a:	d9ef      	bls.n	8010a1c <HAL_RCC_ClockConfig+0x1a0>
        return HAL_TIMEOUT;
 8010a3c:	2003      	movs	r0, #3
 8010a3e:	e023      	b.n	8010a88 <HAL_RCC_ClockConfig+0x20c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010a40:	4b14      	ldr	r3, [pc, #80]	; (8010a94 <HAL_RCC_ClockConfig+0x218>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f003 0307 	and.w	r3, r3, #7
 8010a48:	42a3      	cmp	r3, r4
 8010a4a:	d915      	bls.n	8010a78 <HAL_RCC_ClockConfig+0x1fc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010a4c:	4a11      	ldr	r2, [pc, #68]	; (8010a94 <HAL_RCC_ClockConfig+0x218>)
 8010a4e:	6813      	ldr	r3, [r2, #0]
 8010a50:	f023 0307 	bic.w	r3, r3, #7
 8010a54:	4323      	orrs	r3, r4
 8010a56:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8010a58:	f7f6 fc4e 	bl	80072f8 <HAL_GetTick>
 8010a5c:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010a5e:	4b0d      	ldr	r3, [pc, #52]	; (8010a94 <HAL_RCC_ClockConfig+0x218>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	f003 0307 	and.w	r3, r3, #7
 8010a66:	42a3      	cmp	r3, r4
 8010a68:	d006      	beq.n	8010a78 <HAL_RCC_ClockConfig+0x1fc>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8010a6a:	f7f6 fc45 	bl	80072f8 <HAL_GetTick>
 8010a6e:	1b40      	subs	r0, r0, r5
 8010a70:	2802      	cmp	r0, #2
 8010a72:	d9f4      	bls.n	8010a5e <HAL_RCC_ClockConfig+0x1e2>
        return HAL_TIMEOUT;
 8010a74:	2003      	movs	r0, #3
 8010a76:	e007      	b.n	8010a88 <HAL_RCC_ClockConfig+0x20c>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8010a78:	f7ff fbb4 	bl	80101e4 <HAL_RCC_GetHCLKFreq>
 8010a7c:	4b06      	ldr	r3, [pc, #24]	; (8010a98 <HAL_RCC_ClockConfig+0x21c>)
 8010a7e:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8010a80:	4b06      	ldr	r3, [pc, #24]	; (8010a9c <HAL_RCC_ClockConfig+0x220>)
 8010a82:	6818      	ldr	r0, [r3, #0]
 8010a84:	f7f6 fc36 	bl	80072f4 <HAL_InitTick>
}
 8010a88:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010a8a:	2001      	movs	r0, #1
}
 8010a8c:	4770      	bx	lr
        return HAL_ERROR;
 8010a8e:	2001      	movs	r0, #1
 8010a90:	e7fa      	b.n	8010a88 <HAL_RCC_ClockConfig+0x20c>
 8010a92:	bf00      	nop
 8010a94:	58004000 	.word	0x58004000
 8010a98:	20000180 	.word	0x20000180
 8010a9c:	20000184 	.word	0x20000184

08010aa0 <HAL_RCC_GetPCLK1Freq>:
{
 8010aa0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8010aa2:	f7ff fb9f 	bl	80101e4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8010aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010aaa:	689b      	ldr	r3, [r3, #8]
 8010aac:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8010ab0:	4a02      	ldr	r2, [pc, #8]	; (8010abc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8010ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8010ab6:	40d8      	lsrs	r0, r3
 8010ab8:	bd08      	pop	{r3, pc}
 8010aba:	bf00      	nop
 8010abc:	08028094 	.word	0x08028094

08010ac0 <HAL_RCC_GetPCLK2Freq>:
{
 8010ac0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8010ac2:	f7ff fb8f 	bl	80101e4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8010ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010aca:	689b      	ldr	r3, [r3, #8]
 8010acc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8010ad0:	4a02      	ldr	r2, [pc, #8]	; (8010adc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8010ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8010ad6:	40d8      	lsrs	r0, r3
 8010ad8:	bd08      	pop	{r3, pc}
 8010ada:	bf00      	nop
 8010adc:	08028094 	.word	0x08028094

08010ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010ae0:	b570      	push	{r4, r5, r6, lr}
 8010ae2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010ae4:	6803      	ldr	r3, [r0, #0]
 8010ae6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8010aea:	f040 80d6 	bne.w	8010c9a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8010aee:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010af0:	6823      	ldr	r3, [r4, #0]
 8010af2:	f013 0f01 	tst.w	r3, #1
 8010af6:	d00a      	beq.n	8010b0e <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010af8:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8010afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010afe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8010b02:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8010b06:	b292      	uxth	r2, r2
 8010b08:	4313      	orrs	r3, r2
 8010b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010b0e:	6823      	ldr	r3, [r4, #0]
 8010b10:	f013 0f02 	tst.w	r3, #2
 8010b14:	d00a      	beq.n	8010b2c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010b16:	68a2      	ldr	r2, [r4, #8]
 8010b18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010b1c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8010b20:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8010b24:	b292      	uxth	r2, r2
 8010b26:	4313      	orrs	r3, r2
 8010b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010b2c:	6823      	ldr	r3, [r4, #0]
 8010b2e:	f013 0f20 	tst.w	r3, #32
 8010b32:	d009      	beq.n	8010b48 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010b34:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8010b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010b3a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8010b3e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010b42:	4313      	orrs	r3, r2
 8010b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010b48:	6823      	ldr	r3, [r4, #0]
 8010b4a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8010b4e:	d00c      	beq.n	8010b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010b50:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8010b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010b56:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8010b5a:	0c02      	lsrs	r2, r0, #16
 8010b5c:	0412      	lsls	r2, r2, #16
 8010b5e:	ea23 0302 	bic.w	r3, r3, r2
 8010b62:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010b6a:	6823      	ldr	r3, [r4, #0]
 8010b6c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8010b70:	d00c      	beq.n	8010b8c <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010b72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010b74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010b78:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8010b7c:	0c02      	lsrs	r2, r0, #16
 8010b7e:	0412      	lsls	r2, r2, #16
 8010b80:	ea23 0302 	bic.w	r3, r3, r2
 8010b84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8010b8c:	6823      	ldr	r3, [r4, #0]
 8010b8e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8010b92:	d00c      	beq.n	8010bae <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8010b94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010b96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010b9a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8010b9e:	0c02      	lsrs	r2, r0, #16
 8010ba0:	0412      	lsls	r2, r2, #16
 8010ba2:	ea23 0302 	bic.w	r3, r3, r2
 8010ba6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010bae:	6823      	ldr	r3, [r4, #0]
 8010bb0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010bb4:	d00f      	beq.n	8010bd6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010bb6:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8010bb8:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8010bbc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8010bc0:	0919      	lsrs	r1, r3, #4
 8010bc2:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8010bc6:	ea22 0201 	bic.w	r2, r2, r1
 8010bca:	011b      	lsls	r3, r3, #4
 8010bcc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8010bd0:	4313      	orrs	r3, r2
 8010bd2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010bd6:	6823      	ldr	r3, [r4, #0]
 8010bd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010bdc:	d00f      	beq.n	8010bfe <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8010bde:	69a3      	ldr	r3, [r4, #24]
 8010be0:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8010be4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8010be8:	0919      	lsrs	r1, r3, #4
 8010bea:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8010bee:	ea22 0201 	bic.w	r2, r2, r1
 8010bf2:	011b      	lsls	r3, r3, #4
 8010bf4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8010bf8:	4313      	orrs	r3, r2
 8010bfa:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010bfe:	6823      	ldr	r3, [r4, #0]
 8010c00:	f413 7f80 	tst.w	r3, #256	; 0x100
 8010c04:	d00f      	beq.n	8010c26 <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010c06:	69e3      	ldr	r3, [r4, #28]
 8010c08:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8010c0c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8010c10:	0919      	lsrs	r1, r3, #4
 8010c12:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8010c16:	ea22 0201 	bic.w	r2, r2, r1
 8010c1a:	011b      	lsls	r3, r3, #4
 8010c1c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8010c20:	4313      	orrs	r3, r2
 8010c22:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8010c26:	6823      	ldr	r3, [r4, #0]
 8010c28:	f013 0f10 	tst.w	r3, #16
 8010c2c:	d00d      	beq.n	8010c4a <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8010c2e:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8010c30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010c34:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8010c38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010c3c:	4313      	orrs	r3, r2
 8010c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8010c42:	68e3      	ldr	r3, [r4, #12]
 8010c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c48:	d07f      	beq.n	8010d4a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010c4a:	6823      	ldr	r3, [r4, #0]
 8010c4c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8010c50:	d00f      	beq.n	8010c72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010c52:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8010c54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010c58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8010c5c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8010c60:	4313      	orrs	r3, r2
 8010c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8010c66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010c68:	b91b      	cbnz	r3, 8010c72 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8010c6a:	68cb      	ldr	r3, [r1, #12]
 8010c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010c70:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010c72:	6823      	ldr	r3, [r4, #0]
 8010c74:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8010c78:	d00d      	beq.n	8010c96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010c7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8010c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010c80:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8010c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010c88:	4313      	orrs	r3, r2
 8010c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8010c8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010c94:	d05e      	beq.n	8010d54 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8010c96:	4628      	mov	r0, r5
 8010c98:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8010c9a:	f7ff f91b 	bl	800fed4 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8010c9e:	f7f6 fb2b 	bl	80072f8 <HAL_GetTick>
 8010ca2:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8010ca4:	4b2e      	ldr	r3, [pc, #184]	; (8010d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8010cac:	d106      	bne.n	8010cbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010cae:	f7f6 fb23 	bl	80072f8 <HAL_GetTick>
 8010cb2:	1b40      	subs	r0, r0, r5
 8010cb4:	2802      	cmp	r0, #2
 8010cb6:	d9f5      	bls.n	8010ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        ret = HAL_TIMEOUT;
 8010cb8:	2503      	movs	r5, #3
 8010cba:	e000      	b.n	8010cbe <HAL_RCCEx_PeriphCLKConfig+0x1de>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8010cbc:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8010cbe:	2d00      	cmp	r5, #0
 8010cc0:	f47f af16 	bne.w	8010af0 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8010cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8010cd0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d024      	beq.n	8010d20 <HAL_RCCEx_PeriphCLKConfig+0x240>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010cda:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8010cde:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8010ce2:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8010ce6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8010cea:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8010cee:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8010cf2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8010cf6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8010cfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8010cfe:	f012 0f02 	tst.w	r2, #2
 8010d02:	d10f      	bne.n	8010d24 <HAL_RCCEx_PeriphCLKConfig+0x244>
      if (ret == HAL_OK)
 8010d04:	2d00      	cmp	r5, #0
 8010d06:	f47f aef3 	bne.w	8010af0 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010d0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8010d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010d10:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8010d14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010d18:	4313      	orrs	r3, r2
 8010d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8010d1e:	e6e7      	b.n	8010af0 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8010d20:	2200      	movs	r2, #0
 8010d22:	e7ec      	b.n	8010cfe <HAL_RCCEx_PeriphCLKConfig+0x21e>
        tickstart = HAL_GetTick();
 8010d24:	f7f6 fae8 	bl	80072f8 <HAL_GetTick>
 8010d28:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8010d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d32:	f013 0f02 	tst.w	r3, #2
 8010d36:	d1e5      	bne.n	8010d04 <HAL_RCCEx_PeriphCLKConfig+0x224>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010d38:	f7f6 fade 	bl	80072f8 <HAL_GetTick>
 8010d3c:	1b80      	subs	r0, r0, r6
 8010d3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8010d42:	4298      	cmp	r0, r3
 8010d44:	d9f1      	bls.n	8010d2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
            ret = HAL_TIMEOUT;
 8010d46:	2503      	movs	r5, #3
 8010d48:	e7dc      	b.n	8010d04 <HAL_RCCEx_PeriphCLKConfig+0x224>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8010d4a:	68cb      	ldr	r3, [r1, #12]
 8010d4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010d50:	60cb      	str	r3, [r1, #12]
 8010d52:	e77a      	b.n	8010c4a <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8010d54:	68cb      	ldr	r3, [r1, #12]
 8010d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010d5a:	60cb      	str	r3, [r1, #12]
 8010d5c:	e79b      	b.n	8010c96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8010d5e:	bf00      	nop
 8010d60:	58000400 	.word	0x58000400

08010d64 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010d64:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d036      	beq.n	8010dda <HAL_RTC_DeactivateAlarm+0x76>
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010d72:	2302      	movs	r3, #2
 8010d74:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010d78:	4b19      	ldr	r3, [pc, #100]	; (8010de0 <HAL_RTC_DeactivateAlarm+0x7c>)
 8010d7a:	22ca      	movs	r2, #202	; 0xca
 8010d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8010d7e:	2253      	movs	r2, #83	; 0x53
 8010d80:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8010d82:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8010d86:	d019      	beq.n	8010dbc <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8010d88:	4b15      	ldr	r3, [pc, #84]	; (8010de0 <HAL_RTC_DeactivateAlarm+0x7c>)
 8010d8a:	699a      	ldr	r2, [r3, #24]
 8010d8c:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8010d90:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8010d92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010d94:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8010d98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8010d9a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8010d9c:	f022 0202 	bic.w	r2, r2, #2
 8010da0:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8010da2:	2202      	movs	r2, #2
 8010da4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010da6:	4b0e      	ldr	r3, [pc, #56]	; (8010de0 <HAL_RTC_DeactivateAlarm+0x7c>)
 8010da8:	22ff      	movs	r2, #255	; 0xff
 8010daa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8010dac:	2301      	movs	r3, #1
 8010dae:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010db2:	2300      	movs	r3, #0
 8010db4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8010db8:	4618      	mov	r0, r3
 8010dba:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8010dbc:	699a      	ldr	r2, [r3, #24]
 8010dbe:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8010dc2:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8010dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010dc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8010dca:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8010dcc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8010dce:	f022 0201 	bic.w	r2, r2, #1
 8010dd2:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8010dd4:	2201      	movs	r2, #1
 8010dd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8010dd8:	e7e5      	b.n	8010da6 <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8010dda:	2002      	movs	r0, #2
}
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop
 8010de0:	40002800 	.word	0x40002800

08010de4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8010de4:	b538      	push	{r3, r4, r5, lr}
 8010de6:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8010de8:	4b0d      	ldr	r3, [pc, #52]	; (8010e20 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8010dea:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8010dec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010dee:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8010df0:	f015 0f01 	tst.w	r5, #1
 8010df4:	d106      	bne.n	8010e04 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8010df6:	f015 0f02 	tst.w	r5, #2
 8010dfa:	d109      	bne.n	8010e10 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8010e02:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8010e04:	4b06      	ldr	r3, [pc, #24]	; (8010e20 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8010e06:	2201      	movs	r2, #1
 8010e08:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8010e0a:	f7f6 fbd3 	bl	80075b4 <HAL_RTC_AlarmAEventCallback>
 8010e0e:	e7f2      	b.n	8010df6 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8010e10:	4b03      	ldr	r3, [pc, #12]	; (8010e20 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8010e12:	2202      	movs	r2, #2
 8010e14:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8010e16:	4620      	mov	r0, r4
 8010e18:	f000 f9e4 	bl	80111e4 <HAL_RTCEx_AlarmBEventCallback>
 8010e1c:	e7ee      	b.n	8010dfc <HAL_RTC_AlarmIRQHandler+0x18>
 8010e1e:	bf00      	nop
 8010e20:	40002800 	.word	0x40002800

08010e24 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010e24:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8010e26:	4a0b      	ldr	r2, [pc, #44]	; (8010e54 <HAL_RTC_WaitForSynchro+0x30>)
 8010e28:	68d3      	ldr	r3, [r2, #12]
 8010e2a:	f023 0320 	bic.w	r3, r3, #32
 8010e2e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8010e30:	f7f6 fa62 	bl	80072f8 <HAL_GetTick>
 8010e34:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8010e36:	4b07      	ldr	r3, [pc, #28]	; (8010e54 <HAL_RTC_WaitForSynchro+0x30>)
 8010e38:	68db      	ldr	r3, [r3, #12]
 8010e3a:	f013 0f20 	tst.w	r3, #32
 8010e3e:	d107      	bne.n	8010e50 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010e40:	f7f6 fa5a 	bl	80072f8 <HAL_GetTick>
 8010e44:	1b00      	subs	r0, r0, r4
 8010e46:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010e4a:	d9f4      	bls.n	8010e36 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8010e4c:	2003      	movs	r0, #3
 8010e4e:	e000      	b.n	8010e52 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8010e50:	2000      	movs	r0, #0
}
 8010e52:	bd10      	pop	{r4, pc}
 8010e54:	40002800 	.word	0x40002800

08010e58 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010e58:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8010e5a:	4b11      	ldr	r3, [pc, #68]	; (8010ea0 <RTC_EnterInitMode+0x48>)
 8010e5c:	68db      	ldr	r3, [r3, #12]
 8010e5e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010e62:	d002      	beq.n	8010e6a <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8010e64:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8010e66:	4620      	mov	r0, r4
 8010e68:	bd70      	pop	{r4, r5, r6, pc}
 8010e6a:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8010e6c:	4a0c      	ldr	r2, [pc, #48]	; (8010ea0 <RTC_EnterInitMode+0x48>)
 8010e6e:	68d3      	ldr	r3, [r2, #12]
 8010e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e74:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8010e76:	f7f6 fa3f 	bl	80072f8 <HAL_GetTick>
 8010e7a:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010e7c:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010e7e:	4b08      	ldr	r3, [pc, #32]	; (8010ea0 <RTC_EnterInitMode+0x48>)
 8010e80:	68db      	ldr	r3, [r3, #12]
 8010e82:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010e86:	d1ee      	bne.n	8010e66 <RTC_EnterInitMode+0xe>
 8010e88:	2c03      	cmp	r4, #3
 8010e8a:	d0ec      	beq.n	8010e66 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010e8c:	f7f6 fa34 	bl	80072f8 <HAL_GetTick>
 8010e90:	1b43      	subs	r3, r0, r5
 8010e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010e96:	d9f2      	bls.n	8010e7e <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010e98:	2403      	movs	r4, #3
 8010e9a:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8010e9e:	e7ee      	b.n	8010e7e <RTC_EnterInitMode+0x26>
 8010ea0:	40002800 	.word	0x40002800

08010ea4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010ea4:	b510      	push	{r4, lr}
 8010ea6:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8010ea8:	4b10      	ldr	r3, [pc, #64]	; (8010eec <RTC_ExitInitMode+0x48>)
 8010eaa:	68da      	ldr	r2, [r3, #12]
 8010eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010eb0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8010eb2:	699b      	ldr	r3, [r3, #24]
 8010eb4:	f013 0f20 	tst.w	r3, #32
 8010eb8:	d106      	bne.n	8010ec8 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010eba:	f7ff ffb3 	bl	8010e24 <HAL_RTC_WaitForSynchro>
 8010ebe:	b198      	cbz	r0, 8010ee8 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010ec0:	2003      	movs	r0, #3
 8010ec2:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8010ec6:	e00f      	b.n	8010ee8 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010ec8:	4a08      	ldr	r2, [pc, #32]	; (8010eec <RTC_ExitInitMode+0x48>)
 8010eca:	6993      	ldr	r3, [r2, #24]
 8010ecc:	f023 0320 	bic.w	r3, r3, #32
 8010ed0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010ed2:	f7ff ffa7 	bl	8010e24 <HAL_RTC_WaitForSynchro>
 8010ed6:	b110      	cbz	r0, 8010ede <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010ed8:	2003      	movs	r0, #3
 8010eda:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010ede:	4a03      	ldr	r2, [pc, #12]	; (8010eec <RTC_ExitInitMode+0x48>)
 8010ee0:	6993      	ldr	r3, [r2, #24]
 8010ee2:	f043 0320 	orr.w	r3, r3, #32
 8010ee6:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8010ee8:	bd10      	pop	{r4, pc}
 8010eea:	bf00      	nop
 8010eec:	40002800 	.word	0x40002800

08010ef0 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8010ef0:	2800      	cmp	r0, #0
 8010ef2:	d04a      	beq.n	8010f8a <HAL_RTC_Init+0x9a>
{
 8010ef4:	b538      	push	{r3, r4, r5, lr}
 8010ef6:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8010ef8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8010efc:	b19b      	cbz	r3, 8010f26 <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010efe:	2302      	movs	r3, #2
 8010f00:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010f04:	4b22      	ldr	r3, [pc, #136]	; (8010f90 <HAL_RTC_Init+0xa0>)
 8010f06:	22ca      	movs	r2, #202	; 0xca
 8010f08:	625a      	str	r2, [r3, #36]	; 0x24
 8010f0a:	2253      	movs	r2, #83	; 0x53
 8010f0c:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8010f0e:	4620      	mov	r0, r4
 8010f10:	f7ff ffa2 	bl	8010e58 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8010f14:	b160      	cbz	r0, 8010f30 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010f16:	4b1e      	ldr	r3, [pc, #120]	; (8010f90 <HAL_RTC_Init+0xa0>)
 8010f18:	22ff      	movs	r2, #255	; 0xff
 8010f1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8010f1c:	b910      	cbnz	r0, 8010f24 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 8010f1e:	2301      	movs	r3, #1
 8010f20:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8010f24:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8010f26:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8010f2a:	f7f5 ffdb 	bl	8006ee4 <HAL_RTC_MspInit>
 8010f2e:	e7e6      	b.n	8010efe <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8010f30:	4b17      	ldr	r3, [pc, #92]	; (8010f90 <HAL_RTC_Init+0xa0>)
 8010f32:	699a      	ldr	r2, [r3, #24]
 8010f34:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8010f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010f3c:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8010f3e:	6999      	ldr	r1, [r3, #24]
 8010f40:	6862      	ldr	r2, [r4, #4]
 8010f42:	6920      	ldr	r0, [r4, #16]
 8010f44:	4302      	orrs	r2, r0
 8010f46:	69a0      	ldr	r0, [r4, #24]
 8010f48:	4302      	orrs	r2, r0
 8010f4a:	430a      	orrs	r2, r1
 8010f4c:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8010f4e:	68e2      	ldr	r2, [r4, #12]
 8010f50:	68a1      	ldr	r1, [r4, #8]
 8010f52:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010f56:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8010f58:	68da      	ldr	r2, [r3, #12]
 8010f5a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8010f5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010f60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010f62:	4301      	orrs	r1, r0
 8010f64:	430a      	orrs	r2, r1
 8010f66:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 8010f68:	4620      	mov	r0, r4
 8010f6a:	f7ff ff9b 	bl	8010ea4 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8010f6e:	2800      	cmp	r0, #0
 8010f70:	d1d1      	bne.n	8010f16 <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 8010f72:	4907      	ldr	r1, [pc, #28]	; (8010f90 <HAL_RTC_Init+0xa0>)
 8010f74:	698b      	ldr	r3, [r1, #24]
 8010f76:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8010f7a:	6a22      	ldr	r2, [r4, #32]
 8010f7c:	69e5      	ldr	r5, [r4, #28]
 8010f7e:	432a      	orrs	r2, r5
 8010f80:	6965      	ldr	r5, [r4, #20]
 8010f82:	432a      	orrs	r2, r5
 8010f84:	4313      	orrs	r3, r2
 8010f86:	618b      	str	r3, [r1, #24]
 8010f88:	e7c5      	b.n	8010f16 <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010f8a:	2001      	movs	r0, #1
}
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop
 8010f90:	40002800 	.word	0x40002800

08010f94 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8010f94:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8010f96:	2809      	cmp	r0, #9
 8010f98:	d903      	bls.n	8010fa2 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8010f9a:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8010f9c:	380a      	subs	r0, #10
 8010f9e:	b2c0      	uxtb	r0, r0
 8010fa0:	e7f9      	b.n	8010f96 <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8010fa2:	011b      	lsls	r3, r3, #4
 8010fa4:	b2db      	uxtb	r3, r3
}
 8010fa6:	4318      	orrs	r0, r3
 8010fa8:	4770      	bx	lr
	...

08010fac <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8010fac:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	f000 80b0 	beq.w	8011116 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8010fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fba:	4605      	mov	r5, r0
 8010fbc:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010fc4:	2302      	movs	r3, #2
 8010fc6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8010fca:	4b54      	ldr	r3, [pc, #336]	; (801111c <HAL_RTC_SetAlarm_IT+0x170>)
 8010fcc:	68de      	ldr	r6, [r3, #12]
 8010fce:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8010fd2:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8010fd6:	d043      	beq.n	8011060 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8010fd8:	bb12      	cbnz	r2, 8011020 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8010fda:	699b      	ldr	r3, [r3, #24]
 8010fdc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010fe0:	d101      	bne.n	8010fe6 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8010fe6:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010fea:	7820      	ldrb	r0, [r4, #0]
 8010fec:	f7ff ffd2 	bl	8010f94 <RTC_ByteToBcd2>
 8010ff0:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010ff2:	7860      	ldrb	r0, [r4, #1]
 8010ff4:	f7ff ffce 	bl	8010f94 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010ff8:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8010ffc:	78a0      	ldrb	r0, [r4, #2]
 8010ffe:	f7ff ffc9 	bl	8010f94 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011002:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011004:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8011006:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801100a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 801100e:	f7ff ffc1 	bl	8010f94 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011012:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8011016:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8011018:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801101a:	ea48 0000 	orr.w	r0, r8, r0
 801101e:	e020      	b.n	8011062 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8011020:	6948      	ldr	r0, [r1, #20]
 8011022:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8011026:	d009      	beq.n	801103c <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8011028:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 801102c:	d006      	beq.n	801103c <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 801102e:	4b3b      	ldr	r3, [pc, #236]	; (801111c <HAL_RTC_SetAlarm_IT+0x170>)
 8011030:	699b      	ldr	r3, [r3, #24]
 8011032:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011036:	d101      	bne.n	801103c <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8011038:	2300      	movs	r3, #0
 801103a:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801103c:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801103e:	7863      	ldrb	r3, [r4, #1]
 8011040:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8011046:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011048:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 801104a:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801104c:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8011050:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011054:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8011058:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801105a:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801105c:	4318      	orrs	r0, r3
 801105e:	e000      	b.n	8011062 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8011060:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011062:	4b2e      	ldr	r3, [pc, #184]	; (801111c <HAL_RTC_SetAlarm_IT+0x170>)
 8011064:	22ca      	movs	r2, #202	; 0xca
 8011066:	625a      	str	r2, [r3, #36]	; 0x24
 8011068:	2253      	movs	r2, #83	; 0x53
 801106a:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 801106c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801106e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011072:	d02a      	beq.n	80110ca <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8011074:	4b29      	ldr	r3, [pc, #164]	; (801111c <HAL_RTC_SetAlarm_IT+0x170>)
 8011076:	699a      	ldr	r2, [r3, #24]
 8011078:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 801107c:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 801107e:	2202      	movs	r2, #2
 8011080:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8011082:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8011086:	d040      	beq.n	801110a <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8011088:	4b24      	ldr	r3, [pc, #144]	; (801111c <HAL_RTC_SetAlarm_IT+0x170>)
 801108a:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 801108c:	69a2      	ldr	r2, [r4, #24]
 801108e:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8011090:	6862      	ldr	r2, [r4, #4]
 8011092:	4b22      	ldr	r3, [pc, #136]	; (801111c <HAL_RTC_SetAlarm_IT+0x170>)
 8011094:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8011096:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8011098:	f042 0202 	orr.w	r2, r2, #2
 801109c:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 801109e:	699a      	ldr	r2, [r3, #24]
 80110a0:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 80110a4:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80110a6:	4a1e      	ldr	r2, [pc, #120]	; (8011120 <HAL_RTC_SetAlarm_IT+0x174>)
 80110a8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80110ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80110b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80110b4:	4b19      	ldr	r3, [pc, #100]	; (801111c <HAL_RTC_SetAlarm_IT+0x170>)
 80110b6:	22ff      	movs	r2, #255	; 0xff
 80110b8:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80110ba:	2301      	movs	r3, #1
 80110bc:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 80110c0:	2000      	movs	r0, #0
 80110c2:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 80110c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80110ca:	4b14      	ldr	r3, [pc, #80]	; (801111c <HAL_RTC_SetAlarm_IT+0x170>)
 80110cc:	699a      	ldr	r2, [r3, #24]
 80110ce:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80110d2:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80110d4:	2201      	movs	r2, #1
 80110d6:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80110d8:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80110dc:	d00f      	beq.n	80110fe <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80110de:	4b0f      	ldr	r3, [pc, #60]	; (801111c <HAL_RTC_SetAlarm_IT+0x170>)
 80110e0:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80110e2:	69a2      	ldr	r2, [r4, #24]
 80110e4:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80110e6:	6862      	ldr	r2, [r4, #4]
 80110e8:	4b0c      	ldr	r3, [pc, #48]	; (801111c <HAL_RTC_SetAlarm_IT+0x170>)
 80110ea:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80110ec:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80110ee:	f042 0201 	orr.w	r2, r2, #1
 80110f2:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80110f4:	699a      	ldr	r2, [r3, #24]
 80110f6:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 80110fa:	619a      	str	r2, [r3, #24]
 80110fc:	e7d3      	b.n	80110a6 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80110fe:	69a3      	ldr	r3, [r4, #24]
 8011100:	69e2      	ldr	r2, [r4, #28]
 8011102:	4313      	orrs	r3, r2
 8011104:	4a05      	ldr	r2, [pc, #20]	; (801111c <HAL_RTC_SetAlarm_IT+0x170>)
 8011106:	6453      	str	r3, [r2, #68]	; 0x44
 8011108:	e7ed      	b.n	80110e6 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 801110a:	69a3      	ldr	r3, [r4, #24]
 801110c:	69e2      	ldr	r2, [r4, #28]
 801110e:	4313      	orrs	r3, r2
 8011110:	4a02      	ldr	r2, [pc, #8]	; (801111c <HAL_RTC_SetAlarm_IT+0x170>)
 8011112:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011114:	e7bc      	b.n	8011090 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8011116:	2002      	movs	r0, #2
}
 8011118:	4770      	bx	lr
 801111a:	bf00      	nop
 801111c:	40002800 	.word	0x40002800
 8011120:	58000800 	.word	0x58000800

08011124 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011124:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8011128:	2b01      	cmp	r3, #1
 801112a:	d017      	beq.n	801115c <HAL_RTCEx_EnableBypassShadow+0x38>
 801112c:	2101      	movs	r1, #1
 801112e:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011132:	2302      	movs	r3, #2
 8011134:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011138:	4b09      	ldr	r3, [pc, #36]	; (8011160 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 801113a:	22ca      	movs	r2, #202	; 0xca
 801113c:	625a      	str	r2, [r3, #36]	; 0x24
 801113e:	2253      	movs	r2, #83	; 0x53
 8011140:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011142:	699a      	ldr	r2, [r3, #24]
 8011144:	f042 0220 	orr.w	r2, r2, #32
 8011148:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801114a:	22ff      	movs	r2, #255	; 0xff
 801114c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801114e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011152:	2300      	movs	r3, #0
 8011154:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8011158:	4618      	mov	r0, r3
 801115a:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 801115c:	2002      	movs	r0, #2
}
 801115e:	4770      	bx	lr
 8011160:	40002800 	.word	0x40002800

08011164 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011164:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8011168:	2b01      	cmp	r3, #1
 801116a:	d020      	beq.n	80111ae <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 801116c:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 801116e:	2101      	movs	r1, #1
 8011170:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011174:	2302      	movs	r3, #2
 8011176:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801117a:	4b0e      	ldr	r3, [pc, #56]	; (80111b4 <HAL_RTCEx_SetSSRU_IT+0x50>)
 801117c:	22ca      	movs	r2, #202	; 0xca
 801117e:	625a      	str	r2, [r3, #36]	; 0x24
 8011180:	2253      	movs	r2, #83	; 0x53
 8011182:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8011184:	699a      	ldr	r2, [r3, #24]
 8011186:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801118a:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 801118c:	4c0a      	ldr	r4, [pc, #40]	; (80111b8 <HAL_RTCEx_SetSSRU_IT+0x54>)
 801118e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8011192:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011196:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801119a:	22ff      	movs	r2, #255	; 0xff
 801119c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801119e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80111a2:	2300      	movs	r3, #0
 80111a4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80111a8:	4618      	mov	r0, r3
}
 80111aa:	bc10      	pop	{r4}
 80111ac:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80111ae:	2002      	movs	r0, #2
}
 80111b0:	4770      	bx	lr
 80111b2:	bf00      	nop
 80111b4:	40002800 	.word	0x40002800
 80111b8:	58000800 	.word	0x58000800

080111bc <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80111bc:	b510      	push	{r4, lr}
 80111be:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80111c0:	4b07      	ldr	r3, [pc, #28]	; (80111e0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80111c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80111c8:	d103      	bne.n	80111d2 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80111ca:	2301      	movs	r3, #1
 80111cc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80111d0:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80111d2:	4b03      	ldr	r3, [pc, #12]	; (80111e0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80111d4:	2240      	movs	r2, #64	; 0x40
 80111d6:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80111d8:	f7f6 f9f0 	bl	80075bc <HAL_RTCEx_SSRUEventCallback>
 80111dc:	e7f5      	b.n	80111ca <HAL_RTCEx_SSRUIRQHandler+0xe>
 80111de:	bf00      	nop
 80111e0:	40002800 	.word	0x40002800

080111e4 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80111e4:	4770      	bx	lr

080111e6 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80111e6:	0089      	lsls	r1, r1, #2
 80111e8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80111ec:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80111f0:	600a      	str	r2, [r1, #0]
}
 80111f2:	4770      	bx	lr

080111f4 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80111f4:	0089      	lsls	r1, r1, #2
 80111f6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80111fa:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80111fe:	6808      	ldr	r0, [r1, #0]
}
 8011200:	4770      	bx	lr
	...

08011204 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8011204:	4b07      	ldr	r3, [pc, #28]	; (8011224 <SUBGHZSPI_Init+0x20>)
 8011206:	681a      	ldr	r2, [r3, #0]
 8011208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801120c:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 801120e:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8011212:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8011214:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8011218:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 801121a:	681a      	ldr	r2, [r3, #0]
 801121c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011220:	601a      	str	r2, [r3, #0]
}
 8011222:	4770      	bx	lr
 8011224:	58010000 	.word	0x58010000

08011228 <HAL_SUBGHZ_Init>:
{
 8011228:	b530      	push	{r4, r5, lr}
 801122a:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 801122c:	2800      	cmp	r0, #0
 801122e:	d04e      	beq.n	80112ce <HAL_SUBGHZ_Init+0xa6>
 8011230:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8011232:	7983      	ldrb	r3, [r0, #6]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d03b      	beq.n	80112b0 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8011238:	2302      	movs	r3, #2
 801123a:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 801123c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011240:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8011244:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011248:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 801124c:	4b21      	ldr	r3, [pc, #132]	; (80112d4 <HAL_SUBGHZ_Init+0xac>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8011254:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8011258:	2264      	movs	r2, #100	; 0x64
 801125a:	fb02 f303 	mul.w	r3, r2, r3
 801125e:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8011260:	9b01      	ldr	r3, [sp, #4]
 8011262:	b34b      	cbz	r3, 80112b8 <HAL_SUBGHZ_Init+0x90>
    count--;
 8011264:	9b01      	ldr	r3, [sp, #4]
 8011266:	3b01      	subs	r3, #1
 8011268:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 801126a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801126e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011272:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8011276:	d1f3      	bne.n	8011260 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 8011278:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 801127a:	4b17      	ldr	r3, [pc, #92]	; (80112d8 <HAL_SUBGHZ_Init+0xb0>)
 801127c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8011280:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011284:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(EXTI->IMR2, ExtiLine);
 8011288:	4914      	ldr	r1, [pc, #80]	; (80112dc <HAL_SUBGHZ_Init+0xb4>)
 801128a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801128e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011292:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8011296:	689a      	ldr	r2, [r3, #8]
 8011298:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801129c:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 801129e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80112a2:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 80112a4:	b15d      	cbz	r5, 80112be <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80112a6:	2301      	movs	r3, #1
 80112a8:	71a3      	strb	r3, [r4, #6]
}
 80112aa:	4628      	mov	r0, r5
 80112ac:	b003      	add	sp, #12
 80112ae:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 80112b0:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80112b2:	f7f5 febf 	bl	8007034 <HAL_SUBGHZ_MspInit>
 80112b6:	e7bf      	b.n	8011238 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80112b8:	2501      	movs	r5, #1
 80112ba:	60a5      	str	r5, [r4, #8]
      break;
 80112bc:	e7dd      	b.n	801127a <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80112be:	6820      	ldr	r0, [r4, #0]
 80112c0:	f7ff ffa0 	bl	8011204 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80112c4:	2301      	movs	r3, #1
 80112c6:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80112c8:	2300      	movs	r3, #0
 80112ca:	60a3      	str	r3, [r4, #8]
 80112cc:	e7eb      	b.n	80112a6 <HAL_SUBGHZ_Init+0x7e>
    return status;
 80112ce:	2501      	movs	r5, #1
 80112d0:	e7eb      	b.n	80112aa <HAL_SUBGHZ_Init+0x82>
 80112d2:	bf00      	nop
 80112d4:	20000180 	.word	0x20000180
 80112d8:	58000400 	.word	0x58000400
 80112dc:	58000800 	.word	0x58000800

080112e0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80112e0:	b082      	sub	sp, #8
 80112e2:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80112e4:	4b1a      	ldr	r3, [pc, #104]	; (8011350 <SUBGHZSPI_Transmit+0x70>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80112ec:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80112f0:	2064      	movs	r0, #100	; 0x64
 80112f2:	fb00 f303 	mul.w	r3, r0, r3
 80112f6:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80112f8:	9b01      	ldr	r3, [sp, #4]
 80112fa:	b14b      	cbz	r3, 8011310 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80112fc:	9b01      	ldr	r3, [sp, #4]
 80112fe:	3b01      	subs	r3, #1
 8011300:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8011302:	4b14      	ldr	r3, [pc, #80]	; (8011354 <SUBGHZSPI_Transmit+0x74>)
 8011304:	689b      	ldr	r3, [r3, #8]
 8011306:	f013 0f02 	tst.w	r3, #2
 801130a:	d0f5      	beq.n	80112f8 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 801130c:	2000      	movs	r0, #0
 801130e:	e001      	b.n	8011314 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8011310:	2001      	movs	r0, #1
 8011312:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8011314:	4b10      	ldr	r3, [pc, #64]	; (8011358 <SUBGHZSPI_Transmit+0x78>)
 8011316:	7019      	strb	r1, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8011318:	4b0d      	ldr	r3, [pc, #52]	; (8011350 <SUBGHZSPI_Transmit+0x70>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8011320:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8011324:	2164      	movs	r1, #100	; 0x64
 8011326:	fb01 f303 	mul.w	r3, r1, r3
 801132a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 801132c:	9b01      	ldr	r3, [sp, #4]
 801132e:	b143      	cbz	r3, 8011342 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8011330:	9b01      	ldr	r3, [sp, #4]
 8011332:	3b01      	subs	r3, #1
 8011334:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8011336:	4b07      	ldr	r3, [pc, #28]	; (8011354 <SUBGHZSPI_Transmit+0x74>)
 8011338:	689b      	ldr	r3, [r3, #8]
 801133a:	f013 0f01 	tst.w	r3, #1
 801133e:	d0f5      	beq.n	801132c <SUBGHZSPI_Transmit+0x4c>
 8011340:	e001      	b.n	8011346 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8011342:	2001      	movs	r0, #1
 8011344:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8011346:	4b03      	ldr	r3, [pc, #12]	; (8011354 <SUBGHZSPI_Transmit+0x74>)
 8011348:	68db      	ldr	r3, [r3, #12]

  return status;
}
 801134a:	b002      	add	sp, #8
 801134c:	4770      	bx	lr
 801134e:	bf00      	nop
 8011350:	20000180 	.word	0x20000180
 8011354:	58010000 	.word	0x58010000
 8011358:	5801000c 	.word	0x5801000c

0801135c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 801135c:	b410      	push	{r4}
 801135e:	b083      	sub	sp, #12
 8011360:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8011362:	4b1c      	ldr	r3, [pc, #112]	; (80113d4 <SUBGHZSPI_Receive+0x78>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801136a:	f3c3 434c 	ubfx	r3, r3, #17, #13
 801136e:	2064      	movs	r0, #100	; 0x64
 8011370:	fb00 f303 	mul.w	r3, r0, r3
 8011374:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8011376:	9b01      	ldr	r3, [sp, #4]
 8011378:	b14b      	cbz	r3, 801138e <SUBGHZSPI_Receive+0x32>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 801137a:	9b01      	ldr	r3, [sp, #4]
 801137c:	3b01      	subs	r3, #1
 801137e:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8011380:	4b15      	ldr	r3, [pc, #84]	; (80113d8 <SUBGHZSPI_Receive+0x7c>)
 8011382:	689b      	ldr	r3, [r3, #8]
 8011384:	f013 0f02 	tst.w	r3, #2
 8011388:	d0f5      	beq.n	8011376 <SUBGHZSPI_Receive+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 801138a:	2000      	movs	r0, #0
 801138c:	e001      	b.n	8011392 <SUBGHZSPI_Receive+0x36>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 801138e:	2001      	movs	r0, #1
 8011390:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8011392:	4b12      	ldr	r3, [pc, #72]	; (80113dc <SUBGHZSPI_Receive+0x80>)
 8011394:	24ff      	movs	r4, #255	; 0xff
 8011396:	701c      	strb	r4, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8011398:	4b0e      	ldr	r3, [pc, #56]	; (80113d4 <SUBGHZSPI_Receive+0x78>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80113a0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80113a4:	2464      	movs	r4, #100	; 0x64
 80113a6:	fb04 f303 	mul.w	r3, r4, r3
 80113aa:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80113ac:	9b01      	ldr	r3, [sp, #4]
 80113ae:	b143      	cbz	r3, 80113c2 <SUBGHZSPI_Receive+0x66>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80113b0:	9b01      	ldr	r3, [sp, #4]
 80113b2:	3b01      	subs	r3, #1
 80113b4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80113b6:	4b08      	ldr	r3, [pc, #32]	; (80113d8 <SUBGHZSPI_Receive+0x7c>)
 80113b8:	689b      	ldr	r3, [r3, #8]
 80113ba:	f013 0f01 	tst.w	r3, #1
 80113be:	d0f5      	beq.n	80113ac <SUBGHZSPI_Receive+0x50>
 80113c0:	e001      	b.n	80113c6 <SUBGHZSPI_Receive+0x6a>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80113c2:	2001      	movs	r0, #1
 80113c4:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80113c6:	4b04      	ldr	r3, [pc, #16]	; (80113d8 <SUBGHZSPI_Receive+0x7c>)
 80113c8:	68db      	ldr	r3, [r3, #12]
 80113ca:	700b      	strb	r3, [r1, #0]

  return status;
}
 80113cc:	b003      	add	sp, #12
 80113ce:	bc10      	pop	{r4}
 80113d0:	4770      	bx	lr
 80113d2:	bf00      	nop
 80113d4:	20000180 	.word	0x20000180
 80113d8:	58010000 	.word	0x58010000
 80113dc:	5801000c 	.word	0x5801000c

080113e0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80113e0:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80113e2:	4b13      	ldr	r3, [pc, #76]	; (8011430 <SUBGHZ_WaitOnBusy+0x50>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80113ea:	f3c3 434b 	ubfx	r3, r3, #17, #12
 80113ee:	2264      	movs	r2, #100	; 0x64
 80113f0:	fb02 f303 	mul.w	r3, r2, r3
 80113f4:	9301      	str	r3, [sp, #4]
 80113f6:	e006      	b.n	8011406 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80113f8:	2302      	movs	r3, #2
 80113fa:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 80113fc:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 80113fe:	b002      	add	sp, #8
 8011400:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8011402:	4213      	tst	r3, r2
 8011404:	d012      	beq.n	801142c <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8011406:	4b0b      	ldr	r3, [pc, #44]	; (8011434 <SUBGHZ_WaitOnBusy+0x54>)
 8011408:	695b      	ldr	r3, [r3, #20]
 801140a:	f013 0304 	ands.w	r3, r3, #4
 801140e:	d000      	beq.n	8011412 <SUBGHZ_WaitOnBusy+0x32>
 8011410:	2301      	movs	r3, #1
    if (count == 0U)
 8011412:	9a01      	ldr	r2, [sp, #4]
 8011414:	2a00      	cmp	r2, #0
 8011416:	d0ef      	beq.n	80113f8 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8011418:	9a01      	ldr	r2, [sp, #4]
 801141a:	3a01      	subs	r2, #1
 801141c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 801141e:	4a05      	ldr	r2, [pc, #20]	; (8011434 <SUBGHZ_WaitOnBusy+0x54>)
 8011420:	6952      	ldr	r2, [r2, #20]
 8011422:	f012 0202 	ands.w	r2, r2, #2
 8011426:	d0ec      	beq.n	8011402 <SUBGHZ_WaitOnBusy+0x22>
 8011428:	2201      	movs	r2, #1
 801142a:	e7ea      	b.n	8011402 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 801142c:	2000      	movs	r0, #0
 801142e:	e7e6      	b.n	80113fe <SUBGHZ_WaitOnBusy+0x1e>
 8011430:	20000180 	.word	0x20000180
 8011434:	58000400 	.word	0x58000400

08011438 <SUBGHZ_CheckDeviceReady>:
{
 8011438:	b500      	push	{lr}
 801143a:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 801143c:	7903      	ldrb	r3, [r0, #4]
 801143e:	2b01      	cmp	r3, #1
 8011440:	d004      	beq.n	801144c <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8011442:	f7ff ffcd 	bl	80113e0 <SUBGHZ_WaitOnBusy>
}
 8011446:	b003      	add	sp, #12
 8011448:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 801144c:	4b0d      	ldr	r3, [pc, #52]	; (8011484 <SUBGHZ_CheckDeviceReady+0x4c>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011454:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8011458:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 801145a:	4a0b      	ldr	r2, [pc, #44]	; (8011488 <SUBGHZ_CheckDeviceReady+0x50>)
 801145c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8011460:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8011468:	9b01      	ldr	r3, [sp, #4]
 801146a:	3b01      	subs	r3, #1
 801146c:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 801146e:	9b01      	ldr	r3, [sp, #4]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d1f9      	bne.n	8011468 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8011474:	4a04      	ldr	r2, [pc, #16]	; (8011488 <SUBGHZ_CheckDeviceReady+0x50>)
 8011476:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 801147a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801147e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8011482:	e7de      	b.n	8011442 <SUBGHZ_CheckDeviceReady+0xa>
 8011484:	20000180 	.word	0x20000180
 8011488:	58000400 	.word	0x58000400

0801148c <HAL_SUBGHZ_WriteRegisters>:
{
 801148c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011490:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8011492:	7980      	ldrb	r0, [r0, #6]
 8011494:	fa5f f880 	uxtb.w	r8, r0
 8011498:	f1b8 0f01 	cmp.w	r8, #1
 801149c:	d13e      	bne.n	801151c <HAL_SUBGHZ_WriteRegisters+0x90>
 801149e:	460c      	mov	r4, r1
 80114a0:	4617      	mov	r7, r2
 80114a2:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80114a4:	796b      	ldrb	r3, [r5, #5]
 80114a6:	2b01      	cmp	r3, #1
 80114a8:	d03b      	beq.n	8011522 <HAL_SUBGHZ_WriteRegisters+0x96>
 80114aa:	2301      	movs	r3, #1
 80114ac:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80114ae:	2302      	movs	r3, #2
 80114b0:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80114b2:	4628      	mov	r0, r5
 80114b4:	f7ff ffc0 	bl	8011438 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80114b8:	4a1b      	ldr	r2, [pc, #108]	; (8011528 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80114ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80114be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80114c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80114c6:	210d      	movs	r1, #13
 80114c8:	4628      	mov	r0, r5
 80114ca:	f7ff ff09 	bl	80112e0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80114ce:	0a21      	lsrs	r1, r4, #8
 80114d0:	4628      	mov	r0, r5
 80114d2:	f7ff ff05 	bl	80112e0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80114d6:	b2e1      	uxtb	r1, r4
 80114d8:	4628      	mov	r0, r5
 80114da:	f7ff ff01 	bl	80112e0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80114de:	2400      	movs	r4, #0
 80114e0:	e005      	b.n	80114ee <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80114e2:	5d39      	ldrb	r1, [r7, r4]
 80114e4:	4628      	mov	r0, r5
 80114e6:	f7ff fefb 	bl	80112e0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80114ea:	3401      	adds	r4, #1
 80114ec:	b2a4      	uxth	r4, r4
 80114ee:	42b4      	cmp	r4, r6
 80114f0:	d3f7      	bcc.n	80114e2 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80114f2:	4a0d      	ldr	r2, [pc, #52]	; (8011528 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80114f4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80114f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80114fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8011500:	4628      	mov	r0, r5
 8011502:	f7ff ff6d 	bl	80113e0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8011506:	68ab      	ldr	r3, [r5, #8]
 8011508:	b90b      	cbnz	r3, 801150e <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 801150a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 801150e:	2301      	movs	r3, #1
 8011510:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8011512:	2300      	movs	r3, #0
 8011514:	716b      	strb	r3, [r5, #5]
}
 8011516:	4640      	mov	r0, r8
 8011518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 801151c:	f04f 0802 	mov.w	r8, #2
 8011520:	e7f9      	b.n	8011516 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8011522:	f04f 0802 	mov.w	r8, #2
 8011526:	e7f6      	b.n	8011516 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8011528:	58000400 	.word	0x58000400

0801152c <HAL_SUBGHZ_ReadRegisters>:
{
 801152c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011530:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8011532:	7980      	ldrb	r0, [r0, #6]
 8011534:	fa5f f880 	uxtb.w	r8, r0
 8011538:	f1b8 0f01 	cmp.w	r8, #1
 801153c:	d141      	bne.n	80115c2 <HAL_SUBGHZ_ReadRegisters+0x96>
 801153e:	460c      	mov	r4, r1
 8011540:	4615      	mov	r5, r2
 8011542:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8011544:	7973      	ldrb	r3, [r6, #5]
 8011546:	2b01      	cmp	r3, #1
 8011548:	d03e      	beq.n	80115c8 <HAL_SUBGHZ_ReadRegisters+0x9c>
 801154a:	2301      	movs	r3, #1
 801154c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 801154e:	4630      	mov	r0, r6
 8011550:	f7ff ff72 	bl	8011438 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8011554:	4a1e      	ldr	r2, [pc, #120]	; (80115d0 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8011556:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 801155a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801155e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8011562:	211d      	movs	r1, #29
 8011564:	4630      	mov	r0, r6
 8011566:	f7ff febb 	bl	80112e0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 801156a:	0a21      	lsrs	r1, r4, #8
 801156c:	4630      	mov	r0, r6
 801156e:	f7ff feb7 	bl	80112e0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8011572:	b2e1      	uxtb	r1, r4
 8011574:	4630      	mov	r0, r6
 8011576:	f7ff feb3 	bl	80112e0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 801157a:	2100      	movs	r1, #0
 801157c:	4630      	mov	r0, r6
 801157e:	f7ff feaf 	bl	80112e0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8011582:	2400      	movs	r4, #0
 8011584:	e006      	b.n	8011594 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8011586:	4629      	mov	r1, r5
 8011588:	4630      	mov	r0, r6
 801158a:	f7ff fee7 	bl	801135c <SUBGHZSPI_Receive>
      pData++;
 801158e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8011590:	3401      	adds	r4, #1
 8011592:	b2a4      	uxth	r4, r4
 8011594:	42bc      	cmp	r4, r7
 8011596:	d3f6      	bcc.n	8011586 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8011598:	4a0d      	ldr	r2, [pc, #52]	; (80115d0 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 801159a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 801159e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80115a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80115a6:	4630      	mov	r0, r6
 80115a8:	f7ff ff1a 	bl	80113e0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80115ac:	68b3      	ldr	r3, [r6, #8]
 80115ae:	b90b      	cbnz	r3, 80115b4 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 80115b0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80115b4:	2301      	movs	r3, #1
 80115b6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80115b8:	2300      	movs	r3, #0
 80115ba:	7173      	strb	r3, [r6, #5]
}
 80115bc:	4640      	mov	r0, r8
 80115be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80115c2:	f04f 0802 	mov.w	r8, #2
 80115c6:	e7f9      	b.n	80115bc <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 80115c8:	f04f 0802 	mov.w	r8, #2
 80115cc:	e7f6      	b.n	80115bc <HAL_SUBGHZ_ReadRegisters+0x90>
 80115ce:	bf00      	nop
 80115d0:	58000400 	.word	0x58000400

080115d4 <HAL_SUBGHZ_ExecSetCmd>:
{
 80115d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115d8:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80115da:	7980      	ldrb	r0, [r0, #6]
 80115dc:	fa5f f980 	uxtb.w	r9, r0
 80115e0:	f1b9 0f01 	cmp.w	r9, #1
 80115e4:	d143      	bne.n	801166e <HAL_SUBGHZ_ExecSetCmd+0x9a>
 80115e6:	4688      	mov	r8, r1
 80115e8:	4617      	mov	r7, r2
 80115ea:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80115ec:	796b      	ldrb	r3, [r5, #5]
 80115ee:	2b01      	cmp	r3, #1
 80115f0:	d040      	beq.n	8011674 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 80115f2:	2301      	movs	r3, #1
 80115f4:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80115f6:	4628      	mov	r0, r5
 80115f8:	f7ff ff1e 	bl	8011438 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80115fc:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8011600:	d005      	beq.n	801160e <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8011602:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8011606:	d002      	beq.n	801160e <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8011608:	2300      	movs	r3, #0
 801160a:	712b      	strb	r3, [r5, #4]
 801160c:	e001      	b.n	8011612 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 801160e:	2301      	movs	r3, #1
 8011610:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8011612:	4a1a      	ldr	r2, [pc, #104]	; (801167c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8011614:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8011618:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801161c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8011620:	4641      	mov	r1, r8
 8011622:	4628      	mov	r0, r5
 8011624:	f7ff fe5c 	bl	80112e0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8011628:	2400      	movs	r4, #0
 801162a:	e005      	b.n	8011638 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 801162c:	5d39      	ldrb	r1, [r7, r4]
 801162e:	4628      	mov	r0, r5
 8011630:	f7ff fe56 	bl	80112e0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8011634:	3401      	adds	r4, #1
 8011636:	b2a4      	uxth	r4, r4
 8011638:	42b4      	cmp	r4, r6
 801163a:	d3f7      	bcc.n	801162c <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 801163c:	4a0f      	ldr	r2, [pc, #60]	; (801167c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 801163e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8011642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 801164a:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 801164e:	d10a      	bne.n	8011666 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8011650:	68ab      	ldr	r3, [r5, #8]
 8011652:	b90b      	cbnz	r3, 8011658 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8011654:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8011658:	2301      	movs	r3, #1
 801165a:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 801165c:	2300      	movs	r3, #0
 801165e:	716b      	strb	r3, [r5, #5]
}
 8011660:	4648      	mov	r0, r9
 8011662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8011666:	4628      	mov	r0, r5
 8011668:	f7ff feba 	bl	80113e0 <SUBGHZ_WaitOnBusy>
 801166c:	e7f0      	b.n	8011650 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 801166e:	f04f 0902 	mov.w	r9, #2
 8011672:	e7f5      	b.n	8011660 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8011674:	f04f 0902 	mov.w	r9, #2
 8011678:	e7f2      	b.n	8011660 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 801167a:	bf00      	nop
 801167c:	58000400 	.word	0x58000400

08011680 <HAL_SUBGHZ_ExecGetCmd>:
{
 8011680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011684:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8011686:	7980      	ldrb	r0, [r0, #6]
 8011688:	fa5f f880 	uxtb.w	r8, r0
 801168c:	f1b8 0f01 	cmp.w	r8, #1
 8011690:	d139      	bne.n	8011706 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8011692:	460c      	mov	r4, r1
 8011694:	4615      	mov	r5, r2
 8011696:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8011698:	7973      	ldrb	r3, [r6, #5]
 801169a:	2b01      	cmp	r3, #1
 801169c:	d036      	beq.n	801170c <HAL_SUBGHZ_ExecGetCmd+0x8c>
 801169e:	2301      	movs	r3, #1
 80116a0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80116a2:	4630      	mov	r0, r6
 80116a4:	f7ff fec8 	bl	8011438 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80116a8:	4a1a      	ldr	r2, [pc, #104]	; (8011714 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80116aa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80116ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80116b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80116b6:	4621      	mov	r1, r4
 80116b8:	4630      	mov	r0, r6
 80116ba:	f7ff fe11 	bl	80112e0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80116be:	2100      	movs	r1, #0
 80116c0:	4630      	mov	r0, r6
 80116c2:	f7ff fe0d 	bl	80112e0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80116c6:	2400      	movs	r4, #0
 80116c8:	e006      	b.n	80116d8 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80116ca:	4629      	mov	r1, r5
 80116cc:	4630      	mov	r0, r6
 80116ce:	f7ff fe45 	bl	801135c <SUBGHZSPI_Receive>
      pData++;
 80116d2:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80116d4:	3401      	adds	r4, #1
 80116d6:	b2a4      	uxth	r4, r4
 80116d8:	42bc      	cmp	r4, r7
 80116da:	d3f6      	bcc.n	80116ca <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80116dc:	4a0d      	ldr	r2, [pc, #52]	; (8011714 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80116de:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80116e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80116e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80116ea:	4630      	mov	r0, r6
 80116ec:	f7ff fe78 	bl	80113e0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80116f0:	68b3      	ldr	r3, [r6, #8]
 80116f2:	b90b      	cbnz	r3, 80116f8 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 80116f4:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80116f8:	2301      	movs	r3, #1
 80116fa:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80116fc:	2300      	movs	r3, #0
 80116fe:	7173      	strb	r3, [r6, #5]
}
 8011700:	4640      	mov	r0, r8
 8011702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8011706:	f04f 0802 	mov.w	r8, #2
 801170a:	e7f9      	b.n	8011700 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 801170c:	f04f 0802 	mov.w	r8, #2
 8011710:	e7f6      	b.n	8011700 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8011712:	bf00      	nop
 8011714:	58000400 	.word	0x58000400

08011718 <HAL_SUBGHZ_IRQHandler>:
{
 8011718:	b530      	push	{r4, r5, lr}
 801171a:	b083      	sub	sp, #12
 801171c:	4605      	mov	r5, r0
  uint8_t tmpisr[2] = {0};
 801171e:	2300      	movs	r3, #0
 8011720:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8011724:	2302      	movs	r3, #2
 8011726:	aa01      	add	r2, sp, #4
 8011728:	2112      	movs	r1, #18
 801172a:	f7ff ffa9 	bl	8011680 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 801172e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8) | tmpisr[1];
 8011732:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011736:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 801173a:	f013 0f01 	tst.w	r3, #1
 801173e:	d126      	bne.n	801178e <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8011740:	f014 0f02 	tst.w	r4, #2
 8011744:	d127      	bne.n	8011796 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8011746:	f014 0f04 	tst.w	r4, #4
 801174a:	d128      	bne.n	801179e <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 801174c:	f014 0f08 	tst.w	r4, #8
 8011750:	d129      	bne.n	80117a6 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8011752:	f014 0f10 	tst.w	r4, #16
 8011756:	d12a      	bne.n	80117ae <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8011758:	f014 0f20 	tst.w	r4, #32
 801175c:	d12b      	bne.n	80117b6 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 801175e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8011762:	d12c      	bne.n	80117be <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8011764:	f014 0f80 	tst.w	r4, #128	; 0x80
 8011768:	d006      	beq.n	8011778 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 801176a:	f414 7f80 	tst.w	r4, #256	; 0x100
 801176e:	d02a      	beq.n	80117c6 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8011770:	2101      	movs	r1, #1
 8011772:	4628      	mov	r0, r5
 8011774:	f010 fbb4 	bl	8021ee0 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8011778:	f414 7f00 	tst.w	r4, #512	; 0x200
 801177c:	d128      	bne.n	80117d0 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 801177e:	2302      	movs	r3, #2
 8011780:	aa01      	add	r2, sp, #4
 8011782:	4619      	mov	r1, r3
 8011784:	4628      	mov	r0, r5
 8011786:	f7ff ff25 	bl	80115d4 <HAL_SUBGHZ_ExecSetCmd>
}
 801178a:	b003      	add	sp, #12
 801178c:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 801178e:	4628      	mov	r0, r5
 8011790:	f010 fb8e 	bl	8021eb0 <HAL_SUBGHZ_TxCpltCallback>
 8011794:	e7d4      	b.n	8011740 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8011796:	4628      	mov	r0, r5
 8011798:	f010 fb92 	bl	8021ec0 <HAL_SUBGHZ_RxCpltCallback>
 801179c:	e7d3      	b.n	8011746 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 801179e:	4628      	mov	r0, r5
 80117a0:	f010 fbc2 	bl	8021f28 <HAL_SUBGHZ_PreambleDetectedCallback>
 80117a4:	e7d2      	b.n	801174c <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80117a6:	4628      	mov	r0, r5
 80117a8:	f010 fbc6 	bl	8021f38 <HAL_SUBGHZ_SyncWordValidCallback>
 80117ac:	e7d1      	b.n	8011752 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80117ae:	4628      	mov	r0, r5
 80117b0:	f010 fbca 	bl	8021f48 <HAL_SUBGHZ_HeaderValidCallback>
 80117b4:	e7d0      	b.n	8011758 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80117b6:	4628      	mov	r0, r5
 80117b8:	f010 fbae 	bl	8021f18 <HAL_SUBGHZ_HeaderErrorCallback>
 80117bc:	e7cf      	b.n	801175e <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80117be:	4628      	mov	r0, r5
 80117c0:	f010 fb86 	bl	8021ed0 <HAL_SUBGHZ_CRCErrorCallback>
 80117c4:	e7ce      	b.n	8011764 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80117c6:	2100      	movs	r1, #0
 80117c8:	4628      	mov	r0, r5
 80117ca:	f010 fb89 	bl	8021ee0 <HAL_SUBGHZ_CADStatusCallback>
 80117ce:	e7d3      	b.n	8011778 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80117d0:	4628      	mov	r0, r5
 80117d2:	f010 fb97 	bl	8021f04 <HAL_SUBGHZ_RxTxTimeoutCallback>
 80117d6:	e7d2      	b.n	801177e <HAL_SUBGHZ_IRQHandler+0x66>

080117d8 <HAL_SUBGHZ_WriteBuffer>:
{
 80117d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117dc:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80117de:	7980      	ldrb	r0, [r0, #6]
 80117e0:	fa5f f880 	uxtb.w	r8, r0
 80117e4:	f1b8 0f01 	cmp.w	r8, #1
 80117e8:	d138      	bne.n	801185c <HAL_SUBGHZ_WriteBuffer+0x84>
 80117ea:	460c      	mov	r4, r1
 80117ec:	4617      	mov	r7, r2
 80117ee:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80117f0:	796b      	ldrb	r3, [r5, #5]
 80117f2:	2b01      	cmp	r3, #1
 80117f4:	d035      	beq.n	8011862 <HAL_SUBGHZ_WriteBuffer+0x8a>
 80117f6:	2301      	movs	r3, #1
 80117f8:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80117fa:	4628      	mov	r0, r5
 80117fc:	f7ff fe1c 	bl	8011438 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8011800:	4a19      	ldr	r2, [pc, #100]	; (8011868 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8011802:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8011806:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801180a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 801180e:	210e      	movs	r1, #14
 8011810:	4628      	mov	r0, r5
 8011812:	f7ff fd65 	bl	80112e0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8011816:	4621      	mov	r1, r4
 8011818:	4628      	mov	r0, r5
 801181a:	f7ff fd61 	bl	80112e0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 801181e:	2400      	movs	r4, #0
 8011820:	e005      	b.n	801182e <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8011822:	5d39      	ldrb	r1, [r7, r4]
 8011824:	4628      	mov	r0, r5
 8011826:	f7ff fd5b 	bl	80112e0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 801182a:	3401      	adds	r4, #1
 801182c:	b2a4      	uxth	r4, r4
 801182e:	42b4      	cmp	r4, r6
 8011830:	d3f7      	bcc.n	8011822 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8011832:	4a0d      	ldr	r2, [pc, #52]	; (8011868 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8011834:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8011838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801183c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8011840:	4628      	mov	r0, r5
 8011842:	f7ff fdcd 	bl	80113e0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8011846:	68ab      	ldr	r3, [r5, #8]
 8011848:	b90b      	cbnz	r3, 801184e <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 801184a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 801184e:	2301      	movs	r3, #1
 8011850:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8011852:	2300      	movs	r3, #0
 8011854:	716b      	strb	r3, [r5, #5]
}
 8011856:	4640      	mov	r0, r8
 8011858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 801185c:	f04f 0802 	mov.w	r8, #2
 8011860:	e7f9      	b.n	8011856 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8011862:	f04f 0802 	mov.w	r8, #2
 8011866:	e7f6      	b.n	8011856 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8011868:	58000400 	.word	0x58000400

0801186c <HAL_SUBGHZ_ReadBuffer>:
{
 801186c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011870:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8011872:	7980      	ldrb	r0, [r0, #6]
 8011874:	fa5f f880 	uxtb.w	r8, r0
 8011878:	f1b8 0f01 	cmp.w	r8, #1
 801187c:	d13d      	bne.n	80118fa <HAL_SUBGHZ_ReadBuffer+0x8e>
 801187e:	460c      	mov	r4, r1
 8011880:	4615      	mov	r5, r2
 8011882:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8011884:	7973      	ldrb	r3, [r6, #5]
 8011886:	2b01      	cmp	r3, #1
 8011888:	d03a      	beq.n	8011900 <HAL_SUBGHZ_ReadBuffer+0x94>
 801188a:	2301      	movs	r3, #1
 801188c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 801188e:	4630      	mov	r0, r6
 8011890:	f7ff fdd2 	bl	8011438 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8011894:	4a1c      	ldr	r2, [pc, #112]	; (8011908 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8011896:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 801189a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801189e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80118a2:	211e      	movs	r1, #30
 80118a4:	4630      	mov	r0, r6
 80118a6:	f7ff fd1b 	bl	80112e0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80118aa:	4621      	mov	r1, r4
 80118ac:	4630      	mov	r0, r6
 80118ae:	f7ff fd17 	bl	80112e0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80118b2:	2100      	movs	r1, #0
 80118b4:	4630      	mov	r0, r6
 80118b6:	f7ff fd13 	bl	80112e0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80118ba:	2400      	movs	r4, #0
 80118bc:	e006      	b.n	80118cc <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80118be:	4629      	mov	r1, r5
 80118c0:	4630      	mov	r0, r6
 80118c2:	f7ff fd4b 	bl	801135c <SUBGHZSPI_Receive>
      pData++;
 80118c6:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80118c8:	3401      	adds	r4, #1
 80118ca:	b2a4      	uxth	r4, r4
 80118cc:	42bc      	cmp	r4, r7
 80118ce:	d3f6      	bcc.n	80118be <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80118d0:	4a0d      	ldr	r2, [pc, #52]	; (8011908 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80118d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80118d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80118da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80118de:	4630      	mov	r0, r6
 80118e0:	f7ff fd7e 	bl	80113e0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80118e4:	68b3      	ldr	r3, [r6, #8]
 80118e6:	b90b      	cbnz	r3, 80118ec <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 80118e8:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80118ec:	2301      	movs	r3, #1
 80118ee:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80118f0:	2300      	movs	r3, #0
 80118f2:	7173      	strb	r3, [r6, #5]
}
 80118f4:	4640      	mov	r0, r8
 80118f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80118fa:	f04f 0802 	mov.w	r8, #2
 80118fe:	e7f9      	b.n	80118f4 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8011900:	f04f 0802 	mov.w	r8, #2
 8011904:	e7f6      	b.n	80118f4 <HAL_SUBGHZ_ReadBuffer+0x88>
 8011906:	bf00      	nop
 8011908:	58000400 	.word	0x58000400

0801190c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801190c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801190e:	e852 3f00 	ldrex	r3, [r2]
 8011912:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011916:	e842 3100 	strex	r1, r3, [r2]
 801191a:	2900      	cmp	r1, #0
 801191c:	d1f6      	bne.n	801190c <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801191e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011920:	f102 0308 	add.w	r3, r2, #8
 8011924:	e853 3f00 	ldrex	r3, [r3]
 8011928:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801192c:	3208      	adds	r2, #8
 801192e:	e842 3100 	strex	r1, r3, [r2]
 8011932:	2900      	cmp	r1, #0
 8011934:	d1f3      	bne.n	801191e <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011936:	2320      	movs	r3, #32
 8011938:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 801193c:	4770      	bx	lr

0801193e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801193e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011940:	e852 3f00 	ldrex	r3, [r2]
 8011944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011948:	e842 3100 	strex	r1, r3, [r2]
 801194c:	2900      	cmp	r1, #0
 801194e:	d1f6      	bne.n	801193e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011950:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011952:	f102 0308 	add.w	r3, r2, #8
 8011956:	e853 3f00 	ldrex	r3, [r3]
 801195a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801195e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011962:	3208      	adds	r2, #8
 8011964:	e842 3100 	strex	r1, r3, [r2]
 8011968:	2900      	cmp	r1, #0
 801196a:	d1f1      	bne.n	8011950 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801196c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801196e:	2b01      	cmp	r3, #1
 8011970:	d006      	beq.n	8011980 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011972:	2320      	movs	r3, #32
 8011974:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011978:	2300      	movs	r3, #0
 801197a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801197c:	6703      	str	r3, [r0, #112]	; 0x70
}
 801197e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011980:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011982:	e852 3f00 	ldrex	r3, [r2]
 8011986:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801198a:	e842 3100 	strex	r1, r3, [r2]
 801198e:	2900      	cmp	r1, #0
 8011990:	d1f6      	bne.n	8011980 <UART_EndRxTransfer+0x42>
 8011992:	e7ee      	b.n	8011972 <UART_EndRxTransfer+0x34>

08011994 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8011994:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8011998:	2b20      	cmp	r3, #32
 801199a:	d14c      	bne.n	8011a36 <HAL_UART_Transmit_DMA+0xa2>
{
 801199c:	b510      	push	{r4, lr}
 801199e:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80119a0:	2900      	cmp	r1, #0
 80119a2:	d04a      	beq.n	8011a3a <HAL_UART_Transmit_DMA+0xa6>
 80119a4:	2a00      	cmp	r2, #0
 80119a6:	d04a      	beq.n	8011a3e <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 80119a8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80119ac:	2b01      	cmp	r3, #1
 80119ae:	d048      	beq.n	8011a42 <HAL_UART_Transmit_DMA+0xae>
 80119b0:	2301      	movs	r3, #1
 80119b2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 80119b6:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80119b8:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80119bc:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119c0:	2300      	movs	r3, #0
 80119c2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80119c6:	2321      	movs	r3, #33	; 0x21
 80119c8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 80119cc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80119ce:	b1f3      	cbz	r3, 8011a0e <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80119d0:	491d      	ldr	r1, [pc, #116]	; (8011a48 <HAL_UART_Transmit_DMA+0xb4>)
 80119d2:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80119d4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80119d6:	491d      	ldr	r1, [pc, #116]	; (8011a4c <HAL_UART_Transmit_DMA+0xb8>)
 80119d8:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80119da:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80119dc:	491c      	ldr	r1, [pc, #112]	; (8011a50 <HAL_UART_Transmit_DMA+0xbc>)
 80119de:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80119e0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80119e2:	2100      	movs	r1, #0
 80119e4:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80119e6:	6801      	ldr	r1, [r0, #0]
 80119e8:	4613      	mov	r3, r2
 80119ea:	f101 0228 	add.w	r2, r1, #40	; 0x28
 80119ee:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80119f0:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80119f2:	f7fd fb77 	bl	800f0e4 <HAL_DMA_Start_IT>
 80119f6:	b150      	cbz	r0, 8011a0e <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80119f8:	2310      	movs	r3, #16
 80119fa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80119fe:	2300      	movs	r3, #0
 8011a00:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8011a04:	2320      	movs	r3, #32
 8011a06:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8011a0a:	2001      	movs	r0, #1
 8011a0c:	e012      	b.n	8011a34 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011a0e:	6823      	ldr	r3, [r4, #0]
 8011a10:	2240      	movs	r2, #64	; 0x40
 8011a12:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8011a14:	2300      	movs	r3, #0
 8011a16:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011a1a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a1c:	f102 0308 	add.w	r3, r2, #8
 8011a20:	e853 3f00 	ldrex	r3, [r3]
 8011a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a28:	3208      	adds	r2, #8
 8011a2a:	e842 3100 	strex	r1, r3, [r2]
 8011a2e:	2900      	cmp	r1, #0
 8011a30:	d1f3      	bne.n	8011a1a <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8011a32:	2000      	movs	r0, #0
}
 8011a34:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8011a36:	2002      	movs	r0, #2
}
 8011a38:	4770      	bx	lr
      return HAL_ERROR;
 8011a3a:	2001      	movs	r0, #1
 8011a3c:	e7fa      	b.n	8011a34 <HAL_UART_Transmit_DMA+0xa0>
 8011a3e:	2001      	movs	r0, #1
 8011a40:	e7f8      	b.n	8011a34 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8011a42:	2002      	movs	r0, #2
 8011a44:	e7f6      	b.n	8011a34 <HAL_UART_Transmit_DMA+0xa0>
 8011a46:	bf00      	nop
 8011a48:	08011a55 	.word	0x08011a55
 8011a4c:	08011ac3 	.word	0x08011ac3
 8011a50:	08011acf 	.word	0x08011acf

08011a54 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011a54:	b508      	push	{r3, lr}
 8011a56:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a58:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	f013 0f20 	tst.w	r3, #32
 8011a62:	d118      	bne.n	8011a96 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8011a64:	2300      	movs	r3, #0
 8011a66:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011a6a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a6c:	f102 0308 	add.w	r3, r2, #8
 8011a70:	e853 3f00 	ldrex	r3, [r3]
 8011a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a78:	3208      	adds	r2, #8
 8011a7a:	e842 3100 	strex	r1, r3, [r2]
 8011a7e:	2900      	cmp	r1, #0
 8011a80:	d1f3      	bne.n	8011a6a <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011a82:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a84:	e852 3f00 	ldrex	r3, [r2]
 8011a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a8c:	e842 3100 	strex	r1, r3, [r2]
 8011a90:	2900      	cmp	r1, #0
 8011a92:	d1f6      	bne.n	8011a82 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011a94:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8011a96:	f7f5 fec5 	bl	8007824 <HAL_UART_TxCpltCallback>
}
 8011a9a:	e7fb      	b.n	8011a94 <UART_DMATransmitCplt+0x40>

08011a9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011a9c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011a9e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aa0:	e852 3f00 	ldrex	r3, [r2]
 8011aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aa8:	e842 3100 	strex	r1, r3, [r2]
 8011aac:	2900      	cmp	r1, #0
 8011aae:	d1f6      	bne.n	8011a9e <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011ab0:	2320      	movs	r3, #32
 8011ab2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011aba:	f7f5 feb3 	bl	8007824 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011abe:	bd08      	pop	{r3, pc}

08011ac0 <HAL_UART_TxHalfCpltCallback>:
}
 8011ac0:	4770      	bx	lr

08011ac2 <UART_DMATxHalfCplt>:
{
 8011ac2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8011ac4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8011ac6:	f7ff fffb 	bl	8011ac0 <HAL_UART_TxHalfCpltCallback>
}
 8011aca:	bd08      	pop	{r3, pc}

08011acc <HAL_UART_ErrorCallback>:
}
 8011acc:	4770      	bx	lr

08011ace <UART_DMAError>:
{
 8011ace:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ad0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011ad2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011ad6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011ada:	6823      	ldr	r3, [r4, #0]
 8011adc:	689b      	ldr	r3, [r3, #8]
 8011ade:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011ae2:	d001      	beq.n	8011ae8 <UART_DMAError+0x1a>
 8011ae4:	2a21      	cmp	r2, #33	; 0x21
 8011ae6:	d010      	beq.n	8011b0a <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011ae8:	6823      	ldr	r3, [r4, #0]
 8011aea:	689b      	ldr	r3, [r3, #8]
 8011aec:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011af0:	d001      	beq.n	8011af6 <UART_DMAError+0x28>
 8011af2:	2d22      	cmp	r5, #34	; 0x22
 8011af4:	d010      	beq.n	8011b18 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011af6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8011afa:	f043 0310 	orr.w	r3, r3, #16
 8011afe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8011b02:	4620      	mov	r0, r4
 8011b04:	f7ff ffe2 	bl	8011acc <HAL_UART_ErrorCallback>
}
 8011b08:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011b10:	4620      	mov	r0, r4
 8011b12:	f7ff fefb 	bl	801190c <UART_EndTxTransfer>
 8011b16:	e7e7      	b.n	8011ae8 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011b1e:	4620      	mov	r0, r4
 8011b20:	f7ff ff0d 	bl	801193e <UART_EndRxTransfer>
 8011b24:	e7e7      	b.n	8011af6 <UART_DMAError+0x28>

08011b26 <UART_DMAAbortOnError>:
{
 8011b26:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b28:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011b30:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8011b34:	f7ff ffca 	bl	8011acc <HAL_UART_ErrorCallback>
}
 8011b38:	bd08      	pop	{r3, pc}

08011b3a <HAL_UARTEx_RxEventCallback>:
}
 8011b3a:	4770      	bx	lr

08011b3c <HAL_UART_IRQHandler>:
{
 8011b3c:	b570      	push	{r4, r5, r6, lr}
 8011b3e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011b40:	6801      	ldr	r1, [r0, #0]
 8011b42:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011b44:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011b46:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011b48:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8011b4c:	401a      	ands	r2, r3
 8011b4e:	d108      	bne.n	8011b62 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011b50:	f013 0f20 	tst.w	r3, #32
 8011b54:	d005      	beq.n	8011b62 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011b56:	f010 0f20 	tst.w	r0, #32
 8011b5a:	d134      	bne.n	8011bc6 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011b5c:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8011b60:	d131      	bne.n	8011bc6 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8011b62:	b12a      	cbz	r2, 8011b70 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8011b64:	4abd      	ldr	r2, [pc, #756]	; (8011e5c <HAL_UART_IRQHandler+0x320>)
 8011b66:	402a      	ands	r2, r5
 8011b68:	d133      	bne.n	8011bd2 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011b6a:	4ebd      	ldr	r6, [pc, #756]	; (8011e60 <HAL_UART_IRQHandler+0x324>)
 8011b6c:	4230      	tst	r0, r6
 8011b6e:	d130      	bne.n	8011bd2 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011b70:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011b72:	2a01      	cmp	r2, #1
 8011b74:	f000 80c3 	beq.w	8011cfe <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011b78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8011b7c:	d003      	beq.n	8011b86 <HAL_UART_IRQHandler+0x4a>
 8011b7e:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8011b82:	f040 8155 	bne.w	8011e30 <HAL_UART_IRQHandler+0x2f4>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011b86:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011b8a:	d007      	beq.n	8011b9c <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011b8c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8011b90:	f040 8155 	bne.w	8011e3e <HAL_UART_IRQHandler+0x302>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011b94:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8011b98:	f040 8151 	bne.w	8011e3e <HAL_UART_IRQHandler+0x302>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011b9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011ba0:	d003      	beq.n	8011baa <HAL_UART_IRQHandler+0x6e>
 8011ba2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011ba6:	f040 8151 	bne.w	8011e4c <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011baa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8011bae:	d003      	beq.n	8011bb8 <HAL_UART_IRQHandler+0x7c>
 8011bb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011bb4:	f040 814e 	bne.w	8011e54 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011bb8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8011bbc:	d002      	beq.n	8011bc4 <HAL_UART_IRQHandler+0x88>
 8011bbe:	2800      	cmp	r0, #0
 8011bc0:	f2c0 8152 	blt.w	8011e68 <HAL_UART_IRQHandler+0x32c>
}
 8011bc4:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8011bc6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d0fb      	beq.n	8011bc4 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8011bcc:	4620      	mov	r0, r4
 8011bce:	4798      	blx	r3
      return;
 8011bd0:	e7f8      	b.n	8011bc4 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011bd2:	f013 0f01 	tst.w	r3, #1
 8011bd6:	d009      	beq.n	8011bec <HAL_UART_IRQHandler+0xb0>
 8011bd8:	f410 7f80 	tst.w	r0, #256	; 0x100
 8011bdc:	d006      	beq.n	8011bec <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011bde:	2601      	movs	r6, #1
 8011be0:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011be2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8011be6:	4331      	orrs	r1, r6
 8011be8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011bec:	f013 0f02 	tst.w	r3, #2
 8011bf0:	d00b      	beq.n	8011c0a <HAL_UART_IRQHandler+0xce>
 8011bf2:	f015 0f01 	tst.w	r5, #1
 8011bf6:	d008      	beq.n	8011c0a <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011bf8:	6821      	ldr	r1, [r4, #0]
 8011bfa:	2602      	movs	r6, #2
 8011bfc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011bfe:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8011c02:	f041 0104 	orr.w	r1, r1, #4
 8011c06:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011c0a:	f013 0f04 	tst.w	r3, #4
 8011c0e:	d00b      	beq.n	8011c28 <HAL_UART_IRQHandler+0xec>
 8011c10:	f015 0f01 	tst.w	r5, #1
 8011c14:	d008      	beq.n	8011c28 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011c16:	6821      	ldr	r1, [r4, #0]
 8011c18:	2604      	movs	r6, #4
 8011c1a:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011c1c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8011c20:	f041 0102 	orr.w	r1, r1, #2
 8011c24:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011c28:	f013 0f08 	tst.w	r3, #8
 8011c2c:	d00b      	beq.n	8011c46 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011c2e:	f010 0f20 	tst.w	r0, #32
 8011c32:	d100      	bne.n	8011c36 <HAL_UART_IRQHandler+0xfa>
 8011c34:	b13a      	cbz	r2, 8011c46 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011c36:	6822      	ldr	r2, [r4, #0]
 8011c38:	2108      	movs	r1, #8
 8011c3a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011c3c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8011c40:	430a      	orrs	r2, r1
 8011c42:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011c46:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8011c4a:	d00c      	beq.n	8011c66 <HAL_UART_IRQHandler+0x12a>
 8011c4c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8011c50:	d009      	beq.n	8011c66 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011c52:	6822      	ldr	r2, [r4, #0]
 8011c54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011c58:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011c5a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8011c5e:	f042 0220 	orr.w	r2, r2, #32
 8011c62:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011c66:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8011c6a:	2a00      	cmp	r2, #0
 8011c6c:	d0aa      	beq.n	8011bc4 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011c6e:	f013 0f20 	tst.w	r3, #32
 8011c72:	d009      	beq.n	8011c88 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011c74:	f010 0f20 	tst.w	r0, #32
 8011c78:	d102      	bne.n	8011c80 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011c7a:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8011c7e:	d003      	beq.n	8011c88 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8011c80:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011c82:	b10b      	cbz	r3, 8011c88 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8011c84:	4620      	mov	r0, r4
 8011c86:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8011c88:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011c8c:	6823      	ldr	r3, [r4, #0]
 8011c8e:	689b      	ldr	r3, [r3, #8]
 8011c90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011c94:	d102      	bne.n	8011c9c <HAL_UART_IRQHandler+0x160>
 8011c96:	f012 0f28 	tst.w	r2, #40	; 0x28
 8011c9a:	d029      	beq.n	8011cf0 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8011c9c:	4620      	mov	r0, r4
 8011c9e:	f7ff fe4e 	bl	801193e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011ca2:	6823      	ldr	r3, [r4, #0]
 8011ca4:	689b      	ldr	r3, [r3, #8]
 8011ca6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011caa:	d01d      	beq.n	8011ce8 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011cac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cae:	f102 0308 	add.w	r3, r2, #8
 8011cb2:	e853 3f00 	ldrex	r3, [r3]
 8011cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cba:	3208      	adds	r2, #8
 8011cbc:	e842 3100 	strex	r1, r3, [r2]
 8011cc0:	2900      	cmp	r1, #0
 8011cc2:	d1f3      	bne.n	8011cac <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8011cc4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8011cc6:	b15b      	cbz	r3, 8011ce0 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011cc8:	4a66      	ldr	r2, [pc, #408]	; (8011e64 <HAL_UART_IRQHandler+0x328>)
 8011cca:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011ccc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8011cce:	f7fd fa8f 	bl	800f1f0 <HAL_DMA_Abort_IT>
 8011cd2:	2800      	cmp	r0, #0
 8011cd4:	f43f af76 	beq.w	8011bc4 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011cd8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8011cda:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8011cdc:	4798      	blx	r3
 8011cde:	e771      	b.n	8011bc4 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	f7ff fef3 	bl	8011acc <HAL_UART_ErrorCallback>
 8011ce6:	e76d      	b.n	8011bc4 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8011ce8:	4620      	mov	r0, r4
 8011cea:	f7ff feef 	bl	8011acc <HAL_UART_ErrorCallback>
 8011cee:	e769      	b.n	8011bc4 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	f7ff feeb 	bl	8011acc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8011cfc:	e762      	b.n	8011bc4 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8011cfe:	f013 0f10 	tst.w	r3, #16
 8011d02:	f43f af39 	beq.w	8011b78 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8011d06:	f010 0f10 	tst.w	r0, #16
 8011d0a:	f43f af35 	beq.w	8011b78 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011d0e:	2310      	movs	r3, #16
 8011d10:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d12:	6823      	ldr	r3, [r4, #0]
 8011d14:	689b      	ldr	r3, [r3, #8]
 8011d16:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011d1a:	d04f      	beq.n	8011dbc <HAL_UART_IRQHandler+0x280>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011d1c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8011d1e:	6813      	ldr	r3, [r2, #0]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	f43f af4d 	beq.w	8011bc4 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8011d2a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8011d2e:	4299      	cmp	r1, r3
 8011d30:	f67f af48 	bls.w	8011bc4 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8011d34:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011d38:	6813      	ldr	r3, [r2, #0]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	f013 0f20 	tst.w	r3, #32
 8011d40:	d131      	bne.n	8011da6 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011d42:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d44:	e852 3f00 	ldrex	r3, [r2]
 8011d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d4c:	e842 3100 	strex	r1, r3, [r2]
 8011d50:	2900      	cmp	r1, #0
 8011d52:	d1f6      	bne.n	8011d42 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d54:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d56:	f102 0308 	add.w	r3, r2, #8
 8011d5a:	e853 3f00 	ldrex	r3, [r3]
 8011d5e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d62:	3208      	adds	r2, #8
 8011d64:	e842 3100 	strex	r1, r3, [r2]
 8011d68:	2900      	cmp	r1, #0
 8011d6a:	d1f3      	bne.n	8011d54 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011d6c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d6e:	f102 0308 	add.w	r3, r2, #8
 8011d72:	e853 3f00 	ldrex	r3, [r3]
 8011d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d7a:	3208      	adds	r2, #8
 8011d7c:	e842 3100 	strex	r1, r3, [r2]
 8011d80:	2900      	cmp	r1, #0
 8011d82:	d1f3      	bne.n	8011d6c <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8011d84:	2320      	movs	r3, #32
 8011d86:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d8e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d90:	e852 3f00 	ldrex	r3, [r2]
 8011d94:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d98:	e842 3100 	strex	r1, r3, [r2]
 8011d9c:	2900      	cmp	r1, #0
 8011d9e:	d1f6      	bne.n	8011d8e <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011da0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8011da2:	f7fd f9eb 	bl	800f17c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011da6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8011daa:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	1ac9      	subs	r1, r1, r3
 8011db2:	b289      	uxth	r1, r1
 8011db4:	4620      	mov	r0, r4
 8011db6:	f7ff fec0 	bl	8011b3a <HAL_UARTEx_RxEventCallback>
      return;
 8011dba:	e703      	b.n	8011bc4 <HAL_UART_IRQHandler+0x88>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011dbc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8011dc0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	1ac9      	subs	r1, r1, r3
 8011dc8:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8011dca:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	f43f aef7 	beq.w	8011bc4 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8011dd6:	2900      	cmp	r1, #0
 8011dd8:	f43f aef4 	beq.w	8011bc4 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ddc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dde:	e852 3f00 	ldrex	r3, [r2]
 8011de2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011de6:	e842 3000 	strex	r0, r3, [r2]
 8011dea:	2800      	cmp	r0, #0
 8011dec:	d1f6      	bne.n	8011ddc <HAL_UART_IRQHandler+0x2a0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011dee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011df0:	f102 0308 	add.w	r3, r2, #8
 8011df4:	e853 3f00 	ldrex	r3, [r3]
 8011df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011dfc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e00:	3208      	adds	r2, #8
 8011e02:	e842 3000 	strex	r0, r3, [r2]
 8011e06:	2800      	cmp	r0, #0
 8011e08:	d1f1      	bne.n	8011dee <HAL_UART_IRQHandler+0x2b2>
        huart->RxState = HAL_UART_STATE_READY;
 8011e0a:	2320      	movs	r3, #32
 8011e0c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e10:	2300      	movs	r3, #0
 8011e12:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8011e14:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e16:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e18:	e852 3f00 	ldrex	r3, [r2]
 8011e1c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e20:	e842 3000 	strex	r0, r3, [r2]
 8011e24:	2800      	cmp	r0, #0
 8011e26:	d1f6      	bne.n	8011e16 <HAL_UART_IRQHandler+0x2da>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011e28:	4620      	mov	r0, r4
 8011e2a:	f7ff fe86 	bl	8011b3a <HAL_UARTEx_RxEventCallback>
      return;
 8011e2e:	e6c9      	b.n	8011bc4 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011e30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011e34:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8011e36:	4620      	mov	r0, r4
 8011e38:	f000 fe14 	bl	8012a64 <HAL_UARTEx_WakeupCallback>
    return;
 8011e3c:	e6c2      	b.n	8011bc4 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8011e3e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	f43f aebf 	beq.w	8011bc4 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8011e46:	4620      	mov	r0, r4
 8011e48:	4798      	blx	r3
    return;
 8011e4a:	e6bb      	b.n	8011bc4 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	f7ff fe25 	bl	8011a9c <UART_EndTransmit_IT>
    return;
 8011e52:	e6b7      	b.n	8011bc4 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011e54:	4620      	mov	r0, r4
 8011e56:	f000 fe07 	bl	8012a68 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8011e5a:	e6b3      	b.n	8011bc4 <HAL_UART_IRQHandler+0x88>
 8011e5c:	10000001 	.word	0x10000001
 8011e60:	04000120 	.word	0x04000120
 8011e64:	08011b27 	.word	0x08011b27
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011e68:	4620      	mov	r0, r4
 8011e6a:	f000 fdfc 	bl	8012a66 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8011e6e:	e6a9      	b.n	8011bc4 <HAL_UART_IRQHandler+0x88>

08011e70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011e70:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8011e72:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011e76:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8011e7a:	2a22      	cmp	r2, #34	; 0x22
 8011e7c:	d005      	beq.n	8011e8a <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011e7e:	6802      	ldr	r2, [r0, #0]
 8011e80:	6993      	ldr	r3, [r2, #24]
 8011e82:	f043 0308 	orr.w	r3, r3, #8
 8011e86:	6193      	str	r3, [r2, #24]
  }
}
 8011e88:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011e8a:	6802      	ldr	r2, [r0, #0]
 8011e8c:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011e8e:	b2db      	uxtb	r3, r3
 8011e90:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8011e92:	400b      	ands	r3, r1
 8011e94:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8011e96:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8011e98:	3301      	adds	r3, #1
 8011e9a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8011e9c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8011ea0:	b29b      	uxth	r3, r3
 8011ea2:	3b01      	subs	r3, #1
 8011ea4:	b29b      	uxth	r3, r3
 8011ea6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8011eaa:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d1e9      	bne.n	8011e88 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011eb4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eb6:	e852 3f00 	ldrex	r3, [r2]
 8011eba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ebe:	e842 3100 	strex	r1, r3, [r2]
 8011ec2:	2900      	cmp	r1, #0
 8011ec4:	d1f6      	bne.n	8011eb4 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ec6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ec8:	f102 0308 	add.w	r3, r2, #8
 8011ecc:	e853 3f00 	ldrex	r3, [r3]
 8011ed0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ed4:	3208      	adds	r2, #8
 8011ed6:	e842 3100 	strex	r1, r3, [r2]
 8011eda:	2900      	cmp	r1, #0
 8011edc:	d1f3      	bne.n	8011ec6 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8011ede:	2320      	movs	r3, #32
 8011ee0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ee8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8011eea:	2b01      	cmp	r3, #1
 8011eec:	d116      	bne.n	8011f1c <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ef2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ef4:	e852 3f00 	ldrex	r3, [r2]
 8011ef8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011efc:	e842 3100 	strex	r1, r3, [r2]
 8011f00:	2900      	cmp	r1, #0
 8011f02:	d1f6      	bne.n	8011ef2 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011f04:	6803      	ldr	r3, [r0, #0]
 8011f06:	69da      	ldr	r2, [r3, #28]
 8011f08:	f012 0f10 	tst.w	r2, #16
 8011f0c:	d001      	beq.n	8011f12 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011f0e:	2210      	movs	r2, #16
 8011f10:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011f12:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8011f16:	f7ff fe10 	bl	8011b3a <HAL_UARTEx_RxEventCallback>
 8011f1a:	e7b5      	b.n	8011e88 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8011f1c:	f7f5 fc8a 	bl	8007834 <HAL_UART_RxCpltCallback>
 8011f20:	e7b2      	b.n	8011e88 <UART_RxISR_8BIT+0x18>

08011f22 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011f22:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011f24:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011f28:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8011f2c:	2b22      	cmp	r3, #34	; 0x22
 8011f2e:	d005      	beq.n	8011f3c <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011f30:	6802      	ldr	r2, [r0, #0]
 8011f32:	6993      	ldr	r3, [r2, #24]
 8011f34:	f043 0308 	orr.w	r3, r3, #8
 8011f38:	6193      	str	r3, [r2, #24]
  }
}
 8011f3a:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011f3c:	6803      	ldr	r3, [r0, #0]
 8011f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011f40:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8011f42:	4013      	ands	r3, r2
 8011f44:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8011f46:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8011f48:	3302      	adds	r3, #2
 8011f4a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8011f4c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	3b01      	subs	r3, #1
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8011f5a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8011f5e:	b29b      	uxth	r3, r3
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d1ea      	bne.n	8011f3a <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f64:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f66:	e852 3f00 	ldrex	r3, [r2]
 8011f6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f6e:	e842 3100 	strex	r1, r3, [r2]
 8011f72:	2900      	cmp	r1, #0
 8011f74:	d1f6      	bne.n	8011f64 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f76:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f78:	f102 0308 	add.w	r3, r2, #8
 8011f7c:	e853 3f00 	ldrex	r3, [r3]
 8011f80:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f84:	3208      	adds	r2, #8
 8011f86:	e842 3100 	strex	r1, r3, [r2]
 8011f8a:	2900      	cmp	r1, #0
 8011f8c:	d1f3      	bne.n	8011f76 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8011f8e:	2320      	movs	r3, #32
 8011f90:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8011f94:	2300      	movs	r3, #0
 8011f96:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f98:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8011f9a:	2b01      	cmp	r3, #1
 8011f9c:	d116      	bne.n	8011fcc <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fa2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fa4:	e852 3f00 	ldrex	r3, [r2]
 8011fa8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fac:	e842 3100 	strex	r1, r3, [r2]
 8011fb0:	2900      	cmp	r1, #0
 8011fb2:	d1f6      	bne.n	8011fa2 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011fb4:	6803      	ldr	r3, [r0, #0]
 8011fb6:	69da      	ldr	r2, [r3, #28]
 8011fb8:	f012 0f10 	tst.w	r2, #16
 8011fbc:	d001      	beq.n	8011fc2 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011fbe:	2210      	movs	r2, #16
 8011fc0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011fc2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8011fc6:	f7ff fdb8 	bl	8011b3a <HAL_UARTEx_RxEventCallback>
 8011fca:	e7b6      	b.n	8011f3a <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8011fcc:	f7f5 fc32 	bl	8007834 <HAL_UART_RxCpltCallback>
 8011fd0:	e7b3      	b.n	8011f3a <UART_RxISR_16BIT+0x18>
	...

08011fd4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8011fd8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011fdc:	6803      	ldr	r3, [r0, #0]
 8011fde:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011fe0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011fe4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011fe8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8011fec:	2a22      	cmp	r2, #34	; 0x22
 8011fee:	d005      	beq.n	8011ffc <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011ff0:	699a      	ldr	r2, [r3, #24]
 8011ff2:	f042 0208 	orr.w	r2, r2, #8
 8011ff6:	619a      	str	r2, [r3, #24]
  }
}
 8011ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ffc:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8011ffe:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012002:	e008      	b.n	8012016 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012004:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8012008:	2b00      	cmp	r3, #0
 801200a:	d14c      	bne.n	80120a6 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 801200c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8012010:	b29b      	uxth	r3, r3
 8012012:	2b00      	cmp	r3, #0
 8012014:	d04e      	beq.n	80120b4 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012016:	2f00      	cmp	r7, #0
 8012018:	f000 8087 	beq.w	801212a <UART_RxISR_8BIT_FIFOEN+0x156>
 801201c:	f015 0f20 	tst.w	r5, #32
 8012020:	f000 8083 	beq.w	801212a <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012024:	6823      	ldr	r3, [r4, #0]
 8012026:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012028:	b2f3      	uxtb	r3, r6
 801202a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801202c:	400b      	ands	r3, r1
 801202e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8012030:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012032:	3301      	adds	r3, #1
 8012034:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8012036:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 801203a:	b29b      	uxth	r3, r3
 801203c:	3b01      	subs	r3, #1
 801203e:	b29b      	uxth	r3, r3
 8012040:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012044:	6823      	ldr	r3, [r4, #0]
 8012046:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012048:	f015 0f07 	tst.w	r5, #7
 801204c:	d0de      	beq.n	801200c <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801204e:	f015 0f01 	tst.w	r5, #1
 8012052:	d009      	beq.n	8012068 <UART_RxISR_8BIT_FIFOEN+0x94>
 8012054:	f419 7f80 	tst.w	r9, #256	; 0x100
 8012058:	d006      	beq.n	8012068 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801205a:	2201      	movs	r2, #1
 801205c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801205e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8012062:	4313      	orrs	r3, r2
 8012064:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012068:	f015 0f02 	tst.w	r5, #2
 801206c:	d00b      	beq.n	8012086 <UART_RxISR_8BIT_FIFOEN+0xb2>
 801206e:	f018 0f01 	tst.w	r8, #1
 8012072:	d008      	beq.n	8012086 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012074:	6823      	ldr	r3, [r4, #0]
 8012076:	2202      	movs	r2, #2
 8012078:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801207a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 801207e:	f043 0304 	orr.w	r3, r3, #4
 8012082:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012086:	f015 0f04 	tst.w	r5, #4
 801208a:	d0bb      	beq.n	8012004 <UART_RxISR_8BIT_FIFOEN+0x30>
 801208c:	f018 0f01 	tst.w	r8, #1
 8012090:	d0b8      	beq.n	8012004 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012092:	6823      	ldr	r3, [r4, #0]
 8012094:	2204      	movs	r2, #4
 8012096:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012098:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 801209c:	f043 0302 	orr.w	r3, r3, #2
 80120a0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80120a4:	e7ae      	b.n	8012004 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80120a6:	4620      	mov	r0, r4
 80120a8:	f7ff fd10 	bl	8011acc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120ac:	2300      	movs	r3, #0
 80120ae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80120b2:	e7ab      	b.n	801200c <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80120b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120b6:	e852 3f00 	ldrex	r3, [r2]
 80120ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120be:	e842 3100 	strex	r1, r3, [r2]
 80120c2:	2900      	cmp	r1, #0
 80120c4:	d1f6      	bne.n	80120b4 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80120c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120c8:	f102 0308 	add.w	r3, r2, #8
 80120cc:	e853 3f00 	ldrex	r3, [r3]
 80120d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80120d4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120d8:	3208      	adds	r2, #8
 80120da:	e842 3100 	strex	r1, r3, [r2]
 80120de:	2900      	cmp	r1, #0
 80120e0:	d1f1      	bne.n	80120c6 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80120e2:	2320      	movs	r3, #32
 80120e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80120e8:	2300      	movs	r3, #0
 80120ea:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80120ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80120ee:	2b01      	cmp	r3, #1
 80120f0:	d003      	beq.n	80120fa <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 80120f2:	4620      	mov	r0, r4
 80120f4:	f7f5 fb9e 	bl	8007834 <HAL_UART_RxCpltCallback>
 80120f8:	e78d      	b.n	8012016 <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120fa:	2300      	movs	r3, #0
 80120fc:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012100:	e852 3f00 	ldrex	r3, [r2]
 8012104:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012108:	e842 3100 	strex	r1, r3, [r2]
 801210c:	2900      	cmp	r1, #0
 801210e:	d1f6      	bne.n	80120fe <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012110:	6823      	ldr	r3, [r4, #0]
 8012112:	69da      	ldr	r2, [r3, #28]
 8012114:	f012 0f10 	tst.w	r2, #16
 8012118:	d001      	beq.n	801211e <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801211a:	2210      	movs	r2, #16
 801211c:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801211e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8012122:	4620      	mov	r0, r4
 8012124:	f7ff fd09 	bl	8011b3a <HAL_UARTEx_RxEventCallback>
 8012128:	e775      	b.n	8012016 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 801212a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 801212e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012130:	2b00      	cmp	r3, #0
 8012132:	f43f af61 	beq.w	8011ff8 <UART_RxISR_8BIT_FIFOEN+0x24>
 8012136:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 801213a:	429a      	cmp	r2, r3
 801213c:	f67f af5c 	bls.w	8011ff8 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012140:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012142:	f102 0308 	add.w	r3, r2, #8
 8012146:	e853 3f00 	ldrex	r3, [r3]
 801214a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801214e:	3208      	adds	r2, #8
 8012150:	e842 3100 	strex	r1, r3, [r2]
 8012154:	2900      	cmp	r1, #0
 8012156:	d1f3      	bne.n	8012140 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8012158:	4b05      	ldr	r3, [pc, #20]	; (8012170 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 801215a:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801215c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801215e:	e852 3f00 	ldrex	r3, [r2]
 8012162:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012166:	e842 3100 	strex	r1, r3, [r2]
 801216a:	2900      	cmp	r1, #0
 801216c:	d1f6      	bne.n	801215c <UART_RxISR_8BIT_FIFOEN+0x188>
 801216e:	e743      	b.n	8011ff8 <UART_RxISR_8BIT_FIFOEN+0x24>
 8012170:	08011e71 	.word	0x08011e71

08012174 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012178:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801217c:	6803      	ldr	r3, [r0, #0]
 801217e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012180:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012184:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012188:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 801218c:	2a22      	cmp	r2, #34	; 0x22
 801218e:	d005      	beq.n	801219c <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012190:	699a      	ldr	r2, [r3, #24]
 8012192:	f042 0208 	orr.w	r2, r2, #8
 8012196:	619a      	str	r2, [r3, #24]
  }
}
 8012198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801219c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 801219e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80121a2:	e008      	b.n	80121b6 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80121a4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d14b      	bne.n	8012244 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80121ac:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80121b0:	b29b      	uxth	r3, r3
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d04d      	beq.n	8012252 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80121b6:	2f00      	cmp	r7, #0
 80121b8:	f000 8086 	beq.w	80122c8 <UART_RxISR_16BIT_FIFOEN+0x154>
 80121bc:	f015 0f20 	tst.w	r5, #32
 80121c0:	f000 8082 	beq.w	80122c8 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80121c4:	6823      	ldr	r3, [r4, #0]
 80121c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80121c8:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80121ca:	4033      	ands	r3, r6
 80121cc:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80121ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80121d0:	3302      	adds	r3, #2
 80121d2:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80121d4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80121d8:	b29b      	uxth	r3, r3
 80121da:	3b01      	subs	r3, #1
 80121dc:	b29b      	uxth	r3, r3
 80121de:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80121e2:	6823      	ldr	r3, [r4, #0]
 80121e4:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80121e6:	f015 0f07 	tst.w	r5, #7
 80121ea:	d0df      	beq.n	80121ac <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80121ec:	f015 0f01 	tst.w	r5, #1
 80121f0:	d009      	beq.n	8012206 <UART_RxISR_16BIT_FIFOEN+0x92>
 80121f2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80121f6:	d006      	beq.n	8012206 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80121f8:	2201      	movs	r2, #1
 80121fa:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80121fc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8012200:	4313      	orrs	r3, r2
 8012202:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012206:	f015 0f02 	tst.w	r5, #2
 801220a:	d00b      	beq.n	8012224 <UART_RxISR_16BIT_FIFOEN+0xb0>
 801220c:	f018 0f01 	tst.w	r8, #1
 8012210:	d008      	beq.n	8012224 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012212:	6823      	ldr	r3, [r4, #0]
 8012214:	2202      	movs	r2, #2
 8012216:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012218:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 801221c:	f043 0304 	orr.w	r3, r3, #4
 8012220:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012224:	f015 0f04 	tst.w	r5, #4
 8012228:	d0bc      	beq.n	80121a4 <UART_RxISR_16BIT_FIFOEN+0x30>
 801222a:	f018 0f01 	tst.w	r8, #1
 801222e:	d0b9      	beq.n	80121a4 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012230:	6823      	ldr	r3, [r4, #0]
 8012232:	2204      	movs	r2, #4
 8012234:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012236:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 801223a:	f043 0302 	orr.w	r3, r3, #2
 801223e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8012242:	e7af      	b.n	80121a4 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8012244:	4620      	mov	r0, r4
 8012246:	f7ff fc41 	bl	8011acc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801224a:	2300      	movs	r3, #0
 801224c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8012250:	e7ac      	b.n	80121ac <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012252:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012254:	e852 3f00 	ldrex	r3, [r2]
 8012258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801225c:	e842 3100 	strex	r1, r3, [r2]
 8012260:	2900      	cmp	r1, #0
 8012262:	d1f6      	bne.n	8012252 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012264:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012266:	f102 0308 	add.w	r3, r2, #8
 801226a:	e853 3f00 	ldrex	r3, [r3]
 801226e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012272:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012276:	3208      	adds	r2, #8
 8012278:	e842 3100 	strex	r1, r3, [r2]
 801227c:	2900      	cmp	r1, #0
 801227e:	d1f1      	bne.n	8012264 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8012280:	2320      	movs	r3, #32
 8012282:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8012286:	2300      	movs	r3, #0
 8012288:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801228a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801228c:	2b01      	cmp	r3, #1
 801228e:	d003      	beq.n	8012298 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 8012290:	4620      	mov	r0, r4
 8012292:	f7f5 facf 	bl	8007834 <HAL_UART_RxCpltCallback>
 8012296:	e78e      	b.n	80121b6 <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012298:	2300      	movs	r3, #0
 801229a:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801229c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801229e:	e852 3f00 	ldrex	r3, [r2]
 80122a2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122a6:	e842 3100 	strex	r1, r3, [r2]
 80122aa:	2900      	cmp	r1, #0
 80122ac:	d1f6      	bne.n	801229c <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80122ae:	6823      	ldr	r3, [r4, #0]
 80122b0:	69da      	ldr	r2, [r3, #28]
 80122b2:	f012 0f10 	tst.w	r2, #16
 80122b6:	d001      	beq.n	80122bc <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80122b8:	2210      	movs	r2, #16
 80122ba:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80122bc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80122c0:	4620      	mov	r0, r4
 80122c2:	f7ff fc3a 	bl	8011b3a <HAL_UARTEx_RxEventCallback>
 80122c6:	e776      	b.n	80121b6 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80122c8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80122cc:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	f43f af62 	beq.w	8012198 <UART_RxISR_16BIT_FIFOEN+0x24>
 80122d4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80122d8:	429a      	cmp	r2, r3
 80122da:	f67f af5d 	bls.w	8012198 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80122de:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122e0:	f102 0308 	add.w	r3, r2, #8
 80122e4:	e853 3f00 	ldrex	r3, [r3]
 80122e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122ec:	3208      	adds	r2, #8
 80122ee:	e842 3100 	strex	r1, r3, [r2]
 80122f2:	2900      	cmp	r1, #0
 80122f4:	d1f3      	bne.n	80122de <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 80122f6:	4b06      	ldr	r3, [pc, #24]	; (8012310 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 80122f8:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80122fa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122fc:	e852 3f00 	ldrex	r3, [r2]
 8012300:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012304:	e842 3100 	strex	r1, r3, [r2]
 8012308:	2900      	cmp	r1, #0
 801230a:	d1f6      	bne.n	80122fa <UART_RxISR_16BIT_FIFOEN+0x186>
 801230c:	e744      	b.n	8012198 <UART_RxISR_16BIT_FIFOEN+0x24>
 801230e:	bf00      	nop
 8012310:	08011f23 	.word	0x08011f23

08012314 <UART_SetConfig>:
{
 8012314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012318:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 801231a:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801231c:	6883      	ldr	r3, [r0, #8]
 801231e:	6902      	ldr	r2, [r0, #16]
 8012320:	4313      	orrs	r3, r2
 8012322:	6942      	ldr	r2, [r0, #20]
 8012324:	4313      	orrs	r3, r2
 8012326:	69c2      	ldr	r2, [r0, #28]
 8012328:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801232a:	6808      	ldr	r0, [r1, #0]
 801232c:	4aa1      	ldr	r2, [pc, #644]	; (80125b4 <UART_SetConfig+0x2a0>)
 801232e:	4002      	ands	r2, r0
 8012330:	4313      	orrs	r3, r2
 8012332:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012334:	6822      	ldr	r2, [r4, #0]
 8012336:	6853      	ldr	r3, [r2, #4]
 8012338:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801233c:	68e1      	ldr	r1, [r4, #12]
 801233e:	430b      	orrs	r3, r1
 8012340:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012342:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012344:	6822      	ldr	r2, [r4, #0]
 8012346:	4b9c      	ldr	r3, [pc, #624]	; (80125b8 <UART_SetConfig+0x2a4>)
 8012348:	429a      	cmp	r2, r3
 801234a:	d001      	beq.n	8012350 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 801234c:	6a23      	ldr	r3, [r4, #32]
 801234e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012350:	6893      	ldr	r3, [r2, #8]
 8012352:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8012356:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801235a:	430b      	orrs	r3, r1
 801235c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801235e:	6822      	ldr	r2, [r4, #0]
 8012360:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8012362:	f023 030f 	bic.w	r3, r3, #15
 8012366:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012368:	430b      	orrs	r3, r1
 801236a:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 801236c:	6822      	ldr	r2, [r4, #0]
 801236e:	4b93      	ldr	r3, [pc, #588]	; (80125bc <UART_SetConfig+0x2a8>)
 8012370:	429a      	cmp	r2, r3
 8012372:	d01c      	beq.n	80123ae <UART_SetConfig+0x9a>
 8012374:	4b92      	ldr	r3, [pc, #584]	; (80125c0 <UART_SetConfig+0x2ac>)
 8012376:	429a      	cmp	r2, r3
 8012378:	d031      	beq.n	80123de <UART_SetConfig+0xca>
 801237a:	4b8f      	ldr	r3, [pc, #572]	; (80125b8 <UART_SetConfig+0x2a4>)
 801237c:	429a      	cmp	r2, r3
 801237e:	d04b      	beq.n	8012418 <UART_SetConfig+0x104>
 8012380:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8012382:	498d      	ldr	r1, [pc, #564]	; (80125b8 <UART_SetConfig+0x2a4>)
 8012384:	428a      	cmp	r2, r1
 8012386:	d068      	beq.n	801245a <UART_SetConfig+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012388:	69e0      	ldr	r0, [r4, #28]
 801238a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801238e:	f000 80a7 	beq.w	80124e0 <UART_SetConfig+0x1cc>
    switch (clocksource)
 8012392:	2b08      	cmp	r3, #8
 8012394:	f200 8122 	bhi.w	80125dc <UART_SetConfig+0x2c8>
 8012398:	e8df f013 	tbh	[pc, r3, lsl #1]
 801239c:	00f800d5 	.word	0x00f800d5
 80123a0:	012000d3 	.word	0x012000d3
 80123a4:	012000fb 	.word	0x012000fb
 80123a8:	01200120 	.word	0x01200120
 80123ac:	00fe      	.short	0x00fe
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80123ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80123b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80123b6:	f003 0303 	and.w	r3, r3, #3
 80123ba:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80123be:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80123c2:	2b03      	cmp	r3, #3
 80123c4:	d809      	bhi.n	80123da <UART_SetConfig+0xc6>
 80123c6:	e8df f003 	tbb	[pc, r3]
 80123ca:	0402      	.short	0x0402
 80123cc:	063c      	.short	0x063c
 80123ce:	2301      	movs	r3, #1
 80123d0:	e7d7      	b.n	8012382 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80123d2:	2304      	movs	r3, #4
 80123d4:	e7d5      	b.n	8012382 <UART_SetConfig+0x6e>
 80123d6:	2308      	movs	r3, #8
 80123d8:	e7d3      	b.n	8012382 <UART_SetConfig+0x6e>
 80123da:	2310      	movs	r3, #16
 80123dc:	e7d1      	b.n	8012382 <UART_SetConfig+0x6e>
 80123de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80123e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80123e6:	f003 030c 	and.w	r3, r3, #12
 80123ea:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80123ee:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80123f2:	2b0c      	cmp	r3, #12
 80123f4:	d80e      	bhi.n	8012414 <UART_SetConfig+0x100>
 80123f6:	e8df f003 	tbb	[pc, r3]
 80123fa:	0d07      	.short	0x0d07
 80123fc:	0d090d0d 	.word	0x0d090d0d
 8012400:	0d260d0d 	.word	0x0d260d0d
 8012404:	0d0d      	.short	0x0d0d
 8012406:	0b          	.byte	0x0b
 8012407:	00          	.byte	0x00
 8012408:	2300      	movs	r3, #0
 801240a:	e7ba      	b.n	8012382 <UART_SetConfig+0x6e>
 801240c:	2304      	movs	r3, #4
 801240e:	e7b8      	b.n	8012382 <UART_SetConfig+0x6e>
 8012410:	2308      	movs	r3, #8
 8012412:	e7b6      	b.n	8012382 <UART_SetConfig+0x6e>
 8012414:	2310      	movs	r3, #16
 8012416:	e7b4      	b.n	8012382 <UART_SetConfig+0x6e>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8012418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801241c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012420:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8012424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012428:	d00f      	beq.n	801244a <UART_SetConfig+0x136>
 801242a:	d805      	bhi.n	8012438 <UART_SetConfig+0x124>
 801242c:	b17b      	cbz	r3, 801244e <UART_SetConfig+0x13a>
 801242e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012432:	d10e      	bne.n	8012452 <UART_SetConfig+0x13e>
 8012434:	2304      	movs	r3, #4
 8012436:	e7a4      	b.n	8012382 <UART_SetConfig+0x6e>
 8012438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801243c:	d10b      	bne.n	8012456 <UART_SetConfig+0x142>
 801243e:	2308      	movs	r3, #8
 8012440:	e79f      	b.n	8012382 <UART_SetConfig+0x6e>
 8012442:	2302      	movs	r3, #2
 8012444:	e79d      	b.n	8012382 <UART_SetConfig+0x6e>
 8012446:	2302      	movs	r3, #2
 8012448:	e79b      	b.n	8012382 <UART_SetConfig+0x6e>
 801244a:	2302      	movs	r3, #2
 801244c:	e799      	b.n	8012382 <UART_SetConfig+0x6e>
 801244e:	2300      	movs	r3, #0
 8012450:	e797      	b.n	8012382 <UART_SetConfig+0x6e>
 8012452:	2310      	movs	r3, #16
 8012454:	e795      	b.n	8012382 <UART_SetConfig+0x6e>
 8012456:	2310      	movs	r3, #16
 8012458:	e793      	b.n	8012382 <UART_SetConfig+0x6e>
    switch (clocksource)
 801245a:	2b08      	cmp	r3, #8
 801245c:	f200 809f 	bhi.w	801259e <UART_SetConfig+0x28a>
 8012460:	e8df f003 	tbb	[pc, r3]
 8012464:	9d3c9d08 	.word	0x9d3c9d08
 8012468:	9d9d9d39 	.word	0x9d9d9d39
 801246c:	05          	.byte	0x05
 801246d:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 801246e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8012472:	e004      	b.n	801247e <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8012474:	f7fe fb14 	bl	8010aa0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8012478:	2800      	cmp	r0, #0
 801247a:	f000 8092 	beq.w	80125a2 <UART_SetConfig+0x28e>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801247e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8012480:	4b50      	ldr	r3, [pc, #320]	; (80125c4 <UART_SetConfig+0x2b0>)
 8012482:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8012486:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801248a:	6865      	ldr	r5, [r4, #4]
 801248c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8012490:	4299      	cmp	r1, r3
 8012492:	f200 8088 	bhi.w	80125a6 <UART_SetConfig+0x292>
 8012496:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 801249a:	f200 8086 	bhi.w	80125aa <UART_SetConfig+0x296>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801249e:	f04f 0800 	mov.w	r8, #0
 80124a2:	b292      	uxth	r2, r2
 80124a4:	2300      	movs	r3, #0
 80124a6:	4641      	mov	r1, r8
 80124a8:	f7f4 f87c 	bl	80065a4 <__aeabi_uldivmod>
 80124ac:	020f      	lsls	r7, r1, #8
 80124ae:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80124b2:	0206      	lsls	r6, r0, #8
 80124b4:	0868      	lsrs	r0, r5, #1
 80124b6:	462a      	mov	r2, r5
 80124b8:	4643      	mov	r3, r8
 80124ba:	1830      	adds	r0, r6, r0
 80124bc:	f147 0100 	adc.w	r1, r7, #0
 80124c0:	f7f4 f870 	bl	80065a4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80124c4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80124c8:	4b3f      	ldr	r3, [pc, #252]	; (80125c8 <UART_SetConfig+0x2b4>)
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d86f      	bhi.n	80125ae <UART_SetConfig+0x29a>
          huart->Instance->BRR = usartdiv;
 80124ce:	6823      	ldr	r3, [r4, #0]
 80124d0:	60d8      	str	r0, [r3, #12]
 80124d2:	4640      	mov	r0, r8
 80124d4:	e050      	b.n	8012578 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetSysClockFreq();
 80124d6:	f7fd fdfd 	bl	80100d4 <HAL_RCC_GetSysClockFreq>
        break;
 80124da:	e7cd      	b.n	8012478 <UART_SetConfig+0x164>
        pclk = (uint32_t) HSI_VALUE;
 80124dc:	483b      	ldr	r0, [pc, #236]	; (80125cc <UART_SetConfig+0x2b8>)
 80124de:	e7ce      	b.n	801247e <UART_SetConfig+0x16a>
    switch (clocksource)
 80124e0:	2b08      	cmp	r3, #8
 80124e2:	d875      	bhi.n	80125d0 <UART_SetConfig+0x2bc>
 80124e4:	e8df f003 	tbb	[pc, r3]
 80124e8:	74052707 	.word	0x74052707
 80124ec:	7474742a 	.word	0x7474742a
 80124f0:	0b          	.byte	0x0b
 80124f1:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80124f2:	4836      	ldr	r0, [pc, #216]	; (80125cc <UART_SetConfig+0x2b8>)
 80124f4:	e003      	b.n	80124fe <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 80124f6:	f7fe fad3 	bl	8010aa0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80124fa:	2800      	cmp	r0, #0
 80124fc:	d06a      	beq.n	80125d4 <UART_SetConfig+0x2c0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80124fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8012500:	4b30      	ldr	r3, [pc, #192]	; (80125c4 <UART_SetConfig+0x2b0>)
 8012502:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012506:	fbb0 f0f3 	udiv	r0, r0, r3
 801250a:	6862      	ldr	r2, [r4, #4]
 801250c:	0853      	lsrs	r3, r2, #1
 801250e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012512:	fbb0 f0f2 	udiv	r0, r0, r2
 8012516:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012518:	f1a0 0210 	sub.w	r2, r0, #16
 801251c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8012520:	429a      	cmp	r2, r3
 8012522:	d859      	bhi.n	80125d8 <UART_SetConfig+0x2c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012524:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012528:	f3c0 0042 	ubfx	r0, r0, #1, #3
 801252c:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 801252e:	6823      	ldr	r3, [r4, #0]
 8012530:	60d8      	str	r0, [r3, #12]
 8012532:	2000      	movs	r0, #0
 8012534:	e020      	b.n	8012578 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetPCLK2Freq();
 8012536:	f7fe fac3 	bl	8010ac0 <HAL_RCC_GetPCLK2Freq>
        break;
 801253a:	e7de      	b.n	80124fa <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetSysClockFreq();
 801253c:	f7fd fdca 	bl	80100d4 <HAL_RCC_GetSysClockFreq>
        break;
 8012540:	e7db      	b.n	80124fa <UART_SetConfig+0x1e6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012542:	4822      	ldr	r0, [pc, #136]	; (80125cc <UART_SetConfig+0x2b8>)
 8012544:	e003      	b.n	801254e <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8012546:	f7fe faab 	bl	8010aa0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 801254a:	2800      	cmp	r0, #0
 801254c:	d048      	beq.n	80125e0 <UART_SetConfig+0x2cc>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801254e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8012550:	4b1c      	ldr	r3, [pc, #112]	; (80125c4 <UART_SetConfig+0x2b0>)
 8012552:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012556:	fbb0 f0f3 	udiv	r0, r0, r3
 801255a:	6863      	ldr	r3, [r4, #4]
 801255c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8012560:	fbb0 f0f3 	udiv	r0, r0, r3
 8012564:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012566:	f1a0 0210 	sub.w	r2, r0, #16
 801256a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 801256e:	429a      	cmp	r2, r3
 8012570:	d838      	bhi.n	80125e4 <UART_SetConfig+0x2d0>
        huart->Instance->BRR = usartdiv;
 8012572:	6823      	ldr	r3, [r4, #0]
 8012574:	60d8      	str	r0, [r3, #12]
 8012576:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8012578:	2301      	movs	r3, #1
 801257a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801257e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8012582:	2300      	movs	r3, #0
 8012584:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8012586:	6763      	str	r3, [r4, #116]	; 0x74
}
 8012588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 801258c:	f7fe fa98 	bl	8010ac0 <HAL_RCC_GetPCLK2Freq>
        break;
 8012590:	e7db      	b.n	801254a <UART_SetConfig+0x236>
        pclk = HAL_RCC_GetSysClockFreq();
 8012592:	f7fd fd9f 	bl	80100d4 <HAL_RCC_GetSysClockFreq>
        break;
 8012596:	e7d8      	b.n	801254a <UART_SetConfig+0x236>
        pclk = (uint32_t) LSE_VALUE;
 8012598:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801259c:	e7d7      	b.n	801254e <UART_SetConfig+0x23a>
  if (UART_INSTANCE_LOWPOWER(huart))
 801259e:	2001      	movs	r0, #1
 80125a0:	e7ea      	b.n	8012578 <UART_SetConfig+0x264>
 80125a2:	2000      	movs	r0, #0
 80125a4:	e7e8      	b.n	8012578 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 80125a6:	2001      	movs	r0, #1
 80125a8:	e7e6      	b.n	8012578 <UART_SetConfig+0x264>
 80125aa:	2001      	movs	r0, #1
 80125ac:	e7e4      	b.n	8012578 <UART_SetConfig+0x264>
          ret = HAL_ERROR;
 80125ae:	2001      	movs	r0, #1
 80125b0:	e7e2      	b.n	8012578 <UART_SetConfig+0x264>
 80125b2:	bf00      	nop
 80125b4:	cfff69f3 	.word	0xcfff69f3
 80125b8:	40008000 	.word	0x40008000
 80125bc:	40013800 	.word	0x40013800
 80125c0:	40004400 	.word	0x40004400
 80125c4:	080280f4 	.word	0x080280f4
 80125c8:	000ffcff 	.word	0x000ffcff
 80125cc:	00f42400 	.word	0x00f42400
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80125d0:	2001      	movs	r0, #1
 80125d2:	e7d1      	b.n	8012578 <UART_SetConfig+0x264>
 80125d4:	2000      	movs	r0, #0
 80125d6:	e7cf      	b.n	8012578 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 80125d8:	2001      	movs	r0, #1
 80125da:	e7cd      	b.n	8012578 <UART_SetConfig+0x264>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80125dc:	2001      	movs	r0, #1
 80125de:	e7cb      	b.n	8012578 <UART_SetConfig+0x264>
 80125e0:	2000      	movs	r0, #0
 80125e2:	e7c9      	b.n	8012578 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 80125e4:	2001      	movs	r0, #1
 80125e6:	e7c7      	b.n	8012578 <UART_SetConfig+0x264>

080125e8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80125e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80125ea:	f013 0f01 	tst.w	r3, #1
 80125ee:	d006      	beq.n	80125fe <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80125f0:	6802      	ldr	r2, [r0, #0]
 80125f2:	6853      	ldr	r3, [r2, #4]
 80125f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80125f8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80125fa:	430b      	orrs	r3, r1
 80125fc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80125fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012600:	f013 0f02 	tst.w	r3, #2
 8012604:	d006      	beq.n	8012614 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012606:	6802      	ldr	r2, [r0, #0]
 8012608:	6853      	ldr	r3, [r2, #4]
 801260a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801260e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012610:	430b      	orrs	r3, r1
 8012612:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012614:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012616:	f013 0f04 	tst.w	r3, #4
 801261a:	d006      	beq.n	801262a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801261c:	6802      	ldr	r2, [r0, #0]
 801261e:	6853      	ldr	r3, [r2, #4]
 8012620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012624:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8012626:	430b      	orrs	r3, r1
 8012628:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801262a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801262c:	f013 0f08 	tst.w	r3, #8
 8012630:	d006      	beq.n	8012640 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012632:	6802      	ldr	r2, [r0, #0]
 8012634:	6853      	ldr	r3, [r2, #4]
 8012636:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801263a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 801263c:	430b      	orrs	r3, r1
 801263e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012640:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012642:	f013 0f10 	tst.w	r3, #16
 8012646:	d006      	beq.n	8012656 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012648:	6802      	ldr	r2, [r0, #0]
 801264a:	6893      	ldr	r3, [r2, #8]
 801264c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012650:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8012652:	430b      	orrs	r3, r1
 8012654:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012656:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012658:	f013 0f20 	tst.w	r3, #32
 801265c:	d006      	beq.n	801266c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801265e:	6802      	ldr	r2, [r0, #0]
 8012660:	6893      	ldr	r3, [r2, #8]
 8012662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012666:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8012668:	430b      	orrs	r3, r1
 801266a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801266c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801266e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012672:	d00a      	beq.n	801268a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012674:	6802      	ldr	r2, [r0, #0]
 8012676:	6853      	ldr	r3, [r2, #4]
 8012678:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801267c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 801267e:	430b      	orrs	r3, r1
 8012680:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012682:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8012684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012688:	d00b      	beq.n	80126a2 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801268a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801268c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012690:	d006      	beq.n	80126a0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012692:	6802      	ldr	r2, [r0, #0]
 8012694:	6853      	ldr	r3, [r2, #4]
 8012696:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 801269a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801269c:	430b      	orrs	r3, r1
 801269e:	6053      	str	r3, [r2, #4]
}
 80126a0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80126a2:	6802      	ldr	r2, [r0, #0]
 80126a4:	6853      	ldr	r3, [r2, #4]
 80126a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80126aa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80126ac:	430b      	orrs	r3, r1
 80126ae:	6053      	str	r3, [r2, #4]
 80126b0:	e7eb      	b.n	801268a <UART_AdvFeatureConfig+0xa2>

080126b2 <UART_WaitOnFlagUntilTimeout>:
{
 80126b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126b6:	4605      	mov	r5, r0
 80126b8:	460f      	mov	r7, r1
 80126ba:	4616      	mov	r6, r2
 80126bc:	4699      	mov	r9, r3
 80126be:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80126c2:	682c      	ldr	r4, [r5, #0]
 80126c4:	69e4      	ldr	r4, [r4, #28]
 80126c6:	ea37 0304 	bics.w	r3, r7, r4
 80126ca:	bf0c      	ite	eq
 80126cc:	2401      	moveq	r4, #1
 80126ce:	2400      	movne	r4, #0
 80126d0:	42b4      	cmp	r4, r6
 80126d2:	d157      	bne.n	8012784 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 80126d4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80126d8:	d0f3      	beq.n	80126c2 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80126da:	f7f4 fe0d 	bl	80072f8 <HAL_GetTick>
 80126de:	eba0 0009 	sub.w	r0, r0, r9
 80126e2:	4540      	cmp	r0, r8
 80126e4:	d82f      	bhi.n	8012746 <UART_WaitOnFlagUntilTimeout+0x94>
 80126e6:	f1b8 0f00 	cmp.w	r8, #0
 80126ea:	d02c      	beq.n	8012746 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80126ec:	682b      	ldr	r3, [r5, #0]
 80126ee:	681a      	ldr	r2, [r3, #0]
 80126f0:	f012 0f04 	tst.w	r2, #4
 80126f4:	d0e5      	beq.n	80126c2 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80126f6:	69da      	ldr	r2, [r3, #28]
 80126f8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80126fc:	d0e1      	beq.n	80126c2 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80126fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012702:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8012704:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012706:	e852 3f00 	ldrex	r3, [r2]
 801270a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801270e:	e842 3100 	strex	r1, r3, [r2]
 8012712:	2900      	cmp	r1, #0
 8012714:	d1f6      	bne.n	8012704 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012716:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012718:	f102 0308 	add.w	r3, r2, #8
 801271c:	e853 3f00 	ldrex	r3, [r3]
 8012720:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012724:	3208      	adds	r2, #8
 8012726:	e842 3100 	strex	r1, r3, [r2]
 801272a:	2900      	cmp	r1, #0
 801272c:	d1f3      	bne.n	8012716 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 801272e:	2320      	movs	r3, #32
 8012730:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8012734:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012738:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 801273c:	2300      	movs	r3, #0
 801273e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8012742:	2003      	movs	r0, #3
 8012744:	e01f      	b.n	8012786 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8012746:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012748:	e852 3f00 	ldrex	r3, [r2]
 801274c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012750:	e842 3100 	strex	r1, r3, [r2]
 8012754:	2900      	cmp	r1, #0
 8012756:	d1f6      	bne.n	8012746 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012758:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801275a:	f102 0308 	add.w	r3, r2, #8
 801275e:	e853 3f00 	ldrex	r3, [r3]
 8012762:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012766:	3208      	adds	r2, #8
 8012768:	e842 3100 	strex	r1, r3, [r2]
 801276c:	2900      	cmp	r1, #0
 801276e:	d1f3      	bne.n	8012758 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8012770:	2320      	movs	r3, #32
 8012772:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8012776:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 801277a:	2300      	movs	r3, #0
 801277c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8012780:	2003      	movs	r0, #3
 8012782:	e000      	b.n	8012786 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8012784:	2000      	movs	r0, #0
}
 8012786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801278a <UART_CheckIdleState>:
{
 801278a:	b530      	push	{r4, r5, lr}
 801278c:	b083      	sub	sp, #12
 801278e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012790:	2300      	movs	r3, #0
 8012792:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8012796:	f7f4 fdaf 	bl	80072f8 <HAL_GetTick>
 801279a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801279c:	6823      	ldr	r3, [r4, #0]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	f013 0f08 	tst.w	r3, #8
 80127a4:	d10f      	bne.n	80127c6 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80127a6:	6823      	ldr	r3, [r4, #0]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	f013 0f04 	tst.w	r3, #4
 80127ae:	d118      	bne.n	80127e2 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80127b0:	2320      	movs	r3, #32
 80127b2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80127b6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127ba:	2000      	movs	r0, #0
 80127bc:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80127be:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80127c2:	b003      	add	sp, #12
 80127c4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80127c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80127ca:	9300      	str	r3, [sp, #0]
 80127cc:	4603      	mov	r3, r0
 80127ce:	2200      	movs	r2, #0
 80127d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80127d4:	4620      	mov	r0, r4
 80127d6:	f7ff ff6c 	bl	80126b2 <UART_WaitOnFlagUntilTimeout>
 80127da:	2800      	cmp	r0, #0
 80127dc:	d0e3      	beq.n	80127a6 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80127de:	2003      	movs	r0, #3
 80127e0:	e7ef      	b.n	80127c2 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80127e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80127e6:	9300      	str	r3, [sp, #0]
 80127e8:	462b      	mov	r3, r5
 80127ea:	2200      	movs	r2, #0
 80127ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80127f0:	4620      	mov	r0, r4
 80127f2:	f7ff ff5e 	bl	80126b2 <UART_WaitOnFlagUntilTimeout>
 80127f6:	2800      	cmp	r0, #0
 80127f8:	d0da      	beq.n	80127b0 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80127fa:	2003      	movs	r0, #3
 80127fc:	e7e1      	b.n	80127c2 <UART_CheckIdleState+0x38>

080127fe <HAL_UART_Init>:
  if (huart == NULL)
 80127fe:	b378      	cbz	r0, 8012860 <HAL_UART_Init+0x62>
{
 8012800:	b510      	push	{r4, lr}
 8012802:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8012804:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8012808:	b30b      	cbz	r3, 801284e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 801280a:	2324      	movs	r3, #36	; 0x24
 801280c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8012810:	6822      	ldr	r2, [r4, #0]
 8012812:	6813      	ldr	r3, [r2, #0]
 8012814:	f023 0301 	bic.w	r3, r3, #1
 8012818:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801281a:	4620      	mov	r0, r4
 801281c:	f7ff fd7a 	bl	8012314 <UART_SetConfig>
 8012820:	2801      	cmp	r0, #1
 8012822:	d013      	beq.n	801284c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012824:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012826:	b9bb      	cbnz	r3, 8012858 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012828:	6822      	ldr	r2, [r4, #0]
 801282a:	6853      	ldr	r3, [r2, #4]
 801282c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8012830:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012832:	6822      	ldr	r2, [r4, #0]
 8012834:	6893      	ldr	r3, [r2, #8]
 8012836:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 801283a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 801283c:	6822      	ldr	r2, [r4, #0]
 801283e:	6813      	ldr	r3, [r2, #0]
 8012840:	f043 0301 	orr.w	r3, r3, #1
 8012844:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8012846:	4620      	mov	r0, r4
 8012848:	f7ff ff9f 	bl	801278a <UART_CheckIdleState>
}
 801284c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 801284e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8012852:	f7f4 fef3 	bl	800763c <HAL_UART_MspInit>
 8012856:	e7d8      	b.n	801280a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8012858:	4620      	mov	r0, r4
 801285a:	f7ff fec5 	bl	80125e8 <UART_AdvFeatureConfig>
 801285e:	e7e3      	b.n	8012828 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8012860:	2001      	movs	r0, #1
}
 8012862:	4770      	bx	lr

08012864 <UART_Start_Receive_IT>:
{
 8012864:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8012866:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8012868:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 801286c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8012870:	2300      	movs	r3, #0
 8012872:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8012874:	6883      	ldr	r3, [r0, #8]
 8012876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801287a:	d006      	beq.n	801288a <UART_Start_Receive_IT+0x26>
 801287c:	b9a3      	cbnz	r3, 80128a8 <UART_Start_Receive_IT+0x44>
 801287e:	6903      	ldr	r3, [r0, #16]
 8012880:	b973      	cbnz	r3, 80128a0 <UART_Start_Receive_IT+0x3c>
 8012882:	23ff      	movs	r3, #255	; 0xff
 8012884:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8012888:	e014      	b.n	80128b4 <UART_Start_Receive_IT+0x50>
 801288a:	6903      	ldr	r3, [r0, #16]
 801288c:	b923      	cbnz	r3, 8012898 <UART_Start_Receive_IT+0x34>
 801288e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8012892:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8012896:	e00d      	b.n	80128b4 <UART_Start_Receive_IT+0x50>
 8012898:	23ff      	movs	r3, #255	; 0xff
 801289a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 801289e:	e009      	b.n	80128b4 <UART_Start_Receive_IT+0x50>
 80128a0:	237f      	movs	r3, #127	; 0x7f
 80128a2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80128a6:	e005      	b.n	80128b4 <UART_Start_Receive_IT+0x50>
 80128a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80128ac:	d02d      	beq.n	801290a <UART_Start_Receive_IT+0xa6>
 80128ae:	2300      	movs	r3, #0
 80128b0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128b4:	2300      	movs	r3, #0
 80128b6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80128ba:	2322      	movs	r3, #34	; 0x22
 80128bc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80128c0:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128c2:	f101 0308 	add.w	r3, r1, #8
 80128c6:	e853 3f00 	ldrex	r3, [r3]
 80128ca:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ce:	3108      	adds	r1, #8
 80128d0:	e841 3400 	strex	r4, r3, [r1]
 80128d4:	2c00      	cmp	r4, #0
 80128d6:	d1f3      	bne.n	80128c0 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80128d8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80128da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80128de:	d01e      	beq.n	801291e <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80128e0:	6883      	ldr	r3, [r0, #8]
 80128e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80128e6:	d043      	beq.n	8012970 <UART_Start_Receive_IT+0x10c>
      huart->RxISR = UART_RxISR_8BIT;
 80128e8:	4b24      	ldr	r3, [pc, #144]	; (801297c <UART_Start_Receive_IT+0x118>)
 80128ea:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80128ec:	2300      	movs	r3, #0
 80128ee:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80128f2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128f4:	e852 3f00 	ldrex	r3, [r2]
 80128f8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128fc:	e842 3100 	strex	r1, r3, [r2]
 8012900:	2900      	cmp	r1, #0
 8012902:	d1f6      	bne.n	80128f2 <UART_Start_Receive_IT+0x8e>
}
 8012904:	2000      	movs	r0, #0
 8012906:	bc10      	pop	{r4}
 8012908:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 801290a:	6903      	ldr	r3, [r0, #16]
 801290c:	b91b      	cbnz	r3, 8012916 <UART_Start_Receive_IT+0xb2>
 801290e:	237f      	movs	r3, #127	; 0x7f
 8012910:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8012914:	e7ce      	b.n	80128b4 <UART_Start_Receive_IT+0x50>
 8012916:	233f      	movs	r3, #63	; 0x3f
 8012918:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 801291c:	e7ca      	b.n	80128b4 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801291e:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8012922:	4293      	cmp	r3, r2
 8012924:	d8dc      	bhi.n	80128e0 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012926:	6883      	ldr	r3, [r0, #8]
 8012928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801292c:	d01a      	beq.n	8012964 <UART_Start_Receive_IT+0x100>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801292e:	4b14      	ldr	r3, [pc, #80]	; (8012980 <UART_Start_Receive_IT+0x11c>)
 8012930:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8012932:	2300      	movs	r3, #0
 8012934:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012938:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801293a:	e852 3f00 	ldrex	r3, [r2]
 801293e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012942:	e842 3100 	strex	r1, r3, [r2]
 8012946:	2900      	cmp	r1, #0
 8012948:	d1f6      	bne.n	8012938 <UART_Start_Receive_IT+0xd4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801294a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801294c:	f102 0308 	add.w	r3, r2, #8
 8012950:	e853 3f00 	ldrex	r3, [r3]
 8012954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012958:	3208      	adds	r2, #8
 801295a:	e842 3100 	strex	r1, r3, [r2]
 801295e:	2900      	cmp	r1, #0
 8012960:	d1f3      	bne.n	801294a <UART_Start_Receive_IT+0xe6>
 8012962:	e7cf      	b.n	8012904 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012964:	6903      	ldr	r3, [r0, #16]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d1e1      	bne.n	801292e <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801296a:	4b06      	ldr	r3, [pc, #24]	; (8012984 <UART_Start_Receive_IT+0x120>)
 801296c:	6703      	str	r3, [r0, #112]	; 0x70
 801296e:	e7e0      	b.n	8012932 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012970:	6903      	ldr	r3, [r0, #16]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d1b8      	bne.n	80128e8 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8012976:	4b04      	ldr	r3, [pc, #16]	; (8012988 <UART_Start_Receive_IT+0x124>)
 8012978:	6703      	str	r3, [r0, #112]	; 0x70
 801297a:	e7b7      	b.n	80128ec <UART_Start_Receive_IT+0x88>
 801297c:	08011e71 	.word	0x08011e71
 8012980:	08011fd5 	.word	0x08011fd5
 8012984:	08012175 	.word	0x08012175
 8012988:	08011f23 	.word	0x08011f23

0801298c <HAL_UART_Receive_IT>:
{
 801298c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 801298e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8012992:	2b20      	cmp	r3, #32
 8012994:	d11e      	bne.n	80129d4 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8012996:	b1f9      	cbz	r1, 80129d8 <HAL_UART_Receive_IT+0x4c>
 8012998:	b302      	cbz	r2, 80129dc <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 801299a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 801299e:	2b01      	cmp	r3, #1
 80129a0:	d01e      	beq.n	80129e0 <HAL_UART_Receive_IT+0x54>
 80129a2:	2301      	movs	r3, #1
 80129a4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80129a8:	2300      	movs	r3, #0
 80129aa:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80129ac:	6803      	ldr	r3, [r0, #0]
 80129ae:	4c0d      	ldr	r4, [pc, #52]	; (80129e4 <HAL_UART_Receive_IT+0x58>)
 80129b0:	42a3      	cmp	r3, r4
 80129b2:	d00c      	beq.n	80129ce <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80129b4:	685b      	ldr	r3, [r3, #4]
 80129b6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80129ba:	d008      	beq.n	80129ce <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80129bc:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129be:	e854 3f00 	ldrex	r3, [r4]
 80129c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129c6:	e844 3500 	strex	r5, r3, [r4]
 80129ca:	2d00      	cmp	r5, #0
 80129cc:	d1f6      	bne.n	80129bc <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 80129ce:	f7ff ff49 	bl	8012864 <UART_Start_Receive_IT>
 80129d2:	e000      	b.n	80129d6 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 80129d4:	2002      	movs	r0, #2
}
 80129d6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80129d8:	2001      	movs	r0, #1
 80129da:	e7fc      	b.n	80129d6 <HAL_UART_Receive_IT+0x4a>
 80129dc:	2001      	movs	r0, #1
 80129de:	e7fa      	b.n	80129d6 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 80129e0:	2002      	movs	r0, #2
 80129e2:	e7f8      	b.n	80129d6 <HAL_UART_Receive_IT+0x4a>
 80129e4:	40008000 	.word	0x40008000

080129e8 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80129e8:	b082      	sub	sp, #8
 80129ea:	ab02      	add	r3, sp, #8
 80129ec:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80129f0:	6802      	ldr	r2, [r0, #0]
 80129f2:	6853      	ldr	r3, [r2, #4]
 80129f4:	f023 0310 	bic.w	r3, r3, #16
 80129f8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80129fc:	430b      	orrs	r3, r1
 80129fe:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8012a00:	6802      	ldr	r2, [r0, #0]
 8012a02:	6853      	ldr	r3, [r2, #4]
 8012a04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012a08:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8012a0c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8012a10:	6053      	str	r3, [r2, #4]
}
 8012a12:	b002      	add	sp, #8
 8012a14:	4770      	bx	lr
	...

08012a18 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012a18:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8012a1a:	b92b      	cbnz	r3, 8012a28 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012a22:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8012a26:	4770      	bx	lr
{
 8012a28:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012a2a:	6803      	ldr	r3, [r0, #0]
 8012a2c:	689a      	ldr	r2, [r3, #8]
 8012a2e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012a32:	6899      	ldr	r1, [r3, #8]
 8012a34:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012a36:	4d09      	ldr	r5, [pc, #36]	; (8012a5c <UARTEx_SetNbDataToProcess+0x44>)
 8012a38:	5c6b      	ldrb	r3, [r5, r1]
 8012a3a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012a3c:	4c08      	ldr	r4, [pc, #32]	; (8012a60 <UARTEx_SetNbDataToProcess+0x48>)
 8012a3e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012a40:	fb93 f3f1 	sdiv	r3, r3, r1
 8012a44:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012a48:	5cab      	ldrb	r3, [r5, r2]
 8012a4a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012a4c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012a4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a52:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8012a56:	bc30      	pop	{r4, r5}
 8012a58:	4770      	bx	lr
 8012a5a:	bf00      	nop
 8012a5c:	08028114 	.word	0x08028114
 8012a60:	0802810c 	.word	0x0802810c

08012a64 <HAL_UARTEx_WakeupCallback>:
}
 8012a64:	4770      	bx	lr

08012a66 <HAL_UARTEx_RxFifoFullCallback>:
}
 8012a66:	4770      	bx	lr

08012a68 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8012a68:	4770      	bx	lr

08012a6a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8012a6a:	b510      	push	{r4, lr}
 8012a6c:	b084      	sub	sp, #16
 8012a6e:	ab04      	add	r3, sp, #16
 8012a70:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8012a74:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8012a78:	2b01      	cmp	r3, #1
 8012a7a:	d035      	beq.n	8012ae8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8012a7c:	4604      	mov	r4, r0
 8012a7e:	2301      	movs	r3, #1
 8012a80:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8012a84:	2324      	movs	r3, #36	; 0x24
 8012a86:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8012a8a:	6802      	ldr	r2, [r0, #0]
 8012a8c:	6813      	ldr	r3, [r2, #0]
 8012a8e:	f023 0301 	bic.w	r3, r3, #1
 8012a92:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8012a94:	6801      	ldr	r1, [r0, #0]
 8012a96:	688b      	ldr	r3, [r1, #8]
 8012a98:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8012a9c:	9a02      	ldr	r2, [sp, #8]
 8012a9e:	4313      	orrs	r3, r2
 8012aa0:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8012aa2:	b1aa      	cbz	r2, 8012ad0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8012aa4:	6822      	ldr	r2, [r4, #0]
 8012aa6:	6813      	ldr	r3, [r2, #0]
 8012aa8:	f043 0301 	orr.w	r3, r3, #1
 8012aac:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8012aae:	f7f4 fc23 	bl	80072f8 <HAL_GetTick>
 8012ab2:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012ab4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8012ab8:	9200      	str	r2, [sp, #0]
 8012aba:	2200      	movs	r2, #0
 8012abc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	f7ff fdf6 	bl	80126b2 <UART_WaitOnFlagUntilTimeout>
 8012ac6:	b948      	cbnz	r0, 8012adc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8012ac8:	2320      	movs	r3, #32
 8012aca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8012ace:	e006      	b.n	8012ade <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8012ad0:	ab04      	add	r3, sp, #16
 8012ad2:	e913 0006 	ldmdb	r3, {r1, r2}
 8012ad6:	f7ff ff87 	bl	80129e8 <UARTEx_Wakeup_AddressConfig>
 8012ada:	e7e3      	b.n	8012aa4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8012adc:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8012ade:	2300      	movs	r3, #0
 8012ae0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8012ae4:	b004      	add	sp, #16
 8012ae6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8012ae8:	2002      	movs	r0, #2
 8012aea:	e7fb      	b.n	8012ae4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08012aec <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8012aec:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8012af0:	2b01      	cmp	r3, #1
 8012af2:	d010      	beq.n	8012b16 <HAL_UARTEx_EnableStopMode+0x2a>
 8012af4:	2301      	movs	r3, #1
 8012af6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012afa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012afc:	e852 3f00 	ldrex	r3, [r2]
 8012b00:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b04:	e842 3100 	strex	r1, r3, [r2]
 8012b08:	2900      	cmp	r1, #0
 8012b0a:	d1f6      	bne.n	8012afa <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8012b12:	4618      	mov	r0, r3
 8012b14:	4770      	bx	lr
  __HAL_LOCK(huart);
 8012b16:	2002      	movs	r0, #2
}
 8012b18:	4770      	bx	lr

08012b1a <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8012b1a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8012b1e:	2b01      	cmp	r3, #1
 8012b20:	d01d      	beq.n	8012b5e <HAL_UARTEx_EnableFifoMode+0x44>
{
 8012b22:	b510      	push	{r4, lr}
 8012b24:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8012b26:	2301      	movs	r3, #1
 8012b28:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8012b2c:	2324      	movs	r3, #36	; 0x24
 8012b2e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b32:	6802      	ldr	r2, [r0, #0]
 8012b34:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8012b36:	6811      	ldr	r1, [r2, #0]
 8012b38:	f021 0101 	bic.w	r1, r1, #1
 8012b3c:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012b3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012b42:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012b46:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012b48:	6802      	ldr	r2, [r0, #0]
 8012b4a:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8012b4c:	f7ff ff64 	bl	8012a18 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8012b50:	2320      	movs	r3, #32
 8012b52:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8012b56:	2000      	movs	r0, #0
 8012b58:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8012b5c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8012b5e:	2002      	movs	r0, #2
}
 8012b60:	4770      	bx	lr

08012b62 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8012b62:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8012b64:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8012b68:	2b01      	cmp	r3, #1
 8012b6a:	d01d      	beq.n	8012ba8 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8012b6c:	4604      	mov	r4, r0
 8012b6e:	2301      	movs	r3, #1
 8012b70:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8012b74:	2324      	movs	r3, #36	; 0x24
 8012b76:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b7a:	6803      	ldr	r3, [r0, #0]
 8012b7c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	f022 0201 	bic.w	r2, r2, #1
 8012b84:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012b86:	6802      	ldr	r2, [r0, #0]
 8012b88:	6893      	ldr	r3, [r2, #8]
 8012b8a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8012b8e:	4319      	orrs	r1, r3
 8012b90:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8012b92:	f7ff ff41 	bl	8012a18 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012b96:	6823      	ldr	r3, [r4, #0]
 8012b98:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8012b9a:	2320      	movs	r3, #32
 8012b9c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8012ba0:	2000      	movs	r0, #0
 8012ba2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8012ba6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8012ba8:	2002      	movs	r0, #2
 8012baa:	e7fc      	b.n	8012ba6 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08012bac <HAL_UARTEx_SetRxFifoThreshold>:
{
 8012bac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8012bae:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8012bb2:	2b01      	cmp	r3, #1
 8012bb4:	d01d      	beq.n	8012bf2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8012bb6:	4604      	mov	r4, r0
 8012bb8:	2301      	movs	r3, #1
 8012bba:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8012bbe:	2324      	movs	r3, #36	; 0x24
 8012bc0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012bc4:	6803      	ldr	r3, [r0, #0]
 8012bc6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8012bc8:	681a      	ldr	r2, [r3, #0]
 8012bca:	f022 0201 	bic.w	r2, r2, #1
 8012bce:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012bd0:	6802      	ldr	r2, [r0, #0]
 8012bd2:	6893      	ldr	r3, [r2, #8]
 8012bd4:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8012bd8:	4319      	orrs	r1, r3
 8012bda:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8012bdc:	f7ff ff1c 	bl	8012a18 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012be0:	6823      	ldr	r3, [r4, #0]
 8012be2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8012be4:	2320      	movs	r3, #32
 8012be6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8012bea:	2000      	movs	r0, #0
 8012bec:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8012bf0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8012bf2:	2002      	movs	r0, #2
 8012bf4:	e7fc      	b.n	8012bf0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08012bf8 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 8012bf8:	2804      	cmp	r0, #4
 8012bfa:	d807      	bhi.n	8012c0c <LmHandlerPackageIsInitialized+0x14>
{
 8012bfc:	b508      	push	{r3, lr}
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 8012bfe:	4b05      	ldr	r3, [pc, #20]	; (8012c14 <LmHandlerPackageIsInitialized+0x1c>)
 8012c00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012c04:	689b      	ldr	r3, [r3, #8]
 8012c06:	b11b      	cbz	r3, 8012c10 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8012c08:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8012c0a:	bd08      	pop	{r3, pc}
        return false;
 8012c0c:	2000      	movs	r0, #0
}
 8012c0e:	4770      	bx	lr
        return false;
 8012c10:	2000      	movs	r0, #0
 8012c12:	e7fa      	b.n	8012c0a <LmHandlerPackageIsInitialized+0x12>
 8012c14:	20000e90 	.word	0x20000e90

08012c18 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8012c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c1a:	4605      	mov	r5, r0
 8012c1c:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8012c1e:	2400      	movs	r4, #0
 8012c20:	e018      	b.n	8012c54 <LmHandlerPackagesNotify+0x3c>
                    }
                    break;
                }
                case PACKAGE_MCPS_INDICATION:
                {
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8012c22:	69da      	ldr	r2, [r3, #28]
 8012c24:	b1a2      	cbz	r2, 8012c50 <LmHandlerPackagesNotify+0x38>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8012c26:	781a      	ldrb	r2, [r3, #0]
 8012c28:	78fb      	ldrb	r3, [r7, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8012c2a:	429a      	cmp	r2, r3
 8012c2c:	d005      	beq.n	8012c3a <LmHandlerPackagesNotify+0x22>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8012c2e:	b97c      	cbnz	r4, 8012c50 <LmHandlerPackagesNotify+0x38>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8012c30:	4b13      	ldr	r3, [pc, #76]	; (8012c80 <LmHandlerPackagesNotify+0x68>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	68db      	ldr	r3, [r3, #12]
 8012c36:	4798      	blx	r3
 8012c38:	b150      	cbz	r0, 8012c50 <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8012c3a:	4b11      	ldr	r3, [pc, #68]	; (8012c80 <LmHandlerPackagesNotify+0x68>)
 8012c3c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8012c40:	69db      	ldr	r3, [r3, #28]
 8012c42:	4638      	mov	r0, r7
 8012c44:	4798      	blx	r3
 8012c46:	e003      	b.n	8012c50 <LmHandlerPackagesNotify+0x38>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8012c48:	6a1b      	ldr	r3, [r3, #32]
 8012c4a:	b10b      	cbz	r3, 8012c50 <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8012c4c:	4638      	mov	r0, r7
 8012c4e:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8012c50:	3401      	adds	r4, #1
 8012c52:	b264      	sxtb	r4, r4
 8012c54:	2c04      	cmp	r4, #4
 8012c56:	dc11      	bgt.n	8012c7c <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8012c58:	4626      	mov	r6, r4
 8012c5a:	4b09      	ldr	r3, [pc, #36]	; (8012c80 <LmHandlerPackagesNotify+0x68>)
 8012c5c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d0f5      	beq.n	8012c50 <LmHandlerPackagesNotify+0x38>
            switch( notifyType )
 8012c64:	2d01      	cmp	r5, #1
 8012c66:	d0dc      	beq.n	8012c22 <LmHandlerPackagesNotify+0xa>
 8012c68:	2d02      	cmp	r5, #2
 8012c6a:	d0ed      	beq.n	8012c48 <LmHandlerPackagesNotify+0x30>
 8012c6c:	2d00      	cmp	r5, #0
 8012c6e:	d1ef      	bne.n	8012c50 <LmHandlerPackagesNotify+0x38>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8012c70:	699b      	ldr	r3, [r3, #24]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d0ec      	beq.n	8012c50 <LmHandlerPackagesNotify+0x38>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8012c76:	4638      	mov	r0, r7
 8012c78:	4798      	blx	r3
 8012c7a:	e7e9      	b.n	8012c50 <LmHandlerPackagesNotify+0x38>
                    break;
                }
            }
        }
    }
}
 8012c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c7e:	bf00      	nop
 8012c80:	20000e90 	.word	0x20000e90

08012c84 <McpsConfirm>:
{
 8012c84:	b510      	push	{r4, lr}
 8012c86:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8012c88:	480c      	ldr	r0, [pc, #48]	; (8012cbc <McpsConfirm+0x38>)
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 8012c8e:	7863      	ldrb	r3, [r4, #1]
 8012c90:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8012c92:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8012c96:	7103      	strb	r3, [r0, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8012c98:	68e3      	ldr	r3, [r4, #12]
 8012c9a:	6083      	str	r3, [r0, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8012c9c:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8012ca0:	7503      	strb	r3, [r0, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 8012ca2:	6923      	ldr	r3, [r4, #16]
 8012ca4:	7543      	strb	r3, [r0, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8012ca6:	7923      	ldrb	r3, [r4, #4]
 8012ca8:	70c3      	strb	r3, [r0, #3]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8012caa:	4b05      	ldr	r3, [pc, #20]	; (8012cc0 <McpsConfirm+0x3c>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	6a1b      	ldr	r3, [r3, #32]
 8012cb0:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8012cb2:	4621      	mov	r1, r4
 8012cb4:	2000      	movs	r0, #0
 8012cb6:	f7ff ffaf 	bl	8012c18 <LmHandlerPackagesNotify>
}
 8012cba:	bd10      	pop	{r4, pc}
 8012cbc:	20000ed8 	.word	0x20000ed8
 8012cc0:	20000e8c 	.word	0x20000e8c

08012cc4 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8012cc4:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8012cc6:	2400      	movs	r4, #0
 8012cc8:	e001      	b.n	8012cce <LmHandlerPackagesProcess+0xa>
 8012cca:	3401      	adds	r4, #1
 8012ccc:	b264      	sxtb	r4, r4
 8012cce:	2c04      	cmp	r4, #4
 8012cd0:	dc12      	bgt.n	8012cf8 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8012cd2:	4b0a      	ldr	r3, [pc, #40]	; (8012cfc <LmHandlerPackagesProcess+0x38>)
 8012cd4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d0f6      	beq.n	8012cca <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8012cdc:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d0f3      	beq.n	8012cca <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8012ce2:	b2e0      	uxtb	r0, r4
 8012ce4:	f7ff ff88 	bl	8012bf8 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	d0ee      	beq.n	8012cca <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8012cec:	4b03      	ldr	r3, [pc, #12]	; (8012cfc <LmHandlerPackagesProcess+0x38>)
 8012cee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012cf2:	691b      	ldr	r3, [r3, #16]
 8012cf4:	4798      	blx	r3
 8012cf6:	e7e8      	b.n	8012cca <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8012cf8:	bd38      	pop	{r3, r4, r5, pc}
 8012cfa:	bf00      	nop
 8012cfc:	20000e90 	.word	0x20000e90

08012d00 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 8012d00:	b500      	push	{lr}
 8012d02:	b083      	sub	sp, #12
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8012d04:	4b05      	ldr	r3, [pc, #20]	; (8012d1c <DisplayClassUpdate+0x1c>)
 8012d06:	5c1b      	ldrb	r3, [r3, r0]
 8012d08:	9300      	str	r3, [sp, #0]
 8012d0a:	4b05      	ldr	r3, [pc, #20]	; (8012d20 <DisplayClassUpdate+0x20>)
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	4611      	mov	r1, r2
 8012d10:	2002      	movs	r0, #2
 8012d12:	f00f fa83 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8012d16:	b003      	add	sp, #12
 8012d18:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d1c:	08028138 	.word	0x08028138
 8012d20:	0802811c 	.word	0x0802811c

08012d24 <LmHandlerSetSystemMaxRxError>:
{
 8012d24:	b500      	push	{lr}
 8012d26:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8012d28:	2322      	movs	r3, #34	; 0x22
 8012d2a:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8012d2e:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8012d30:	a801      	add	r0, sp, #4
 8012d32:	f003 fe47 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 8012d36:	b910      	cbnz	r0, 8012d3e <LmHandlerSetSystemMaxRxError+0x1a>
}
 8012d38:	b00b      	add	sp, #44	; 0x2c
 8012d3a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8012d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d42:	e7f9      	b.n	8012d38 <LmHandlerSetSystemMaxRxError+0x14>

08012d44 <PrintKey>:

#if !defined(FEATURE_NOT_SUPPORT_LORA_EE)
static void PrintKey( KeyIdentifier_t key )
{
 8012d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d48:	b095      	sub	sp, #84	; 0x54
 8012d4a:	4604      	mov	r4, r0
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 8012d4c:	a913      	add	r1, sp, #76	; 0x4c
 8012d4e:	f00c ff39 	bl	801fbc4 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 8012d52:	2800      	cmp	r0, #0
 8012d54:	d13e      	bne.n	8012dd4 <PrintKey+0x90>
    {
        if (key == APP_KEY)
 8012d56:	2c00      	cmp	r4, #0
 8012d58:	d03f      	beq.n	8012dda <PrintKey+0x96>
        {
            MW_LOG(TS_OFF, VLEVEL_M, ">> AppKey:      ");
        }
        else if (key == NWK_KEY)
 8012d5a:	2c01      	cmp	r4, #1
 8012d5c:	d044      	beq.n	8012de8 <PrintKey+0xa4>
        {
            MW_LOG(TS_OFF, VLEVEL_M, ">> NwkKey:      ");
        }
        else if (key == APP_S_KEY)
 8012d5e:	2c03      	cmp	r4, #3
 8012d60:	d049      	beq.n	8012df6 <PrintKey+0xb2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, ">> AppSKey:     ");
        }
        else if (key == NWK_S_KEY)
 8012d62:	2c02      	cmp	r4, #2
 8012d64:	d04e      	beq.n	8012e04 <PrintKey+0xc0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, ">> NwkSKey:     ");
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8012d66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012d68:	785a      	ldrb	r2, [r3, #1]
 8012d6a:	9210      	str	r2, [sp, #64]	; 0x40
 8012d6c:	7899      	ldrb	r1, [r3, #2]
 8012d6e:	9111      	str	r1, [sp, #68]	; 0x44
 8012d70:	78da      	ldrb	r2, [r3, #3]
 8012d72:	7919      	ldrb	r1, [r3, #4]
 8012d74:	7958      	ldrb	r0, [r3, #5]
 8012d76:	799c      	ldrb	r4, [r3, #6]
 8012d78:	79dd      	ldrb	r5, [r3, #7]
 8012d7a:	7a1e      	ldrb	r6, [r3, #8]
 8012d7c:	7a5f      	ldrb	r7, [r3, #9]
 8012d7e:	f893 c00a 	ldrb.w	ip, [r3, #10]
 8012d82:	f893 e00b 	ldrb.w	lr, [r3, #11]
 8012d86:	f893 800c 	ldrb.w	r8, [r3, #12]
 8012d8a:	f893 900d 	ldrb.w	r9, [r3, #13]
 8012d8e:	f893 a00e 	ldrb.w	sl, [r3, #14]
 8012d92:	f893 b00f 	ldrb.w	fp, [r3, #15]
 8012d96:	7c1b      	ldrb	r3, [r3, #16]
 8012d98:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d9a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8012d9e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012da2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012da6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8012daa:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8012dae:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8012db2:	9708      	str	r7, [sp, #32]
 8012db4:	9607      	str	r6, [sp, #28]
 8012db6:	9506      	str	r5, [sp, #24]
 8012db8:	9405      	str	r4, [sp, #20]
 8012dba:	9004      	str	r0, [sp, #16]
 8012dbc:	9103      	str	r1, [sp, #12]
 8012dbe:	9202      	str	r2, [sp, #8]
 8012dc0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012dc2:	9101      	str	r1, [sp, #4]
 8012dc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012dc6:	9200      	str	r2, [sp, #0]
 8012dc8:	4b12      	ldr	r3, [pc, #72]	; (8012e14 <PrintKey+0xd0>)
 8012dca:	2200      	movs	r2, #0
 8012dcc:	4611      	mov	r1, r2
 8012dce:	2002      	movs	r0, #2
 8012dd0:	f00f fa24 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 8012dd4:	b015      	add	sp, #84	; 0x54
 8012dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, ">> AppKey:      ");
 8012dda:	4b0f      	ldr	r3, [pc, #60]	; (8012e18 <PrintKey+0xd4>)
 8012ddc:	2200      	movs	r2, #0
 8012dde:	4611      	mov	r1, r2
 8012de0:	2002      	movs	r0, #2
 8012de2:	f00f fa1b 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8012de6:	e7be      	b.n	8012d66 <PrintKey+0x22>
            MW_LOG(TS_OFF, VLEVEL_M, ">> NwkKey:      ");
 8012de8:	4b0c      	ldr	r3, [pc, #48]	; (8012e1c <PrintKey+0xd8>)
 8012dea:	2200      	movs	r2, #0
 8012dec:	4611      	mov	r1, r2
 8012dee:	2002      	movs	r0, #2
 8012df0:	f00f fa14 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8012df4:	e7b7      	b.n	8012d66 <PrintKey+0x22>
            MW_LOG(TS_OFF, VLEVEL_M, ">> AppSKey:     ");
 8012df6:	4b0a      	ldr	r3, [pc, #40]	; (8012e20 <PrintKey+0xdc>)
 8012df8:	2200      	movs	r2, #0
 8012dfa:	4611      	mov	r1, r2
 8012dfc:	2002      	movs	r0, #2
 8012dfe:	f00f fa0d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8012e02:	e7b0      	b.n	8012d66 <PrintKey+0x22>
            MW_LOG(TS_OFF, VLEVEL_M, ">> NwkSKey:     ");
 8012e04:	4b07      	ldr	r3, [pc, #28]	; (8012e24 <PrintKey+0xe0>)
 8012e06:	2200      	movs	r2, #0
 8012e08:	4611      	mov	r1, r2
 8012e0a:	2002      	movs	r0, #2
 8012e0c:	f00f fa06 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8012e10:	e7a9      	b.n	8012d66 <PrintKey+0x22>
 8012e12:	bf00      	nop
 8012e14:	08024f68 	.word	0x08024f68
 8012e18:	0802813c 	.word	0x0802813c
 8012e1c:	08028150 	.word	0x08028150
 8012e20:	08028164 	.word	0x08028164
 8012e24:	08028178 	.word	0x08028178

08012e28 <LmHandlerDeviceTimeReq>:
{
 8012e28:	b500      	push	{lr}
 8012e2a:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8012e2c:	230a      	movs	r3, #10
 8012e2e:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8012e32:	a801      	add	r0, sp, #4
 8012e34:	f004 f83e 	bl	8016eb4 <LoRaMacMlmeRequest>
    if( status == LORAMAC_STATUS_OK )
 8012e38:	b910      	cbnz	r0, 8012e40 <LmHandlerDeviceTimeReq+0x18>
}
 8012e3a:	b007      	add	sp, #28
 8012e3c:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8012e40:	f04f 30ff 	mov.w	r0, #4294967295
 8012e44:	e7f9      	b.n	8012e3a <LmHandlerDeviceTimeReq+0x12>
	...

08012e48 <LmHandlerConfigure>:
{
 8012e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e4c:	b09a      	sub	sp, #104	; 0x68
 8012e4e:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8012e50:	4c95      	ldr	r4, [pc, #596]	; (80130a8 <LmHandlerConfigure+0x260>)
 8012e52:	2210      	movs	r2, #16
 8012e54:	4620      	mov	r0, r4
 8012e56:	f00f faf5 	bl	8022444 <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 8012e5a:	f7f7 facd 	bl	800a3f8 <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8012e5e:	7822      	ldrb	r2, [r4, #0]
 8012e60:	2301      	movs	r3, #1
 8012e62:	4093      	lsls	r3, r2
 8012e64:	6841      	ldr	r1, [r0, #4]
 8012e66:	420b      	tst	r3, r1
 8012e68:	f000 810e 	beq.w	8013088 <LmHandlerConfigure+0x240>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8012e6c:	498f      	ldr	r1, [pc, #572]	; (80130ac <LmHandlerConfigure+0x264>)
 8012e6e:	4890      	ldr	r0, [pc, #576]	; (80130b0 <LmHandlerConfigure+0x268>)
 8012e70:	f003 fa58 	bl	8016324 <LoRaMacInitialization>
 8012e74:	2800      	cmp	r0, #0
 8012e76:	f040 8114 	bne.w	80130a2 <LmHandlerConfigure+0x25a>
    nbNvmData = NvmDataMgmtRestore( );
 8012e7a:	f005 fa16 	bl	80182aa <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 8012e7e:	2800      	cmp	r0, #0
 8012e80:	f000 810b 	beq.w	801309a <LmHandlerConfigure+0x252>
        CtxRestoreDone = true;
 8012e84:	4b8b      	ldr	r3, [pc, #556]	; (80130b4 <LmHandlerConfigure+0x26c>)
 8012e86:	2201      	movs	r2, #1
 8012e88:	701a      	strb	r2, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 8012e8a:	2502      	movs	r5, #2
 8012e8c:	f88d 5044 	strb.w	r5, [sp, #68]	; 0x44
    LoRaMacMibGetRequestConfirm( &mibReq );
 8012e90:	a811      	add	r0, sp, #68	; 0x44
 8012e92:	f003 fc7f 	bl	8016794 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8012e96:	4c88      	ldr	r4, [pc, #544]	; (80130b8 <LmHandlerConfigure+0x270>)
 8012e98:	2208      	movs	r2, #8
 8012e9a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	f00d f812 	bl	801fec6 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8012ea2:	2703      	movs	r7, #3
 8012ea4:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
    LoRaMacMibGetRequestConfirm( &mibReq );
 8012ea8:	a811      	add	r0, sp, #68	; 0x44
 8012eaa:	f003 fc73 	bl	8016794 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8012eae:	f104 0608 	add.w	r6, r4, #8
 8012eb2:	2208      	movs	r2, #8
 8012eb4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012eb6:	4630      	mov	r0, r6
 8012eb8:	f00d f805 	bl	801fec6 <memcpy1>
	E2P_LORA_Read_Appeui(eui);
 8012ebc:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8012ec0:	4640      	mov	r0, r8
 8012ec2:	f7f7 f959 	bl	800a178 <E2P_LORA_Read_Appeui>
    mibReq.Type = MIB_JOIN_EUI;
 8012ec6:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
	mibReq.Param.AppKey = (uint8_t*)eui;
 8012eca:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
	LoRaMacMibSetRequestConfirm(&mibReq);
 8012ece:	a811      	add	r0, sp, #68	; 0x44
 8012ed0:	f003 fd78 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
    LoRaMacMibGetRequestConfirm( &mibReq );
 8012ed4:	a811      	add	r0, sp, #68	; 0x44
 8012ed6:	f003 fc5d 	bl	8016794 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8012eda:	2208      	movs	r2, #8
 8012edc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012ede:	4630      	mov	r0, r6
 8012ee0:	f00c fff1 	bl	801fec6 <memcpy1>
	E2P_LORA_Read_Appkey(Key);
 8012ee4:	ae0d      	add	r6, sp, #52	; 0x34
 8012ee6:	4630      	mov	r0, r6
 8012ee8:	f7f7 f97d 	bl	800a1e6 <E2P_LORA_Read_Appkey>
	mibReq.Type = MIB_APP_KEY;
 8012eec:	2307      	movs	r3, #7
 8012eee:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	mibReq.Param.AppKey = (uint8_t*)Key;
 8012ef2:	9612      	str	r6, [sp, #72]	; 0x48
	LoRaMacMibSetRequestConfirm(&mibReq);
 8012ef4:	a811      	add	r0, sp, #68	; 0x44
 8012ef6:	f003 fd65 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
	E2P_LORA_Read_Nwkkey(Key);
 8012efa:	4630      	mov	r0, r6
 8012efc:	f7f7 f9b2 	bl	800a264 <E2P_LORA_Read_Nwkkey>
	mibReq.Type = MIB_NWK_KEY;
 8012f00:	2308      	movs	r3, #8
 8012f02:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	mibReq.Param.AppKey = (uint8_t*)Key;
 8012f06:	9612      	str	r6, [sp, #72]	; 0x48
	LoRaMacMibSetRequestConfirm(&mibReq);
 8012f08:	a811      	add	r0, sp, #68	; 0x44
 8012f0a:	f003 fd5b 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
	E2P_LORA_Read_App_S_key(Key);
 8012f0e:	4630      	mov	r0, r6
 8012f10:	f7f7 f9e7 	bl	800a2e2 <E2P_LORA_Read_App_S_key>
	mibReq.Type = MIB_APP_S_KEY;
 8012f14:	230a      	movs	r3, #10
 8012f16:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	mibReq.Param.AppKey = (uint8_t*)Key;
 8012f1a:	9612      	str	r6, [sp, #72]	; 0x48
	LoRaMacMibSetRequestConfirm(&mibReq);
 8012f1c:	a811      	add	r0, sp, #68	; 0x44
 8012f1e:	f003 fd51 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
	E2P_LORA_Read_Nwk_S_key(Key);
 8012f22:	4630      	mov	r0, r6
 8012f24:	f7f7 fa1c 	bl	800a360 <E2P_LORA_Read_Nwk_S_key>
	mibReq.Type = MIB_NWK_S_KEY;
 8012f28:	2309      	movs	r3, #9
 8012f2a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	mibReq.Param.AppKey = (uint8_t*)Key;
 8012f2e:	9612      	str	r6, [sp, #72]	; 0x48
	LoRaMacMibSetRequestConfirm(&mibReq);
 8012f30:	a811      	add	r0, sp, #68	; 0x44
 8012f32:	f003 fd47 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "------ OTAA ------\r\n");
 8012f36:	4b61      	ldr	r3, [pc, #388]	; (80130bc <LmHandlerConfigure+0x274>)
 8012f38:	2200      	movs	r2, #0
 8012f3a:	4611      	mov	r1, r2
 8012f3c:	4628      	mov	r0, r5
 8012f3e:	f00f f96d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 8012f42:	2000      	movs	r0, #0
 8012f44:	f7ff fefe 	bl	8012d44 <PrintKey>
    PrintKey(NWK_KEY);
 8012f48:	2001      	movs	r0, #1
 8012f4a:	f7ff fefb 	bl	8012d44 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "------ ABP  ------\r\n");
 8012f4e:	4b5c      	ldr	r3, [pc, #368]	; (80130c0 <LmHandlerConfigure+0x278>)
 8012f50:	2200      	movs	r2, #0
 8012f52:	4611      	mov	r1, r2
 8012f54:	4628      	mov	r0, r5
 8012f56:	f00f f961 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 8012f5a:	4638      	mov	r0, r7
 8012f5c:	f7ff fef2 	bl	8012d44 <PrintKey>
    PrintKey(NWK_S_KEY);
 8012f60:	4628      	mov	r0, r5
 8012f62:	f7ff feef 	bl	8012d44 <PrintKey>
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8012f66:	4b57      	ldr	r3, [pc, #348]	; (80130c4 <LmHandlerConfigure+0x27c>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	68db      	ldr	r3, [r3, #12]
 8012f6c:	4798      	blx	r3
 8012f6e:	6160      	str	r0, [r4, #20]
    mibReq.Type = MIB_DEV_ADDR;
 8012f70:	2306      	movs	r3, #6
 8012f72:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8012f76:	9012      	str	r0, [sp, #72]	; 0x48
    LoRaMacMibSetRequestConfirm(&mibReq);
 8012f78:	a811      	add	r0, sp, #68	; 0x44
 8012f7a:	f003 fd23 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "-------------------------------------\r\n");
 8012f7e:	4b52      	ldr	r3, [pc, #328]	; (80130c8 <LmHandlerConfigure+0x280>)
 8012f80:	2200      	movs	r2, #0
 8012f82:	4611      	mov	r1, r2
 8012f84:	4628      	mov	r0, r5
 8012f86:	f00f f949 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, ">> DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8012f8a:	7823      	ldrb	r3, [r4, #0]
 8012f8c:	7862      	ldrb	r2, [r4, #1]
 8012f8e:	78a1      	ldrb	r1, [r4, #2]
 8012f90:	78e0      	ldrb	r0, [r4, #3]
 8012f92:	7926      	ldrb	r6, [r4, #4]
 8012f94:	7967      	ldrb	r7, [r4, #5]
 8012f96:	f894 c006 	ldrb.w	ip, [r4, #6]
 8012f9a:	f894 e007 	ldrb.w	lr, [r4, #7]
 8012f9e:	f8cd e01c 	str.w	lr, [sp, #28]
 8012fa2:	f8cd c018 	str.w	ip, [sp, #24]
 8012fa6:	9705      	str	r7, [sp, #20]
 8012fa8:	9604      	str	r6, [sp, #16]
 8012faa:	9003      	str	r0, [sp, #12]
 8012fac:	9102      	str	r1, [sp, #8]
 8012fae:	9201      	str	r2, [sp, #4]
 8012fb0:	9300      	str	r3, [sp, #0]
 8012fb2:	4b46      	ldr	r3, [pc, #280]	; (80130cc <LmHandlerConfigure+0x284>)
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	4611      	mov	r1, r2
 8012fb8:	4628      	mov	r0, r5
 8012fba:	f00f f92f 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, ">> AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8012fbe:	7a23      	ldrb	r3, [r4, #8]
 8012fc0:	7a62      	ldrb	r2, [r4, #9]
 8012fc2:	7aa1      	ldrb	r1, [r4, #10]
 8012fc4:	7ae0      	ldrb	r0, [r4, #11]
 8012fc6:	7b26      	ldrb	r6, [r4, #12]
 8012fc8:	7b67      	ldrb	r7, [r4, #13]
 8012fca:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8012fce:	f894 e00f 	ldrb.w	lr, [r4, #15]
 8012fd2:	f8cd e01c 	str.w	lr, [sp, #28]
 8012fd6:	f8cd c018 	str.w	ip, [sp, #24]
 8012fda:	9705      	str	r7, [sp, #20]
 8012fdc:	9604      	str	r6, [sp, #16]
 8012fde:	9003      	str	r0, [sp, #12]
 8012fe0:	9102      	str	r1, [sp, #8]
 8012fe2:	9201      	str	r2, [sp, #4]
 8012fe4:	9300      	str	r3, [sp, #0]
 8012fe6:	4b3a      	ldr	r3, [pc, #232]	; (80130d0 <LmHandlerConfigure+0x288>)
 8012fe8:	2200      	movs	r2, #0
 8012fea:	4611      	mov	r1, r2
 8012fec:	4628      	mov	r0, r5
 8012fee:	f00f f915 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, ">> DevAddr: %02X:%02X:%02X:%02X\r\n",
 8012ff2:	7de3      	ldrb	r3, [r4, #23]
 8012ff4:	7da2      	ldrb	r2, [r4, #22]
 8012ff6:	7d61      	ldrb	r1, [r4, #21]
 8012ff8:	7d20      	ldrb	r0, [r4, #20]
 8012ffa:	9003      	str	r0, [sp, #12]
 8012ffc:	9102      	str	r1, [sp, #8]
 8012ffe:	9201      	str	r2, [sp, #4]
 8013000:	9300      	str	r3, [sp, #0]
 8013002:	4b34      	ldr	r3, [pc, #208]	; (80130d4 <LmHandlerConfigure+0x28c>)
 8013004:	2200      	movs	r2, #0
 8013006:	4611      	mov	r1, r2
 8013008:	4628      	mov	r0, r5
 801300a:	f00f f907 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 801300e:	270f      	movs	r7, #15
 8013010:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8013014:	2301      	movs	r3, #1
 8013016:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    LoRaMacMibSetRequestConfirm(&mibReq);
 801301a:	a811      	add	r0, sp, #68	; 0x44
 801301c:	f003 fcd2 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 8013020:	2305      	movs	r3, #5
 8013022:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8013026:	2400      	movs	r4, #0
 8013028:	9412      	str	r4, [sp, #72]	; 0x48
    LoRaMacMibSetRequestConfirm(&mibReq);
 801302a:	a811      	add	r0, sp, #68	; 0x44
 801302c:	f003 fcca 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8013030:	2310      	movs	r3, #16
 8013032:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8013036:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    LoRaMacMibSetRequestConfirm( &mibReq );
 801303a:	a811      	add	r0, sp, #68	; 0x44
 801303c:	f003 fcc2 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8013040:	2304      	movs	r3, #4
 8013042:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8013046:	4e18      	ldr	r6, [pc, #96]	; (80130a8 <LmHandlerConfigure+0x260>)
 8013048:	78b3      	ldrb	r3, [r6, #2]
 801304a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    LoRaMacMibSetRequestConfirm( &mibReq );
 801304e:	a811      	add	r0, sp, #68	; 0x44
 8013050:	f003 fcb8 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8013054:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8013058:	a909      	add	r1, sp, #36	; 0x24
 801305a:	7830      	ldrb	r0, [r6, #0]
 801305c:	f005 f935 	bl	80182ca <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8013060:	1b00      	subs	r0, r0, r4
 8013062:	bf18      	it	ne
 8013064:	2001      	movne	r0, #1
 8013066:	7170      	strb	r0, [r6, #5]
    LmHandlerSetSystemMaxRxError( 20 );
 8013068:	2014      	movs	r0, #20
 801306a:	f7ff fe5b 	bl	8012d24 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 801306e:	7970      	ldrb	r0, [r6, #5]
 8013070:	f004 f8b0 	bl	80171d4 <LoRaMacTestSetDutyCycleOn>
	MW_LOG(TS_OFF, VLEVEL_M, "-------------------------------------\r\n\r\n");
 8013074:	4b18      	ldr	r3, [pc, #96]	; (80130d8 <LmHandlerConfigure+0x290>)
 8013076:	4622      	mov	r2, r4
 8013078:	4621      	mov	r1, r4
 801307a:	4628      	mov	r0, r5
 801307c:	f00f f8ce 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    return LORAMAC_HANDLER_SUCCESS;
 8013080:	4620      	mov	r0, r4
}
 8013082:	b01a      	add	sp, #104	; 0x68
 8013084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8013088:	4b14      	ldr	r3, [pc, #80]	; (80130dc <LmHandlerConfigure+0x294>)
 801308a:	2201      	movs	r2, #1
 801308c:	2100      	movs	r1, #0
 801308e:	4608      	mov	r0, r1
 8013090:	f00f f8c4 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
        return LORAMAC_HANDLER_ERROR;
 8013094:	f04f 30ff 	mov.w	r0, #4294967295
 8013098:	e7f3      	b.n	8013082 <LmHandlerConfigure+0x23a>
        CtxRestoreDone = false;
 801309a:	4b06      	ldr	r3, [pc, #24]	; (80130b4 <LmHandlerConfigure+0x26c>)
 801309c:	2200      	movs	r2, #0
 801309e:	701a      	strb	r2, [r3, #0]
 80130a0:	e6f3      	b.n	8012e8a <LmHandlerConfigure+0x42>
            return LORAMAC_HANDLER_ERROR;
 80130a2:	f04f 30ff 	mov.w	r0, #4294967295
 80130a6:	e7ec      	b.n	8013082 <LmHandlerConfigure+0x23a>
 80130a8:	20000ea4 	.word	0x20000ea4
 80130ac:	20000eb4 	.word	0x20000eb4
 80130b0:	20000ec8 	.word	0x20000ec8
 80130b4:	20000e8a 	.word	0x20000e8a
 80130b8:	20000188 	.word	0x20000188
 80130bc:	080281d8 	.word	0x080281d8
 80130c0:	080281f0 	.word	0x080281f0
 80130c4:	20000e8c 	.word	0x20000e8c
 80130c8:	08024ce4 	.word	0x08024ce4
 80130cc:	08028208 	.word	0x08028208
 80130d0:	08028240 	.word	0x08028240
 80130d4:	08028278 	.word	0x08028278
 80130d8:	08027090 	.word	0x08027090
 80130dc:	0802818c 	.word	0x0802818c

080130e0 <LmHandlerProcess>:
{
 80130e0:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 80130e2:	f003 f8eb 	bl	80162bc <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 80130e6:	f7ff fded 	bl	8012cc4 <LmHandlerPackagesProcess>
    NvmDataMgmtStore( );
 80130ea:	f005 f8dc 	bl	80182a6 <NvmDataMgmtStore>
}
 80130ee:	bd08      	pop	{r3, pc}

080130f0 <LmHandlerJoinStatus>:
{
 80130f0:	b500      	push	{lr}
 80130f2:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80130f4:	2301      	movs	r3, #1
 80130f6:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80130fa:	a801      	add	r0, sp, #4
 80130fc:	f003 fb4a 	bl	8016794 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8013100:	b920      	cbnz	r0, 801310c <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8013102:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8013106:	b110      	cbz	r0, 801310e <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8013108:	2001      	movs	r0, #1
 801310a:	e000      	b.n	801310e <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 801310c:	2000      	movs	r0, #0
}
 801310e:	b00b      	add	sp, #44	; 0x2c
 8013110:	f85d fb04 	ldr.w	pc, [sp], #4

08013114 <LmHandlerLinkCheckReq>:
{
 8013114:	b500      	push	{lr}
 8013116:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_LINK_CHECK;
 8013118:	2304      	movs	r3, #4
 801311a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 801311e:	eb0d 0003 	add.w	r0, sp, r3
 8013122:	f003 fec7 	bl	8016eb4 <LoRaMacMlmeRequest>
    if( status == LORAMAC_STATUS_OK )
 8013126:	b910      	cbnz	r0, 801312e <LmHandlerLinkCheckReq+0x1a>
}
 8013128:	b007      	add	sp, #28
 801312a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 801312e:	f04f 30ff 	mov.w	r0, #4294967295
 8013132:	e7f9      	b.n	8013128 <LmHandlerLinkCheckReq+0x14>

08013134 <LmHandlerRequestClass>:
{
 8013134:	b510      	push	{r4, lr}
 8013136:	b08a      	sub	sp, #40	; 0x28
 8013138:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 801313a:	2300      	movs	r3, #0
 801313c:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8013140:	a801      	add	r0, sp, #4
 8013142:	f003 fb27 	bl	8016794 <LoRaMacMibGetRequestConfirm>
 8013146:	bb88      	cbnz	r0, 80131ac <LmHandlerRequestClass+0x78>
    currentClass = mibReq.Param.Class;
 8013148:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 801314c:	42a3      	cmp	r3, r4
 801314e:	d030      	beq.n	80131b2 <LmHandlerRequestClass+0x7e>
        switch( newClass )
 8013150:	2c01      	cmp	r4, #1
 8013152:	d030      	beq.n	80131b6 <LmHandlerRequestClass+0x82>
 8013154:	2c02      	cmp	r4, #2
 8013156:	d017      	beq.n	8013188 <LmHandlerRequestClass+0x54>
 8013158:	b114      	cbz	r4, 8013160 <LmHandlerRequestClass+0x2c>
 801315a:	2000      	movs	r0, #0
}
 801315c:	b00a      	add	sp, #40	; 0x28
 801315e:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 8013160:	b90b      	cbnz	r3, 8013166 <LmHandlerRequestClass+0x32>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8013162:	2000      	movs	r0, #0
 8013164:	e7fa      	b.n	801315c <LmHandlerRequestClass+0x28>
                    mibReq.Param.Class = newClass;
 8013166:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 801316a:	a801      	add	r0, sp, #4
 801316c:	f003 fc2a 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 8013170:	bb20      	cbnz	r0, 80131bc <LmHandlerRequestClass+0x88>
                        DisplayClassUpdate(newClass);
 8013172:	4620      	mov	r0, r4
 8013174:	f7ff fdc4 	bl	8012d00 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8013178:	4b17      	ldr	r3, [pc, #92]	; (80131d8 <LmHandlerRequestClass+0xa4>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801317e:	b303      	cbz	r3, 80131c2 <LmHandlerRequestClass+0x8e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8013180:	4620      	mov	r0, r4
 8013182:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8013184:	2000      	movs	r0, #0
 8013186:	e7e9      	b.n	801315c <LmHandlerRequestClass+0x28>
                if( currentClass != CLASS_A )
 8013188:	b9eb      	cbnz	r3, 80131c6 <LmHandlerRequestClass+0x92>
                    mibReq.Param.Class = newClass;
 801318a:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 801318e:	a801      	add	r0, sp, #4
 8013190:	f003 fc18 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 8013194:	b9d0      	cbnz	r0, 80131cc <LmHandlerRequestClass+0x98>
                        DisplayClassUpdate(newClass);
 8013196:	4620      	mov	r0, r4
 8013198:	f7ff fdb2 	bl	8012d00 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 801319c:	4b0e      	ldr	r3, [pc, #56]	; (80131d8 <LmHandlerRequestClass+0xa4>)
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131a2:	b1b3      	cbz	r3, 80131d2 <LmHandlerRequestClass+0x9e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80131a4:	4620      	mov	r0, r4
 80131a6:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80131a8:	2000      	movs	r0, #0
 80131aa:	e7d7      	b.n	801315c <LmHandlerRequestClass+0x28>
        return LORAMAC_HANDLER_ERROR;
 80131ac:	f04f 30ff 	mov.w	r0, #4294967295
 80131b0:	e7d4      	b.n	801315c <LmHandlerRequestClass+0x28>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80131b2:	2000      	movs	r0, #0
 80131b4:	e7d2      	b.n	801315c <LmHandlerRequestClass+0x28>
                errorStatus = LORAMAC_HANDLER_ERROR;
 80131b6:	f04f 30ff 	mov.w	r0, #4294967295
 80131ba:	e7cf      	b.n	801315c <LmHandlerRequestClass+0x28>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80131bc:	f04f 30ff 	mov.w	r0, #4294967295
 80131c0:	e7cc      	b.n	801315c <LmHandlerRequestClass+0x28>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80131c2:	2000      	movs	r0, #0
 80131c4:	e7ca      	b.n	801315c <LmHandlerRequestClass+0x28>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 80131c6:	f04f 30ff 	mov.w	r0, #4294967295
 80131ca:	e7c7      	b.n	801315c <LmHandlerRequestClass+0x28>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80131cc:	f04f 30ff 	mov.w	r0, #4294967295
 80131d0:	e7c4      	b.n	801315c <LmHandlerRequestClass+0x28>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80131d2:	2000      	movs	r0, #0
 80131d4:	e7c2      	b.n	801315c <LmHandlerRequestClass+0x28>
 80131d6:	bf00      	nop
 80131d8:	20000e8c 	.word	0x20000e8c

080131dc <LmHandlerJoin>:
{
 80131dc:	b500      	push	{lr}
 80131de:	b08f      	sub	sp, #60	; 0x3c
    if ( mode == ACTIVATION_TYPE_OTAA )
 80131e0:	2802      	cmp	r0, #2
 80131e2:	d024      	beq.n	801322e <LmHandlerJoin+0x52>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80131e4:	4b1e      	ldr	r3, [pc, #120]	; (8013260 <LmHandlerJoin+0x84>)
 80131e6:	2201      	movs	r2, #1
 80131e8:	709a      	strb	r2, [r3, #2]
		mlmeReq.Type = MLME_JOIN;
 80131ea:	f88d 2000 	strb.w	r2, [sp]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 80131ee:	4a1d      	ldr	r2, [pc, #116]	; (8013264 <LmHandlerJoin+0x88>)
 80131f0:	f992 2003 	ldrsb.w	r2, [r2, #3]
 80131f4:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80131f6:	2200      	movs	r2, #0
 80131f8:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 80131fa:	4b1b      	ldr	r3, [pc, #108]	; (8013268 <LmHandlerJoin+0x8c>)
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	b333      	cbz	r3, 801324e <LmHandlerJoin+0x72>
        LoRaMacStart();
 8013200:	f003 fa5a 	bl	80166b8 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8013204:	2301      	movs	r3, #1
 8013206:	f88d 3014 	strb.w	r3, [sp, #20]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 801320a:	f88d 3018 	strb.w	r3, [sp, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 801320e:	a805      	add	r0, sp, #20
 8013210:	f003 fbd8 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8013214:	4b15      	ldr	r3, [pc, #84]	; (801326c <LmHandlerJoin+0x90>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	69db      	ldr	r3, [r3, #28]
 801321a:	4811      	ldr	r0, [pc, #68]	; (8013260 <LmHandlerJoin+0x84>)
 801321c:	4798      	blx	r3
        LmHandlerRequestClass((DeviceClass_t)E2P_LORA_Read_Class());
 801321e:	f7f6 ff79 	bl	800a114 <E2P_LORA_Read_Class>
 8013222:	b2c0      	uxtb	r0, r0
 8013224:	f7ff ff86 	bl	8013134 <LmHandlerRequestClass>
}
 8013228:	b00f      	add	sp, #60	; 0x3c
 801322a:	f85d fb04 	ldr.w	pc, [sp], #4
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 801322e:	4b0c      	ldr	r3, [pc, #48]	; (8013260 <LmHandlerJoin+0x84>)
 8013230:	2202      	movs	r2, #2
 8013232:	709a      	strb	r2, [r3, #2]
        LoRaMacStart();
 8013234:	f003 fa40 	bl	80166b8 <LoRaMacStart>
        mlmeReq.Type = MLME_JOIN;
 8013238:	2301      	movs	r3, #1
 801323a:	f88d 3000 	strb.w	r3, [sp]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 801323e:	4b09      	ldr	r3, [pc, #36]	; (8013264 <LmHandlerJoin+0x88>)
 8013240:	78db      	ldrb	r3, [r3, #3]
 8013242:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMlmeRequest( &mlmeReq );
 8013246:	4668      	mov	r0, sp
 8013248:	f003 fe34 	bl	8016eb4 <LoRaMacMlmeRequest>
 801324c:	e7ec      	b.n	8013228 <LmHandlerJoin+0x4c>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 801324e:	2327      	movs	r3, #39	; 0x27
 8013250:	f88d 3014 	strb.w	r3, [sp, #20]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8013254:	4b06      	ldr	r3, [pc, #24]	; (8013270 <LmHandlerJoin+0x94>)
 8013256:	9306      	str	r3, [sp, #24]
            LoRaMacMibSetRequestConfirm(&mibReq);
 8013258:	a805      	add	r0, sp, #20
 801325a:	f003 fbb3 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 801325e:	e7cf      	b.n	8013200 <LmHandlerJoin+0x24>
 8013260:	200001a0 	.word	0x200001a0
 8013264:	20000ea4 	.word	0x20000ea4
 8013268:	20000e8a 	.word	0x20000e8a
 801326c:	20000e8c 	.word	0x20000e8c
 8013270:	01000300 	.word	0x01000300

08013274 <LmHandlerSend>:
{
 8013274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013276:	b087      	sub	sp, #28
 8013278:	4604      	mov	r4, r0
 801327a:	460e      	mov	r6, r1
 801327c:	4615      	mov	r5, r2
 801327e:	461f      	mov	r7, r3
    if (LoRaMacIsBusy() == true)
 8013280:	f003 f80a 	bl	8016298 <LoRaMacIsBusy>
 8013284:	2800      	cmp	r0, #0
 8013286:	d16c      	bne.n	8013362 <LmHandlerSend+0xee>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8013288:	f7ff ff32 	bl	80130f0 <LmHandlerJoinStatus>
 801328c:	2801      	cmp	r0, #1
 801328e:	d13d      	bne.n	801330c <LmHandlerSend+0x98>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8013290:	4b39      	ldr	r3, [pc, #228]	; (8013378 <LmHandlerSend+0x104>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	68db      	ldr	r3, [r3, #12]
 8013296:	4798      	blx	r3
 8013298:	b138      	cbz	r0, 80132aa <LmHandlerSend+0x36>
 801329a:	7823      	ldrb	r3, [r4, #0]
 801329c:	4a36      	ldr	r2, [pc, #216]	; (8013378 <LmHandlerSend+0x104>)
 801329e:	6812      	ldr	r2, [r2, #0]
 80132a0:	7812      	ldrb	r2, [r2, #0]
 80132a2:	4293      	cmp	r3, r2
 80132a4:	d001      	beq.n	80132aa <LmHandlerSend+0x36>
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d15e      	bne.n	8013368 <LmHandlerSend+0xf4>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80132aa:	4b34      	ldr	r3, [pc, #208]	; (801337c <LmHandlerSend+0x108>)
 80132ac:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80132b0:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 80132b4:	4669      	mov	r1, sp
 80132b6:	7860      	ldrb	r0, [r4, #1]
 80132b8:	f003 fa06 	bl	80166c8 <LoRaMacQueryTxPossible>
 80132bc:	b368      	cbz	r0, 801331a <LmHandlerSend+0xa6>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 80132be:	2200      	movs	r2, #0
 80132c0:	4b2f      	ldr	r3, [pc, #188]	; (8013380 <LmHandlerSend+0x10c>)
 80132c2:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80132c4:	f88d 2004 	strb.w	r2, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80132c8:	9203      	str	r2, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80132ca:	f8ad 2010 	strh.w	r2, [sp, #16]
    TxParams.AppData = *appData;
 80132ce:	4a2c      	ldr	r2, [pc, #176]	; (8013380 <LmHandlerSend+0x10c>)
 80132d0:	f102 060c 	add.w	r6, r2, #12
 80132d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80132d8:	e886 0003 	stmia.w	r6, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 80132dc:	4b27      	ldr	r3, [pc, #156]	; (801337c <LmHandlerSend+0x108>)
 80132de:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80132e2:	7113      	strb	r3, [r2, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 80132e4:	4639      	mov	r1, r7
 80132e6:	a801      	add	r0, sp, #4
 80132e8:	f003 feba 	bl	8017060 <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 80132ec:	b10d      	cbz	r5, 80132f2 <LmHandlerSend+0x7e>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 80132ee:	9b05      	ldr	r3, [sp, #20]
 80132f0:	602b      	str	r3, [r5, #0]
    switch (status)
 80132f2:	2811      	cmp	r0, #17
 80132f4:	d832      	bhi.n	801335c <LmHandlerSend+0xe8>
 80132f6:	e8df f000 	tbb	[pc, r0]
 80132fa:	3a26      	.short	0x3a26
 80132fc:	31313131 	.word	0x31313131
 8013300:	31312831 	.word	0x31312831
 8013304:	31312e31 	.word	0x31312e31
 8013308:	2b3a3a3a 	.word	0x2b3a3a3a
        LmHandlerJoin(JoinParams.Mode);
 801330c:	4b1d      	ldr	r3, [pc, #116]	; (8013384 <LmHandlerSend+0x110>)
 801330e:	7898      	ldrb	r0, [r3, #2]
 8013310:	f7ff ff64 	bl	80131dc <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8013314:	f06f 0002 	mvn.w	r0, #2
 8013318:	e02b      	b.n	8013372 <LmHandlerSend+0xfe>
        TxParams.MsgType = isTxConfirmed;
 801331a:	4b19      	ldr	r3, [pc, #100]	; (8013380 <LmHandlerSend+0x10c>)
 801331c:	709e      	strb	r6, [r3, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 801331e:	7823      	ldrb	r3, [r4, #0]
 8013320:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8013324:	7863      	ldrb	r3, [r4, #1]
 8013326:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 801332a:	6863      	ldr	r3, [r4, #4]
 801332c:	9303      	str	r3, [sp, #12]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 801332e:	b91e      	cbnz	r6, 8013338 <LmHandlerSend+0xc4>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 8013330:	2300      	movs	r3, #0
 8013332:	f88d 3004 	strb.w	r3, [sp, #4]
 8013336:	e7ca      	b.n	80132ce <LmHandlerSend+0x5a>
            mcpsReq.Type = MCPS_CONFIRMED;
 8013338:	2301      	movs	r3, #1
 801333a:	f88d 3004 	strb.w	r3, [sp, #4]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 801333e:	2308      	movs	r3, #8
 8013340:	f88d 3013 	strb.w	r3, [sp, #19]
 8013344:	e7c3      	b.n	80132ce <LmHandlerSend+0x5a>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8013346:	2000      	movs	r0, #0
 8013348:	e013      	b.n	8013372 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 801334a:	f06f 0002 	mvn.w	r0, #2
            break;
 801334e:	e010      	b.n	8013372 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8013350:	f06f 0004 	mvn.w	r0, #4
            break;
 8013354:	e00d      	b.n	8013372 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8013356:	f06f 0005 	mvn.w	r0, #5
            break;
 801335a:	e00a      	b.n	8013372 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 801335c:	f04f 30ff 	mov.w	r0, #4294967295
            break;
 8013360:	e007      	b.n	8013372 <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8013362:	f06f 0001 	mvn.w	r0, #1
 8013366:	e004      	b.n	8013372 <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8013368:	f06f 0003 	mvn.w	r0, #3
 801336c:	e001      	b.n	8013372 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 801336e:	f06f 0001 	mvn.w	r0, #1
}
 8013372:	b007      	add	sp, #28
 8013374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013376:	bf00      	nop
 8013378:	20000e90 	.word	0x20000e90
 801337c:	20000ea4 	.word	0x20000ea4
 8013380:	20000ed8 	.word	0x20000ed8
 8013384:	200001a0 	.word	0x200001a0

08013388 <MlmeIndication>:
{
 8013388:	b510      	push	{r4, lr}
 801338a:	b082      	sub	sp, #8
 801338c:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 801338e:	4b18      	ldr	r3, [pc, #96]	; (80133f0 <MlmeIndication+0x68>)
 8013390:	2200      	movs	r2, #0
 8013392:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8013394:	7842      	ldrb	r2, [r0, #1]
 8013396:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 8013398:	f9b1 0000 	ldrsh.w	r0, [r1]
 801339c:	70d8      	strb	r0, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 801339e:	f991 0002 	ldrsb.w	r0, [r1, #2]
 80133a2:	7118      	strb	r0, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 80133a4:	f991 1003 	ldrsb.w	r1, [r1, #3]
 80133a8:	7319      	strb	r1, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 80133aa:	2a0e      	cmp	r2, #14
 80133ac:	d007      	beq.n	80133be <MlmeIndication+0x36>
        LmHandlerCallbacks->OnRxData(-1, NULL, &RxParams );
 80133ae:	4b11      	ldr	r3, [pc, #68]	; (80133f4 <MlmeIndication+0x6c>)
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133b4:	4a0e      	ldr	r2, [pc, #56]	; (80133f0 <MlmeIndication+0x68>)
 80133b6:	2100      	movs	r1, #0
 80133b8:	f04f 30ff 	mov.w	r0, #4294967295
 80133bc:	4798      	blx	r3
    switch( mlmeIndication->MlmeIndication )
 80133be:	7823      	ldrb	r3, [r4, #0]
 80133c0:	2b07      	cmp	r3, #7
 80133c2:	d001      	beq.n	80133c8 <MlmeIndication+0x40>
}
 80133c4:	b002      	add	sp, #8
 80133c6:	bd10      	pop	{r4, pc}
            LmHandlerAppData_t appData =
 80133c8:	2300      	movs	r3, #0
 80133ca:	f88d 3000 	strb.w	r3, [sp]
 80133ce:	f88d 3001 	strb.w	r3, [sp, #1]
 80133d2:	9301      	str	r3, [sp, #4]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 80133d4:	4b08      	ldr	r3, [pc, #32]	; (80133f8 <MlmeIndication+0x70>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	68db      	ldr	r3, [r3, #12]
 80133da:	4798      	blx	r3
 80133dc:	2800      	cmp	r0, #0
 80133de:	d1f1      	bne.n	80133c4 <MlmeIndication+0x3c>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 80133e0:	2301      	movs	r3, #1
 80133e2:	2200      	movs	r2, #0
 80133e4:	4611      	mov	r1, r2
 80133e6:	4668      	mov	r0, sp
 80133e8:	f7ff ff44 	bl	8013274 <LmHandlerSend>
}
 80133ec:	e7ea      	b.n	80133c4 <MlmeIndication+0x3c>
 80133ee:	bf00      	nop
 80133f0:	200001b0 	.word	0x200001b0
 80133f4:	20000e8c 	.word	0x20000e8c
 80133f8:	20000e90 	.word	0x20000e90

080133fc <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 80133fc:	b170      	cbz	r0, 801341c <LmHandlerGetCurrentClass+0x20>
{
 80133fe:	b510      	push	{r4, lr}
 8013400:	b08a      	sub	sp, #40	; 0x28
 8013402:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8013404:	2300      	movs	r3, #0
 8013406:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 801340a:	a801      	add	r0, sp, #4
 801340c:	f003 f9c2 	bl	8016794 <LoRaMacMibGetRequestConfirm>
 8013410:	b938      	cbnz	r0, 8013422 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8013412:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013416:	7023      	strb	r3, [r4, #0]
}
 8013418:	b00a      	add	sp, #40	; 0x28
 801341a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 801341c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013420:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8013422:	f04f 30ff 	mov.w	r0, #4294967295
 8013426:	e7f7      	b.n	8013418 <LmHandlerGetCurrentClass+0x1c>

08013428 <McpsIndication>:
{
 8013428:	b510      	push	{r4, lr}
 801342a:	b086      	sub	sp, #24
    DeviceClass_t deviceClass = CLASS_A;
 801342c:	2300      	movs	r3, #0
 801342e:	f88d 300f 	strb.w	r3, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 8013432:	4a2f      	ldr	r2, [pc, #188]	; (80134f0 <McpsIndication+0xc8>)
 8013434:	2301      	movs	r3, #1
 8013436:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 8013438:	7843      	ldrb	r3, [r0, #1]
 801343a:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 801343c:	2b00      	cmp	r3, #0
 801343e:	d132      	bne.n	80134a6 <McpsIndication+0x7e>
 8013440:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8013442:	f990 2004 	ldrsb.w	r2, [r0, #4]
 8013446:	4b2a      	ldr	r3, [pc, #168]	; (80134f0 <McpsIndication+0xc8>)
 8013448:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 801344a:	f9b1 2000 	ldrsh.w	r2, [r1]
 801344e:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 8013450:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8013454:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 8013456:	f991 2003 	ldrsb.w	r2, [r1, #3]
 801345a:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 801345c:	6902      	ldr	r2, [r0, #16]
 801345e:	609a      	str	r2, [r3, #8]
    appData.Port = mcpsIndication->Port;
 8013460:	78c3      	ldrb	r3, [r0, #3]
 8013462:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 8013466:	7b03      	ldrb	r3, [r0, #12]
 8013468:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 801346c:	6883      	ldr	r3, [r0, #8]
 801346e:	9305      	str	r3, [sp, #20]
	if(mcpsIndication->McpsIndication == MCPS_UNCONFIRMED)
 8013470:	7803      	ldrb	r3, [r0, #0]
 8013472:	b9d3      	cbnz	r3, 80134aa <McpsIndication+0x82>
    	LmHandlerCallbacks->OnRxData(0, &appData, &RxParams );
 8013474:	4b1f      	ldr	r3, [pc, #124]	; (80134f4 <McpsIndication+0xcc>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801347a:	4a1d      	ldr	r2, [pc, #116]	; (80134f0 <McpsIndication+0xc8>)
 801347c:	a904      	add	r1, sp, #16
 801347e:	2000      	movs	r0, #0
 8013480:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8013482:	4b1c      	ldr	r3, [pc, #112]	; (80134f4 <McpsIndication+0xcc>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013488:	b113      	cbz	r3, 8013490 <McpsIndication+0x68>
 801348a:	7e22      	ldrb	r2, [r4, #24]
 801348c:	b102      	cbz	r2, 8013490 <McpsIndication+0x68>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 801348e:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8013490:	4621      	mov	r1, r4
 8013492:	2001      	movs	r0, #1
 8013494:	f7ff fbc0 	bl	8012c18 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass(&deviceClass);
 8013498:	f10d 000f 	add.w	r0, sp, #15
 801349c:	f7ff ffae 	bl	80133fc <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 80134a0:	7963      	ldrb	r3, [r4, #5]
 80134a2:	2b01      	cmp	r3, #1
 80134a4:	d014      	beq.n	80134d0 <McpsIndication+0xa8>
}
 80134a6:	b006      	add	sp, #24
 80134a8:	bd10      	pop	{r4, pc}
	else if(mcpsIndication->McpsIndication == MCPS_CONFIRMED)
 80134aa:	2b01      	cmp	r3, #1
 80134ac:	d008      	beq.n	80134c0 <McpsIndication+0x98>
		LmHandlerCallbacks->OnRxData(-1, &appData, &RxParams );
 80134ae:	4b11      	ldr	r3, [pc, #68]	; (80134f4 <McpsIndication+0xcc>)
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134b4:	4a0e      	ldr	r2, [pc, #56]	; (80134f0 <McpsIndication+0xc8>)
 80134b6:	a904      	add	r1, sp, #16
 80134b8:	f04f 30ff 	mov.w	r0, #4294967295
 80134bc:	4798      	blx	r3
 80134be:	e7e0      	b.n	8013482 <McpsIndication+0x5a>
		LmHandlerCallbacks->OnRxData(1, &appData, &RxParams );
 80134c0:	4b0c      	ldr	r3, [pc, #48]	; (80134f4 <McpsIndication+0xcc>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134c6:	4a0a      	ldr	r2, [pc, #40]	; (80134f0 <McpsIndication+0xc8>)
 80134c8:	a904      	add	r1, sp, #16
 80134ca:	2001      	movs	r0, #1
 80134cc:	4798      	blx	r3
 80134ce:	e7d8      	b.n	8013482 <McpsIndication+0x5a>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 80134d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d1e6      	bne.n	80134a6 <McpsIndication+0x7e>
        LmHandlerAppData_t appData =
 80134d8:	2100      	movs	r1, #0
 80134da:	f88d 1004 	strb.w	r1, [sp, #4]
 80134de:	f88d 1005 	strb.w	r1, [sp, #5]
 80134e2:	9102      	str	r1, [sp, #8]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80134e4:	2301      	movs	r3, #1
 80134e6:	460a      	mov	r2, r1
 80134e8:	a801      	add	r0, sp, #4
 80134ea:	f7ff fec3 	bl	8013274 <LmHandlerSend>
 80134ee:	e7da      	b.n	80134a6 <McpsIndication+0x7e>
 80134f0:	200001b0 	.word	0x200001b0
 80134f4:	20000e8c 	.word	0x20000e8c

080134f8 <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 80134f8:	b180      	cbz	r0, 801351c <LmHandlerGetTxDatarate+0x24>
{
 80134fa:	b510      	push	{r4, lr}
 80134fc:	b08a      	sub	sp, #40	; 0x28
 80134fe:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8013500:	231f      	movs	r3, #31
 8013502:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8013506:	a801      	add	r0, sp, #4
 8013508:	f003 f944 	bl	8016794 <LoRaMacMibGetRequestConfirm>
 801350c:	b948      	cbnz	r0, 8013522 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 801350e:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8013512:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8013514:	4a04      	ldr	r2, [pc, #16]	; (8013528 <LmHandlerGetTxDatarate+0x30>)
 8013516:	70d3      	strb	r3, [r2, #3]
}
 8013518:	b00a      	add	sp, #40	; 0x28
 801351a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 801351c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013520:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8013522:	f04f 30ff 	mov.w	r0, #4294967295
 8013526:	e7f7      	b.n	8013518 <LmHandlerGetTxDatarate+0x20>
 8013528:	20000ea4 	.word	0x20000ea4

0801352c <MlmeConfirm>:
{
 801352c:	b510      	push	{r4, lr}
 801352e:	b08a      	sub	sp, #40	; 0x28
 8013530:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8013532:	481e      	ldr	r0, [pc, #120]	; (80135ac <MlmeConfirm+0x80>)
 8013534:	2300      	movs	r3, #0
 8013536:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 8013538:	7863      	ldrb	r3, [r4, #1]
 801353a:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 801353c:	4b1c      	ldr	r3, [pc, #112]	; (80135b0 <MlmeConfirm+0x84>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	6a1b      	ldr	r3, [r3, #32]
 8013542:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8013544:	4621      	mov	r1, r4
 8013546:	2002      	movs	r0, #2
 8013548:	f7ff fb66 	bl	8012c18 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 801354c:	7823      	ldrb	r3, [r4, #0]
 801354e:	2b01      	cmp	r3, #1
 8013550:	d003      	beq.n	801355a <MlmeConfirm+0x2e>
 8013552:	2b04      	cmp	r3, #4
 8013554:	d021      	beq.n	801359a <MlmeConfirm+0x6e>
}
 8013556:	b00a      	add	sp, #40	; 0x28
 8013558:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 801355a:	2306      	movs	r3, #6
 801355c:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8013560:	a801      	add	r0, sp, #4
 8013562:	f003 f917 	bl	8016794 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8013566:	9a02      	ldr	r2, [sp, #8]
 8013568:	4b12      	ldr	r3, [pc, #72]	; (80135b4 <MlmeConfirm+0x88>)
 801356a:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 801356c:	4812      	ldr	r0, [pc, #72]	; (80135b8 <MlmeConfirm+0x8c>)
 801356e:	f7ff ffc3 	bl	80134f8 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8013572:	7863      	ldrb	r3, [r4, #1]
 8013574:	b143      	cbz	r3, 8013588 <MlmeConfirm+0x5c>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8013576:	4b10      	ldr	r3, [pc, #64]	; (80135b8 <MlmeConfirm+0x8c>)
 8013578:	22ff      	movs	r2, #255	; 0xff
 801357a:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 801357c:	4b0c      	ldr	r3, [pc, #48]	; (80135b0 <MlmeConfirm+0x84>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	69db      	ldr	r3, [r3, #28]
 8013582:	480d      	ldr	r0, [pc, #52]	; (80135b8 <MlmeConfirm+0x8c>)
 8013584:	4798      	blx	r3
        break;
 8013586:	e7e6      	b.n	8013556 <MlmeConfirm+0x2a>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8013588:	4b0b      	ldr	r3, [pc, #44]	; (80135b8 <MlmeConfirm+0x8c>)
 801358a:	2200      	movs	r2, #0
 801358c:	705a      	strb	r2, [r3, #1]
				LmHandlerRequestClass((DeviceClass_t)E2P_LORA_Read_Class());
 801358e:	f7f6 fdc1 	bl	800a114 <E2P_LORA_Read_Class>
 8013592:	b2c0      	uxtb	r0, r0
 8013594:	f7ff fdce 	bl	8013134 <LmHandlerRequestClass>
 8013598:	e7f0      	b.n	801357c <MlmeConfirm+0x50>
            RxParams.LinkCheck = true;
 801359a:	4b08      	ldr	r3, [pc, #32]	; (80135bc <MlmeConfirm+0x90>)
 801359c:	2201      	movs	r2, #1
 801359e:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80135a0:	7a22      	ldrb	r2, [r4, #8]
 80135a2:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 80135a4:	7a62      	ldrb	r2, [r4, #9]
 80135a6:	73da      	strb	r2, [r3, #15]
}
 80135a8:	e7d5      	b.n	8013556 <MlmeConfirm+0x2a>
 80135aa:	bf00      	nop
 80135ac:	20000ed8 	.word	0x20000ed8
 80135b0:	20000e8c 	.word	0x20000e8c
 80135b4:	20000188 	.word	0x20000188
 80135b8:	200001a0 	.word	0x200001a0
 80135bc:	200001b0 	.word	0x200001b0

080135c0 <LmHandlerGetActiveRegion>:
    if (region == NULL)
 80135c0:	b120      	cbz	r0, 80135cc <LmHandlerGetActiveRegion+0xc>
    *region = LmHandlerParams.ActiveRegion;
 80135c2:	4a04      	ldr	r2, [pc, #16]	; (80135d4 <LmHandlerGetActiveRegion+0x14>)
 80135c4:	7812      	ldrb	r2, [r2, #0]
 80135c6:	7002      	strb	r2, [r0, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80135c8:	2000      	movs	r0, #0
 80135ca:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80135cc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80135d0:	4770      	bx	lr
 80135d2:	bf00      	nop
 80135d4:	20000ea4 	.word	0x20000ea4

080135d8 <LmHandlerPackageRegister>:
    switch( id )
 80135d8:	b9e0      	cbnz	r0, 8013614 <LmHandlerPackageRegister+0x3c>
{
 80135da:	b538      	push	{r3, r4, r5, lr}
 80135dc:	460c      	mov	r4, r1
 80135de:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 80135e0:	f000 fcf0 	bl	8013fc4 <LmhpCompliancePackageFactory>
    if( package != NULL )
 80135e4:	b198      	cbz	r0, 801360e <LmHandlerPackageRegister+0x36>
        LmHandlerPackages[id] = package;
 80135e6:	4a0d      	ldr	r2, [pc, #52]	; (801361c <LmHandlerPackageRegister+0x44>)
 80135e8:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80135ec:	4a0c      	ldr	r2, [pc, #48]	; (8013620 <LmHandlerPackageRegister+0x48>)
 80135ee:	6242      	str	r2, [r0, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 80135f0:	4a0c      	ldr	r2, [pc, #48]	; (8013624 <LmHandlerPackageRegister+0x4c>)
 80135f2:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 80135f4:	4a0c      	ldr	r2, [pc, #48]	; (8013628 <LmHandlerPackageRegister+0x50>)
 80135f6:	62c2      	str	r2, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 80135f8:	4a0c      	ldr	r2, [pc, #48]	; (801362c <LmHandlerPackageRegister+0x54>)
 80135fa:	6812      	ldr	r2, [r2, #0]
 80135fc:	6912      	ldr	r2, [r2, #16]
 80135fe:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8013600:	6843      	ldr	r3, [r0, #4]
 8013602:	22f2      	movs	r2, #242	; 0xf2
 8013604:	490a      	ldr	r1, [pc, #40]	; (8013630 <LmHandlerPackageRegister+0x58>)
 8013606:	4620      	mov	r0, r4
 8013608:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 801360a:	2000      	movs	r0, #0
}
 801360c:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 801360e:	f04f 30ff 	mov.w	r0, #4294967295
 8013612:	e7fb      	b.n	801360c <LmHandlerPackageRegister+0x34>
 8013614:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013618:	4770      	bx	lr
 801361a:	bf00      	nop
 801361c:	20000e90 	.word	0x20000e90
 8013620:	080131dd 	.word	0x080131dd
 8013624:	08013275 	.word	0x08013275
 8013628:	08012e29 	.word	0x08012e29
 801362c:	20000e8c 	.word	0x20000e8c
 8013630:	20000d98 	.word	0x20000d98

08013634 <LmHandlerInit>:
{
 8013634:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 8013636:	4b0f      	ldr	r3, [pc, #60]	; (8013674 <LmHandlerInit+0x40>)
 8013638:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 801363a:	4b0f      	ldr	r3, [pc, #60]	; (8013678 <LmHandlerInit+0x44>)
 801363c:	4a0f      	ldr	r2, [pc, #60]	; (801367c <LmHandlerInit+0x48>)
 801363e:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8013640:	4a0f      	ldr	r2, [pc, #60]	; (8013680 <LmHandlerInit+0x4c>)
 8013642:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8013644:	4a0f      	ldr	r2, [pc, #60]	; (8013684 <LmHandlerInit+0x50>)
 8013646:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8013648:	4a0f      	ldr	r2, [pc, #60]	; (8013688 <LmHandlerInit+0x54>)
 801364a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 801364c:	6802      	ldr	r2, [r0, #0]
 801364e:	4b0f      	ldr	r3, [pc, #60]	; (801368c <LmHandlerInit+0x58>)
 8013650:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8013652:	6842      	ldr	r2, [r0, #4]
 8013654:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8013656:	6882      	ldr	r2, [r0, #8]
 8013658:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 801365a:	4a0d      	ldr	r2, [pc, #52]	; (8013690 <LmHandlerInit+0x5c>)
 801365c:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 801365e:	6902      	ldr	r2, [r0, #16]
 8013660:	611a      	str	r2, [r3, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8013662:	490c      	ldr	r1, [pc, #48]	; (8013694 <LmHandlerInit+0x60>)
 8013664:	2000      	movs	r0, #0
 8013666:	f7ff ffb7 	bl	80135d8 <LmHandlerPackageRegister>
 801366a:	b900      	cbnz	r0, 801366e <LmHandlerInit+0x3a>
}
 801366c:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 801366e:	f04f 30ff 	mov.w	r0, #4294967295
 8013672:	e7fb      	b.n	801366c <LmHandlerInit+0x38>
 8013674:	20000e8c 	.word	0x20000e8c
 8013678:	20000ec8 	.word	0x20000ec8
 801367c:	08012c85 	.word	0x08012c85
 8013680:	08013429 	.word	0x08013429
 8013684:	0801352d 	.word	0x0801352d
 8013688:	08013389 	.word	0x08013389
 801368c:	20000eb4 	.word	0x20000eb4
 8013690:	080182a5 	.word	0x080182a5
 8013694:	200001a4 	.word	0x200001a4

08013698 <LmHandlerGetDevEUI>:
    if (devEUI == NULL)
 8013698:	b188      	cbz	r0, 80136be <LmHandlerGetDevEUI+0x26>
{
 801369a:	b510      	push	{r4, lr}
 801369c:	b08a      	sub	sp, #40	; 0x28
 801369e:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEV_EUI;
 80136a0:	2302      	movs	r3, #2
 80136a2:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80136a6:	a801      	add	r0, sp, #4
 80136a8:	f003 f874 	bl	8016794 <LoRaMacMibGetRequestConfirm>
 80136ac:	b950      	cbnz	r0, 80136c4 <LmHandlerGetDevEUI+0x2c>
    UTIL_MEM_cpy_8(devEUI, mibReq.Param.DevEui, SE_EUI_SIZE);
 80136ae:	2208      	movs	r2, #8
 80136b0:	9902      	ldr	r1, [sp, #8]
 80136b2:	4620      	mov	r0, r4
 80136b4:	f00e fec6 	bl	8022444 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 80136b8:	2000      	movs	r0, #0
}
 80136ba:	b00a      	add	sp, #40	; 0x28
 80136bc:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80136be:	f04f 30ff 	mov.w	r0, #4294967295
}
 80136c2:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80136c4:	f04f 30ff 	mov.w	r0, #4294967295
 80136c8:	e7f7      	b.n	80136ba <LmHandlerGetDevEUI+0x22>

080136ca <LmHandlerSetDevEUI>:
{
 80136ca:	b510      	push	{r4, lr}
 80136cc:	b08a      	sub	sp, #40	; 0x28
 80136ce:	4604      	mov	r4, r0
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80136d0:	f7ff fd0e 	bl	80130f0 <LmHandlerJoinStatus>
 80136d4:	2801      	cmp	r0, #1
 80136d6:	d00d      	beq.n	80136f4 <LmHandlerSetDevEUI+0x2a>
        mibReq.Type = MIB_DEV_EUI;
 80136d8:	2302      	movs	r3, #2
 80136da:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.DevEui = devEUI;
 80136de:	9402      	str	r4, [sp, #8]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80136e0:	a801      	add	r0, sp, #4
 80136e2:	f003 f96f 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 80136e6:	b910      	cbnz	r0, 80136ee <LmHandlerSetDevEUI+0x24>
        return LORAMAC_HANDLER_SUCCESS;
 80136e8:	2000      	movs	r0, #0
}
 80136ea:	b00a      	add	sp, #40	; 0x28
 80136ec:	bd10      	pop	{r4, pc}
            return LORAMAC_HANDLER_ERROR;
 80136ee:	f04f 30ff 	mov.w	r0, #4294967295
 80136f2:	e7fa      	b.n	80136ea <LmHandlerSetDevEUI+0x20>
        return LORAMAC_HANDLER_ERROR;
 80136f4:	f04f 30ff 	mov.w	r0, #4294967295
 80136f8:	e7f7      	b.n	80136ea <LmHandlerSetDevEUI+0x20>

080136fa <LmHandlerGetAppEUI>:
    if (appEUI == NULL)
 80136fa:	b188      	cbz	r0, 8013720 <LmHandlerGetAppEUI+0x26>
{
 80136fc:	b510      	push	{r4, lr}
 80136fe:	b08a      	sub	sp, #40	; 0x28
 8013700:	4604      	mov	r4, r0
    mibReq.Type = MIB_JOIN_EUI;
 8013702:	2303      	movs	r3, #3
 8013704:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8013708:	a801      	add	r0, sp, #4
 801370a:	f003 f843 	bl	8016794 <LoRaMacMibGetRequestConfirm>
 801370e:	b950      	cbnz	r0, 8013726 <LmHandlerGetAppEUI+0x2c>
    UTIL_MEM_cpy_8(appEUI, mibReq.Param.JoinEui, SE_EUI_SIZE);
 8013710:	2208      	movs	r2, #8
 8013712:	9902      	ldr	r1, [sp, #8]
 8013714:	4620      	mov	r0, r4
 8013716:	f00e fe95 	bl	8022444 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 801371a:	2000      	movs	r0, #0
}
 801371c:	b00a      	add	sp, #40	; 0x28
 801371e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8013720:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013724:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8013726:	f04f 30ff 	mov.w	r0, #4294967295
 801372a:	e7f7      	b.n	801371c <LmHandlerGetAppEUI+0x22>

0801372c <LmHandlerSetAppEUI>:
{
 801372c:	b510      	push	{r4, lr}
 801372e:	b08a      	sub	sp, #40	; 0x28
 8013730:	4604      	mov	r4, r0
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8013732:	f7ff fcdd 	bl	80130f0 <LmHandlerJoinStatus>
 8013736:	2801      	cmp	r0, #1
 8013738:	d00d      	beq.n	8013756 <LmHandlerSetAppEUI+0x2a>
        mibReq.Type = MIB_JOIN_EUI;
 801373a:	2303      	movs	r3, #3
 801373c:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.JoinEui = appEUI;
 8013740:	9402      	str	r4, [sp, #8]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8013742:	a801      	add	r0, sp, #4
 8013744:	f003 f93e 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 8013748:	b910      	cbnz	r0, 8013750 <LmHandlerSetAppEUI+0x24>
        return LORAMAC_HANDLER_SUCCESS;
 801374a:	2000      	movs	r0, #0
}
 801374c:	b00a      	add	sp, #40	; 0x28
 801374e:	bd10      	pop	{r4, pc}
            return LORAMAC_HANDLER_ERROR;
 8013750:	f04f 30ff 	mov.w	r0, #4294967295
 8013754:	e7fa      	b.n	801374c <LmHandlerSetAppEUI+0x20>
        return LORAMAC_HANDLER_ERROR;
 8013756:	f04f 30ff 	mov.w	r0, #4294967295
 801375a:	e7f7      	b.n	801374c <LmHandlerSetAppEUI+0x20>

0801375c <LmHandlerGetNetworkID>:
    if (networkId == NULL)
 801375c:	b168      	cbz	r0, 801377a <LmHandlerGetNetworkID+0x1e>
{
 801375e:	b510      	push	{r4, lr}
 8013760:	b08a      	sub	sp, #40	; 0x28
 8013762:	4604      	mov	r4, r0
    mibReq.Type = MIB_NET_ID;
 8013764:	2305      	movs	r3, #5
 8013766:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801376a:	a801      	add	r0, sp, #4
 801376c:	f003 f812 	bl	8016794 <LoRaMacMibGetRequestConfirm>
 8013770:	b930      	cbnz	r0, 8013780 <LmHandlerGetNetworkID+0x24>
    *networkId = mibReq.Param.NetID;
 8013772:	9b02      	ldr	r3, [sp, #8]
 8013774:	6023      	str	r3, [r4, #0]
}
 8013776:	b00a      	add	sp, #40	; 0x28
 8013778:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 801377a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801377e:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8013780:	f04f 30ff 	mov.w	r0, #4294967295
 8013784:	e7f7      	b.n	8013776 <LmHandlerGetNetworkID+0x1a>

08013786 <LmHandlerSetNetworkID>:
{
 8013786:	b510      	push	{r4, lr}
 8013788:	b08a      	sub	sp, #40	; 0x28
 801378a:	4604      	mov	r4, r0
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 801378c:	f7ff fcb0 	bl	80130f0 <LmHandlerJoinStatus>
 8013790:	2801      	cmp	r0, #1
 8013792:	d00d      	beq.n	80137b0 <LmHandlerSetNetworkID+0x2a>
        mibReq.Type = MIB_NET_ID;
 8013794:	2305      	movs	r3, #5
 8013796:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetID = networkId;
 801379a:	9402      	str	r4, [sp, #8]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801379c:	a801      	add	r0, sp, #4
 801379e:	f003 f911 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 80137a2:	b910      	cbnz	r0, 80137aa <LmHandlerSetNetworkID+0x24>
        return LORAMAC_HANDLER_SUCCESS;
 80137a4:	2000      	movs	r0, #0
}
 80137a6:	b00a      	add	sp, #40	; 0x28
 80137a8:	bd10      	pop	{r4, pc}
            return LORAMAC_HANDLER_ERROR;
 80137aa:	f04f 30ff 	mov.w	r0, #4294967295
 80137ae:	e7fa      	b.n	80137a6 <LmHandlerSetNetworkID+0x20>
        return LORAMAC_HANDLER_ERROR;
 80137b0:	f04f 30ff 	mov.w	r0, #4294967295
 80137b4:	e7f7      	b.n	80137a6 <LmHandlerSetNetworkID+0x20>

080137b6 <LmHandlerGetDevAddr>:
    if (devAddr == NULL)
 80137b6:	b168      	cbz	r0, 80137d4 <LmHandlerGetDevAddr+0x1e>
{
 80137b8:	b510      	push	{r4, lr}
 80137ba:	b08a      	sub	sp, #40	; 0x28
 80137bc:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEV_ADDR;
 80137be:	2306      	movs	r3, #6
 80137c0:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80137c4:	a801      	add	r0, sp, #4
 80137c6:	f002 ffe5 	bl	8016794 <LoRaMacMibGetRequestConfirm>
 80137ca:	b930      	cbnz	r0, 80137da <LmHandlerGetDevAddr+0x24>
    *devAddr = mibReq.Param.DevAddr;
 80137cc:	9b02      	ldr	r3, [sp, #8]
 80137ce:	6023      	str	r3, [r4, #0]
}
 80137d0:	b00a      	add	sp, #40	; 0x28
 80137d2:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80137d4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80137d8:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80137da:	f04f 30ff 	mov.w	r0, #4294967295
 80137de:	e7f7      	b.n	80137d0 <LmHandlerGetDevAddr+0x1a>

080137e0 <LmHandlerSetDevAddr>:
{
 80137e0:	b510      	push	{r4, lr}
 80137e2:	b08a      	sub	sp, #40	; 0x28
 80137e4:	4604      	mov	r4, r0
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80137e6:	f7ff fc83 	bl	80130f0 <LmHandlerJoinStatus>
 80137ea:	2801      	cmp	r0, #1
 80137ec:	d00d      	beq.n	801380a <LmHandlerSetDevAddr+0x2a>
        mibReq.Type = MIB_DEV_ADDR;
 80137ee:	2306      	movs	r3, #6
 80137f0:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.DevAddr = devAddr;
 80137f4:	9402      	str	r4, [sp, #8]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80137f6:	a801      	add	r0, sp, #4
 80137f8:	f003 f8e4 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 80137fc:	b910      	cbnz	r0, 8013804 <LmHandlerSetDevAddr+0x24>
        return LORAMAC_HANDLER_SUCCESS;
 80137fe:	2000      	movs	r0, #0
}
 8013800:	b00a      	add	sp, #40	; 0x28
 8013802:	bd10      	pop	{r4, pc}
            return LORAMAC_HANDLER_ERROR;
 8013804:	f04f 30ff 	mov.w	r0, #4294967295
 8013808:	e7fa      	b.n	8013800 <LmHandlerSetDevAddr+0x20>
        return LORAMAC_HANDLER_ERROR;
 801380a:	f04f 30ff 	mov.w	r0, #4294967295
 801380e:	e7f7      	b.n	8013800 <LmHandlerSetDevAddr+0x20>

08013810 <LmHandlerSetActiveRegion>:
{
 8013810:	b510      	push	{r4, lr}
 8013812:	4604      	mov	r4, r0
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8013814:	f7ff fc6c 	bl	80130f0 <LmHandlerJoinStatus>
 8013818:	2801      	cmp	r0, #1
 801381a:	d004      	beq.n	8013826 <LmHandlerSetActiveRegion+0x16>
        LmHandlerParams.ActiveRegion = region;
 801381c:	4803      	ldr	r0, [pc, #12]	; (801382c <LmHandlerSetActiveRegion+0x1c>)
 801381e:	7004      	strb	r4, [r0, #0]
        return LmHandlerConfigure( &LmHandlerParams );
 8013820:	f7ff fb12 	bl	8012e48 <LmHandlerConfigure>
}
 8013824:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8013826:	f04f 30ff 	mov.w	r0, #4294967295
 801382a:	e7fb      	b.n	8013824 <LmHandlerSetActiveRegion+0x14>
 801382c:	20000ea4 	.word	0x20000ea4

08013830 <LmHandlerGetAdrEnable>:
    if (adrEnable == NULL)
 8013830:	b120      	cbz	r0, 801383c <LmHandlerGetAdrEnable+0xc>
    *adrEnable = LmHandlerParams.AdrEnable;
 8013832:	4a04      	ldr	r2, [pc, #16]	; (8013844 <LmHandlerGetAdrEnable+0x14>)
 8013834:	7892      	ldrb	r2, [r2, #2]
 8013836:	7002      	strb	r2, [r0, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8013838:	2000      	movs	r0, #0
 801383a:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 801383c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013840:	4770      	bx	lr
 8013842:	bf00      	nop
 8013844:	20000ea4 	.word	0x20000ea4

08013848 <LmHandlerSetAdrEnable>:
{
 8013848:	b510      	push	{r4, lr}
 801384a:	b08a      	sub	sp, #40	; 0x28
 801384c:	4604      	mov	r4, r0
    mibReq.Type = MIB_ADR;
 801384e:	2304      	movs	r3, #4
 8013850:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.AdrEnable = adrEnable;
 8013854:	f88d 0008 	strb.w	r0, [sp, #8]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8013858:	eb0d 0003 	add.w	r0, sp, r3
 801385c:	f003 f8b2 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 8013860:	b918      	cbnz	r0, 801386a <LmHandlerSetAdrEnable+0x22>
    LmHandlerParams.AdrEnable = adrEnable;
 8013862:	4b03      	ldr	r3, [pc, #12]	; (8013870 <LmHandlerSetAdrEnable+0x28>)
 8013864:	709c      	strb	r4, [r3, #2]
}
 8013866:	b00a      	add	sp, #40	; 0x28
 8013868:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 801386a:	f04f 30ff 	mov.w	r0, #4294967295
 801386e:	e7fa      	b.n	8013866 <LmHandlerSetAdrEnable+0x1e>
 8013870:	20000ea4 	.word	0x20000ea4

08013874 <LmHandlerSetTxDatarate>:
    if (LmHandlerParams.AdrEnable == true)
 8013874:	4b0c      	ldr	r3, [pc, #48]	; (80138a8 <LmHandlerSetTxDatarate+0x34>)
 8013876:	789b      	ldrb	r3, [r3, #2]
 8013878:	b97b      	cbnz	r3, 801389a <LmHandlerSetTxDatarate+0x26>
{
 801387a:	b510      	push	{r4, lr}
 801387c:	b08a      	sub	sp, #40	; 0x28
 801387e:	4604      	mov	r4, r0
    mibReq.Type = MIB_CHANNELS_DATARATE;
 8013880:	231f      	movs	r3, #31
 8013882:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.ChannelsDatarate = txDatarate;
 8013886:	f88d 0008 	strb.w	r0, [sp, #8]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801388a:	a801      	add	r0, sp, #4
 801388c:	f003 f89a 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 8013890:	b930      	cbnz	r0, 80138a0 <LmHandlerSetTxDatarate+0x2c>
    LmHandlerParams.TxDatarate = txDatarate;
 8013892:	4b05      	ldr	r3, [pc, #20]	; (80138a8 <LmHandlerSetTxDatarate+0x34>)
 8013894:	70dc      	strb	r4, [r3, #3]
}
 8013896:	b00a      	add	sp, #40	; 0x28
 8013898:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 801389a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801389e:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80138a0:	f04f 30ff 	mov.w	r0, #4294967295
 80138a4:	e7f7      	b.n	8013896 <LmHandlerSetTxDatarate+0x22>
 80138a6:	bf00      	nop
 80138a8:	20000ea4 	.word	0x20000ea4

080138ac <LmHandlerGetDutyCycleEnable>:
    if (dutyCycleEnable == NULL)
 80138ac:	b120      	cbz	r0, 80138b8 <LmHandlerGetDutyCycleEnable+0xc>
    *dutyCycleEnable = LmHandlerParams.DutyCycleEnabled;
 80138ae:	4a04      	ldr	r2, [pc, #16]	; (80138c0 <LmHandlerGetDutyCycleEnable+0x14>)
 80138b0:	7952      	ldrb	r2, [r2, #5]
 80138b2:	7002      	strb	r2, [r0, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80138b4:	2000      	movs	r0, #0
 80138b6:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80138b8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80138bc:	4770      	bx	lr
 80138be:	bf00      	nop
 80138c0:	20000ea4 	.word	0x20000ea4

080138c4 <LmHandlerSetDutyCycleEnable>:
{
 80138c4:	b508      	push	{r3, lr}
    LmHandlerParams.DutyCycleEnabled = dutyCycleEnable;
 80138c6:	4b03      	ldr	r3, [pc, #12]	; (80138d4 <LmHandlerSetDutyCycleEnable+0x10>)
 80138c8:	7158      	strb	r0, [r3, #5]
    LoRaMacTestSetDutyCycleOn(dutyCycleEnable);
 80138ca:	f003 fc83 	bl	80171d4 <LoRaMacTestSetDutyCycleOn>
}
 80138ce:	2000      	movs	r0, #0
 80138d0:	bd08      	pop	{r3, pc}
 80138d2:	bf00      	nop
 80138d4:	20000ea4 	.word	0x20000ea4

080138d8 <LmHandlerGetRX2Params>:
    if (rxParams == NULL)
 80138d8:	b180      	cbz	r0, 80138fc <LmHandlerGetRX2Params+0x24>
{
 80138da:	b510      	push	{r4, lr}
 80138dc:	b08a      	sub	sp, #40	; 0x28
 80138de:	4604      	mov	r4, r0
    mibReq.Type = MIB_RX2_CHANNEL;
 80138e0:	2312      	movs	r3, #18
 80138e2:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80138e6:	a801      	add	r0, sp, #4
 80138e8:	f002 ff54 	bl	8016794 <LoRaMacMibGetRequestConfirm>
 80138ec:	b948      	cbnz	r0, 8013902 <LmHandlerGetRX2Params+0x2a>
    rxParams->Frequency = mibReq.Param.Rx2Channel.Frequency;
 80138ee:	9b02      	ldr	r3, [sp, #8]
 80138f0:	6023      	str	r3, [r4, #0]
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
 80138f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80138f6:	7123      	strb	r3, [r4, #4]
}
 80138f8:	b00a      	add	sp, #40	; 0x28
 80138fa:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80138fc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013900:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8013902:	f04f 30ff 	mov.w	r0, #4294967295
 8013906:	e7f7      	b.n	80138f8 <LmHandlerGetRX2Params+0x20>

08013908 <LmHandlerGetTxPower>:
    if (txPower == NULL)
 8013908:	b170      	cbz	r0, 8013928 <LmHandlerGetTxPower+0x20>
{
 801390a:	b510      	push	{r4, lr}
 801390c:	b08a      	sub	sp, #40	; 0x28
 801390e:	4604      	mov	r4, r0
    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8013910:	2320      	movs	r3, #32
 8013912:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8013916:	a801      	add	r0, sp, #4
 8013918:	f002 ff3c 	bl	8016794 <LoRaMacMibGetRequestConfirm>
 801391c:	b938      	cbnz	r0, 801392e <LmHandlerGetTxPower+0x26>
    *txPower = mibReq.Param.ChannelsTxPower;
 801391e:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8013922:	7023      	strb	r3, [r4, #0]
}
 8013924:	b00a      	add	sp, #40	; 0x28
 8013926:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8013928:	f04f 30ff 	mov.w	r0, #4294967295
}
 801392c:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 801392e:	f04f 30ff 	mov.w	r0, #4294967295
 8013932:	e7f7      	b.n	8013924 <LmHandlerGetTxPower+0x1c>

08013934 <LmHandlerGetRx1Delay>:
    if (rxDelay == NULL)
 8013934:	b168      	cbz	r0, 8013952 <LmHandlerGetRx1Delay+0x1e>
{
 8013936:	b510      	push	{r4, lr}
 8013938:	b08a      	sub	sp, #40	; 0x28
 801393a:	4604      	mov	r4, r0
    mibReq.Type = MIB_RECEIVE_DELAY_1;
 801393c:	231a      	movs	r3, #26
 801393e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8013942:	a801      	add	r0, sp, #4
 8013944:	f002 ff26 	bl	8016794 <LoRaMacMibGetRequestConfirm>
 8013948:	b930      	cbnz	r0, 8013958 <LmHandlerGetRx1Delay+0x24>
    *rxDelay = mibReq.Param.ReceiveDelay1;
 801394a:	9b02      	ldr	r3, [sp, #8]
 801394c:	6023      	str	r3, [r4, #0]
}
 801394e:	b00a      	add	sp, #40	; 0x28
 8013950:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8013952:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013956:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8013958:	f04f 30ff 	mov.w	r0, #4294967295
 801395c:	e7f7      	b.n	801394e <LmHandlerGetRx1Delay+0x1a>

0801395e <LmHandlerGetRx2Delay>:
    if (rxDelay == NULL)
 801395e:	b168      	cbz	r0, 801397c <LmHandlerGetRx2Delay+0x1e>
{
 8013960:	b510      	push	{r4, lr}
 8013962:	b08a      	sub	sp, #40	; 0x28
 8013964:	4604      	mov	r4, r0
    mibReq.Type = MIB_RECEIVE_DELAY_2;
 8013966:	231b      	movs	r3, #27
 8013968:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801396c:	a801      	add	r0, sp, #4
 801396e:	f002 ff11 	bl	8016794 <LoRaMacMibGetRequestConfirm>
 8013972:	b930      	cbnz	r0, 8013982 <LmHandlerGetRx2Delay+0x24>
    *rxDelay = mibReq.Param.ReceiveDelay2;
 8013974:	9b02      	ldr	r3, [sp, #8]
 8013976:	6023      	str	r3, [r4, #0]
}
 8013978:	b00a      	add	sp, #40	; 0x28
 801397a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 801397c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013980:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8013982:	f04f 30ff 	mov.w	r0, #4294967295
 8013986:	e7f7      	b.n	8013978 <LmHandlerGetRx2Delay+0x1a>

08013988 <LmHandlerGetJoinRx1Delay>:
    if (rxDelay == NULL)
 8013988:	b168      	cbz	r0, 80139a6 <LmHandlerGetJoinRx1Delay+0x1e>
{
 801398a:	b510      	push	{r4, lr}
 801398c:	b08a      	sub	sp, #40	; 0x28
 801398e:	4604      	mov	r4, r0
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 8013990:	231c      	movs	r3, #28
 8013992:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8013996:	a801      	add	r0, sp, #4
 8013998:	f002 fefc 	bl	8016794 <LoRaMacMibGetRequestConfirm>
 801399c:	b930      	cbnz	r0, 80139ac <LmHandlerGetJoinRx1Delay+0x24>
    *rxDelay = mibReq.Param.JoinAcceptDelay1;
 801399e:	9b02      	ldr	r3, [sp, #8]
 80139a0:	6023      	str	r3, [r4, #0]
}
 80139a2:	b00a      	add	sp, #40	; 0x28
 80139a4:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80139a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80139aa:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80139ac:	f04f 30ff 	mov.w	r0, #4294967295
 80139b0:	e7f7      	b.n	80139a2 <LmHandlerGetJoinRx1Delay+0x1a>

080139b2 <LmHandlerGetJoinRx2Delay>:
    if (rxDelay == NULL)
 80139b2:	b168      	cbz	r0, 80139d0 <LmHandlerGetJoinRx2Delay+0x1e>
{
 80139b4:	b510      	push	{r4, lr}
 80139b6:	b08a      	sub	sp, #40	; 0x28
 80139b8:	4604      	mov	r4, r0
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 80139ba:	231d      	movs	r3, #29
 80139bc:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80139c0:	a801      	add	r0, sp, #4
 80139c2:	f002 fee7 	bl	8016794 <LoRaMacMibGetRequestConfirm>
 80139c6:	b930      	cbnz	r0, 80139d6 <LmHandlerGetJoinRx2Delay+0x24>
    *rxDelay = mibReq.Param.JoinAcceptDelay2;
 80139c8:	9b02      	ldr	r3, [sp, #8]
 80139ca:	6023      	str	r3, [r4, #0]
}
 80139cc:	b00a      	add	sp, #40	; 0x28
 80139ce:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80139d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80139d4:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80139d6:	f04f 30ff 	mov.w	r0, #4294967295
 80139da:	e7f7      	b.n	80139cc <LmHandlerGetJoinRx2Delay+0x1a>

080139dc <LmHandlerSetTxPower>:
{
 80139dc:	b500      	push	{lr}
 80139de:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80139e0:	2320      	movs	r3, #32
 80139e2:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.ChannelsTxPower = txPower;
 80139e6:	f88d 0008 	strb.w	r0, [sp, #8]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80139ea:	a801      	add	r0, sp, #4
 80139ec:	f002 ffea 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 80139f0:	b910      	cbnz	r0, 80139f8 <LmHandlerSetTxPower+0x1c>
}
 80139f2:	b00b      	add	sp, #44	; 0x2c
 80139f4:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80139f8:	f04f 30ff 	mov.w	r0, #4294967295
 80139fc:	e7f9      	b.n	80139f2 <LmHandlerSetTxPower+0x16>

080139fe <LmHandlerSetRX2Params>:
{
 80139fe:	b500      	push	{lr}
 8013a00:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_RX2_CHANNEL;
 8013a02:	2312      	movs	r3, #18
 8013a04:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.Rx2Channel.Frequency = rxParams->Frequency;
 8013a08:	6803      	ldr	r3, [r0, #0]
 8013a0a:	9302      	str	r3, [sp, #8]
    mibReq.Param.Rx2Channel.Datarate = rxParams->Datarate;
 8013a0c:	7903      	ldrb	r3, [r0, #4]
 8013a0e:	f88d 300c 	strb.w	r3, [sp, #12]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8013a12:	a801      	add	r0, sp, #4
 8013a14:	f002 ffd6 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 8013a18:	b910      	cbnz	r0, 8013a20 <LmHandlerSetRX2Params+0x22>
}
 8013a1a:	b00b      	add	sp, #44	; 0x2c
 8013a1c:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8013a20:	f04f 30ff 	mov.w	r0, #4294967295
 8013a24:	e7f9      	b.n	8013a1a <LmHandlerSetRX2Params+0x1c>

08013a26 <LmHandlerSetRx1Delay>:
{
 8013a26:	b500      	push	{lr}
 8013a28:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_RECEIVE_DELAY_1;
 8013a2a:	231a      	movs	r3, #26
 8013a2c:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.ReceiveDelay1 = rxDelay;
 8013a30:	9002      	str	r0, [sp, #8]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8013a32:	a801      	add	r0, sp, #4
 8013a34:	f002 ffc6 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 8013a38:	b910      	cbnz	r0, 8013a40 <LmHandlerSetRx1Delay+0x1a>
}
 8013a3a:	b00b      	add	sp, #44	; 0x2c
 8013a3c:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8013a40:	f04f 30ff 	mov.w	r0, #4294967295
 8013a44:	e7f9      	b.n	8013a3a <LmHandlerSetRx1Delay+0x14>

08013a46 <LmHandlerSetRx2Delay>:
{
 8013a46:	b500      	push	{lr}
 8013a48:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_RECEIVE_DELAY_2;
 8013a4a:	231b      	movs	r3, #27
 8013a4c:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.ReceiveDelay2 = rxDelay;
 8013a50:	9002      	str	r0, [sp, #8]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8013a52:	a801      	add	r0, sp, #4
 8013a54:	f002 ffb6 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 8013a58:	b910      	cbnz	r0, 8013a60 <LmHandlerSetRx2Delay+0x1a>
}
 8013a5a:	b00b      	add	sp, #44	; 0x2c
 8013a5c:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8013a60:	f04f 30ff 	mov.w	r0, #4294967295
 8013a64:	e7f9      	b.n	8013a5a <LmHandlerSetRx2Delay+0x14>

08013a66 <LmHandlerSetJoinRx1Delay>:
{
 8013a66:	b500      	push	{lr}
 8013a68:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 8013a6a:	231c      	movs	r3, #28
 8013a6c:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.JoinAcceptDelay1 = rxDelay;
 8013a70:	9002      	str	r0, [sp, #8]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8013a72:	a801      	add	r0, sp, #4
 8013a74:	f002 ffa6 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 8013a78:	b910      	cbnz	r0, 8013a80 <LmHandlerSetJoinRx1Delay+0x1a>
}
 8013a7a:	b00b      	add	sp, #44	; 0x2c
 8013a7c:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8013a80:	f04f 30ff 	mov.w	r0, #4294967295
 8013a84:	e7f9      	b.n	8013a7a <LmHandlerSetJoinRx1Delay+0x14>

08013a86 <LmHandlerSetJoinRx2Delay>:
{
 8013a86:	b500      	push	{lr}
 8013a88:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 8013a8a:	231d      	movs	r3, #29
 8013a8c:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.JoinAcceptDelay2 = rxDelay;
 8013a90:	9002      	str	r0, [sp, #8]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8013a92:	a801      	add	r0, sp, #4
 8013a94:	f002 ff96 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 8013a98:	b910      	cbnz	r0, 8013aa0 <LmHandlerSetJoinRx2Delay+0x1a>
}
 8013a9a:	b00b      	add	sp, #44	; 0x2c
 8013a9c:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8013aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8013aa4:	e7f9      	b.n	8013a9a <LmHandlerSetJoinRx2Delay+0x14>

08013aa6 <LmHandlerGetPingPeriodicity>:
}
 8013aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8013aaa:	4770      	bx	lr

08013aac <LmHandlerSetPingPeriodicity>:
}
 8013aac:	f04f 30ff 	mov.w	r0, #4294967295
 8013ab0:	4770      	bx	lr

08013ab2 <LmHandlerGetBeaconState>:
}
 8013ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ab6:	4770      	bx	lr

08013ab8 <LmHandlerGetNwkKey>:
    if (nwkKey == NULL)
 8013ab8:	b180      	cbz	r0, 8013adc <LmHandlerGetNwkKey+0x24>
{
 8013aba:	b510      	push	{r4, lr}
 8013abc:	b082      	sub	sp, #8
 8013abe:	4604      	mov	r4, r0
    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(NWK_KEY, &keyItem))
 8013ac0:	a901      	add	r1, sp, #4
 8013ac2:	2001      	movs	r0, #1
 8013ac4:	f00c f87e 	bl	801fbc4 <SecureElementGetKeyByID>
 8013ac8:	b958      	cbnz	r0, 8013ae2 <LmHandlerGetNwkKey+0x2a>
    UTIL_MEM_cpy_8( nwkKey, keyItem->KeyValue, 16 );
 8013aca:	2210      	movs	r2, #16
 8013acc:	9901      	ldr	r1, [sp, #4]
 8013ace:	3101      	adds	r1, #1
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	f00e fcb7 	bl	8022444 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 8013ad6:	2000      	movs	r0, #0
}
 8013ad8:	b002      	add	sp, #8
 8013ada:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8013adc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013ae0:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8013ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ae6:	e7f7      	b.n	8013ad8 <LmHandlerGetNwkKey+0x20>

08013ae8 <LmHandlerSetNwkKey>:
{
 8013ae8:	b510      	push	{r4, lr}
 8013aea:	b08a      	sub	sp, #40	; 0x28
 8013aec:	4604      	mov	r4, r0
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8013aee:	f7ff faff 	bl	80130f0 <LmHandlerJoinStatus>
 8013af2:	2801      	cmp	r0, #1
 8013af4:	d00d      	beq.n	8013b12 <LmHandlerSetNwkKey+0x2a>
        mibReq.Type = MIB_NWK_KEY;
 8013af6:	2308      	movs	r3, #8
 8013af8:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NwkKey = nwkKey;
 8013afc:	9402      	str	r4, [sp, #8]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8013afe:	a801      	add	r0, sp, #4
 8013b00:	f002 ff60 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 8013b04:	b118      	cbz	r0, 8013b0e <LmHandlerSetNwkKey+0x26>
            return LORAMAC_HANDLER_ERROR;
 8013b06:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013b0a:	b00a      	add	sp, #40	; 0x28
 8013b0c:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_SUCCESS;
 8013b0e:	2000      	movs	r0, #0
 8013b10:	e7fb      	b.n	8013b0a <LmHandlerSetNwkKey+0x22>
        return LORAMAC_HANDLER_ERROR;
 8013b12:	f04f 30ff 	mov.w	r0, #4294967295
 8013b16:	e7f8      	b.n	8013b0a <LmHandlerSetNwkKey+0x22>

08013b18 <LmHandlerGetAppKey>:
    if (appKey == NULL)
 8013b18:	b180      	cbz	r0, 8013b3c <LmHandlerGetAppKey+0x24>
{
 8013b1a:	b510      	push	{r4, lr}
 8013b1c:	b082      	sub	sp, #8
 8013b1e:	4604      	mov	r4, r0
    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(APP_KEY, &keyItem))
 8013b20:	a901      	add	r1, sp, #4
 8013b22:	2000      	movs	r0, #0
 8013b24:	f00c f84e 	bl	801fbc4 <SecureElementGetKeyByID>
 8013b28:	b958      	cbnz	r0, 8013b42 <LmHandlerGetAppKey+0x2a>
    UTIL_MEM_cpy_8( appKey, keyItem->KeyValue, 16 );
 8013b2a:	2210      	movs	r2, #16
 8013b2c:	9901      	ldr	r1, [sp, #4]
 8013b2e:	3101      	adds	r1, #1
 8013b30:	4620      	mov	r0, r4
 8013b32:	f00e fc87 	bl	8022444 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 8013b36:	2000      	movs	r0, #0
}
 8013b38:	b002      	add	sp, #8
 8013b3a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8013b3c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013b40:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8013b42:	f04f 30ff 	mov.w	r0, #4294967295
 8013b46:	e7f7      	b.n	8013b38 <LmHandlerGetAppKey+0x20>

08013b48 <LmHandlerSetAppKey>:
{
 8013b48:	b510      	push	{r4, lr}
 8013b4a:	b08a      	sub	sp, #40	; 0x28
 8013b4c:	4604      	mov	r4, r0
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8013b4e:	f7ff facf 	bl	80130f0 <LmHandlerJoinStatus>
 8013b52:	2801      	cmp	r0, #1
 8013b54:	d00d      	beq.n	8013b72 <LmHandlerSetAppKey+0x2a>
        mibReq.Type = MIB_APP_KEY;
 8013b56:	2307      	movs	r3, #7
 8013b58:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.AppKey = appKey;
 8013b5c:	9402      	str	r4, [sp, #8]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8013b5e:	a801      	add	r0, sp, #4
 8013b60:	f002 ff30 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 8013b64:	b118      	cbz	r0, 8013b6e <LmHandlerSetAppKey+0x26>
            return LORAMAC_HANDLER_ERROR;
 8013b66:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013b6a:	b00a      	add	sp, #40	; 0x28
 8013b6c:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_SUCCESS;
 8013b6e:	2000      	movs	r0, #0
 8013b70:	e7fb      	b.n	8013b6a <LmHandlerSetAppKey+0x22>
        return LORAMAC_HANDLER_ERROR;
 8013b72:	f04f 30ff 	mov.w	r0, #4294967295
 8013b76:	e7f8      	b.n	8013b6a <LmHandlerSetAppKey+0x22>

08013b78 <LmHandlerGetNwkSKey>:
    if (nwkSKey == NULL)
 8013b78:	b180      	cbz	r0, 8013b9c <LmHandlerGetNwkSKey+0x24>
{
 8013b7a:	b510      	push	{r4, lr}
 8013b7c:	b082      	sub	sp, #8
 8013b7e:	4604      	mov	r4, r0
    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(NWK_S_KEY, &keyItem))
 8013b80:	a901      	add	r1, sp, #4
 8013b82:	2002      	movs	r0, #2
 8013b84:	f00c f81e 	bl	801fbc4 <SecureElementGetKeyByID>
 8013b88:	b958      	cbnz	r0, 8013ba2 <LmHandlerGetNwkSKey+0x2a>
    UTIL_MEM_cpy_8( nwkSKey, keyItem->KeyValue, 16 );
 8013b8a:	2210      	movs	r2, #16
 8013b8c:	9901      	ldr	r1, [sp, #4]
 8013b8e:	3101      	adds	r1, #1
 8013b90:	4620      	mov	r0, r4
 8013b92:	f00e fc57 	bl	8022444 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 8013b96:	2000      	movs	r0, #0
}
 8013b98:	b002      	add	sp, #8
 8013b9a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8013b9c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013ba0:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8013ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ba6:	e7f7      	b.n	8013b98 <LmHandlerGetNwkSKey+0x20>

08013ba8 <LmHandlerSetNwkSKey>:
{
 8013ba8:	b510      	push	{r4, lr}
 8013baa:	b08a      	sub	sp, #40	; 0x28
 8013bac:	4604      	mov	r4, r0
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8013bae:	f7ff fa9f 	bl	80130f0 <LmHandlerJoinStatus>
 8013bb2:	2801      	cmp	r0, #1
 8013bb4:	d00d      	beq.n	8013bd2 <LmHandlerSetNwkSKey+0x2a>
        mibReq.Type = MIB_NWK_S_KEY;
 8013bb6:	2309      	movs	r3, #9
 8013bb8:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NwkSKey = nwkSKey;
 8013bbc:	9402      	str	r4, [sp, #8]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8013bbe:	a801      	add	r0, sp, #4
 8013bc0:	f002 ff00 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 8013bc4:	b118      	cbz	r0, 8013bce <LmHandlerSetNwkSKey+0x26>
            return LORAMAC_HANDLER_ERROR;
 8013bc6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013bca:	b00a      	add	sp, #40	; 0x28
 8013bcc:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_SUCCESS;
 8013bce:	2000      	movs	r0, #0
 8013bd0:	e7fb      	b.n	8013bca <LmHandlerSetNwkSKey+0x22>
        return LORAMAC_HANDLER_ERROR;
 8013bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8013bd6:	e7f8      	b.n	8013bca <LmHandlerSetNwkSKey+0x22>

08013bd8 <LmHandlerGetAppSKey>:
    if (appSKey == NULL)
 8013bd8:	b180      	cbz	r0, 8013bfc <LmHandlerGetAppSKey+0x24>
{
 8013bda:	b510      	push	{r4, lr}
 8013bdc:	b082      	sub	sp, #8
 8013bde:	4604      	mov	r4, r0
    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(APP_S_KEY, &keyItem))
 8013be0:	a901      	add	r1, sp, #4
 8013be2:	2003      	movs	r0, #3
 8013be4:	f00b ffee 	bl	801fbc4 <SecureElementGetKeyByID>
 8013be8:	b958      	cbnz	r0, 8013c02 <LmHandlerGetAppSKey+0x2a>
    UTIL_MEM_cpy_8( appSKey, keyItem->KeyValue, 16 );
 8013bea:	2210      	movs	r2, #16
 8013bec:	9901      	ldr	r1, [sp, #4]
 8013bee:	3101      	adds	r1, #1
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	f00e fc27 	bl	8022444 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 8013bf6:	2000      	movs	r0, #0
}
 8013bf8:	b002      	add	sp, #8
 8013bfa:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8013bfc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013c00:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8013c02:	f04f 30ff 	mov.w	r0, #4294967295
 8013c06:	e7f7      	b.n	8013bf8 <LmHandlerGetAppSKey+0x20>

08013c08 <LmHandlerSetAppSKey>:
{
 8013c08:	b510      	push	{r4, lr}
 8013c0a:	b08a      	sub	sp, #40	; 0x28
 8013c0c:	4604      	mov	r4, r0
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8013c0e:	f7ff fa6f 	bl	80130f0 <LmHandlerJoinStatus>
 8013c12:	2801      	cmp	r0, #1
 8013c14:	d00d      	beq.n	8013c32 <LmHandlerSetAppSKey+0x2a>
        mibReq.Type = MIB_APP_S_KEY;
 8013c16:	230a      	movs	r3, #10
 8013c18:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.AppSKey = appSKey;
 8013c1c:	9402      	str	r4, [sp, #8]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8013c1e:	a801      	add	r0, sp, #4
 8013c20:	f002 fed0 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
 8013c24:	b118      	cbz	r0, 8013c2e <LmHandlerSetAppSKey+0x26>
            return LORAMAC_HANDLER_ERROR;
 8013c26:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013c2a:	b00a      	add	sp, #40	; 0x28
 8013c2c:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_SUCCESS;
 8013c2e:	2000      	movs	r0, #0
 8013c30:	e7fb      	b.n	8013c2a <LmHandlerSetAppSKey+0x22>
        return LORAMAC_HANDLER_ERROR;
 8013c32:	f04f 30ff 	mov.w	r0, #4294967295
 8013c36:	e7f8      	b.n	8013c2a <LmHandlerSetAppSKey+0x22>

08013c38 <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8013c38:	4603      	mov	r3, r0
 8013c3a:	b140      	cbz	r0, 8013c4e <LmhpComplianceInit+0x16>
 8013c3c:	b139      	cbz	r1, 8013c4e <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 8013c3e:	4807      	ldr	r0, [pc, #28]	; (8013c5c <LmhpComplianceInit+0x24>)
 8013c40:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8013c42:	4b07      	ldr	r3, [pc, #28]	; (8013c60 <LmhpComplianceInit+0x28>)
 8013c44:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8013c46:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 8013c48:	2201      	movs	r2, #1
 8013c4a:	701a      	strb	r2, [r3, #0]
 8013c4c:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	4a02      	ldr	r2, [pc, #8]	; (8013c5c <LmhpComplianceInit+0x24>)
 8013c52:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8013c54:	4a02      	ldr	r2, [pc, #8]	; (8013c60 <LmhpComplianceInit+0x28>)
 8013c56:	7013      	strb	r3, [r2, #0]
    }
}
 8013c58:	4770      	bx	lr
 8013c5a:	bf00      	nop
 8013c5c:	20000f1c 	.word	0x20000f1c
 8013c60:	20000ef0 	.word	0x20000ef0

08013c64 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8013c64:	4b01      	ldr	r3, [pc, #4]	; (8013c6c <LmhpComplianceIsInitialized+0x8>)
 8013c66:	7818      	ldrb	r0, [r3, #0]
 8013c68:	4770      	bx	lr
 8013c6a:	bf00      	nop
 8013c6c:	20000ef0 	.word	0x20000ef0

08013c70 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 8013c70:	4b02      	ldr	r3, [pc, #8]	; (8013c7c <LmhpComplianceIsRunning+0xc>)
 8013c72:	7818      	ldrb	r0, [r3, #0]
 8013c74:	b100      	cbz	r0, 8013c78 <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 8013c76:	7858      	ldrb	r0, [r3, #1]
}
 8013c78:	4770      	bx	lr
 8013c7a:	bf00      	nop
 8013c7c:	20000ef0 	.word	0x20000ef0

08013c80 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
    if (ComplianceTestState.Initialized == false)
 8013c80:	4b08      	ldr	r3, [pc, #32]	; (8013ca4 <LmhpComplianceOnMcpsConfirm+0x24>)
 8013c82:	781b      	ldrb	r3, [r3, #0]
 8013c84:	b12b      	cbz	r3, 8013c92 <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8013c86:	4b07      	ldr	r3, [pc, #28]	; (8013ca4 <LmhpComplianceOnMcpsConfirm+0x24>)
 8013c88:	785b      	ldrb	r3, [r3, #1]
 8013c8a:	b113      	cbz	r3, 8013c92 <LmhpComplianceOnMcpsConfirm+0x12>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8013c8c:	7803      	ldrb	r3, [r0, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 8013c8e:	2b01      	cmp	r3, #1
 8013c90:	d000      	beq.n	8013c94 <LmhpComplianceOnMcpsConfirm+0x14>
        (mcpsConfirm->AckReceived != 0))
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 8013c92:	4770      	bx	lr
        (mcpsConfirm->AckReceived != 0))
 8013c94:	7903      	ldrb	r3, [r0, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d0fb      	beq.n	8013c92 <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 8013c9a:	4a02      	ldr	r2, [pc, #8]	; (8013ca4 <LmhpComplianceOnMcpsConfirm+0x24>)
 8013c9c:	8993      	ldrh	r3, [r2, #12]
 8013c9e:	3301      	adds	r3, #1
 8013ca0:	8193      	strh	r3, [r2, #12]
 8013ca2:	e7f6      	b.n	8013c92 <LmhpComplianceOnMcpsConfirm+0x12>
 8013ca4:	20000ef0 	.word	0x20000ef0

08013ca8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 8013ca8:	4b08      	ldr	r3, [pc, #32]	; (8013ccc <LmhpComplianceOnMlmeConfirm+0x24>)
 8013caa:	781b      	ldrb	r3, [r3, #0]
 8013cac:	b12b      	cbz	r3, 8013cba <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8013cae:	4b07      	ldr	r3, [pc, #28]	; (8013ccc <LmhpComplianceOnMlmeConfirm+0x24>)
 8013cb0:	785b      	ldrb	r3, [r3, #1]
 8013cb2:	b113      	cbz	r3, 8013cba <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8013cb4:	7803      	ldrb	r3, [r0, #0]
 8013cb6:	2b04      	cmp	r3, #4
 8013cb8:	d000      	beq.n	8013cbc <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 8013cba:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 8013cbc:	4b03      	ldr	r3, [pc, #12]	; (8013ccc <LmhpComplianceOnMlmeConfirm+0x24>)
 8013cbe:	2201      	movs	r2, #1
 8013cc0:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8013cc2:	7a02      	ldrb	r2, [r0, #8]
 8013cc4:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8013cc6:	7a42      	ldrb	r2, [r0, #9]
 8013cc8:	741a      	strb	r2, [r3, #16]
 8013cca:	e7f6      	b.n	8013cba <LmhpComplianceOnMlmeConfirm+0x12>
 8013ccc:	20000ef0 	.word	0x20000ef0

08013cd0 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 8013cd0:	4770      	bx	lr
	...

08013cd4 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 8013cd4:	4b23      	ldr	r3, [pc, #140]	; (8013d64 <LmhpComplianceTxProcess+0x90>)
 8013cd6:	781b      	ldrb	r3, [r3, #0]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d03e      	beq.n	8013d5a <LmhpComplianceTxProcess+0x86>
    if( ComplianceTestState.IsRunning == false )
 8013cdc:	4b21      	ldr	r3, [pc, #132]	; (8013d64 <LmhpComplianceTxProcess+0x90>)
 8013cde:	785b      	ldrb	r3, [r3, #1]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d03d      	beq.n	8013d60 <LmhpComplianceTxProcess+0x8c>
{
 8013ce4:	b530      	push	{r4, r5, lr}
 8013ce6:	b083      	sub	sp, #12
    if( ComplianceTestState.LinkCheck == true )
 8013ce8:	4b1e      	ldr	r3, [pc, #120]	; (8013d64 <LmhpComplianceTxProcess+0x90>)
 8013cea:	7b9b      	ldrb	r3, [r3, #14]
 8013cec:	b313      	cbz	r3, 8013d34 <LmhpComplianceTxProcess+0x60>
        ComplianceTestState.LinkCheck = false;
 8013cee:	4b1d      	ldr	r3, [pc, #116]	; (8013d64 <LmhpComplianceTxProcess+0x90>)
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 8013cf4:	2203      	movs	r2, #3
 8013cf6:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8013cf8:	689a      	ldr	r2, [r3, #8]
 8013cfa:	2105      	movs	r1, #5
 8013cfc:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8013cfe:	7bd9      	ldrb	r1, [r3, #15]
 8013d00:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8013d02:	7c19      	ldrb	r1, [r3, #16]
 8013d04:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 8013d06:	2201      	movs	r2, #1
 8013d08:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 8013d0a:	23e0      	movs	r3, #224	; 0xe0
 8013d0c:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 8013d10:	4c14      	ldr	r4, [pc, #80]	; (8013d64 <LmhpComplianceTxProcess+0x90>)
 8013d12:	79a3      	ldrb	r3, [r4, #6]
    LmHandlerAppData_t appData =
 8013d14:	f88d 3001 	strb.w	r3, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8013d18:	68a3      	ldr	r3, [r4, #8]
    LmHandlerAppData_t appData =
 8013d1a:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 8013d1c:	4812      	ldr	r0, [pc, #72]	; (8013d68 <LmhpComplianceTxProcess+0x94>)
 8013d1e:	f00e ff4b 	bl	8022bb8 <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 8013d22:	4b12      	ldr	r3, [pc, #72]	; (8013d6c <LmhpComplianceTxProcess+0x98>)
 8013d24:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8013d26:	2301      	movs	r3, #1
 8013d28:	2200      	movs	r2, #0
 8013d2a:	78e1      	ldrb	r1, [r4, #3]
 8013d2c:	4668      	mov	r0, sp
 8013d2e:	47a8      	blx	r5
}
 8013d30:	b003      	add	sp, #12
 8013d32:	bd30      	pop	{r4, r5, pc}
        switch( ComplianceTestState.State )
 8013d34:	4b0b      	ldr	r3, [pc, #44]	; (8013d64 <LmhpComplianceTxProcess+0x90>)
 8013d36:	789b      	ldrb	r3, [r3, #2]
 8013d38:	2b01      	cmp	r3, #1
 8013d3a:	d005      	beq.n	8013d48 <LmhpComplianceTxProcess+0x74>
 8013d3c:	2b04      	cmp	r3, #4
 8013d3e:	d1e4      	bne.n	8013d0a <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.State = 1;
 8013d40:	4b08      	ldr	r3, [pc, #32]	; (8013d64 <LmhpComplianceTxProcess+0x90>)
 8013d42:	2201      	movs	r2, #1
 8013d44:	709a      	strb	r2, [r3, #2]
            break;
 8013d46:	e7e0      	b.n	8013d0a <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.DataBufferSize = 2;
 8013d48:	4b06      	ldr	r3, [pc, #24]	; (8013d64 <LmhpComplianceTxProcess+0x90>)
 8013d4a:	2202      	movs	r2, #2
 8013d4c:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8013d4e:	899a      	ldrh	r2, [r3, #12]
 8013d50:	689b      	ldr	r3, [r3, #8]
 8013d52:	0a11      	lsrs	r1, r2, #8
 8013d54:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8013d56:	705a      	strb	r2, [r3, #1]
            break;
 8013d58:	e7d7      	b.n	8013d0a <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 8013d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8013d5e:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 8013d60:	2000      	movs	r0, #0
}
 8013d62:	4770      	bx	lr
 8013d64:	20000ef0 	.word	0x20000ef0
 8013d68:	20000f04 	.word	0x20000f04
 8013d6c:	200001c0 	.word	0x200001c0

08013d70 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8013d70:	4b8d      	ldr	r3, [pc, #564]	; (8013fa8 <LmhpComplianceOnMcpsIndication+0x238>)
 8013d72:	781b      	ldrb	r3, [r3, #0]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	f000 8116 	beq.w	8013fa6 <LmhpComplianceOnMcpsIndication+0x236>
    if( mcpsIndication->RxData == false )
 8013d7a:	7b43      	ldrb	r3, [r0, #13]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	f000 8112 	beq.w	8013fa6 <LmhpComplianceOnMcpsIndication+0x236>
    if ((ComplianceTestState.IsRunning == true) &&
 8013d82:	4b89      	ldr	r3, [pc, #548]	; (8013fa8 <LmhpComplianceOnMcpsIndication+0x238>)
 8013d84:	785b      	ldrb	r3, [r3, #1]
 8013d86:	b12b      	cbz	r3, 8013d94 <LmhpComplianceOnMcpsIndication+0x24>
        (mcpsIndication->AckReceived == 0))
 8013d88:	7b82      	ldrb	r2, [r0, #14]
    if ((ComplianceTestState.IsRunning == true) &&
 8013d8a:	b91a      	cbnz	r2, 8013d94 <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 8013d8c:	4986      	ldr	r1, [pc, #536]	; (8013fa8 <LmhpComplianceOnMcpsIndication+0x238>)
 8013d8e:	898a      	ldrh	r2, [r1, #12]
 8013d90:	3201      	adds	r2, #1
 8013d92:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8013d94:	78c2      	ldrb	r2, [r0, #3]
 8013d96:	2ae0      	cmp	r2, #224	; 0xe0
 8013d98:	f040 8105 	bne.w	8013fa6 <LmhpComplianceOnMcpsIndication+0x236>
{
 8013d9c:	b510      	push	{r4, lr}
 8013d9e:	b08c      	sub	sp, #48	; 0x30
    if( ComplianceTestState.IsRunning == false )
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d140      	bne.n	8013e26 <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8013da4:	7b03      	ldrb	r3, [r0, #12]
 8013da6:	2b04      	cmp	r3, #4
 8013da8:	d001      	beq.n	8013dae <LmhpComplianceOnMcpsIndication+0x3e>
}
 8013daa:	b00c      	add	sp, #48	; 0x30
 8013dac:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8013dae:	6883      	ldr	r3, [r0, #8]
 8013db0:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8013db2:	2a01      	cmp	r2, #1
 8013db4:	d1f9      	bne.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8013db6:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8013db8:	2a01      	cmp	r2, #1
 8013dba:	d1f6      	bne.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8013dbc:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8013dbe:	2a01      	cmp	r2, #1
 8013dc0:	d1f3      	bne.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8013dc2:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8013dc4:	2b01      	cmp	r3, #1
 8013dc6:	d1f0      	bne.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8013dc8:	4b77      	ldr	r3, [pc, #476]	; (8013fa8 <LmhpComplianceOnMcpsIndication+0x238>)
 8013dca:	2400      	movs	r4, #0
 8013dcc:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 8013dce:	22e0      	movs	r2, #224	; 0xe0
 8013dd0:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8013dd2:	2202      	movs	r2, #2
 8013dd4:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8013dd6:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8013dd8:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8013dda:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8013ddc:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8013dde:	2201      	movs	r2, #1
 8013de0:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8013de2:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 8013de4:	2304      	movs	r3, #4
 8013de6:	f88d 300c 	strb.w	r3, [sp, #12]
            mibReq.Param.AdrEnable = true;
 8013dea:	f88d 2010 	strb.w	r2, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8013dee:	a803      	add	r0, sp, #12
 8013df0:	f002 fde8 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8013df4:	4620      	mov	r0, r4
 8013df6:	f003 f9ed 	bl	80171d4 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8013dfa:	4b6c      	ldr	r3, [pc, #432]	; (8013fac <LmhpComplianceOnMcpsIndication+0x23c>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	685b      	ldr	r3, [r3, #4]
 8013e00:	b103      	cbz	r3, 8013e04 <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 8013e02:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8013e04:	4c6a      	ldr	r4, [pc, #424]	; (8013fb0 <LmhpComplianceOnMcpsIndication+0x240>)
 8013e06:	2200      	movs	r2, #0
 8013e08:	9200      	str	r2, [sp, #0]
 8013e0a:	4b6a      	ldr	r3, [pc, #424]	; (8013fb4 <LmhpComplianceOnMcpsIndication+0x244>)
 8013e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8013e10:	4620      	mov	r0, r4
 8013e12:	f00e fe11 	bl	8022a38 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8013e16:	f241 3188 	movw	r1, #5000	; 0x1388
 8013e1a:	4620      	mov	r0, r4
 8013e1c:	f00e ff12 	bl	8022c44 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8013e20:	f7ff ff58 	bl	8013cd4 <LmhpComplianceTxProcess>
 8013e24:	e7c1      	b.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8013e26:	6882      	ldr	r2, [r0, #8]
 8013e28:	7813      	ldrb	r3, [r2, #0]
 8013e2a:	495f      	ldr	r1, [pc, #380]	; (8013fa8 <LmhpComplianceOnMcpsIndication+0x238>)
 8013e2c:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 8013e2e:	2b0a      	cmp	r3, #10
 8013e30:	d8bb      	bhi.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
 8013e32:	e8df f003 	tbb	[pc, r3]
 8013e36:	2206      	.short	0x2206
 8013e38:	47312b26 	.word	0x47312b26
 8013e3c:	a49d6d4e 	.word	0xa49d6d4e
 8013e40:	ae          	.byte	0xae
 8013e41:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 8013e42:	485b      	ldr	r0, [pc, #364]	; (8013fb0 <LmhpComplianceOnMcpsIndication+0x240>)
 8013e44:	f00e fe56 	bl	8022af4 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8013e48:	4b57      	ldr	r3, [pc, #348]	; (8013fa8 <LmhpComplianceOnMcpsIndication+0x238>)
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8013e4e:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8013e50:	2304      	movs	r3, #4
 8013e52:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8013e56:	4c55      	ldr	r4, [pc, #340]	; (8013fac <LmhpComplianceOnMcpsIndication+0x23c>)
 8013e58:	6823      	ldr	r3, [r4, #0]
 8013e5a:	781b      	ldrb	r3, [r3, #0]
 8013e5c:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8013e60:	a803      	add	r0, sp, #12
 8013e62:	f002 fdaf 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8013e66:	6823      	ldr	r3, [r4, #0]
 8013e68:	7858      	ldrb	r0, [r3, #1]
 8013e6a:	f003 f9b3 	bl	80171d4 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8013e6e:	6823      	ldr	r3, [r4, #0]
 8013e70:	689b      	ldr	r3, [r3, #8]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d099      	beq.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
                    LmhpComplianceParams->StartPeripherals( );
 8013e76:	4798      	blx	r3
            break;
 8013e78:	e797      	b.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = 2;
 8013e7a:	4b4b      	ldr	r3, [pc, #300]	; (8013fa8 <LmhpComplianceOnMcpsIndication+0x238>)
 8013e7c:	2202      	movs	r2, #2
 8013e7e:	719a      	strb	r2, [r3, #6]
            break;
 8013e80:	e793      	b.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = true;
 8013e82:	4b49      	ldr	r3, [pc, #292]	; (8013fa8 <LmhpComplianceOnMcpsIndication+0x238>)
 8013e84:	2201      	movs	r2, #1
 8013e86:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8013e88:	709a      	strb	r2, [r3, #2]
            break;
 8013e8a:	e78e      	b.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8013e8c:	4b46      	ldr	r3, [pc, #280]	; (8013fa8 <LmhpComplianceOnMcpsIndication+0x238>)
 8013e8e:	2200      	movs	r2, #0
 8013e90:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8013e92:	2201      	movs	r2, #1
 8013e94:	709a      	strb	r2, [r3, #2]
            break;
 8013e96:	e788      	b.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8013e98:	7b01      	ldrb	r1, [r0, #12]
 8013e9a:	4b43      	ldr	r3, [pc, #268]	; (8013fa8 <LmhpComplianceOnMcpsIndication+0x238>)
 8013e9c:	7199      	strb	r1, [r3, #6]
            ComplianceTestState.DataBuffer[0] = 4;
 8013e9e:	689c      	ldr	r4, [r3, #8]
 8013ea0:	2304      	movs	r3, #4
 8013ea2:	7023      	strb	r3, [r4, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	e005      	b.n	8013eb4 <LmhpComplianceOnMcpsIndication+0x144>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8013ea8:	6882      	ldr	r2, [r0, #8]
 8013eaa:	5cd2      	ldrb	r2, [r2, r3]
 8013eac:	3201      	adds	r2, #1
 8013eae:	54e2      	strb	r2, [r4, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8013eb0:	3301      	adds	r3, #1
 8013eb2:	b2db      	uxtb	r3, r3
 8013eb4:	4a3c      	ldr	r2, [pc, #240]	; (8013fa8 <LmhpComplianceOnMcpsIndication+0x238>)
 8013eb6:	7952      	ldrb	r2, [r2, #5]
 8013eb8:	428a      	cmp	r2, r1
 8013eba:	bf28      	it	cs
 8013ebc:	460a      	movcs	r2, r1
 8013ebe:	429a      	cmp	r2, r3
 8013ec0:	d8f2      	bhi.n	8013ea8 <LmhpComplianceOnMcpsIndication+0x138>
 8013ec2:	e772      	b.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_LINK_CHECK;
 8013ec4:	2304      	movs	r3, #4
 8013ec6:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8013eca:	a803      	add	r0, sp, #12
 8013ecc:	f002 fff2 	bl	8016eb4 <LoRaMacMlmeRequest>
            break;
 8013ed0:	e76b      	b.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
                TimerStop(&ComplianceTxNextPacketTimer);
 8013ed2:	4837      	ldr	r0, [pc, #220]	; (8013fb0 <LmhpComplianceOnMcpsIndication+0x240>)
 8013ed4:	f00e fe0e 	bl	8022af4 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8013ed8:	4b33      	ldr	r3, [pc, #204]	; (8013fa8 <LmhpComplianceOnMcpsIndication+0x238>)
 8013eda:	2200      	movs	r2, #0
 8013edc:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8013ede:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8013ee0:	2304      	movs	r3, #4
 8013ee2:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8013ee6:	4c31      	ldr	r4, [pc, #196]	; (8013fac <LmhpComplianceOnMcpsIndication+0x23c>)
 8013ee8:	6823      	ldr	r3, [r4, #0]
 8013eea:	781b      	ldrb	r3, [r3, #0]
 8013eec:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8013ef0:	a803      	add	r0, sp, #12
 8013ef2:	f002 fd67 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8013ef6:	6823      	ldr	r3, [r4, #0]
 8013ef8:	7858      	ldrb	r0, [r3, #1]
 8013efa:	f003 f96b 	bl	80171d4 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8013efe:	6823      	ldr	r3, [r4, #0]
 8013f00:	689b      	ldr	r3, [r3, #8]
 8013f02:	b103      	cbz	r3, 8013f06 <LmhpComplianceOnMcpsIndication+0x196>
                    LmhpComplianceParams->StartPeripherals( );
 8013f04:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8013f06:	4b2c      	ldr	r3, [pc, #176]	; (8013fb8 <LmhpComplianceOnMcpsIndication+0x248>)
 8013f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f0a:	2002      	movs	r0, #2
 8013f0c:	4798      	blx	r3
            break;
 8013f0e:	e74c      	b.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
                if( mcpsIndication->BufferSize == 3 )
 8013f10:	7b03      	ldrb	r3, [r0, #12]
 8013f12:	2b03      	cmp	r3, #3
 8013f14:	d008      	beq.n	8013f28 <LmhpComplianceOnMcpsIndication+0x1b8>
                else if( mcpsIndication->BufferSize == 7 )
 8013f16:	2b07      	cmp	r3, #7
 8013f18:	d010      	beq.n	8013f3c <LmhpComplianceOnMcpsIndication+0x1cc>
                LoRaMacMlmeRequest( &mlmeReq );
 8013f1a:	a803      	add	r0, sp, #12
 8013f1c:	f002 ffca 	bl	8016eb4 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8013f20:	4b21      	ldr	r3, [pc, #132]	; (8013fa8 <LmhpComplianceOnMcpsIndication+0x238>)
 8013f22:	2201      	movs	r2, #1
 8013f24:	709a      	strb	r2, [r3, #2]
            break;
 8013f26:	e740      	b.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_TXCW;
 8013f28:	2305      	movs	r3, #5
 8013f2a:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8013f2e:	7851      	ldrb	r1, [r2, #1]
 8013f30:	7893      	ldrb	r3, [r2, #2]
 8013f32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8013f36:	f8ad 3010 	strh.w	r3, [sp, #16]
 8013f3a:	e7ee      	b.n	8013f1a <LmhpComplianceOnMcpsIndication+0x1aa>
                    mlmeReq.Type = MLME_TXCW_1;
 8013f3c:	2306      	movs	r3, #6
 8013f3e:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8013f42:	7851      	ldrb	r1, [r2, #1]
 8013f44:	7893      	ldrb	r3, [r2, #2]
 8013f46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8013f4a:	f8ad 3010 	strh.w	r3, [sp, #16]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8013f4e:	78d1      	ldrb	r1, [r2, #3]
 8013f50:	7913      	ldrb	r3, [r2, #4]
 8013f52:	021b      	lsls	r3, r3, #8
 8013f54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8013f58:	7952      	ldrb	r2, [r2, #5]
 8013f5a:	4313      	orrs	r3, r2
 8013f5c:	2264      	movs	r2, #100	; 0x64
 8013f5e:	fb02 f303 	mul.w	r3, r2, r3
 8013f62:	9305      	str	r3, [sp, #20]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8013f64:	6883      	ldr	r3, [r0, #8]
 8013f66:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8013f6a:	f88d 3018 	strb.w	r3, [sp, #24]
 8013f6e:	e7d4      	b.n	8013f1a <LmhpComplianceOnMcpsIndication+0x1aa>
                mlmeReq.Type = MLME_DEVICE_TIME;
 8013f70:	230a      	movs	r3, #10
 8013f72:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8013f76:	a803      	add	r0, sp, #12
 8013f78:	f002 ff9c 	bl	8016eb4 <LoRaMacMlmeRequest>
            break;
 8013f7c:	e715      	b.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
                mibReq.Type = MIB_DEVICE_CLASS;
 8013f7e:	2300      	movs	r3, #0
 8013f80:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8013f84:	7853      	ldrb	r3, [r2, #1]
 8013f86:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8013f8a:	a803      	add	r0, sp, #12
 8013f8c:	f002 fd1a 	bl	80169c4 <LoRaMacMibSetRequestConfirm>
            break;
 8013f90:	e70b      	b.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8013f92:	230d      	movs	r3, #13
 8013f94:	f88d 300c 	strb.w	r3, [sp, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8013f98:	7853      	ldrb	r3, [r2, #1]
 8013f9a:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 8013f9e:	a803      	add	r0, sp, #12
 8013fa0:	f002 ff88 	bl	8016eb4 <LoRaMacMlmeRequest>
            break;
 8013fa4:	e701      	b.n	8013daa <LmhpComplianceOnMcpsIndication+0x3a>
 8013fa6:	4770      	bx	lr
 8013fa8:	20000ef0 	.word	0x20000ef0
 8013fac:	20000f1c 	.word	0x20000f1c
 8013fb0:	20000f04 	.word	0x20000f04
 8013fb4:	08013fbd 	.word	0x08013fbd
 8013fb8:	200001c0 	.word	0x200001c0

08013fbc <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8013fbc:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 8013fbe:	f7ff fe89 	bl	8013cd4 <LmhpComplianceTxProcess>
}
 8013fc2:	bd08      	pop	{r3, pc}

08013fc4 <LmhpCompliancePackageFactory>:
}
 8013fc4:	4800      	ldr	r0, [pc, #0]	; (8013fc8 <LmhpCompliancePackageFactory+0x4>)
 8013fc6:	4770      	bx	lr
 8013fc8:	200001c0 	.word	0x200001c0

08013fcc <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 8013fcc:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8013fce:	4a06      	ldr	r2, [pc, #24]	; (8013fe8 <OnRadioRxError+0x1c>)
 8013fd0:	7813      	ldrb	r3, [r2, #0]
 8013fd2:	f043 0302 	orr.w	r3, r3, #2
 8013fd6:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8013fd8:	4b04      	ldr	r3, [pc, #16]	; (8013fec <OnRadioRxError+0x20>)
 8013fda:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013fde:	b113      	cbz	r3, 8013fe6 <OnRadioRxError+0x1a>
 8013fe0:	691b      	ldr	r3, [r3, #16]
 8013fe2:	b103      	cbz	r3, 8013fe6 <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8013fe4:	4798      	blx	r3
    }
}
 8013fe6:	bd08      	pop	{r3, pc}
 8013fe8:	20000f20 	.word	0x20000f20
 8013fec:	20000f24 	.word	0x20000f24

08013ff0 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8013ff0:	4b07      	ldr	r3, [pc, #28]	; (8014010 <UpdateRxSlotIdleState+0x20>)
 8013ff2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8013ff6:	2b02      	cmp	r3, #2
 8013ff8:	d004      	beq.n	8014004 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8013ffa:	4b06      	ldr	r3, [pc, #24]	; (8014014 <UpdateRxSlotIdleState+0x24>)
 8013ffc:	2206      	movs	r2, #6
 8013ffe:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 8014002:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8014004:	4b03      	ldr	r3, [pc, #12]	; (8014014 <UpdateRxSlotIdleState+0x24>)
 8014006:	2202      	movs	r2, #2
 8014008:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 801400c:	4770      	bx	lr
 801400e:	bf00      	nop
 8014010:	2000142c 	.word	0x2000142c
 8014014:	20000f24 	.word	0x20000f24

08014018 <LoRaMacEnableRequests>:
}


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8014018:	4b01      	ldr	r3, [pc, #4]	; (8014020 <LoRaMacEnableRequests+0x8>)
 801401a:	f883 0482 	strb.w	r0, [r3, #1154]	; 0x482
}
 801401e:	4770      	bx	lr
 8014020:	20000f24 	.word	0x20000f24

08014024 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8014024:	b530      	push	{r4, r5, lr}
 8014026:	b089      	sub	sp, #36	; 0x24
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8014028:	4b22      	ldr	r3, [pc, #136]	; (80140b4 <LoRaMacHandleIndicationEvents+0x90>)
 801402a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801402e:	f013 0f08 	tst.w	r3, #8
 8014032:	d00e      	beq.n	8014052 <LoRaMacHandleIndicationEvents+0x2e>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8014034:	481f      	ldr	r0, [pc, #124]	; (80140b4 <LoRaMacHandleIndicationEvents+0x90>)
 8014036:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 801403a:	f36f 03c3 	bfc	r3, #3, #1
 801403e:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8014042:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8014046:	68db      	ldr	r3, [r3, #12]
 8014048:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 801404c:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 8014050:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8014052:	4b18      	ldr	r3, [pc, #96]	; (80140b4 <LoRaMacHandleIndicationEvents+0x90>)
 8014054:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8014058:	f013 0f10 	tst.w	r3, #16
 801405c:	d013      	beq.n	8014086 <LoRaMacHandleIndicationEvents+0x62>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 801405e:	2307      	movs	r3, #7
 8014060:	f88d 3004 	strb.w	r3, [sp, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8014064:	2500      	movs	r5, #0
 8014066:	f88d 5005 	strb.w	r5, [sp, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 801406a:	4c12      	ldr	r4, [pc, #72]	; (80140b4 <LoRaMacHandleIndicationEvents+0x90>)
 801406c:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8014070:	68db      	ldr	r3, [r3, #12]
 8014072:	f204 417c 	addw	r1, r4, #1148	; 0x47c
 8014076:	a801      	add	r0, sp, #4
 8014078:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 801407a:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 801407e:	f365 1304 	bfi	r3, r5, #4, #1
 8014082:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8014086:	4b0b      	ldr	r3, [pc, #44]	; (80140b4 <LoRaMacHandleIndicationEvents+0x90>)
 8014088:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801408c:	f013 0f02 	tst.w	r3, #2
 8014090:	d00e      	beq.n	80140b0 <LoRaMacHandleIndicationEvents+0x8c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8014092:	4808      	ldr	r0, [pc, #32]	; (80140b4 <LoRaMacHandleIndicationEvents+0x90>)
 8014094:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8014098:	f36f 0341 	bfc	r3, #1, #1
 801409c:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 80140a0:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 80140a4:	685b      	ldr	r3, [r3, #4]
 80140a6:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 80140aa:	f200 401c 	addw	r0, r0, #1052	; 0x41c
 80140ae:	4798      	blx	r3
    }
}
 80140b0:	b009      	add	sp, #36	; 0x24
 80140b2:	bd30      	pop	{r4, r5, pc}
 80140b4:	20000f24 	.word	0x20000f24

080140b8 <LoRaMacCheckForRxAbort>:
}

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80140b8:	4b05      	ldr	r3, [pc, #20]	; (80140d0 <LoRaMacCheckForRxAbort+0x18>)
 80140ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80140be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80140c2:	d004      	beq.n	80140ce <LoRaMacCheckForRxAbort+0x16>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80140c4:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 80140c8:	4a01      	ldr	r2, [pc, #4]	; (80140d0 <LoRaMacCheckForRxAbort+0x18>)
 80140ca:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 80140ce:	4770      	bx	lr
 80140d0:	20000f24 	.word	0x20000f24

080140d4 <SetMlmeScheduleUplinkIndication>:
    return false;
}

static void SetMlmeScheduleUplinkIndication( void )
{
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80140d4:	4a03      	ldr	r2, [pc, #12]	; (80140e4 <SetMlmeScheduleUplinkIndication+0x10>)
 80140d6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80140da:	f043 0310 	orr.w	r3, r3, #16
 80140de:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 80140e2:	4770      	bx	lr
 80140e4:	20000f24 	.word	0x20000f24

080140e8 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80140e8:	4b06      	ldr	r3, [pc, #24]	; (8014104 <CalculateBackOff+0x1c>)
 80140ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140ec:	b94b      	cbnz	r3, 8014102 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80140ee:	4905      	ldr	r1, [pc, #20]	; (8014104 <CalculateBackOff+0x1c>)
 80140f0:	f8b1 2102 	ldrh.w	r2, [r1, #258]	; 0x102
 80140f4:	4b04      	ldr	r3, [pc, #16]	; (8014108 <CalculateBackOff+0x20>)
 80140f6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80140fa:	3a01      	subs	r2, #1
 80140fc:	fb03 f302 	mul.w	r3, r3, r2
 8014100:	630b      	str	r3, [r1, #48]	; 0x30
    }
}
 8014102:	4770      	bx	lr
 8014104:	2000142c 	.word	0x2000142c
 8014108:	20000f24 	.word	0x20000f24

0801410c <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 801410c:	b510      	push	{r4, lr}
 801410e:	4604      	mov	r4, r0
 8014110:	4608      	mov	r0, r1
 8014112:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8014114:	4b06      	ldr	r3, [pc, #24]	; (8014130 <SetTxContinuousWave1+0x24>)
 8014116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014118:	4622      	mov	r2, r4
 801411a:	b249      	sxtb	r1, r1
 801411c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801411e:	4a05      	ldr	r2, [pc, #20]	; (8014134 <SetTxContinuousWave1+0x28>)
 8014120:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8014124:	f043 0302 	orr.w	r3, r3, #2
 8014128:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 801412c:	2000      	movs	r0, #0
 801412e:	bd10      	pop	{r4, pc}
 8014130:	08028984 	.word	0x08028984
 8014134:	20000f24 	.word	0x20000f24

08014138 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
    return &Nvm;
}
 8014138:	4800      	ldr	r0, [pc, #0]	; (801413c <GetNvmData+0x4>)
 801413a:	4770      	bx	lr
 801413c:	2000142c 	.word	0x2000142c

08014140 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8014140:	4602      	mov	r2, r0
 8014142:	b1f8      	cbz	r0, 8014184 <DetermineFrameType+0x44>
 8014144:	b301      	cbz	r1, 8014188 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8014146:	7b03      	ldrb	r3, [r0, #12]
 8014148:	f013 030f 	ands.w	r3, r3, #15
 801414c:	d005      	beq.n	801415a <DetermineFrameType+0x1a>
 801414e:	f890 0020 	ldrb.w	r0, [r0, #32]
 8014152:	b110      	cbz	r0, 801415a <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8014154:	2000      	movs	r0, #0
 8014156:	7008      	strb	r0, [r1, #0]
 8014158:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801415a:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 801415e:	b910      	cbnz	r0, 8014166 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8014160:	2301      	movs	r3, #1
 8014162:	700b      	strb	r3, [r1, #0]
 8014164:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8014166:	b92b      	cbnz	r3, 8014174 <DetermineFrameType+0x34>
 8014168:	f892 0020 	ldrb.w	r0, [r2, #32]
 801416c:	b910      	cbnz	r0, 8014174 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 801416e:	2302      	movs	r3, #2
 8014170:	700b      	strb	r3, [r1, #0]
 8014172:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8014174:	b953      	cbnz	r3, 801418c <DetermineFrameType+0x4c>
 8014176:	f892 2020 	ldrb.w	r2, [r2, #32]
 801417a:	b14a      	cbz	r2, 8014190 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 801417c:	2203      	movs	r2, #3
 801417e:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8014180:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8014182:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014184:	2003      	movs	r0, #3
 8014186:	4770      	bx	lr
 8014188:	2003      	movs	r0, #3
 801418a:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 801418c:	2017      	movs	r0, #23
 801418e:	4770      	bx	lr
 8014190:	2017      	movs	r0, #23
}
 8014192:	4770      	bx	lr

08014194 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8014194:	4b0f      	ldr	r3, [pc, #60]	; (80141d4 <CheckRetransUnconfirmedUplink+0x40>)
 8014196:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 801419a:	4b0f      	ldr	r3, [pc, #60]	; (80141d8 <CheckRetransUnconfirmedUplink+0x44>)
 801419c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d20f      	bcs.n	80141c4 <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80141a4:	4b0b      	ldr	r3, [pc, #44]	; (80141d4 <CheckRetransUnconfirmedUplink+0x40>)
 80141a6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80141aa:	f013 0f02 	tst.w	r3, #2
 80141ae:	d00b      	beq.n	80141c8 <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80141b0:	4b09      	ldr	r3, [pc, #36]	; (80141d8 <CheckRetransUnconfirmedUplink+0x44>)
 80141b2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80141b6:	b14b      	cbz	r3, 80141cc <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 80141b8:	4b06      	ldr	r3, [pc, #24]	; (80141d4 <CheckRetransUnconfirmedUplink+0x40>)
 80141ba:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80141be:	b13b      	cbz	r3, 80141d0 <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 80141c0:	2000      	movs	r0, #0
 80141c2:	4770      	bx	lr
        return true;
 80141c4:	2001      	movs	r0, #1
 80141c6:	4770      	bx	lr
    return false;
 80141c8:	2000      	movs	r0, #0
 80141ca:	4770      	bx	lr
            return true;
 80141cc:	2001      	movs	r0, #1
 80141ce:	4770      	bx	lr
                return true;
 80141d0:	2001      	movs	r0, #1
}
 80141d2:	4770      	bx	lr
 80141d4:	20000f24 	.word	0x20000f24
 80141d8:	2000142c 	.word	0x2000142c

080141dc <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80141dc:	4b0a      	ldr	r3, [pc, #40]	; (8014208 <CheckRetransConfirmedUplink+0x2c>)
 80141de:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 80141e2:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d209      	bcs.n	80141fe <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80141ea:	4b07      	ldr	r3, [pc, #28]	; (8014208 <CheckRetransConfirmedUplink+0x2c>)
 80141ec:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80141f0:	f013 0f02 	tst.w	r3, #2
 80141f4:	d005      	beq.n	8014202 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80141f6:	4b04      	ldr	r3, [pc, #16]	; (8014208 <CheckRetransConfirmedUplink+0x2c>)
 80141f8:	f893 043c 	ldrb.w	r0, [r3, #1084]	; 0x43c
 80141fc:	4770      	bx	lr
        return true;
 80141fe:	2001      	movs	r0, #1
 8014200:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 8014202:	2000      	movs	r0, #0
}
 8014204:	4770      	bx	lr
 8014206:	bf00      	nop
 8014208:	20000f24 	.word	0x20000f24

0801420c <StopRetransmission>:

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801420c:	4b11      	ldr	r3, [pc, #68]	; (8014254 <StopRetransmission+0x48>)
 801420e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8014212:	f013 0f02 	tst.w	r3, #2
 8014216:	d004      	beq.n	8014222 <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8014218:	4b0e      	ldr	r3, [pc, #56]	; (8014254 <StopRetransmission+0x48>)
 801421a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801421e:	2b01      	cmp	r3, #1
 8014220:	d907      	bls.n	8014232 <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8014222:	4b0d      	ldr	r3, [pc, #52]	; (8014258 <StopRetransmission+0x4c>)
 8014224:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8014228:	b11b      	cbz	r3, 8014232 <StopRetransmission+0x26>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 801422a:	4a0b      	ldr	r2, [pc, #44]	; (8014258 <StopRetransmission+0x4c>)
 801422c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801422e:	3301      	adds	r3, #1
 8014230:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8014232:	4b08      	ldr	r3, [pc, #32]	; (8014254 <StopRetransmission+0x48>)
 8014234:	2200      	movs	r2, #0
 8014236:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 801423a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 801423e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8014242:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8014246:	f022 0202 	bic.w	r2, r2, #2
 801424a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 801424e:	2001      	movs	r0, #1
 8014250:	4770      	bx	lr
 8014252:	bf00      	nop
 8014254:	20000f24 	.word	0x20000f24
 8014258:	2000142c 	.word	0x2000142c

0801425c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 801425c:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 801425e:	4b04      	ldr	r3, [pc, #16]	; (8014270 <CallNvmDataChangeCallback+0x14>)
 8014260:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014264:	b113      	cbz	r3, 801426c <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8014266:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8014268:	b103      	cbz	r3, 801426c <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 801426a:	4798      	blx	r3
    }
}
 801426c:	bd08      	pop	{r3, pc}
 801426e:	bf00      	nop
 8014270:	20000f24 	.word	0x20000f24

08014274 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8014274:	4b04      	ldr	r3, [pc, #16]	; (8014288 <IsRequestPending+0x14>)
 8014276:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
 801427a:	f010 0005 	ands.w	r0, r0, #5
 801427e:	d100      	bne.n	8014282 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8014280:	4770      	bx	lr
        return 1;
 8014282:	2001      	movs	r0, #1
 8014284:	e7fc      	b.n	8014280 <IsRequestPending+0xc>
 8014286:	bf00      	nop
 8014288:	20000f24 	.word	0x20000f24

0801428c <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 801428c:	4a13      	ldr	r2, [pc, #76]	; (80142dc <AckTimeoutRetriesProcess+0x50>)
 801428e:	f892 3412 	ldrb.w	r3, [r2, #1042]	; 0x412
 8014292:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8014296:	4293      	cmp	r3, r2
 8014298:	d207      	bcs.n	80142aa <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 801429a:	3301      	adds	r3, #1
 801429c:	b2db      	uxtb	r3, r3
 801429e:	4a0f      	ldr	r2, [pc, #60]	; (80142dc <AckTimeoutRetriesProcess+0x50>)
 80142a0:	f882 3412 	strb.w	r3, [r2, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80142a4:	f013 0f01 	tst.w	r3, #1
 80142a8:	d100      	bne.n	80142ac <AckTimeoutRetriesProcess+0x20>
 80142aa:	4770      	bx	lr
{
 80142ac:	b510      	push	{r4, lr}
 80142ae:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80142b0:	2322      	movs	r3, #34	; 0x22
 80142b2:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80142b6:	4c0a      	ldr	r4, [pc, #40]	; (80142e0 <AckTimeoutRetriesProcess+0x54>)
 80142b8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80142bc:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80142c0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
 80142c4:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80142c8:	a902      	add	r1, sp, #8
 80142ca:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80142ce:	f003 fffc 	bl	80182ca <RegionGetPhyParam>
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 80142d2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 80142d6:	b004      	add	sp, #16
 80142d8:	bd10      	pop	{r4, pc}
 80142da:	bf00      	nop
 80142dc:	20000f24 	.word	0x20000f24
 80142e0:	2000142c 	.word	0x2000142c

080142e4 <GetMaxAppPayloadWithoutFOptsLength>:
{
 80142e4:	b500      	push	{lr}
 80142e6:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80142e8:	4b0c      	ldr	r3, [pc, #48]	; (801431c <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 80142ea:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80142ee:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 80142f2:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80142f6:	220d      	movs	r2, #13
 80142f8:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80142fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014300:	b113      	cbz	r3, 8014308 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8014302:	230e      	movs	r3, #14
 8014304:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014308:	a902      	add	r1, sp, #8
 801430a:	4b04      	ldr	r3, [pc, #16]	; (801431c <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 801430c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8014310:	f003 ffdb 	bl	80182ca <RegionGetPhyParam>
}
 8014314:	b2c0      	uxtb	r0, r0
 8014316:	b005      	add	sp, #20
 8014318:	f85d fb04 	ldr.w	pc, [sp], #4
 801431c:	2000142c 	.word	0x2000142c

08014320 <ValidatePayloadLength>:
{
 8014320:	b538      	push	{r3, r4, r5, lr}
 8014322:	4605      	mov	r5, r0
 8014324:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8014326:	4608      	mov	r0, r1
 8014328:	f7ff ffdc 	bl	80142e4 <GetMaxAppPayloadWithoutFOptsLength>
 801432c:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 801432e:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8014330:	4293      	cmp	r3, r2
 8014332:	d303      	bcc.n	801433c <ValidatePayloadLength+0x1c>
 8014334:	2aff      	cmp	r2, #255	; 0xff
 8014336:	d903      	bls.n	8014340 <ValidatePayloadLength+0x20>
    return false;
 8014338:	2000      	movs	r0, #0
 801433a:	e000      	b.n	801433e <ValidatePayloadLength+0x1e>
 801433c:	2000      	movs	r0, #0
}
 801433e:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8014340:	2001      	movs	r0, #1
 8014342:	e7fc      	b.n	801433e <ValidatePayloadLength+0x1e>

08014344 <ProcessRadioTxDone>:
{
 8014344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014346:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8014348:	4b39      	ldr	r3, [pc, #228]	; (8014430 <ProcessRadioTxDone+0xec>)
 801434a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801434e:	2b02      	cmp	r3, #2
 8014350:	d002      	beq.n	8014358 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8014352:	4b38      	ldr	r3, [pc, #224]	; (8014434 <ProcessRadioTxDone+0xf0>)
 8014354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014356:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8014358:	4c37      	ldr	r4, [pc, #220]	; (8014438 <ProcessRadioTxDone+0xf4>)
 801435a:	f504 7560 	add.w	r5, r4, #896	; 0x380
 801435e:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 8014362:	4628      	mov	r0, r5
 8014364:	f00e fc6e 	bl	8022c44 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8014368:	4628      	mov	r0, r5
 801436a:	f00e fc25 	bl	8022bb8 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 801436e:	f504 7566 	add.w	r5, r4, #920	; 0x398
 8014372:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8014376:	4628      	mov	r0, r5
 8014378:	f00e fc64 	bl	8022c44 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 801437c:	4628      	mov	r0, r5
 801437e:	f00e fc1b 	bl	8022bb8 <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8014382:	4b2b      	ldr	r3, [pc, #172]	; (8014430 <ProcessRadioTxDone+0xec>)
 8014384:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8014388:	2b02      	cmp	r3, #2
 801438a:	d002      	beq.n	8014392 <ProcessRadioTxDone+0x4e>
 801438c:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8014390:	b1a3      	cbz	r3, 80143bc <ProcessRadioTxDone+0x78>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8014392:	2316      	movs	r3, #22
 8014394:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014398:	a90a      	add	r1, sp, #40	; 0x28
 801439a:	4b25      	ldr	r3, [pc, #148]	; (8014430 <ProcessRadioTxDone+0xec>)
 801439c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80143a0:	f003 ff93 	bl	80182ca <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80143a4:	4c24      	ldr	r4, [pc, #144]	; (8014438 <ProcessRadioTxDone+0xf4>)
 80143a6:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 80143aa:	f504 747e 	add.w	r4, r4, #1016	; 0x3f8
 80143ae:	4401      	add	r1, r0
 80143b0:	4620      	mov	r0, r4
 80143b2:	f00e fc47 	bl	8022c44 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 80143b6:	4620      	mov	r0, r4
 80143b8:	f00e fbfe 	bl	8022bb8 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 80143bc:	4b1f      	ldr	r3, [pc, #124]	; (801443c <ProcessRadioTxDone+0xf8>)
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	4c1b      	ldr	r4, [pc, #108]	; (8014430 <ProcessRadioTxDone+0xec>)
 80143c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 80143c4:	4f1c      	ldr	r7, [pc, #112]	; (8014438 <ProcessRadioTxDone+0xf4>)
 80143c6:	f897 2415 	ldrb.w	r2, [r7, #1045]	; 0x415
 80143ca:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80143ce:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80143d0:	ae0c      	add	r6, sp, #48	; 0x30
 80143d2:	4630      	mov	r0, r6
 80143d4:	f00e fa56 	bl	8022884 <SysTimeGetMcuTime>
 80143d8:	ad02      	add	r5, sp, #8
 80143da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80143de:	9300      	str	r3, [sp, #0]
 80143e0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80143e4:	e896 0006 	ldmia.w	r6, {r1, r2}
 80143e8:	4628      	mov	r0, r5
 80143ea:	f00e f9eb 	bl	80227c4 <SysTimeSub>
 80143ee:	ab07      	add	r3, sp, #28
 80143f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80143f4:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80143f8:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80143fc:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 80143fe:	2301      	movs	r3, #1
 8014400:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8014404:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8014408:	b90b      	cbnz	r3, 801440e <ProcessRadioTxDone+0xca>
        txDone.Joined  = false;
 801440a:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 801440e:	a904      	add	r1, sp, #16
 8014410:	4b07      	ldr	r3, [pc, #28]	; (8014430 <ProcessRadioTxDone+0xec>)
 8014412:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8014416:	f003 ff93 	bl	8018340 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 801441a:	4b07      	ldr	r3, [pc, #28]	; (8014438 <ProcessRadioTxDone+0xf4>)
 801441c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8014420:	b91b      	cbnz	r3, 801442a <ProcessRadioTxDone+0xe6>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8014422:	4b05      	ldr	r3, [pc, #20]	; (8014438 <ProcessRadioTxDone+0xf4>)
 8014424:	2200      	movs	r2, #0
 8014426:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 801442a:	b00f      	add	sp, #60	; 0x3c
 801442c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801442e:	bf00      	nop
 8014430:	2000142c 	.word	0x2000142c
 8014434:	08028984 	.word	0x08028984
 8014438:	20000f24 	.word	0x20000f24
 801443c:	200028a8 	.word	0x200028a8

08014440 <OnAckTimeoutTimerEvent>:
{
 8014440:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8014442:	4c10      	ldr	r4, [pc, #64]	; (8014484 <OnAckTimeoutTimerEvent+0x44>)
 8014444:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 8014448:	f00e fb54 	bl	8022af4 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 801444c:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8014450:	b113      	cbz	r3, 8014458 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8014452:	2201      	movs	r2, #1
 8014454:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8014458:	4b0b      	ldr	r3, [pc, #44]	; (8014488 <OnAckTimeoutTimerEvent+0x48>)
 801445a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801445e:	2b02      	cmp	r3, #2
 8014460:	d007      	beq.n	8014472 <OnAckTimeoutTimerEvent+0x32>
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8014462:	4b08      	ldr	r3, [pc, #32]	; (8014484 <OnAckTimeoutTimerEvent+0x44>)
 8014464:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014468:	b113      	cbz	r3, 8014470 <OnAckTimeoutTimerEvent+0x30>
 801446a:	691b      	ldr	r3, [r3, #16]
 801446c:	b103      	cbz	r3, 8014470 <OnAckTimeoutTimerEvent+0x30>
        MacCtx.MacCallbacks->MacProcessNotify( );
 801446e:	4798      	blx	r3
}
 8014470:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 8014472:	4a04      	ldr	r2, [pc, #16]	; (8014484 <OnAckTimeoutTimerEvent+0x44>)
 8014474:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8014478:	f043 0320 	orr.w	r3, r3, #32
 801447c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8014480:	e7ef      	b.n	8014462 <OnAckTimeoutTimerEvent+0x22>
 8014482:	bf00      	nop
 8014484:	20000f24 	.word	0x20000f24
 8014488:	2000142c 	.word	0x2000142c

0801448c <PrepareRxDoneAbort>:
{
 801448c:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 801448e:	4b0c      	ldr	r3, [pc, #48]	; (80144c0 <PrepareRxDoneAbort+0x34>)
 8014490:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8014494:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014498:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 801449c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80144a0:	b94b      	cbnz	r3, 80144b6 <PrepareRxDoneAbort+0x2a>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80144a2:	4a07      	ldr	r2, [pc, #28]	; (80144c0 <PrepareRxDoneAbort+0x34>)
 80144a4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 80144a8:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 80144ac:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 80144b0:	f7ff fd9e 	bl	8013ff0 <UpdateRxSlotIdleState>
}
 80144b4:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 80144b6:	2000      	movs	r0, #0
 80144b8:	f7ff ffc2 	bl	8014440 <OnAckTimeoutTimerEvent>
 80144bc:	e7f1      	b.n	80144a2 <PrepareRxDoneAbort+0x16>
 80144be:	bf00      	nop
 80144c0:	20000f24 	.word	0x20000f24

080144c4 <LoRaMacCheckForBeaconAcquisition>:
{
 80144c4:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80144c6:	200c      	movs	r0, #12
 80144c8:	f003 f98e 	bl	80177e8 <LoRaMacConfirmQueueIsCmdActive>
 80144cc:	b188      	cbz	r0, 80144f2 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80144ce:	4b0b      	ldr	r3, [pc, #44]	; (80144fc <LoRaMacCheckForBeaconAcquisition+0x38>)
 80144d0:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80144d4:	f010 0f01 	tst.w	r0, #1
 80144d8:	d10d      	bne.n	80144f6 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80144da:	f010 0004 	ands.w	r0, r0, #4
 80144de:	d009      	beq.n	80144f4 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80144e0:	461a      	mov	r2, r3
 80144e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80144e6:	f023 0302 	bic.w	r3, r3, #2
 80144ea:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80144ee:	2001      	movs	r0, #1
 80144f0:	e000      	b.n	80144f4 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 80144f2:	2000      	movs	r0, #0
}
 80144f4:	bd08      	pop	{r3, pc}
    return 0x00;
 80144f6:	2000      	movs	r0, #0
 80144f8:	e7fc      	b.n	80144f4 <LoRaMacCheckForBeaconAcquisition+0x30>
 80144fa:	bf00      	nop
 80144fc:	20000f24 	.word	0x20000f24

08014500 <GetFCntDown>:
{
 8014500:	b570      	push	{r4, r5, r6, lr}
 8014502:	9c05      	ldr	r4, [sp, #20]
 8014504:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8014506:	b1fa      	cbz	r2, 8014548 <GetFCntDown+0x48>
 8014508:	4616      	mov	r6, r2
 801450a:	b1fc      	cbz	r4, 801454c <GetFCntDown+0x4c>
 801450c:	b305      	cbz	r5, 8014550 <GetFCntDown+0x50>
    switch( addrID )
 801450e:	b188      	cbz	r0, 8014534 <GetFCntDown+0x34>
 8014510:	2801      	cmp	r0, #1
 8014512:	d11f      	bne.n	8014554 <GetFCntDown+0x54>
            if( lrWanVersion.Fields.Minor == 1 )
 8014514:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014518:	2a01      	cmp	r2, #1
 801451a:	d002      	beq.n	8014522 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 801451c:	2303      	movs	r3, #3
 801451e:	7023      	strb	r3, [r4, #0]
 8014520:	e00a      	b.n	8014538 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8014522:	b121      	cbz	r1, 801452e <GetFCntDown+0x2e>
 8014524:	2903      	cmp	r1, #3
 8014526:	d002      	beq.n	801452e <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8014528:	2301      	movs	r3, #1
 801452a:	7023      	strb	r3, [r4, #0]
 801452c:	e004      	b.n	8014538 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 801452e:	2302      	movs	r3, #2
 8014530:	7023      	strb	r3, [r4, #0]
 8014532:	e001      	b.n	8014538 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8014534:	2304      	movs	r3, #4
 8014536:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8014538:	462b      	mov	r3, r5
 801453a:	89f2      	ldrh	r2, [r6, #14]
 801453c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014540:	7820      	ldrb	r0, [r4, #0]
 8014542:	f003 fb73 	bl	8017c2c <LoRaMacCryptoGetFCntDown>
}
 8014546:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014548:	200a      	movs	r0, #10
 801454a:	e7fc      	b.n	8014546 <GetFCntDown+0x46>
 801454c:	200a      	movs	r0, #10
 801454e:	e7fa      	b.n	8014546 <GetFCntDown+0x46>
 8014550:	200a      	movs	r0, #10
 8014552:	e7f8      	b.n	8014546 <GetFCntDown+0x46>
    switch( addrID )
 8014554:	2005      	movs	r0, #5
 8014556:	e7f6      	b.n	8014546 <GetFCntDown+0x46>

08014558 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8014558:	2801      	cmp	r0, #1
 801455a:	d900      	bls.n	801455e <RemoveMacCommands+0x6>
 801455c:	4770      	bx	lr
{
 801455e:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8014560:	2a01      	cmp	r2, #1
 8014562:	d105      	bne.n	8014570 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8014564:	f011 0f20 	tst.w	r1, #32
 8014568:	d004      	beq.n	8014574 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801456a:	f002 ffd9 	bl	8017520 <LoRaMacCommandsRemoveStickyAnsCmds>
 801456e:	e001      	b.n	8014574 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8014570:	f002 ffd6 	bl	8017520 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8014574:	bd08      	pop	{r3, pc}
	...

08014578 <ProcessMacCommands>:
{
 8014578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801457c:	b08f      	sub	sp, #60	; 0x3c
 801457e:	4605      	mov	r5, r0
 8014580:	460c      	mov	r4, r1
 8014582:	4616      	mov	r6, r2
 8014584:	4698      	mov	r8, r3
    uint8_t status = 0;
 8014586:	2700      	movs	r7, #0
 8014588:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801458c:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 8014590:	42b4      	cmp	r4, r6
 8014592:	f080 82b8 	bcs.w	8014b06 <ProcessMacCommands+0x58e>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8014596:	5d28      	ldrb	r0, [r5, r4]
 8014598:	f003 f82a 	bl	80175f0 <LoRaMacCommandsGetCmdSize>
 801459c:	4420      	add	r0, r4
 801459e:	42b0      	cmp	r0, r6
 80145a0:	f300 82b1 	bgt.w	8014b06 <ProcessMacCommands+0x58e>
        switch( payload[macIndex++] )
 80145a4:	f104 0901 	add.w	r9, r4, #1
 80145a8:	fa5f f989 	uxtb.w	r9, r9
 80145ac:	5d29      	ldrb	r1, [r5, r4]
 80145ae:	3902      	subs	r1, #2
 80145b0:	2911      	cmp	r1, #17
 80145b2:	f200 82a8 	bhi.w	8014b06 <ProcessMacCommands+0x58e>
 80145b6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80145ba:	0012      	.short	0x0012
 80145bc:	00920029 	.word	0x00920029
 80145c0:	00ed00a6 	.word	0x00ed00a6
 80145c4:	013c0105 	.word	0x013c0105
 80145c8:	01ab0155 	.word	0x01ab0155
 80145cc:	02a602a6 	.word	0x02a602a6
 80145d0:	02a601db 	.word	0x02a601db
 80145d4:	023202a6 	.word	0x023202a6
 80145d8:	02690249 	.word	0x02690249
 80145dc:	0285      	.short	0x0285
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80145de:	2004      	movs	r0, #4
 80145e0:	f003 f902 	bl	80177e8 <LoRaMacConfirmQueueIsCmdActive>
 80145e4:	b908      	cbnz	r0, 80145ea <ProcessMacCommands+0x72>
        switch( payload[macIndex++] )
 80145e6:	464c      	mov	r4, r9
 80145e8:	e7d2      	b.n	8014590 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80145ea:	2104      	movs	r1, #4
 80145ec:	2000      	movs	r0, #0
 80145ee:	f003 f8af 	bl	8017750 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80145f2:	1ca3      	adds	r3, r4, #2
 80145f4:	b2db      	uxtb	r3, r3
 80145f6:	f815 1009 	ldrb.w	r1, [r5, r9]
 80145fa:	4ac1      	ldr	r2, [pc, #772]	; (8014900 <ProcessMacCommands+0x388>)
 80145fc:	f882 1454 	strb.w	r1, [r2, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8014600:	3403      	adds	r4, #3
 8014602:	b2e4      	uxtb	r4, r4
 8014604:	5ceb      	ldrb	r3, [r5, r3]
 8014606:	f882 3455 	strb.w	r3, [r2, #1109]	; 0x455
 801460a:	e7c1      	b.n	8014590 <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 801460c:	2300      	movs	r3, #0
 801460e:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8014612:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8014616:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 801461a:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 801461e:	b10f      	cbz	r7, 8014624 <ProcessMacCommands+0xac>
                break;
 8014620:	464c      	mov	r4, r9
 8014622:	e7b5      	b.n	8014590 <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8014624:	f109 33ff 	add.w	r3, r9, #4294967295
 8014628:	442b      	add	r3, r5
 801462a:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 801462c:	eba6 0309 	sub.w	r3, r6, r9
 8014630:	3301      	adds	r3, #1
 8014632:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8014636:	48b3      	ldr	r0, [pc, #716]	; (8014904 <ProcessMacCommands+0x38c>)
 8014638:	f890 30fe 	ldrb.w	r3, [r0, #254]	; 0xfe
 801463c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014640:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8014644:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8014648:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
 801464c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014650:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
 8014654:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8014658:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 801465c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8014660:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8014664:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8014666:	ab05      	add	r3, sp, #20
 8014668:	9301      	str	r3, [sp, #4]
 801466a:	ab03      	add	r3, sp, #12
 801466c:	9300      	str	r3, [sp, #0]
 801466e:	f10d 030b 	add.w	r3, sp, #11
 8014672:	f10d 020a 	add.w	r2, sp, #10
 8014676:	a907      	add	r1, sp, #28
 8014678:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 801467c:	f003 ffae 	bl	80185dc <RegionLinkAdrReq>
 8014680:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 8014684:	f000 0007 	and.w	r0, r0, #7
 8014688:	2807      	cmp	r0, #7
 801468a:	d001      	beq.n	8014690 <ProcessMacCommands+0x118>
{
 801468c:	2400      	movs	r4, #0
 801468e:	e015      	b.n	80146bc <ProcessMacCommands+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8014690:	4b9c      	ldr	r3, [pc, #624]	; (8014904 <ProcessMacCommands+0x38c>)
 8014692:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8014696:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 801469a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 801469e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80146a2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80146a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80146aa:	e7ef      	b.n	801468c <ProcessMacCommands+0x114>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80146ac:	2201      	movs	r2, #1
 80146ae:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80146b2:	2003      	movs	r0, #3
 80146b4:	f002 fed4 	bl	8017460 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80146b8:	3401      	adds	r4, #1
 80146ba:	b2e4      	uxtb	r4, r4
 80146bc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80146c0:	4b91      	ldr	r3, [pc, #580]	; (8014908 <ProcessMacCommands+0x390>)
 80146c2:	fba3 1302 	umull	r1, r3, r3, r2
 80146c6:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 80146ca:	d3ef      	bcc.n	80146ac <ProcessMacCommands+0x134>
                    macIndex += linkAdrNbBytesParsed - 1;
 80146cc:	4491      	add	r9, r2
 80146ce:	fa5f f989 	uxtb.w	r9, r9
 80146d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80146d6:	fa5f f989 	uxtb.w	r9, r9
                    adrBlockFound = true;
 80146da:	2701      	movs	r7, #1
 80146dc:	e7a0      	b.n	8014620 <ProcessMacCommands+0xa8>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80146de:	3402      	adds	r4, #2
 80146e0:	b2e4      	uxtb	r4, r4
 80146e2:	f815 3009 	ldrb.w	r3, [r5, r9]
 80146e6:	f003 030f 	and.w	r3, r3, #15
 80146ea:	4986      	ldr	r1, [pc, #536]	; (8014904 <ProcessMacCommands+0x38c>)
 80146ec:	f881 30ff 	strb.w	r3, [r1, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80146f0:	2201      	movs	r2, #1
 80146f2:	fa02 f303 	lsl.w	r3, r2, r3
 80146f6:	f8a1 3102 	strh.w	r3, [r1, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80146fa:	2200      	movs	r2, #0
 80146fc:	a90b      	add	r1, sp, #44	; 0x2c
 80146fe:	2004      	movs	r0, #4
 8014700:	f002 feae 	bl	8017460 <LoRaMacCommandsAddCmd>
                break;
 8014704:	e744      	b.n	8014590 <ProcessMacCommands+0x18>
                status = 0x07;
 8014706:	2307      	movs	r3, #7
 8014708:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801470c:	f815 3009 	ldrb.w	r3, [r5, r9]
 8014710:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8014714:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8014718:	f915 3009 	ldrsb.w	r3, [r5, r9]
 801471c:	f003 030f 	and.w	r3, r3, #15
 8014720:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 8014724:	1ca3      	adds	r3, r4, #2
 8014726:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8014728:	1ce1      	adds	r1, r4, #3
 801472a:	b2c9      	uxtb	r1, r1
 801472c:	5ceb      	ldrb	r3, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801472e:	1d22      	adds	r2, r4, #4
 8014730:	b2d2      	uxtb	r2, r2
 8014732:	5c69      	ldrb	r1, [r5, r1]
 8014734:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8014738:	3405      	adds	r4, #5
 801473a:	b2e4      	uxtb	r4, r4
 801473c:	5caa      	ldrb	r2, [r5, r2]
 801473e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                rxParamSetupReq.Frequency *= 100;
 8014742:	2264      	movs	r2, #100	; 0x64
 8014744:	fb02 f303 	mul.w	r3, r2, r3
 8014748:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801474a:	a907      	add	r1, sp, #28
 801474c:	4b6d      	ldr	r3, [pc, #436]	; (8014904 <ProcessMacCommands+0x38c>)
 801474e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8014752:	f003 ff85 	bl	8018660 <RegionRxParamSetupReq>
 8014756:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 801475a:	f000 0307 	and.w	r3, r0, #7
 801475e:	2b07      	cmp	r3, #7
 8014760:	d009      	beq.n	8014776 <ProcessMacCommands+0x1fe>
                macCmdPayload[0] = status;
 8014762:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8014766:	2201      	movs	r2, #1
 8014768:	a90b      	add	r1, sp, #44	; 0x2c
 801476a:	2005      	movs	r0, #5
 801476c:	f002 fe78 	bl	8017460 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 8014770:	f7ff fcb0 	bl	80140d4 <SetMlmeScheduleUplinkIndication>
                break;
 8014774:	e70c      	b.n	8014590 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8014776:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801477a:	4b62      	ldr	r3, [pc, #392]	; (8014904 <ProcessMacCommands+0x38c>)
 801477c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8014780:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8014784:	9a08      	ldr	r2, [sp, #32]
 8014786:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8014788:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 801478a:	f89d 201d 	ldrb.w	r2, [sp, #29]
 801478e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8014792:	e7e6      	b.n	8014762 <ProcessMacCommands+0x1ea>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8014794:	4b5a      	ldr	r3, [pc, #360]	; (8014900 <ProcessMacCommands+0x388>)
 8014796:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801479a:	b17b      	cbz	r3, 80147bc <ProcessMacCommands+0x244>
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	b17b      	cbz	r3, 80147c0 <ProcessMacCommands+0x248>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80147a0:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 80147a2:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80147a6:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 80147aa:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80147ae:	2202      	movs	r2, #2
 80147b0:	a90b      	add	r1, sp, #44	; 0x2c
 80147b2:	2006      	movs	r0, #6
 80147b4:	f002 fe54 	bl	8017460 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 80147b8:	464c      	mov	r4, r9
                break;
 80147ba:	e6e9      	b.n	8014590 <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80147bc:	20ff      	movs	r0, #255	; 0xff
 80147be:	e7f0      	b.n	80147a2 <ProcessMacCommands+0x22a>
 80147c0:	20ff      	movs	r0, #255	; 0xff
 80147c2:	e7ee      	b.n	80147a2 <ProcessMacCommands+0x22a>
                status = 0x03;
 80147c4:	2303      	movs	r3, #3
 80147c6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 80147ca:	1ca3      	adds	r3, r4, #2
 80147cc:	b2db      	uxtb	r3, r3
 80147ce:	f915 2009 	ldrsb.w	r2, [r5, r9]
 80147d2:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 80147d6:	aa07      	add	r2, sp, #28
 80147d8:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80147da:	1ce2      	adds	r2, r4, #3
 80147dc:	b2d2      	uxtb	r2, r2
 80147de:	5ceb      	ldrb	r3, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80147e0:	1d21      	adds	r1, r4, #4
 80147e2:	b2c9      	uxtb	r1, r1
 80147e4:	5caa      	ldrb	r2, [r5, r2]
 80147e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80147ea:	1d62      	adds	r2, r4, #5
 80147ec:	b2d2      	uxtb	r2, r2
 80147ee:	5c69      	ldrb	r1, [r5, r1]
 80147f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                chParam.Frequency *= 100;
 80147f4:	2164      	movs	r1, #100	; 0x64
 80147f6:	fb01 f303 	mul.w	r3, r1, r3
 80147fa:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 80147fc:	2300      	movs	r3, #0
 80147fe:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 8014800:	3406      	adds	r4, #6
 8014802:	b2e4      	uxtb	r4, r4
 8014804:	56ab      	ldrsb	r3, [r5, r2]
 8014806:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 801480a:	a905      	add	r1, sp, #20
 801480c:	4b3d      	ldr	r3, [pc, #244]	; (8014904 <ProcessMacCommands+0x38c>)
 801480e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8014812:	f003 ff51 	bl	80186b8 <RegionNewChannelReq>
 8014816:	b2c3      	uxtb	r3, r0
 8014818:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 801481c:	2800      	cmp	r0, #0
 801481e:	f6ff aeb7 	blt.w	8014590 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 8014822:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8014826:	2201      	movs	r2, #1
 8014828:	a90b      	add	r1, sp, #44	; 0x2c
 801482a:	2007      	movs	r0, #7
 801482c:	f002 fe18 	bl	8017460 <LoRaMacCommandsAddCmd>
                break;
 8014830:	e6ae      	b.n	8014590 <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8014832:	3402      	adds	r4, #2
 8014834:	b2e4      	uxtb	r4, r4
 8014836:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 801483a:	f013 020f 	ands.w	r2, r3, #15
 801483e:	d100      	bne.n	8014842 <ProcessMacCommands+0x2ca>
                    delay++;
 8014840:	3201      	adds	r2, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8014842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014846:	fb03 f302 	mul.w	r3, r3, r2
 801484a:	4a2e      	ldr	r2, [pc, #184]	; (8014904 <ProcessMacCommands+0x38c>)
 801484c:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801484e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8014852:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8014854:	2200      	movs	r2, #0
 8014856:	a90b      	add	r1, sp, #44	; 0x2c
 8014858:	2008      	movs	r0, #8
 801485a:	f002 fe01 	bl	8017460 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 801485e:	f7ff fc39 	bl	80140d4 <SetMlmeScheduleUplinkIndication>
                break;
 8014862:	e695      	b.n	8014590 <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 8014864:	3402      	adds	r4, #2
 8014866:	b2e4      	uxtb	r4, r4
 8014868:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 801486c:	2200      	movs	r2, #0
 801486e:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8014872:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8014876:	f013 0f20 	tst.w	r3, #32
 801487a:	d002      	beq.n	8014882 <ProcessMacCommands+0x30a>
                    txParamSetupReq.DownlinkDwellTime = 1;
 801487c:	2201      	movs	r2, #1
 801487e:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8014882:	f013 0f10 	tst.w	r3, #16
 8014886:	d002      	beq.n	801488e <ProcessMacCommands+0x316>
                    txParamSetupReq.UplinkDwellTime = 1;
 8014888:	2201      	movs	r2, #1
 801488a:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 801488e:	f003 030f 	and.w	r3, r3, #15
 8014892:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8014896:	a903      	add	r1, sp, #12
 8014898:	4b1a      	ldr	r3, [pc, #104]	; (8014904 <ProcessMacCommands+0x38c>)
 801489a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801489e:	f003 ff37 	bl	8018710 <RegionTxParamSetupReq>
 80148a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80148a6:	f43f ae73 	beq.w	8014590 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80148aa:	f89d a00c 	ldrb.w	sl, [sp, #12]
 80148ae:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8014904 <ProcessMacCommands+0x38c>
 80148b2:	f889 a074 	strb.w	sl, [r9, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80148b6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80148ba:	f889 3075 	strb.w	r3, [r9, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80148be:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80148c2:	4a12      	ldr	r2, [pc, #72]	; (801490c <ProcessMacCommands+0x394>)
 80148c4:	5cd0      	ldrb	r0, [r2, r3]
 80148c6:	f7f1 fd9f 	bl	8006408 <__aeabi_ui2f>
 80148ca:	f8c9 0078 	str.w	r0, [r9, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80148ce:	2302      	movs	r3, #2
 80148d0:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80148d4:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80148d8:	a907      	add	r1, sp, #28
 80148da:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 80148de:	f003 fcf4 	bl	80182ca <RegionGetPhyParam>
 80148e2:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80148e4:	b240      	sxtb	r0, r0
 80148e6:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 80148ea:	4298      	cmp	r0, r3
 80148ec:	bfb8      	it	lt
 80148ee:	4618      	movlt	r0, r3
 80148f0:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80148f4:	2200      	movs	r2, #0
 80148f6:	a90b      	add	r1, sp, #44	; 0x2c
 80148f8:	2009      	movs	r0, #9
 80148fa:	f002 fdb1 	bl	8017460 <LoRaMacCommandsAddCmd>
                break;
 80148fe:	e647      	b.n	8014590 <ProcessMacCommands+0x18>
 8014900:	20000f24 	.word	0x20000f24
 8014904:	2000142c 	.word	0x2000142c
 8014908:	cccccccd 	.word	0xcccccccd
 801490c:	080282dc 	.word	0x080282dc
                status = 0x03;
 8014910:	2303      	movs	r3, #3
 8014912:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 8014916:	1ca3      	adds	r3, r4, #2
 8014918:	b2db      	uxtb	r3, r3
 801491a:	f815 2009 	ldrb.w	r2, [r5, r9]
 801491e:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8014922:	1ce1      	adds	r1, r4, #3
 8014924:	b2c9      	uxtb	r1, r1
 8014926:	5ceb      	ldrb	r3, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8014928:	1d22      	adds	r2, r4, #4
 801492a:	b2d2      	uxtb	r2, r2
 801492c:	5c69      	ldrb	r1, [r5, r1]
 801492e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8014932:	3405      	adds	r4, #5
 8014934:	b2e4      	uxtb	r4, r4
 8014936:	5caa      	ldrb	r2, [r5, r2]
 8014938:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                dlChannelReq.Rx1Frequency *= 100;
 801493c:	2264      	movs	r2, #100	; 0x64
 801493e:	fb02 f303 	mul.w	r3, r2, r3
 8014942:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8014944:	a907      	add	r1, sp, #28
 8014946:	4b71      	ldr	r3, [pc, #452]	; (8014b0c <ProcessMacCommands+0x594>)
 8014948:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801494c:	f003 ff0c 	bl	8018768 <RegionDlChannelReq>
 8014950:	b2c3      	uxtb	r3, r0
 8014952:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8014956:	2800      	cmp	r0, #0
 8014958:	f6ff ae1a 	blt.w	8014590 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 801495c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8014960:	2201      	movs	r2, #1
 8014962:	a90b      	add	r1, sp, #44	; 0x2c
 8014964:	200a      	movs	r0, #10
 8014966:	f002 fd7b 	bl	8017460 <LoRaMacCommandsAddCmd>
                    SetMlmeScheduleUplinkIndication( );
 801496a:	f7ff fbb3 	bl	80140d4 <SetMlmeScheduleUplinkIndication>
                break;
 801496e:	e60f      	b.n	8014590 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8014970:	200a      	movs	r0, #10
 8014972:	f002 ff39 	bl	80177e8 <LoRaMacConfirmQueueIsCmdActive>
 8014976:	b908      	cbnz	r0, 801497c <ProcessMacCommands+0x404>
        switch( payload[macIndex++] )
 8014978:	464c      	mov	r4, r9
 801497a:	e609      	b.n	8014590 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 801497c:	210a      	movs	r1, #10
 801497e:	2000      	movs	r0, #0
 8014980:	f002 fee6 	bl	8017750 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8014984:	2300      	movs	r3, #0
 8014986:	f8ad 3012 	strh.w	r3, [sp, #18]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 801498a:	1ca1      	adds	r1, r4, #2
 801498c:	b2c9      	uxtb	r1, r1
 801498e:	f815 3009 	ldrb.w	r3, [r5, r9]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8014992:	1ce2      	adds	r2, r4, #3
 8014994:	b2d2      	uxtb	r2, r2
 8014996:	5c69      	ldrb	r1, [r5, r1]
 8014998:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801499c:	1d21      	adds	r1, r4, #4
 801499e:	b2c9      	uxtb	r1, r1
 80149a0:	5caa      	ldrb	r2, [r5, r2]
 80149a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80149a6:	1d62      	adds	r2, r4, #5
 80149a8:	b2d2      	uxtb	r2, r2
 80149aa:	5c69      	ldrb	r1, [r5, r1]
 80149ac:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80149b0:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80149b2:	3406      	adds	r4, #6
 80149b4:	b2e4      	uxtb	r4, r4
 80149b6:	5ca9      	ldrb	r1, [r5, r2]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80149b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80149bc:	fb02 f201 	mul.w	r2, r2, r1
 80149c0:	0a12      	lsrs	r2, r2, #8
 80149c2:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 80149c6:	f10d 0914 	add.w	r9, sp, #20
 80149ca:	9904      	ldr	r1, [sp, #16]
 80149cc:	4618      	mov	r0, r3
 80149ce:	e889 0003 	stmia.w	r9, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80149d2:	4a4f      	ldr	r2, [pc, #316]	; (8014b10 <ProcessMacCommands+0x598>)
 80149d4:	441a      	add	r2, r3
 80149d6:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 80149d8:	f10d 0b1c 	add.w	fp, sp, #28
 80149dc:	4658      	mov	r0, fp
 80149de:	f00d ff31 	bl	8022844 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80149e2:	f8df a130 	ldr.w	sl, [pc, #304]	; 8014b14 <ProcessMacCommands+0x59c>
 80149e6:	f8da 333c 	ldr.w	r3, [sl, #828]	; 0x33c
 80149ea:	9300      	str	r3, [sp, #0]
 80149ec:	f8da 3338 	ldr.w	r3, [sl, #824]	; 0x338
 80149f0:	e899 0006 	ldmia.w	r9, {r1, r2}
 80149f4:	a80c      	add	r0, sp, #48	; 0x30
 80149f6:	f00d fee5 	bl	80227c4 <SysTimeSub>
 80149fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149fc:	9300      	str	r3, [sp, #0]
 80149fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a00:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8014a04:	4648      	mov	r0, r9
 8014a06:	f00d fec0 	bl	802278a <SysTimeAdd>
                    SysTimeSet( sysTime );
 8014a0a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014a0e:	f00d fef7 	bl	8022800 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8014a12:	f002 fc8e 	bl	8017332 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8014a16:	2301      	movs	r3, #1
 8014a18:	f88a 3434 	strb.w	r3, [sl, #1076]	; 0x434
 8014a1c:	e5b8      	b.n	8014590 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8014a1e:	200d      	movs	r0, #13
 8014a20:	f002 fee2 	bl	80177e8 <LoRaMacConfirmQueueIsCmdActive>
 8014a24:	b908      	cbnz	r0, 8014a2a <ProcessMacCommands+0x4b2>
        switch( payload[macIndex++] )
 8014a26:	464c      	mov	r4, r9
 8014a28:	e5b2      	b.n	8014590 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8014a2a:	210d      	movs	r1, #13
 8014a2c:	2000      	movs	r0, #0
 8014a2e:	f002 fe8f 	bl	8017750 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8014a32:	4b38      	ldr	r3, [pc, #224]	; (8014b14 <ProcessMacCommands+0x59c>)
 8014a34:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8014a38:	3b04      	subs	r3, #4
 8014a3a:	b2db      	uxtb	r3, r3
 8014a3c:	2b01      	cmp	r3, #1
 8014a3e:	d801      	bhi.n	8014a44 <ProcessMacCommands+0x4cc>
        switch( payload[macIndex++] )
 8014a40:	464c      	mov	r4, r9
 8014a42:	e5a5      	b.n	8014590 <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 8014a44:	f002 fc71 	bl	801732a <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8014a48:	464c      	mov	r4, r9
 8014a4a:	e5a1      	b.n	8014590 <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 8014a4c:	1ca2      	adds	r2, r4, #2
 8014a4e:	b2d2      	uxtb	r2, r2
 8014a50:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8014a54:	1ce1      	adds	r1, r4, #3
 8014a56:	b2c9      	uxtb	r1, r1
 8014a58:	5caa      	ldrb	r2, [r5, r2]
 8014a5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8014a5e:	1d22      	adds	r2, r4, #4
 8014a60:	b2d2      	uxtb	r2, r2
 8014a62:	5c69      	ldrb	r1, [r5, r1]
 8014a64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8014a68:	3405      	adds	r4, #5
 8014a6a:	b2e4      	uxtb	r4, r4
 8014a6c:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8014a6e:	2164      	movs	r1, #100	; 0x64
 8014a70:	fb01 f103 	mul.w	r1, r1, r3
 8014a74:	f000 000f 	and.w	r0, r0, #15
 8014a78:	f002 fc58 	bl	801732c <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8014a7c:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8014a80:	2201      	movs	r2, #1
 8014a82:	a90b      	add	r1, sp, #44	; 0x2c
 8014a84:	2011      	movs	r0, #17
 8014a86:	f002 fceb 	bl	8017460 <LoRaMacCommandsAddCmd>
                break;
 8014a8a:	e581      	b.n	8014590 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8014a8c:	200e      	movs	r0, #14
 8014a8e:	f002 feab 	bl	80177e8 <LoRaMacConfirmQueueIsCmdActive>
 8014a92:	b908      	cbnz	r0, 8014a98 <ProcessMacCommands+0x520>
        switch( payload[macIndex++] )
 8014a94:	464c      	mov	r4, r9
 8014a96:	e57b      	b.n	8014590 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8014a98:	210e      	movs	r1, #14
 8014a9a:	2000      	movs	r0, #0
 8014a9c:	f002 fe58 	bl	8017750 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8014aa0:	1ca2      	adds	r2, r4, #2
 8014aa2:	b2d2      	uxtb	r2, r2
 8014aa4:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8014aa8:	1ce3      	adds	r3, r4, #3
 8014aaa:	b2db      	uxtb	r3, r3
 8014aac:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8014ab0:	3404      	adds	r4, #4
 8014ab2:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8014ab4:	4a18      	ldr	r2, [pc, #96]	; (8014b18 <ProcessMacCommands+0x5a0>)
 8014ab6:	6812      	ldr	r2, [r2, #0]
 8014ab8:	5ce9      	ldrb	r1, [r5, r3]
 8014aba:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8014abe:	f002 fc37 	bl	8017330 <LoRaMacClassBBeaconTimingAns>
 8014ac2:	e565      	b.n	8014590 <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 8014ac4:	1ca1      	adds	r1, r4, #2
 8014ac6:	b2c9      	uxtb	r1, r1
 8014ac8:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8014acc:	1ce2      	adds	r2, r4, #3
 8014ace:	b2d2      	uxtb	r2, r2
 8014ad0:	5c68      	ldrb	r0, [r5, r1]
 8014ad2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8014ad6:	3404      	adds	r4, #4
 8014ad8:	b2e4      	uxtb	r4, r4
 8014ada:	5ca8      	ldrb	r0, [r5, r2]
 8014adc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8014ae0:	2064      	movs	r0, #100	; 0x64
 8014ae2:	fb00 f003 	mul.w	r0, r0, r3
 8014ae6:	f002 fc25 	bl	8017334 <LoRaMacClassBBeaconFreqReq>
 8014aea:	b140      	cbz	r0, 8014afe <ProcessMacCommands+0x586>
                        macCmdPayload[0] = 1;
 8014aec:	2301      	movs	r3, #1
 8014aee:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8014af2:	2201      	movs	r2, #1
 8014af4:	a90b      	add	r1, sp, #44	; 0x2c
 8014af6:	2013      	movs	r0, #19
 8014af8:	f002 fcb2 	bl	8017460 <LoRaMacCommandsAddCmd>
                break;
 8014afc:	e548      	b.n	8014590 <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 8014afe:	2300      	movs	r3, #0
 8014b00:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8014b04:	e7f5      	b.n	8014af2 <ProcessMacCommands+0x57a>
}
 8014b06:	b00f      	add	sp, #60	; 0x3c
 8014b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b0c:	2000142c 	.word	0x2000142c
 8014b10:	12d53d80 	.word	0x12d53d80
 8014b14:	20000f24 	.word	0x20000f24
 8014b18:	200028ac 	.word	0x200028ac

08014b1c <ProcessRadioRxDone>:
{
 8014b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b20:	b0a3      	sub	sp, #140	; 0x8c
    uint8_t *payload = RxDoneParams.Payload;
 8014b22:	4bbd      	ldr	r3, [pc, #756]	; (8014e18 <ProcessRadioRxDone+0x2fc>)
 8014b24:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 8014b26:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8014b28:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 8014b2c:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 8014b30:	2300      	movs	r3, #0
 8014b32:	9306      	str	r3, [sp, #24]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8014b34:	4ab9      	ldr	r2, [pc, #740]	; (8014e1c <ProcessRadioRxDone+0x300>)
 8014b36:	f8d2 80cc 	ldr.w	r8, [r2, #204]	; 0xcc
    MacCtx.McpsConfirm.AckReceived = false;
 8014b3a:	4cb9      	ldr	r4, [pc, #740]	; (8014e20 <ProcessRadioRxDone+0x304>)
 8014b3c:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 8014b40:	f8a4 947c 	strh.w	r9, [r4, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 8014b44:	f884 747e 	strb.w	r7, [r4, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8014b48:	f894 2480 	ldrb.w	r2, [r4, #1152]	; 0x480
 8014b4c:	f884 247f 	strb.w	r2, [r4, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8014b50:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 8014b54:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8014b58:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 8014b5c:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 8014b60:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 8014b64:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 8014b68:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8014b6c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8014b70:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 8014b74:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8014b78:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    Radio.Sleep( );
 8014b7c:	4ba9      	ldr	r3, [pc, #676]	; (8014e24 <ProcessRadioRxDone+0x308>)
 8014b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b80:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8014b82:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8014b86:	f00d ffb5 	bl	8022af4 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8014b8a:	4629      	mov	r1, r5
 8014b8c:	4630      	mov	r0, r6
 8014b8e:	f002 fbb9 	bl	8017304 <LoRaMacClassBRxBeacon>
 8014b92:	b998      	cbnz	r0, 8014bbc <ProcessRadioRxDone+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8014b94:	4ba1      	ldr	r3, [pc, #644]	; (8014e1c <ProcessRadioRxDone+0x300>)
 8014b96:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8014b9a:	2b01      	cmp	r3, #1
 8014b9c:	d013      	beq.n	8014bc6 <ProcessRadioRxDone+0xaa>
    macHdr.Value = payload[pktHeaderLen++];
 8014b9e:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8014ba0:	0963      	lsrs	r3, r4, #5
 8014ba2:	3b01      	subs	r3, #1
 8014ba4:	2b06      	cmp	r3, #6
 8014ba6:	f200 827c 	bhi.w	80150a2 <ProcessRadioRxDone+0x586>
 8014baa:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014bae:	0029      	.short	0x0029
 8014bb0:	00a7027a 	.word	0x00a7027a
 8014bb4:	00a3027a 	.word	0x00a3027a
 8014bb8:	0254027a 	.word	0x0254027a
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8014bbc:	f8a4 9472 	strh.w	r9, [r4, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8014bc0:	f884 7474 	strb.w	r7, [r4, #1140]	; 0x474
        return;
 8014bc4:	e282      	b.n	80150cc <ProcessRadioRxDone+0x5b0>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8014bc6:	f002 fba1 	bl	801730c <LoRaMacClassBIsPingExpected>
 8014bca:	b150      	cbz	r0, 8014be2 <ProcessRadioRxDone+0xc6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8014bcc:	2000      	movs	r0, #0
 8014bce:	f002 fb92 	bl	80172f6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8014bd2:	2000      	movs	r0, #0
 8014bd4:	f002 fb94 	bl	8017300 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8014bd8:	4b91      	ldr	r3, [pc, #580]	; (8014e20 <ProcessRadioRxDone+0x304>)
 8014bda:	2204      	movs	r2, #4
 8014bdc:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8014be0:	e7dd      	b.n	8014b9e <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8014be2:	f002 fb95 	bl	8017310 <LoRaMacClassBIsMulticastExpected>
 8014be6:	2800      	cmp	r0, #0
 8014be8:	d0d9      	beq.n	8014b9e <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8014bea:	2000      	movs	r0, #0
 8014bec:	f002 fb84 	bl	80172f8 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8014bf0:	2000      	movs	r0, #0
 8014bf2:	f002 fb86 	bl	8017302 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8014bf6:	4b8a      	ldr	r3, [pc, #552]	; (8014e20 <ProcessRadioRxDone+0x304>)
 8014bf8:	2205      	movs	r2, #5
 8014bfa:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8014bfe:	e7ce      	b.n	8014b9e <ProcessRadioRxDone+0x82>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8014c00:	2d10      	cmp	r5, #16
 8014c02:	d95a      	bls.n	8014cba <ProcessRadioRxDone+0x19e>
            macMsgJoinAccept.Buffer = payload;
 8014c04:	9607      	str	r6, [sp, #28]
            macMsgJoinAccept.BufSize = size;
 8014c06:	b2ed      	uxtb	r5, r5
 8014c08:	f88d 5020 	strb.w	r5, [sp, #32]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8014c0c:	4b83      	ldr	r3, [pc, #524]	; (8014e1c <ProcessRadioRxDone+0x300>)
 8014c0e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d158      	bne.n	8014cc8 <ProcessRadioRxDone+0x1ac>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8014c16:	f00b f925 	bl	801fe64 <SecureElementGetJoinEui>
 8014c1a:	4601      	mov	r1, r0
 8014c1c:	aa07      	add	r2, sp, #28
 8014c1e:	20ff      	movs	r0, #255	; 0xff
 8014c20:	f003 f978 	bl	8017f14 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8014c24:	2800      	cmp	r0, #0
 8014c26:	d15b      	bne.n	8014ce0 <ProcessRadioRxDone+0x1c4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8014c28:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8014c2c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8014c30:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8014c34:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 8014c38:	4b78      	ldr	r3, [pc, #480]	; (8014e1c <ProcessRadioRxDone+0x300>)
 8014c3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8014c3e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8014c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c44:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8014c48:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8014c4c:	f3c2 1102 	ubfx	r1, r2, #4, #3
 8014c50:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8014c54:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8014c58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8014c5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8014c60:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8014c64:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8014c66:	b90a      	cbnz	r2, 8014c6c <ProcessRadioRxDone+0x150>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8014c68:	2201      	movs	r2, #1
 8014c6a:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8014c6c:	4c6b      	ldr	r4, [pc, #428]	; (8014e1c <ProcessRadioRxDone+0x300>)
 8014c6e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8014c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014c74:	fb03 f302 	mul.w	r3, r3, r2
 8014c78:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8014c7a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8014c7e:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8014c80:	2300      	movs	r3, #0
 8014c82:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8014c86:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8014c8a:	9320      	str	r3, [sp, #128]	; 0x80
                applyCFList.Size = size - 17;
 8014c8c:	3d11      	subs	r5, #17
 8014c8e:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8014c92:	a920      	add	r1, sp, #128	; 0x80
 8014c94:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8014c98:	f003 fbcd 	bl	8018436 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8014c9c:	2302      	movs	r3, #2
 8014c9e:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8014ca2:	2001      	movs	r0, #1
 8014ca4:	f002 fda0 	bl	80177e8 <LoRaMacConfirmQueueIsCmdActive>
 8014ca8:	b9a8      	cbnz	r0, 8014cd6 <ProcessRadioRxDone+0x1ba>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8014caa:	4a5d      	ldr	r2, [pc, #372]	; (8014e20 <ProcessRadioRxDone+0x304>)
 8014cac:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8014cb0:	f043 0308 	orr.w	r3, r3, #8
 8014cb4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8014cb8:	e1e7      	b.n	801508a <ProcessRadioRxDone+0x56e>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014cba:	4b59      	ldr	r3, [pc, #356]	; (8014e20 <ProcessRadioRxDone+0x304>)
 8014cbc:	2201      	movs	r2, #1
 8014cbe:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8014cc2:	f7ff fbe3 	bl	801448c <PrepareRxDoneAbort>
                return;
 8014cc6:	e201      	b.n	80150cc <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014cc8:	4b55      	ldr	r3, [pc, #340]	; (8014e20 <ProcessRadioRxDone+0x304>)
 8014cca:	2201      	movs	r2, #1
 8014ccc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8014cd0:	f7ff fbdc 	bl	801448c <PrepareRxDoneAbort>
                return;
 8014cd4:	e1fa      	b.n	80150cc <ProcessRadioRxDone+0x5b0>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8014cd6:	2101      	movs	r1, #1
 8014cd8:	2000      	movs	r0, #0
 8014cda:	f002 fd39 	bl	8017750 <LoRaMacConfirmQueueSetStatus>
 8014cde:	e7e4      	b.n	8014caa <ProcessRadioRxDone+0x18e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8014ce0:	2001      	movs	r0, #1
 8014ce2:	f002 fd81 	bl	80177e8 <LoRaMacConfirmQueueIsCmdActive>
 8014ce6:	2800      	cmp	r0, #0
 8014ce8:	d0df      	beq.n	8014caa <ProcessRadioRxDone+0x18e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8014cea:	2101      	movs	r1, #1
 8014cec:	2007      	movs	r0, #7
 8014cee:	f002 fd2f 	bl	8017750 <LoRaMacConfirmQueueSetStatus>
 8014cf2:	e7da      	b.n	8014caa <ProcessRadioRxDone+0x18e>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8014cf4:	4b4a      	ldr	r3, [pc, #296]	; (8014e20 <ProcessRadioRxDone+0x304>)
 8014cf6:	2201      	movs	r2, #1
 8014cf8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014cfc:	4b47      	ldr	r3, [pc, #284]	; (8014e1c <ProcessRadioRxDone+0x300>)
 8014cfe:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8014d02:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8014d06:	4a46      	ldr	r2, [pc, #280]	; (8014e20 <ProcessRadioRxDone+0x304>)
 8014d08:	f992 2420 	ldrsb.w	r2, [r2, #1056]	; 0x420
 8014d0c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8014d10:	220d      	movs	r2, #13
 8014d12:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8014d16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014d1a:	b113      	cbz	r3, 8014d22 <ProcessRadioRxDone+0x206>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8014d1c:	230e      	movs	r3, #14
 8014d1e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014d22:	a91e      	add	r1, sp, #120	; 0x78
 8014d24:	4b3d      	ldr	r3, [pc, #244]	; (8014e1c <ProcessRadioRxDone+0x300>)
 8014d26:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8014d2a:	f003 face 	bl	80182ca <RegionGetPhyParam>
 8014d2e:	901d      	str	r0, [sp, #116]	; 0x74
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8014d30:	f1a5 030d 	sub.w	r3, r5, #13
 8014d34:	b21b      	sxth	r3, r3
 8014d36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014d3a:	b200      	sxth	r0, r0
 8014d3c:	4283      	cmp	r3, r0
 8014d3e:	dc01      	bgt.n	8014d44 <ProcessRadioRxDone+0x228>
 8014d40:	2d0b      	cmp	r5, #11
 8014d42:	d806      	bhi.n	8014d52 <ProcessRadioRxDone+0x236>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014d44:	4b36      	ldr	r3, [pc, #216]	; (8014e20 <ProcessRadioRxDone+0x304>)
 8014d46:	2201      	movs	r2, #1
 8014d48:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8014d4c:	f7ff fb9e 	bl	801448c <PrepareRxDoneAbort>
                return;
 8014d50:	e1bc      	b.n	80150cc <ProcessRadioRxDone+0x5b0>
            macMsgData.Buffer = payload;
 8014d52:	9611      	str	r6, [sp, #68]	; 0x44
            macMsgData.BufSize = size;
 8014d54:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8014d58:	4b33      	ldr	r3, [pc, #204]	; (8014e28 <ProcessRadioRxDone+0x30c>)
 8014d5a:	931a      	str	r3, [sp, #104]	; 0x68
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8014d5c:	23ff      	movs	r3, #255	; 0xff
 8014d5e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8014d62:	a811      	add	r0, sp, #68	; 0x44
 8014d64:	f003 f99a 	bl	801809c <LoRaMacParserData>
 8014d68:	2800      	cmp	r0, #0
 8014d6a:	d146      	bne.n	8014dfa <ProcessRadioRxDone+0x2de>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8014d6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014d6e:	4b2c      	ldr	r3, [pc, #176]	; (8014e20 <ProcessRadioRxDone+0x304>)
 8014d70:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8014d74:	f10d 0116 	add.w	r1, sp, #22
 8014d78:	a811      	add	r0, sp, #68	; 0x44
 8014d7a:	f7ff f9e1 	bl	8014140 <DetermineFrameType>
 8014d7e:	4605      	mov	r5, r0
 8014d80:	2800      	cmp	r0, #0
 8014d82:	d141      	bne.n	8014e08 <ProcessRadioRxDone+0x2ec>
            downLinkCounter = 0;
 8014d84:	2300      	movs	r3, #0
 8014d86:	9306      	str	r3, [sp, #24]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014d88:	4603      	mov	r3, r0
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d04e      	beq.n	8014e2c <ProcessRadioRxDone+0x310>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8014d8e:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8014d90:	2d01      	cmp	r5, #1
 8014d92:	d108      	bne.n	8014da6 <ProcessRadioRxDone+0x28a>
 8014d94:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8014d98:	2b03      	cmp	r3, #3
 8014d9a:	d174      	bne.n	8014e86 <ProcessRadioRxDone+0x36a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8014d9c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014da0:	f013 0f60 	tst.w	r3, #96	; 0x60
 8014da4:	d16f      	bne.n	8014e86 <ProcessRadioRxDone+0x36a>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8014da6:	2315      	movs	r3, #21
 8014da8:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014dac:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8014e1c <ProcessRadioRxDone+0x300>
 8014db0:	a91e      	add	r1, sp, #120	; 0x78
 8014db2:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 8014db6:	f003 fa88 	bl	80182ca <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 8014dba:	ab06      	add	r3, sp, #24
 8014dbc:	9302      	str	r3, [sp, #8]
 8014dbe:	f10d 0317 	add.w	r3, sp, #23
 8014dc2:	9301      	str	r3, [sp, #4]
 8014dc4:	b280      	uxth	r0, r0
 8014dc6:	9000      	str	r0, [sp, #0]
 8014dc8:	f8d9 310c 	ldr.w	r3, [r9, #268]	; 0x10c
 8014dcc:	aa11      	add	r2, sp, #68	; 0x44
 8014dce:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8014dd2:	4630      	mov	r0, r6
 8014dd4:	f7ff fb94 	bl	8014500 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8014dd8:	2800      	cmp	r0, #0
 8014dda:	d075      	beq.n	8014ec8 <ProcessRadioRxDone+0x3ac>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8014ddc:	2807      	cmp	r0, #7
 8014dde:	d059      	beq.n	8014e94 <ProcessRadioRxDone+0x378>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8014de0:	2808      	cmp	r0, #8
 8014de2:	d06c      	beq.n	8014ebe <ProcessRadioRxDone+0x3a2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014de4:	4b0e      	ldr	r3, [pc, #56]	; (8014e20 <ProcessRadioRxDone+0x304>)
 8014de6:	2201      	movs	r2, #1
 8014de8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8014dec:	4b0c      	ldr	r3, [pc, #48]	; (8014e20 <ProcessRadioRxDone+0x304>)
 8014dee:	9a06      	ldr	r2, [sp, #24]
 8014df0:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 8014df4:	f7ff fb4a 	bl	801448c <PrepareRxDoneAbort>
                return;
 8014df8:	e168      	b.n	80150cc <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014dfa:	4b09      	ldr	r3, [pc, #36]	; (8014e20 <ProcessRadioRxDone+0x304>)
 8014dfc:	2201      	movs	r2, #1
 8014dfe:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8014e02:	f7ff fb43 	bl	801448c <PrepareRxDoneAbort>
                return;
 8014e06:	e161      	b.n	80150cc <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014e08:	4b05      	ldr	r3, [pc, #20]	; (8014e20 <ProcessRadioRxDone+0x304>)
 8014e0a:	2201      	movs	r2, #1
 8014e0c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8014e10:	f7ff fb3c 	bl	801448c <PrepareRxDoneAbort>
                return;
 8014e14:	e15a      	b.n	80150cc <ProcessRadioRxDone+0x5b0>
 8014e16:	bf00      	nop
 8014e18:	200028ac 	.word	0x200028ac
 8014e1c:	2000142c 	.word	0x2000142c
 8014e20:	20000f24 	.word	0x20000f24
 8014e24:	08028984 	.word	0x08028984
 8014e28:	2000115c 	.word	0x2000115c
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	49ab      	ldr	r1, [pc, #684]	; (80150dc <ProcessRadioRxDone+0x5c0>)
 8014e30:	222c      	movs	r2, #44	; 0x2c
 8014e32:	fb02 1203 	mla	r2, r2, r3, r1
 8014e36:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8014e3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014e3c:	428a      	cmp	r2, r1
 8014e3e:	d002      	beq.n	8014e46 <ProcessRadioRxDone+0x32a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014e40:	3301      	adds	r3, #1
 8014e42:	b2db      	uxtb	r3, r3
 8014e44:	e7a1      	b.n	8014d8a <ProcessRadioRxDone+0x26e>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8014e46:	4ea5      	ldr	r6, [pc, #660]	; (80150dc <ProcessRadioRxDone+0x5c0>)
 8014e48:	212c      	movs	r1, #44	; 0x2c
 8014e4a:	fb01 6103 	mla	r1, r1, r3, r6
 8014e4e:	f891 10d2 	ldrb.w	r1, [r1, #210]	; 0xd2
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8014e52:	2900      	cmp	r1, #0
 8014e54:	d0f4      	beq.n	8014e40 <ProcessRadioRxDone+0x324>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8014e56:	4633      	mov	r3, r6
 8014e58:	212c      	movs	r1, #44	; 0x2c
 8014e5a:	fb01 6000 	mla	r0, r1, r0, r6
 8014e5e:	f890 60d3 	ldrb.w	r6, [r0, #211]	; 0xd3
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8014e62:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 8014e66:	6809      	ldr	r1, [r1, #0]
 8014e68:	9106      	str	r1, [sp, #24]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8014e6a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8014e6e:	2b02      	cmp	r3, #2
 8014e70:	d002      	beq.n	8014e78 <ProcessRadioRxDone+0x35c>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8014e72:	4690      	mov	r8, r2
                    multicast = 1;
 8014e74:	2501      	movs	r5, #1
 8014e76:	e78b      	b.n	8014d90 <ProcessRadioRxDone+0x274>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8014e78:	4b99      	ldr	r3, [pc, #612]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 8014e7a:	2103      	movs	r1, #3
 8014e7c:	f883 147f 	strb.w	r1, [r3, #1151]	; 0x47f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8014e80:	4690      	mov	r8, r2
                    multicast = 1;
 8014e82:	2501      	movs	r5, #1
 8014e84:	e784      	b.n	8014d90 <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014e86:	4b96      	ldr	r3, [pc, #600]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 8014e88:	2201      	movs	r2, #1
 8014e8a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8014e8e:	f7ff fafd 	bl	801448c <PrepareRxDoneAbort>
                return;
 8014e92:	e11b      	b.n	80150cc <ProcessRadioRxDone+0x5b0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8014e94:	4b92      	ldr	r3, [pc, #584]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 8014e96:	2208      	movs	r2, #8
 8014e98:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8014e9c:	f899 310e 	ldrb.w	r3, [r9, #270]	; 0x10e
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d1a3      	bne.n	8014dec <ProcessRadioRxDone+0x2d0>
 8014ea4:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8014ea8:	2ca0      	cmp	r4, #160	; 0xa0
 8014eaa:	d19f      	bne.n	8014dec <ProcessRadioRxDone+0x2d0>
 8014eac:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
 8014eb0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014eb2:	429a      	cmp	r2, r3
 8014eb4:	d19a      	bne.n	8014dec <ProcessRadioRxDone+0x2d0>
                        Nvm.MacGroup1.SrvAckRequested = true;
 8014eb6:	2201      	movs	r2, #1
 8014eb8:	f889 203a 	strb.w	r2, [r9, #58]	; 0x3a
 8014ebc:	e796      	b.n	8014dec <ProcessRadioRxDone+0x2d0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8014ebe:	4b88      	ldr	r3, [pc, #544]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 8014ec0:	220a      	movs	r2, #10
 8014ec2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8014ec6:	e791      	b.n	8014dec <ProcessRadioRxDone+0x2d0>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8014ec8:	ab11      	add	r3, sp, #68	; 0x44
 8014eca:	9300      	str	r3, [sp, #0]
 8014ecc:	9b06      	ldr	r3, [sp, #24]
 8014ece:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8014ed2:	4641      	mov	r1, r8
 8014ed4:	4630      	mov	r0, r6
 8014ed6:	f002 ff71 	bl	8017dbc <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8014eda:	2800      	cmp	r0, #0
 8014edc:	d13a      	bne.n	8014f54 <ProcessRadioRxDone+0x438>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8014ede:	4b80      	ldr	r3, [pc, #512]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 8014ee0:	2100      	movs	r1, #0
 8014ee2:	f883 141d 	strb.w	r1, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 8014ee6:	f883 541e 	strb.w	r5, [r3, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8014eea:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8014eee:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8014ef2:	f883 0421 	strb.w	r0, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 8014ef6:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 8014efa:	f883 1428 	strb.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8014efe:	9806      	ldr	r0, [sp, #24]
 8014f00:	f8c3 042c 	str.w	r0, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8014f04:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8014f08:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8014f0c:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8014f10:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8014f14:	f893 047f 	ldrb.w	r0, [r3, #1151]	; 0x47f
 8014f18:	2801      	cmp	r0, #1
 8014f1a:	d929      	bls.n	8014f70 <ProcessRadioRxDone+0x454>
            if( multicast == 1 )
 8014f1c:	2d01      	cmp	r5, #1
 8014f1e:	d02a      	beq.n	8014f76 <ProcessRadioRxDone+0x45a>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8014f20:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8014f24:	2ca0      	cmp	r4, #160	; 0xa0
 8014f26:	d02b      	beq.n	8014f80 <ProcessRadioRxDone+0x464>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	4a6c      	ldr	r2, [pc, #432]	; (80150dc <ProcessRadioRxDone+0x5c0>)
 8014f2c:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8014f30:	4a6b      	ldr	r2, [pc, #428]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 8014f32:	f882 341c 	strb.w	r3, [r2, #1052]	; 0x41c
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8014f36:	4b6a      	ldr	r3, [pc, #424]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 8014f38:	f893 2438 	ldrb.w	r2, [r3, #1080]	; 0x438
 8014f3c:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8014f40:	f7ff fb0a 	bl	8014558 <RemoveMacCommands>
            switch( fType )
 8014f44:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8014f48:	2b03      	cmp	r3, #3
 8014f4a:	d87d      	bhi.n	8015048 <ProcessRadioRxDone+0x52c>
 8014f4c:	e8df f003 	tbb	[pc, r3]
 8014f50:	6c5c4a27 	.word	0x6c5c4a27
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8014f54:	2802      	cmp	r0, #2
 8014f56:	d006      	beq.n	8014f66 <ProcessRadioRxDone+0x44a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8014f58:	4b61      	ldr	r3, [pc, #388]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 8014f5a:	220c      	movs	r2, #12
 8014f5c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8014f60:	f7ff fa94 	bl	801448c <PrepareRxDoneAbort>
                return;
 8014f64:	e0b2      	b.n	80150cc <ProcessRadioRxDone+0x5b0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8014f66:	4b5e      	ldr	r3, [pc, #376]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 8014f68:	220b      	movs	r2, #11
 8014f6a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8014f6e:	e7f7      	b.n	8014f60 <ProcessRadioRxDone+0x444>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8014f70:	4b5a      	ldr	r3, [pc, #360]	; (80150dc <ProcessRadioRxDone+0x5c0>)
 8014f72:	6299      	str	r1, [r3, #40]	; 0x28
 8014f74:	e7d2      	b.n	8014f1c <ProcessRadioRxDone+0x400>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8014f76:	4b5a      	ldr	r3, [pc, #360]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 8014f78:	2202      	movs	r2, #2
 8014f7a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8014f7e:	e7da      	b.n	8014f36 <ProcessRadioRxDone+0x41a>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8014f80:	4b56      	ldr	r3, [pc, #344]	; (80150dc <ProcessRadioRxDone+0x5c0>)
 8014f82:	2201      	movs	r2, #1
 8014f84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8014f88:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8014f8c:	b913      	cbnz	r3, 8014f94 <ProcessRadioRxDone+0x478>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8014f8e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014f90:	4b52      	ldr	r3, [pc, #328]	; (80150dc <ProcessRadioRxDone+0x5c0>)
 8014f92:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8014f94:	4b52      	ldr	r3, [pc, #328]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 8014f96:	2201      	movs	r2, #1
 8014f98:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8014f9c:	e7cb      	b.n	8014f36 <ProcessRadioRxDone+0x41a>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8014f9e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8014fa2:	4c4f      	ldr	r4, [pc, #316]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 8014fa4:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8014fa8:	9300      	str	r3, [sp, #0]
 8014faa:	463b      	mov	r3, r7
 8014fac:	f002 020f 	and.w	r2, r2, #15
 8014fb0:	2100      	movs	r1, #0
 8014fb2:	a815      	add	r0, sp, #84	; 0x54
 8014fb4:	f7ff fae0 	bl	8014578 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8014fb8:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8014fbc:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8014fc0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014fc2:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8014fc6:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8014fca:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8014fce:	2301      	movs	r3, #1
 8014fd0:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8014fd4:	4a42      	ldr	r2, [pc, #264]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 8014fd6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8014fda:	f043 0302 	orr.w	r3, r3, #2
 8014fde:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8014fe2:	e052      	b.n	801508a <ProcessRadioRxDone+0x56e>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8014fe4:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8014fe8:	4c3d      	ldr	r4, [pc, #244]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 8014fea:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8014fee:	9300      	str	r3, [sp, #0]
 8014ff0:	463b      	mov	r3, r7
 8014ff2:	f002 020f 	and.w	r2, r2, #15
 8014ff6:	2100      	movs	r1, #0
 8014ff8:	a815      	add	r0, sp, #84	; 0x54
 8014ffa:	f7ff fabd 	bl	8014578 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8014ffe:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8015002:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8015006:	e7e5      	b.n	8014fd4 <ProcessRadioRxDone+0x4b8>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8015008:	4c35      	ldr	r4, [pc, #212]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 801500a:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 801500e:	9300      	str	r3, [sp, #0]
 8015010:	463b      	mov	r3, r7
 8015012:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8015016:	2100      	movs	r1, #0
 8015018:	981a      	ldr	r0, [sp, #104]	; 0x68
 801501a:	f7ff faad 	bl	8014578 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801501e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8015022:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8015026:	e7d5      	b.n	8014fd4 <ProcessRadioRxDone+0x4b8>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8015028:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801502c:	4b2c      	ldr	r3, [pc, #176]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 801502e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8015032:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015034:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8015038:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801503c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8015040:	2201      	movs	r2, #1
 8015042:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8015046:	e7c5      	b.n	8014fd4 <ProcessRadioRxDone+0x4b8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015048:	4b25      	ldr	r3, [pc, #148]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 801504a:	2201      	movs	r2, #1
 801504c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 8015050:	f7ff fa1c 	bl	801448c <PrepareRxDoneAbort>
                    break;
 8015054:	e7be      	b.n	8014fd4 <ProcessRadioRxDone+0x4b8>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8015056:	1e6a      	subs	r2, r5, #1
 8015058:	4c21      	ldr	r4, [pc, #132]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 801505a:	f504 770e 	add.w	r7, r4, #568	; 0x238
 801505e:	b292      	uxth	r2, r2
 8015060:	1c71      	adds	r1, r6, #1
 8015062:	4638      	mov	r0, r7
 8015064:	f00a ff2f 	bl	801fec6 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8015068:	2303      	movs	r3, #3
 801506a:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801506e:	2300      	movs	r3, #0
 8015070:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8015074:	f8c4 7424 	str.w	r7, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8015078:	3d01      	subs	r5, #1
 801507a:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
            MacCtx.MacFlags.Bits.McpsInd = 1;
 801507e:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8015082:	f043 0302 	orr.w	r3, r3, #2
 8015086:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    if( MacCtx.NodeAckRequested == true )
 801508a:	4b15      	ldr	r3, [pc, #84]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 801508c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8015090:	b173      	cbz	r3, 80150b0 <ProcessRadioRxDone+0x594>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8015092:	4b13      	ldr	r3, [pc, #76]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 8015094:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8015098:	b17b      	cbz	r3, 80150ba <ProcessRadioRxDone+0x59e>
            OnAckTimeoutTimerEvent( NULL );
 801509a:	2000      	movs	r0, #0
 801509c:	f7ff f9d0 	bl	8014440 <OnAckTimeoutTimerEvent>
 80150a0:	e00b      	b.n	80150ba <ProcessRadioRxDone+0x59e>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80150a2:	4b0f      	ldr	r3, [pc, #60]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 80150a4:	2201      	movs	r2, #1
 80150a6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 80150aa:	f7ff f9ef 	bl	801448c <PrepareRxDoneAbort>
            break;
 80150ae:	e7ec      	b.n	801508a <ProcessRadioRxDone+0x56e>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80150b0:	4b0a      	ldr	r3, [pc, #40]	; (80150dc <ProcessRadioRxDone+0x5c0>)
 80150b2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80150b6:	2b02      	cmp	r3, #2
 80150b8:	d00b      	beq.n	80150d2 <ProcessRadioRxDone+0x5b6>
    MacCtx.MacFlags.Bits.MacDone = 1;
 80150ba:	4a09      	ldr	r2, [pc, #36]	; (80150e0 <ProcessRadioRxDone+0x5c4>)
 80150bc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80150c0:	f043 0320 	orr.w	r3, r3, #32
 80150c4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 80150c8:	f7fe ff92 	bl	8013ff0 <UpdateRxSlotIdleState>
}
 80150cc:	b023      	add	sp, #140	; 0x8c
 80150ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            OnAckTimeoutTimerEvent( NULL );
 80150d2:	2000      	movs	r0, #0
 80150d4:	f7ff f9b4 	bl	8014440 <OnAckTimeoutTimerEvent>
 80150d8:	e7ef      	b.n	80150ba <ProcessRadioRxDone+0x59e>
 80150da:	bf00      	nop
 80150dc:	2000142c 	.word	0x2000142c
 80150e0:	20000f24 	.word	0x20000f24

080150e4 <ProcessRadioTxTimeout>:
{
 80150e4:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80150e6:	4b0f      	ldr	r3, [pc, #60]	; (8015124 <ProcessRadioTxTimeout+0x40>)
 80150e8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80150ec:	2b02      	cmp	r3, #2
 80150ee:	d002      	beq.n	80150f6 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 80150f0:	4b0d      	ldr	r3, [pc, #52]	; (8015128 <ProcessRadioTxTimeout+0x44>)
 80150f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150f4:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 80150f6:	f7fe ff7b 	bl	8013ff0 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 80150fa:	4c0c      	ldr	r4, [pc, #48]	; (801512c <ProcessRadioTxTimeout+0x48>)
 80150fc:	2002      	movs	r0, #2
 80150fe:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8015102:	f002 fb53 	bl	80177ac <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8015106:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 801510a:	b113      	cbz	r3, 8015112 <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 801510c:	2201      	movs	r2, #1
 801510e:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    MacCtx.MacFlags.Bits.MacDone = 1;
 8015112:	4a06      	ldr	r2, [pc, #24]	; (801512c <ProcessRadioTxTimeout+0x48>)
 8015114:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015118:	f043 0320 	orr.w	r3, r3, #32
 801511c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8015120:	bd10      	pop	{r4, pc}
 8015122:	bf00      	nop
 8015124:	2000142c 	.word	0x2000142c
 8015128:	08028984 	.word	0x08028984
 801512c:	20000f24 	.word	0x20000f24

08015130 <CheckForClassBCollision>:
{
 8015130:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8015132:	f002 f8e9 	bl	8017308 <LoRaMacClassBIsBeaconExpected>
 8015136:	b978      	cbnz	r0, 8015158 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8015138:	4b09      	ldr	r3, [pc, #36]	; (8015160 <CheckForClassBCollision+0x30>)
 801513a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801513e:	2b01      	cmp	r3, #1
 8015140:	d001      	beq.n	8015146 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8015142:	2000      	movs	r0, #0
}
 8015144:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8015146:	f002 f8e1 	bl	801730c <LoRaMacClassBIsPingExpected>
 801514a:	b938      	cbnz	r0, 801515c <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801514c:	f002 f8e0 	bl	8017310 <LoRaMacClassBIsMulticastExpected>
 8015150:	2800      	cmp	r0, #0
 8015152:	d0f7      	beq.n	8015144 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8015154:	200f      	movs	r0, #15
 8015156:	e7f5      	b.n	8015144 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8015158:	200e      	movs	r0, #14
 801515a:	e7f3      	b.n	8015144 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801515c:	200f      	movs	r0, #15
 801515e:	e7f1      	b.n	8015144 <CheckForClassBCollision+0x14>
 8015160:	2000142c 	.word	0x2000142c

08015164 <HandleRadioRxErrorTimeout>:
{
 8015164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015166:	4605      	mov	r5, r0
 8015168:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801516a:	4b37      	ldr	r3, [pc, #220]	; (8015248 <HandleRadioRxErrorTimeout+0xe4>)
 801516c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8015170:	2b02      	cmp	r3, #2
 8015172:	d002      	beq.n	801517a <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8015174:	4b35      	ldr	r3, [pc, #212]	; (801524c <HandleRadioRxErrorTimeout+0xe8>)
 8015176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015178:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801517a:	f002 f8c5 	bl	8017308 <LoRaMacClassBIsBeaconExpected>
 801517e:	4606      	mov	r6, r0
 8015180:	bb00      	cbnz	r0, 80151c4 <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8015182:	4b31      	ldr	r3, [pc, #196]	; (8015248 <HandleRadioRxErrorTimeout+0xe4>)
 8015184:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8015188:	2b01      	cmp	r3, #1
 801518a:	d022      	beq.n	80151d2 <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 801518c:	b9be      	cbnz	r6, 80151be <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 801518e:	4b30      	ldr	r3, [pc, #192]	; (8015250 <HandleRadioRxErrorTimeout+0xec>)
 8015190:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8015194:	2b00      	cmp	r3, #0
 8015196:	d13f      	bne.n	8015218 <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 8015198:	4b2d      	ldr	r3, [pc, #180]	; (8015250 <HandleRadioRxErrorTimeout+0xec>)
 801519a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801519e:	b113      	cbz	r3, 80151a6 <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80151a0:	4b2b      	ldr	r3, [pc, #172]	; (8015250 <HandleRadioRxErrorTimeout+0xec>)
 80151a2:	f883 5439 	strb.w	r5, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80151a6:	4628      	mov	r0, r5
 80151a8:	f002 fb00 	bl	80177ac <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80151ac:	4b26      	ldr	r3, [pc, #152]	; (8015248 <HandleRadioRxErrorTimeout+0xe4>)
 80151ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80151b0:	f00d fc6a 	bl	8022a88 <UTIL_TIMER_GetElapsedTime>
 80151b4:	4b26      	ldr	r3, [pc, #152]	; (8015250 <HandleRadioRxErrorTimeout+0xec>)
 80151b6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 80151ba:	4298      	cmp	r0, r3
 80151bc:	d220      	bcs.n	8015200 <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 80151be:	f7fe ff17 	bl	8013ff0 <UpdateRxSlotIdleState>
}
 80151c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80151c4:	2002      	movs	r0, #2
 80151c6:	f002 f895 	bl	80172f4 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80151ca:	2000      	movs	r0, #0
 80151cc:	f002 f897 	bl	80172fe <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80151d0:	e7d7      	b.n	8015182 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80151d2:	f002 f89b 	bl	801730c <LoRaMacClassBIsPingExpected>
 80151d6:	4607      	mov	r7, r0
 80151d8:	b950      	cbnz	r0, 80151f0 <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80151da:	f002 f899 	bl	8017310 <LoRaMacClassBIsMulticastExpected>
 80151de:	2800      	cmp	r0, #0
 80151e0:	d0d4      	beq.n	801518c <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80151e2:	2000      	movs	r0, #0
 80151e4:	f002 f888 	bl	80172f8 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80151e8:	2000      	movs	r0, #0
 80151ea:	f002 f88a 	bl	8017302 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 80151ee:	e7e6      	b.n	80151be <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80151f0:	2000      	movs	r0, #0
 80151f2:	f002 f880 	bl	80172f6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80151f6:	2000      	movs	r0, #0
 80151f8:	f002 f882 	bl	8017300 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80151fc:	463e      	mov	r6, r7
 80151fe:	e7ec      	b.n	80151da <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8015200:	4c13      	ldr	r4, [pc, #76]	; (8015250 <HandleRadioRxErrorTimeout+0xec>)
 8015202:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8015206:	f00d fc75 	bl	8022af4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 801520a:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 801520e:	f043 0320 	orr.w	r3, r3, #32
 8015212:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
 8015216:	e7d2      	b.n	80151be <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 8015218:	4b0d      	ldr	r3, [pc, #52]	; (8015250 <HandleRadioRxErrorTimeout+0xec>)
 801521a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801521e:	b113      	cbz	r3, 8015226 <HandleRadioRxErrorTimeout+0xc2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8015220:	4b0b      	ldr	r3, [pc, #44]	; (8015250 <HandleRadioRxErrorTimeout+0xec>)
 8015222:	f883 4439 	strb.w	r4, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8015226:	4620      	mov	r0, r4
 8015228:	f002 fac0 	bl	80177ac <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801522c:	4b06      	ldr	r3, [pc, #24]	; (8015248 <HandleRadioRxErrorTimeout+0xe4>)
 801522e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8015232:	2b02      	cmp	r3, #2
 8015234:	d0c3      	beq.n	80151be <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8015236:	4a06      	ldr	r2, [pc, #24]	; (8015250 <HandleRadioRxErrorTimeout+0xec>)
 8015238:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801523c:	f043 0320 	orr.w	r3, r3, #32
 8015240:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8015244:	e7bb      	b.n	80151be <HandleRadioRxErrorTimeout+0x5a>
 8015246:	bf00      	nop
 8015248:	2000142c 	.word	0x2000142c
 801524c:	08028984 	.word	0x08028984
 8015250:	20000f24 	.word	0x20000f24

08015254 <ProcessRadioRxError>:
{
 8015254:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8015256:	2106      	movs	r1, #6
 8015258:	2005      	movs	r0, #5
 801525a:	f7ff ff83 	bl	8015164 <HandleRadioRxErrorTimeout>
}
 801525e:	bd08      	pop	{r3, pc}

08015260 <ProcessRadioRxTimeout>:
{
 8015260:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8015262:	2104      	movs	r1, #4
 8015264:	2003      	movs	r0, #3
 8015266:	f7ff ff7d 	bl	8015164 <HandleRadioRxErrorTimeout>
}
 801526a:	bd08      	pop	{r3, pc}

0801526c <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801526c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015270:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8015272:	4a14      	ldr	r2, [pc, #80]	; (80152c4 <LoRaMacHandleIrqEvents+0x58>)
 8015274:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8015276:	2000      	movs	r0, #0
 8015278:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801527a:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 801527e:	b303      	cbz	r3, 80152c2 <LoRaMacHandleIrqEvents+0x56>
{
 8015280:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 8015282:	b2dc      	uxtb	r4, r3
 8015284:	f013 0f10 	tst.w	r3, #16
 8015288:	d10c      	bne.n	80152a4 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 801528a:	f014 0f08 	tst.w	r4, #8
 801528e:	d10c      	bne.n	80152aa <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8015290:	f014 0f04 	tst.w	r4, #4
 8015294:	d10c      	bne.n	80152b0 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 8015296:	f014 0f02 	tst.w	r4, #2
 801529a:	d10c      	bne.n	80152b6 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 801529c:	f014 0f01 	tst.w	r4, #1
 80152a0:	d10c      	bne.n	80152bc <LoRaMacHandleIrqEvents+0x50>
}
 80152a2:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 80152a4:	f7ff f84e 	bl	8014344 <ProcessRadioTxDone>
 80152a8:	e7ef      	b.n	801528a <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 80152aa:	f7ff fc37 	bl	8014b1c <ProcessRadioRxDone>
 80152ae:	e7ef      	b.n	8015290 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 80152b0:	f7ff ff18 	bl	80150e4 <ProcessRadioTxTimeout>
 80152b4:	e7ef      	b.n	8015296 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 80152b6:	f7ff ffcd 	bl	8015254 <ProcessRadioRxError>
 80152ba:	e7ef      	b.n	801529c <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 80152bc:	f7ff ffd0 	bl	8015260 <ProcessRadioRxTimeout>
}
 80152c0:	e7ef      	b.n	80152a2 <LoRaMacHandleIrqEvents+0x36>
 80152c2:	4770      	bx	lr
 80152c4:	20000f20 	.word	0x20000f20

080152c8 <LoRaMacHandleMlmeRequest>:
{
 80152c8:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80152ca:	4b16      	ldr	r3, [pc, #88]	; (8015324 <LoRaMacHandleMlmeRequest+0x5c>)
 80152cc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80152d0:	f013 0f04 	tst.w	r3, #4
 80152d4:	d100      	bne.n	80152d8 <LoRaMacHandleMlmeRequest+0x10>
}
 80152d6:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80152d8:	2001      	movs	r0, #1
 80152da:	f002 fa85 	bl	80177e8 <LoRaMacConfirmQueueIsCmdActive>
 80152de:	b178      	cbz	r0, 8015300 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 80152e0:	2001      	movs	r0, #1
 80152e2:	f002 fa4b 	bl	801777c <LoRaMacConfirmQueueGetStatus>
 80152e6:	b918      	cbnz	r0, 80152f0 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 80152e8:	4b0e      	ldr	r3, [pc, #56]	; (8015324 <LoRaMacHandleMlmeRequest+0x5c>)
 80152ea:	2200      	movs	r2, #0
 80152ec:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80152f0:	4a0c      	ldr	r2, [pc, #48]	; (8015324 <LoRaMacHandleMlmeRequest+0x5c>)
 80152f2:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 80152f6:	f023 0302 	bic.w	r3, r3, #2
 80152fa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 80152fe:	e7ea      	b.n	80152d6 <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8015300:	2005      	movs	r0, #5
 8015302:	f002 fa71 	bl	80177e8 <LoRaMacConfirmQueueIsCmdActive>
 8015306:	b138      	cbz	r0, 8015318 <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8015308:	4a06      	ldr	r2, [pc, #24]	; (8015324 <LoRaMacHandleMlmeRequest+0x5c>)
 801530a:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 801530e:	f023 0302 	bic.w	r3, r3, #2
 8015312:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8015316:	e7de      	b.n	80152d6 <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8015318:	2006      	movs	r0, #6
 801531a:	f002 fa65 	bl	80177e8 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 801531e:	2800      	cmp	r0, #0
 8015320:	d0d9      	beq.n	80152d6 <LoRaMacHandleMlmeRequest+0xe>
 8015322:	e7f1      	b.n	8015308 <LoRaMacHandleMlmeRequest+0x40>
 8015324:	20000f24 	.word	0x20000f24

08015328 <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 8015328:	4b14      	ldr	r3, [pc, #80]	; (801537c <AckTimeoutRetriesFinalize+0x54>)
 801532a:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 801532e:	b12b      	cbz	r3, 801533c <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8015330:	4b12      	ldr	r3, [pc, #72]	; (801537c <AckTimeoutRetriesFinalize+0x54>)
 8015332:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8015336:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 801533a:	4770      	bx	lr
{
 801533c:	b500      	push	{lr}
 801533e:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015340:	2302      	movs	r3, #2
 8015342:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8015346:	4b0e      	ldr	r3, [pc, #56]	; (8015380 <AckTimeoutRetriesFinalize+0x58>)
 8015348:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 801534c:	9201      	str	r2, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 801534e:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 8015352:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8015354:	a901      	add	r1, sp, #4
 8015356:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801535a:	f003 f81b 	bl	8018394 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 801535e:	4b07      	ldr	r3, [pc, #28]	; (801537c <AckTimeoutRetriesFinalize+0x54>)
 8015360:	2200      	movs	r2, #0
 8015362:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8015366:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 801536a:	4b04      	ldr	r3, [pc, #16]	; (801537c <AckTimeoutRetriesFinalize+0x54>)
 801536c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8015370:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8015374:	b005      	add	sp, #20
 8015376:	f85d fb04 	ldr.w	pc, [sp], #4
 801537a:	bf00      	nop
 801537c:	20000f24 	.word	0x20000f24
 8015380:	2000142c 	.word	0x2000142c

08015384 <SerializeTxFrame>:
{
 8015384:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 8015386:	4b0f      	ldr	r3, [pc, #60]	; (80153c4 <SerializeTxFrame+0x40>)
 8015388:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801538c:	b11b      	cbz	r3, 8015396 <SerializeTxFrame+0x12>
 801538e:	2b04      	cmp	r3, #4
 8015390:	d00a      	beq.n	80153a8 <SerializeTxFrame+0x24>
 8015392:	2003      	movs	r0, #3
}
 8015394:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8015396:	480c      	ldr	r0, [pc, #48]	; (80153c8 <SerializeTxFrame+0x44>)
 8015398:	f002 fedf 	bl	801815a <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801539c:	b968      	cbnz	r0, 80153ba <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 801539e:	4b09      	ldr	r3, [pc, #36]	; (80153c4 <SerializeTxFrame+0x40>)
 80153a0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80153a4:	801a      	strh	r2, [r3, #0]
            break;
 80153a6:	e7f5      	b.n	8015394 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80153a8:	4807      	ldr	r0, [pc, #28]	; (80153c8 <SerializeTxFrame+0x44>)
 80153aa:	f002 ff0c 	bl	80181c6 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80153ae:	b930      	cbnz	r0, 80153be <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80153b0:	4b04      	ldr	r3, [pc, #16]	; (80153c4 <SerializeTxFrame+0x40>)
 80153b2:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80153b6:	801a      	strh	r2, [r3, #0]
            break;
 80153b8:	e7ec      	b.n	8015394 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80153ba:	2011      	movs	r0, #17
 80153bc:	e7ea      	b.n	8015394 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80153be:	2011      	movs	r0, #17
 80153c0:	e7e8      	b.n	8015394 <SerializeTxFrame+0x10>
 80153c2:	bf00      	nop
 80153c4:	20000f24 	.word	0x20000f24
 80153c8:	2000102c 	.word	0x2000102c

080153cc <ComputeRxWindowParameters>:
{
 80153cc:	b570      	push	{r4, r5, r6, lr}
 80153ce:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80153d0:	4c1d      	ldr	r4, [pc, #116]	; (8015448 <ComputeRxWindowParameters+0x7c>)
 80153d2:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80153d6:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 80153da:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 80153de:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 80153e2:	4630      	mov	r0, r6
 80153e4:	f003 fa6d 	bl	80188c2 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80153e8:	4d18      	ldr	r5, [pc, #96]	; (801544c <ComputeRxWindowParameters+0x80>)
 80153ea:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 80153ee:	9300      	str	r3, [sp, #0]
 80153f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80153f2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80153f6:	b241      	sxtb	r1, r0
 80153f8:	4630      	mov	r0, r6
 80153fa:	f003 f872 	bl	80184e2 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80153fe:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 8015402:	9300      	str	r3, [sp, #0]
 8015404:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015406:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 801540a:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 801540e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8015412:	f003 f866 	bl	80184e2 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8015416:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8015418:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 801541c:	440b      	add	r3, r1
 801541e:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8015422:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8015424:	f8d5 23d8 	ldr.w	r2, [r5, #984]	; 0x3d8
 8015428:	4413      	add	r3, r2
 801542a:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 801542e:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8015432:	b93b      	cbnz	r3, 8015444 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8015434:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015436:	4419      	add	r1, r3
 8015438:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801543c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801543e:	440a      	add	r2, r1
 8015440:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 8015444:	b002      	add	sp, #8
 8015446:	bd70      	pop	{r4, r5, r6, pc}
 8015448:	2000142c 	.word	0x2000142c
 801544c:	20000f24 	.word	0x20000f24

08015450 <VerifyTxFrame>:
{
 8015450:	b510      	push	{r4, lr}
 8015452:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8015454:	2300      	movs	r3, #0
 8015456:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8015458:	4b0d      	ldr	r3, [pc, #52]	; (8015490 <VerifyTxFrame+0x40>)
 801545a:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 801545e:	b914      	cbnz	r4, 8015466 <VerifyTxFrame+0x16>
}
 8015460:	4620      	mov	r0, r4
 8015462:	b002      	add	sp, #8
 8015464:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8015466:	a801      	add	r0, sp, #4
 8015468:	f002 f86e 	bl	8017548 <LoRaMacCommandsGetSizeSerializedCmds>
 801546c:	4604      	mov	r4, r0
 801546e:	b968      	cbnz	r0, 801548c <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8015470:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8015474:	4b06      	ldr	r3, [pc, #24]	; (8015490 <VerifyTxFrame+0x40>)
 8015476:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 801547a:	4b06      	ldr	r3, [pc, #24]	; (8015494 <VerifyTxFrame+0x44>)
 801547c:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 8015480:	f7fe ff4e 	bl	8014320 <ValidatePayloadLength>
 8015484:	2800      	cmp	r0, #0
 8015486:	d1eb      	bne.n	8015460 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8015488:	2408      	movs	r4, #8
 801548a:	e7e9      	b.n	8015460 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801548c:	2413      	movs	r4, #19
 801548e:	e7e7      	b.n	8015460 <VerifyTxFrame+0x10>
 8015490:	2000142c 	.word	0x2000142c
 8015494:	20000f24 	.word	0x20000f24

08015498 <SecureFrame>:
{
 8015498:	b530      	push	{r4, r5, lr}
 801549a:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 801549c:	2300      	movs	r3, #0
 801549e:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 80154a0:	4b1a      	ldr	r3, [pc, #104]	; (801550c <SecureFrame+0x74>)
 80154a2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80154a6:	b133      	cbz	r3, 80154b6 <SecureFrame+0x1e>
 80154a8:	4605      	mov	r5, r0
 80154aa:	460c      	mov	r4, r1
 80154ac:	2b04      	cmp	r3, #4
 80154ae:	d00b      	beq.n	80154c8 <SecureFrame+0x30>
 80154b0:	2003      	movs	r0, #3
}
 80154b2:	b003      	add	sp, #12
 80154b4:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80154b6:	4816      	ldr	r0, [pc, #88]	; (8015510 <SecureFrame+0x78>)
 80154b8:	f002 fc10 	bl	8017cdc <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80154bc:	bb00      	cbnz	r0, 8015500 <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80154be:	4b13      	ldr	r3, [pc, #76]	; (801550c <SecureFrame+0x74>)
 80154c0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80154c4:	801a      	strh	r2, [r3, #0]
            break;
 80154c6:	e7f4      	b.n	80154b2 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80154c8:	a801      	add	r0, sp, #4
 80154ca:	f002 fba3 	bl	8017c14 <LoRaMacCryptoGetFCntUp>
 80154ce:	b9c8      	cbnz	r0, 8015504 <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80154d0:	4b0e      	ldr	r3, [pc, #56]	; (801550c <SecureFrame+0x74>)
 80154d2:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80154d6:	b923      	cbnz	r3, 80154e2 <SecureFrame+0x4a>
 80154d8:	4b0c      	ldr	r3, [pc, #48]	; (801550c <SecureFrame+0x74>)
 80154da:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80154de:	2b01      	cmp	r3, #1
 80154e0:	d902      	bls.n	80154e8 <SecureFrame+0x50>
                fCntUp -= 1;
 80154e2:	9b01      	ldr	r3, [sp, #4]
 80154e4:	3b01      	subs	r3, #1
 80154e6:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80154e8:	4b09      	ldr	r3, [pc, #36]	; (8015510 <SecureFrame+0x78>)
 80154ea:	4622      	mov	r2, r4
 80154ec:	4629      	mov	r1, r5
 80154ee:	9801      	ldr	r0, [sp, #4]
 80154f0:	f002 fc20 	bl	8017d34 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80154f4:	b940      	cbnz	r0, 8015508 <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80154f6:	4b05      	ldr	r3, [pc, #20]	; (801550c <SecureFrame+0x74>)
 80154f8:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80154fc:	801a      	strh	r2, [r3, #0]
            break;
 80154fe:	e7d8      	b.n	80154b2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8015500:	2011      	movs	r0, #17
 8015502:	e7d6      	b.n	80154b2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8015504:	2012      	movs	r0, #18
 8015506:	e7d4      	b.n	80154b2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8015508:	2011      	movs	r0, #17
 801550a:	e7d2      	b.n	80154b2 <SecureFrame+0x1a>
 801550c:	20000f24 	.word	0x20000f24
 8015510:	2000102c 	.word	0x2000102c

08015514 <SendFrameOnChannel>:
{
 8015514:	b570      	push	{r4, r5, r6, lr}
 8015516:	b086      	sub	sp, #24
 8015518:	4606      	mov	r6, r0
    int8_t txPower = 0;
 801551a:	2300      	movs	r3, #0
 801551c:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 8015520:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8015524:	4d33      	ldr	r5, [pc, #204]	; (80155f4 <SendFrameOnChannel+0xe0>)
 8015526:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 801552a:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801552e:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 8015532:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8015536:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8015538:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801553a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801553c:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 801553e:	4c2e      	ldr	r4, [pc, #184]	; (80155f8 <SendFrameOnChannel+0xe4>)
 8015540:	8823      	ldrh	r3, [r4, #0]
 8015542:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8015546:	f504 6383 	add.w	r3, r4, #1048	; 0x418
 801554a:	f10d 0207 	add.w	r2, sp, #7
 801554e:	a902      	add	r1, sp, #8
 8015550:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 8015554:	f003 f81a 	bl	801858c <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015558:	2301      	movs	r3, #1
 801555a:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801555e:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 8015562:	f884 343a 	strb.w	r3, [r4, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8015566:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801556a:	f884 343b 	strb.w	r3, [r4, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 801556e:	f8c4 6448 	str.w	r6, [r4, #1096]	; 0x448
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8015572:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
 8015576:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801557a:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801557e:	f001 fec9 	bl	8017314 <LoRaMacClassBIsBeaconModeActive>
 8015582:	bb58      	cbnz	r0, 80155dc <SendFrameOnChannel+0xc8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8015584:	4b1b      	ldr	r3, [pc, #108]	; (80155f4 <SendFrameOnChannel+0xe0>)
 8015586:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801558a:	2b01      	cmp	r3, #1
 801558c:	d02e      	beq.n	80155ec <SendFrameOnChannel+0xd8>
    LoRaMacClassBHaltBeaconing( );
 801558e:	f001 fec4 	bl	801731a <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8015592:	4b18      	ldr	r3, [pc, #96]	; (80155f4 <SendFrameOnChannel+0xe0>)
 8015594:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8015598:	4b17      	ldr	r3, [pc, #92]	; (80155f8 <SendFrameOnChannel+0xe4>)
 801559a:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
 801559e:	b2c0      	uxtb	r0, r0
 80155a0:	f7ff ff7a 	bl	8015498 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 80155a4:	4604      	mov	r4, r0
 80155a6:	b9b0      	cbnz	r0, 80155d6 <SendFrameOnChannel+0xc2>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80155a8:	4b13      	ldr	r3, [pc, #76]	; (80155f8 <SendFrameOnChannel+0xe4>)
 80155aa:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80155ae:	f042 0202 	orr.w	r2, r2, #2
 80155b2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 80155b6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80155ba:	b92b      	cbnz	r3, 80155c8 <SendFrameOnChannel+0xb4>
        MacCtx.ChannelsNbTransCounter++;
 80155bc:	4a0e      	ldr	r2, [pc, #56]	; (80155f8 <SendFrameOnChannel+0xe4>)
 80155be:	f892 3410 	ldrb.w	r3, [r2, #1040]	; 0x410
 80155c2:	3301      	adds	r3, #1
 80155c4:	f882 3410 	strb.w	r3, [r2, #1040]	; 0x410
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80155c8:	4b0c      	ldr	r3, [pc, #48]	; (80155fc <SendFrameOnChannel+0xe8>)
 80155ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155cc:	480a      	ldr	r0, [pc, #40]	; (80155f8 <SendFrameOnChannel+0xe4>)
 80155ce:	f830 1b02 	ldrh.w	r1, [r0], #2
 80155d2:	b2c9      	uxtb	r1, r1
 80155d4:	4798      	blx	r3
}
 80155d6:	4620      	mov	r0, r4
 80155d8:	b006      	add	sp, #24
 80155da:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80155dc:	f8d4 0418 	ldr.w	r0, [r4, #1048]	; 0x418
 80155e0:	f001 feaa 	bl	8017338 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 80155e4:	2800      	cmp	r0, #0
 80155e6:	d0cd      	beq.n	8015584 <SendFrameOnChannel+0x70>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80155e8:	2410      	movs	r4, #16
 80155ea:	e7f4      	b.n	80155d6 <SendFrameOnChannel+0xc2>
        LoRaMacClassBStopRxSlots( );
 80155ec:	f001 fea6 	bl	801733c <LoRaMacClassBStopRxSlots>
 80155f0:	e7cd      	b.n	801558e <SendFrameOnChannel+0x7a>
 80155f2:	bf00      	nop
 80155f4:	2000142c 	.word	0x2000142c
 80155f8:	20000f24 	.word	0x20000f24
 80155fc:	08028984 	.word	0x08028984

08015600 <ScheduleTx>:
{
 8015600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015604:	b08c      	sub	sp, #48	; 0x30
 8015606:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 8015608:	f7ff fd92 	bl	8015130 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 801560c:	4604      	mov	r4, r0
 801560e:	b118      	cbz	r0, 8015618 <ScheduleTx+0x18>
}
 8015610:	4620      	mov	r0, r4
 8015612:	b00c      	add	sp, #48	; 0x30
 8015614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 8015618:	f7fe fd66 	bl	80140e8 <CalculateBackOff>
    status = SerializeTxFrame( );
 801561c:	f7ff feb2 	bl	8015384 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8015620:	4604      	mov	r4, r0
 8015622:	2800      	cmp	r0, #0
 8015624:	d1f4      	bne.n	8015610 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8015626:	4e36      	ldr	r6, [pc, #216]	; (8015700 <ScheduleTx+0x100>)
 8015628:	6b33      	ldr	r3, [r6, #48]	; 0x30
 801562a:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801562c:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8015630:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8015634:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
 8015638:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 801563c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8015640:	4640      	mov	r0, r8
 8015642:	f00d f91f 	bl	8022884 <SysTimeGetMcuTime>
 8015646:	af02      	add	r7, sp, #8
 8015648:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 801564c:	9300      	str	r3, [sp, #0]
 801564e:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
 8015652:	e898 0006 	ldmia.w	r8, {r1, r2}
 8015656:	4638      	mov	r0, r7
 8015658:	f00d f8b4 	bl	80227c4 <SysTimeSub>
 801565c:	ab07      	add	r3, sp, #28
 801565e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8015662:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8015666:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8015668:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 801566a:	2300      	movs	r3, #0
 801566c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 8015670:	2301      	movs	r3, #1
 8015672:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8015676:	4b23      	ldr	r3, [pc, #140]	; (8015704 <ScheduleTx+0x104>)
 8015678:	881b      	ldrh	r3, [r3, #0]
 801567a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 801567e:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 8015682:	b92b      	cbnz	r3, 8015690 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 8015684:	2301      	movs	r3, #1
 8015686:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 801568a:	2300      	movs	r3, #0
 801568c:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8015690:	4a1c      	ldr	r2, [pc, #112]	; (8015704 <ScheduleTx+0x104>)
 8015692:	481b      	ldr	r0, [pc, #108]	; (8015700 <ScheduleTx+0x100>)
 8015694:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015698:	9300      	str	r3, [sp, #0]
 801569a:	f202 4384 	addw	r3, r2, #1156	; 0x484
 801569e:	f202 4215 	addw	r2, r2, #1045	; 0x415
 80156a2:	a904      	add	r1, sp, #16
 80156a4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80156a8:	f003 f8b1 	bl	801880e <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 80156ac:	b1b0      	cbz	r0, 80156dc <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80156ae:	280b      	cmp	r0, #11
 80156b0:	d122      	bne.n	80156f8 <ScheduleTx+0xf8>
 80156b2:	b31d      	cbz	r5, 80156fc <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 80156b4:	4b13      	ldr	r3, [pc, #76]	; (8015704 <ScheduleTx+0x104>)
 80156b6:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
 80156ba:	2900      	cmp	r1, #0
 80156bc:	d0a8      	beq.n	8015610 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80156be:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80156c2:	f042 0220 	orr.w	r2, r2, #32
 80156c6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80156ca:	f503 755a 	add.w	r5, r3, #872	; 0x368
 80156ce:	4628      	mov	r0, r5
 80156d0:	f00d fab8 	bl	8022c44 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 80156d4:	4628      	mov	r0, r5
 80156d6:	f00d fa6f 	bl	8022bb8 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 80156da:	e799      	b.n	8015610 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 80156dc:	f7ff fe76 	bl	80153cc <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 80156e0:	f7ff feb6 	bl	8015450 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 80156e4:	4604      	mov	r4, r0
 80156e6:	2800      	cmp	r0, #0
 80156e8:	d192      	bne.n	8015610 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 80156ea:	4b06      	ldr	r3, [pc, #24]	; (8015704 <ScheduleTx+0x104>)
 80156ec:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 80156f0:	f7ff ff10 	bl	8015514 <SendFrameOnChannel>
 80156f4:	4604      	mov	r4, r0
 80156f6:	e78b      	b.n	8015610 <ScheduleTx+0x10>
            return status;
 80156f8:	4604      	mov	r4, r0
 80156fa:	e789      	b.n	8015610 <ScheduleTx+0x10>
 80156fc:	4604      	mov	r4, r0
 80156fe:	e787      	b.n	8015610 <ScheduleTx+0x10>
 8015700:	2000142c 	.word	0x2000142c
 8015704:	20000f24 	.word	0x20000f24

08015708 <OnTxDelayedTimerEvent>:
{
 8015708:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 801570a:	4c11      	ldr	r4, [pc, #68]	; (8015750 <OnTxDelayedTimerEvent+0x48>)
 801570c:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8015710:	f00d f9f0 	bl	8022af4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8015714:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8015718:	f023 0320 	bic.w	r3, r3, #32
 801571c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 8015720:	2001      	movs	r0, #1
 8015722:	f7ff ff6d 	bl	8015600 <ScheduleTx>
 8015726:	b108      	cbz	r0, 801572c <OnTxDelayedTimerEvent+0x24>
 8015728:	280b      	cmp	r0, #11
 801572a:	d100      	bne.n	801572e <OnTxDelayedTimerEvent+0x26>
}
 801572c:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801572e:	4b09      	ldr	r3, [pc, #36]	; (8015754 <OnTxDelayedTimerEvent+0x4c>)
 8015730:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8015734:	f884 243a 	strb.w	r2, [r4, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8015738:	f894 2412 	ldrb.w	r2, [r4, #1042]	; 0x412
 801573c:	f884 243d 	strb.w	r2, [r4, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8015740:	2009      	movs	r0, #9
 8015742:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8015746:	f002 f831 	bl	80177ac <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 801574a:	f7fe fd5f 	bl	801420c <StopRetransmission>
}
 801574e:	e7ed      	b.n	801572c <OnTxDelayedTimerEvent+0x24>
 8015750:	20000f24 	.word	0x20000f24
 8015754:	2000142c 	.word	0x2000142c

08015758 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8015758:	4b23      	ldr	r3, [pc, #140]	; (80157e8 <LoRaMacHandleMcpsRequest+0x90>)
 801575a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801575e:	f013 0f01 	tst.w	r3, #1
 8015762:	d040      	beq.n	80157e6 <LoRaMacHandleMcpsRequest+0x8e>
{
 8015764:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8015766:	4b20      	ldr	r3, [pc, #128]	; (80157e8 <LoRaMacHandleMcpsRequest+0x90>)
 8015768:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 801576c:	b12b      	cbz	r3, 801577a <LoRaMacHandleMcpsRequest+0x22>
 801576e:	2b03      	cmp	r3, #3
 8015770:	d003      	beq.n	801577a <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8015772:	2b01      	cmp	r3, #1
 8015774:	d007      	beq.n	8015786 <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 8015776:	2400      	movs	r4, #0
 8015778:	e003      	b.n	8015782 <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 801577a:	f7fe fd0b 	bl	8014194 <CheckRetransUnconfirmedUplink>
 801577e:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 8015780:	b9a4      	cbnz	r4, 80157ac <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 8015782:	b31c      	cbz	r4, 80157cc <LoRaMacHandleMcpsRequest+0x74>
}
 8015784:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 8015786:	4b18      	ldr	r3, [pc, #96]	; (80157e8 <LoRaMacHandleMcpsRequest+0x90>)
 8015788:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 801578c:	b1e3      	cbz	r3, 80157c8 <LoRaMacHandleMcpsRequest+0x70>
                stopRetransmission = CheckRetransConfirmedUplink( );
 801578e:	f7fe fd25 	bl	80141dc <CheckRetransConfirmedUplink>
 8015792:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8015794:	4b15      	ldr	r3, [pc, #84]	; (80157ec <LoRaMacHandleMcpsRequest+0x94>)
 8015796:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 801579a:	2b00      	cmp	r3, #0
 801579c:	d1f0      	bne.n	8015780 <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 801579e:	b910      	cbnz	r0, 80157a6 <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 80157a0:	f7fe fd74 	bl	801428c <AckTimeoutRetriesProcess>
 80157a4:	e7ec      	b.n	8015780 <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 80157a6:	f7ff fdbf 	bl	8015328 <AckTimeoutRetriesFinalize>
 80157aa:	e7e9      	b.n	8015780 <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 80157ac:	4c0e      	ldr	r4, [pc, #56]	; (80157e8 <LoRaMacHandleMcpsRequest+0x90>)
 80157ae:	f504 705a 	add.w	r0, r4, #872	; 0x368
 80157b2:	f00d f99f 	bl	8022af4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80157b6:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80157ba:	f023 0320 	bic.w	r3, r3, #32
 80157be:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 80157c2:	f7fe fd23 	bl	801420c <StopRetransmission>
 80157c6:	e7dd      	b.n	8015784 <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 80157c8:	2401      	movs	r4, #1
 80157ca:	e7da      	b.n	8015782 <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80157cc:	4b06      	ldr	r3, [pc, #24]	; (80157e8 <LoRaMacHandleMcpsRequest+0x90>)
 80157ce:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 80157d2:	f36f 1245 	bfc	r2, #5, #1
 80157d6:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 80157da:	2000      	movs	r0, #0
 80157dc:	f883 0413 	strb.w	r0, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 80157e0:	f7ff ff92 	bl	8015708 <OnTxDelayedTimerEvent>
}
 80157e4:	e7ce      	b.n	8015784 <LoRaMacHandleMcpsRequest+0x2c>
 80157e6:	4770      	bx	lr
 80157e8:	20000f24 	.word	0x20000f24
 80157ec:	2000142c 	.word	0x2000142c

080157f0 <LoRaMacHandleRequestEvents>:
{
 80157f0:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 80157f2:	4b22      	ldr	r3, [pc, #136]	; (801587c <LoRaMacHandleRequestEvents+0x8c>)
 80157f4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80157f8:	bb7b      	cbnz	r3, 801585a <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80157fa:	4b20      	ldr	r3, [pc, #128]	; (801587c <LoRaMacHandleRequestEvents+0x8c>)
 80157fc:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
 8015800:	f014 0501 	ands.w	r5, r4, #1
 8015804:	d005      	beq.n	8015812 <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8015806:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 801580a:	f36f 0200 	bfc	r2, #0, #1
 801580e:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8015812:	4b1a      	ldr	r3, [pc, #104]	; (801587c <LoRaMacHandleRequestEvents+0x8c>)
 8015814:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8015818:	f013 0f04 	tst.w	r3, #4
 801581c:	d006      	beq.n	801582c <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801581e:	4b17      	ldr	r3, [pc, #92]	; (801587c <LoRaMacHandleRequestEvents+0x8c>)
 8015820:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8015824:	f36f 0282 	bfc	r2, #2, #1
 8015828:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801582c:	2001      	movs	r0, #1
 801582e:	f7fe fbf3 	bl	8014018 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 8015832:	b135      	cbz	r5, 8015842 <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8015834:	4811      	ldr	r0, [pc, #68]	; (801587c <LoRaMacHandleRequestEvents+0x8c>)
 8015836:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	f500 6087 	add.w	r0, r0, #1080	; 0x438
 8015840:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8015842:	f014 0f04 	tst.w	r4, #4
 8015846:	d109      	bne.n	801585c <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 8015848:	f001 fd68 	bl	801731c <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 801584c:	4b0b      	ldr	r3, [pc, #44]	; (801587c <LoRaMacHandleRequestEvents+0x8c>)
 801584e:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8015852:	f36f 1245 	bfc	r2, #5, #1
 8015856:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
}
 801585a:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 801585c:	4808      	ldr	r0, [pc, #32]	; (8015880 <LoRaMacHandleRequestEvents+0x90>)
 801585e:	f001 ffcf 	bl	8017800 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8015862:	f001 ffff 	bl	8017864 <LoRaMacConfirmQueueGetCnt>
 8015866:	2800      	cmp	r0, #0
 8015868:	d0ee      	beq.n	8015848 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 801586a:	4a04      	ldr	r2, [pc, #16]	; (801587c <LoRaMacHandleRequestEvents+0x8c>)
 801586c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015870:	f043 0304 	orr.w	r3, r3, #4
 8015874:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8015878:	e7e6      	b.n	8015848 <LoRaMacHandleRequestEvents+0x58>
 801587a:	bf00      	nop
 801587c:	20000f24 	.word	0x20000f24
 8015880:	20001370 	.word	0x20001370

08015884 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 8015884:	4b0a      	ldr	r3, [pc, #40]	; (80158b0 <LoRaMacHandleScheduleUplinkEvent+0x2c>)
 8015886:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801588a:	b103      	cbz	r3, 801588e <LoRaMacHandleScheduleUplinkEvent+0xa>
 801588c:	4770      	bx	lr
{
 801588e:	b500      	push	{lr}
 8015890:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 8015892:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8015896:	f10d 0007 	add.w	r0, sp, #7
 801589a:	f001 fe93 	bl	80175c4 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 801589e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80158a2:	b913      	cbnz	r3, 80158aa <LoRaMacHandleScheduleUplinkEvent+0x26>
}
 80158a4:	b003      	add	sp, #12
 80158a6:	f85d fb04 	ldr.w	pc, [sp], #4
            SetMlmeScheduleUplinkIndication( );
 80158aa:	f7fe fc13 	bl	80140d4 <SetMlmeScheduleUplinkIndication>
}
 80158ae:	e7f9      	b.n	80158a4 <LoRaMacHandleScheduleUplinkEvent+0x20>
 80158b0:	20000f24 	.word	0x20000f24

080158b4 <LoRaMacHandleNvm>:
{
 80158b4:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 80158b6:	4b30      	ldr	r3, [pc, #192]	; (8015978 <LoRaMacHandleNvm+0xc4>)
 80158b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80158bc:	b103      	cbz	r3, 80158c0 <LoRaMacHandleNvm+0xc>
}
 80158be:	bd38      	pop	{r3, r4, r5, pc}
 80158c0:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80158c2:	2124      	movs	r1, #36	; 0x24
 80158c4:	f00a fb1e 	bl	801ff04 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 80158c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80158ca:	4283      	cmp	r3, r0
 80158cc:	d052      	beq.n	8015974 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 80158ce:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80158d0:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80158d2:	2114      	movs	r1, #20
 80158d4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80158d8:	f00a fb14 	bl	801ff04 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 80158dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80158de:	4283      	cmp	r3, r0
 80158e0:	d002      	beq.n	80158e8 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 80158e2:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80158e4:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80158e8:	21d4      	movs	r1, #212	; 0xd4
 80158ea:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80158ee:	f00a fb09 	bl	801ff04 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 80158f2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80158f6:	4283      	cmp	r3, r0
 80158f8:	d003      	beq.n	8015902 <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 80158fa:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80158fe:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8015902:	21bc      	movs	r1, #188	; 0xbc
 8015904:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8015908:	f00a fafc 	bl	801ff04 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 801590c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8015910:	4283      	cmp	r3, r0
 8015912:	d003      	beq.n	801591c <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 8015914:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8015918:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 801591c:	21a0      	movs	r1, #160	; 0xa0
 801591e:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
 8015922:	f00a faef 	bl	801ff04 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8015926:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 801592a:	4283      	cmp	r3, r0
 801592c:	d003      	beq.n	8015936 <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 801592e:	f8c4 0278 	str.w	r0, [r4, #632]	; 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8015932:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8015936:	f44f 715e 	mov.w	r1, #888	; 0x378
 801593a:	f504 701f 	add.w	r0, r4, #636	; 0x27c
 801593e:	f00a fae1 	bl	801ff04 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8015942:	f8d4 35f4 	ldr.w	r3, [r4, #1524]	; 0x5f4
 8015946:	4283      	cmp	r3, r0
 8015948:	d003      	beq.n	8015952 <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 801594a:	f8c4 05f4 	str.w	r0, [r4, #1524]	; 0x5f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 801594e:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8015952:	2114      	movs	r1, #20
 8015954:	f504 60bf 	add.w	r0, r4, #1528	; 0x5f8
 8015958:	f00a fad4 	bl	801ff04 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 801595c:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 8015960:	4283      	cmp	r3, r0
 8015962:	d003      	beq.n	801596c <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 8015964:	f8c4 060c 	str.w	r0, [r4, #1548]	; 0x60c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8015968:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 801596c:	4628      	mov	r0, r5
 801596e:	f7fe fc75 	bl	801425c <CallNvmDataChangeCallback>
 8015972:	e7a4      	b.n	80158be <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8015974:	2500      	movs	r5, #0
 8015976:	e7ac      	b.n	80158d2 <LoRaMacHandleNvm+0x1e>
 8015978:	20000f24 	.word	0x20000f24

0801597c <RestoreNvmData>:
    if( nvm == NULL )
 801597c:	2800      	cmp	r0, #0
 801597e:	d07a      	beq.n	8015a76 <RestoreNvmData+0xfa>
{
 8015980:	b570      	push	{r4, r5, r6, lr}
 8015982:	4604      	mov	r4, r0
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8015984:	4b3d      	ldr	r3, [pc, #244]	; (8015a7c <RestoreNvmData+0x100>)
 8015986:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801598a:	2b01      	cmp	r3, #1
 801598c:	d001      	beq.n	8015992 <RestoreNvmData+0x16>
        return LORAMAC_STATUS_BUSY;
 801598e:	2001      	movs	r0, #1
}
 8015990:	bd70      	pop	{r4, r5, r6, pc}
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8015992:	2124      	movs	r1, #36	; 0x24
 8015994:	f00a fab6 	bl	801ff04 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 8015998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801599a:	4283      	cmp	r3, r0
 801599c:	d032      	beq.n	8015a04 <RestoreNvmData+0x88>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 801599e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80159a2:	2114      	movs	r1, #20
 80159a4:	4628      	mov	r0, r5
 80159a6:	f00a faad 	bl	801ff04 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 80159aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80159ac:	4283      	cmp	r3, r0
 80159ae:	d02f      	beq.n	8015a10 <RestoreNvmData+0x94>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 80159b0:	f104 0540 	add.w	r5, r4, #64	; 0x40
 80159b4:	21d4      	movs	r1, #212	; 0xd4
 80159b6:	4628      	mov	r0, r5
 80159b8:	f00a faa4 	bl	801ff04 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 80159bc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80159c0:	4283      	cmp	r3, r0
 80159c2:	d02b      	beq.n	8015a1c <RestoreNvmData+0xa0>
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 80159c4:	f504 758c 	add.w	r5, r4, #280	; 0x118
 80159c8:	21bc      	movs	r1, #188	; 0xbc
 80159ca:	4628      	mov	r0, r5
 80159cc:	f00a fa9a 	bl	801ff04 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 80159d0:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 80159d4:	4283      	cmp	r3, r0
 80159d6:	d03b      	beq.n	8015a50 <RestoreNvmData+0xd4>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 80159d8:	f504 75ec 	add.w	r5, r4, #472	; 0x1d8
 80159dc:	21a0      	movs	r1, #160	; 0xa0
 80159de:	4628      	mov	r0, r5
 80159e0:	f00a fa90 	bl	801ff04 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 80159e4:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 80159e8:	4283      	cmp	r3, r0
 80159ea:	d037      	beq.n	8015a5c <RestoreNvmData+0xe0>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 80159ec:	f504 65bf 	add.w	r5, r4, #1528	; 0x5f8
 80159f0:	2114      	movs	r1, #20
 80159f2:	4628      	mov	r0, r5
 80159f4:	f00a fa86 	bl	801ff04 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 80159f8:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 80159fc:	4283      	cmp	r3, r0
 80159fe:	d033      	beq.n	8015a68 <RestoreNvmData+0xec>
    return LORAMAC_STATUS_OK;
 8015a00:	2000      	movs	r0, #0
 8015a02:	e7c5      	b.n	8015990 <RestoreNvmData+0x14>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8015a04:	2228      	movs	r2, #40	; 0x28
 8015a06:	4621      	mov	r1, r4
 8015a08:	481d      	ldr	r0, [pc, #116]	; (8015a80 <RestoreNvmData+0x104>)
 8015a0a:	f00a fa5c 	bl	801fec6 <memcpy1>
 8015a0e:	e7c6      	b.n	801599e <RestoreNvmData+0x22>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 8015a10:	2218      	movs	r2, #24
 8015a12:	4629      	mov	r1, r5
 8015a14:	481b      	ldr	r0, [pc, #108]	; (8015a84 <RestoreNvmData+0x108>)
 8015a16:	f00a fa56 	bl	801fec6 <memcpy1>
 8015a1a:	e7c9      	b.n	80159b0 <RestoreNvmData+0x34>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8015a1c:	4e18      	ldr	r6, [pc, #96]	; (8015a80 <RestoreNvmData+0x104>)
 8015a1e:	22d8      	movs	r2, #216	; 0xd8
 8015a20:	4629      	mov	r1, r5
 8015a22:	f106 0040 	add.w	r0, r6, #64	; 0x40
 8015a26:	f00a fa4e 	bl	801fec6 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8015a2a:	4b14      	ldr	r3, [pc, #80]	; (8015a7c <RestoreNvmData+0x100>)
 8015a2c:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8015a30:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8015a34:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 8015a36:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015a3a:	f896 2075 	ldrb.w	r2, [r6, #117]	; 0x75
 8015a3e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8015a42:	2201      	movs	r2, #1
 8015a44:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8015a48:	2202      	movs	r2, #2
 8015a4a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 8015a4e:	e7b9      	b.n	80159c4 <RestoreNvmData+0x48>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8015a50:	22c0      	movs	r2, #192	; 0xc0
 8015a52:	4629      	mov	r1, r5
 8015a54:	480c      	ldr	r0, [pc, #48]	; (8015a88 <RestoreNvmData+0x10c>)
 8015a56:	f00a fa36 	bl	801fec6 <memcpy1>
 8015a5a:	e7bd      	b.n	80159d8 <RestoreNvmData+0x5c>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 8015a5c:	22a4      	movs	r2, #164	; 0xa4
 8015a5e:	4629      	mov	r1, r5
 8015a60:	480a      	ldr	r0, [pc, #40]	; (8015a8c <RestoreNvmData+0x110>)
 8015a62:	f00a fa30 	bl	801fec6 <memcpy1>
 8015a66:	e7c1      	b.n	80159ec <RestoreNvmData+0x70>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8015a68:	2218      	movs	r2, #24
 8015a6a:	4629      	mov	r1, r5
 8015a6c:	4808      	ldr	r0, [pc, #32]	; (8015a90 <RestoreNvmData+0x114>)
 8015a6e:	f00a fa2a 	bl	801fec6 <memcpy1>
    return LORAMAC_STATUS_OK;
 8015a72:	2000      	movs	r0, #0
 8015a74:	e78c      	b.n	8015990 <RestoreNvmData+0x14>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015a76:	2003      	movs	r0, #3
}
 8015a78:	4770      	bx	lr
 8015a7a:	bf00      	nop
 8015a7c:	20000f24 	.word	0x20000f24
 8015a80:	2000142c 	.word	0x2000142c
 8015a84:	20001454 	.word	0x20001454
 8015a88:	20001544 	.word	0x20001544
 8015a8c:	20001604 	.word	0x20001604
 8015a90:	20001a24 	.word	0x20001a24

08015a94 <OpenContinuousRxCWindow>:
{
 8015a94:	b570      	push	{r4, r5, r6, lr}
 8015a96:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8015a98:	4c12      	ldr	r4, [pc, #72]	; (8015ae4 <OpenContinuousRxCWindow+0x50>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8015a9a:	4d13      	ldr	r5, [pc, #76]	; (8015ae8 <OpenContinuousRxCWindow+0x54>)
 8015a9c:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 8015aa0:	9600      	str	r6, [sp, #0]
 8015aa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015aa4:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8015aa8:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 8015aac:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8015ab0:	f002 fd17 	bl	80184e2 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8015ab4:	2302      	movs	r3, #2
 8015ab6:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8015aba:	2301      	movs	r3, #1
 8015abc:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8015ac0:	f505 6284 	add.w	r2, r5, #1056	; 0x420
 8015ac4:	4631      	mov	r1, r6
 8015ac6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8015aca:	f002 fd38 	bl	801853e <RegionRxConfig>
 8015ace:	b138      	cbz	r0, 8015ae0 <OpenContinuousRxCWindow+0x4c>
        Radio.Rx( 0 ); // Continuous mode
 8015ad0:	4b06      	ldr	r3, [pc, #24]	; (8015aec <OpenContinuousRxCWindow+0x58>)
 8015ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ad4:	2000      	movs	r0, #0
 8015ad6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8015ad8:	f895 23f3 	ldrb.w	r2, [r5, #1011]	; 0x3f3
 8015adc:	f885 2480 	strb.w	r2, [r5, #1152]	; 0x480
}
 8015ae0:	b002      	add	sp, #8
 8015ae2:	bd70      	pop	{r4, r5, r6, pc}
 8015ae4:	2000142c 	.word	0x2000142c
 8015ae8:	20000f24 	.word	0x20000f24
 8015aec:	08028984 	.word	0x08028984

08015af0 <RxWindowSetup>:
{
 8015af0:	b510      	push	{r4, lr}
 8015af2:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8015af4:	f00c fffe 	bl	8022af4 <UTIL_TIMER_Stop>
    Radio.Standby( );
 8015af8:	4b0a      	ldr	r3, [pc, #40]	; (8015b24 <RxWindowSetup+0x34>)
 8015afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015afc:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8015afe:	4a0a      	ldr	r2, [pc, #40]	; (8015b28 <RxWindowSetup+0x38>)
 8015b00:	4621      	mov	r1, r4
 8015b02:	4b0a      	ldr	r3, [pc, #40]	; (8015b2c <RxWindowSetup+0x3c>)
 8015b04:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8015b08:	f002 fd19 	bl	801853e <RegionRxConfig>
 8015b0c:	b140      	cbz	r0, 8015b20 <RxWindowSetup+0x30>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8015b0e:	4b05      	ldr	r3, [pc, #20]	; (8015b24 <RxWindowSetup+0x34>)
 8015b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b12:	4a06      	ldr	r2, [pc, #24]	; (8015b2c <RxWindowSetup+0x3c>)
 8015b14:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8015b16:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8015b18:	7ce2      	ldrb	r2, [r4, #19]
 8015b1a:	4b05      	ldr	r3, [pc, #20]	; (8015b30 <RxWindowSetup+0x40>)
 8015b1c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 8015b20:	bd10      	pop	{r4, pc}
 8015b22:	bf00      	nop
 8015b24:	08028984 	.word	0x08028984
 8015b28:	20001344 	.word	0x20001344
 8015b2c:	2000142c 	.word	0x2000142c
 8015b30:	20000f24 	.word	0x20000f24

08015b34 <OnRxWindow2TimerEvent>:
{
 8015b34:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8015b36:	4b11      	ldr	r3, [pc, #68]	; (8015b7c <OnRxWindow2TimerEvent+0x48>)
 8015b38:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8015b3c:	b903      	cbnz	r3, 8015b40 <OnRxWindow2TimerEvent+0xc>
}
 8015b3e:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8015b40:	480e      	ldr	r0, [pc, #56]	; (8015b7c <OnRxWindow2TimerEvent+0x48>)
 8015b42:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 8015b46:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8015b4a:	4b0d      	ldr	r3, [pc, #52]	; (8015b80 <OnRxWindow2TimerEvent+0x4c>)
 8015b4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015b4e:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015b52:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8015b56:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8015b5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015b5e:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8015b62:	2300      	movs	r3, #0
 8015b64:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8015b68:	2301      	movs	r3, #1
 8015b6a:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8015b6e:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 8015b72:	f500 7066 	add.w	r0, r0, #920	; 0x398
 8015b76:	f7ff ffbb 	bl	8015af0 <RxWindowSetup>
 8015b7a:	e7e0      	b.n	8015b3e <OnRxWindow2TimerEvent+0xa>
 8015b7c:	20000f24 	.word	0x20000f24
 8015b80:	2000142c 	.word	0x2000142c

08015b84 <OnRxWindow1TimerEvent>:
{
 8015b84:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8015b86:	480f      	ldr	r0, [pc, #60]	; (8015bc4 <OnRxWindow1TimerEvent+0x40>)
 8015b88:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 8015b8c:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8015b90:	4b0d      	ldr	r3, [pc, #52]	; (8015bc8 <OnRxWindow1TimerEvent+0x44>)
 8015b92:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 8015b96:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015b9a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8015b9e:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8015ba2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015ba6:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8015baa:	2300      	movs	r3, #0
 8015bac:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8015bb0:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8015bb4:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 8015bb8:	f500 7060 	add.w	r0, r0, #896	; 0x380
 8015bbc:	f7ff ff98 	bl	8015af0 <RxWindowSetup>
}
 8015bc0:	bd08      	pop	{r3, pc}
 8015bc2:	bf00      	nop
 8015bc4:	20000f24 	.word	0x20000f24
 8015bc8:	2000142c 	.word	0x2000142c

08015bcc <OnRadioRxTimeout>:
{
 8015bcc:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8015bce:	4a09      	ldr	r2, [pc, #36]	; (8015bf4 <OnRadioRxTimeout+0x28>)
 8015bd0:	7813      	ldrb	r3, [r2, #0]
 8015bd2:	f043 0301 	orr.w	r3, r3, #1
 8015bd6:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8015bd8:	4b07      	ldr	r3, [pc, #28]	; (8015bf8 <OnRadioRxTimeout+0x2c>)
 8015bda:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8015bde:	b113      	cbz	r3, 8015be6 <OnRadioRxTimeout+0x1a>
 8015be0:	691b      	ldr	r3, [r3, #16]
 8015be2:	b103      	cbz	r3, 8015be6 <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8015be4:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8015be6:	4b05      	ldr	r3, [pc, #20]	; (8015bfc <OnRadioRxTimeout+0x30>)
 8015be8:	2201      	movs	r2, #1
 8015bea:	2100      	movs	r1, #0
 8015bec:	2002      	movs	r0, #2
 8015bee:	f00c fb15 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8015bf2:	bd08      	pop	{r3, pc}
 8015bf4:	20000f20 	.word	0x20000f20
 8015bf8:	20000f24 	.word	0x20000f24
 8015bfc:	0802829c 	.word	0x0802829c

08015c00 <OnRadioTxTimeout>:
{
 8015c00:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8015c02:	4a09      	ldr	r2, [pc, #36]	; (8015c28 <OnRadioTxTimeout+0x28>)
 8015c04:	7813      	ldrb	r3, [r2, #0]
 8015c06:	f043 0304 	orr.w	r3, r3, #4
 8015c0a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8015c0c:	4b07      	ldr	r3, [pc, #28]	; (8015c2c <OnRadioTxTimeout+0x2c>)
 8015c0e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8015c12:	b113      	cbz	r3, 8015c1a <OnRadioTxTimeout+0x1a>
 8015c14:	691b      	ldr	r3, [r3, #16]
 8015c16:	b103      	cbz	r3, 8015c1a <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8015c18:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8015c1a:	4b05      	ldr	r3, [pc, #20]	; (8015c30 <OnRadioTxTimeout+0x30>)
 8015c1c:	2201      	movs	r2, #1
 8015c1e:	2100      	movs	r1, #0
 8015c20:	2002      	movs	r0, #2
 8015c22:	f00c fafb 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8015c26:	bd08      	pop	{r3, pc}
 8015c28:	20000f20 	.word	0x20000f20
 8015c2c:	20000f24 	.word	0x20000f24
 8015c30:	080282ac 	.word	0x080282ac

08015c34 <OnRadioRxDone>:
{
 8015c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c38:	4680      	mov	r8, r0
 8015c3a:	460f      	mov	r7, r1
 8015c3c:	4616      	mov	r6, r2
 8015c3e:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8015c40:	f00c ff18 	bl	8022a74 <UTIL_TIMER_GetCurrentTime>
 8015c44:	4c0d      	ldr	r4, [pc, #52]	; (8015c7c <OnRadioRxDone+0x48>)
 8015c46:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 8015c48:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 8015c4c:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 8015c4e:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 8015c50:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8015c52:	4a0b      	ldr	r2, [pc, #44]	; (8015c80 <OnRadioRxDone+0x4c>)
 8015c54:	7813      	ldrb	r3, [r2, #0]
 8015c56:	f043 0308 	orr.w	r3, r3, #8
 8015c5a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8015c5c:	4b09      	ldr	r3, [pc, #36]	; (8015c84 <OnRadioRxDone+0x50>)
 8015c5e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8015c62:	b113      	cbz	r3, 8015c6a <OnRadioRxDone+0x36>
 8015c64:	691b      	ldr	r3, [r3, #16]
 8015c66:	b103      	cbz	r3, 8015c6a <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8015c68:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8015c6a:	4b07      	ldr	r3, [pc, #28]	; (8015c88 <OnRadioRxDone+0x54>)
 8015c6c:	2201      	movs	r2, #1
 8015c6e:	2100      	movs	r1, #0
 8015c70:	2002      	movs	r0, #2
 8015c72:	f00c fad3 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8015c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c7a:	bf00      	nop
 8015c7c:	200028ac 	.word	0x200028ac
 8015c80:	20000f20 	.word	0x20000f20
 8015c84:	20000f24 	.word	0x20000f24
 8015c88:	080282bc 	.word	0x080282bc

08015c8c <OnRadioTxDone>:
{
 8015c8c:	b530      	push	{r4, r5, lr}
 8015c8e:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8015c90:	f00c fef0 	bl	8022a74 <UTIL_TIMER_GetCurrentTime>
 8015c94:	4b0f      	ldr	r3, [pc, #60]	; (8015cd4 <OnRadioTxDone+0x48>)
 8015c96:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8015c98:	4d0f      	ldr	r5, [pc, #60]	; (8015cd8 <OnRadioTxDone+0x4c>)
 8015c9a:	466c      	mov	r4, sp
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	f00c fdd1 	bl	8022844 <SysTimeGet>
 8015ca2:	f505 734e 	add.w	r3, r5, #824	; 0x338
 8015ca6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015caa:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8015cae:	4a0b      	ldr	r2, [pc, #44]	; (8015cdc <OnRadioTxDone+0x50>)
 8015cb0:	7813      	ldrb	r3, [r2, #0]
 8015cb2:	f043 0310 	orr.w	r3, r3, #16
 8015cb6:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8015cb8:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8015cbc:	b113      	cbz	r3, 8015cc4 <OnRadioTxDone+0x38>
 8015cbe:	691b      	ldr	r3, [r3, #16]
 8015cc0:	b103      	cbz	r3, 8015cc4 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8015cc2:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8015cc4:	4b06      	ldr	r3, [pc, #24]	; (8015ce0 <OnRadioTxDone+0x54>)
 8015cc6:	2201      	movs	r2, #1
 8015cc8:	2100      	movs	r1, #0
 8015cca:	2002      	movs	r0, #2
 8015ccc:	f00c faa6 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 8015cd0:	b003      	add	sp, #12
 8015cd2:	bd30      	pop	{r4, r5, pc}
 8015cd4:	200028a8 	.word	0x200028a8
 8015cd8:	20000f24 	.word	0x20000f24
 8015cdc:	20000f20 	.word	0x20000f20
 8015ce0:	080282cc 	.word	0x080282cc

08015ce4 <ResetMacParameters>:
{
 8015ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ce8:	b08e      	sub	sp, #56	; 0x38
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8015cea:	4c4d      	ldr	r4, [pc, #308]	; (8015e20 <ResetMacParameters+0x13c>)
 8015cec:	2600      	movs	r6, #0
 8015cee:	f884 6110 	strb.w	r6, [r4, #272]	; 0x110
    Nvm.MacGroup1.AdrAckCounter = 0;
 8015cf2:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 8015cf4:	4d4b      	ldr	r5, [pc, #300]	; (8015e24 <ResetMacParameters+0x140>)
 8015cf6:	f885 6410 	strb.w	r6, [r5, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 8015cfa:	f04f 0801 	mov.w	r8, #1
 8015cfe:	f885 8411 	strb.w	r8, [r5, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8015d02:	f885 8412 	strb.w	r8, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8015d06:	f885 6413 	strb.w	r6, [r5, #1043]	; 0x413
    Nvm.MacGroup2.MaxDCycle = 0;
 8015d0a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8015d0e:	f8a4 8102 	strh.w	r8, [r4, #258]	; 0x102
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8015d12:	f994 30c4 	ldrsb.w	r3, [r4, #196]	; 0xc4
 8015d16:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8015d1a:	f994 30c5 	ldrsb.w	r3, [r4, #197]	; 0xc5
 8015d1e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8015d22:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8015d26:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8015d2a:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8015d2e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8015d32:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8015d36:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8015d3a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8015d3e:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8015d42:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8015d46:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8015d4a:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8015d4e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8015d52:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 8015d56:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8015d5a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8015d5e:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8015d60:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8015d64:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 8015d66:	f885 6414 	strb.w	r6, [r5, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8015d6a:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8015d6e:	f88d 800c 	strb.w	r8, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8015d72:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 8015d76:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8015d78:	f504 731f 	add.w	r3, r4, #636	; 0x27c
 8015d7c:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8015d7e:	a901      	add	r1, sp, #4
 8015d80:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8015d84:	f002 fb06 	bl	8018394 <RegionInitDefaults>
    MacCtx.Channel = 0;
 8015d88:	f885 6415 	strb.w	r6, [r5, #1045]	; 0x415
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8015d8c:	f885 63cc 	strb.w	r6, [r5, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8015d90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015d92:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015d96:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015d9a:	f885 33dc 	strb.w	r3, [r5, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8015d9e:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8015da2:	f885 33dd 	strb.w	r3, [r5, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8015da6:	f885 63de 	strb.w	r6, [r5, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8015daa:	f885 83df 	strb.w	r8, [r5, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8015dae:	f505 7478 	add.w	r4, r5, #992	; 0x3e0
 8015db2:	f505 7773 	add.w	r7, r5, #972	; 0x3cc
 8015db6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015dba:	683b      	ldr	r3, [r7, #0]
 8015dbc:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8015dbe:	f885 83f2 	strb.w	r8, [r5, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8015dc2:	2302      	movs	r3, #2
 8015dc4:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 8015dc8:	960c      	str	r6, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8015dca:	960d      	str	r6, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 8015dcc:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8015dd0:	b11b      	cbz	r3, 8015dda <ResetMacParameters+0xf6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8015dd2:	685a      	ldr	r2, [r3, #4]
 8015dd4:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8015dd6:	691b      	ldr	r3, [r3, #16]
 8015dd8:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8015dda:	4b12      	ldr	r3, [pc, #72]	; (8015e24 <ResetMacParameters+0x140>)
 8015ddc:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 8015de0:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8015de2:	f203 421c 	addw	r2, r3, #1052	; 0x41c
 8015de6:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8015de8:	f203 424c 	addw	r2, r3, #1100	; 0x44c
 8015dec:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8015dee:	f203 4381 	addw	r3, r3, #1153	; 0x481
 8015df2:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8015df4:	4a0a      	ldr	r2, [pc, #40]	; (8015e20 <ResetMacParameters+0x13c>)
 8015df6:	f102 03cc 	add.w	r3, r2, #204	; 0xcc
 8015dfa:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8015dfc:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8015e00:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8015e02:	f102 0344 	add.w	r3, r2, #68	; 0x44
 8015e06:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8015e08:	f102 03d0 	add.w	r3, r2, #208	; 0xd0
 8015e0c:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8015e0e:	f502 62bf 	add.w	r2, r2, #1528	; 0x5f8
 8015e12:	a90c      	add	r1, sp, #48	; 0x30
 8015e14:	a804      	add	r0, sp, #16
 8015e16:	f001 fa6c 	bl	80172f2 <LoRaMacClassBInit>
}
 8015e1a:	b00e      	add	sp, #56	; 0x38
 8015e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e20:	2000142c 	.word	0x2000142c
 8015e24:	20000f24 	.word	0x20000f24

08015e28 <SwitchClass>:
{
 8015e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e2a:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8015e2c:	4b3d      	ldr	r3, [pc, #244]	; (8015f24 <SwitchClass+0xfc>)
 8015e2e:	f893 50fc 	ldrb.w	r5, [r3, #252]	; 0xfc
 8015e32:	2d01      	cmp	r5, #1
 8015e34:	d062      	beq.n	8015efc <SwitchClass+0xd4>
 8015e36:	2d02      	cmp	r5, #2
 8015e38:	d068      	beq.n	8015f0c <SwitchClass+0xe4>
 8015e3a:	b10d      	cbz	r5, 8015e40 <SwitchClass+0x18>
 8015e3c:	2003      	movs	r0, #3
}
 8015e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 8015e40:	b928      	cbnz	r0, 8015e4e <SwitchClass+0x26>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8015e42:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8015e46:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8015e48:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8015e4a:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 8015e4e:	2c01      	cmp	r4, #1
 8015e50:	d01f      	beq.n	8015e92 <SwitchClass+0x6a>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015e52:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 8015e54:	2c02      	cmp	r4, #2
 8015e56:	d1f2      	bne.n	8015e3e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8015e58:	4b32      	ldr	r3, [pc, #200]	; (8015f24 <SwitchClass+0xfc>)
 8015e5a:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8015e5e:	4f32      	ldr	r7, [pc, #200]	; (8015f28 <SwitchClass+0x100>)
 8015e60:	f507 7478 	add.w	r4, r7, #992	; 0x3e0
 8015e64:	f507 7673 	add.w	r6, r7, #972	; 0x3cc
 8015e68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015e6c:	6833      	ldr	r3, [r6, #0]
 8015e6e:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8015e70:	2302      	movs	r3, #2
 8015e72:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015e76:	2300      	movs	r3, #0
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	dd13      	ble.n	8015ea4 <SwitchClass+0x7c>
                MacCtx.NodeAckRequested = false;
 8015e7c:	4b2a      	ldr	r3, [pc, #168]	; (8015f28 <SwitchClass+0x100>)
 8015e7e:	2200      	movs	r2, #0
 8015e80:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                Radio.Sleep( );
 8015e84:	4b29      	ldr	r3, [pc, #164]	; (8015f2c <SwitchClass+0x104>)
 8015e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e88:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8015e8a:	f7ff fe03 	bl	8015a94 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8015e8e:	4628      	mov	r0, r5
 8015e90:	e7d5      	b.n	8015e3e <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 8015e92:	4620      	mov	r0, r4
 8015e94:	f001 fa43 	bl	801731e <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 8015e98:	2800      	cmp	r0, #0
 8015e9a:	d1db      	bne.n	8015e54 <SwitchClass+0x2c>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8015e9c:	4b21      	ldr	r3, [pc, #132]	; (8015f24 <SwitchClass+0xfc>)
 8015e9e:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 8015ea2:	e7d7      	b.n	8015e54 <SwitchClass+0x2c>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	491f      	ldr	r1, [pc, #124]	; (8015f24 <SwitchClass+0xfc>)
 8015ea8:	222c      	movs	r2, #44	; 0x2c
 8015eaa:	fb02 1203 	mla	r2, r2, r3, r1
 8015eae:	f892 20d2 	ldrb.w	r2, [r2, #210]	; 0xd2
 8015eb2:	b912      	cbnz	r2, 8015eba <SwitchClass+0x92>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015eb4:	3301      	adds	r3, #1
 8015eb6:	b25b      	sxtb	r3, r3
 8015eb8:	e7de      	b.n	8015e78 <SwitchClass+0x50>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8015eba:	460a      	mov	r2, r1
 8015ebc:	232c      	movs	r3, #44	; 0x2c
 8015ebe:	fb03 1000 	mla	r0, r3, r0, r1
 8015ec2:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
 8015ec6:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8015ec8:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
 8015ecc:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8015ed0:	4b15      	ldr	r3, [pc, #84]	; (8015f28 <SwitchClass+0x100>)
 8015ed2:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 8015ed6:	f883 03e0 	strb.w	r0, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8015eda:	f8c3 13e4 	str.w	r1, [r3, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015ede:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 8015ee2:	f883 13f0 	strb.w	r1, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8015ee6:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8015eea:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8015eee:	2203      	movs	r2, #3
 8015ef0:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8015ef4:	2201      	movs	r2, #1
 8015ef6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8015efa:	e7bf      	b.n	8015e7c <SwitchClass+0x54>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8015efc:	f001 fa0f 	bl	801731e <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8015f00:	2800      	cmp	r0, #0
 8015f02:	d19c      	bne.n	8015e3e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8015f04:	4b07      	ldr	r3, [pc, #28]	; (8015f24 <SwitchClass+0xfc>)
 8015f06:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 8015f0a:	e798      	b.n	8015e3e <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 8015f0c:	b938      	cbnz	r0, 8015f1e <SwitchClass+0xf6>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8015f0e:	4b05      	ldr	r3, [pc, #20]	; (8015f24 <SwitchClass+0xfc>)
 8015f10:	f883 00fc 	strb.w	r0, [r3, #252]	; 0xfc
                Radio.Sleep( );
 8015f14:	4b05      	ldr	r3, [pc, #20]	; (8015f2c <SwitchClass+0x104>)
 8015f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f18:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8015f1a:	4620      	mov	r0, r4
 8015f1c:	e78f      	b.n	8015e3e <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015f1e:	2003      	movs	r0, #3
 8015f20:	e78d      	b.n	8015e3e <SwitchClass+0x16>
 8015f22:	bf00      	nop
 8015f24:	2000142c 	.word	0x2000142c
 8015f28:	20000f24 	.word	0x20000f24
 8015f2c:	08028984 	.word	0x08028984

08015f30 <SendReJoinReq>:
{
 8015f30:	b570      	push	{r4, r5, r6, lr}
    switch( joinReqType )
 8015f32:	28ff      	cmp	r0, #255	; 0xff
 8015f34:	d003      	beq.n	8015f3e <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 8015f36:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 8015f38:	f7ff fb62 	bl	8015600 <ScheduleTx>
}
 8015f3c:	bd70      	pop	{r4, r5, r6, pc}
 8015f3e:	f04f 0600 	mov.w	r6, #0
            SwitchClass( (DeviceClass_t)E2P_LORA_Read_Class() );
 8015f42:	f7f4 f8e7 	bl	800a114 <E2P_LORA_Read_Class>
 8015f46:	b2c0      	uxtb	r0, r0
 8015f48:	f7ff ff6e 	bl	8015e28 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8015f4c:	4d0f      	ldr	r5, [pc, #60]	; (8015f8c <SendReJoinReq+0x5c>)
 8015f4e:	2400      	movs	r4, #0
 8015f50:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8015f54:	1cab      	adds	r3, r5, #2
 8015f56:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8015f5a:	23ff      	movs	r3, #255	; 0xff
 8015f5c:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8015f60:	f364 1647 	bfi	r6, r4, #5, #3
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8015f64:	f885 610d 	strb.w	r6, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8015f68:	f009 ff7c 	bl	801fe64 <SecureElementGetJoinEui>
 8015f6c:	4601      	mov	r1, r0
 8015f6e:	2208      	movs	r2, #8
 8015f70:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 8015f74:	f009 ffa7 	bl	801fec6 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8015f78:	f009 ff5e 	bl	801fe38 <SecureElementGetDevEui>
 8015f7c:	4601      	mov	r1, r0
 8015f7e:	2208      	movs	r2, #8
 8015f80:	f505 708b 	add.w	r0, r5, #278	; 0x116
 8015f84:	f009 ff9f 	bl	801fec6 <memcpy1>
            allowDelayedTx = false;
 8015f88:	4620      	mov	r0, r4
            break;
 8015f8a:	e7d5      	b.n	8015f38 <SendReJoinReq+0x8>
 8015f8c:	20000f24 	.word	0x20000f24

08015f90 <SetTxContinuousWave>:
{
 8015f90:	b510      	push	{r4, lr}
 8015f92:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 8015f94:	4c10      	ldr	r4, [pc, #64]	; (8015fd8 <SetTxContinuousWave+0x48>)
 8015f96:	f894 3415 	ldrb.w	r3, [r4, #1045]	; 0x415
 8015f9a:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8015f9e:	4b0f      	ldr	r3, [pc, #60]	; (8015fdc <SetTxContinuousWave+0x4c>)
 8015fa0:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8015fa4:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8015fa8:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8015fac:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8015fb0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8015fb2:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8015fb4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8015fb6:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 8015fb8:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8015fbc:	4669      	mov	r1, sp
 8015fbe:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8015fc2:	f002 fc54 	bl	801886e <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8015fc6:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8015fca:	f043 0302 	orr.w	r3, r3, #2
 8015fce:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
}
 8015fd2:	2000      	movs	r0, #0
 8015fd4:	b004      	add	sp, #16
 8015fd6:	bd10      	pop	{r4, pc}
 8015fd8:	20000f24 	.word	0x20000f24
 8015fdc:	2000142c 	.word	0x2000142c

08015fe0 <PrepareFrame>:
{
 8015fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015fe4:	b083      	sub	sp, #12
 8015fe6:	4605      	mov	r5, r0
 8015fe8:	460e      	mov	r6, r1
 8015fea:	4617      	mov	r7, r2
 8015fec:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 8015ff0:	4959      	ldr	r1, [pc, #356]	; (8016158 <PrepareFrame+0x178>)
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 8015ff6:	f881 2414 	strb.w	r2, [r1, #1044]	; 0x414
    uint32_t fCntUp = 0;
 8015ffa:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8015ffc:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 8015ffe:	4698      	mov	r8, r3
 8016000:	b1cb      	cbz	r3, 8016036 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8016002:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8016158 <PrepareFrame+0x178>
 8016006:	4622      	mov	r2, r4
 8016008:	4641      	mov	r1, r8
 801600a:	f509 709c 	add.w	r0, r9, #312	; 0x138
 801600e:	f009 ff5a 	bl	801fec6 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8016012:	b2e0      	uxtb	r0, r4
 8016014:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8016018:	782b      	ldrb	r3, [r5, #0]
 801601a:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 801601e:	782b      	ldrb	r3, [r5, #0]
 8016020:	095b      	lsrs	r3, r3, #5
 8016022:	2b04      	cmp	r3, #4
 8016024:	d009      	beq.n	801603a <PrepareFrame+0x5a>
 8016026:	2b07      	cmp	r3, #7
 8016028:	d078      	beq.n	801611c <PrepareFrame+0x13c>
 801602a:	2b02      	cmp	r3, #2
 801602c:	d009      	beq.n	8016042 <PrepareFrame+0x62>
 801602e:	2002      	movs	r0, #2
}
 8016030:	b003      	add	sp, #12
 8016032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 8016036:	4614      	mov	r4, r2
 8016038:	e7e3      	b.n	8016002 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 801603a:	4b47      	ldr	r3, [pc, #284]	; (8016158 <PrepareFrame+0x178>)
 801603c:	2201      	movs	r2, #1
 801603e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8016042:	4b45      	ldr	r3, [pc, #276]	; (8016158 <PrepareFrame+0x178>)
 8016044:	2204      	movs	r2, #4
 8016046:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801604a:	1c9a      	adds	r2, r3, #2
 801604c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8016050:	22ff      	movs	r2, #255	; 0xff
 8016052:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8016056:	782a      	ldrb	r2, [r5, #0]
 8016058:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 801605c:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8016060:	4a3e      	ldr	r2, [pc, #248]	; (801615c <PrepareFrame+0x17c>)
 8016062:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8016066:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801606a:	7832      	ldrb	r2, [r6, #0]
 801606c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8016070:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8016074:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8016078:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801607c:	a801      	add	r0, sp, #4
 801607e:	f001 fdc9 	bl	8017c14 <LoRaMacCryptoGetFCntUp>
 8016082:	2800      	cmp	r0, #0
 8016084:	d15b      	bne.n	801613e <PrepareFrame+0x15e>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8016086:	9a01      	ldr	r2, [sp, #4]
 8016088:	4b33      	ldr	r3, [pc, #204]	; (8016158 <PrepareFrame+0x178>)
 801608a:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 801608e:	2100      	movs	r1, #0
 8016090:	f883 143d 	strb.w	r1, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8016094:	f883 143c 	strb.w	r1, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8016098:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801609c:	4668      	mov	r0, sp
 801609e:	f001 fa53 	bl	8017548 <LoRaMacCommandsGetSizeSerializedCmds>
 80160a2:	2800      	cmp	r0, #0
 80160a4:	d14d      	bne.n	8016142 <PrepareFrame+0x162>
            if( macCmdsSize > 0 )
 80160a6:	9b00      	ldr	r3, [sp, #0]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d0c1      	beq.n	8016030 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80160ac:	4b2b      	ldr	r3, [pc, #172]	; (801615c <PrepareFrame+0x17c>)
 80160ae:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 80160b2:	f7fe f917 	bl	80142e4 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80160b6:	4b28      	ldr	r3, [pc, #160]	; (8016158 <PrepareFrame+0x178>)
 80160b8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80160bc:	b113      	cbz	r3, 80160c4 <PrepareFrame+0xe4>
 80160be:	9a00      	ldr	r2, [sp, #0]
 80160c0:	2a0f      	cmp	r2, #15
 80160c2:	d915      	bls.n	80160f0 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80160c4:	b113      	cbz	r3, 80160cc <PrepareFrame+0xec>
 80160c6:	9b00      	ldr	r3, [sp, #0]
 80160c8:	2b0f      	cmp	r3, #15
 80160ca:	d820      	bhi.n	801610e <PrepareFrame+0x12e>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80160cc:	4a24      	ldr	r2, [pc, #144]	; (8016160 <PrepareFrame+0x180>)
 80160ce:	4669      	mov	r1, sp
 80160d0:	f001 fa46 	bl	8017560 <LoRaMacCommandsSerializeCmds>
 80160d4:	2800      	cmp	r0, #0
 80160d6:	d13a      	bne.n	801614e <PrepareFrame+0x16e>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80160d8:	4b1f      	ldr	r3, [pc, #124]	; (8016158 <PrepareFrame+0x178>)
 80160da:	2200      	movs	r2, #0
 80160dc:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80160e0:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 80160e4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80160e8:	9a00      	ldr	r2, [sp, #0]
 80160ea:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 80160ee:	e79f      	b.n	8016030 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80160f0:	4a1c      	ldr	r2, [pc, #112]	; (8016164 <PrepareFrame+0x184>)
 80160f2:	4669      	mov	r1, sp
 80160f4:	200f      	movs	r0, #15
 80160f6:	f001 fa33 	bl	8017560 <LoRaMacCommandsSerializeCmds>
 80160fa:	bb20      	cbnz	r0, 8016146 <PrepareFrame+0x166>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80160fc:	7833      	ldrb	r3, [r6, #0]
 80160fe:	9a00      	ldr	r2, [sp, #0]
 8016100:	f362 0303 	bfi	r3, r2, #0, #4
 8016104:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8016106:	4a14      	ldr	r2, [pc, #80]	; (8016158 <PrepareFrame+0x178>)
 8016108:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
 801610c:	e790      	b.n	8016030 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801610e:	4a14      	ldr	r2, [pc, #80]	; (8016160 <PrepareFrame+0x180>)
 8016110:	4669      	mov	r1, sp
 8016112:	f001 fa25 	bl	8017560 <LoRaMacCommandsSerializeCmds>
 8016116:	b1c0      	cbz	r0, 801614a <PrepareFrame+0x16a>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016118:	2013      	movs	r0, #19
 801611a:	e789      	b.n	8016030 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801611c:	f1b8 0f00 	cmp.w	r8, #0
 8016120:	d017      	beq.n	8016152 <PrepareFrame+0x172>
 8016122:	2800      	cmp	r0, #0
 8016124:	d084      	beq.n	8016030 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8016126:	4c0c      	ldr	r4, [pc, #48]	; (8016158 <PrepareFrame+0x178>)
 8016128:	b282      	uxth	r2, r0
 801612a:	4641      	mov	r1, r8
 801612c:	1ce0      	adds	r0, r4, #3
 801612e:	f009 feca 	bl	801fec6 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8016132:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 8016136:	3301      	adds	r3, #1
 8016138:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 801613a:	2000      	movs	r0, #0
 801613c:	e778      	b.n	8016030 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801613e:	2012      	movs	r0, #18
 8016140:	e776      	b.n	8016030 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016142:	2013      	movs	r0, #19
 8016144:	e774      	b.n	8016030 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016146:	2013      	movs	r0, #19
 8016148:	e772      	b.n	8016030 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 801614a:	200a      	movs	r0, #10
 801614c:	e770      	b.n	8016030 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801614e:	2013      	movs	r0, #19
 8016150:	e76e      	b.n	8016030 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 8016152:	2000      	movs	r0, #0
 8016154:	e76c      	b.n	8016030 <PrepareFrame+0x50>
 8016156:	bf00      	nop
 8016158:	20000f24 	.word	0x20000f24
 801615c:	2000142c 	.word	0x2000142c
 8016160:	200013ac 	.word	0x200013ac
 8016164:	2000103c 	.word	0x2000103c

08016168 <Send>:
{
 8016168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801616c:	b08a      	sub	sp, #40	; 0x28
 801616e:	4617      	mov	r7, r2
 8016170:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8016172:	4c47      	ldr	r4, [pc, #284]	; (8016290 <Send+0x128>)
 8016174:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8016178:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801617c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801617e:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8016180:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8016184:	2b00      	cmp	r3, #0
 8016186:	f000 8081 	beq.w	801628c <Send+0x124>
 801618a:	4605      	mov	r5, r0
 801618c:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801618e:	f894 30ff 	ldrb.w	r3, [r4, #255]	; 0xff
 8016192:	b90b      	cbnz	r3, 8016198 <Send+0x30>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8016194:	2100      	movs	r1, #0
 8016196:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 8016198:	2100      	movs	r1, #0
    fCtrl.Bits.FOptsLen      = 0;
 801619a:	460b      	mov	r3, r1
 801619c:	f361 0303 	bfi	r3, r1, #0, #4
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80161a0:	483b      	ldr	r0, [pc, #236]	; (8016290 <Send+0x128>)
 80161a2:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
 80161a6:	f361 13c7 	bfi	r3, r1, #7, #1
 80161aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80161ae:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
 80161b2:	2b01      	cmp	r3, #1
 80161b4:	d057      	beq.n	8016266 <Send+0xfe>
        fCtrl.Bits.FPending      = 0;
 80161b6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80161ba:	f36f 1304 	bfc	r3, #4, #1
 80161be:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80161c2:	4b33      	ldr	r3, [pc, #204]	; (8016290 <Send+0x128>)
 80161c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80161c8:	b12b      	cbz	r3, 80161d6 <Send+0x6e>
        fCtrl.Bits.Ack = 1;
 80161ca:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80161ce:	f043 0320 	orr.w	r3, r3, #32
 80161d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.Version = Nvm.MacGroup2.Version;
 80161d6:	4c2e      	ldr	r4, [pc, #184]	; (8016290 <Send+0x128>)
 80161d8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 80161dc:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = true;
 80161de:	2301      	movs	r3, #1
 80161e0:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80161e4:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80161e8:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80161ea:	4b2a      	ldr	r3, [pc, #168]	; (8016294 <Send+0x12c>)
 80161ec:	f8b3 23f4 	ldrh.w	r2, [r3, #1012]	; 0x3f4
 80161f0:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80161f4:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80161f8:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80161fc:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8016200:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8016204:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8016208:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 801620c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8016210:	f88d 301f 	strb.w	r3, [sp, #31]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8016214:	ab08      	add	r3, sp, #32
 8016216:	f104 0238 	add.w	r2, r4, #56	; 0x38
 801621a:	f104 0139 	add.w	r1, r4, #57	; 0x39
 801621e:	a803      	add	r0, sp, #12
 8016220:	f001 f85f 	bl	80172e2 <LoRaMacAdrCalcNext>
 8016224:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8016228:	f360 1386 	bfi	r3, r0, #6, #1
 801622c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8016230:	f8cd 8000 	str.w	r8, [sp]
 8016234:	463b      	mov	r3, r7
 8016236:	4632      	mov	r2, r6
 8016238:	a909      	add	r1, sp, #36	; 0x24
 801623a:	4628      	mov	r0, r5
 801623c:	f7ff fed0 	bl	8015fe0 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8016240:	4604      	mov	r4, r0
 8016242:	b108      	cbz	r0, 8016248 <Send+0xe0>
 8016244:	280a      	cmp	r0, #10
 8016246:	d104      	bne.n	8016252 <Send+0xea>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8016248:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801624c:	f7ff f9d8 	bl	8015600 <ScheduleTx>
 8016250:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 8016252:	b17c      	cbz	r4, 8016274 <Send+0x10c>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8016254:	4b0e      	ldr	r3, [pc, #56]	; (8016290 <Send+0x128>)
 8016256:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 801625a:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 801625e:	4620      	mov	r0, r4
 8016260:	b00a      	add	sp, #40	; 0x28
 8016262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 8016266:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801626a:	f043 0310 	orr.w	r3, r3, #16
 801626e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016272:	e7a6      	b.n	80161c2 <Send+0x5a>
        Nvm.MacGroup1.SrvAckRequested = false;
 8016274:	4b06      	ldr	r3, [pc, #24]	; (8016290 <Send+0x128>)
 8016276:	2200      	movs	r2, #0
 8016278:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 801627c:	9a08      	ldr	r2, [sp, #32]
 801627e:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8016280:	f001 f936 	bl	80174f0 <LoRaMacCommandsRemoveNoneStickyCmds>
 8016284:	2800      	cmp	r0, #0
 8016286:	d0ea      	beq.n	801625e <Send+0xf6>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016288:	2413      	movs	r4, #19
 801628a:	e7e8      	b.n	801625e <Send+0xf6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801628c:	2407      	movs	r4, #7
 801628e:	e7e6      	b.n	801625e <Send+0xf6>
 8016290:	2000142c 	.word	0x2000142c
 8016294:	20000f24 	.word	0x20000f24

08016298 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8016298:	4b07      	ldr	r3, [pc, #28]	; (80162b8 <LoRaMacIsBusy+0x20>)
 801629a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801629e:	b933      	cbnz	r3, 80162ae <LoRaMacIsBusy+0x16>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80162a0:	4b05      	ldr	r3, [pc, #20]	; (80162b8 <LoRaMacIsBusy+0x20>)
 80162a2:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80162a6:	2b01      	cmp	r3, #1
 80162a8:	d003      	beq.n	80162b2 <LoRaMacIsBusy+0x1a>
    return true;
 80162aa:	2001      	movs	r0, #1
 80162ac:	4770      	bx	lr
 80162ae:	2001      	movs	r0, #1
 80162b0:	4770      	bx	lr
        return false;
 80162b2:	2000      	movs	r0, #0
}
 80162b4:	4770      	bx	lr
 80162b6:	bf00      	nop
 80162b8:	20000f24 	.word	0x20000f24

080162bc <LoRaMacProcess>:
{
 80162bc:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 80162be:	f7fe ffd5 	bl	801526c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80162c2:	f001 f83c 	bl	801733e <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80162c6:	4b15      	ldr	r3, [pc, #84]	; (801631c <LoRaMacProcess+0x60>)
 80162c8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80162cc:	f013 0f20 	tst.w	r3, #32
 80162d0:	d107      	bne.n	80162e2 <LoRaMacProcess+0x26>
    LoRaMacHandleIndicationEvents( );
 80162d2:	f7fd fea7 	bl	8014024 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80162d6:	4b11      	ldr	r3, [pc, #68]	; (801631c <LoRaMacProcess+0x60>)
 80162d8:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80162dc:	2b02      	cmp	r3, #2
 80162de:	d01a      	beq.n	8016316 <LoRaMacProcess+0x5a>
}
 80162e0:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 80162e2:	2000      	movs	r0, #0
 80162e4:	f7fd fe98 	bl	8014018 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80162e8:	f7fd fee6 	bl	80140b8 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 80162ec:	f7fd ffc2 	bl	8014274 <IsRequestPending>
 80162f0:	b110      	cbz	r0, 80162f8 <LoRaMacProcess+0x3c>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 80162f2:	f7fe f8e7 	bl	80144c4 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 80162f6:	b918      	cbnz	r0, 8016300 <LoRaMacProcess+0x44>
            LoRaMacHandleMlmeRequest( );
 80162f8:	f7fe ffe6 	bl	80152c8 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 80162fc:	f7ff fa2c 	bl	8015758 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 8016300:	f7ff fa76 	bl	80157f0 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8016304:	f7ff fabe 	bl	8015884 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 8016308:	4805      	ldr	r0, [pc, #20]	; (8016320 <LoRaMacProcess+0x64>)
 801630a:	f7ff fad3 	bl	80158b4 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801630e:	2001      	movs	r0, #1
 8016310:	f7fd fe82 	bl	8014018 <LoRaMacEnableRequests>
 8016314:	e7dd      	b.n	80162d2 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 8016316:	f7ff fbbd 	bl	8015a94 <OpenContinuousRxCWindow>
}
 801631a:	e7e1      	b.n	80162e0 <LoRaMacProcess+0x24>
 801631c:	20000f24 	.word	0x20000f24
 8016320:	2000142c 	.word	0x2000142c

08016324 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8016324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016328:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801632a:	2800      	cmp	r0, #0
 801632c:	f000 8190 	beq.w	8016650 <LoRaMacInitialization+0x32c>
 8016330:	460e      	mov	r6, r1
 8016332:	4691      	mov	r9, r2
 8016334:	4680      	mov	r8, r0
 8016336:	2900      	cmp	r1, #0
 8016338:	f000 818c 	beq.w	8016654 <LoRaMacInitialization+0x330>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801633c:	6803      	ldr	r3, [r0, #0]
 801633e:	2b00      	cmp	r3, #0
 8016340:	f000 818a 	beq.w	8016658 <LoRaMacInitialization+0x334>
        ( primitives->MacMcpsIndication == NULL ) ||
 8016344:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8016346:	2b00      	cmp	r3, #0
 8016348:	f000 8188 	beq.w	801665c <LoRaMacInitialization+0x338>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801634c:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801634e:	2b00      	cmp	r3, #0
 8016350:	f000 8186 	beq.w	8016660 <LoRaMacInitialization+0x33c>
        ( primitives->MacMlmeIndication == NULL ) )
 8016354:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8016356:	2b00      	cmp	r3, #0
 8016358:	f000 8184 	beq.w	8016664 <LoRaMacInitialization+0x340>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801635c:	4610      	mov	r0, r2
 801635e:	f001 ffa6 	bl	80182ae <RegionIsActive>
 8016362:	2800      	cmp	r0, #0
 8016364:	f000 8180 	beq.w	8016668 <LoRaMacInitialization+0x344>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8016368:	4640      	mov	r0, r8
 801636a:	f001 f9a3 	bl	80176b4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 801636e:	4cc5      	ldr	r4, [pc, #788]	; (8016684 <LoRaMacInitialization+0x360>)
 8016370:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8016374:	2100      	movs	r1, #0
 8016376:	4620      	mov	r0, r4
 8016378:	f009 fdbb 	bl	801fef2 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 801637c:	4dc2      	ldr	r5, [pc, #776]	; (8016688 <LoRaMacInitialization+0x364>)
 801637e:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8016382:	2100      	movs	r1, #0
 8016384:	4628      	mov	r0, r5
 8016386:	f009 fdb4 	bl	801fef2 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 801638a:	f04f 0a01 	mov.w	sl, #1
 801638e:	f885 a412 	strb.w	sl, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8016392:	f885 a411 	strb.w	sl, [r5, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8016396:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 801639a:	2700      	movs	r7, #0
 801639c:	f884 70fc 	strb.w	r7, [r4, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 80163a0:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80163a4:	4bb9      	ldr	r3, [pc, #740]	; (801668c <LoRaMacInitialization+0x368>)
 80163a6:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80163aa:	230f      	movs	r3, #15
 80163ac:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80163b0:	a908      	add	r1, sp, #32
 80163b2:	4648      	mov	r0, r9
 80163b4:	f001 ff89 	bl	80182ca <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80163b8:	1bc0      	subs	r0, r0, r7
 80163ba:	bf18      	it	ne
 80163bc:	2001      	movne	r0, #1
 80163be:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80163c2:	f04f 0b0a 	mov.w	fp, #10
 80163c6:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80163ca:	a908      	add	r1, sp, #32
 80163cc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80163d0:	f001 ff7b 	bl	80182ca <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80163d4:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 80163d8:	f04f 0906 	mov.w	r9, #6
 80163dc:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80163e0:	a908      	add	r1, sp, #32
 80163e2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80163e6:	f001 ff70 	bl	80182ca <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80163ea:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80163ee:	2310      	movs	r3, #16
 80163f0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80163f4:	a908      	add	r1, sp, #32
 80163f6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80163fa:	f001 ff66 	bl	80182ca <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80163fe:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8016402:	2311      	movs	r3, #17
 8016404:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016408:	a908      	add	r1, sp, #32
 801640a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 801640e:	f001 ff5c 	bl	80182ca <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8016412:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8016416:	2312      	movs	r3, #18
 8016418:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801641c:	a908      	add	r1, sp, #32
 801641e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8016422:	f001 ff52 	bl	80182ca <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8016426:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801642a:	2313      	movs	r3, #19
 801642c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016430:	a908      	add	r1, sp, #32
 8016432:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8016436:	f001 ff48 	bl	80182ca <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801643a:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801643e:	2314      	movs	r3, #20
 8016440:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016444:	a908      	add	r1, sp, #32
 8016446:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 801644a:	f001 ff3e 	bl	80182ca <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801644e:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8016452:	2317      	movs	r3, #23
 8016454:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016458:	a908      	add	r1, sp, #32
 801645a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 801645e:	f001 ff34 	bl	80182ca <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8016462:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8016466:	2318      	movs	r3, #24
 8016468:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801646c:	a908      	add	r1, sp, #32
 801646e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8016472:	f001 ff2a 	bl	80182ca <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8016476:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 801647a:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 801647e:	2319      	movs	r3, #25
 8016480:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016484:	a908      	add	r1, sp, #32
 8016486:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 801648a:	f001 ff1e 	bl	80182ca <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 801648e:	b2c0      	uxtb	r0, r0
 8016490:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8016494:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8016498:	231e      	movs	r3, #30
 801649a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801649e:	a908      	add	r1, sp, #32
 80164a0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80164a4:	f001 ff11 	bl	80182ca <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80164a8:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80164ac:	231f      	movs	r3, #31
 80164ae:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80164b2:	a908      	add	r1, sp, #32
 80164b4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80164b8:	f001 ff07 	bl	80182ca <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80164bc:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80164c0:	2320      	movs	r3, #32
 80164c2:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80164c6:	eb0d 0103 	add.w	r1, sp, r3
 80164ca:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80164ce:	f001 fefc 	bl	80182ca <RegionGetPhyParam>
 80164d2:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80164d4:	9b07      	ldr	r3, [sp, #28]
 80164d6:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80164da:	2321      	movs	r3, #33	; 0x21
 80164dc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80164e0:	a908      	add	r1, sp, #32
 80164e2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80164e6:	f001 fef0 	bl	80182ca <RegionGetPhyParam>
 80164ea:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80164ec:	9b07      	ldr	r3, [sp, #28]
 80164ee:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80164f2:	230b      	movs	r3, #11
 80164f4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80164f8:	a908      	add	r1, sp, #32
 80164fa:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80164fe:	f001 fee4 	bl	80182ca <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 8016502:	f8a5 03f4 	strh.w	r0, [r5, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8016506:	230c      	movs	r3, #12
 8016508:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801650c:	a908      	add	r1, sp, #32
 801650e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8016512:	f001 feda 	bl	80182ca <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 8016516:	f8a5 03f6 	strh.w	r0, [r5, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 801651a:	f884 a0a0 	strb.w	sl, [r4, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 801651e:	f8c4 b084 	str.w	fp, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8016522:	f884 9088 	strb.w	r9, [r4, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8016526:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801652a:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 801652e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8016532:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8016534:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8016538:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 801653a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801653e:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8016540:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8016544:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8016546:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 801654a:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 801654c:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8016550:	f88d 7018 	strb.w	r7, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8016554:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 8016558:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801655a:	f504 731f 	add.w	r3, r4, #636	; 0x27c
 801655e:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8016560:	a904      	add	r1, sp, #16
 8016562:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8016566:	f001 ff15 	bl	8018394 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 801656a:	f8c5 6348 	str.w	r6, [r5, #840]	; 0x348
    ResetMacParameters( );
 801656e:	f7ff fbb9 	bl	8015ce4 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8016572:	f884 a0fd 	strb.w	sl, [r4, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8016576:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 801657a:	f885 7481 	strb.w	r7, [r5, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 801657e:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8016582:	62e7      	str	r7, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8016584:	6327      	str	r7, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8016586:	9700      	str	r7, [sp, #0]
 8016588:	4b41      	ldr	r3, [pc, #260]	; (8016690 <LoRaMacInitialization+0x36c>)
 801658a:	463a      	mov	r2, r7
 801658c:	f04f 31ff 	mov.w	r1, #4294967295
 8016590:	f505 705a 	add.w	r0, r5, #872	; 0x368
 8016594:	f00c fa50 	bl	8022a38 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8016598:	9700      	str	r7, [sp, #0]
 801659a:	4b3e      	ldr	r3, [pc, #248]	; (8016694 <LoRaMacInitialization+0x370>)
 801659c:	463a      	mov	r2, r7
 801659e:	f04f 31ff 	mov.w	r1, #4294967295
 80165a2:	f505 7060 	add.w	r0, r5, #896	; 0x380
 80165a6:	f00c fa47 	bl	8022a38 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80165aa:	9700      	str	r7, [sp, #0]
 80165ac:	4b3a      	ldr	r3, [pc, #232]	; (8016698 <LoRaMacInitialization+0x374>)
 80165ae:	463a      	mov	r2, r7
 80165b0:	f04f 31ff 	mov.w	r1, #4294967295
 80165b4:	f505 7066 	add.w	r0, r5, #920	; 0x398
 80165b8:	f00c fa3e 	bl	8022a38 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80165bc:	9700      	str	r7, [sp, #0]
 80165be:	4b37      	ldr	r3, [pc, #220]	; (801669c <LoRaMacInitialization+0x378>)
 80165c0:	463a      	mov	r2, r7
 80165c2:	f04f 31ff 	mov.w	r1, #4294967295
 80165c6:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 80165ca:	f00c fa35 	bl	8022a38 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80165ce:	af02      	add	r7, sp, #8
 80165d0:	4638      	mov	r0, r7
 80165d2:	f00c f957 	bl	8022884 <SysTimeGetMcuTime>
 80165d6:	f504 7382 	add.w	r3, r4, #260	; 0x104
 80165da:	e897 0003 	ldmia.w	r7, {r0, r1}
 80165de:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80165e2:	4b2f      	ldr	r3, [pc, #188]	; (80166a0 <LoRaMacInitialization+0x37c>)
 80165e4:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80165e8:	4b2e      	ldr	r3, [pc, #184]	; (80166a4 <LoRaMacInitialization+0x380>)
 80165ea:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80165ee:	4b2e      	ldr	r3, [pc, #184]	; (80166a8 <LoRaMacInitialization+0x384>)
 80165f0:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80165f4:	4b2d      	ldr	r3, [pc, #180]	; (80166ac <LoRaMacInitialization+0x388>)
 80165f6:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80165fa:	4b2d      	ldr	r3, [pc, #180]	; (80166b0 <LoRaMacInitialization+0x38c>)
 80165fc:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8016600:	4b2c      	ldr	r3, [pc, #176]	; (80166b4 <LoRaMacInitialization+0x390>)
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 8016608:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 801660a:	68b1      	ldr	r1, [r6, #8]
 801660c:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8016610:	f009 fa68 	bl	801fae4 <SecureElementInit>
 8016614:	bb68      	cbnz	r0, 8016672 <LoRaMacInitialization+0x34e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8016616:	4620      	mov	r0, r4
 8016618:	f001 fadc 	bl	8017bd4 <LoRaMacCryptoInit>
 801661c:	bb58      	cbnz	r0, 8016676 <LoRaMacInitialization+0x352>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801661e:	f000 ff11 	bl	8017444 <LoRaMacCommandsInit>
 8016622:	bb50      	cbnz	r0, 801667a <LoRaMacInitialization+0x356>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8016624:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016628:	f001 fb3c 	bl	8017ca4 <LoRaMacCryptoSetMulticastReference>
 801662c:	4604      	mov	r4, r0
 801662e:	bb30      	cbnz	r0, 801667e <LoRaMacInitialization+0x35a>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8016630:	4d20      	ldr	r5, [pc, #128]	; (80166b4 <LoRaMacInitialization+0x390>)
 8016632:	696b      	ldr	r3, [r5, #20]
 8016634:	4798      	blx	r3
 8016636:	f009 fc33 	bl	801fea0 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801663a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 801663c:	4a11      	ldr	r2, [pc, #68]	; (8016684 <LoRaMacInitialization+0x360>)
 801663e:	f892 00fd 	ldrb.w	r0, [r2, #253]	; 0xfd
 8016642:	4798      	blx	r3
    Radio.Sleep( );
 8016644:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8016646:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8016648:	4650      	mov	r0, sl
 801664a:	f7fd fce5 	bl	8014018 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801664e:	e00c      	b.n	801666a <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016650:	2403      	movs	r4, #3
 8016652:	e00a      	b.n	801666a <LoRaMacInitialization+0x346>
 8016654:	2403      	movs	r4, #3
 8016656:	e008      	b.n	801666a <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016658:	2403      	movs	r4, #3
 801665a:	e006      	b.n	801666a <LoRaMacInitialization+0x346>
 801665c:	2403      	movs	r4, #3
 801665e:	e004      	b.n	801666a <LoRaMacInitialization+0x346>
 8016660:	2403      	movs	r4, #3
 8016662:	e002      	b.n	801666a <LoRaMacInitialization+0x346>
 8016664:	2403      	movs	r4, #3
 8016666:	e000      	b.n	801666a <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016668:	2409      	movs	r4, #9
}
 801666a:	4620      	mov	r0, r4
 801666c:	b00b      	add	sp, #44	; 0x2c
 801666e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8016672:	2411      	movs	r4, #17
 8016674:	e7f9      	b.n	801666a <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8016676:	2411      	movs	r4, #17
 8016678:	e7f7      	b.n	801666a <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801667a:	2413      	movs	r4, #19
 801667c:	e7f5      	b.n	801666a <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801667e:	2411      	movs	r4, #17
 8016680:	e7f3      	b.n	801666a <LoRaMacInitialization+0x346>
 8016682:	bf00      	nop
 8016684:	2000142c 	.word	0x2000142c
 8016688:	20000f24 	.word	0x20000f24
 801668c:	01000300 	.word	0x01000300
 8016690:	08015709 	.word	0x08015709
 8016694:	08015b85 	.word	0x08015b85
 8016698:	08015b35 	.word	0x08015b35
 801669c:	08014441 	.word	0x08014441
 80166a0:	08015c8d 	.word	0x08015c8d
 80166a4:	08015c35 	.word	0x08015c35
 80166a8:	08013fcd 	.word	0x08013fcd
 80166ac:	08015c01 	.word	0x08015c01
 80166b0:	08015bcd 	.word	0x08015bcd
 80166b4:	08028984 	.word	0x08028984

080166b8 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 80166b8:	2000      	movs	r0, #0
 80166ba:	4b02      	ldr	r3, [pc, #8]	; (80166c4 <LoRaMacStart+0xc>)
 80166bc:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 80166c0:	4770      	bx	lr
 80166c2:	bf00      	nop
 80166c4:	20000f24 	.word	0x20000f24

080166c8 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80166c8:	b530      	push	{r4, r5, lr}
 80166ca:	b089      	sub	sp, #36	; 0x24
 80166cc:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80166ce:	4b2f      	ldr	r3, [pc, #188]	; (801678c <LoRaMacQueryTxPossible+0xc4>)
 80166d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80166d2:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80166d4:	f993 00c5 	ldrsb.w	r0, [r3, #197]	; 0xc5
 80166d8:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80166dc:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 80166e0:	f88d 3006 	strb.w	r3, [sp, #6]
    size_t macCmdsSize = 0;
 80166e4:	2300      	movs	r3, #0
 80166e6:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 80166e8:	2900      	cmp	r1, #0
 80166ea:	d048      	beq.n	801677e <LoRaMacQueryTxPossible+0xb6>
 80166ec:	460d      	mov	r5, r1
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 80166ee:	4b27      	ldr	r3, [pc, #156]	; (801678c <LoRaMacQueryTxPossible+0xc4>)
 80166f0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80166f4:	9103      	str	r1, [sp, #12]
    adrNext.UpdateChanMask = false;
 80166f6:	2100      	movs	r1, #0
 80166f8:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80166fc:	f893 10fe 	ldrb.w	r1, [r3, #254]	; 0xfe
 8016700:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8016704:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8016706:	4a22      	ldr	r2, [pc, #136]	; (8016790 <LoRaMacQueryTxPossible+0xc8>)
 8016708:	f8b2 13f4 	ldrh.w	r1, [r2, #1012]	; 0x3f4
 801670c:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8016710:	f8b2 23f6 	ldrh.w	r2, [r2, #1014]	; 0x3f6
 8016714:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8016718:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801671c:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8016720:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8016724:	f88d 201d 	strb.w	r2, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8016728:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801672c:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 8016730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016734:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8016738:	ab02      	add	r3, sp, #8
 801673a:	f10d 0206 	add.w	r2, sp, #6
 801673e:	f10d 0107 	add.w	r1, sp, #7
 8016742:	a803      	add	r0, sp, #12
 8016744:	f000 fdcd 	bl	80172e2 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8016748:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 801674c:	f7fd fdca 	bl	80142e4 <GetMaxAppPayloadWithoutFOptsLength>
 8016750:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8016752:	4668      	mov	r0, sp
 8016754:	f000 fef8 	bl	8017548 <LoRaMacCommandsGetSizeSerializedCmds>
 8016758:	b998      	cbnz	r0, 8016782 <LoRaMacQueryTxPossible+0xba>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 801675a:	9b00      	ldr	r3, [sp, #0]
 801675c:	2b0f      	cmp	r3, #15
 801675e:	d80a      	bhi.n	8016776 <LoRaMacQueryTxPossible+0xae>
 8016760:	786a      	ldrb	r2, [r5, #1]
 8016762:	4293      	cmp	r3, r2
 8016764:	d807      	bhi.n	8016776 <LoRaMacQueryTxPossible+0xae>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8016766:	1ad3      	subs	r3, r2, r3
 8016768:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801676a:	9b00      	ldr	r3, [sp, #0]
 801676c:	441c      	add	r4, r3
 801676e:	42a2      	cmp	r2, r4
 8016770:	d309      	bcc.n	8016786 <LoRaMacQueryTxPossible+0xbe>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 8016772:	b009      	add	sp, #36	; 0x24
 8016774:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 8016776:	2300      	movs	r3, #0
 8016778:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801677a:	2008      	movs	r0, #8
 801677c:	e7f9      	b.n	8016772 <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801677e:	2003      	movs	r0, #3
 8016780:	e7f7      	b.n	8016772 <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016782:	2013      	movs	r0, #19
 8016784:	e7f5      	b.n	8016772 <LoRaMacQueryTxPossible+0xaa>
           return LORAMAC_STATUS_LENGTH_ERROR;
 8016786:	2008      	movs	r0, #8
 8016788:	e7f3      	b.n	8016772 <LoRaMacQueryTxPossible+0xaa>
 801678a:	bf00      	nop
 801678c:	2000142c 	.word	0x2000142c
 8016790:	20000f24 	.word	0x20000f24

08016794 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8016794:	2800      	cmp	r0, #0
 8016796:	f000 8109 	beq.w	80169ac <LoRaMacMibGetRequestConfirm+0x218>
{
 801679a:	b510      	push	{r4, lr}
 801679c:	b084      	sub	sp, #16
 801679e:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 80167a0:	7800      	ldrb	r0, [r0, #0]
 80167a2:	2828      	cmp	r0, #40	; 0x28
 80167a4:	f200 80fe 	bhi.w	80169a4 <LoRaMacMibGetRequestConfirm+0x210>
 80167a8:	e8df f010 	tbh	[pc, r0, lsl #1]
 80167ac:	002f0029 	.word	0x002f0029
 80167b0:	003a0035 	.word	0x003a0035
 80167b4:	0045003f 	.word	0x0045003f
 80167b8:	00fc004b 	.word	0x00fc004b
 80167bc:	00fc00fc 	.word	0x00fc00fc
 80167c0:	00fc00fc 	.word	0x00fc00fc
 80167c4:	00fc00fc 	.word	0x00fc00fc
 80167c8:	005100fc 	.word	0x005100fc
 80167cc:	005d0057 	.word	0x005d0057
 80167d0:	00710069 	.word	0x00710069
 80167d4:	00810079 	.word	0x00810079
 80167d8:	00890095 	.word	0x00890095
 80167dc:	00a700a1 	.word	0x00a700a1
 80167e0:	00b100ac 	.word	0x00b100ac
 80167e4:	00bb00b6 	.word	0x00bb00b6
 80167e8:	00c600c0 	.word	0x00c600c0
 80167ec:	00cc00d2 	.word	0x00cc00d2
 80167f0:	00dd00d8 	.word	0x00dd00d8
 80167f4:	00ed00e3 	.word	0x00ed00e3
 80167f8:	00fc00e8 	.word	0x00fc00e8
 80167fc:	00f3      	.short	0x00f3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80167fe:	4b6c      	ldr	r3, [pc, #432]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 8016800:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8016804:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8016806:	b004      	add	sp, #16
 8016808:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801680a:	4b69      	ldr	r3, [pc, #420]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 801680c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8016810:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016812:	2000      	movs	r0, #0
            break;
 8016814:	e7f7      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8016816:	f009 fb0f 	bl	801fe38 <SecureElementGetDevEui>
 801681a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801681c:	2000      	movs	r0, #0
            break;
 801681e:	e7f2      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8016820:	f009 fb20 	bl	801fe64 <SecureElementGetJoinEui>
 8016824:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016826:	2000      	movs	r0, #0
            break;
 8016828:	e7ed      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 801682a:	4b61      	ldr	r3, [pc, #388]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 801682c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8016830:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016832:	2000      	movs	r0, #0
            break;
 8016834:	e7e7      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8016836:	4b5e      	ldr	r3, [pc, #376]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 8016838:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801683c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801683e:	2000      	movs	r0, #0
            break;
 8016840:	e7e1      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8016842:	4b5b      	ldr	r3, [pc, #364]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 8016844:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8016848:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801684a:	2000      	movs	r0, #0
            break;
 801684c:	e7db      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801684e:	4b58      	ldr	r3, [pc, #352]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 8016850:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8016854:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016856:	2000      	movs	r0, #0
            break;
 8016858:	e7d5      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801685a:	4b55      	ldr	r3, [pc, #340]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 801685c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8016860:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016862:	2000      	movs	r0, #0
            break;
 8016864:	e7cf      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS;
 8016866:	231d      	movs	r3, #29
 8016868:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801686c:	a902      	add	r1, sp, #8
 801686e:	4b50      	ldr	r3, [pc, #320]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 8016870:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8016874:	f001 fd29 	bl	80182ca <RegionGetPhyParam>
            mibGet->Param.ChannelList = phyParam.Channels;
 8016878:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801687a:	2000      	movs	r0, #0
            break;
 801687c:	e7c3      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801687e:	3404      	adds	r4, #4
 8016880:	4b4c      	ldr	r3, [pc, #304]	; (80169b4 <LoRaMacMibGetRequestConfirm+0x220>)
 8016882:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016886:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801688a:	2000      	movs	r0, #0
            break;
 801688c:	e7bb      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801688e:	3404      	adds	r4, #4
 8016890:	4b49      	ldr	r3, [pc, #292]	; (80169b8 <LoRaMacMibGetRequestConfirm+0x224>)
 8016892:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016896:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801689a:	2000      	movs	r0, #0
            break;
 801689c:	e7b3      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801689e:	3404      	adds	r4, #4
 80168a0:	4b46      	ldr	r3, [pc, #280]	; (80169bc <LoRaMacMibGetRequestConfirm+0x228>)
 80168a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80168a6:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80168aa:	2000      	movs	r0, #0
            break;
 80168ac:	e7ab      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80168ae:	3404      	adds	r4, #4
 80168b0:	4b43      	ldr	r3, [pc, #268]	; (80169c0 <LoRaMacMibGetRequestConfirm+0x22c>)
 80168b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80168b6:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80168ba:	2000      	movs	r0, #0
            break;
 80168bc:	e7a3      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80168be:	231b      	movs	r3, #27
 80168c0:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80168c4:	a902      	add	r1, sp, #8
 80168c6:	4b3a      	ldr	r3, [pc, #232]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 80168c8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80168cc:	f001 fcfd 	bl	80182ca <RegionGetPhyParam>
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80168d0:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80168d2:	2000      	movs	r0, #0
            break;
 80168d4:	e797      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80168d6:	231a      	movs	r3, #26
 80168d8:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80168dc:	a902      	add	r1, sp, #8
 80168de:	4b34      	ldr	r3, [pc, #208]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 80168e0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80168e4:	f001 fcf1 	bl	80182ca <RegionGetPhyParam>
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80168e8:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80168ea:	2000      	movs	r0, #0
            break;
 80168ec:	e78b      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80168ee:	4b30      	ldr	r3, [pc, #192]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 80168f0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80168f4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80168f6:	2000      	movs	r0, #0
            break;
 80168f8:	e785      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80168fa:	4b2d      	ldr	r3, [pc, #180]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 80168fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80168fe:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016900:	2000      	movs	r0, #0
            break;
 8016902:	e780      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8016904:	4b2a      	ldr	r3, [pc, #168]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 8016906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016908:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801690a:	2000      	movs	r0, #0
            break;
 801690c:	e77b      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801690e:	4b28      	ldr	r3, [pc, #160]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 8016910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016912:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016914:	2000      	movs	r0, #0
            break;
 8016916:	e776      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8016918:	4b25      	ldr	r3, [pc, #148]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 801691a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801691c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801691e:	2000      	movs	r0, #0
            break;
 8016920:	e771      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8016922:	4b23      	ldr	r3, [pc, #140]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 8016924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016926:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016928:	2000      	movs	r0, #0
            break;
 801692a:	e76c      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801692c:	4b20      	ldr	r3, [pc, #128]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 801692e:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 8016932:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016934:	2000      	movs	r0, #0
            break;
 8016936:	e766      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8016938:	4b1d      	ldr	r3, [pc, #116]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 801693a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801693e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016940:	2000      	movs	r0, #0
            break;
 8016942:	e760      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8016944:	4b1a      	ldr	r3, [pc, #104]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 8016946:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 801694a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801694c:	2000      	movs	r0, #0
            break;
 801694e:	e75a      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8016950:	4b17      	ldr	r3, [pc, #92]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 8016952:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8016956:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016958:	2000      	movs	r0, #0
            break;
 801695a:	e754      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 801695c:	4b14      	ldr	r3, [pc, #80]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 801695e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016960:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016962:	2000      	movs	r0, #0
            break;
 8016964:	e74f      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8016966:	4b12      	ldr	r3, [pc, #72]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 8016968:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801696c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801696e:	2000      	movs	r0, #0
            break;
 8016970:	e749      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8016972:	4b0f      	ldr	r3, [pc, #60]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 8016974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016976:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016978:	2000      	movs	r0, #0
            break;
 801697a:	e744      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Contexts = GetNvmData( );
 801697c:	f7fd fbdc 	bl	8014138 <GetNvmData>
 8016980:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016982:	2000      	movs	r0, #0
            break;
 8016984:	e73f      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8016986:	4b0a      	ldr	r3, [pc, #40]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 8016988:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801698c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801698e:	2000      	movs	r0, #0
            break;
 8016990:	e739      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8016992:	4b07      	ldr	r3, [pc, #28]	; (80169b0 <LoRaMacMibGetRequestConfirm+0x21c>)
 8016994:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8016998:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 801699a:	f001 ffbb 	bl	8018914 <RegionGetVersion>
 801699e:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80169a0:	2000      	movs	r0, #0
            break;
 80169a2:	e730      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80169a4:	4620      	mov	r0, r4
 80169a6:	f000 fcbc 	bl	8017322 <LoRaMacClassBMibGetRequestConfirm>
            break;
 80169aa:	e72c      	b.n	8016806 <LoRaMacMibGetRequestConfirm+0x72>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80169ac:	2003      	movs	r0, #3
}
 80169ae:	4770      	bx	lr
 80169b0:	2000142c 	.word	0x2000142c
 80169b4:	20001490 	.word	0x20001490
 80169b8:	200014d0 	.word	0x200014d0
 80169bc:	20001498 	.word	0x20001498
 80169c0:	200014d8 	.word	0x200014d8

080169c4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80169c4:	b530      	push	{r4, r5, lr}
 80169c6:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80169c8:	2800      	cmp	r0, #0
 80169ca:	f000 8240 	beq.w	8016e4e <LoRaMacMibSetRequestConfirm+0x48a>
 80169ce:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80169d0:	4bb1      	ldr	r3, [pc, #708]	; (8016c98 <LoRaMacMibSetRequestConfirm+0x2d4>)
 80169d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80169d6:	f013 0f02 	tst.w	r3, #2
 80169da:	f040 823a 	bne.w	8016e52 <LoRaMacMibSetRequestConfirm+0x48e>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 80169de:	7804      	ldrb	r4, [r0, #0]
 80169e0:	2c27      	cmp	r4, #39	; 0x27
 80169e2:	f200 8230 	bhi.w	8016e46 <LoRaMacMibSetRequestConfirm+0x482>
 80169e6:	e8df f014 	tbh	[pc, r4, lsl #1]
 80169ea:	0028      	.short	0x0028
 80169ec:	0036002d 	.word	0x0036002d
 80169f0:	0047003f 	.word	0x0047003f
 80169f4:	0053004d 	.word	0x0053004d
 80169f8:	00660059 	.word	0x00660059
 80169fc:	00800073 	.word	0x00800073
 8016a00:	009a008d 	.word	0x009a008d
 8016a04:	00b400a7 	.word	0x00b400a7
 8016a08:	00cc00c1 	.word	0x00cc00c1
 8016a0c:	00d2022e 	.word	0x00d2022e
 8016a10:	011000f7 	.word	0x011000f7
 8016a14:	0173013d 	.word	0x0173013d
 8016a18:	01830163 	.word	0x01830163
 8016a1c:	0193018e 	.word	0x0193018e
 8016a20:	019d0198 	.word	0x019d0198
 8016a24:	01a701a2 	.word	0x01a701a2
 8016a28:	01e901bc 	.word	0x01e901bc
 8016a2c:	01fd01d5 	.word	0x01fd01d5
 8016a30:	020c0204 	.word	0x020c0204
 8016a34:	02170211 	.word	0x02170211
 8016a38:	021e      	.short	0x021e
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8016a3a:	7900      	ldrb	r0, [r0, #4]
 8016a3c:	f7ff f9f4 	bl	8015e28 <SwitchClass>
 8016a40:	4604      	mov	r4, r0
            break;
 8016a42:	e207      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8016a44:	7903      	ldrb	r3, [r0, #4]
 8016a46:	2b02      	cmp	r3, #2
 8016a48:	f000 8207 	beq.w	8016e5a <LoRaMacMibSetRequestConfirm+0x496>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8016a4c:	4a93      	ldr	r2, [pc, #588]	; (8016c9c <LoRaMacMibSetRequestConfirm+0x2d8>)
 8016a4e:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016a52:	2400      	movs	r4, #0
 8016a54:	e1fe      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8016a56:	6840      	ldr	r0, [r0, #4]
 8016a58:	f009 f9e0 	bl	801fe1c <SecureElementSetDevEui>
 8016a5c:	4604      	mov	r4, r0
 8016a5e:	2800      	cmp	r0, #0
 8016a60:	f000 81f8 	beq.w	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016a64:	2403      	movs	r4, #3
 8016a66:	e1f5      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8016a68:	6840      	ldr	r0, [r0, #4]
 8016a6a:	f009 f9eb 	bl	801fe44 <SecureElementSetJoinEui>
 8016a6e:	2800      	cmp	r0, #0
 8016a70:	f040 81f0 	bne.w	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016a74:	4604      	mov	r4, r0
 8016a76:	e1ed      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8016a78:	7902      	ldrb	r2, [r0, #4]
 8016a7a:	4b88      	ldr	r3, [pc, #544]	; (8016c9c <LoRaMacMibSetRequestConfirm+0x2d8>)
 8016a7c:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016a80:	2400      	movs	r4, #0
            break;
 8016a82:	e1e7      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8016a84:	6842      	ldr	r2, [r0, #4]
 8016a86:	4b85      	ldr	r3, [pc, #532]	; (8016c9c <LoRaMacMibSetRequestConfirm+0x2d8>)
 8016a88:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016a8c:	2400      	movs	r4, #0
            break;
 8016a8e:	e1e1      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8016a90:	6842      	ldr	r2, [r0, #4]
 8016a92:	4b82      	ldr	r3, [pc, #520]	; (8016c9c <LoRaMacMibSetRequestConfirm+0x2d8>)
 8016a94:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016a98:	2400      	movs	r4, #0
            break;
 8016a9a:	e1db      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8016a9c:	6841      	ldr	r1, [r0, #4]
 8016a9e:	2900      	cmp	r1, #0
 8016aa0:	f000 81dd 	beq.w	8016e5e <LoRaMacMibSetRequestConfirm+0x49a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8016aa4:	2000      	movs	r0, #0
 8016aa6:	f001 fa19 	bl	8017edc <LoRaMacCryptoSetKey>
 8016aaa:	4604      	mov	r4, r0
 8016aac:	2800      	cmp	r0, #0
 8016aae:	f000 81d1 	beq.w	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016ab2:	2411      	movs	r4, #17
 8016ab4:	e1ce      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8016ab6:	6841      	ldr	r1, [r0, #4]
 8016ab8:	2900      	cmp	r1, #0
 8016aba:	f000 81d2 	beq.w	8016e62 <LoRaMacMibSetRequestConfirm+0x49e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8016abe:	2001      	movs	r0, #1
 8016ac0:	f001 fa0c 	bl	8017edc <LoRaMacCryptoSetKey>
 8016ac4:	4604      	mov	r4, r0
 8016ac6:	2800      	cmp	r0, #0
 8016ac8:	f000 81c4 	beq.w	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016acc:	2411      	movs	r4, #17
 8016ace:	e1c1      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8016ad0:	6841      	ldr	r1, [r0, #4]
 8016ad2:	2900      	cmp	r1, #0
 8016ad4:	f000 81c7 	beq.w	8016e66 <LoRaMacMibSetRequestConfirm+0x4a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8016ad8:	2002      	movs	r0, #2
 8016ada:	f001 f9ff 	bl	8017edc <LoRaMacCryptoSetKey>
 8016ade:	4604      	mov	r4, r0
 8016ae0:	2800      	cmp	r0, #0
 8016ae2:	f000 81b7 	beq.w	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016ae6:	2411      	movs	r4, #17
 8016ae8:	e1b4      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8016aea:	6841      	ldr	r1, [r0, #4]
 8016aec:	2900      	cmp	r1, #0
 8016aee:	f000 81bc 	beq.w	8016e6a <LoRaMacMibSetRequestConfirm+0x4a6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8016af2:	2003      	movs	r0, #3
 8016af4:	f001 f9f2 	bl	8017edc <LoRaMacCryptoSetKey>
 8016af8:	4604      	mov	r4, r0
 8016afa:	2800      	cmp	r0, #0
 8016afc:	f000 81aa 	beq.w	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016b00:	2411      	movs	r4, #17
 8016b02:	e1a7      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8016b04:	6841      	ldr	r1, [r0, #4]
 8016b06:	2900      	cmp	r1, #0
 8016b08:	f000 81b1 	beq.w	8016e6e <LoRaMacMibSetRequestConfirm+0x4aa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8016b0c:	207f      	movs	r0, #127	; 0x7f
 8016b0e:	f001 f9e5 	bl	8017edc <LoRaMacCryptoSetKey>
 8016b12:	4604      	mov	r4, r0
 8016b14:	2800      	cmp	r0, #0
 8016b16:	f000 819d 	beq.w	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016b1a:	2411      	movs	r4, #17
 8016b1c:	e19a      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8016b1e:	6841      	ldr	r1, [r0, #4]
 8016b20:	2900      	cmp	r1, #0
 8016b22:	f000 81a6 	beq.w	8016e72 <LoRaMacMibSetRequestConfirm+0x4ae>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8016b26:	2080      	movs	r0, #128	; 0x80
 8016b28:	f001 f9d8 	bl	8017edc <LoRaMacCryptoSetKey>
 8016b2c:	4604      	mov	r4, r0
 8016b2e:	2800      	cmp	r0, #0
 8016b30:	f000 8190 	beq.w	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016b34:	2411      	movs	r4, #17
 8016b36:	e18d      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8016b38:	6841      	ldr	r1, [r0, #4]
 8016b3a:	2900      	cmp	r1, #0
 8016b3c:	f000 819b 	beq.w	8016e76 <LoRaMacMibSetRequestConfirm+0x4b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8016b40:	2081      	movs	r0, #129	; 0x81
 8016b42:	f001 f9cb 	bl	8017edc <LoRaMacCryptoSetKey>
 8016b46:	4604      	mov	r4, r0
 8016b48:	2800      	cmp	r0, #0
 8016b4a:	f000 8183 	beq.w	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016b4e:	2411      	movs	r4, #17
 8016b50:	e180      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8016b52:	6841      	ldr	r1, [r0, #4]
 8016b54:	2900      	cmp	r1, #0
 8016b56:	f000 8190 	beq.w	8016e7a <LoRaMacMibSetRequestConfirm+0x4b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8016b5a:	2082      	movs	r0, #130	; 0x82
 8016b5c:	f001 f9be 	bl	8017edc <LoRaMacCryptoSetKey>
 8016b60:	4604      	mov	r4, r0
 8016b62:	2800      	cmp	r0, #0
 8016b64:	f000 8176 	beq.w	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016b68:	2411      	movs	r4, #17
 8016b6a:	e173      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8016b6c:	7900      	ldrb	r0, [r0, #4]
 8016b6e:	4b4b      	ldr	r3, [pc, #300]	; (8016c9c <LoRaMacMibSetRequestConfirm+0x2d8>)
 8016b70:	f883 00fd 	strb.w	r0, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8016b74:	4c4a      	ldr	r4, [pc, #296]	; (8016ca0 <LoRaMacMibSetRequestConfirm+0x2dc>)
 8016b76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016b78:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8016b7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016b7c:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016b7e:	2400      	movs	r4, #0
            /* ST_WORKAROUND_END */
            break;
 8016b80:	e168      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8016b82:	7902      	ldrb	r2, [r0, #4]
 8016b84:	4b45      	ldr	r3, [pc, #276]	; (8016c9c <LoRaMacMibSetRequestConfirm+0x2d8>)
 8016b86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016b8a:	2400      	movs	r4, #0
            break;
 8016b8c:	e162      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8016b8e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016b92:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8016b96:	4b41      	ldr	r3, [pc, #260]	; (8016c9c <LoRaMacMibSetRequestConfirm+0x2d8>)
 8016b98:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8016b9c:	f88d 2005 	strb.w	r2, [sp, #5]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8016ba0:	2207      	movs	r2, #7
 8016ba2:	a901      	add	r1, sp, #4
 8016ba4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8016ba8:	f001 fc1e 	bl	80183e8 <RegionVerify>
 8016bac:	b908      	cbnz	r0, 8016bb2 <LoRaMacMibSetRequestConfirm+0x1ee>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016bae:	2403      	movs	r4, #3
 8016bb0:	e150      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8016bb2:	686b      	ldr	r3, [r5, #4]
 8016bb4:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8016bb6:	2200      	movs	r2, #0
 8016bb8:	a901      	add	r1, sp, #4
 8016bba:	4b38      	ldr	r3, [pc, #224]	; (8016c9c <LoRaMacMibSetRequestConfirm+0x2d8>)
 8016bbc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8016bc0:	f001 fc12 	bl	80183e8 <RegionVerify>
 8016bc4:	2800      	cmp	r0, #0
 8016bc6:	f000 815a 	beq.w	8016e7e <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8016bca:	4b36      	ldr	r3, [pc, #216]	; (8016ca4 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8016bcc:	68a9      	ldr	r1, [r5, #8]
 8016bce:	6868      	ldr	r0, [r5, #4]
 8016bd0:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016bd4:	2400      	movs	r4, #0
 8016bd6:	e13d      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            /* ST_WORKAROUND_END */
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8016bd8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016bdc:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8016be0:	4b2e      	ldr	r3, [pc, #184]	; (8016c9c <LoRaMacMibSetRequestConfirm+0x2d8>)
 8016be2:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8016be6:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8016bea:	2207      	movs	r2, #7
 8016bec:	a901      	add	r1, sp, #4
 8016bee:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8016bf2:	f001 fbf9 	bl	80183e8 <RegionVerify>
 8016bf6:	2800      	cmp	r0, #0
 8016bf8:	f000 8143 	beq.w	8016e82 <LoRaMacMibSetRequestConfirm+0x4be>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8016bfc:	4b2a      	ldr	r3, [pc, #168]	; (8016ca8 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8016bfe:	68a9      	ldr	r1, [r5, #8]
 8016c00:	6868      	ldr	r0, [r5, #4]
 8016c02:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016c06:	2400      	movs	r4, #0
 8016c08:	e124      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8016c0a:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016c0e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8016c12:	4b22      	ldr	r3, [pc, #136]	; (8016c9c <LoRaMacMibSetRequestConfirm+0x2d8>)
 8016c14:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8016c18:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8016c1c:	2207      	movs	r2, #7
 8016c1e:	a901      	add	r1, sp, #4
 8016c20:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8016c24:	f001 fbe0 	bl	80183e8 <RegionVerify>
 8016c28:	2800      	cmp	r0, #0
 8016c2a:	f000 812c 	beq.w	8016e86 <LoRaMacMibSetRequestConfirm+0x4c2>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8016c2e:	4b1b      	ldr	r3, [pc, #108]	; (8016c9c <LoRaMacMibSetRequestConfirm+0x2d8>)
 8016c30:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8016c34:	68a9      	ldr	r1, [r5, #8]
 8016c36:	6868      	ldr	r0, [r5, #4]
 8016c38:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8016c3c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8016c40:	2b02      	cmp	r3, #2
 8016c42:	d001      	beq.n	8016c48 <LoRaMacMibSetRequestConfirm+0x284>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016c44:	2400      	movs	r4, #0
 8016c46:	e105      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8016c48:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 8016c4c:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 8016c50:	2c00      	cmp	r4, #0
 8016c52:	f000 80ff 	beq.w	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8016c56:	4b12      	ldr	r3, [pc, #72]	; (8016ca0 <LoRaMacMibSetRequestConfirm+0x2dc>)
 8016c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c5a:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8016c5c:	f7fe ff1a 	bl	8015a94 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016c60:	2400      	movs	r4, #0
 8016c62:	e0f7      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8016c64:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016c68:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8016c6c:	4b0b      	ldr	r3, [pc, #44]	; (8016c9c <LoRaMacMibSetRequestConfirm+0x2d8>)
 8016c6e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8016c72:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8016c76:	2207      	movs	r2, #7
 8016c78:	a901      	add	r1, sp, #4
 8016c7a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8016c7e:	f001 fbb3 	bl	80183e8 <RegionVerify>
 8016c82:	2800      	cmp	r0, #0
 8016c84:	f000 8101 	beq.w	8016e8a <LoRaMacMibSetRequestConfirm+0x4c6>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8016c88:	4b08      	ldr	r3, [pc, #32]	; (8016cac <LoRaMacMibSetRequestConfirm+0x2e8>)
 8016c8a:	68a9      	ldr	r1, [r5, #8]
 8016c8c:	6868      	ldr	r0, [r5, #4]
 8016c8e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016c92:	2400      	movs	r4, #0
 8016c94:	e0de      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
 8016c96:	bf00      	nop
 8016c98:	20000f24 	.word	0x20000f24
 8016c9c:	2000142c 	.word	0x2000142c
 8016ca0:	08028984 	.word	0x08028984
 8016ca4:	20001490 	.word	0x20001490
 8016ca8:	200014d0 	.word	0x200014d0
 8016cac:	200014d8 	.word	0x200014d8
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8016cb0:	6843      	ldr	r3, [r0, #4]
 8016cb2:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8016cb4:	2301      	movs	r3, #1
 8016cb6:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8016cba:	a902      	add	r1, sp, #8
 8016cbc:	4b7c      	ldr	r3, [pc, #496]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016cbe:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8016cc2:	f001 fbe2 	bl	801848a <RegionChanMaskSet>
 8016cc6:	2800      	cmp	r0, #0
 8016cc8:	f000 80e1 	beq.w	8016e8e <LoRaMacMibSetRequestConfirm+0x4ca>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016ccc:	2400      	movs	r4, #0
 8016cce:	e0c1      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8016cd0:	6843      	ldr	r3, [r0, #4]
 8016cd2:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8016cda:	a902      	add	r1, sp, #8
 8016cdc:	4b74      	ldr	r3, [pc, #464]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016cde:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8016ce2:	f001 fbd2 	bl	801848a <RegionChanMaskSet>
 8016ce6:	2800      	cmp	r0, #0
 8016ce8:	f000 80d3 	beq.w	8016e92 <LoRaMacMibSetRequestConfirm+0x4ce>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016cec:	2400      	movs	r4, #0
 8016cee:	e0b1      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8016cf0:	7902      	ldrb	r2, [r0, #4]
 8016cf2:	1e53      	subs	r3, r2, #1
 8016cf4:	b2db      	uxtb	r3, r3
 8016cf6:	2b0e      	cmp	r3, #14
 8016cf8:	f200 80cd 	bhi.w	8016e96 <LoRaMacMibSetRequestConfirm+0x4d2>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8016cfc:	4b6c      	ldr	r3, [pc, #432]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016cfe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016d02:	2400      	movs	r4, #0
 8016d04:	e0a6      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8016d06:	6842      	ldr	r2, [r0, #4]
 8016d08:	4b69      	ldr	r3, [pc, #420]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016d0a:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016d0c:	2400      	movs	r4, #0
            break;
 8016d0e:	e0a1      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8016d10:	6842      	ldr	r2, [r0, #4]
 8016d12:	4b67      	ldr	r3, [pc, #412]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016d14:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016d16:	2400      	movs	r4, #0
            break;
 8016d18:	e09c      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8016d1a:	6842      	ldr	r2, [r0, #4]
 8016d1c:	4b64      	ldr	r3, [pc, #400]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016d1e:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016d20:	2400      	movs	r4, #0
            break;
 8016d22:	e097      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8016d24:	6842      	ldr	r2, [r0, #4]
 8016d26:	4b62      	ldr	r3, [pc, #392]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016d28:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016d2a:	2400      	movs	r4, #0
            break;
 8016d2c:	e092      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8016d2e:	6842      	ldr	r2, [r0, #4]
 8016d30:	4b5f      	ldr	r3, [pc, #380]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016d32:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016d34:	2400      	movs	r4, #0
            break;
 8016d36:	e08d      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8016d38:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8016d3c:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8016d40:	2206      	movs	r2, #6
 8016d42:	a901      	add	r1, sp, #4
 8016d44:	4b5a      	ldr	r3, [pc, #360]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016d46:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8016d4a:	f001 fb4d 	bl	80183e8 <RegionVerify>
 8016d4e:	2800      	cmp	r0, #0
 8016d50:	f000 80a3 	beq.w	8016e9a <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8016d54:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8016d58:	4b55      	ldr	r3, [pc, #340]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016d5a:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016d5e:	2400      	movs	r4, #0
 8016d60:	e078      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8016d62:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8016d66:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8016d6a:	4b51      	ldr	r3, [pc, #324]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016d6c:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8016d70:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8016d74:	2205      	movs	r2, #5
 8016d76:	a901      	add	r1, sp, #4
 8016d78:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8016d7c:	f001 fb34 	bl	80183e8 <RegionVerify>
 8016d80:	2800      	cmp	r0, #0
 8016d82:	f000 808c 	beq.w	8016e9e <LoRaMacMibSetRequestConfirm+0x4da>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8016d86:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8016d8a:	4b49      	ldr	r3, [pc, #292]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016d90:	2400      	movs	r4, #0
 8016d92:	e05f      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8016d94:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8016d98:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8016d9c:	220a      	movs	r2, #10
 8016d9e:	a901      	add	r1, sp, #4
 8016da0:	4b43      	ldr	r3, [pc, #268]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016da2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8016da6:	f001 fb1f 	bl	80183e8 <RegionVerify>
 8016daa:	2800      	cmp	r0, #0
 8016dac:	d079      	beq.n	8016ea2 <LoRaMacMibSetRequestConfirm+0x4de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8016dae:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8016db2:	4b3f      	ldr	r3, [pc, #252]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016db4:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016db8:	2400      	movs	r4, #0
 8016dba:	e04b      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8016dbc:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8016dc0:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8016dc4:	2209      	movs	r2, #9
 8016dc6:	a901      	add	r1, sp, #4
 8016dc8:	4b39      	ldr	r3, [pc, #228]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016dca:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8016dce:	f001 fb0b 	bl	80183e8 <RegionVerify>
 8016dd2:	2800      	cmp	r0, #0
 8016dd4:	d067      	beq.n	8016ea6 <LoRaMacMibSetRequestConfirm+0x4e2>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8016dd6:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8016dda:	4b35      	ldr	r3, [pc, #212]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016de0:	2400      	movs	r4, #0
 8016de2:	e037      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8016de4:	6842      	ldr	r2, [r0, #4]
 8016de6:	4b32      	ldr	r3, [pc, #200]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8016dec:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016dee:	2400      	movs	r4, #0
            break;
 8016df0:	e030      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8016df2:	7902      	ldrb	r2, [r0, #4]
 8016df4:	4b2e      	ldr	r3, [pc, #184]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016df6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8016dfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016dfe:	2400      	movs	r4, #0
            break;
 8016e00:	e028      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8016e02:	6842      	ldr	r2, [r0, #4]
 8016e04:	4b2a      	ldr	r3, [pc, #168]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016e06:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016e08:	2400      	movs	r4, #0
            break;
 8016e0a:	e023      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8016e0c:	6842      	ldr	r2, [r0, #4]
 8016e0e:	4b28      	ldr	r3, [pc, #160]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016e10:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016e14:	2400      	movs	r4, #0
            break;
 8016e16:	e01d      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8016e18:	6840      	ldr	r0, [r0, #4]
 8016e1a:	2800      	cmp	r0, #0
 8016e1c:	d045      	beq.n	8016eaa <LoRaMacMibSetRequestConfirm+0x4e6>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8016e1e:	f7fe fdad 	bl	801597c <RestoreNvmData>
 8016e22:	4604      	mov	r4, r0
 8016e24:	e016      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8016e26:	7983      	ldrb	r3, [r0, #6]
 8016e28:	2b01      	cmp	r3, #1
 8016e2a:	d901      	bls.n	8016e30 <LoRaMacMibSetRequestConfirm+0x46c>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e2c:	2403      	movs	r4, #3
 8016e2e:	e011      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8016e30:	6842      	ldr	r2, [r0, #4]
 8016e32:	4b1f      	ldr	r3, [pc, #124]	; (8016eb0 <LoRaMacMibSetRequestConfirm+0x4ec>)
 8016e34:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8016e38:	6840      	ldr	r0, [r0, #4]
 8016e3a:	f000 fee3 	bl	8017c04 <LoRaMacCryptoSetLrWanVersion>
 8016e3e:	4604      	mov	r4, r0
 8016e40:	b140      	cbz	r0, 8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016e42:	2411      	movs	r4, #17
 8016e44:	e006      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8016e46:	f000 fa6e 	bl	8017326 <LoRaMacMibClassBSetRequestConfirm>
 8016e4a:	4604      	mov	r4, r0
            break;
 8016e4c:	e002      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016e4e:	2403      	movs	r4, #3
 8016e50:	e000      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
        return LORAMAC_STATUS_BUSY;
 8016e52:	2401      	movs	r4, #1
        }
    }
    return status;
}
 8016e54:	4620      	mov	r0, r4
 8016e56:	b005      	add	sp, #20
 8016e58:	bd30      	pop	{r4, r5, pc}
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e5a:	2403      	movs	r4, #3
 8016e5c:	e7fa      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e5e:	2403      	movs	r4, #3
 8016e60:	e7f8      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e62:	2403      	movs	r4, #3
 8016e64:	e7f6      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e66:	2403      	movs	r4, #3
 8016e68:	e7f4      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e6a:	2403      	movs	r4, #3
 8016e6c:	e7f2      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e6e:	2403      	movs	r4, #3
 8016e70:	e7f0      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e72:	2403      	movs	r4, #3
 8016e74:	e7ee      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e76:	2403      	movs	r4, #3
 8016e78:	e7ec      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e7a:	2403      	movs	r4, #3
 8016e7c:	e7ea      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e7e:	2403      	movs	r4, #3
 8016e80:	e7e8      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e82:	2403      	movs	r4, #3
 8016e84:	e7e6      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e86:	2403      	movs	r4, #3
 8016e88:	e7e4      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e8a:	2403      	movs	r4, #3
 8016e8c:	e7e2      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e8e:	2403      	movs	r4, #3
 8016e90:	e7e0      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e92:	2403      	movs	r4, #3
 8016e94:	e7de      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e96:	2403      	movs	r4, #3
 8016e98:	e7dc      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e9a:	2403      	movs	r4, #3
 8016e9c:	e7da      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016e9e:	2403      	movs	r4, #3
 8016ea0:	e7d8      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016ea2:	2403      	movs	r4, #3
 8016ea4:	e7d6      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016ea6:	2403      	movs	r4, #3
 8016ea8:	e7d4      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016eaa:	2403      	movs	r4, #3
 8016eac:	e7d2      	b.n	8016e54 <LoRaMacMibSetRequestConfirm+0x490>
 8016eae:	bf00      	nop
 8016eb0:	2000142c 	.word	0x2000142c

08016eb4 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8016eb4:	b570      	push	{r4, r5, r6, lr}
 8016eb6:	b082      	sub	sp, #8
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8016eb8:	2300      	movs	r3, #0
 8016eba:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 8016ebe:	2800      	cmp	r0, #0
 8016ec0:	f000 80c5 	beq.w	801704e <LoRaMacMlmeRequest+0x19a>
 8016ec4:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 8016ec6:	f7ff f9e7 	bl	8016298 <LoRaMacIsBusy>
 8016eca:	b118      	cbz	r0, 8016ed4 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 8016ecc:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 8016ece:	4620      	mov	r0, r4
 8016ed0:	b002      	add	sp, #8
 8016ed2:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8016ed4:	f000 fccc 	bl	8017870 <LoRaMacConfirmQueueIsFull>
 8016ed8:	b108      	cbz	r0, 8016ede <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 8016eda:	2401      	movs	r4, #1
 8016edc:	e7f7      	b.n	8016ece <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8016ede:	f000 fcc1 	bl	8017864 <LoRaMacConfirmQueueGetCnt>
 8016ee2:	b1f8      	cbz	r0, 8016f24 <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016ee4:	4b5b      	ldr	r3, [pc, #364]	; (8017054 <LoRaMacMlmeRequest+0x1a0>)
 8016ee6:	2101      	movs	r1, #1
 8016ee8:	f883 144d 	strb.w	r1, [r3, #1101]	; 0x44d
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8016eec:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8016ef0:	f042 0204 	orr.w	r2, r2, #4
 8016ef4:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8016ef8:	782b      	ldrb	r3, [r5, #0]
 8016efa:	f88d 3004 	strb.w	r3, [sp, #4]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016efe:	f88d 1005 	strb.w	r1, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 8016f02:	2200      	movs	r2, #0
 8016f04:	f88d 2007 	strb.w	r2, [sp, #7]
    switch( mlmeRequest->Type )
 8016f08:	461c      	mov	r4, r3
 8016f0a:	3b01      	subs	r3, #1
 8016f0c:	2b0d      	cmp	r3, #13
 8016f0e:	f200 8084 	bhi.w	801701a <LoRaMacMlmeRequest+0x166>
 8016f12:	e8df f003 	tbb	[pc, r3]
 8016f16:	820d      	.short	0x820d
 8016f18:	423d3382 	.word	0x423d3382
 8016f1c:	4b828282 	.word	0x4b828282
 8016f20:	6a547382 	.word	0x6a547382
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8016f24:	2214      	movs	r2, #20
 8016f26:	2100      	movs	r1, #0
 8016f28:	484b      	ldr	r0, [pc, #300]	; (8017058 <LoRaMacMlmeRequest+0x1a4>)
 8016f2a:	f008 ffe2 	bl	801fef2 <memset1>
 8016f2e:	e7d9      	b.n	8016ee4 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8016f30:	4b48      	ldr	r3, [pc, #288]	; (8017054 <LoRaMacMlmeRequest+0x1a0>)
 8016f32:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8016f36:	f013 0f20 	tst.w	r3, #32
 8016f3a:	d1c8      	bne.n	8016ece <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 8016f3c:	f7fe fed2 	bl	8015ce4 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8016f40:	4c46      	ldr	r4, [pc, #280]	; (801705c <LoRaMacMlmeRequest+0x1a8>)
 8016f42:	2200      	movs	r2, #0
 8016f44:	f995 1004 	ldrsb.w	r1, [r5, #4]
 8016f48:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8016f4c:	f001 fc38 	bl	80187c0 <RegionAlternateDr>
 8016f50:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8016f54:	2307      	movs	r3, #7
 8016f56:	f88d 3005 	strb.w	r3, [sp, #5]
            status = SendReJoinReq( JOIN_REQ );
 8016f5a:	20ff      	movs	r0, #255	; 0xff
 8016f5c:	f7fe ffe8 	bl	8015f30 <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 8016f60:	4604      	mov	r4, r0
 8016f62:	2800      	cmp	r0, #0
 8016f64:	d05a      	beq.n	801701c <LoRaMacMlmeRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8016f66:	4e3d      	ldr	r6, [pc, #244]	; (801705c <LoRaMacMlmeRequest+0x1a8>)
 8016f68:	2201      	movs	r2, #1
 8016f6a:	f995 1004 	ldrsb.w	r1, [r5, #4]
 8016f6e:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 8016f72:	f001 fc25 	bl	80187c0 <RegionAlternateDr>
 8016f76:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 8016f7a:	e04f      	b.n	801701c <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	4669      	mov	r1, sp
 8016f80:	2002      	movs	r0, #2
 8016f82:	f000 fa6d 	bl	8017460 <LoRaMacCommandsAddCmd>
 8016f86:	4604      	mov	r4, r0
 8016f88:	2800      	cmp	r0, #0
 8016f8a:	d047      	beq.n	801701c <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016f8c:	2413      	movs	r4, #19
 8016f8e:	e045      	b.n	801701c <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8016f90:	88a8      	ldrh	r0, [r5, #4]
 8016f92:	f7fe fffd 	bl	8015f90 <SetTxContinuousWave>
 8016f96:	4604      	mov	r4, r0
            break;
 8016f98:	e040      	b.n	801701c <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8016f9a:	f995 200c 	ldrsb.w	r2, [r5, #12]
 8016f9e:	b2d2      	uxtb	r2, r2
 8016fa0:	68a9      	ldr	r1, [r5, #8]
 8016fa2:	88a8      	ldrh	r0, [r5, #4]
 8016fa4:	f7fd f8b2 	bl	801410c <SetTxContinuousWave1>
 8016fa8:	4604      	mov	r4, r0
            break;
 8016faa:	e037      	b.n	801701c <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8016fac:	2200      	movs	r2, #0
 8016fae:	4669      	mov	r1, sp
 8016fb0:	200d      	movs	r0, #13
 8016fb2:	f000 fa55 	bl	8017460 <LoRaMacCommandsAddCmd>
 8016fb6:	4604      	mov	r4, r0
 8016fb8:	b380      	cbz	r0, 801701c <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016fba:	2413      	movs	r4, #19
 8016fbc:	e02e      	b.n	801701c <LoRaMacMlmeRequest+0x168>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8016fbe:	4b27      	ldr	r3, [pc, #156]	; (801705c <LoRaMacMlmeRequest+0x1a8>)
 8016fc0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8016fc4:	b10b      	cbz	r3, 8016fca <LoRaMacMlmeRequest+0x116>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8016fc6:	2402      	movs	r4, #2
 8016fc8:	e028      	b.n	801701c <LoRaMacMlmeRequest+0x168>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8016fca:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8016fcc:	f004 0007 	and.w	r0, r4, #7
 8016fd0:	f000 f9a2 	bl	8017318 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8016fd4:	f88d 4000 	strb.w	r4, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8016fd8:	2201      	movs	r2, #1
 8016fda:	4669      	mov	r1, sp
 8016fdc:	2010      	movs	r0, #16
 8016fde:	f000 fa3f 	bl	8017460 <LoRaMacCommandsAddCmd>
 8016fe2:	4604      	mov	r4, r0
 8016fe4:	b1d0      	cbz	r0, 801701c <LoRaMacMlmeRequest+0x168>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016fe6:	2413      	movs	r4, #19
 8016fe8:	e018      	b.n	801701c <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8016fea:	2200      	movs	r2, #0
 8016fec:	4669      	mov	r1, sp
 8016fee:	2012      	movs	r0, #18
 8016ff0:	f000 fa36 	bl	8017460 <LoRaMacCommandsAddCmd>
 8016ff4:	4604      	mov	r4, r0
 8016ff6:	b188      	cbz	r0, 801701c <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016ff8:	2413      	movs	r4, #19
 8016ffa:	e00f      	b.n	801701c <LoRaMacMlmeRequest+0x168>
            queueElement.RestrictCommonReadyToHandle = true;
 8016ffc:	2301      	movs	r3, #1
 8016ffe:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8017002:	f000 f97a 	bl	80172fa <LoRaMacClassBIsAcquisitionInProgress>
 8017006:	b108      	cbz	r0, 801700c <LoRaMacMlmeRequest+0x158>
                status = LORAMAC_STATUS_BUSY;
 8017008:	2401      	movs	r4, #1
 801700a:	e007      	b.n	801701c <LoRaMacMlmeRequest+0x168>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 801700c:	f000 f972 	bl	80172f4 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8017010:	2000      	movs	r0, #0
 8017012:	f000 f974 	bl	80172fe <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8017016:	2400      	movs	r4, #0
 8017018:	e000      	b.n	801701c <LoRaMacMlmeRequest+0x168>
    switch( mlmeRequest->Type )
 801701a:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801701c:	4b0d      	ldr	r3, [pc, #52]	; (8017054 <LoRaMacMlmeRequest+0x1a0>)
 801701e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8017022:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 8017024:	b17c      	cbz	r4, 8017046 <LoRaMacMlmeRequest+0x192>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8017026:	f000 fc1d 	bl	8017864 <LoRaMacConfirmQueueGetCnt>
 801702a:	2800      	cmp	r0, #0
 801702c:	f47f af4f 	bne.w	8016ece <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 8017030:	4b08      	ldr	r3, [pc, #32]	; (8017054 <LoRaMacMlmeRequest+0x1a0>)
 8017032:	2100      	movs	r1, #0
 8017034:	f883 1414 	strb.w	r1, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8017038:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 801703c:	f361 0282 	bfi	r2, r1, #2, #1
 8017040:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 8017044:	e743      	b.n	8016ece <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 8017046:	a801      	add	r0, sp, #4
 8017048:	f000 fb48 	bl	80176dc <LoRaMacConfirmQueueAdd>
 801704c:	e73f      	b.n	8016ece <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801704e:	2403      	movs	r4, #3
 8017050:	e73d      	b.n	8016ece <LoRaMacMlmeRequest+0x1a>
 8017052:	bf00      	nop
 8017054:	20000f24 	.word	0x20000f24
 8017058:	20001370 	.word	0x20001370
 801705c:	2000142c 	.word	0x2000142c

08017060 <LoRaMacMcpsRequest>:
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8017060:	2800      	cmp	r0, #0
 8017062:	f000 80af 	beq.w	80171c4 <LoRaMacMcpsRequest+0x164>
{
 8017066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801706a:	b088      	sub	sp, #32
 801706c:	460d      	mov	r5, r1
 801706e:	f04f 0800 	mov.w	r8, #0
 8017072:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 8017074:	f7ff f910 	bl	8016298 <LoRaMacIsBusy>
 8017078:	4606      	mov	r6, r0
 801707a:	b118      	cbz	r0, 8017084 <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 801707c:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 801707e:	b008      	add	sp, #32
 8017080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 8017084:	4641      	mov	r1, r8
 8017086:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 801708a:	4f50      	ldr	r7, [pc, #320]	; (80171cc <LoRaMacMcpsRequest+0x16c>)
 801708c:	2214      	movs	r2, #20
 801708e:	f507 6087 	add.w	r0, r7, #1080	; 0x438
 8017092:	f008 ff2e 	bl	801fef2 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8017096:	2301      	movs	r3, #1
 8017098:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
    MacCtx.AckTimeoutRetriesCounter = 1;
 801709c:	f887 3412 	strb.w	r3, [r7, #1042]	; 0x412
    switch( mcpsRequest->Type )
 80170a0:	7823      	ldrb	r3, [r4, #0]
 80170a2:	2b01      	cmp	r3, #1
 80170a4:	d058      	beq.n	8017158 <LoRaMacMcpsRequest+0xf8>
 80170a6:	2b03      	cmp	r3, #3
 80170a8:	d06e      	beq.n	8017188 <LoRaMacMcpsRequest+0x128>
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d041      	beq.n	8017132 <LoRaMacMcpsRequest+0xd2>
 80170ae:	2700      	movs	r7, #0
 80170b0:	46ba      	mov	sl, r7
 80170b2:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 80170b4:	2302      	movs	r3, #2
 80170b6:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80170ba:	4b45      	ldr	r3, [pc, #276]	; (80171d0 <LoRaMacMcpsRequest+0x170>)
 80170bc:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80170c0:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80170c4:	a906      	add	r1, sp, #24
 80170c6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80170ca:	f001 f8fe 	bl	80182ca <RegionGetPhyParam>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80170ce:	b240      	sxtb	r0, r0
 80170d0:	42b8      	cmp	r0, r7
 80170d2:	bfb8      	it	lt
 80170d4:	4638      	movlt	r0, r7
    if( readyToSend == true )
 80170d6:	2e00      	cmp	r6, #0
 80170d8:	d06e      	beq.n	80171b8 <LoRaMacMcpsRequest+0x158>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 80170da:	4b3d      	ldr	r3, [pc, #244]	; (80171d0 <LoRaMacMcpsRequest+0x170>)
 80170dc:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80170e0:	b99b      	cbnz	r3, 801710a <LoRaMacMcpsRequest+0xaa>
            verify.DatarateParams.Datarate = datarate;
 80170e2:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80170e6:	4b3a      	ldr	r3, [pc, #232]	; (80171d0 <LoRaMacMcpsRequest+0x170>)
 80170e8:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80170ec:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80170f0:	2205      	movs	r2, #5
 80170f2:	a903      	add	r1, sp, #12
 80170f4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80170f8:	f001 f976 	bl	80183e8 <RegionVerify>
 80170fc:	2800      	cmp	r0, #0
 80170fe:	d063      	beq.n	80171c8 <LoRaMacMcpsRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8017100:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 8017104:	4b32      	ldr	r3, [pc, #200]	; (80171d0 <LoRaMacMcpsRequest+0x170>)
 8017106:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 801710a:	9500      	str	r5, [sp, #0]
 801710c:	4643      	mov	r3, r8
 801710e:	4652      	mov	r2, sl
 8017110:	4649      	mov	r1, r9
 8017112:	a804      	add	r0, sp, #16
 8017114:	f7ff f828 	bl	8016168 <Send>
        if( status == LORAMAC_STATUS_OK )
 8017118:	2800      	cmp	r0, #0
 801711a:	d148      	bne.n	80171ae <LoRaMacMcpsRequest+0x14e>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 801711c:	7822      	ldrb	r2, [r4, #0]
 801711e:	4b2b      	ldr	r3, [pc, #172]	; (80171cc <LoRaMacMcpsRequest+0x16c>)
 8017120:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8017124:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8017128:	f042 0201 	orr.w	r2, r2, #1
 801712c:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 8017130:	e043      	b.n	80171ba <LoRaMacMcpsRequest+0x15a>
            MacCtx.AckTimeoutRetries = 1;
 8017132:	2601      	movs	r6, #1
 8017134:	f887 6411 	strb.w	r6, [r7, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8017138:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801713c:	2202      	movs	r2, #2
 801713e:	f362 1347 	bfi	r3, r2, #5, #3
 8017142:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8017146:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 801714a:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 801714e:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8017152:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 8017156:	e7ad      	b.n	80170b4 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8017158:	7be3      	ldrb	r3, [r4, #15]
 801715a:	2b08      	cmp	r3, #8
 801715c:	bf28      	it	cs
 801715e:	2308      	movcs	r3, #8
 8017160:	4a1a      	ldr	r2, [pc, #104]	; (80171cc <LoRaMacMcpsRequest+0x16c>)
 8017162:	f882 3411 	strb.w	r3, [r2, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8017166:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801716a:	2204      	movs	r2, #4
 801716c:	f362 1347 	bfi	r3, r2, #5, #3
 8017170:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8017174:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8017178:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 801717c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8017180:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 8017184:	2601      	movs	r6, #1
            break;
 8017186:	e795      	b.n	80170b4 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 8017188:	2601      	movs	r6, #1
 801718a:	4b10      	ldr	r3, [pc, #64]	; (80171cc <LoRaMacMcpsRequest+0x16c>)
 801718c:	f883 6411 	strb.w	r6, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8017190:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8017194:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8017198:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 801719c:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80171a0:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80171a4:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 80171a8:	f04f 0900 	mov.w	r9, #0
            break;
 80171ac:	e782      	b.n	80170b4 <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 80171ae:	4b07      	ldr	r3, [pc, #28]	; (80171cc <LoRaMacMcpsRequest+0x16c>)
 80171b0:	2200      	movs	r2, #0
 80171b2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80171b6:	e000      	b.n	80171ba <LoRaMacMcpsRequest+0x15a>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80171b8:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80171ba:	4b04      	ldr	r3, [pc, #16]	; (80171cc <LoRaMacMcpsRequest+0x16c>)
 80171bc:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 80171c0:	6123      	str	r3, [r4, #16]
    return status;
 80171c2:	e75c      	b.n	801707e <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80171c4:	2003      	movs	r0, #3
}
 80171c6:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80171c8:	2003      	movs	r0, #3
 80171ca:	e758      	b.n	801707e <LoRaMacMcpsRequest+0x1e>
 80171cc:	20000f24 	.word	0x20000f24
 80171d0:	2000142c 	.word	0x2000142c

080171d4 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80171d4:	b510      	push	{r4, lr}
 80171d6:	b082      	sub	sp, #8
 80171d8:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80171da:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80171de:	220f      	movs	r2, #15
 80171e0:	a901      	add	r1, sp, #4
 80171e2:	4b05      	ldr	r3, [pc, #20]	; (80171f8 <LoRaMacTestSetDutyCycleOn+0x24>)
 80171e4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80171e8:	f001 f8fe 	bl	80183e8 <RegionVerify>
 80171ec:	b110      	cbz	r0, 80171f4 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80171ee:	4b02      	ldr	r3, [pc, #8]	; (80171f8 <LoRaMacTestSetDutyCycleOn+0x24>)
 80171f0:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
    }
}
 80171f4:	b002      	add	sp, #8
 80171f6:	bd10      	pop	{r4, pc}
 80171f8:	2000142c 	.word	0x2000142c

080171fc <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80171fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017200:	b089      	sub	sp, #36	; 0x24
 8017202:	460f      	mov	r7, r1
 8017204:	4616      	mov	r6, r2
 8017206:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 8017208:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 801720c:	f990 a011 	ldrsb.w	sl, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8017210:	6883      	ldr	r3, [r0, #8]
 8017212:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 8017214:	f890 8005 	ldrb.w	r8, [r0, #5]
 8017218:	f1b8 0f00 	cmp.w	r8, #0
 801721c:	d107      	bne.n	801722e <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 801721e:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 8017222:	f886 a000 	strb.w	sl, [r6]
    return adrAckReq;
}
 8017226:	4640      	mov	r0, r8
 8017228:	b009      	add	sp, #36	; 0x24
 801722a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801722e:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 8017230:	2302      	movs	r3, #2
 8017232:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8017236:	7c83      	ldrb	r3, [r0, #18]
 8017238:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801723c:	a906      	add	r1, sp, #24
 801723e:	7cc0      	ldrb	r0, [r0, #19]
 8017240:	f001 f843 	bl	80182ca <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 8017244:	fa4f fb80 	sxtb.w	fp, r0
        datarate = MAX( datarate, minTxDatarate );
 8017248:	464a      	mov	r2, r9
 801724a:	45d9      	cmp	r9, fp
 801724c:	bfb8      	it	lt
 801724e:	465a      	movlt	r2, fp
 8017250:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 8017252:	45d9      	cmp	r9, fp
 8017254:	dc04      	bgt.n	8017260 <CalcNextV10X+0x64>
            *adrAckCounter = 0;
 8017256:	2300      	movs	r3, #0
 8017258:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 801725a:	4691      	mov	r9, r2
            adrAckReq = false;
 801725c:	4698      	mov	r8, r3
 801725e:	e7de      	b.n	801721e <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8017260:	68a2      	ldr	r2, [r4, #8]
 8017262:	89a3      	ldrh	r3, [r4, #12]
 8017264:	429a      	cmp	r2, r3
 8017266:	d201      	bcs.n	801726c <CalcNextV10X+0x70>
                adrAckReq = false;
 8017268:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801726c:	89e1      	ldrh	r1, [r4, #14]
 801726e:	440b      	add	r3, r1
 8017270:	429a      	cmp	r2, r3
 8017272:	d202      	bcs.n	801727a <CalcNextV10X+0x7e>
        datarate = MAX( datarate, minTxDatarate );
 8017274:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017278:	e7d1      	b.n	801721e <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 801727a:	2308      	movs	r3, #8
 801727c:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8017280:	a906      	add	r1, sp, #24
 8017282:	7ce0      	ldrb	r0, [r4, #19]
 8017284:	f001 f821 	bl	80182ca <RegionGetPhyParam>
                txPower = phyParam.Value;
 8017288:	fa4f fa80 	sxtb.w	sl, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 801728c:	68a1      	ldr	r1, [r4, #8]
 801728e:	89e2      	ldrh	r2, [r4, #14]
 8017290:	fbb1 f3f2 	udiv	r3, r1, r2
 8017294:	fb02 1313 	mls	r3, r2, r3, r1
 8017298:	2b01      	cmp	r3, #1
 801729a:	d002      	beq.n	80172a2 <CalcNextV10X+0xa6>
        datarate = MAX( datarate, minTxDatarate );
 801729c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80172a0:	e7bd      	b.n	801721e <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80172a2:	2322      	movs	r3, #34	; 0x22
 80172a4:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 80172a8:	9b01      	ldr	r3, [sp, #4]
 80172aa:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80172ae:	7ca3      	ldrb	r3, [r4, #18]
 80172b0:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80172b4:	a906      	add	r1, sp, #24
 80172b6:	7ce0      	ldrb	r0, [r4, #19]
 80172b8:	f001 f807 	bl	80182ca <RegionGetPhyParam>
                    datarate = phyParam.Value;
 80172bc:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 80172c0:	45cb      	cmp	fp, r9
 80172c2:	d1ac      	bne.n	801721e <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 80172c4:	f894 8004 	ldrb.w	r8, [r4, #4]
 80172c8:	f1b8 0f00 	cmp.w	r8, #0
 80172cc:	d0a7      	beq.n	801721e <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80172ce:	2302      	movs	r3, #2
 80172d0:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 80172d4:	a902      	add	r1, sp, #8
 80172d6:	7ce0      	ldrb	r0, [r4, #19]
 80172d8:	f001 f85c 	bl	8018394 <RegionInitDefaults>
                        adrAckReq = false;
 80172dc:	f04f 0800 	mov.w	r8, #0
 80172e0:	e79d      	b.n	801721e <CalcNextV10X+0x22>

080172e2 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80172e2:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 80172e4:	7884      	ldrb	r4, [r0, #2]
 80172e6:	b10c      	cbz	r4, 80172ec <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 80172e8:	2000      	movs	r0, #0
}
 80172ea:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80172ec:	f7ff ff86 	bl	80171fc <CalcNextV10X>
 80172f0:	e7fb      	b.n	80172ea <LoRaMacAdrCalcNext+0x8>

080172f2 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172f2:	4770      	bx	lr

080172f4 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172f4:	4770      	bx	lr

080172f6 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172f6:	4770      	bx	lr

080172f8 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172f8:	4770      	bx	lr

080172fa <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172fa:	2000      	movs	r0, #0
 80172fc:	4770      	bx	lr

080172fe <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172fe:	4770      	bx	lr

08017300 <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017300:	4770      	bx	lr

08017302 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017302:	4770      	bx	lr

08017304 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017304:	2000      	movs	r0, #0
 8017306:	4770      	bx	lr

08017308 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017308:	2000      	movs	r0, #0
 801730a:	4770      	bx	lr

0801730c <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801730c:	2000      	movs	r0, #0
 801730e:	4770      	bx	lr

08017310 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017310:	2000      	movs	r0, #0
 8017312:	4770      	bx	lr

08017314 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017314:	2000      	movs	r0, #0
 8017316:	4770      	bx	lr

08017318 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017318:	4770      	bx	lr

0801731a <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801731a:	4770      	bx	lr

0801731c <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801731c:	4770      	bx	lr

0801731e <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801731e:	2002      	movs	r0, #2
 8017320:	4770      	bx	lr

08017322 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017322:	2002      	movs	r0, #2
 8017324:	4770      	bx	lr

08017326 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017326:	2002      	movs	r0, #2
 8017328:	4770      	bx	lr

0801732a <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801732a:	4770      	bx	lr

0801732c <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801732c:	2000      	movs	r0, #0
 801732e:	4770      	bx	lr

08017330 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017330:	4770      	bx	lr

08017332 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017332:	4770      	bx	lr

08017334 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017334:	2000      	movs	r0, #0
 8017336:	4770      	bx	lr

08017338 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017338:	2000      	movs	r0, #0
 801733a:	4770      	bx	lr

0801733c <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801733c:	4770      	bx	lr

0801733e <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801733e:	4770      	bx	lr

08017340 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8017340:	2300      	movs	r3, #0
 8017342:	2b0f      	cmp	r3, #15
 8017344:	d804      	bhi.n	8017350 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 8017346:	5cc2      	ldrb	r2, [r0, r3]
 8017348:	b922      	cbnz	r2, 8017354 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801734a:	3301      	adds	r3, #1
 801734c:	b29b      	uxth	r3, r3
 801734e:	e7f8      	b.n	8017342 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 8017350:	2001      	movs	r0, #1
 8017352:	4770      	bx	lr
            return false;
 8017354:	2000      	movs	r0, #0
}
 8017356:	4770      	bx	lr

08017358 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8017358:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 801735a:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801735c:	0125      	lsls	r5, r4, #4
 801735e:	f105 0308 	add.w	r3, r5, #8
 8017362:	4d06      	ldr	r5, [pc, #24]	; (801737c <MallocNewMacCommandSlot+0x24>)
 8017364:	441d      	add	r5, r3
 8017366:	4628      	mov	r0, r5
 8017368:	f7ff ffea 	bl	8017340 <IsSlotFree>
 801736c:	b920      	cbnz	r0, 8017378 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 801736e:	3401      	adds	r4, #1
 8017370:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 8017372:	2c0f      	cmp	r4, #15
 8017374:	d1f2      	bne.n	801735c <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 8017376:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 8017378:	4628      	mov	r0, r5
 801737a:	bd38      	pop	{r3, r4, r5, pc}
 801737c:	20001a3c 	.word	0x20001a3c

08017380 <LinkedListInit>:
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 8017380:	b120      	cbz	r0, 801738c <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 8017382:	2200      	movs	r2, #0
 8017384:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 8017386:	6042      	str	r2, [r0, #4]

    return true;
 8017388:	2001      	movs	r0, #1
 801738a:	4770      	bx	lr
        return false;
 801738c:	2000      	movs	r0, #0
}
 801738e:	4770      	bx	lr

08017390 <LinkedListAdd>:
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 8017390:	4603      	mov	r3, r0
 8017392:	b160      	cbz	r0, 80173ae <LinkedListAdd+0x1e>
 8017394:	b169      	cbz	r1, 80173b2 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8017396:	6802      	ldr	r2, [r0, #0]
 8017398:	b13a      	cbz	r2, 80173aa <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 801739a:	685a      	ldr	r2, [r3, #4]
 801739c:	b102      	cbz	r2, 80173a0 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 801739e:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80173a0:	2200      	movs	r2, #0
 80173a2:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 80173a4:	6059      	str	r1, [r3, #4]

    return true;
 80173a6:	2001      	movs	r0, #1
 80173a8:	4770      	bx	lr
        list->First = element;
 80173aa:	6001      	str	r1, [r0, #0]
 80173ac:	e7f5      	b.n	801739a <LinkedListAdd+0xa>
        return false;
 80173ae:	2000      	movs	r0, #0
 80173b0:	4770      	bx	lr
 80173b2:	2000      	movs	r0, #0
}
 80173b4:	4770      	bx	lr

080173b6 <LinkedListGetPrevious>:
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 80173b6:	b160      	cbz	r0, 80173d2 <LinkedListGetPrevious+0x1c>
 80173b8:	b161      	cbz	r1, 80173d4 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80173ba:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80173bc:	4281      	cmp	r1, r0
 80173be:	d102      	bne.n	80173c6 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 80173c0:	2000      	movs	r0, #0
    }

    return curElement;
}
 80173c2:	4770      	bx	lr
            curElement = curElement->Next;
 80173c4:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80173c6:	2800      	cmp	r0, #0
 80173c8:	d0fb      	beq.n	80173c2 <LinkedListGetPrevious+0xc>
 80173ca:	6803      	ldr	r3, [r0, #0]
 80173cc:	428b      	cmp	r3, r1
 80173ce:	d1f9      	bne.n	80173c4 <LinkedListGetPrevious+0xe>
 80173d0:	4770      	bx	lr
 80173d2:	4770      	bx	lr
        return NULL;
 80173d4:	4608      	mov	r0, r1
 80173d6:	4770      	bx	lr

080173d8 <LinkedListRemove>:
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 80173d8:	b1b8      	cbz	r0, 801740a <LinkedListRemove+0x32>
{
 80173da:	b538      	push	{r3, r4, r5, lr}
 80173dc:	460c      	mov	r4, r1
 80173de:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 80173e0:	b1a9      	cbz	r1, 801740e <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80173e2:	f7ff ffe8 	bl	80173b6 <LinkedListGetPrevious>

    if( list->First == element )
 80173e6:	682b      	ldr	r3, [r5, #0]
 80173e8:	42a3      	cmp	r3, r4
 80173ea:	d009      	beq.n	8017400 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 80173ec:	686b      	ldr	r3, [r5, #4]
 80173ee:	42a3      	cmp	r3, r4
 80173f0:	d009      	beq.n	8017406 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 80173f2:	b108      	cbz	r0, 80173f8 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 80173f4:	6823      	ldr	r3, [r4, #0]
 80173f6:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 80173f8:	2300      	movs	r3, #0
 80173fa:	6023      	str	r3, [r4, #0]

    return true;
 80173fc:	2001      	movs	r0, #1
}
 80173fe:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 8017400:	6823      	ldr	r3, [r4, #0]
 8017402:	602b      	str	r3, [r5, #0]
 8017404:	e7f2      	b.n	80173ec <LinkedListRemove+0x14>
        list->Last = PrevElement;
 8017406:	6068      	str	r0, [r5, #4]
 8017408:	e7f3      	b.n	80173f2 <LinkedListRemove+0x1a>
        return false;
 801740a:	2000      	movs	r0, #0
}
 801740c:	4770      	bx	lr
        return false;
 801740e:	2000      	movs	r0, #0
 8017410:	e7f5      	b.n	80173fe <LinkedListRemove+0x26>

08017412 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 8017412:	2805      	cmp	r0, #5
 8017414:	d006      	beq.n	8017424 <IsSticky+0x12>
 8017416:	d307      	bcc.n	8017428 <IsSticky+0x16>
 8017418:	3808      	subs	r0, #8
 801741a:	b2c0      	uxtb	r0, r0
 801741c:	2802      	cmp	r0, #2
 801741e:	d905      	bls.n	801742c <IsSticky+0x1a>
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
        default:
            return false;
 8017420:	2000      	movs	r0, #0
 8017422:	4770      	bx	lr
    switch( cid )
 8017424:	2001      	movs	r0, #1
 8017426:	4770      	bx	lr
            return false;
 8017428:	2000      	movs	r0, #0
 801742a:	4770      	bx	lr
    switch( cid )
 801742c:	2001      	movs	r0, #1
    }
}
 801742e:	4770      	bx	lr

08017430 <FreeMacCommandSlot>:
    if( slot == NULL )
 8017430:	b130      	cbz	r0, 8017440 <FreeMacCommandSlot+0x10>
{
 8017432:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8017434:	2210      	movs	r2, #16
 8017436:	2100      	movs	r1, #0
 8017438:	f008 fd5b 	bl	801fef2 <memset1>
    return true;
 801743c:	2001      	movs	r0, #1
}
 801743e:	bd08      	pop	{r3, pc}
        return false;
 8017440:	2000      	movs	r0, #0
}
 8017442:	4770      	bx	lr

08017444 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8017444:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8017446:	4c05      	ldr	r4, [pc, #20]	; (801745c <LoRaMacCommandsInit+0x18>)
 8017448:	22fc      	movs	r2, #252	; 0xfc
 801744a:	2100      	movs	r1, #0
 801744c:	4620      	mov	r0, r4
 801744e:	f008 fd50 	bl	801fef2 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8017452:	4620      	mov	r0, r4
 8017454:	f7ff ff94 	bl	8017380 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 8017458:	2000      	movs	r0, #0
 801745a:	bd10      	pop	{r4, pc}
 801745c:	20001a3c 	.word	0x20001a3c

08017460 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 8017460:	b301      	cbz	r1, 80174a4 <LoRaMacCommandsAddCmd+0x44>
{
 8017462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017464:	4605      	mov	r5, r0
 8017466:	4614      	mov	r4, r2
 8017468:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 801746a:	f7ff ff75 	bl	8017358 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 801746e:	4606      	mov	r6, r0
 8017470:	b1d0      	cbz	r0, 80174a8 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8017472:	4601      	mov	r1, r0
 8017474:	480e      	ldr	r0, [pc, #56]	; (80174b0 <LoRaMacCommandsAddCmd+0x50>)
 8017476:	f7ff ff8b 	bl	8017390 <LinkedListAdd>
 801747a:	b1b8      	cbz	r0, 80174ac <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 801747c:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 801747e:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8017480:	b2a2      	uxth	r2, r4
 8017482:	4639      	mov	r1, r7
 8017484:	1d70      	adds	r0, r6, #5
 8017486:	f008 fd1e 	bl	801fec6 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801748a:	4628      	mov	r0, r5
 801748c:	f7ff ffc1 	bl	8017412 <IsSticky>
 8017490:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8017492:	4b07      	ldr	r3, [pc, #28]	; (80174b0 <LoRaMacCommandsAddCmd+0x50>)
 8017494:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8017498:	4414      	add	r4, r2
 801749a:	3401      	adds	r4, #1
 801749c:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 80174a0:	2000      	movs	r0, #0
}
 80174a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 80174a4:	2001      	movs	r0, #1
}
 80174a6:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80174a8:	2002      	movs	r0, #2
 80174aa:	e7fa      	b.n	80174a2 <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 80174ac:	2005      	movs	r0, #5
 80174ae:	e7f8      	b.n	80174a2 <LoRaMacCommandsAddCmd+0x42>
 80174b0:	20001a3c 	.word	0x20001a3c

080174b4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 80174b4:	b1a0      	cbz	r0, 80174e0 <LoRaMacCommandsRemoveCmd+0x2c>
{
 80174b6:	b510      	push	{r4, lr}
 80174b8:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80174ba:	4601      	mov	r1, r0
 80174bc:	480b      	ldr	r0, [pc, #44]	; (80174ec <LoRaMacCommandsRemoveCmd+0x38>)
 80174be:	f7ff ff8b 	bl	80173d8 <LinkedListRemove>
 80174c2:	b178      	cbz	r0, 80174e4 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80174c4:	68a1      	ldr	r1, [r4, #8]
 80174c6:	4a09      	ldr	r2, [pc, #36]	; (80174ec <LoRaMacCommandsRemoveCmd+0x38>)
 80174c8:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 80174cc:	1a5b      	subs	r3, r3, r1
 80174ce:	3b01      	subs	r3, #1
 80174d0:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80174d4:	4620      	mov	r0, r4
 80174d6:	f7ff ffab 	bl	8017430 <FreeMacCommandSlot>
 80174da:	b128      	cbz	r0, 80174e8 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80174dc:	2000      	movs	r0, #0
}
 80174de:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 80174e0:	2001      	movs	r0, #1
}
 80174e2:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80174e4:	2003      	movs	r0, #3
 80174e6:	e7fa      	b.n	80174de <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 80174e8:	2005      	movs	r0, #5
 80174ea:	e7f8      	b.n	80174de <LoRaMacCommandsRemoveCmd+0x2a>
 80174ec:	20001a3c 	.word	0x20001a3c

080174f0 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80174f0:	4b0a      	ldr	r3, [pc, #40]	; (801751c <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 80174f2:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80174f4:	b120      	cbz	r0, 8017500 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 80174f6:	7b03      	ldrb	r3, [r0, #12]
 80174f8:	b11b      	cbz	r3, 8017502 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 80174fa:	6800      	ldr	r0, [r0, #0]
 80174fc:	e7fa      	b.n	80174f4 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 80174fe:	bd10      	pop	{r4, pc}
 8017500:	4770      	bx	lr
{
 8017502:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 8017504:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8017506:	f7ff ffd5 	bl	80174b4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 801750a:	4620      	mov	r0, r4
    while( curElement != NULL )
 801750c:	2800      	cmp	r0, #0
 801750e:	d0f6      	beq.n	80174fe <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 8017510:	7b03      	ldrb	r3, [r0, #12]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d0f6      	beq.n	8017504 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 8017516:	6800      	ldr	r0, [r0, #0]
 8017518:	e7f8      	b.n	801750c <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 801751a:	bf00      	nop
 801751c:	20001a3c 	.word	0x20001a3c

08017520 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8017520:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8017522:	4b08      	ldr	r3, [pc, #32]	; (8017544 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 8017524:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8017526:	e003      	b.n	8017530 <LoRaMacCommandsRemoveStickyAnsCmds+0x10>
    {
        nexElement = curElement->Next;
        if( IsSticky( curElement->CID ) == true )
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8017528:	4620      	mov	r0, r4
 801752a:	f7ff ffc3 	bl	80174b4 <LoRaMacCommandsRemoveCmd>
{
 801752e:	462c      	mov	r4, r5
    while( curElement != NULL )
 8017530:	b134      	cbz	r4, 8017540 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
        nexElement = curElement->Next;
 8017532:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 8017534:	7920      	ldrb	r0, [r4, #4]
 8017536:	f7ff ff6c 	bl	8017412 <IsSticky>
 801753a:	2800      	cmp	r0, #0
 801753c:	d0f7      	beq.n	801752e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
 801753e:	e7f3      	b.n	8017528 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 8017540:	2000      	movs	r0, #0
 8017542:	bd38      	pop	{r3, r4, r5, pc}
 8017544:	20001a3c 	.word	0x20001a3c

08017548 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 8017548:	b128      	cbz	r0, 8017556 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801754a:	4a04      	ldr	r2, [pc, #16]	; (801755c <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 801754c:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 8017550:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8017552:	2000      	movs	r0, #0
 8017554:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 8017556:	2001      	movs	r0, #1
}
 8017558:	4770      	bx	lr
 801755a:	bf00      	nop
 801755c:	20001a3c 	.word	0x20001a3c

08017560 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8017560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8017564:	4b16      	ldr	r3, [pc, #88]	; (80175c0 <LoRaMacCommandsSerializeCmds+0x60>)
 8017566:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8017568:	b32a      	cbz	r2, 80175b6 <LoRaMacCommandsSerializeCmds+0x56>
 801756a:	4607      	mov	r7, r0
 801756c:	4688      	mov	r8, r1
 801756e:	4616      	mov	r6, r2
 8017570:	b319      	cbz	r1, 80175ba <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 8017572:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 8017574:	b194      	cbz	r4, 801759c <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8017576:	1a7a      	subs	r2, r7, r1
 8017578:	68a3      	ldr	r3, [r4, #8]
 801757a:	3301      	adds	r3, #1
 801757c:	429a      	cmp	r2, r3
 801757e:	d30d      	bcc.n	801759c <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 8017580:	1c4d      	adds	r5, r1, #1
 8017582:	b2ed      	uxtb	r5, r5
 8017584:	7923      	ldrb	r3, [r4, #4]
 8017586:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8017588:	8922      	ldrh	r2, [r4, #8]
 801758a:	1d61      	adds	r1, r4, #5
 801758c:	1970      	adds	r0, r6, r5
 801758e:	f008 fc9a 	bl	801fec6 <memcpy1>
            itr += curElement->PayloadSize;
 8017592:	68a3      	ldr	r3, [r4, #8]
 8017594:	441d      	add	r5, r3
 8017596:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8017598:	6824      	ldr	r4, [r4, #0]
 801759a:	e7eb      	b.n	8017574 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801759c:	b12c      	cbz	r4, 80175aa <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 801759e:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 80175a0:	4620      	mov	r0, r4
 80175a2:	f7ff ff87 	bl	80174b4 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80175a6:	462c      	mov	r4, r5
 80175a8:	e7f8      	b.n	801759c <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80175aa:	4640      	mov	r0, r8
 80175ac:	f7ff ffcc 	bl	8017548 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80175b0:	2000      	movs	r0, #0
}
 80175b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 80175b6:	2001      	movs	r0, #1
 80175b8:	e7fb      	b.n	80175b2 <LoRaMacCommandsSerializeCmds+0x52>
 80175ba:	2001      	movs	r0, #1
 80175bc:	e7f9      	b.n	80175b2 <LoRaMacCommandsSerializeCmds+0x52>
 80175be:	bf00      	nop
 80175c0:	20001a3c 	.word	0x20001a3c

080175c4 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 80175c4:	4601      	mov	r1, r0
 80175c6:	b170      	cbz	r0, 80175e6 <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80175c8:	4b08      	ldr	r3, [pc, #32]	; (80175ec <LoRaMacCommandsStickyCmdsPending+0x28>)
 80175ca:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 80175cc:	2200      	movs	r2, #0
 80175ce:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 80175d0:	b13b      	cbz	r3, 80175e2 <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 80175d2:	7b1a      	ldrb	r2, [r3, #12]
 80175d4:	b90a      	cbnz	r2, 80175da <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	e7fa      	b.n	80175d0 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 80175da:	2301      	movs	r3, #1
 80175dc:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80175de:	2000      	movs	r0, #0
 80175e0:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80175e2:	2000      	movs	r0, #0
 80175e4:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 80175e6:	2001      	movs	r0, #1
}
 80175e8:	4770      	bx	lr
 80175ea:	bf00      	nop
 80175ec:	20001a3c 	.word	0x20001a3c

080175f0 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 80175f0:	1e83      	subs	r3, r0, #2
 80175f2:	2b11      	cmp	r3, #17
 80175f4:	d80a      	bhi.n	801760c <LoRaMacCommandsGetCmdSize+0x1c>
 80175f6:	e8df f003 	tbb	[pc, r3]
 80175fa:	0b23      	.short	0x0b23
 80175fc:	110f240d 	.word	0x110f240d
 8017600:	09171513 	.word	0x09171513
 8017604:	09091909 	.word	0x09091909
 8017608:	211f1d1b 	.word	0x211f1d1b
            break;
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 801760c:	2000      	movs	r0, #0
 801760e:	4770      	bx	lr
            cidSize = 5;
 8017610:	2005      	movs	r0, #5
            break;
 8017612:	4770      	bx	lr
            cidSize = 2;
 8017614:	2002      	movs	r0, #2
            break;
 8017616:	4770      	bx	lr
            cidSize = 1;
 8017618:	2001      	movs	r0, #1
            break;
 801761a:	4770      	bx	lr
            cidSize = 6;
 801761c:	2006      	movs	r0, #6
            break;
 801761e:	4770      	bx	lr
            cidSize = 2;
 8017620:	2002      	movs	r0, #2
            break;
 8017622:	4770      	bx	lr
            cidSize = 2;
 8017624:	2002      	movs	r0, #2
            break;
 8017626:	4770      	bx	lr
            cidSize = 5;
 8017628:	2005      	movs	r0, #5
            break;
 801762a:	4770      	bx	lr
            cidSize = 6;
 801762c:	2006      	movs	r0, #6
            break;
 801762e:	4770      	bx	lr
            cidSize = 1;
 8017630:	2001      	movs	r0, #1
            break;
 8017632:	4770      	bx	lr
            cidSize = 5;
 8017634:	2005      	movs	r0, #5
            break;
 8017636:	4770      	bx	lr
            cidSize = 4;
 8017638:	2004      	movs	r0, #4
            break;
 801763a:	4770      	bx	lr
            cidSize = 4;
 801763c:	2004      	movs	r0, #4
            break;
 801763e:	4770      	bx	lr
            cidSize = 3;
 8017640:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 8017642:	4770      	bx	lr

08017644 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8017644:	4b03      	ldr	r3, [pc, #12]	; (8017654 <IncreaseBufferPointer+0x10>)
 8017646:	4298      	cmp	r0, r3
 8017648:	d001      	beq.n	801764e <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 801764a:	3004      	adds	r0, #4
 801764c:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801764e:	4802      	ldr	r0, [pc, #8]	; (8017658 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 8017650:	4770      	bx	lr
 8017652:	bf00      	nop
 8017654:	20001b54 	.word	0x20001b54
 8017658:	20001b44 	.word	0x20001b44

0801765c <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 801765c:	b108      	cbz	r0, 8017662 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 801765e:	2000      	movs	r0, #0
 8017660:	4770      	bx	lr
        return true;
 8017662:	2001      	movs	r0, #1
}
 8017664:	4770      	bx	lr

08017666 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8017666:	2804      	cmp	r0, #4
 8017668:	d801      	bhi.n	801766e <IsListFull+0x8>
    {
        return true;
    }
    return false;
 801766a:	2000      	movs	r0, #0
 801766c:	4770      	bx	lr
        return true;
 801766e:	2001      	movs	r0, #1
}
 8017670:	4770      	bx	lr
	...

08017674 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8017674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017676:	4606      	mov	r6, r0
 8017678:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801767a:	4b0d      	ldr	r3, [pc, #52]	; (80176b0 <GetElement+0x3c>)
 801767c:	f893 7020 	ldrb.w	r7, [r3, #32]
 8017680:	4638      	mov	r0, r7
 8017682:	f7ff ffeb 	bl	801765c <IsListEmpty>
 8017686:	b970      	cbnz	r0, 80176a6 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8017688:	2500      	movs	r5, #0
 801768a:	42af      	cmp	r7, r5
 801768c:	d909      	bls.n	80176a2 <GetElement+0x2e>
    {
        if( element->Request == request )
 801768e:	7823      	ldrb	r3, [r4, #0]
 8017690:	42b3      	cmp	r3, r6
 8017692:	d00a      	beq.n	80176aa <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 8017694:	4620      	mov	r0, r4
 8017696:	f7ff ffd5 	bl	8017644 <IncreaseBufferPointer>
 801769a:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801769c:	3501      	adds	r5, #1
 801769e:	b2ed      	uxtb	r5, r5
 80176a0:	e7f3      	b.n	801768a <GetElement+0x16>
    }

    return NULL;
 80176a2:	2000      	movs	r0, #0
}
 80176a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 80176a6:	2000      	movs	r0, #0
 80176a8:	e7fc      	b.n	80176a4 <GetElement+0x30>
            return element;
 80176aa:	4620      	mov	r0, r4
 80176ac:	e7fa      	b.n	80176a4 <GetElement+0x30>
 80176ae:	bf00      	nop
 80176b0:	20001b38 	.word	0x20001b38

080176b4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80176b4:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 80176b6:	4c08      	ldr	r4, [pc, #32]	; (80176d8 <LoRaMacConfirmQueueInit+0x24>)
 80176b8:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80176ba:	2300      	movs	r3, #0
 80176bc:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80176c0:	f104 000c 	add.w	r0, r4, #12
 80176c4:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80176c6:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80176c8:	2214      	movs	r2, #20
 80176ca:	21ff      	movs	r1, #255	; 0xff
 80176cc:	f008 fc11 	bl	801fef2 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80176d0:	2301      	movs	r3, #1
 80176d2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80176d6:	bd10      	pop	{r4, pc}
 80176d8:	20001b38 	.word	0x20001b38

080176dc <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80176dc:	b538      	push	{r3, r4, r5, lr}
 80176de:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80176e0:	4b0f      	ldr	r3, [pc, #60]	; (8017720 <LoRaMacConfirmQueueAdd+0x44>)
 80176e2:	f893 0020 	ldrb.w	r0, [r3, #32]
 80176e6:	f7ff ffbe 	bl	8017666 <IsListFull>
 80176ea:	b9b8      	cbnz	r0, 801771c <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80176ec:	4c0c      	ldr	r4, [pc, #48]	; (8017720 <LoRaMacConfirmQueueAdd+0x44>)
 80176ee:	68a3      	ldr	r3, [r4, #8]
 80176f0:	782a      	ldrb	r2, [r5, #0]
 80176f2:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80176f4:	68a3      	ldr	r3, [r4, #8]
 80176f6:	786a      	ldrb	r2, [r5, #1]
 80176f8:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80176fa:	68a3      	ldr	r3, [r4, #8]
 80176fc:	78ea      	ldrb	r2, [r5, #3]
 80176fe:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8017700:	68a3      	ldr	r3, [r4, #8]
 8017702:	2200      	movs	r2, #0
 8017704:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8017706:	f894 3020 	ldrb.w	r3, [r4, #32]
 801770a:	3301      	adds	r3, #1
 801770c:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8017710:	68a0      	ldr	r0, [r4, #8]
 8017712:	f7ff ff97 	bl	8017644 <IncreaseBufferPointer>
 8017716:	60a0      	str	r0, [r4, #8]

    return true;
 8017718:	2001      	movs	r0, #1
}
 801771a:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 801771c:	2000      	movs	r0, #0
 801771e:	e7fc      	b.n	801771a <LoRaMacConfirmQueueAdd+0x3e>
 8017720:	20001b38 	.word	0x20001b38

08017724 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8017724:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8017726:	4b09      	ldr	r3, [pc, #36]	; (801774c <LoRaMacConfirmQueueRemoveFirst+0x28>)
 8017728:	f893 4020 	ldrb.w	r4, [r3, #32]
 801772c:	4620      	mov	r0, r4
 801772e:	f7ff ff95 	bl	801765c <IsListEmpty>
 8017732:	b948      	cbnz	r0, 8017748 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8017734:	4d05      	ldr	r5, [pc, #20]	; (801774c <LoRaMacConfirmQueueRemoveFirst+0x28>)
 8017736:	3c01      	subs	r4, #1
 8017738:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801773c:	6868      	ldr	r0, [r5, #4]
 801773e:	f7ff ff81 	bl	8017644 <IncreaseBufferPointer>
 8017742:	6068      	str	r0, [r5, #4]

    return true;
 8017744:	2001      	movs	r0, #1
}
 8017746:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 8017748:	2000      	movs	r0, #0
 801774a:	e7fc      	b.n	8017746 <LoRaMacConfirmQueueRemoveFirst+0x22>
 801774c:	20001b38 	.word	0x20001b38

08017750 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8017750:	b538      	push	{r3, r4, r5, lr}
 8017752:	4605      	mov	r5, r0
 8017754:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8017756:	4b08      	ldr	r3, [pc, #32]	; (8017778 <LoRaMacConfirmQueueSetStatus+0x28>)
 8017758:	f893 0020 	ldrb.w	r0, [r3, #32]
 801775c:	f7ff ff7e 	bl	801765c <IsListEmpty>
 8017760:	b948      	cbnz	r0, 8017776 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8017762:	4b05      	ldr	r3, [pc, #20]	; (8017778 <LoRaMacConfirmQueueSetStatus+0x28>)
 8017764:	689a      	ldr	r2, [r3, #8]
 8017766:	6859      	ldr	r1, [r3, #4]
 8017768:	4620      	mov	r0, r4
 801776a:	f7ff ff83 	bl	8017674 <GetElement>
        if( element != NULL )
 801776e:	b110      	cbz	r0, 8017776 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 8017770:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 8017772:	2201      	movs	r2, #1
 8017774:	7082      	strb	r2, [r0, #2]
        }
    }
}
 8017776:	bd38      	pop	{r3, r4, r5, pc}
 8017778:	20001b38 	.word	0x20001b38

0801777c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801777c:	b510      	push	{r4, lr}
 801777e:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8017780:	4b09      	ldr	r3, [pc, #36]	; (80177a8 <LoRaMacConfirmQueueGetStatus+0x2c>)
 8017782:	f893 0020 	ldrb.w	r0, [r3, #32]
 8017786:	f7ff ff69 	bl	801765c <IsListEmpty>
 801778a:	b940      	cbnz	r0, 801779e <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801778c:	4b06      	ldr	r3, [pc, #24]	; (80177a8 <LoRaMacConfirmQueueGetStatus+0x2c>)
 801778e:	689a      	ldr	r2, [r3, #8]
 8017790:	6859      	ldr	r1, [r3, #4]
 8017792:	4620      	mov	r0, r4
 8017794:	f7ff ff6e 	bl	8017674 <GetElement>
        if( element != NULL )
 8017798:	b118      	cbz	r0, 80177a2 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 801779a:	7840      	ldrb	r0, [r0, #1]
 801779c:	e000      	b.n	80177a0 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801779e:	2001      	movs	r0, #1
}
 80177a0:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80177a2:	2001      	movs	r0, #1
 80177a4:	e7fc      	b.n	80177a0 <LoRaMacConfirmQueueGetStatus+0x24>
 80177a6:	bf00      	nop
 80177a8:	20001b38 	.word	0x20001b38

080177ac <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80177ac:	b538      	push	{r3, r4, r5, lr}
 80177ae:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80177b0:	4b0c      	ldr	r3, [pc, #48]	; (80177e4 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 80177b2:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80177b4:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80177b8:	f893 0020 	ldrb.w	r0, [r3, #32]
 80177bc:	f7ff ff4e 	bl	801765c <IsListEmpty>
 80177c0:	b150      	cbz	r0, 80177d8 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 80177c2:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 80177c4:	2301      	movs	r3, #1
 80177c6:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 80177c8:	4620      	mov	r0, r4
 80177ca:	f7ff ff3b 	bl	8017644 <IncreaseBufferPointer>
 80177ce:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 80177d0:	4b04      	ldr	r3, [pc, #16]	; (80177e4 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 80177d2:	689b      	ldr	r3, [r3, #8]
 80177d4:	4283      	cmp	r3, r0
 80177d6:	d0f4      	beq.n	80177c2 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 80177d8:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 80177da:	78e3      	ldrb	r3, [r4, #3]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d1f3      	bne.n	80177c8 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 80177e0:	e7f0      	b.n	80177c4 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 80177e2:	bf00      	nop
 80177e4:	20001b38 	.word	0x20001b38

080177e8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80177e8:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80177ea:	4b04      	ldr	r3, [pc, #16]	; (80177fc <LoRaMacConfirmQueueIsCmdActive+0x14>)
 80177ec:	689a      	ldr	r2, [r3, #8]
 80177ee:	6859      	ldr	r1, [r3, #4]
 80177f0:	f7ff ff40 	bl	8017674 <GetElement>
 80177f4:	b100      	cbz	r0, 80177f8 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 80177f6:	2001      	movs	r0, #1
    }
    return false;
}
 80177f8:	bd08      	pop	{r3, pc}
 80177fa:	bf00      	nop
 80177fc:	20001b38 	.word	0x20001b38

08017800 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8017800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017802:	b083      	sub	sp, #12
 8017804:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8017806:	4b16      	ldr	r3, [pc, #88]	; (8017860 <LoRaMacConfirmQueueHandleCb+0x60>)
 8017808:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 801780c:	2400      	movs	r4, #0
 801780e:	e00d      	b.n	801782c <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8017810:	781a      	ldrb	r2, [r3, #0]
 8017812:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8017816:	785a      	ldrb	r2, [r3, #1]
 8017818:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801781c:	78db      	ldrb	r3, [r3, #3]
 801781e:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8017822:	f7ff ff7f 	bl	8017724 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8017826:	b1a5      	cbz	r5, 8017852 <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 8017828:	3401      	adds	r4, #1
 801782a:	b2e4      	uxtb	r4, r4
 801782c:	42bc      	cmp	r4, r7
 801782e:	d214      	bcs.n	801785a <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8017830:	4b0b      	ldr	r3, [pc, #44]	; (8017860 <LoRaMacConfirmQueueHandleCb+0x60>)
 8017832:	685a      	ldr	r2, [r3, #4]
 8017834:	7812      	ldrb	r2, [r2, #0]
 8017836:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8017838:	685a      	ldr	r2, [r3, #4]
 801783a:	7852      	ldrb	r2, [r2, #1]
 801783c:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801783e:	685b      	ldr	r3, [r3, #4]
 8017840:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 8017842:	2d00      	cmp	r5, #0
 8017844:	d0e4      	beq.n	8017810 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8017846:	4b06      	ldr	r3, [pc, #24]	; (8017860 <LoRaMacConfirmQueueHandleCb+0x60>)
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	689b      	ldr	r3, [r3, #8]
 801784c:	4630      	mov	r0, r6
 801784e:	4798      	blx	r3
 8017850:	e7e7      	b.n	8017822 <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8017852:	a801      	add	r0, sp, #4
 8017854:	f7ff ff42 	bl	80176dc <LoRaMacConfirmQueueAdd>
 8017858:	e7e6      	b.n	8017828 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 801785a:	b003      	add	sp, #12
 801785c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801785e:	bf00      	nop
 8017860:	20001b38 	.word	0x20001b38

08017864 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 8017864:	4b01      	ldr	r3, [pc, #4]	; (801786c <LoRaMacConfirmQueueGetCnt+0x8>)
 8017866:	f893 0020 	ldrb.w	r0, [r3, #32]
 801786a:	4770      	bx	lr
 801786c:	20001b38 	.word	0x20001b38

08017870 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8017870:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8017872:	4b03      	ldr	r3, [pc, #12]	; (8017880 <LoRaMacConfirmQueueIsFull+0x10>)
 8017874:	f893 0020 	ldrb.w	r0, [r3, #32]
 8017878:	f7ff fef5 	bl	8017666 <IsListFull>
    }
    else
    {
        return false;
    }
}
 801787c:	bd08      	pop	{r3, pc}
 801787e:	bf00      	nop
 8017880:	20001b38 	.word	0x20001b38

08017884 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8017884:	b430      	push	{r4, r5}
 8017886:	9c02      	ldr	r4, [sp, #8]
 8017888:	9903      	ldr	r1, [sp, #12]
 801788a:	9a04      	ldr	r2, [sp, #16]
    if( b0 == 0 )
 801788c:	b1d2      	cbz	r2, 80178c4 <PrepareB0+0x40>
 801788e:	4605      	mov	r5, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 8017890:	2049      	movs	r0, #73	; 0x49
 8017892:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8017894:	2000      	movs	r0, #0
 8017896:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 8017898:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 801789a:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 801789c:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 801789e:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 80178a0:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80178a2:	0a23      	lsrs	r3, r4, #8
 80178a4:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80178a6:	0c23      	lsrs	r3, r4, #16
 80178a8:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80178aa:	0e24      	lsrs	r4, r4, #24
 80178ac:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 80178ae:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80178b0:	0a0b      	lsrs	r3, r1, #8
 80178b2:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80178b4:	0c0b      	lsrs	r3, r1, #16
 80178b6:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80178b8:	0e09      	lsrs	r1, r1, #24
 80178ba:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 80178bc:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 80178be:	73d5      	strb	r5, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 80178c0:	bc30      	pop	{r4, r5}
 80178c2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 80178c4:	200a      	movs	r0, #10
 80178c6:	e7fb      	b.n	80178c0 <PrepareB0+0x3c>

080178c8 <GetKeyAddrItem>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80178c8:	2300      	movs	r3, #0
 80178ca:	2b01      	cmp	r3, #1
 80178cc:	d813      	bhi.n	80178f6 <GetKeyAddrItem+0x2e>
{
 80178ce:	b410      	push	{r4}
    {
        if( KeyAddrList[i].AddrID == addrID )
 80178d0:	461c      	mov	r4, r3
 80178d2:	4a0a      	ldr	r2, [pc, #40]	; (80178fc <GetKeyAddrItem+0x34>)
 80178d4:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 80178d8:	4282      	cmp	r2, r0
 80178da:	d006      	beq.n	80178ea <GetKeyAddrItem+0x22>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80178dc:	3301      	adds	r3, #1
 80178de:	b2db      	uxtb	r3, r3
 80178e0:	2b01      	cmp	r3, #1
 80178e2:	d9f5      	bls.n	80178d0 <GetKeyAddrItem+0x8>
        {
            *item = &( KeyAddrList[i] );
            return LORAMAC_CRYPTO_SUCCESS;
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80178e4:	200c      	movs	r0, #12
}
 80178e6:	bc10      	pop	{r4}
 80178e8:	4770      	bx	lr
            *item = &( KeyAddrList[i] );
 80178ea:	4b04      	ldr	r3, [pc, #16]	; (80178fc <GetKeyAddrItem+0x34>)
 80178ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80178f0:	600c      	str	r4, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80178f2:	2000      	movs	r0, #0
 80178f4:	e7f7      	b.n	80178e6 <GetKeyAddrItem+0x1e>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80178f6:	200c      	movs	r0, #12
}
 80178f8:	4770      	bx	lr
 80178fa:	bf00      	nop
 80178fc:	200001f4 	.word	0x200001f4

08017900 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 8017900:	460b      	mov	r3, r1
 8017902:	2900      	cmp	r1, #0
 8017904:	d024      	beq.n	8017950 <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 8017906:	3801      	subs	r0, #1
 8017908:	2803      	cmp	r0, #3
 801790a:	d823      	bhi.n	8017954 <GetLastFcntDown+0x54>
 801790c:	e8df f000 	tbb	[pc, r0]
 8017910:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8017914:	4a10      	ldr	r2, [pc, #64]	; (8017958 <GetLastFcntDown+0x58>)
 8017916:	6812      	ldr	r2, [r2, #0]
 8017918:	6911      	ldr	r1, [r2, #16]
 801791a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 801791c:	6913      	ldr	r3, [r2, #16]
 801791e:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8017920:	2000      	movs	r0, #0
            break;
 8017922:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8017924:	4a0c      	ldr	r2, [pc, #48]	; (8017958 <GetLastFcntDown+0x58>)
 8017926:	6812      	ldr	r2, [r2, #0]
 8017928:	6951      	ldr	r1, [r2, #20]
 801792a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 801792c:	6953      	ldr	r3, [r2, #20]
 801792e:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 8017930:	2000      	movs	r0, #0
            break;
 8017932:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8017934:	4a08      	ldr	r2, [pc, #32]	; (8017958 <GetLastFcntDown+0x58>)
 8017936:	6812      	ldr	r2, [r2, #0]
 8017938:	6991      	ldr	r1, [r2, #24]
 801793a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801793c:	6993      	ldr	r3, [r2, #24]
 801793e:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 8017940:	2000      	movs	r0, #0
            break;
 8017942:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8017944:	4a04      	ldr	r2, [pc, #16]	; (8017958 <GetLastFcntDown+0x58>)
 8017946:	6812      	ldr	r2, [r2, #0]
 8017948:	69d2      	ldr	r2, [r2, #28]
 801794a:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801794c:	2000      	movs	r0, #0
            break;
 801794e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017950:	200a      	movs	r0, #10
 8017952:	4770      	bx	lr
    if( lastDown == NULL )
 8017954:	2005      	movs	r0, #5
}
 8017956:	4770      	bx	lr
 8017958:	20001b5c 	.word	0x20001b5c

0801795c <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801795c:	b510      	push	{r4, lr}
 801795e:	b082      	sub	sp, #8
 8017960:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 8017962:	2300      	movs	r3, #0
 8017964:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8017966:	a901      	add	r1, sp, #4
 8017968:	f7ff ffca 	bl	8017900 <GetLastFcntDown>
 801796c:	b948      	cbnz	r0, 8017982 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 801796e:	9b01      	ldr	r3, [sp, #4]
 8017970:	42a3      	cmp	r3, r4
 8017972:	d309      	bcc.n	8017988 <CheckFCntDown+0x2c>
 8017974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017978:	d001      	beq.n	801797e <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 801797a:	2000      	movs	r0, #0
 801797c:	e002      	b.n	8017984 <CheckFCntDown+0x28>
        return true;
 801797e:	2001      	movs	r0, #1
 8017980:	e000      	b.n	8017984 <CheckFCntDown+0x28>
        return false;
 8017982:	2000      	movs	r0, #0
    }
}
 8017984:	b002      	add	sp, #8
 8017986:	bd10      	pop	{r4, pc}
        return true;
 8017988:	2001      	movs	r0, #1
 801798a:	e7fb      	b.n	8017984 <CheckFCntDown+0x28>

0801798c <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 801798c:	3801      	subs	r0, #1
 801798e:	2803      	cmp	r0, #3
 8017990:	d812      	bhi.n	80179b8 <UpdateFCntDown+0x2c>
 8017992:	e8df f000 	tbb	[pc, r0]
 8017996:	0602      	.short	0x0602
 8017998:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801799a:	4b08      	ldr	r3, [pc, #32]	; (80179bc <UpdateFCntDown+0x30>)
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	6119      	str	r1, [r3, #16]
            break;
 80179a0:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80179a2:	4b06      	ldr	r3, [pc, #24]	; (80179bc <UpdateFCntDown+0x30>)
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	6159      	str	r1, [r3, #20]
            break;
 80179a8:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80179aa:	4b04      	ldr	r3, [pc, #16]	; (80179bc <UpdateFCntDown+0x30>)
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	6199      	str	r1, [r3, #24]
            break;
 80179b0:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80179b2:	4b02      	ldr	r3, [pc, #8]	; (80179bc <UpdateFCntDown+0x30>)
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 80179b8:	4770      	bx	lr
 80179ba:	bf00      	nop
 80179bc:	20001b5c 	.word	0x20001b5c

080179c0 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 80179c0:	4b0a      	ldr	r3, [pc, #40]	; (80179ec <ResetFCnts+0x2c>)
 80179c2:	681a      	ldr	r2, [r3, #0]
 80179c4:	2300      	movs	r3, #0
 80179c6:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80179c8:	f04f 31ff 	mov.w	r1, #4294967295
 80179cc:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80179ce:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80179d0:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80179d2:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	dd00      	ble.n	80179da <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 80179d8:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80179da:	1d99      	adds	r1, r3, #6
 80179dc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80179e0:	f04f 30ff 	mov.w	r0, #4294967295
 80179e4:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80179e6:	3301      	adds	r3, #1
 80179e8:	e7f4      	b.n	80179d4 <ResetFCnts+0x14>
 80179ea:	bf00      	nop
 80179ec:	20001b5c 	.word	0x20001b5c

080179f0 <ComputeCmacB0>:
{
 80179f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179f4:	b088      	sub	sp, #32
 80179f6:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80179f8:	b1f0      	cbz	r0, 8017a38 <ComputeCmacB0+0x48>
 80179fa:	460c      	mov	r4, r1
 80179fc:	4615      	mov	r5, r2
 80179fe:	461a      	mov	r2, r3
 8017a00:	4680      	mov	r8, r0
 8017a02:	b1de      	cbz	r6, 8017a3c <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8017a04:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8017a08:	d81a      	bhi.n	8017a40 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8017a0a:	af04      	add	r7, sp, #16
 8017a0c:	9702      	str	r7, [sp, #8]
 8017a0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017a10:	9301      	str	r3, [sp, #4]
 8017a12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a14:	9300      	str	r3, [sp, #0]
 8017a16:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8017a1a:	4629      	mov	r1, r5
 8017a1c:	4620      	mov	r0, r4
 8017a1e:	f7ff ff31 	bl	8017884 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8017a22:	9600      	str	r6, [sp, #0]
 8017a24:	462b      	mov	r3, r5
 8017a26:	4622      	mov	r2, r4
 8017a28:	4641      	mov	r1, r8
 8017a2a:	4638      	mov	r0, r7
 8017a2c:	f008 f8e8 	bl	801fc00 <SecureElementComputeAesCmac>
 8017a30:	b940      	cbnz	r0, 8017a44 <ComputeCmacB0+0x54>
}
 8017a32:	b008      	add	sp, #32
 8017a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017a38:	200a      	movs	r0, #10
 8017a3a:	e7fa      	b.n	8017a32 <ComputeCmacB0+0x42>
 8017a3c:	200a      	movs	r0, #10
 8017a3e:	e7f8      	b.n	8017a32 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8017a40:	200e      	movs	r0, #14
 8017a42:	e7f6      	b.n	8017a32 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017a44:	200f      	movs	r0, #15
 8017a46:	e7f4      	b.n	8017a32 <ComputeCmacB0+0x42>

08017a48 <DeriveSessionKey10x>:
{
 8017a48:	b510      	push	{r4, lr}
 8017a4a:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 8017a4c:	2400      	movs	r4, #0
 8017a4e:	9402      	str	r4, [sp, #8]
 8017a50:	9403      	str	r4, [sp, #12]
    switch( keyID )
 8017a52:	2802      	cmp	r0, #2
 8017a54:	d003      	beq.n	8017a5e <DeriveSessionKey10x+0x16>
 8017a56:	2803      	cmp	r0, #3
 8017a58:	d025      	beq.n	8017aa6 <DeriveSessionKey10x+0x5e>
 8017a5a:	200b      	movs	r0, #11
 8017a5c:	e021      	b.n	8017aa2 <DeriveSessionKey10x+0x5a>
            compBase[0] = 0x01;
 8017a5e:	2401      	movs	r4, #1
 8017a60:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8017a64:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8017a68:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8017a6c:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8017a70:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8017a74:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8017a78:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8017a7c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8017a80:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8017a84:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8017a88:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8017a8c:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8017a90:	0a1b      	lsrs	r3, r3, #8
 8017a92:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8017a96:	4602      	mov	r2, r0
 8017a98:	2101      	movs	r1, #1
 8017a9a:	4668      	mov	r0, sp
 8017a9c:	f008 f94c 	bl	801fd38 <SecureElementDeriveAndStoreKey>
 8017aa0:	b928      	cbnz	r0, 8017aae <DeriveSessionKey10x+0x66>
}
 8017aa2:	b004      	add	sp, #16
 8017aa4:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 8017aa6:	2402      	movs	r4, #2
 8017aa8:	f88d 4000 	strb.w	r4, [sp]
            break;
 8017aac:	e7da      	b.n	8017a64 <DeriveSessionKey10x+0x1c>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017aae:	200f      	movs	r0, #15
 8017ab0:	e7f7      	b.n	8017aa2 <DeriveSessionKey10x+0x5a>

08017ab2 <PayloadEncrypt>:
{
 8017ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ab6:	b088      	sub	sp, #32
 8017ab8:	4690      	mov	r8, r2
 8017aba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 8017abc:	2800      	cmp	r0, #0
 8017abe:	d050      	beq.n	8017b62 <PayloadEncrypt+0xb0>
 8017ac0:	460d      	mov	r5, r1
 8017ac2:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 8017ac4:	2600      	movs	r6, #0
 8017ac6:	9604      	str	r6, [sp, #16]
 8017ac8:	9605      	str	r6, [sp, #20]
 8017aca:	9606      	str	r6, [sp, #24]
 8017acc:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 8017ace:	9600      	str	r6, [sp, #0]
 8017ad0:	9601      	str	r6, [sp, #4]
 8017ad2:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 8017ad4:	2701      	movs	r7, #1
 8017ad6:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 8017ada:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8017ade:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 8017ae2:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8017ae6:	0a19      	lsrs	r1, r3, #8
 8017ae8:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8017aec:	0c19      	lsrs	r1, r3, #16
 8017aee:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8017af2:	0e1b      	lsrs	r3, r3, #24
 8017af4:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 8017af8:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8017afc:	0a13      	lsrs	r3, r2, #8
 8017afe:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8017b02:	0c13      	lsrs	r3, r2, #16
 8017b04:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8017b08:	0e12      	lsrs	r2, r2, #24
 8017b0a:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 8017b0e:	e013      	b.n	8017b38 <PayloadEncrypt+0x86>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8017b10:	18f2      	adds	r2, r6, r3
 8017b12:	5ca0      	ldrb	r0, [r4, r2]
 8017b14:	a908      	add	r1, sp, #32
 8017b16:	4419      	add	r1, r3
 8017b18:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 8017b1c:	4048      	eors	r0, r1
 8017b1e:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8017b20:	3301      	adds	r3, #1
 8017b22:	b2db      	uxtb	r3, r3
 8017b24:	462a      	mov	r2, r5
 8017b26:	2d10      	cmp	r5, #16
 8017b28:	bfa8      	it	ge
 8017b2a:	2210      	movge	r2, #16
 8017b2c:	4293      	cmp	r3, r2
 8017b2e:	dbef      	blt.n	8017b10 <PayloadEncrypt+0x5e>
        size -= 16;
 8017b30:	3d10      	subs	r5, #16
 8017b32:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 8017b34:	3610      	adds	r6, #16
 8017b36:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 8017b38:	2d00      	cmp	r5, #0
 8017b3a:	dd0e      	ble.n	8017b5a <PayloadEncrypt+0xa8>
        aBlock[15] = ctr & 0xFF;
 8017b3c:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 8017b40:	3701      	adds	r7, #1
 8017b42:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8017b44:	ab04      	add	r3, sp, #16
 8017b46:	4642      	mov	r2, r8
 8017b48:	2110      	movs	r1, #16
 8017b4a:	4668      	mov	r0, sp
 8017b4c:	f008 f87a 	bl	801fc44 <SecureElementAesEncrypt>
 8017b50:	4603      	mov	r3, r0
 8017b52:	2800      	cmp	r0, #0
 8017b54:	d0e6      	beq.n	8017b24 <PayloadEncrypt+0x72>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017b56:	200f      	movs	r0, #15
 8017b58:	e000      	b.n	8017b5c <PayloadEncrypt+0xaa>
    return LORAMAC_CRYPTO_SUCCESS;
 8017b5a:	2000      	movs	r0, #0
}
 8017b5c:	b008      	add	sp, #32
 8017b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017b62:	200a      	movs	r0, #10
 8017b64:	e7fa      	b.n	8017b5c <PayloadEncrypt+0xaa>

08017b66 <VerifyCmacB0>:
    if( msg == 0 )
 8017b66:	b370      	cbz	r0, 8017bc6 <VerifyCmacB0+0x60>
{
 8017b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b6c:	b0c8      	sub	sp, #288	; 0x120
 8017b6e:	460c      	mov	r4, r1
 8017b70:	4615      	mov	r5, r2
 8017b72:	461e      	mov	r6, r3
 8017b74:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8017b76:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8017b7a:	d826      	bhi.n	8017bca <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8017b7c:	af04      	add	r7, sp, #16
 8017b7e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8017b82:	2100      	movs	r1, #0
 8017b84:	4638      	mov	r0, r7
 8017b86:	f008 f9b4 	bl	801fef2 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8017b8a:	9702      	str	r7, [sp, #8]
 8017b8c:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017b8e:	9301      	str	r3, [sp, #4]
 8017b90:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8017b92:	9300      	str	r3, [sp, #0]
 8017b94:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 8017b98:	4632      	mov	r2, r6
 8017b9a:	4629      	mov	r1, r5
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	f7ff fe71 	bl	8017884 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8017ba2:	4622      	mov	r2, r4
 8017ba4:	4641      	mov	r1, r8
 8017ba6:	a808      	add	r0, sp, #32
 8017ba8:	f008 f98d 	bl	801fec6 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8017bac:	f104 0110 	add.w	r1, r4, #16
 8017bb0:	462b      	mov	r3, r5
 8017bb2:	9a51      	ldr	r2, [sp, #324]	; 0x144
 8017bb4:	b289      	uxth	r1, r1
 8017bb6:	4638      	mov	r0, r7
 8017bb8:	f008 f82e 	bl	801fc18 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 8017bbc:	b130      	cbz	r0, 8017bcc <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8017bbe:	2801      	cmp	r0, #1
 8017bc0:	d004      	beq.n	8017bcc <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017bc2:	200f      	movs	r0, #15
 8017bc4:	e002      	b.n	8017bcc <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017bc6:	200a      	movs	r0, #10
}
 8017bc8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8017bca:	200e      	movs	r0, #14
}
 8017bcc:	b048      	add	sp, #288	; 0x120
 8017bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017bd4 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 8017bd4:	b188      	cbz	r0, 8017bfa <LoRaMacCryptoInit+0x26>
{
 8017bd6:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8017bd8:	4c09      	ldr	r4, [pc, #36]	; (8017c00 <LoRaMacCryptoInit+0x2c>)
 8017bda:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8017bdc:	2228      	movs	r2, #40	; 0x28
 8017bde:	2100      	movs	r1, #0
 8017be0:	f008 f987 	bl	801fef2 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8017be4:	6823      	ldr	r3, [r4, #0]
 8017be6:	2201      	movs	r2, #1
 8017be8:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8017bea:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8017bec:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8017bee:	2400      	movs	r4, #0
 8017bf0:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8017bf2:	f7ff fee5 	bl	80179c0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8017bf6:	4620      	mov	r0, r4
}
 8017bf8:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8017bfa:	2009      	movs	r0, #9
}
 8017bfc:	4770      	bx	lr
 8017bfe:	bf00      	nop
 8017c00:	20001b5c 	.word	0x20001b5c

08017c04 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 8017c04:	4b02      	ldr	r3, [pc, #8]	; (8017c10 <LoRaMacCryptoSetLrWanVersion+0xc>)
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 8017c0a:	2000      	movs	r0, #0
 8017c0c:	4770      	bx	lr
 8017c0e:	bf00      	nop
 8017c10:	20001b5c 	.word	0x20001b5c

08017c14 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 8017c14:	b130      	cbz	r0, 8017c24 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8017c16:	4b04      	ldr	r3, [pc, #16]	; (8017c28 <LoRaMacCryptoGetFCntUp+0x14>)
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	68db      	ldr	r3, [r3, #12]
 8017c1c:	3301      	adds	r3, #1
 8017c1e:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8017c20:	2000      	movs	r0, #0
 8017c22:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017c24:	200a      	movs	r0, #10
}
 8017c26:	4770      	bx	lr
 8017c28:	20001b5c 	.word	0x20001b5c

08017c2c <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8017c2c:	b570      	push	{r4, r5, r6, lr}
 8017c2e:	b082      	sub	sp, #8
 8017c30:	4615      	mov	r5, r2
    uint32_t lastDown = 0;
 8017c32:	2200      	movs	r2, #0
 8017c34:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 8017c36:	b373      	cbz	r3, 8017c96 <LoRaMacCryptoGetFCntDown+0x6a>
 8017c38:	460c      	mov	r4, r1
 8017c3a:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8017c3c:	a901      	add	r1, sp, #4
 8017c3e:	f7ff fe5f 	bl	8017900 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8017c42:	b9c8      	cbnz	r0, 8017c78 <LoRaMacCryptoGetFCntDown+0x4c>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8017c44:	9b01      	ldr	r3, [sp, #4]
 8017c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c4a:	d017      	beq.n	8017c7c <LoRaMacCryptoGetFCntDown+0x50>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8017c4c:	b29a      	uxth	r2, r3
 8017c4e:	1aaa      	subs	r2, r5, r2

        if( fCntDiff > 0 )
 8017c50:	2a00      	cmp	r2, #0
 8017c52:	dd15      	ble.n	8017c80 <LoRaMacCryptoGetFCntDown+0x54>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8017c54:	4413      	add	r3, r2
 8017c56:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8017c58:	4b11      	ldr	r3, [pc, #68]	; (8017ca0 <LoRaMacCryptoGetFCntDown+0x74>)
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	789b      	ldrb	r3, [r3, #2]
 8017c5e:	b95b      	cbnz	r3, 8017c78 <LoRaMacCryptoGetFCntDown+0x4c>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8017c60:	6830      	ldr	r0, [r6, #0]
 8017c62:	9a01      	ldr	r2, [sp, #4]
 8017c64:	1a80      	subs	r0, r0, r2
 8017c66:	eb60 0100 	sbc.w	r1, r0, r0
 8017c6a:	b2a4      	uxth	r4, r4
 8017c6c:	2500      	movs	r5, #0
 8017c6e:	42a0      	cmp	r0, r4
 8017c70:	eb71 0205 	sbcs.w	r2, r1, r5
 8017c74:	da11      	bge.n	8017c9a <LoRaMacCryptoGetFCntDown+0x6e>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017c76:	4618      	mov	r0, r3
}
 8017c78:	b002      	add	sp, #8
 8017c7a:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 8017c7c:	6035      	str	r5, [r6, #0]
 8017c7e:	e7eb      	b.n	8017c58 <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 8017c80:	b132      	cbz	r2, 8017c90 <LoRaMacCryptoGetFCntDown+0x64>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8017c82:	0c1b      	lsrs	r3, r3, #16
 8017c84:	041b      	lsls	r3, r3, #16
 8017c86:	442b      	add	r3, r5
 8017c88:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8017c8c:	6033      	str	r3, [r6, #0]
 8017c8e:	e7e3      	b.n	8017c58 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 8017c90:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8017c92:	2007      	movs	r0, #7
 8017c94:	e7f0      	b.n	8017c78 <LoRaMacCryptoGetFCntDown+0x4c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017c96:	200a      	movs	r0, #10
 8017c98:	e7ee      	b.n	8017c78 <LoRaMacCryptoGetFCntDown+0x4c>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8017c9a:	2008      	movs	r0, #8
 8017c9c:	e7ec      	b.n	8017c78 <LoRaMacCryptoGetFCntDown+0x4c>
 8017c9e:	bf00      	nop
 8017ca0:	20001b5c 	.word	0x20001b5c

08017ca4 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 8017ca4:	b908      	cbnz	r0, 8017caa <LoRaMacCryptoSetMulticastReference+0x6>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017ca6:	200a      	movs	r0, #10
 8017ca8:	4770      	bx	lr
 8017caa:	4601      	mov	r1, r0
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8017cac:	2300      	movs	r3, #0
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	dd01      	ble.n	8017cb6 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017cb2:	2000      	movs	r0, #0
}
 8017cb4:	4770      	bx	lr
{
 8017cb6:	b410      	push	{r4}
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8017cb8:	4a07      	ldr	r2, [pc, #28]	; (8017cd8 <LoRaMacCryptoSetMulticastReference+0x34>)
 8017cba:	6812      	ldr	r2, [r2, #0]
 8017cbc:	202c      	movs	r0, #44	; 0x2c
 8017cbe:	fb00 1003 	mla	r0, r0, r3, r1
 8017cc2:	1d9c      	adds	r4, r3, #6
 8017cc4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8017cc8:	3204      	adds	r2, #4
 8017cca:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8017ccc:	3301      	adds	r3, #1
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	ddf2      	ble.n	8017cb8 <LoRaMacCryptoSetMulticastReference+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 8017cd2:	2000      	movs	r0, #0
}
 8017cd4:	bc10      	pop	{r4}
 8017cd6:	4770      	bx	lr
 8017cd8:	20001b5c 	.word	0x20001b5c

08017cdc <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 8017cdc:	b300      	cbz	r0, 8017d20 <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 8017cde:	b510      	push	{r4, lr}
 8017ce0:	b084      	sub	sp, #16
 8017ce2:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 8017ce8:	a803      	add	r0, sp, #12
 8017cea:	f008 f889 	bl	801fe00 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8017cee:	4b10      	ldr	r3, [pc, #64]	; (8017d30 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 8017cf0:	681a      	ldr	r2, [r3, #0]
 8017cf2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017cf6:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8017cf8:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8017cfa:	4620      	mov	r0, r4
 8017cfc:	f000 fa2d 	bl	801815a <LoRaMacSerializerJoinRequest>
 8017d00:	b980      	cbnz	r0, 8017d24 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8017d02:	4623      	mov	r3, r4
 8017d04:	f853 1b18 	ldr.w	r1, [r3], #24
 8017d08:	9300      	str	r3, [sp, #0]
 8017d0a:	2301      	movs	r3, #1
 8017d0c:	2213      	movs	r2, #19
 8017d0e:	f007 ff77 	bl	801fc00 <SecureElementComputeAesCmac>
 8017d12:	b950      	cbnz	r0, 8017d2a <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8017d14:	4620      	mov	r0, r4
 8017d16:	f000 fa20 	bl	801815a <LoRaMacSerializerJoinRequest>
 8017d1a:	b120      	cbz	r0, 8017d26 <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8017d1c:	2011      	movs	r0, #17
 8017d1e:	e002      	b.n	8017d26 <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017d20:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8017d22:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8017d24:	2011      	movs	r0, #17
}
 8017d26:	b004      	add	sp, #16
 8017d28:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017d2a:	200f      	movs	r0, #15
 8017d2c:	e7fb      	b.n	8017d26 <LoRaMacCryptoPrepareJoinRequest+0x4a>
 8017d2e:	bf00      	nop
 8017d30:	20001b5c 	.word	0x20001b5c

08017d34 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d036      	beq.n	8017da6 <LoRaMacCryptoSecureMessage+0x72>
{
 8017d38:	b530      	push	{r4, r5, lr}
 8017d3a:	b085      	sub	sp, #20
 8017d3c:	4604      	mov	r4, r0
 8017d3e:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8017d40:	4b1d      	ldr	r3, [pc, #116]	; (8017db8 <LoRaMacCryptoSecureMessage+0x84>)
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	68db      	ldr	r3, [r3, #12]
 8017d46:	4283      	cmp	r3, r0
 8017d48:	d82f      	bhi.n	8017daa <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8017d4a:	f895 2020 	ldrb.w	r2, [r5, #32]
 8017d4e:	b342      	cbz	r2, 8017da2 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8017d50:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8017d52:	42a3      	cmp	r3, r4
 8017d54:	d209      	bcs.n	8017d6a <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8017d56:	9401      	str	r4, [sp, #4]
 8017d58:	2300      	movs	r3, #0
 8017d5a:	9300      	str	r3, [sp, #0]
 8017d5c:	68ab      	ldr	r3, [r5, #8]
 8017d5e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8017d62:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8017d64:	f7ff fea5 	bl	8017ab2 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017d68:	bb10      	cbnz	r0, 8017db0 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8017d6a:	4628      	mov	r0, r5
 8017d6c:	f000 fa2b 	bl	80181c6 <LoRaMacSerializerData>
 8017d70:	b9e8      	cbnz	r0, 8017dae <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8017d72:	7929      	ldrb	r1, [r5, #4]
 8017d74:	3904      	subs	r1, #4
 8017d76:	462b      	mov	r3, r5
 8017d78:	f853 0b2c 	ldr.w	r0, [r3], #44
 8017d7c:	9303      	str	r3, [sp, #12]
 8017d7e:	9402      	str	r4, [sp, #8]
 8017d80:	68ab      	ldr	r3, [r5, #8]
 8017d82:	9301      	str	r3, [sp, #4]
 8017d84:	2300      	movs	r3, #0
 8017d86:	9300      	str	r3, [sp, #0]
 8017d88:	2202      	movs	r2, #2
 8017d8a:	b289      	uxth	r1, r1
 8017d8c:	f7ff fe30 	bl	80179f0 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017d90:	b970      	cbnz	r0, 8017db0 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8017d92:	4628      	mov	r0, r5
 8017d94:	f000 fa17 	bl	80181c6 <LoRaMacSerializerData>
 8017d98:	b960      	cbnz	r0, 8017db4 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8017d9a:	4b07      	ldr	r3, [pc, #28]	; (8017db8 <LoRaMacCryptoSecureMessage+0x84>)
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8017da0:	e006      	b.n	8017db0 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 8017da2:	2202      	movs	r2, #2
 8017da4:	e7d5      	b.n	8017d52 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017da6:	200a      	movs	r0, #10
}
 8017da8:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8017daa:	2006      	movs	r0, #6
 8017dac:	e000      	b.n	8017db0 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8017dae:	2011      	movs	r0, #17
}
 8017db0:	b005      	add	sp, #20
 8017db2:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8017db4:	2011      	movs	r0, #17
 8017db6:	e7fb      	b.n	8017db0 <LoRaMacCryptoSecureMessage+0x7c>
 8017db8:	20001b5c 	.word	0x20001b5c

08017dbc <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8017dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017dc0:	b087      	sub	sp, #28
 8017dc2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 8017dc4:	2e00      	cmp	r6, #0
 8017dc6:	d049      	beq.n	8017e5c <LoRaMacCryptoUnsecureMessage+0xa0>
 8017dc8:	4605      	mov	r5, r0
 8017dca:	4688      	mov	r8, r1
 8017dcc:	4617      	mov	r7, r2
 8017dce:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8017dd0:	4619      	mov	r1, r3
 8017dd2:	4610      	mov	r0, r2
 8017dd4:	f7ff fdc2 	bl	801795c <CheckFCntDown>
 8017dd8:	2800      	cmp	r0, #0
 8017dda:	d041      	beq.n	8017e60 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8017ddc:	4630      	mov	r0, r6
 8017dde:	f000 f95d 	bl	801809c <LoRaMacParserData>
 8017de2:	2800      	cmp	r0, #0
 8017de4:	d141      	bne.n	8017e6a <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8017de6:	a905      	add	r1, sp, #20
 8017de8:	4628      	mov	r0, r5
 8017dea:	f7ff fd6d 	bl	80178c8 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017dee:	4605      	mov	r5, r0
 8017df0:	2800      	cmp	r0, #0
 8017df2:	d136      	bne.n	8017e62 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8017df4:	9b05      	ldr	r3, [sp, #20]
 8017df6:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 8017dfa:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8017dfc:	68b3      	ldr	r3, [r6, #8]
 8017dfe:	4543      	cmp	r3, r8
 8017e00:	d135      	bne.n	8017e6e <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8017e02:	7b33      	ldrb	r3, [r6, #12]
 8017e04:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8017e08:	491a      	ldr	r1, [pc, #104]	; (8017e74 <LoRaMacCryptoUnsecureMessage+0xb8>)
 8017e0a:	6809      	ldr	r1, [r1, #0]
 8017e0c:	7889      	ldrb	r1, [r1, #2]
 8017e0e:	b901      	cbnz	r1, 8017e12 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8017e10:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8017e12:	7931      	ldrb	r1, [r6, #4]
 8017e14:	3904      	subs	r1, #4
 8017e16:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8017e18:	9003      	str	r0, [sp, #12]
 8017e1a:	9402      	str	r4, [sp, #8]
 8017e1c:	f8cd 8004 	str.w	r8, [sp, #4]
 8017e20:	2001      	movs	r0, #1
 8017e22:	9000      	str	r0, [sp, #0]
 8017e24:	b289      	uxth	r1, r1
 8017e26:	6830      	ldr	r0, [r6, #0]
 8017e28:	f7ff fe9d 	bl	8017b66 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017e2c:	4605      	mov	r5, r0
 8017e2e:	b9c0      	cbnz	r0, 8017e62 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8017e30:	f896 3020 	ldrb.w	r3, [r6, #32]
 8017e34:	b90b      	cbnz	r3, 8017e3a <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8017e36:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8017e3a:	9401      	str	r4, [sp, #4]
 8017e3c:	2301      	movs	r3, #1
 8017e3e:	9300      	str	r3, [sp, #0]
 8017e40:	4643      	mov	r3, r8
 8017e42:	464a      	mov	r2, r9
 8017e44:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8017e48:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8017e4a:	f7ff fe32 	bl	8017ab2 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017e4e:	4605      	mov	r5, r0
 8017e50:	b938      	cbnz	r0, 8017e62 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8017e52:	4621      	mov	r1, r4
 8017e54:	4638      	mov	r0, r7
 8017e56:	f7ff fd99 	bl	801798c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8017e5a:	e002      	b.n	8017e62 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017e5c:	250a      	movs	r5, #10
 8017e5e:	e000      	b.n	8017e62 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8017e60:	2506      	movs	r5, #6
}
 8017e62:	4628      	mov	r0, r5
 8017e64:	b007      	add	sp, #28
 8017e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8017e6a:	2510      	movs	r5, #16
 8017e6c:	e7f9      	b.n	8017e62 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8017e6e:	2502      	movs	r5, #2
 8017e70:	e7f7      	b.n	8017e62 <LoRaMacCryptoUnsecureMessage+0xa6>
 8017e72:	bf00      	nop
 8017e74:	20001b5c 	.word	0x20001b5c

08017e78 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8017e78:	b9a9      	cbnz	r1, 8017ea6 <LoRaMacCryptoDeriveMcRootKey+0x2e>
{
 8017e7a:	b510      	push	{r4, lr}
 8017e7c:	b084      	sub	sp, #16
 8017e7e:	460c      	mov	r4, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 8017e80:	2300      	movs	r3, #0
 8017e82:	9300      	str	r3, [sp, #0]
 8017e84:	9301      	str	r3, [sp, #4]
 8017e86:	9302      	str	r3, [sp, #8]
 8017e88:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 8017e8a:	2801      	cmp	r0, #1
 8017e8c:	d007      	beq.n	8017e9e <LoRaMacCryptoDeriveMcRootKey+0x26>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8017e8e:	2204      	movs	r2, #4
 8017e90:	4621      	mov	r1, r4
 8017e92:	4668      	mov	r0, sp
 8017e94:	f007 ff50 	bl	801fd38 <SecureElementDeriveAndStoreKey>
 8017e98:	b938      	cbnz	r0, 8017eaa <LoRaMacCryptoDeriveMcRootKey+0x32>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8017e9a:	b004      	add	sp, #16
 8017e9c:	bd10      	pop	{r4, pc}
        compBase[0] = 0x20;
 8017e9e:	2320      	movs	r3, #32
 8017ea0:	f88d 3000 	strb.w	r3, [sp]
 8017ea4:	e7f3      	b.n	8017e8e <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8017ea6:	200b      	movs	r0, #11
}
 8017ea8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017eaa:	200f      	movs	r0, #15
 8017eac:	e7f5      	b.n	8017e9a <LoRaMacCryptoDeriveMcRootKey+0x22>

08017eae <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8017eae:	2804      	cmp	r0, #4
 8017eb0:	d001      	beq.n	8017eb6 <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8017eb2:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8017eb4:	4770      	bx	lr
{
 8017eb6:	b500      	push	{lr}
 8017eb8:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 8017eba:	2300      	movs	r3, #0
 8017ebc:	9300      	str	r3, [sp, #0]
 8017ebe:	9301      	str	r3, [sp, #4]
 8017ec0:	9302      	str	r3, [sp, #8]
 8017ec2:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8017ec4:	227f      	movs	r2, #127	; 0x7f
 8017ec6:	4601      	mov	r1, r0
 8017ec8:	4668      	mov	r0, sp
 8017eca:	f007 ff35 	bl	801fd38 <SecureElementDeriveAndStoreKey>
 8017ece:	b910      	cbnz	r0, 8017ed6 <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 8017ed0:	b005      	add	sp, #20
 8017ed2:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017ed6:	200f      	movs	r0, #15
 8017ed8:	e7fa      	b.n	8017ed0 <LoRaMacCryptoDeriveMcKEKey+0x22>
	...

08017edc <LoRaMacCryptoSetKey>:
{
 8017edc:	b510      	push	{r4, lr}
 8017ede:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8017ee0:	f007 fee8 	bl	801fcb4 <SecureElementSetKey>
 8017ee4:	b978      	cbnz	r0, 8017f06 <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 8017ee6:	b104      	cbz	r4, 8017eea <LoRaMacCryptoSetKey+0xe>
}
 8017ee8:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8017eea:	4b09      	ldr	r3, [pc, #36]	; (8017f10 <LoRaMacCryptoSetKey+0x34>)
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	4621      	mov	r1, r4
 8017ef0:	7898      	ldrb	r0, [r3, #2]
 8017ef2:	f7ff ffc1 	bl	8017e78 <LoRaMacCryptoDeriveMcRootKey>
 8017ef6:	b940      	cbnz	r0, 8017f0a <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8017ef8:	2004      	movs	r0, #4
 8017efa:	f7ff ffd8 	bl	8017eae <LoRaMacCryptoDeriveMcKEKey>
 8017efe:	2800      	cmp	r0, #0
 8017f00:	d0f2      	beq.n	8017ee8 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017f02:	200f      	movs	r0, #15
 8017f04:	e7f0      	b.n	8017ee8 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017f06:	200f      	movs	r0, #15
 8017f08:	e7ee      	b.n	8017ee8 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017f0a:	200f      	movs	r0, #15
 8017f0c:	e7ec      	b.n	8017ee8 <LoRaMacCryptoSetKey+0xc>
 8017f0e:	bf00      	nop
 8017f10:	20001b5c 	.word	0x20001b5c

08017f14 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8017f14:	2a00      	cmp	r2, #0
 8017f16:	d064      	beq.n	8017fe2 <LoRaMacCryptoHandleJoinAccept+0xce>
{
 8017f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f1a:	b08f      	sub	sp, #60	; 0x3c
 8017f1c:	4607      	mov	r7, r0
 8017f1e:	460d      	mov	r5, r1
 8017f20:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8017f22:	2900      	cmp	r1, #0
 8017f24:	d05f      	beq.n	8017fe6 <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8017f26:	2600      	movs	r6, #0
 8017f28:	9605      	str	r6, [sp, #20]
 8017f2a:	221d      	movs	r2, #29
 8017f2c:	4631      	mov	r1, r6
 8017f2e:	a806      	add	r0, sp, #24
 8017f30:	f00b fff2 	bl	8023f18 <memset>
    uint8_t versionMinor         = 0;
 8017f34:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8017f38:	4b2f      	ldr	r3, [pc, #188]	; (8017ff8 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8017f3e:	f10d 0313 	add.w	r3, sp, #19
 8017f42:	9302      	str	r3, [sp, #8]
 8017f44:	ab05      	add	r3, sp, #20
 8017f46:	9301      	str	r3, [sp, #4]
 8017f48:	7923      	ldrb	r3, [r4, #4]
 8017f4a:	9300      	str	r3, [sp, #0]
 8017f4c:	6823      	ldr	r3, [r4, #0]
 8017f4e:	4632      	mov	r2, r6
 8017f50:	4629      	mov	r1, r5
 8017f52:	4638      	mov	r0, r7
 8017f54:	f007 ff10 	bl	801fd78 <SecureElementProcessJoinAccept>
 8017f58:	2800      	cmp	r0, #0
 8017f5a:	d146      	bne.n	8017fea <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8017f5c:	7922      	ldrb	r2, [r4, #4]
 8017f5e:	a905      	add	r1, sp, #20
 8017f60:	6820      	ldr	r0, [r4, #0]
 8017f62:	f007 ffb0 	bl	801fec6 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8017f66:	4620      	mov	r0, r4
 8017f68:	f000 f848 	bl	8017ffc <LoRaMacParserJoinAccept>
 8017f6c:	2800      	cmp	r0, #0
 8017f6e:	d13f      	bne.n	8017ff0 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8017f70:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8017f72:	79e3      	ldrb	r3, [r4, #7]
 8017f74:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8017f78:	7a23      	ldrb	r3, [r4, #8]
 8017f7a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8017f7e:	4b1e      	ldr	r3, [pc, #120]	; (8017ff8 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	689a      	ldr	r2, [r3, #8]
 8017f84:	42aa      	cmp	r2, r5
 8017f86:	d035      	beq.n	8017ff4 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 8017f88:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8017f8a:	2100      	movs	r1, #0
 8017f8c:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8017f90:	f7ff ff72 	bl	8017e78 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017f94:	bb50      	cbnz	r0, 8017fec <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8017f96:	2004      	movs	r0, #4
 8017f98:	f7ff ff89 	bl	8017eae <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017f9c:	bb30      	cbnz	r0, 8017fec <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 8017f9e:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8017fa0:	7aa2      	ldrb	r2, [r4, #10]
 8017fa2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8017fa6:	7ae4      	ldrb	r4, [r4, #11]
 8017fa8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8017fac:	4633      	mov	r3, r6
 8017fae:	4622      	mov	r2, r4
 8017fb0:	4629      	mov	r1, r5
 8017fb2:	2003      	movs	r0, #3
 8017fb4:	f7ff fd48 	bl	8017a48 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017fb8:	b9c0      	cbnz	r0, 8017fec <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8017fba:	4633      	mov	r3, r6
 8017fbc:	4622      	mov	r2, r4
 8017fbe:	4629      	mov	r1, r5
 8017fc0:	2002      	movs	r0, #2
 8017fc2:	f7ff fd41 	bl	8017a48 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017fc6:	b988      	cbnz	r0, 8017fec <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8017fc8:	4b0b      	ldr	r3, [pc, #44]	; (8017ff8 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8017fd0:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 8017fd2:	2200      	movs	r2, #0
 8017fd4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8017fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8017fda:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8017fdc:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8017fde:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 8017fe0:	e004      	b.n	8017fec <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017fe2:	200a      	movs	r0, #10
}
 8017fe4:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017fe6:	200a      	movs	r0, #10
 8017fe8:	e000      	b.n	8017fec <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017fea:	200f      	movs	r0, #15
}
 8017fec:	b00f      	add	sp, #60	; 0x3c
 8017fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8017ff0:	2010      	movs	r0, #16
 8017ff2:	e7fb      	b.n	8017fec <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8017ff4:	2003      	movs	r0, #3
 8017ff6:	e7f9      	b.n	8017fec <LoRaMacCryptoHandleJoinAccept+0xd8>
 8017ff8:	20001b5c 	.word	0x20001b5c

08017ffc <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017ffc:	2800      	cmp	r0, #0
 8017ffe:	d047      	beq.n	8018090 <LoRaMacParserJoinAccept+0x94>
{
 8018000:	b538      	push	{r3, r4, r5, lr}
 8018002:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8018004:	6801      	ldr	r1, [r0, #0]
 8018006:	2900      	cmp	r1, #0
 8018008:	d044      	beq.n	8018094 <LoRaMacParserJoinAccept+0x98>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801800a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801800e:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8018010:	2203      	movs	r2, #3
 8018012:	3006      	adds	r0, #6
 8018014:	f007 ff57 	bl	801fec6 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8018018:	4620      	mov	r0, r4
 801801a:	f850 1b09 	ldr.w	r1, [r0], #9
 801801e:	2203      	movs	r2, #3
 8018020:	3104      	adds	r1, #4
 8018022:	f007 ff50 	bl	801fec6 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8018026:	6821      	ldr	r1, [r4, #0]
 8018028:	79cb      	ldrb	r3, [r1, #7]
 801802a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801802c:	7a0a      	ldrb	r2, [r1, #8]
 801802e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018032:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8018034:	7a4a      	ldrb	r2, [r1, #9]
 8018036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801803a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801803c:	7a8a      	ldrb	r2, [r1, #10]
 801803e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8018042:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8018044:	7acb      	ldrb	r3, [r1, #11]
 8018046:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8018048:	7b0b      	ldrb	r3, [r1, #12]
 801804a:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801804c:	7923      	ldrb	r3, [r4, #4]
 801804e:	2b21      	cmp	r3, #33	; 0x21
 8018050:	d016      	beq.n	8018080 <LoRaMacParserJoinAccept+0x84>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8018052:	2b11      	cmp	r3, #17
 8018054:	dc20      	bgt.n	8018098 <LoRaMacParserJoinAccept+0x9c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8018056:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8018058:	6821      	ldr	r1, [r4, #0]
 801805a:	1c55      	adds	r5, r2, #1
 801805c:	5c8b      	ldrb	r3, [r1, r2]
 801805e:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8018060:	1c90      	adds	r0, r2, #2
 8018062:	5d4d      	ldrb	r5, [r1, r5]
 8018064:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8018068:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801806a:	3203      	adds	r2, #3
 801806c:	5c08      	ldrb	r0, [r1, r0]
 801806e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018072:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8018074:	5c8a      	ldrb	r2, [r1, r2]
 8018076:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801807a:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801807c:	2000      	movs	r0, #0
}
 801807e:	bd38      	pop	{r3, r4, r5, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8018080:	2210      	movs	r2, #16
 8018082:	310d      	adds	r1, #13
 8018084:	f104 0012 	add.w	r0, r4, #18
 8018088:	f007 ff1d 	bl	801fec6 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801808c:	221d      	movs	r2, #29
 801808e:	e7e3      	b.n	8018058 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 8018090:	2002      	movs	r0, #2
}
 8018092:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 8018094:	2002      	movs	r0, #2
 8018096:	e7f2      	b.n	801807e <LoRaMacParserJoinAccept+0x82>
        return LORAMAC_PARSER_FAIL;
 8018098:	2001      	movs	r0, #1
 801809a:	e7f0      	b.n	801807e <LoRaMacParserJoinAccept+0x82>

0801809c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801809c:	2800      	cmp	r0, #0
 801809e:	d058      	beq.n	8018152 <LoRaMacParserData+0xb6>
{
 80180a0:	b510      	push	{r4, lr}
 80180a2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80180a4:	6801      	ldr	r1, [r0, #0]
 80180a6:	2900      	cmp	r1, #0
 80180a8:	d055      	beq.n	8018156 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80180aa:	780b      	ldrb	r3, [r1, #0]
 80180ac:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80180ae:	784b      	ldrb	r3, [r1, #1]
 80180b0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80180b2:	788a      	ldrb	r2, [r1, #2]
 80180b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80180b8:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80180ba:	78ca      	ldrb	r2, [r1, #3]
 80180bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80180c0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80180c2:	790a      	ldrb	r2, [r1, #4]
 80180c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80180c8:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80180ca:	794b      	ldrb	r3, [r1, #5]
 80180cc:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80180ce:	798b      	ldrb	r3, [r1, #6]
 80180d0:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80180d2:	79ca      	ldrb	r2, [r1, #7]
 80180d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80180d8:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80180da:	7b02      	ldrb	r2, [r0, #12]
 80180dc:	f002 020f 	and.w	r2, r2, #15
 80180e0:	3108      	adds	r1, #8
 80180e2:	3010      	adds	r0, #16
 80180e4:	f007 feef 	bl	801fec6 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80180e8:	7b23      	ldrb	r3, [r4, #12]
 80180ea:	f003 030f 	and.w	r3, r3, #15
 80180ee:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80180f2:	2200      	movs	r2, #0
 80180f4:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 80180f8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80180fc:	7922      	ldrb	r2, [r4, #4]
 80180fe:	1a11      	subs	r1, r2, r0
 8018100:	2904      	cmp	r1, #4
 8018102:	dc16      	bgt.n	8018132 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8018104:	6822      	ldr	r2, [r4, #0]
 8018106:	7923      	ldrb	r3, [r4, #4]
 8018108:	441a      	add	r2, r3
 801810a:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 801810e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8018110:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8018114:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8018118:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801811a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801811e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8018122:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8018124:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8018128:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801812c:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801812e:	2000      	movs	r0, #0
}
 8018130:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8018132:	6821      	ldr	r1, [r4, #0]
 8018134:	3309      	adds	r3, #9
 8018136:	5c08      	ldrb	r0, [r1, r0]
 8018138:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801813c:	1ad2      	subs	r2, r2, r3
 801813e:	b2d2      	uxtb	r2, r2
 8018140:	3a04      	subs	r2, #4
 8018142:	b2d2      	uxtb	r2, r2
 8018144:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8018148:	4419      	add	r1, r3
 801814a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801814c:	f007 febb 	bl	801fec6 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8018150:	e7d8      	b.n	8018104 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 8018152:	2002      	movs	r0, #2
}
 8018154:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 8018156:	2002      	movs	r0, #2
 8018158:	e7ea      	b.n	8018130 <LoRaMacParserData+0x94>

0801815a <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801815a:	b370      	cbz	r0, 80181ba <LoRaMacSerializerJoinRequest+0x60>
{
 801815c:	b510      	push	{r4, lr}
 801815e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8018160:	6803      	ldr	r3, [r0, #0]
 8018162:	b363      	cbz	r3, 80181be <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8018164:	7902      	ldrb	r2, [r0, #4]
 8018166:	2a16      	cmp	r2, #22
 8018168:	d92b      	bls.n	80181c2 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801816a:	7942      	ldrb	r2, [r0, #5]
 801816c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801816e:	4601      	mov	r1, r0
 8018170:	f851 0b06 	ldr.w	r0, [r1], #6
 8018174:	2208      	movs	r2, #8
 8018176:	3001      	adds	r0, #1
 8018178:	f007 feaf 	bl	801feda <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801817c:	4621      	mov	r1, r4
 801817e:	f851 0b0e 	ldr.w	r0, [r1], #14
 8018182:	2208      	movs	r2, #8
 8018184:	3009      	adds	r0, #9
 8018186:	f007 fea8 	bl	801feda <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801818a:	8ae2      	ldrh	r2, [r4, #22]
 801818c:	6823      	ldr	r3, [r4, #0]
 801818e:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8018190:	8ae3      	ldrh	r3, [r4, #22]
 8018192:	6822      	ldr	r2, [r4, #0]
 8018194:	0a1b      	lsrs	r3, r3, #8
 8018196:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8018198:	69a2      	ldr	r2, [r4, #24]
 801819a:	6823      	ldr	r3, [r4, #0]
 801819c:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801819e:	69a3      	ldr	r3, [r4, #24]
 80181a0:	0a1b      	lsrs	r3, r3, #8
 80181a2:	6822      	ldr	r2, [r4, #0]
 80181a4:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80181a6:	8b62      	ldrh	r2, [r4, #26]
 80181a8:	6823      	ldr	r3, [r4, #0]
 80181aa:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80181ac:	7ee2      	ldrb	r2, [r4, #27]
 80181ae:	6823      	ldr	r3, [r4, #0]
 80181b0:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 80181b2:	2317      	movs	r3, #23
 80181b4:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80181b6:	2000      	movs	r0, #0
}
 80181b8:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80181ba:	2001      	movs	r0, #1
}
 80181bc:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80181be:	2001      	movs	r0, #1
 80181c0:	e7fa      	b.n	80181b8 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80181c2:	2002      	movs	r0, #2
 80181c4:	e7f8      	b.n	80181b8 <LoRaMacSerializerJoinRequest+0x5e>

080181c6 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80181c6:	2800      	cmp	r0, #0
 80181c8:	d066      	beq.n	8018298 <LoRaMacSerializerData+0xd2>
{
 80181ca:	b538      	push	{r3, r4, r5, lr}
 80181cc:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80181ce:	6801      	ldr	r1, [r0, #0]
 80181d0:	2900      	cmp	r1, #0
 80181d2:	d063      	beq.n	801829c <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80181d4:	7b02      	ldrb	r2, [r0, #12]
 80181d6:	f002 020f 	and.w	r2, r2, #15
 80181da:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 80181de:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80181e2:	b10b      	cbz	r3, 80181e8 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80181e4:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80181e8:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80181ea:	3304      	adds	r3, #4
 80181ec:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 80181ee:	7922      	ldrb	r2, [r4, #4]
 80181f0:	429a      	cmp	r2, r3
 80181f2:	d355      	bcc.n	80182a0 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80181f4:	7963      	ldrb	r3, [r4, #5]
 80181f6:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80181f8:	68a2      	ldr	r2, [r4, #8]
 80181fa:	6823      	ldr	r3, [r4, #0]
 80181fc:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80181fe:	68a3      	ldr	r3, [r4, #8]
 8018200:	0a1b      	lsrs	r3, r3, #8
 8018202:	6822      	ldr	r2, [r4, #0]
 8018204:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8018206:	8962      	ldrh	r2, [r4, #10]
 8018208:	6823      	ldr	r3, [r4, #0]
 801820a:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801820c:	7ae2      	ldrb	r2, [r4, #11]
 801820e:	6823      	ldr	r3, [r4, #0]
 8018210:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8018212:	6823      	ldr	r3, [r4, #0]
 8018214:	7b22      	ldrb	r2, [r4, #12]
 8018216:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8018218:	89e2      	ldrh	r2, [r4, #14]
 801821a:	6823      	ldr	r3, [r4, #0]
 801821c:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801821e:	89e3      	ldrh	r3, [r4, #14]
 8018220:	6822      	ldr	r2, [r4, #0]
 8018222:	0a1b      	lsrs	r3, r3, #8
 8018224:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8018226:	4621      	mov	r1, r4
 8018228:	f851 0b10 	ldr.w	r0, [r1], #16
 801822c:	7b22      	ldrb	r2, [r4, #12]
 801822e:	f002 020f 	and.w	r2, r2, #15
 8018232:	3008      	adds	r0, #8
 8018234:	f007 fe47 	bl	801fec6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8018238:	7b23      	ldrb	r3, [r4, #12]
 801823a:	f003 030f 	and.w	r3, r3, #15
 801823e:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 8018242:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8018246:	b12a      	cbz	r2, 8018254 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8018248:	6822      	ldr	r2, [r4, #0]
 801824a:	f894 1020 	ldrb.w	r1, [r4, #32]
 801824e:	5551      	strb	r1, [r2, r5]
 8018250:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8018254:	6820      	ldr	r0, [r4, #0]
 8018256:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 801825a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801825c:	4428      	add	r0, r5
 801825e:	f007 fe32 	bl	801fec6 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8018262:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8018266:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8018268:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801826a:	6821      	ldr	r1, [r4, #0]
 801826c:	1c5a      	adds	r2, r3, #1
 801826e:	b292      	uxth	r2, r2
 8018270:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8018272:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018274:	0a08      	lsrs	r0, r1, #8
 8018276:	6825      	ldr	r5, [r4, #0]
 8018278:	1c99      	adds	r1, r3, #2
 801827a:	b289      	uxth	r1, r1
 801827c:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801827e:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 8018280:	6820      	ldr	r0, [r4, #0]
 8018282:	1cda      	adds	r2, r3, #3
 8018284:	b292      	uxth	r2, r2
 8018286:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8018288:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 801828c:	6821      	ldr	r1, [r4, #0]
 801828e:	3304      	adds	r3, #4
 8018290:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 8018292:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8018294:	2000      	movs	r0, #0
}
 8018296:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8018298:	2001      	movs	r0, #1
}
 801829a:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801829c:	2001      	movs	r0, #1
 801829e:	e7fa      	b.n	8018296 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80182a0:	2002      	movs	r0, #2
 80182a2:	e7f8      	b.n	8018296 <LoRaMacSerializerData+0xd0>

080182a4 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80182a4:	4770      	bx	lr

080182a6 <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 80182a6:	2000      	movs	r0, #0
 80182a8:	4770      	bx	lr

080182aa <NvmDataMgmtRestore>:
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
}
 80182aa:	2000      	movs	r0, #0
 80182ac:	4770      	bx	lr

080182ae <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 80182ae:	2809      	cmp	r0, #9
 80182b0:	d809      	bhi.n	80182c6 <RegionIsActive+0x18>
 80182b2:	2301      	movs	r3, #1
 80182b4:	fa03 f000 	lsl.w	r0, r3, r0
 80182b8:	f240 33eb 	movw	r3, #1003	; 0x3eb
 80182bc:	4218      	tst	r0, r3
 80182be:	bf14      	ite	ne
 80182c0:	2001      	movne	r0, #1
 80182c2:	2000      	moveq	r0, #0
 80182c4:	4770      	bx	lr
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80182c6:	2000      	movs	r0, #0
        }
    }
}
 80182c8:	4770      	bx	lr

080182ca <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80182ca:	b500      	push	{lr}
 80182cc:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 80182ce:	2300      	movs	r3, #0
 80182d0:	9300      	str	r3, [sp, #0]
    switch( region )
 80182d2:	2809      	cmp	r0, #9
 80182d4:	d831      	bhi.n	801833a <RegionGetPhyParam+0x70>
 80182d6:	e8df f000 	tbb	[pc, r0]
 80182da:	0d05      	.short	0x0d05
 80182dc:	17301230 	.word	0x17301230
 80182e0:	2b26211c 	.word	0x2b26211c
    {
        AS923_GET_PHY_PARAM( );
 80182e4:	4608      	mov	r0, r1
 80182e6:	f000 fb5f 	bl	80189a8 <RegionAS923GetPhyParam>
 80182ea:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 80182ec:	9801      	ldr	r0, [sp, #4]
 80182ee:	b003      	add	sp, #12
 80182f0:	f85d fb04 	ldr.w	pc, [sp], #4
        AU915_GET_PHY_PARAM( );
 80182f4:	4608      	mov	r0, r1
 80182f6:	f001 f99b 	bl	8019630 <RegionAU915GetPhyParam>
 80182fa:	9001      	str	r0, [sp, #4]
 80182fc:	e7f6      	b.n	80182ec <RegionGetPhyParam+0x22>
        CN779_GET_PHY_PARAM( );
 80182fe:	4608      	mov	r0, r1
 8018300:	f002 f86a 	bl	801a3d8 <RegionCN779GetPhyParam>
 8018304:	9001      	str	r0, [sp, #4]
 8018306:	e7f1      	b.n	80182ec <RegionGetPhyParam+0x22>
        EU868_GET_PHY_PARAM( );
 8018308:	4608      	mov	r0, r1
 801830a:	f003 fa4b 	bl	801b7a4 <RegionEU868GetPhyParam>
 801830e:	9001      	str	r0, [sp, #4]
 8018310:	e7ec      	b.n	80182ec <RegionGetPhyParam+0x22>
        KR920_GET_PHY_PARAM( );
 8018312:	4608      	mov	r0, r1
 8018314:	f004 fe30 	bl	801cf78 <RegionKR920GetPhyParam>
 8018318:	9001      	str	r0, [sp, #4]
 801831a:	e7e7      	b.n	80182ec <RegionGetPhyParam+0x22>
        IN865_GET_PHY_PARAM( );
 801831c:	4608      	mov	r0, r1
 801831e:	f004 f83f 	bl	801c3a0 <RegionIN865GetPhyParam>
 8018322:	9001      	str	r0, [sp, #4]
 8018324:	e7e2      	b.n	80182ec <RegionGetPhyParam+0x22>
        US915_GET_PHY_PARAM( );
 8018326:	4608      	mov	r0, r1
 8018328:	f006 f9d6 	bl	801e6d8 <RegionUS915GetPhyParam>
 801832c:	9001      	str	r0, [sp, #4]
 801832e:	e7dd      	b.n	80182ec <RegionGetPhyParam+0x22>
        RU864_GET_PHY_PARAM( );
 8018330:	4608      	mov	r0, r1
 8018332:	f005 fbe5 	bl	801db00 <RegionRU864GetPhyParam>
 8018336:	9001      	str	r0, [sp, #4]
 8018338:	e7d8      	b.n	80182ec <RegionGetPhyParam+0x22>
            return phyParam;
 801833a:	9b00      	ldr	r3, [sp, #0]
 801833c:	9301      	str	r3, [sp, #4]
 801833e:	e7d5      	b.n	80182ec <RegionGetPhyParam+0x22>

08018340 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8018340:	b508      	push	{r3, lr}
    switch( region )
 8018342:	2809      	cmp	r0, #9
 8018344:	d809      	bhi.n	801835a <RegionSetBandTxDone+0x1a>
 8018346:	e8df f000 	tbb	[pc, r0]
 801834a:	0905      	.short	0x0905
 801834c:	11080d08 	.word	0x11080d08
 8018350:	211d1915 	.word	0x211d1915
    {
        AS923_SET_BAND_TX_DONE( );
 8018354:	4608      	mov	r0, r1
 8018356:	f000 fc35 	bl	8018bc4 <RegionAS923SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 801835a:	bd08      	pop	{r3, pc}
        AU915_SET_BAND_TX_DONE( );
 801835c:	4608      	mov	r0, r1
 801835e:	f001 fa85 	bl	801986c <RegionAU915SetBandTxDone>
 8018362:	e7fa      	b.n	801835a <RegionSetBandTxDone+0x1a>
        CN779_SET_BAND_TX_DONE( );
 8018364:	4608      	mov	r0, r1
 8018366:	f002 f8fd 	bl	801a564 <RegionCN779SetBandTxDone>
 801836a:	e7f6      	b.n	801835a <RegionSetBandTxDone+0x1a>
        EU868_SET_BAND_TX_DONE( );
 801836c:	4608      	mov	r0, r1
 801836e:	f003 fadd 	bl	801b92c <RegionEU868SetBandTxDone>
 8018372:	e7f2      	b.n	801835a <RegionSetBandTxDone+0x1a>
        KR920_SET_BAND_TX_DONE( );
 8018374:	4608      	mov	r0, r1
 8018376:	f004 fec3 	bl	801d100 <RegionKR920SetBandTxDone>
 801837a:	e7ee      	b.n	801835a <RegionSetBandTxDone+0x1a>
        IN865_SET_BAND_TX_DONE( );
 801837c:	4608      	mov	r0, r1
 801837e:	f004 f8d3 	bl	801c528 <RegionIN865SetBandTxDone>
 8018382:	e7ea      	b.n	801835a <RegionSetBandTxDone+0x1a>
        US915_SET_BAND_TX_DONE( );
 8018384:	4608      	mov	r0, r1
 8018386:	f006 fa81 	bl	801e88c <RegionUS915SetBandTxDone>
 801838a:	e7e6      	b.n	801835a <RegionSetBandTxDone+0x1a>
        RU864_SET_BAND_TX_DONE( );
 801838c:	4608      	mov	r0, r1
 801838e:	f005 fc7d 	bl	801dc8c <RegionRU864SetBandTxDone>
 8018392:	e7e2      	b.n	801835a <RegionSetBandTxDone+0x1a>

08018394 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8018394:	b508      	push	{r3, lr}
    switch( region )
 8018396:	2809      	cmp	r0, #9
 8018398:	d809      	bhi.n	80183ae <RegionInitDefaults+0x1a>
 801839a:	e8df f000 	tbb	[pc, r0]
 801839e:	0905      	.short	0x0905
 80183a0:	11080d08 	.word	0x11080d08
 80183a4:	211d1915 	.word	0x211d1915
    {
        AS923_INIT_DEFAULTS( );
 80183a8:	4608      	mov	r0, r1
 80183aa:	f000 fc29 	bl	8018c00 <RegionAS923InitDefaults>
        default:
        {
            break;
        }
    }
}
 80183ae:	bd08      	pop	{r3, pc}
        AU915_INIT_DEFAULTS( );
 80183b0:	4608      	mov	r0, r1
 80183b2:	f001 fa79 	bl	80198a8 <RegionAU915InitDefaults>
 80183b6:	e7fa      	b.n	80183ae <RegionInitDefaults+0x1a>
        CN779_INIT_DEFAULTS( );
 80183b8:	4608      	mov	r0, r1
 80183ba:	f002 f8f1 	bl	801a5a0 <RegionCN779InitDefaults>
 80183be:	e7f6      	b.n	80183ae <RegionInitDefaults+0x1a>
        EU868_INIT_DEFAULTS( );
 80183c0:	4608      	mov	r0, r1
 80183c2:	f003 fad1 	bl	801b968 <RegionEU868InitDefaults>
 80183c6:	e7f2      	b.n	80183ae <RegionInitDefaults+0x1a>
        KR920_INIT_DEFAULTS( );
 80183c8:	4608      	mov	r0, r1
 80183ca:	f004 feb7 	bl	801d13c <RegionKR920InitDefaults>
 80183ce:	e7ee      	b.n	80183ae <RegionInitDefaults+0x1a>
        IN865_INIT_DEFAULTS( );
 80183d0:	4608      	mov	r0, r1
 80183d2:	f004 f8c7 	bl	801c564 <RegionIN865InitDefaults>
 80183d6:	e7ea      	b.n	80183ae <RegionInitDefaults+0x1a>
        US915_INIT_DEFAULTS( );
 80183d8:	4608      	mov	r0, r1
 80183da:	f006 fa75 	bl	801e8c8 <RegionUS915InitDefaults>
 80183de:	e7e6      	b.n	80183ae <RegionInitDefaults+0x1a>
        RU864_INIT_DEFAULTS( );
 80183e0:	4608      	mov	r0, r1
 80183e2:	f005 fc71 	bl	801dcc8 <RegionRU864InitDefaults>
}
 80183e6:	e7e2      	b.n	80183ae <RegionInitDefaults+0x1a>

080183e8 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80183e8:	b508      	push	{r3, lr}
 80183ea:	4603      	mov	r3, r0
 80183ec:	4608      	mov	r0, r1
 80183ee:	4611      	mov	r1, r2
    switch( region )
 80183f0:	2b09      	cmp	r3, #9
 80183f2:	d81e      	bhi.n	8018432 <RegionVerify+0x4a>
 80183f4:	e8df f003 	tbb	[pc, r3]
 80183f8:	0b1d0805 	.word	0x0b1d0805
 80183fc:	14110e1d 	.word	0x14110e1d
 8018400:	1a17      	.short	0x1a17
    {
        AS923_VERIFY( );
 8018402:	f000 fc61 	bl	8018cc8 <RegionAS923Verify>
 8018406:	e015      	b.n	8018434 <RegionVerify+0x4c>
        AU915_VERIFY( );
 8018408:	f001 faf4 	bl	80199f4 <RegionAU915Verify>
 801840c:	e012      	b.n	8018434 <RegionVerify+0x4c>
        CN470_VERIFY( );
        CN779_VERIFY( );
 801840e:	f002 f929 	bl	801a664 <RegionCN779Verify>
 8018412:	e00f      	b.n	8018434 <RegionVerify+0x4c>
        EU433_VERIFY( );
        EU868_VERIFY( );
 8018414:	f003 fb14 	bl	801ba40 <RegionEU868Verify>
 8018418:	e00c      	b.n	8018434 <RegionVerify+0x4c>
        KR920_VERIFY( );
 801841a:	f004 fef1 	bl	801d200 <RegionKR920Verify>
 801841e:	e009      	b.n	8018434 <RegionVerify+0x4c>
        IN865_VERIFY( );
 8018420:	f004 f902 	bl	801c628 <RegionIN865Verify>
 8018424:	e006      	b.n	8018434 <RegionVerify+0x4c>
        US915_VERIFY( );
 8018426:	f006 faf5 	bl	801ea14 <RegionUS915Verify>
 801842a:	e003      	b.n	8018434 <RegionVerify+0x4c>
        RU864_VERIFY( );
 801842c:	f005 fca6 	bl	801dd7c <RegionRU864Verify>
 8018430:	e000      	b.n	8018434 <RegionVerify+0x4c>
{
 8018432:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8018434:	bd08      	pop	{r3, pc}

08018436 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8018436:	b508      	push	{r3, lr}
    switch( region )
 8018438:	2809      	cmp	r0, #9
 801843a:	d809      	bhi.n	8018450 <RegionApplyCFList+0x1a>
 801843c:	e8df f000 	tbb	[pc, r0]
 8018440:	0d080905 	.word	0x0d080905
 8018444:	19151108 	.word	0x19151108
 8018448:	211d      	.short	0x211d
    {
        AS923_APPLY_CF_LIST( );
 801844a:	4608      	mov	r0, r1
 801844c:	f000 fff6 	bl	801943c <RegionAS923ApplyCFList>
        default:
        {
            break;
        }
    }
}
 8018450:	bd08      	pop	{r3, pc}
        AU915_APPLY_CF_LIST( );
 8018452:	4608      	mov	r0, r1
 8018454:	f001 fb16 	bl	8019a84 <RegionAU915ApplyCFList>
 8018458:	e7fa      	b.n	8018450 <RegionApplyCFList+0x1a>
        CN779_APPLY_CF_LIST( );
 801845a:	4608      	mov	r0, r1
 801845c:	f002 fca8 	bl	801adb0 <RegionCN779ApplyCFList>
 8018460:	e7f6      	b.n	8018450 <RegionApplyCFList+0x1a>
        EU868_APPLY_CF_LIST( );
 8018462:	4608      	mov	r0, r1
 8018464:	f003 feb4 	bl	801c1d0 <RegionEU868ApplyCFList>
 8018468:	e7f2      	b.n	8018450 <RegionApplyCFList+0x1a>
        KR920_APPLY_CF_LIST( );
 801846a:	4608      	mov	r0, r1
 801846c:	f005 fa50 	bl	801d910 <RegionKR920ApplyCFList>
 8018470:	e7ee      	b.n	8018450 <RegionApplyCFList+0x1a>
        IN865_APPLY_CF_LIST( );
 8018472:	4608      	mov	r0, r1
 8018474:	f004 fc8e 	bl	801cd94 <RegionIN865ApplyCFList>
 8018478:	e7ea      	b.n	8018450 <RegionApplyCFList+0x1a>
        US915_APPLY_CF_LIST( );
 801847a:	4608      	mov	r0, r1
 801847c:	f006 fafa 	bl	801ea74 <RegionUS915ApplyCFList>
 8018480:	e7e6      	b.n	8018450 <RegionApplyCFList+0x1a>
        RU864_APPLY_CF_LIST( );
 8018482:	4608      	mov	r0, r1
 8018484:	f006 f81c 	bl	801e4c0 <RegionRU864ApplyCFList>
}
 8018488:	e7e2      	b.n	8018450 <RegionApplyCFList+0x1a>

0801848a <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801848a:	b508      	push	{r3, lr}
    switch( region )
 801848c:	2809      	cmp	r0, #9
 801848e:	d826      	bhi.n	80184de <RegionChanMaskSet+0x54>
 8018490:	e8df f000 	tbb	[pc, r0]
 8018494:	0d250905 	.word	0x0d250905
 8018498:	19151125 	.word	0x19151125
 801849c:	211d      	.short	0x211d
    {
        AS923_CHAN_MASK_SET( );
 801849e:	4608      	mov	r0, r1
 80184a0:	f000 fc64 	bl	8018d6c <RegionAS923ChanMaskSet>
 80184a4:	e01c      	b.n	80184e0 <RegionChanMaskSet+0x56>
        AU915_CHAN_MASK_SET( );
 80184a6:	4608      	mov	r0, r1
 80184a8:	f001 fb2a 	bl	8019b00 <RegionAU915ChanMaskSet>
 80184ac:	e018      	b.n	80184e0 <RegionChanMaskSet+0x56>
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
 80184ae:	4608      	mov	r0, r1
 80184b0:	f002 f916 	bl	801a6e0 <RegionCN779ChanMaskSet>
 80184b4:	e014      	b.n	80184e0 <RegionChanMaskSet+0x56>
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80184b6:	4608      	mov	r0, r1
 80184b8:	f003 fb08 	bl	801bacc <RegionEU868ChanMaskSet>
 80184bc:	e010      	b.n	80184e0 <RegionChanMaskSet+0x56>
        KR920_CHAN_MASK_SET( );
 80184be:	4608      	mov	r0, r1
 80184c0:	f004 fed8 	bl	801d274 <RegionKR920ChanMaskSet>
 80184c4:	e00c      	b.n	80184e0 <RegionChanMaskSet+0x56>
        IN865_CHAN_MASK_SET( );
 80184c6:	4608      	mov	r0, r1
 80184c8:	f004 f8f0 	bl	801c6ac <RegionIN865ChanMaskSet>
 80184cc:	e008      	b.n	80184e0 <RegionChanMaskSet+0x56>
        US915_CHAN_MASK_SET( );
 80184ce:	4608      	mov	r0, r1
 80184d0:	f006 fb0e 	bl	801eaf0 <RegionUS915ChanMaskSet>
 80184d4:	e004      	b.n	80184e0 <RegionChanMaskSet+0x56>
        RU864_CHAN_MASK_SET( );
 80184d6:	4608      	mov	r0, r1
 80184d8:	f005 fc8e 	bl	801ddf8 <RegionRU864ChanMaskSet>
 80184dc:	e000      	b.n	80184e0 <RegionChanMaskSet+0x56>
{
 80184de:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 80184e0:	bd08      	pop	{r3, pc}

080184e2 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80184e2:	b510      	push	{r4, lr}
 80184e4:	4604      	mov	r4, r0
 80184e6:	4608      	mov	r0, r1
 80184e8:	4611      	mov	r1, r2
 80184ea:	461a      	mov	r2, r3
    switch( region )
 80184ec:	2c09      	cmp	r4, #9
 80184ee:	d809      	bhi.n	8018504 <RegionComputeRxWindowParameters+0x22>
 80184f0:	e8df f004 	tbb	[pc, r4]
 80184f4:	0d080905 	.word	0x0d080905
 80184f8:	19151108 	.word	0x19151108
 80184fc:	211d      	.short	0x211d
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 80184fe:	9b02      	ldr	r3, [sp, #8]
 8018500:	f000 fc52 	bl	8018da8 <RegionAS923ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 8018504:	bd10      	pop	{r4, pc}
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8018506:	9b02      	ldr	r3, [sp, #8]
 8018508:	f001 fb34 	bl	8019b74 <RegionAU915ComputeRxWindowParameters>
 801850c:	e7fa      	b.n	8018504 <RegionComputeRxWindowParameters+0x22>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
 801850e:	9b02      	ldr	r3, [sp, #8]
 8018510:	f002 f904 	bl	801a71c <RegionCN779ComputeRxWindowParameters>
 8018514:	e7f6      	b.n	8018504 <RegionComputeRxWindowParameters+0x22>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8018516:	9b02      	ldr	r3, [sp, #8]
 8018518:	f003 faf6 	bl	801bb08 <RegionEU868ComputeRxWindowParameters>
 801851c:	e7f2      	b.n	8018504 <RegionComputeRxWindowParameters+0x22>
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
 801851e:	9b02      	ldr	r3, [sp, #8]
 8018520:	f004 fec6 	bl	801d2b0 <RegionKR920ComputeRxWindowParameters>
 8018524:	e7ee      	b.n	8018504 <RegionComputeRxWindowParameters+0x22>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
 8018526:	9b02      	ldr	r3, [sp, #8]
 8018528:	f004 f8de 	bl	801c6e8 <RegionIN865ComputeRxWindowParameters>
 801852c:	e7ea      	b.n	8018504 <RegionComputeRxWindowParameters+0x22>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 801852e:	9b02      	ldr	r3, [sp, #8]
 8018530:	f006 fb22 	bl	801eb78 <RegionUS915ComputeRxWindowParameters>
 8018534:	e7e6      	b.n	8018504 <RegionComputeRxWindowParameters+0x22>
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
 8018536:	9b02      	ldr	r3, [sp, #8]
 8018538:	f005 fc7c 	bl	801de34 <RegionRU864ComputeRxWindowParameters>
}
 801853c:	e7e2      	b.n	8018504 <RegionComputeRxWindowParameters+0x22>

0801853e <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801853e:	b508      	push	{r3, lr}
 8018540:	4603      	mov	r3, r0
 8018542:	4608      	mov	r0, r1
 8018544:	4611      	mov	r1, r2
    switch( region )
 8018546:	2b09      	cmp	r3, #9
 8018548:	d81e      	bhi.n	8018588 <RegionRxConfig+0x4a>
 801854a:	e8df f003 	tbb	[pc, r3]
 801854e:	0805      	.short	0x0805
 8018550:	0e1d0b1d 	.word	0x0e1d0b1d
 8018554:	1a171411 	.word	0x1a171411
    {
        AS923_RX_CONFIG( );
 8018558:	f000 fc5c 	bl	8018e14 <RegionAS923RxConfig>
 801855c:	e015      	b.n	801858a <RegionRxConfig+0x4c>
        AU915_RX_CONFIG( );
 801855e:	f001 fb37 	bl	8019bd0 <RegionAU915RxConfig>
 8018562:	e012      	b.n	801858a <RegionRxConfig+0x4c>
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
 8018564:	f002 f910 	bl	801a788 <RegionCN779RxConfig>
 8018568:	e00f      	b.n	801858a <RegionRxConfig+0x4c>
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 801856a:	f003 fb03 	bl	801bb74 <RegionEU868RxConfig>
 801856e:	e00c      	b.n	801858a <RegionRxConfig+0x4c>
        KR920_RX_CONFIG( );
 8018570:	f004 fecc 	bl	801d30c <RegionKR920RxConfig>
 8018574:	e009      	b.n	801858a <RegionRxConfig+0x4c>
        IN865_RX_CONFIG( );
 8018576:	f004 f8ed 	bl	801c754 <RegionIN865RxConfig>
 801857a:	e006      	b.n	801858a <RegionRxConfig+0x4c>
        US915_RX_CONFIG( );
 801857c:	f006 fb2a 	bl	801ebd4 <RegionUS915RxConfig>
 8018580:	e003      	b.n	801858a <RegionRxConfig+0x4c>
        RU864_RX_CONFIG( );
 8018582:	f005 fc8d 	bl	801dea0 <RegionRU864RxConfig>
 8018586:	e000      	b.n	801858a <RegionRxConfig+0x4c>
{
 8018588:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 801858a:	bd08      	pop	{r3, pc}

0801858c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801858c:	b510      	push	{r4, lr}
 801858e:	4604      	mov	r4, r0
 8018590:	4608      	mov	r0, r1
 8018592:	4611      	mov	r1, r2
 8018594:	461a      	mov	r2, r3
    switch( region )
 8018596:	2c09      	cmp	r4, #9
 8018598:	d81e      	bhi.n	80185d8 <RegionTxConfig+0x4c>
 801859a:	e8df f004 	tbb	[pc, r4]
 801859e:	0805      	.short	0x0805
 80185a0:	0e1d0b1d 	.word	0x0e1d0b1d
 80185a4:	1a171411 	.word	0x1a171411
    {
        AS923_TX_CONFIG( );
 80185a8:	f000 fcb8 	bl	8018f1c <RegionAS923TxConfig>
 80185ac:	e015      	b.n	80185da <RegionTxConfig+0x4e>
        AU915_TX_CONFIG( );
 80185ae:	f001 fb69 	bl	8019c84 <RegionAU915TxConfig>
 80185b2:	e012      	b.n	80185da <RegionTxConfig+0x4e>
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
 80185b4:	f002 f96c 	bl	801a890 <RegionCN779TxConfig>
 80185b8:	e00f      	b.n	80185da <RegionTxConfig+0x4e>
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80185ba:	f003 fb5f 	bl	801bc7c <RegionEU868TxConfig>
 80185be:	e00c      	b.n	80185da <RegionTxConfig+0x4e>
        KR920_TX_CONFIG( );
 80185c0:	f004 ff02 	bl	801d3c8 <RegionKR920TxConfig>
 80185c4:	e009      	b.n	80185da <RegionTxConfig+0x4e>
        IN865_TX_CONFIG( );
 80185c6:	f004 f949 	bl	801c85c <RegionIN865TxConfig>
 80185ca:	e006      	b.n	80185da <RegionTxConfig+0x4e>
        US915_TX_CONFIG( );
 80185cc:	f006 fb5c 	bl	801ec88 <RegionUS915TxConfig>
 80185d0:	e003      	b.n	80185da <RegionTxConfig+0x4e>
        RU864_TX_CONFIG( );
 80185d2:	f005 fce9 	bl	801dfa8 <RegionRU864TxConfig>
 80185d6:	e000      	b.n	80185da <RegionTxConfig+0x4e>
{
 80185d8:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 80185da:	bd10      	pop	{r4, pc}

080185dc <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80185dc:	b510      	push	{r4, lr}
 80185de:	b082      	sub	sp, #8
 80185e0:	4604      	mov	r4, r0
 80185e2:	4608      	mov	r0, r1
 80185e4:	4611      	mov	r1, r2
 80185e6:	461a      	mov	r2, r3
    switch( region )
 80185e8:	2c09      	cmp	r4, #9
 80185ea:	d836      	bhi.n	801865a <RegionLinkAdrReq+0x7e>
 80185ec:	e8df f004 	tbb	[pc, r4]
 80185f0:	11350b05 	.word	0x11350b05
 80185f4:	231d1735 	.word	0x231d1735
 80185f8:	2f29      	.short	0x2f29
    {
        AS923_LINK_ADR_REQ( );
 80185fa:	9b05      	ldr	r3, [sp, #20]
 80185fc:	9300      	str	r3, [sp, #0]
 80185fe:	9b04      	ldr	r3, [sp, #16]
 8018600:	f000 fd24 	bl	801904c <RegionAS923LinkAdrReq>
 8018604:	e02a      	b.n	801865c <RegionLinkAdrReq+0x80>
        AU915_LINK_ADR_REQ( );
 8018606:	9b05      	ldr	r3, [sp, #20]
 8018608:	9300      	str	r3, [sp, #0]
 801860a:	9b04      	ldr	r3, [sp, #16]
 801860c:	f001 fbb0 	bl	8019d70 <RegionAU915LinkAdrReq>
 8018610:	e024      	b.n	801865c <RegionLinkAdrReq+0x80>
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
 8018612:	9b05      	ldr	r3, [sp, #20]
 8018614:	9300      	str	r3, [sp, #0]
 8018616:	9b04      	ldr	r3, [sp, #16]
 8018618:	f002 f9d2 	bl	801a9c0 <RegionCN779LinkAdrReq>
 801861c:	e01e      	b.n	801865c <RegionLinkAdrReq+0x80>
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801861e:	9b05      	ldr	r3, [sp, #20]
 8018620:	9300      	str	r3, [sp, #0]
 8018622:	9b04      	ldr	r3, [sp, #16]
 8018624:	f003 fbc2 	bl	801bdac <RegionEU868LinkAdrReq>
 8018628:	e018      	b.n	801865c <RegionLinkAdrReq+0x80>
        KR920_LINK_ADR_REQ( );
 801862a:	9b05      	ldr	r3, [sp, #20]
 801862c:	9300      	str	r3, [sp, #0]
 801862e:	9b04      	ldr	r3, [sp, #16]
 8018630:	f004 ff50 	bl	801d4d4 <RegionKR920LinkAdrReq>
 8018634:	e012      	b.n	801865c <RegionLinkAdrReq+0x80>
        IN865_LINK_ADR_REQ( );
 8018636:	9b05      	ldr	r3, [sp, #20]
 8018638:	9300      	str	r3, [sp, #0]
 801863a:	9b04      	ldr	r3, [sp, #16]
 801863c:	f004 f9a6 	bl	801c98c <RegionIN865LinkAdrReq>
 8018640:	e00c      	b.n	801865c <RegionLinkAdrReq+0x80>
        US915_LINK_ADR_REQ( );
 8018642:	9b05      	ldr	r3, [sp, #20]
 8018644:	9300      	str	r3, [sp, #0]
 8018646:	9b04      	ldr	r3, [sp, #16]
 8018648:	f006 fb98 	bl	801ed7c <RegionUS915LinkAdrReq>
 801864c:	e006      	b.n	801865c <RegionLinkAdrReq+0x80>
        RU864_LINK_ADR_REQ( );
 801864e:	9b05      	ldr	r3, [sp, #20]
 8018650:	9300      	str	r3, [sp, #0]
 8018652:	9b04      	ldr	r3, [sp, #16]
 8018654:	f005 fd40 	bl	801e0d8 <RegionRU864LinkAdrReq>
 8018658:	e000      	b.n	801865c <RegionLinkAdrReq+0x80>
{
 801865a:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 801865c:	b002      	add	sp, #8
 801865e:	bd10      	pop	{r4, pc}

08018660 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018660:	b508      	push	{r3, lr}
    switch( region )
 8018662:	2809      	cmp	r0, #9
 8018664:	d826      	bhi.n	80186b4 <RegionRxParamSetupReq+0x54>
 8018666:	e8df f000 	tbb	[pc, r0]
 801866a:	0905      	.short	0x0905
 801866c:	11250d25 	.word	0x11250d25
 8018670:	211d1915 	.word	0x211d1915
    {
        AS923_RX_PARAM_SETUP_REQ( );
 8018674:	4608      	mov	r0, r1
 8018676:	f000 fdad 	bl	80191d4 <RegionAS923RxParamSetupReq>
 801867a:	e01c      	b.n	80186b6 <RegionRxParamSetupReq+0x56>
        AU915_RX_PARAM_SETUP_REQ( );
 801867c:	4608      	mov	r0, r1
 801867e:	f001 fcb5 	bl	8019fec <RegionAU915RxParamSetupReq>
 8018682:	e018      	b.n	80186b6 <RegionRxParamSetupReq+0x56>
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
 8018684:	4608      	mov	r0, r1
 8018686:	f002 fa5f 	bl	801ab48 <RegionCN779RxParamSetupReq>
 801868a:	e014      	b.n	80186b6 <RegionRxParamSetupReq+0x56>
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801868c:	4608      	mov	r0, r1
 801868e:	f003 fc51 	bl	801bf34 <RegionEU868RxParamSetupReq>
 8018692:	e010      	b.n	80186b6 <RegionRxParamSetupReq+0x56>
        KR920_RX_PARAM_SETUP_REQ( );
 8018694:	4608      	mov	r0, r1
 8018696:	f004 ffe1 	bl	801d65c <RegionKR920RxParamSetupReq>
 801869a:	e00c      	b.n	80186b6 <RegionRxParamSetupReq+0x56>
        IN865_RX_PARAM_SETUP_REQ( );
 801869c:	4608      	mov	r0, r1
 801869e:	f004 fa41 	bl	801cb24 <RegionIN865RxParamSetupReq>
 80186a2:	e008      	b.n	80186b6 <RegionRxParamSetupReq+0x56>
        US915_RX_PARAM_SETUP_REQ( );
 80186a4:	4608      	mov	r0, r1
 80186a6:	f006 fca7 	bl	801eff8 <RegionUS915RxParamSetupReq>
 80186aa:	e004      	b.n	80186b6 <RegionRxParamSetupReq+0x56>
        RU864_RX_PARAM_SETUP_REQ( );
 80186ac:	4608      	mov	r0, r1
 80186ae:	f005 fdd5 	bl	801e25c <RegionRU864RxParamSetupReq>
 80186b2:	e000      	b.n	80186b6 <RegionRxParamSetupReq+0x56>
{
 80186b4:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 80186b6:	bd08      	pop	{r3, pc}

080186b8 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80186b8:	b508      	push	{r3, lr}
    switch( region )
 80186ba:	2809      	cmp	r0, #9
 80186bc:	d826      	bhi.n	801870c <RegionNewChannelReq+0x54>
 80186be:	e8df f000 	tbb	[pc, r0]
 80186c2:	0905      	.short	0x0905
 80186c4:	11250d25 	.word	0x11250d25
 80186c8:	211d1915 	.word	0x211d1915
    {
        AS923_NEW_CHANNEL_REQ( );
 80186cc:	4608      	mov	r0, r1
 80186ce:	f000 fef5 	bl	80194bc <RegionAS923NewChannelReq>
 80186d2:	e01c      	b.n	801870e <RegionNewChannelReq+0x56>
        AU915_NEW_CHANNEL_REQ( );
 80186d4:	4608      	mov	r0, r1
 80186d6:	f001 fcae 	bl	801a036 <RegionAU915NewChannelReq>
 80186da:	e018      	b.n	801870e <RegionNewChannelReq+0x56>
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
 80186dc:	4608      	mov	r0, r1
 80186de:	f002 fba7 	bl	801ae30 <RegionCN779NewChannelReq>
 80186e2:	e014      	b.n	801870e <RegionNewChannelReq+0x56>
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80186e4:	4608      	mov	r0, r1
 80186e6:	f003 fdb3 	bl	801c250 <RegionEU868NewChannelReq>
 80186ea:	e010      	b.n	801870e <RegionNewChannelReq+0x56>
        KR920_NEW_CHANNEL_REQ( );
 80186ec:	4608      	mov	r0, r1
 80186ee:	f005 f94f 	bl	801d990 <RegionKR920NewChannelReq>
 80186f2:	e00c      	b.n	801870e <RegionNewChannelReq+0x56>
        IN865_NEW_CHANNEL_REQ( );
 80186f4:	4608      	mov	r0, r1
 80186f6:	f004 fb8d 	bl	801ce14 <RegionIN865NewChannelReq>
 80186fa:	e008      	b.n	801870e <RegionNewChannelReq+0x56>
        US915_NEW_CHANNEL_REQ( );
 80186fc:	4608      	mov	r0, r1
 80186fe:	f006 fca6 	bl	801f04e <RegionUS915NewChannelReq>
 8018702:	e004      	b.n	801870e <RegionNewChannelReq+0x56>
        RU864_NEW_CHANNEL_REQ( );
 8018704:	4608      	mov	r0, r1
 8018706:	f005 ff1b 	bl	801e540 <RegionRU864NewChannelReq>
 801870a:	e000      	b.n	801870e <RegionNewChannelReq+0x56>
{
 801870c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 801870e:	bd08      	pop	{r3, pc}

08018710 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8018710:	b508      	push	{r3, lr}
    switch( region )
 8018712:	2809      	cmp	r0, #9
 8018714:	d826      	bhi.n	8018764 <RegionTxParamSetupReq+0x54>
 8018716:	e8df f000 	tbb	[pc, r0]
 801871a:	0905      	.short	0x0905
 801871c:	11250d25 	.word	0x11250d25
 8018720:	211d1915 	.word	0x211d1915
    {
        AS923_TX_PARAM_SETUP_REQ( );
 8018724:	4608      	mov	r0, r1
 8018726:	f000 fd72 	bl	801920e <RegionAS923TxParamSetupReq>
 801872a:	e01c      	b.n	8018766 <RegionTxParamSetupReq+0x56>
        AU915_TX_PARAM_SETUP_REQ( );
 801872c:	4608      	mov	r0, r1
 801872e:	f001 fc85 	bl	801a03c <RegionAU915TxParamSetupReq>
 8018732:	e018      	b.n	8018766 <RegionTxParamSetupReq+0x56>
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
 8018734:	4608      	mov	r0, r1
 8018736:	f002 fa24 	bl	801ab82 <RegionCN779TxParamSetupReq>
 801873a:	e014      	b.n	8018766 <RegionTxParamSetupReq+0x56>
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801873c:	4608      	mov	r0, r1
 801873e:	f003 fc1d 	bl	801bf7c <RegionEU868TxParamSetupReq>
 8018742:	e010      	b.n	8018766 <RegionTxParamSetupReq+0x56>
        KR920_TX_PARAM_SETUP_REQ( );
 8018744:	4608      	mov	r0, r1
 8018746:	f004 ffa6 	bl	801d696 <RegionKR920TxParamSetupReq>
 801874a:	e00c      	b.n	8018766 <RegionTxParamSetupReq+0x56>
        IN865_TX_PARAM_SETUP_REQ( );
 801874c:	4608      	mov	r0, r1
 801874e:	f004 fa0a 	bl	801cb66 <RegionIN865TxParamSetupReq>
 8018752:	e008      	b.n	8018766 <RegionTxParamSetupReq+0x56>
        US915_TX_PARAM_SETUP_REQ( );
 8018754:	4608      	mov	r0, r1
 8018756:	f006 fc7d 	bl	801f054 <RegionUS915TxParamSetupReq>
 801875a:	e004      	b.n	8018766 <RegionTxParamSetupReq+0x56>
        RU864_TX_PARAM_SETUP_REQ( );
 801875c:	4608      	mov	r0, r1
 801875e:	f005 fd9a 	bl	801e296 <RegionRU864TxParamSetupReq>
 8018762:	e000      	b.n	8018766 <RegionTxParamSetupReq+0x56>
{
 8018764:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8018766:	bd08      	pop	{r3, pc}

08018768 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8018768:	b508      	push	{r3, lr}
    switch( region )
 801876a:	2809      	cmp	r0, #9
 801876c:	d826      	bhi.n	80187bc <RegionDlChannelReq+0x54>
 801876e:	e8df f000 	tbb	[pc, r0]
 8018772:	0905      	.short	0x0905
 8018774:	11250d25 	.word	0x11250d25
 8018778:	211d1915 	.word	0x211d1915
    {
        AS923_DL_CHANNEL_REQ( );
 801877c:	4608      	mov	r0, r1
 801877e:	f000 fd49 	bl	8019214 <RegionAS923DlChannelReq>
 8018782:	e01c      	b.n	80187be <RegionDlChannelReq+0x56>
        AU915_DL_CHANNEL_REQ( );
 8018784:	4608      	mov	r0, r1
 8018786:	f001 fc5b 	bl	801a040 <RegionAU915DlChannelReq>
 801878a:	e018      	b.n	80187be <RegionDlChannelReq+0x56>
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
 801878c:	4608      	mov	r0, r1
 801878e:	f002 f9fb 	bl	801ab88 <RegionCN779DlChannelReq>
 8018792:	e014      	b.n	80187be <RegionDlChannelReq+0x56>
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8018794:	4608      	mov	r0, r1
 8018796:	f003 fbf5 	bl	801bf84 <RegionEU868DlChannelReq>
 801879a:	e010      	b.n	80187be <RegionDlChannelReq+0x56>
        KR920_DL_CHANNEL_REQ( );
 801879c:	4608      	mov	r0, r1
 801879e:	f004 ff7d 	bl	801d69c <RegionKR920DlChannelReq>
 80187a2:	e00c      	b.n	80187be <RegionDlChannelReq+0x56>
        IN865_DL_CHANNEL_REQ( );
 80187a4:	4608      	mov	r0, r1
 80187a6:	f004 f9e1 	bl	801cb6c <RegionIN865DlChannelReq>
 80187aa:	e008      	b.n	80187be <RegionDlChannelReq+0x56>
        US915_DL_CHANNEL_REQ( );
 80187ac:	4608      	mov	r0, r1
 80187ae:	f006 fc54 	bl	801f05a <RegionUS915DlChannelReq>
 80187b2:	e004      	b.n	80187be <RegionDlChannelReq+0x56>
        RU864_DL_CHANNEL_REQ( );
 80187b4:	4608      	mov	r0, r1
 80187b6:	f005 fd71 	bl	801e29c <RegionRU864DlChannelReq>
 80187ba:	e000      	b.n	80187be <RegionDlChannelReq+0x56>
{
 80187bc:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 80187be:	bd08      	pop	{r3, pc}

080187c0 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80187c0:	b508      	push	{r3, lr}
 80187c2:	4603      	mov	r3, r0
 80187c4:	4608      	mov	r0, r1
 80187c6:	4611      	mov	r1, r2
    switch( region )
 80187c8:	2b09      	cmp	r3, #9
 80187ca:	d81e      	bhi.n	801880a <RegionAlternateDr+0x4a>
 80187cc:	e8df f003 	tbb	[pc, r3]
 80187d0:	0b1d0805 	.word	0x0b1d0805
 80187d4:	14110e1d 	.word	0x14110e1d
 80187d8:	1a17      	.short	0x1a17
    {
        AS923_ALTERNATE_DR( );
 80187da:	f000 fd3b 	bl	8019254 <RegionAS923AlternateDr>
 80187de:	e015      	b.n	801880c <RegionAlternateDr+0x4c>
        AU915_ALTERNATE_DR( );
 80187e0:	f001 fc32 	bl	801a048 <RegionAU915AlternateDr>
 80187e4:	e012      	b.n	801880c <RegionAlternateDr+0x4c>
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
 80187e6:	f002 f9ef 	bl	801abc8 <RegionCN779AlternateDr>
 80187ea:	e00f      	b.n	801880c <RegionAlternateDr+0x4c>
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80187ec:	f003 fbf2 	bl	801bfd4 <RegionEU868AlternateDr>
 80187f0:	e00c      	b.n	801880c <RegionAlternateDr+0x4c>
        KR920_ALTERNATE_DR( );
 80187f2:	f004 ff73 	bl	801d6dc <RegionKR920AlternateDr>
 80187f6:	e009      	b.n	801880c <RegionAlternateDr+0x4c>
        IN865_ALTERNATE_DR( );
 80187f8:	f004 f9d8 	bl	801cbac <RegionIN865AlternateDr>
 80187fc:	e006      	b.n	801880c <RegionAlternateDr+0x4c>
        US915_ALTERNATE_DR( );
 80187fe:	f006 fc2f 	bl	801f060 <RegionUS915AlternateDr>
 8018802:	e003      	b.n	801880c <RegionAlternateDr+0x4c>
        RU864_ALTERNATE_DR( );
 8018804:	f005 fd6a 	bl	801e2dc <RegionRU864AlternateDr>
 8018808:	e000      	b.n	801880c <RegionAlternateDr+0x4c>
{
 801880a:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 801880c:	bd08      	pop	{r3, pc}

0801880e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801880e:	b510      	push	{r4, lr}
 8018810:	4604      	mov	r4, r0
 8018812:	4608      	mov	r0, r1
 8018814:	4611      	mov	r1, r2
 8018816:	461a      	mov	r2, r3
    switch( region )
 8018818:	2c09      	cmp	r4, #9
 801881a:	d826      	bhi.n	801886a <RegionNextChannel+0x5c>
 801881c:	e8df f004 	tbb	[pc, r4]
 8018820:	0d250905 	.word	0x0d250905
 8018824:	19151125 	.word	0x19151125
 8018828:	211d      	.short	0x211d
    {
        AS923_NEXT_CHANNEL( );
 801882a:	9b02      	ldr	r3, [sp, #8]
 801882c:	f000 fd14 	bl	8019258 <RegionAS923NextChannel>
 8018830:	e01c      	b.n	801886c <RegionNextChannel+0x5e>
        AU915_NEXT_CHANNEL( );
 8018832:	9b02      	ldr	r3, [sp, #8]
 8018834:	f001 fc2e 	bl	801a094 <RegionAU915NextChannel>
 8018838:	e018      	b.n	801886c <RegionNextChannel+0x5e>
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
 801883a:	9b02      	ldr	r3, [sp, #8]
 801883c:	f002 f9c6 	bl	801abcc <RegionCN779NextChannel>
 8018840:	e014      	b.n	801886c <RegionNextChannel+0x5e>
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8018842:	9b02      	ldr	r3, [sp, #8]
 8018844:	f003 fbc8 	bl	801bfd8 <RegionEU868NextChannel>
 8018848:	e010      	b.n	801886c <RegionNextChannel+0x5e>
        KR920_NEXT_CHANNEL( );
 801884a:	9b02      	ldr	r3, [sp, #8]
 801884c:	f004 ff48 	bl	801d6e0 <RegionKR920NextChannel>
 8018850:	e00c      	b.n	801886c <RegionNextChannel+0x5e>
        IN865_NEXT_CHANNEL( );
 8018852:	9b02      	ldr	r3, [sp, #8]
 8018854:	f004 f9ac 	bl	801cbb0 <RegionIN865NextChannel>
 8018858:	e008      	b.n	801886c <RegionNextChannel+0x5e>
        US915_NEXT_CHANNEL( );
 801885a:	9b02      	ldr	r3, [sp, #8]
 801885c:	f006 fc26 	bl	801f0ac <RegionUS915NextChannel>
 8018860:	e004      	b.n	801886c <RegionNextChannel+0x5e>
        RU864_NEXT_CHANNEL( );
 8018862:	9b02      	ldr	r3, [sp, #8]
 8018864:	f005 fd3c 	bl	801e2e0 <RegionRU864NextChannel>
 8018868:	e000      	b.n	801886c <RegionNextChannel+0x5e>
{
 801886a:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 801886c:	bd10      	pop	{r4, pc}

0801886e <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 801886e:	b508      	push	{r3, lr}
    switch( region )
 8018870:	2809      	cmp	r0, #9
 8018872:	d809      	bhi.n	8018888 <RegionSetContinuousWave+0x1a>
 8018874:	e8df f000 	tbb	[pc, r0]
 8018878:	0d080905 	.word	0x0d080905
 801887c:	19151108 	.word	0x19151108
 8018880:	211d      	.short	0x211d
    {
        AS923_SET_CONTINUOUS_WAVE( );
 8018882:	4608      	mov	r0, r1
 8018884:	f000 fe46 	bl	8019514 <RegionAS923SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 8018888:	bd08      	pop	{r3, pc}
        AU915_SET_CONTINUOUS_WAVE( );
 801888a:	4608      	mov	r0, r1
 801888c:	f001 fcb2 	bl	801a1f4 <RegionAU915SetContinuousWave>
 8018890:	e7fa      	b.n	8018888 <RegionSetContinuousWave+0x1a>
        CN779_SET_CONTINUOUS_WAVE( );
 8018892:	4608      	mov	r0, r1
 8018894:	f002 faf8 	bl	801ae88 <RegionCN779SetContinuousWave>
 8018898:	e7f6      	b.n	8018888 <RegionSetContinuousWave+0x1a>
        EU868_SET_CONTINUOUS_WAVE( );
 801889a:	4608      	mov	r0, r1
 801889c:	f003 fd04 	bl	801c2a8 <RegionEU868SetContinuousWave>
 80188a0:	e7f2      	b.n	8018888 <RegionSetContinuousWave+0x1a>
        KR920_SET_CONTINUOUS_WAVE( );
 80188a2:	4608      	mov	r0, r1
 80188a4:	f005 f8a0 	bl	801d9e8 <RegionKR920SetContinuousWave>
 80188a8:	e7ee      	b.n	8018888 <RegionSetContinuousWave+0x1a>
        IN865_SET_CONTINUOUS_WAVE( );
 80188aa:	4608      	mov	r0, r1
 80188ac:	f004 fade 	bl	801ce6c <RegionIN865SetContinuousWave>
 80188b0:	e7ea      	b.n	8018888 <RegionSetContinuousWave+0x1a>
        US915_SET_CONTINUOUS_WAVE( );
 80188b2:	4608      	mov	r0, r1
 80188b4:	f006 fcaa 	bl	801f20c <RegionUS915SetContinuousWave>
 80188b8:	e7e6      	b.n	8018888 <RegionSetContinuousWave+0x1a>
        RU864_SET_CONTINUOUS_WAVE( );
 80188ba:	4608      	mov	r0, r1
 80188bc:	f005 fe6c 	bl	801e598 <RegionRU864SetContinuousWave>
}
 80188c0:	e7e2      	b.n	8018888 <RegionSetContinuousWave+0x1a>

080188c2 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80188c2:	b510      	push	{r4, lr}
 80188c4:	4604      	mov	r4, r0
 80188c6:	4608      	mov	r0, r1
 80188c8:	4611      	mov	r1, r2
 80188ca:	461a      	mov	r2, r3
    switch( region )
 80188cc:	2c09      	cmp	r4, #9
 80188ce:	d81e      	bhi.n	801890e <RegionApplyDrOffset+0x4c>
 80188d0:	e8df f004 	tbb	[pc, r4]
 80188d4:	0b1d0805 	.word	0x0b1d0805
 80188d8:	14110e1d 	.word	0x14110e1d
 80188dc:	1a17      	.short	0x1a17
    {
        AS923_APPLY_DR_OFFSET( );
 80188de:	f000 fe47 	bl	8019570 <RegionAS923ApplyDrOffset>
        default:
        {
            return dr;
        }
    }
}
 80188e2:	bd10      	pop	{r4, pc}
        AU915_APPLY_DR_OFFSET( );
 80188e4:	f001 fcb4 	bl	801a250 <RegionAU915ApplyDrOffset>
 80188e8:	e7fb      	b.n	80188e2 <RegionApplyDrOffset+0x20>
        CN779_APPLY_DR_OFFSET( );
 80188ea:	f002 fafb 	bl	801aee4 <RegionCN779ApplyDrOffset>
 80188ee:	e7f8      	b.n	80188e2 <RegionApplyDrOffset+0x20>
        EU868_APPLY_DR_OFFSET( );
 80188f0:	f003 fd08 	bl	801c304 <RegionEU868ApplyDrOffset>
 80188f4:	e7f5      	b.n	80188e2 <RegionApplyDrOffset+0x20>
        KR920_APPLY_DR_OFFSET( );
 80188f6:	f005 f8b5 	bl	801da64 <RegionKR920ApplyDrOffset>
 80188fa:	e7f2      	b.n	80188e2 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
 80188fc:	f004 fae4 	bl	801cec8 <RegionIN865ApplyDrOffset>
 8018900:	e7ef      	b.n	80188e2 <RegionApplyDrOffset+0x20>
        US915_APPLY_DR_OFFSET( );
 8018902:	f006 fcb7 	bl	801f274 <RegionUS915ApplyDrOffset>
 8018906:	e7ec      	b.n	80188e2 <RegionApplyDrOffset+0x20>
        RU864_APPLY_DR_OFFSET( );
 8018908:	f005 fe74 	bl	801e5f4 <RegionRU864ApplyDrOffset>
 801890c:	e7e9      	b.n	80188e2 <RegionApplyDrOffset+0x20>
            return dr;
 801890e:	b2c8      	uxtb	r0, r1
 8018910:	e7e7      	b.n	80188e2 <RegionApplyDrOffset+0x20>
	...

08018914 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 8018914:	4800      	ldr	r0, [pc, #0]	; (8018918 <RegionGetVersion+0x4>)
 8018916:	4770      	bx	lr
 8018918:	01000300 	.word	0x01000300

0801891c <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 801891c:	b510      	push	{r4, lr}
 801891e:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8018920:	4b05      	ldr	r3, [pc, #20]	; (8018938 <VerifyRfFreq+0x1c>)
 8018922:	6a1b      	ldr	r3, [r3, #32]
 8018924:	4798      	blx	r3
 8018926:	b120      	cbz	r0, 8018932 <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8018928:	4b04      	ldr	r3, [pc, #16]	; (801893c <VerifyRfFreq+0x20>)
 801892a:	4423      	add	r3, r4
 801892c:	4a04      	ldr	r2, [pc, #16]	; (8018940 <VerifyRfFreq+0x24>)
 801892e:	4293      	cmp	r3, r2
 8018930:	d800      	bhi.n	8018934 <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 8018932:	bd10      	pop	{r4, pc}
        return false;
 8018934:	2000      	movs	r0, #0
 8018936:	e7fc      	b.n	8018932 <VerifyRfFreq+0x16>
 8018938:	08028984 	.word	0x08028984
 801893c:	c9763540 	.word	0xc9763540
 8018940:	00c65d40 	.word	0x00c65d40

08018944 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018944:	b570      	push	{r4, r5, r6, lr}
 8018946:	b084      	sub	sp, #16
 8018948:	4605      	mov	r5, r0
 801894a:	460c      	mov	r4, r1
    int8_t phyDr = DataratesAS923[datarate];
 801894c:	4b13      	ldr	r3, [pc, #76]	; (801899c <GetTimeOnAir+0x58>)
 801894e:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 8018950:	4913      	ldr	r1, [pc, #76]	; (80189a0 <GetTimeOnAir+0x5c>)
 8018952:	f002 fe4f 	bl	801b5f4 <RegionCommonGetBandwidth>
 8018956:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 8018958:	2d07      	cmp	r5, #7
 801895a:	d00e      	beq.n	801897a <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801895c:	4b11      	ldr	r3, [pc, #68]	; (80189a4 <GetTimeOnAir+0x60>)
 801895e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8018960:	2001      	movs	r0, #1
 8018962:	9003      	str	r0, [sp, #12]
 8018964:	b2e4      	uxtb	r4, r4
 8018966:	9402      	str	r4, [sp, #8]
 8018968:	2300      	movs	r3, #0
 801896a:	9301      	str	r3, [sp, #4]
 801896c:	2308      	movs	r3, #8
 801896e:	9300      	str	r3, [sp, #0]
 8018970:	4603      	mov	r3, r0
 8018972:	4632      	mov	r2, r6
 8018974:	47a8      	blx	r5
    }
    return timeOnAir;
}
 8018976:	b004      	add	sp, #16
 8018978:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801897a:	4b0a      	ldr	r3, [pc, #40]	; (80189a4 <GetTimeOnAir+0x60>)
 801897c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801897e:	2301      	movs	r3, #1
 8018980:	9303      	str	r3, [sp, #12]
 8018982:	b2e4      	uxtb	r4, r4
 8018984:	9402      	str	r4, [sp, #8]
 8018986:	2000      	movs	r0, #0
 8018988:	9001      	str	r0, [sp, #4]
 801898a:	2305      	movs	r3, #5
 801898c:	9300      	str	r3, [sp, #0]
 801898e:	4603      	mov	r3, r0
 8018990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018994:	fb02 f206 	mul.w	r2, r2, r6
 8018998:	47a8      	blx	r5
 801899a:	e7ec      	b.n	8018976 <GetTimeOnAir+0x32>
 801899c:	0802830c 	.word	0x0802830c
 80189a0:	080282ec 	.word	0x080282ec
 80189a4:	08028984 	.word	0x08028984

080189a8 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 80189a8:	b500      	push	{lr}
 80189aa:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 80189ac:	2300      	movs	r3, #0
 80189ae:	9304      	str	r3, [sp, #16]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 80189b0:	7803      	ldrb	r3, [r0, #0]
 80189b2:	3b01      	subs	r3, #1
 80189b4:	2b38      	cmp	r3, #56	; 0x38
 80189b6:	d846      	bhi.n	8018a46 <RegionAS923GetPhyParam+0x9e>
 80189b8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80189bc:	003e0039 	.word	0x003e0039
 80189c0:	00450045 	.word	0x00450045
 80189c4:	00430045 	.word	0x00430045
 80189c8:	00450045 	.word	0x00450045
 80189cc:	00450045 	.word	0x00450045
 80189d0:	00660063 	.word	0x00660063
 80189d4:	00770069 	.word	0x00770069
 80189d8:	00850045 	.word	0x00850045
 80189dc:	008d0089 	.word	0x008d0089
 80189e0:	00950091 	.word	0x00950091
 80189e4:	009d0099 	.word	0x009d0099
 80189e8:	00a60045 	.word	0x00a60045
 80189ec:	00ac00a9 	.word	0x00ac00a9
 80189f0:	00b800b2 	.word	0x00b800b2
 80189f4:	00bf00bb 	.word	0x00bf00bb
 80189f8:	00c500c2 	.word	0x00c500c2
 80189fc:	004900c9 	.word	0x004900c9
 8018a00:	00450045 	.word	0x00450045
 8018a04:	00450045 	.word	0x00450045
 8018a08:	00450045 	.word	0x00450045
 8018a0c:	00450045 	.word	0x00450045
 8018a10:	00450045 	.word	0x00450045
 8018a14:	00450045 	.word	0x00450045
 8018a18:	00cc0045 	.word	0x00cc0045
 8018a1c:	00d900cf 	.word	0x00d900cf
 8018a20:	00450045 	.word	0x00450045
 8018a24:	00df00dc 	.word	0x00df00dc
 8018a28:	00e20045 	.word	0x00e20045
 8018a2c:	00e8      	.short	0x00e8
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 8018a2e:	78c3      	ldrb	r3, [r0, #3]
 8018a30:	b14b      	cbz	r3, 8018a46 <RegionAS923GetPhyParam+0x9e>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8018a32:	2302      	movs	r3, #2
 8018a34:	9304      	str	r3, [sp, #16]
 8018a36:	e006      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            }
            break;
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8018a38:	7883      	ldrb	r3, [r0, #2]
 8018a3a:	b123      	cbz	r3, 8018a46 <RegionAS923GetPhyParam+0x9e>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8018a3c:	2302      	movs	r3, #2
 8018a3e:	9304      	str	r3, [sp, #16]
 8018a40:	e001      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            }
            break;
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8018a42:	2302      	movs	r3, #2
 8018a44:	9304      	str	r3, [sp, #16]
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
}
 8018a46:	9804      	ldr	r0, [sp, #16]
 8018a48:	b007      	add	sp, #28
 8018a4a:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 8018a4e:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018a52:	f88d 3004 	strb.w	r3, [sp, #4]
 8018a56:	2307      	movs	r3, #7
 8018a58:	f88d 3005 	strb.w	r3, [sp, #5]
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 8018a5c:	7883      	ldrb	r3, [r0, #2]
 8018a5e:	b103      	cbz	r3, 8018a62 <RegionAS923GetPhyParam+0xba>
 8018a60:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018a62:	f88d 3006 	strb.w	r3, [sp, #6]
 8018a66:	2310      	movs	r3, #16
 8018a68:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8018a6c:	4b4b      	ldr	r3, [pc, #300]	; (8018b9c <RegionAS923GetPhyParam+0x1f4>)
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018a74:	9202      	str	r2, [sp, #8]
 8018a76:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8018a78:	a801      	add	r0, sp, #4
 8018a7a:	f002 fd97 	bl	801b5ac <RegionCommonGetNextLowerTxDr>
 8018a7e:	9004      	str	r0, [sp, #16]
            break;
 8018a80:	e7e1      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8018a82:	2340      	movs	r3, #64	; 0x40
 8018a84:	9304      	str	r3, [sp, #16]
            break;
 8018a86:	e7de      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8018a88:	2320      	movs	r3, #32
 8018a8a:	9304      	str	r3, [sp, #16]
            break;
 8018a8c:	e7db      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            if( getPhy->UplinkDwellTime == 0 )
 8018a8e:	7883      	ldrb	r3, [r0, #2]
 8018a90:	b92b      	cbnz	r3, 8018a9e <RegionAS923GetPhyParam+0xf6>
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 8018a92:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8018a96:	4a42      	ldr	r2, [pc, #264]	; (8018ba0 <RegionAS923GetPhyParam+0x1f8>)
 8018a98:	5cd3      	ldrb	r3, [r2, r3]
 8018a9a:	9304      	str	r3, [sp, #16]
 8018a9c:	e7d3      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8018a9e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8018aa2:	4a40      	ldr	r2, [pc, #256]	; (8018ba4 <RegionAS923GetPhyParam+0x1fc>)
 8018aa4:	5cd3      	ldrb	r3, [r2, r3]
 8018aa6:	9304      	str	r3, [sp, #16]
 8018aa8:	e7cd      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            if( getPhy->UplinkDwellTime == 0 )
 8018aaa:	7883      	ldrb	r3, [r0, #2]
 8018aac:	b92b      	cbnz	r3, 8018aba <RegionAS923GetPhyParam+0x112>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 8018aae:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8018ab2:	4a3d      	ldr	r2, [pc, #244]	; (8018ba8 <RegionAS923GetPhyParam+0x200>)
 8018ab4:	5cd3      	ldrb	r3, [r2, r3]
 8018ab6:	9304      	str	r3, [sp, #16]
 8018ab8:	e7c5      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8018aba:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8018abe:	4a39      	ldr	r2, [pc, #228]	; (8018ba4 <RegionAS923GetPhyParam+0x1fc>)
 8018ac0:	5cd3      	ldrb	r3, [r2, r3]
 8018ac2:	9304      	str	r3, [sp, #16]
 8018ac4:	e7bf      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_MAX_RX_WINDOW;
 8018ac6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8018aca:	9304      	str	r3, [sp, #16]
            break;
 8018acc:	e7bb      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018ad2:	9304      	str	r3, [sp, #16]
            break;
 8018ad4:	e7b7      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018ad6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018ada:	9304      	str	r3, [sp, #16]
            break;
 8018adc:	e7b3      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018ade:	f241 3388 	movw	r3, #5000	; 0x1388
 8018ae2:	9304      	str	r3, [sp, #16]
            break;
 8018ae4:	e7af      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018ae6:	f241 7370 	movw	r3, #6000	; 0x1770
 8018aea:	9304      	str	r3, [sp, #16]
            break;
 8018aec:	e7ab      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8018aee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018af2:	9304      	str	r3, [sp, #16]
            break;
 8018af4:	e7a7      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8018af6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018afa:	482c      	ldr	r0, [pc, #176]	; (8018bac <RegionAS923GetPhyParam+0x204>)
 8018afc:	f007 f9d6 	bl	801feac <randr>
 8018b00:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8018b04:	9004      	str	r0, [sp, #16]
            break;
 8018b06:	e79e      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 8018b08:	4b29      	ldr	r3, [pc, #164]	; (8018bb0 <RegionAS923GetPhyParam+0x208>)
 8018b0a:	9304      	str	r3, [sp, #16]
            break;
 8018b0c:	e79b      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_RX_WND_2_DR;
 8018b0e:	2302      	movs	r3, #2
 8018b10:	9304      	str	r3, [sp, #16]
            break;
 8018b12:	e798      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018b14:	4b21      	ldr	r3, [pc, #132]	; (8018b9c <RegionAS923GetPhyParam+0x1f4>)
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018b1c:	9304      	str	r3, [sp, #16]
            break;
 8018b1e:	e792      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018b20:	4b1e      	ldr	r3, [pc, #120]	; (8018b9c <RegionAS923GetPhyParam+0x1f4>)
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018b28:	9304      	str	r3, [sp, #16]
            break;
 8018b2a:	e78c      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 8018b2c:	2310      	movs	r3, #16
 8018b2e:	9304      	str	r3, [sp, #16]
            break;
 8018b30:	e789      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018b32:	4b1a      	ldr	r3, [pc, #104]	; (8018b9c <RegionAS923GetPhyParam+0x1f4>)
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	9304      	str	r3, [sp, #16]
            break;
 8018b38:	e785      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8018b3a:	2301      	movs	r3, #1
 8018b3c:	9304      	str	r3, [sp, #16]
            break;
 8018b3e:	e782      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 8018b40:	2301      	movs	r3, #1
 8018b42:	9304      	str	r3, [sp, #16]
            break;
 8018b44:	e77f      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 8018b46:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8018b4a:	9304      	str	r3, [sp, #16]
            break;
 8018b4c:	e77b      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 8018b4e:	4b19      	ldr	r3, [pc, #100]	; (8018bb4 <RegionAS923GetPhyParam+0x20c>)
 8018b50:	9304      	str	r3, [sp, #16]
            break;
 8018b52:	e778      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 8018b54:	4b18      	ldr	r3, [pc, #96]	; (8018bb8 <RegionAS923GetPhyParam+0x210>)
 8018b56:	9304      	str	r3, [sp, #16]
            break;
 8018b58:	e775      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 8018b5a:	2311      	movs	r3, #17
 8018b5c:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 8018b60:	2302      	movs	r3, #2
 8018b62:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 8018b66:	2300      	movs	r3, #0
 8018b68:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 8018b6c:	e76b      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 8018b6e:	2303      	movs	r3, #3
 8018b70:	9304      	str	r3, [sp, #16]
            break;
 8018b72:	e768      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
 8018b74:	4b10      	ldr	r3, [pc, #64]	; (8018bb8 <RegionAS923GetPhyParam+0x210>)
 8018b76:	9304      	str	r3, [sp, #16]
            break;
 8018b78:	e765      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 8018b7a:	2303      	movs	r3, #3
 8018b7c:	9304      	str	r3, [sp, #16]
            break;
 8018b7e:	e762      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 8018b80:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8018b84:	4a0d      	ldr	r2, [pc, #52]	; (8018bbc <RegionAS923GetPhyParam+0x214>)
 8018b86:	5cd3      	ldrb	r3, [r2, r3]
 8018b88:	9304      	str	r3, [sp, #16]
            break;
 8018b8a:	e75c      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 8018b8c:	490c      	ldr	r1, [pc, #48]	; (8018bc0 <RegionAS923GetPhyParam+0x218>)
 8018b8e:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8018b92:	f002 fd2f 	bl	801b5f4 <RegionCommonGetBandwidth>
 8018b96:	9004      	str	r0, [sp, #16]
            break;
 8018b98:	e755      	b.n	8018a46 <RegionAS923GetPhyParam+0x9e>
 8018b9a:	bf00      	nop
 8018b9c:	20001b64 	.word	0x20001b64
 8018ba0:	0802831c 	.word	0x0802831c
 8018ba4:	08028324 	.word	0x08028324
 8018ba8:	0802832c 	.word	0x0802832c
 8018bac:	fffffc18 	.word	0xfffffc18
 8018bb0:	3706ea00 	.word	0x3706ea00
 8018bb4:	4009999a 	.word	0x4009999a
 8018bb8:	3709f740 	.word	0x3709f740
 8018bbc:	0802830c 	.word	0x0802830c
 8018bc0:	080282ec 	.word	0x080282ec

08018bc4 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018bc4:	b530      	push	{r4, r5, lr}
 8018bc6:	b083      	sub	sp, #12
#if defined( REGION_AS923 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8018bc8:	4b0b      	ldr	r3, [pc, #44]	; (8018bf8 <RegionAS923SetBandTxDone+0x34>)
 8018bca:	681d      	ldr	r5, [r3, #0]
 8018bcc:	4b0b      	ldr	r3, [pc, #44]	; (8018bfc <RegionAS923SetBandTxDone+0x38>)
 8018bce:	681a      	ldr	r2, [r3, #0]
 8018bd0:	7803      	ldrb	r3, [r0, #0]
 8018bd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018bd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018bda:	7a5b      	ldrb	r3, [r3, #9]
 8018bdc:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8018be0:	6903      	ldr	r3, [r0, #16]
 8018be2:	9300      	str	r3, [sp, #0]
 8018be4:	68c3      	ldr	r3, [r0, #12]
 8018be6:	7842      	ldrb	r2, [r0, #1]
 8018be8:	6881      	ldr	r1, [r0, #8]
 8018bea:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 8018bee:	f002 fac9 	bl	801b184 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_AS923 */
}
 8018bf2:	b003      	add	sp, #12
 8018bf4:	bd30      	pop	{r4, r5, pc}
 8018bf6:	bf00      	nop
 8018bf8:	20001b60 	.word	0x20001b60
 8018bfc:	20001b64 	.word	0x20001b64

08018c00 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 8018c00:	b530      	push	{r4, r5, lr}
 8018c02:	b087      	sub	sp, #28
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 8018c04:	2364      	movs	r3, #100	; 0x64
 8018c06:	f8ad 3000 	strh.w	r3, [sp]
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	f88d 3002 	strb.w	r3, [sp, #2]
 8018c10:	9301      	str	r3, [sp, #4]
 8018c12:	9302      	str	r3, [sp, #8]
 8018c14:	9303      	str	r3, [sp, #12]
 8018c16:	9304      	str	r3, [sp, #16]
 8018c18:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        AS923_BAND0
    };

    switch( params->Type )
 8018c1c:	7a03      	ldrb	r3, [r0, #8]
 8018c1e:	2b01      	cmp	r3, #1
 8018c20:	d032      	beq.n	8018c88 <RegionAS923InitDefaults+0x88>
 8018c22:	2b02      	cmp	r3, #2
 8018c24:	d03d      	beq.n	8018ca2 <RegionAS923InitDefaults+0xa2>
 8018c26:	b10b      	cbz	r3, 8018c2c <RegionAS923InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_AS923 */
}
 8018c28:	b007      	add	sp, #28
 8018c2a:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8018c2c:	6803      	ldr	r3, [r0, #0]
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d0fa      	beq.n	8018c28 <RegionAS923InitDefaults+0x28>
 8018c32:	6842      	ldr	r2, [r0, #4]
 8018c34:	2a00      	cmp	r2, #0
 8018c36:	d0f7      	beq.n	8018c28 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8018c38:	491f      	ldr	r1, [pc, #124]	; (8018cb8 <RegionAS923InitDefaults+0xb8>)
 8018c3a:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8018c3c:	4c1f      	ldr	r4, [pc, #124]	; (8018cbc <RegionAS923InitDefaults+0xbc>)
 8018c3e:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 8018c40:	2218      	movs	r2, #24
 8018c42:	4669      	mov	r1, sp
 8018c44:	4618      	mov	r0, r3
 8018c46:	f007 f93e 	bl	801fec6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 8018c4a:	6823      	ldr	r3, [r4, #0]
 8018c4c:	4c1c      	ldr	r4, [pc, #112]	; (8018cc0 <RegionAS923InitDefaults+0xc0>)
 8018c4e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018c52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 8018c56:	f103 050c 	add.w	r5, r3, #12
 8018c5a:	340c      	adds	r4, #12
 8018c5c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018c60:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 8018c64:	4a17      	ldr	r2, [pc, #92]	; (8018cc4 <RegionAS923InitDefaults+0xc4>)
 8018c66:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 8018c68:	f502 3243 	add.w	r2, r2, #199680	; 0x30c00
 8018c6c:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8018c70:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 8018c72:	2203      	movs	r2, #3
 8018c74:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018c78:	2201      	movs	r2, #1
 8018c7a:	f503 715b 	add.w	r1, r3, #876	; 0x36c
 8018c7e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8018c82:	f002 fa6e 	bl	801b162 <RegionCommonChanMaskCopy>
            break;
 8018c86:	e7cf      	b.n	8018c28 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8018c88:	4b0c      	ldr	r3, [pc, #48]	; (8018cbc <RegionAS923InitDefaults+0xbc>)
 8018c8a:	6818      	ldr	r0, [r3, #0]
 8018c8c:	2300      	movs	r3, #0
 8018c8e:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8018c90:	6103      	str	r3, [r0, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018c92:	2201      	movs	r2, #1
 8018c94:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8018c98:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8018c9c:	f002 fa61 	bl	801b162 <RegionCommonChanMaskCopy>
            break;
 8018ca0:	e7c2      	b.n	8018c28 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8018ca2:	4b06      	ldr	r3, [pc, #24]	; (8018cbc <RegionAS923InitDefaults+0xbc>)
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8018caa:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8018cae:	430a      	orrs	r2, r1
 8018cb0:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8018cb4:	e7b8      	b.n	8018c28 <RegionAS923InitDefaults+0x28>
 8018cb6:	bf00      	nop
 8018cb8:	20001b60 	.word	0x20001b60
 8018cbc:	20001b64 	.word	0x20001b64
 8018cc0:	08024b18 	.word	0x08024b18
 8018cc4:	3706ea00 	.word	0x3706ea00

08018cc8 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018cc8:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( phyAttribute )
 8018cca:	290a      	cmp	r1, #10
 8018ccc:	d84b      	bhi.n	8018d66 <RegionAS923Verify+0x9e>
 8018cce:	e8df f001 	tbb	[pc, r1]
 8018cd2:	4a06      	.short	0x4a06
 8018cd4:	0a4a4a4a 	.word	0x0a4a4a4a
 8018cd8:	404a2a20 	.word	0x404a2a20
 8018cdc:	40          	.byte	0x40
 8018cdd:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8018cde:	6800      	ldr	r0, [r0, #0]
 8018ce0:	f7ff fe1c 	bl	801891c <VerifyRfFreq>
 8018ce4:	e040      	b.n	8018d68 <RegionAS923Verify+0xa0>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 8018ce6:	7883      	ldrb	r3, [r0, #2]
 8018ce8:	b94b      	cbnz	r3, 8018cfe <RegionAS923Verify+0x36>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 8018cea:	2207      	movs	r2, #7
 8018cec:	2100      	movs	r1, #0
 8018cee:	f990 0000 	ldrsb.w	r0, [r0]
 8018cf2:	f002 f9c4 	bl	801b07e <RegionCommonValueInRange>
 8018cf6:	3800      	subs	r0, #0
 8018cf8:	bf18      	it	ne
 8018cfa:	2001      	movne	r0, #1
 8018cfc:	e034      	b.n	8018d68 <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 8018cfe:	2207      	movs	r2, #7
 8018d00:	2102      	movs	r1, #2
 8018d02:	f990 0000 	ldrsb.w	r0, [r0]
 8018d06:	f002 f9ba 	bl	801b07e <RegionCommonValueInRange>
 8018d0a:	3800      	subs	r0, #0
 8018d0c:	bf18      	it	ne
 8018d0e:	2001      	movne	r0, #1
 8018d10:	e02a      	b.n	8018d68 <RegionAS923Verify+0xa0>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018d12:	2205      	movs	r2, #5
 8018d14:	2100      	movs	r1, #0
 8018d16:	f990 0000 	ldrsb.w	r0, [r0]
 8018d1a:	f002 f9b0 	bl	801b07e <RegionCommonValueInRange>
 8018d1e:	3800      	subs	r0, #0
 8018d20:	bf18      	it	ne
 8018d22:	2001      	movne	r0, #1
 8018d24:	e020      	b.n	8018d68 <RegionAS923Verify+0xa0>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 8018d26:	7843      	ldrb	r3, [r0, #1]
 8018d28:	b94b      	cbnz	r3, 8018d3e <RegionAS923Verify+0x76>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 8018d2a:	2207      	movs	r2, #7
 8018d2c:	2100      	movs	r1, #0
 8018d2e:	f990 0000 	ldrsb.w	r0, [r0]
 8018d32:	f002 f9a4 	bl	801b07e <RegionCommonValueInRange>
 8018d36:	3800      	subs	r0, #0
 8018d38:	bf18      	it	ne
 8018d3a:	2001      	movne	r0, #1
 8018d3c:	e014      	b.n	8018d68 <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 8018d3e:	2207      	movs	r2, #7
 8018d40:	2102      	movs	r1, #2
 8018d42:	f990 0000 	ldrsb.w	r0, [r0]
 8018d46:	f002 f99a 	bl	801b07e <RegionCommonValueInRange>
 8018d4a:	3800      	subs	r0, #0
 8018d4c:	bf18      	it	ne
 8018d4e:	2001      	movne	r0, #1
 8018d50:	e00a      	b.n	8018d68 <RegionAS923Verify+0xa0>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 8018d52:	2207      	movs	r2, #7
 8018d54:	2100      	movs	r1, #0
 8018d56:	f990 0000 	ldrsb.w	r0, [r0]
 8018d5a:	f002 f990 	bl	801b07e <RegionCommonValueInRange>
 8018d5e:	3800      	subs	r0, #0
 8018d60:	bf18      	it	ne
 8018d62:	2001      	movne	r0, #1
 8018d64:	e000      	b.n	8018d68 <RegionAS923Verify+0xa0>
{
 8018d66:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 8018d68:	bd08      	pop	{r3, pc}
	...

08018d6c <RegionAS923ChanMaskSet>:
    }
#endif /* REGION_AS923 */
}

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018d6c:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 8018d6e:	7903      	ldrb	r3, [r0, #4]
 8018d70:	b11b      	cbz	r3, 8018d7a <RegionAS923ChanMaskSet+0xe>
 8018d72:	2b01      	cmp	r3, #1
 8018d74:	d00b      	beq.n	8018d8e <RegionAS923ChanMaskSet+0x22>
 8018d76:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_AS923 */
}
 8018d78:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8018d7a:	4b0a      	ldr	r3, [pc, #40]	; (8018da4 <RegionAS923ChanMaskSet+0x38>)
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	2201      	movs	r2, #1
 8018d80:	6801      	ldr	r1, [r0, #0]
 8018d82:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8018d86:	f002 f9ec 	bl	801b162 <RegionCommonChanMaskCopy>
    return true;
 8018d8a:	2001      	movs	r0, #1
            break;
 8018d8c:	e7f4      	b.n	8018d78 <RegionAS923ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8018d8e:	4b05      	ldr	r3, [pc, #20]	; (8018da4 <RegionAS923ChanMaskSet+0x38>)
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	2201      	movs	r2, #1
 8018d94:	6801      	ldr	r1, [r0, #0]
 8018d96:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8018d9a:	f002 f9e2 	bl	801b162 <RegionCommonChanMaskCopy>
    return true;
 8018d9e:	2001      	movs	r0, #1
            break;
 8018da0:	e7ea      	b.n	8018d78 <RegionAS923ChanMaskSet+0xc>
 8018da2:	bf00      	nop
 8018da4:	20001b64 	.word	0x20001b64

08018da8 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018daa:	b083      	sub	sp, #12
 8018dac:	460e      	mov	r6, r1
 8018dae:	4617      	mov	r7, r2
 8018db0:	461c      	mov	r4, r3
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 8018db2:	2807      	cmp	r0, #7
 8018db4:	bfa8      	it	ge
 8018db6:	2007      	movge	r0, #7
 8018db8:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 8018dba:	4913      	ldr	r1, [pc, #76]	; (8018e08 <RegionAS923ComputeRxWindowParameters+0x60>)
 8018dbc:	f002 fc1a 	bl	801b5f4 <RegionCommonGetBandwidth>
 8018dc0:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018dc2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8018dc6:	2b07      	cmp	r3, #7
 8018dc8:	d017      	beq.n	8018dfa <RegionAS923ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8018dca:	4a0f      	ldr	r2, [pc, #60]	; (8018e08 <RegionAS923ComputeRxWindowParameters+0x60>)
 8018dcc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8018dd0:	4a0e      	ldr	r2, [pc, #56]	; (8018e0c <RegionAS923ComputeRxWindowParameters+0x64>)
 8018dd2:	5cd0      	ldrb	r0, [r2, r3]
 8018dd4:	f002 fade 	bl	801b394 <RegionCommonComputeSymbolTimeLoRa>
 8018dd8:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018dda:	4b0d      	ldr	r3, [pc, #52]	; (8018e10 <RegionAS923ComputeRxWindowParameters+0x68>)
 8018ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018dde:	4798      	blx	r3
 8018de0:	4603      	mov	r3, r0
 8018de2:	f104 020c 	add.w	r2, r4, #12
 8018de6:	9201      	str	r2, [sp, #4]
 8018de8:	3408      	adds	r4, #8
 8018dea:	9400      	str	r4, [sp, #0]
 8018dec:	463a      	mov	r2, r7
 8018dee:	4631      	mov	r1, r6
 8018df0:	4628      	mov	r0, r5
 8018df2:	f002 fadd 	bl	801b3b0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 8018df6:	b003      	add	sp, #12
 8018df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 8018dfa:	4a04      	ldr	r2, [pc, #16]	; (8018e0c <RegionAS923ComputeRxWindowParameters+0x64>)
 8018dfc:	5cd0      	ldrb	r0, [r2, r3]
 8018dfe:	f002 fad1 	bl	801b3a4 <RegionCommonComputeSymbolTimeFsk>
 8018e02:	4605      	mov	r5, r0
 8018e04:	e7e9      	b.n	8018dda <RegionAS923ComputeRxWindowParameters+0x32>
 8018e06:	bf00      	nop
 8018e08:	080282ec 	.word	0x080282ec
 8018e0c:	0802830c 	.word	0x0802830c
 8018e10:	08028984 	.word	0x08028984

08018e14 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e18:	b08a      	sub	sp, #40	; 0x28
 8018e1a:	4604      	mov	r4, r0
 8018e1c:	460f      	mov	r7, r1
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8018e1e:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8018e22:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8018e26:	4b37      	ldr	r3, [pc, #220]	; (8018f04 <RegionAS923RxConfig+0xf0>)
 8018e28:	685b      	ldr	r3, [r3, #4]
 8018e2a:	4798      	blx	r3
 8018e2c:	2800      	cmp	r0, #0
 8018e2e:	d167      	bne.n	8018f00 <RegionAS923RxConfig+0xec>
 8018e30:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018e32:	7ce3      	ldrb	r3, [r4, #19]
 8018e34:	b983      	cbnz	r3, 8018e58 <RegionAS923RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8018e36:	4b34      	ldr	r3, [pc, #208]	; (8018f08 <RegionAS923RxConfig+0xf4>)
 8018e38:	681a      	ldr	r2, [r3, #0]
 8018e3a:	7823      	ldrb	r3, [r4, #0]
 8018e3c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8018e40:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8018e44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018e48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018e4c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8018e50:	f1b8 0f00 	cmp.w	r8, #0
 8018e54:	d100      	bne.n	8018e58 <RegionAS923RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8018e56:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 8018e58:	4b2c      	ldr	r3, [pc, #176]	; (8018f0c <RegionAS923RxConfig+0xf8>)
 8018e5a:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 8018e5e:	4b29      	ldr	r3, [pc, #164]	; (8018f04 <RegionAS923RxConfig+0xf0>)
 8018e60:	68db      	ldr	r3, [r3, #12]
 8018e62:	4640      	mov	r0, r8
 8018e64:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8018e66:	2d07      	cmp	r5, #7
 8018e68:	d02b      	beq.n	8018ec2 <RegionAS923RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018e6a:	4b26      	ldr	r3, [pc, #152]	; (8018f04 <RegionAS923RxConfig+0xf0>)
 8018e6c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8018e70:	7ca3      	ldrb	r3, [r4, #18]
 8018e72:	9309      	str	r3, [sp, #36]	; 0x24
 8018e74:	2601      	movs	r6, #1
 8018e76:	9608      	str	r6, [sp, #32]
 8018e78:	2300      	movs	r3, #0
 8018e7a:	9307      	str	r3, [sp, #28]
 8018e7c:	9306      	str	r3, [sp, #24]
 8018e7e:	9305      	str	r3, [sp, #20]
 8018e80:	9304      	str	r3, [sp, #16]
 8018e82:	9303      	str	r3, [sp, #12]
 8018e84:	8922      	ldrh	r2, [r4, #8]
 8018e86:	9202      	str	r2, [sp, #8]
 8018e88:	2208      	movs	r2, #8
 8018e8a:	9201      	str	r2, [sp, #4]
 8018e8c:	9300      	str	r3, [sp, #0]
 8018e8e:	4633      	mov	r3, r6
 8018e90:	464a      	mov	r2, r9
 8018e92:	78a1      	ldrb	r1, [r4, #2]
 8018e94:	4630      	mov	r0, r6
 8018e96:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8018e98:	7c63      	ldrb	r3, [r4, #17]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d02d      	beq.n	8018efa <RegionAS923RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 8018e9e:	4b1c      	ldr	r3, [pc, #112]	; (8018f10 <RegionAS923RxConfig+0xfc>)
 8018ea0:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018ea2:	4b18      	ldr	r3, [pc, #96]	; (8018f04 <RegionAS923RxConfig+0xf0>)
 8018ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018ea6:	310d      	adds	r1, #13
 8018ea8:	b2c9      	uxtb	r1, r1
 8018eaa:	4630      	mov	r0, r6
 8018eac:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018eae:	462a      	mov	r2, r5
 8018eb0:	4641      	mov	r1, r8
 8018eb2:	7ce0      	ldrb	r0, [r4, #19]
 8018eb4:	f002 fbb0 	bl	801b618 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8018eb8:	703d      	strb	r5, [r7, #0]
    return true;
 8018eba:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8018ebc:	b00a      	add	sp, #40	; 0x28
 8018ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018ec2:	4b10      	ldr	r3, [pc, #64]	; (8018f04 <RegionAS923RxConfig+0xf0>)
 8018ec4:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8018ec8:	7ca3      	ldrb	r3, [r4, #18]
 8018eca:	9309      	str	r3, [sp, #36]	; 0x24
 8018ecc:	2000      	movs	r0, #0
 8018ece:	9008      	str	r0, [sp, #32]
 8018ed0:	9007      	str	r0, [sp, #28]
 8018ed2:	9006      	str	r0, [sp, #24]
 8018ed4:	2301      	movs	r3, #1
 8018ed6:	9305      	str	r3, [sp, #20]
 8018ed8:	9004      	str	r0, [sp, #16]
 8018eda:	9003      	str	r0, [sp, #12]
 8018edc:	8923      	ldrh	r3, [r4, #8]
 8018ede:	9302      	str	r3, [sp, #8]
 8018ee0:	2305      	movs	r3, #5
 8018ee2:	9301      	str	r3, [sp, #4]
 8018ee4:	4b0b      	ldr	r3, [pc, #44]	; (8018f14 <RegionAS923RxConfig+0x100>)
 8018ee6:	9300      	str	r3, [sp, #0]
 8018ee8:	4603      	mov	r3, r0
 8018eea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018eee:	fb02 f209 	mul.w	r2, r2, r9
 8018ef2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8018ef6:	47d0      	blx	sl
 8018ef8:	e7ce      	b.n	8018e98 <RegionAS923RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 8018efa:	4b07      	ldr	r3, [pc, #28]	; (8018f18 <RegionAS923RxConfig+0x104>)
 8018efc:	5d59      	ldrb	r1, [r3, r5]
 8018efe:	e7d0      	b.n	8018ea2 <RegionAS923RxConfig+0x8e>
        return false;
 8018f00:	2000      	movs	r0, #0
 8018f02:	e7db      	b.n	8018ebc <RegionAS923RxConfig+0xa8>
 8018f04:	08028984 	.word	0x08028984
 8018f08:	20001b64 	.word	0x20001b64
 8018f0c:	0802830c 	.word	0x0802830c
 8018f10:	0802832c 	.word	0x0802832c
 8018f14:	00014585 	.word	0x00014585
 8018f18:	0802831c 	.word	0x0802831c

08018f1c <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f20:	b08d      	sub	sp, #52	; 0x34
 8018f22:	4604      	mov	r4, r0
 8018f24:	460f      	mov	r7, r1
 8018f26:	4690      	mov	r8, r2
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8018f28:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8018f2c:	4a42      	ldr	r2, [pc, #264]	; (8019038 <RegionAS923TxConfig+0x11c>)
 8018f2e:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8018f32:	4b42      	ldr	r3, [pc, #264]	; (801903c <RegionAS923TxConfig+0x120>)
 8018f34:	6819      	ldr	r1, [r3, #0]
 8018f36:	4d42      	ldr	r5, [pc, #264]	; (8019040 <RegionAS923TxConfig+0x124>)
 8018f38:	682b      	ldr	r3, [r5, #0]
 8018f3a:	7802      	ldrb	r2, [r0, #0]
 8018f3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018f40:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8018f44:	7a53      	ldrb	r3, [r2, #9]
 8018f46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018f4a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8018f4e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8018f52:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8018f56:	f002 fb48 	bl	801b5ea <RegionCommonLimitTxPower>
 8018f5a:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 8018f5c:	4939      	ldr	r1, [pc, #228]	; (8019044 <RegionAS923TxConfig+0x128>)
 8018f5e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8018f62:	f002 fb47 	bl	801b5f4 <RegionCommonGetBandwidth>
 8018f66:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018f68:	68a2      	ldr	r2, [r4, #8]
 8018f6a:	6861      	ldr	r1, [r4, #4]
 8018f6c:	4630      	mov	r0, r6
 8018f6e:	f002 fa59 	bl	801b424 <RegionCommonComputeTxPower>
 8018f72:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8018f74:	4b34      	ldr	r3, [pc, #208]	; (8019048 <RegionAS923TxConfig+0x12c>)
 8018f76:	68da      	ldr	r2, [r3, #12]
 8018f78:	6829      	ldr	r1, [r5, #0]
 8018f7a:	7823      	ldrb	r3, [r4, #0]
 8018f7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018f80:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8018f84:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8018f86:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8018f8a:	2b07      	cmp	r3, #7
 8018f8c:	d031      	beq.n	8018ff2 <RegionAS923TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018f8e:	4b2e      	ldr	r3, [pc, #184]	; (8019048 <RegionAS923TxConfig+0x12c>)
 8018f90:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 8018f94:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8018f98:	9308      	str	r3, [sp, #32]
 8018f9a:	2200      	movs	r2, #0
 8018f9c:	9207      	str	r2, [sp, #28]
 8018f9e:	9206      	str	r2, [sp, #24]
 8018fa0:	9205      	str	r2, [sp, #20]
 8018fa2:	2501      	movs	r5, #1
 8018fa4:	9504      	str	r5, [sp, #16]
 8018fa6:	9203      	str	r2, [sp, #12]
 8018fa8:	2308      	movs	r3, #8
 8018faa:	9302      	str	r3, [sp, #8]
 8018fac:	9501      	str	r5, [sp, #4]
 8018fae:	f8cd a000 	str.w	sl, [sp]
 8018fb2:	464b      	mov	r3, r9
 8018fb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018fb6:	4628      	mov	r0, r5
 8018fb8:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8018fba:	4b21      	ldr	r3, [pc, #132]	; (8019040 <RegionAS923TxConfig+0x124>)
 8018fbc:	681a      	ldr	r2, [r3, #0]
 8018fbe:	7823      	ldrb	r3, [r4, #0]
 8018fc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018fc4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8018fc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018fcc:	f002 fb54 	bl	801b678 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018fd0:	89a1      	ldrh	r1, [r4, #12]
 8018fd2:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8018fd6:	f7ff fcb5 	bl	8018944 <GetTimeOnAir>
 8018fda:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018fde:	4b1a      	ldr	r3, [pc, #104]	; (8019048 <RegionAS923TxConfig+0x12c>)
 8018fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018fe2:	7b21      	ldrb	r1, [r4, #12]
 8018fe4:	4628      	mov	r0, r5
 8018fe6:	4798      	blx	r3

    *txPower = txPowerLimited;
 8018fe8:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_AS923 */
}
 8018fea:	2001      	movs	r0, #1
 8018fec:	b00d      	add	sp, #52	; 0x34
 8018fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8018ff2:	4b15      	ldr	r3, [pc, #84]	; (8019048 <RegionAS923TxConfig+0x12c>)
 8018ff4:	69dd      	ldr	r5, [r3, #28]
 8018ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018ffa:	fb03 f30a 	mul.w	r3, r3, sl
 8018ffe:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8019002:	9208      	str	r2, [sp, #32]
 8019004:	f04f 0b00 	mov.w	fp, #0
 8019008:	f8cd b01c 	str.w	fp, [sp, #28]
 801900c:	f8cd b018 	str.w	fp, [sp, #24]
 8019010:	f8cd b014 	str.w	fp, [sp, #20]
 8019014:	2201      	movs	r2, #1
 8019016:	9204      	str	r2, [sp, #16]
 8019018:	f8cd b00c 	str.w	fp, [sp, #12]
 801901c:	2205      	movs	r2, #5
 801901e:	9202      	str	r2, [sp, #8]
 8019020:	f8cd b004 	str.w	fp, [sp, #4]
 8019024:	9300      	str	r3, [sp, #0]
 8019026:	464b      	mov	r3, r9
 8019028:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801902c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801902e:	4658      	mov	r0, fp
 8019030:	47a8      	blx	r5
        modem = MODEM_FSK;
 8019032:	465d      	mov	r5, fp
 8019034:	e7c1      	b.n	8018fba <RegionAS923TxConfig+0x9e>
 8019036:	bf00      	nop
 8019038:	0802830c 	.word	0x0802830c
 801903c:	20001b60 	.word	0x20001b60
 8019040:	20001b64 	.word	0x20001b64
 8019044:	080282ec 	.word	0x080282ec
 8019048:	08028984 	.word	0x08028984

0801904c <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801904c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019050:	b08f      	sub	sp, #60	; 0x3c
 8019052:	4607      	mov	r7, r0
 8019054:	468b      	mov	fp, r1
 8019056:	4692      	mov	sl, r2
 8019058:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801905a:	2500      	movs	r5, #0
 801905c:	950c      	str	r5, [sp, #48]	; 0x30
 801905e:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 8019062:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 8019066:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801906a:	e02d      	b.n	80190c8 <RegionAS923LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 801906c:	2400      	movs	r4, #0
        status = 0x07;
 801906e:	f04f 0807 	mov.w	r8, #7
 8019072:	e00f      	b.n	8019094 <RegionAS923LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8019074:	4a56      	ldr	r2, [pc, #344]	; (80191d0 <RegionAS923LinkAdrReq+0x184>)
 8019076:	6812      	ldr	r2, [r2, #0]
 8019078:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801907c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8019080:	b132      	cbz	r2, 8019090 <RegionAS923LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 8019082:	2201      	movs	r2, #1
 8019084:	40a2      	lsls	r2, r4
 8019086:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801908a:	430a      	orrs	r2, r1
 801908c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8019090:	3401      	adds	r4, #1
 8019092:	b2e4      	uxtb	r4, r4
 8019094:	2c0f      	cmp	r4, #15
 8019096:	d817      	bhi.n	80190c8 <RegionAS923LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 8019098:	2b06      	cmp	r3, #6
 801909a:	d0eb      	beq.n	8019074 <RegionAS923LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801909c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 80190a0:	4126      	asrs	r6, r4
 80190a2:	f016 0f01 	tst.w	r6, #1
 80190a6:	d0f3      	beq.n	8019090 <RegionAS923LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80190a8:	4a49      	ldr	r2, [pc, #292]	; (80191d0 <RegionAS923LinkAdrReq+0x184>)
 80190aa:	6812      	ldr	r2, [r2, #0]
 80190ac:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80190b0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80190b4:	2a00      	cmp	r2, #0
 80190b6:	d1eb      	bne.n	8019090 <RegionAS923LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80190b8:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 80190bc:	e7e8      	b.n	8019090 <RegionAS923LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 80190be:	f04f 0806 	mov.w	r8, #6
 80190c2:	e001      	b.n	80190c8 <RegionAS923LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 80190c4:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80190c8:	7a3b      	ldrb	r3, [r7, #8]
 80190ca:	42ab      	cmp	r3, r5
 80190cc:	d919      	bls.n	8019102 <RegionAS923LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80190ce:	6878      	ldr	r0, [r7, #4]
 80190d0:	a90c      	add	r1, sp, #48	; 0x30
 80190d2:	4428      	add	r0, r5
 80190d4:	f002 f8f6 	bl	801b2c4 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 80190d8:	b198      	cbz	r0, 8019102 <RegionAS923LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 80190da:	4405      	add	r5, r0
 80190dc:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 80190de:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80190e2:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80190e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80190ea:	b90b      	cbnz	r3, 80190f0 <RegionAS923LinkAdrReq+0xa4>
 80190ec:	2a00      	cmp	r2, #0
 80190ee:	d0e6      	beq.n	80190be <RegionAS923LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80190f0:	1e5a      	subs	r2, r3, #1
 80190f2:	b2d2      	uxtb	r2, r2
 80190f4:	2a04      	cmp	r2, #4
 80190f6:	d9e5      	bls.n	80190c4 <RegionAS923LinkAdrReq+0x78>
 80190f8:	2b06      	cmp	r3, #6
 80190fa:	d9b7      	bls.n	801906c <RegionAS923LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 80190fc:	f04f 0806 	mov.w	r8, #6
 8019100:	e7e2      	b.n	80190c8 <RegionAS923LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8019102:	2302      	movs	r3, #2
 8019104:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8019108:	7a7b      	ldrb	r3, [r7, #9]
 801910a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionAS923GetPhyParam( &getPhy );
 801910e:	a80a      	add	r0, sp, #40	; 0x28
 8019110:	f7ff fc4a 	bl	80189a8 <RegionAS923GetPhyParam>

    linkAdrVerifyParams.Status = status;
 8019114:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8019118:	7abb      	ldrb	r3, [r7, #10]
 801911a:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801911e:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8019122:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019126:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801912a:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801912e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8019132:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019136:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801913a:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801913e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8019142:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019146:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801914a:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 801914e:	2310      	movs	r3, #16
 8019150:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8019154:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8019158:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801915a:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 801915e:	2307      	movs	r3, #7
 8019160:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019164:	4a1a      	ldr	r2, [pc, #104]	; (80191d0 <RegionAS923LinkAdrReq+0x184>)
 8019166:	6812      	ldr	r2, [r2, #0]
 8019168:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 801916a:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 801916e:	2300      	movs	r3, #0
 8019170:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019174:	683b      	ldr	r3, [r7, #0]
 8019176:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019178:	ab0c      	add	r3, sp, #48	; 0x30
 801917a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801917e:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 8019182:	a801      	add	r0, sp, #4
 8019184:	f002 f8ba 	bl	801b2fc <RegionCommonLinkAdrReqVerifyParams>
 8019188:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801918a:	2807      	cmp	r0, #7
 801918c:	d011      	beq.n	80191b2 <RegionAS923LinkAdrReq+0x166>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801918e:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8019192:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 8019196:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801919a:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 801919e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80191a2:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 80191a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80191a8:	701d      	strb	r5, [r3, #0]

#endif /* REGION_AS923 */
    return status;
}
 80191aa:	4620      	mov	r0, r4
 80191ac:	b00f      	add	sp, #60	; 0x3c
 80191ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80191b2:	4e07      	ldr	r6, [pc, #28]	; (80191d0 <RegionAS923LinkAdrReq+0x184>)
 80191b4:	6830      	ldr	r0, [r6, #0]
 80191b6:	220c      	movs	r2, #12
 80191b8:	2100      	movs	r1, #0
 80191ba:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80191be:	f006 fe98 	bl	801fef2 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80191c2:	6833      	ldr	r3, [r6, #0]
 80191c4:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80191c8:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 80191cc:	e7df      	b.n	801918e <RegionAS923LinkAdrReq+0x142>
 80191ce:	bf00      	nop
 80191d0:	20001b64 	.word	0x20001b64

080191d4 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80191d4:	b538      	push	{r3, r4, r5, lr}
 80191d6:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80191d8:	6840      	ldr	r0, [r0, #4]
 80191da:	f7ff fb9f 	bl	801891c <VerifyRfFreq>
 80191de:	b1a0      	cbz	r0, 801920a <RegionAS923RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 80191e0:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 80191e2:	2207      	movs	r2, #7
 80191e4:	2100      	movs	r1, #0
 80191e6:	f994 0000 	ldrsb.w	r0, [r4]
 80191ea:	f001 ff48 	bl	801b07e <RegionCommonValueInRange>
 80191ee:	b908      	cbnz	r0, 80191f4 <RegionAS923RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 80191f0:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 80191f4:	2207      	movs	r2, #7
 80191f6:	2100      	movs	r1, #0
 80191f8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80191fc:	f001 ff3f 	bl	801b07e <RegionCommonValueInRange>
 8019200:	b908      	cbnz	r0, 8019206 <RegionAS923RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019202:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_AS923 */
    return status;
}
 8019206:	4628      	mov	r0, r5
 8019208:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 801920a:	2506      	movs	r5, #6
 801920c:	e7e9      	b.n	80191e2 <RegionAS923RxParamSetupReq+0xe>

0801920e <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 801920e:	2000      	movs	r0, #0
 8019210:	4770      	bx	lr
	...

08019214 <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019214:	b510      	push	{r4, lr}
 8019216:	4604      	mov	r4, r0
    uint8_t status = 0x03;

#if defined( REGION_AS923 )
    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8019218:	6840      	ldr	r0, [r0, #4]
 801921a:	f7ff fb7f 	bl	801891c <VerifyRfFreq>
 801921e:	b170      	cbz	r0, 801923e <RegionAS923DlChannelReq+0x2a>
    uint8_t status = 0x03;
 8019220:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8019222:	4b0b      	ldr	r3, [pc, #44]	; (8019250 <RegionAS923DlChannelReq+0x3c>)
 8019224:	681a      	ldr	r2, [r3, #0]
 8019226:	7823      	ldrb	r3, [r4, #0]
 8019228:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801922c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8019230:	b909      	cbnz	r1, 8019236 <RegionAS923DlChannelReq+0x22>
    {
        status &= 0xFD;
 8019232:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8019236:	2803      	cmp	r0, #3
 8019238:	d003      	beq.n	8019242 <RegionAS923DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_AS923 */
    return status;
}
 801923a:	b240      	sxtb	r0, r0
 801923c:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 801923e:	2002      	movs	r0, #2
 8019240:	e7ef      	b.n	8019222 <RegionAS923DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019242:	6861      	ldr	r1, [r4, #4]
 8019244:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019248:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801924c:	6059      	str	r1, [r3, #4]
 801924e:	e7f4      	b.n	801923a <RegionAS923DlChannelReq+0x26>
 8019250:	20001b64 	.word	0x20001b64

08019254 <RegionAS923AlternateDr>:
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
#else
    return -1;
#endif /* REGION_AS923 */
}
 8019254:	2002      	movs	r0, #2
 8019256:	4770      	bx	lr

08019258 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801925a:	b097      	sub	sp, #92	; 0x5c
 801925c:	4604      	mov	r4, r0
 801925e:	460f      	mov	r7, r1
 8019260:	4616      	mov	r6, r2
 8019262:	461d      	mov	r5, r3
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 8019264:	2100      	movs	r1, #0
 8019266:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 801926a:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 801926e:	9111      	str	r1, [sp, #68]	; 0x44
 8019270:	9112      	str	r1, [sp, #72]	; 0x48
 8019272:	9113      	str	r1, [sp, #76]	; 0x4c
 8019274:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 8019276:	2303      	movs	r3, #3
 8019278:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801927c:	4b32      	ldr	r3, [pc, #200]	; (8019348 <RegionAS923NextChannel+0xf0>)
 801927e:	6818      	ldr	r0, [r3, #0]
 8019280:	2201      	movs	r2, #1
 8019282:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8019286:	f001 ff56 	bl	801b136 <RegionCommonCountChannels>
 801928a:	b938      	cbnz	r0, 801929c <RegionAS923NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 801928c:	4b2e      	ldr	r3, [pc, #184]	; (8019348 <RegionAS923NextChannel+0xf0>)
 801928e:	681a      	ldr	r2, [r3, #0]
 8019290:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 8019294:	f043 0303 	orr.w	r3, r3, #3
 8019298:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801929c:	7a63      	ldrb	r3, [r4, #9]
 801929e:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80192a2:	7a23      	ldrb	r3, [r4, #8]
 80192a4:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80192a8:	4b27      	ldr	r3, [pc, #156]	; (8019348 <RegionAS923NextChannel+0xf0>)
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	f503 7258 	add.w	r2, r3, #864	; 0x360
 80192b0:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80192b2:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80192b4:	4b25      	ldr	r3, [pc, #148]	; (801934c <RegionAS923NextChannel+0xf4>)
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 80192ba:	2310      	movs	r3, #16
 80192bc:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 80192c0:	f10d 030a 	add.w	r3, sp, #10
 80192c4:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80192c6:	6823      	ldr	r3, [r4, #0]
 80192c8:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80192ca:	6863      	ldr	r3, [r4, #4]
 80192cc:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80192ce:	7aa3      	ldrb	r3, [r4, #10]
 80192d0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 80192d4:	2301      	movs	r3, #1
 80192d6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80192da:	ab0c      	add	r3, sp, #48	; 0x30
 80192dc:	6921      	ldr	r1, [r4, #16]
 80192de:	68e0      	ldr	r0, [r4, #12]
 80192e0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80192e4:	7d23      	ldrb	r3, [r4, #20]
 80192e6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80192ea:	8ae1      	ldrh	r1, [r4, #22]
 80192ec:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80192f0:	f7ff fb28 	bl	8018944 <GetTimeOnAir>
 80192f4:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80192f6:	ab03      	add	r3, sp, #12
 80192f8:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80192fa:	9601      	str	r6, [sp, #4]
 80192fc:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 8019300:	9300      	str	r3, [sp, #0]
 8019302:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 8019306:	aa11      	add	r2, sp, #68	; 0x44
 8019308:	4629      	mov	r1, r5
 801930a:	a809      	add	r0, sp, #36	; 0x24
 801930c:	f002 f906 	bl	801b51c <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019310:	4604      	mov	r4, r0
 8019312:	b120      	cbz	r0, 801931e <RegionAS923NextChannel+0xc6>
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019314:	280c      	cmp	r0, #12
 8019316:	d00d      	beq.n	8019334 <RegionAS923NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8019318:	4620      	mov	r0, r4
 801931a:	b017      	add	sp, #92	; 0x5c
 801931c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801931e:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 8019322:	3901      	subs	r1, #1
 8019324:	f006 fdc2 	bl	801feac <randr>
 8019328:	ab16      	add	r3, sp, #88	; 0x58
 801932a:	4418      	add	r0, r3
 801932c:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 8019330:	703b      	strb	r3, [r7, #0]
 8019332:	e7f1      	b.n	8019318 <RegionAS923NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8019334:	4b04      	ldr	r3, [pc, #16]	; (8019348 <RegionAS923NextChannel+0xf0>)
 8019336:	681a      	ldr	r2, [r3, #0]
 8019338:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801933c:	f043 0303 	orr.w	r3, r3, #3
 8019340:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 8019344:	e7e8      	b.n	8019318 <RegionAS923NextChannel+0xc0>
 8019346:	bf00      	nop
 8019348:	20001b64 	.word	0x20001b64
 801934c:	20001b60 	.word	0x20001b60

08019350 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_AS923 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8019352:	7905      	ldrb	r5, [r0, #4]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8019354:	2d01      	cmp	r5, #1
 8019356:	d94b      	bls.n	80193f0 <RegionAS923ChannelAdd+0xa0>
 8019358:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 801935a:	2d0f      	cmp	r5, #15
 801935c:	d84a      	bhi.n	80193f4 <RegionAS923ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 801935e:	6803      	ldr	r3, [r0, #0]
 8019360:	7a18      	ldrb	r0, [r3, #8]
 8019362:	f340 0003 	sbfx	r0, r0, #0, #4
 8019366:	2207      	movs	r2, #7
 8019368:	2100      	movs	r1, #0
 801936a:	b240      	sxtb	r0, r0
 801936c:	f001 fe87 	bl	801b07e <RegionCommonValueInRange>
 8019370:	2800      	cmp	r0, #0
 8019372:	d039      	beq.n	80193e8 <RegionAS923ChannelAdd+0x98>
    bool drInvalid = false;
 8019374:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8019376:	6823      	ldr	r3, [r4, #0]
 8019378:	7a18      	ldrb	r0, [r3, #8]
 801937a:	f340 1003 	sbfx	r0, r0, #4, #4
 801937e:	2207      	movs	r2, #7
 8019380:	2100      	movs	r1, #0
 8019382:	b240      	sxtb	r0, r0
 8019384:	f001 fe7b 	bl	801b07e <RegionCommonValueInRange>
 8019388:	b900      	cbnz	r0, 801938c <RegionAS923ChannelAdd+0x3c>
    {
        drInvalid = true;
 801938a:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801938c:	6821      	ldr	r1, [r4, #0]
 801938e:	7a0b      	ldrb	r3, [r1, #8]
 8019390:	f343 0203 	sbfx	r2, r3, #0, #4
 8019394:	b252      	sxtb	r2, r2
 8019396:	f343 1303 	sbfx	r3, r3, #4, #4
 801939a:	b25b      	sxtb	r3, r3
 801939c:	429a      	cmp	r2, r3
 801939e:	dd00      	ble.n	80193a2 <RegionAS923ChannelAdd+0x52>
    {
        drInvalid = true;
 80193a0:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 80193a2:	6808      	ldr	r0, [r1, #0]
 80193a4:	f7ff faba 	bl	801891c <VerifyRfFreq>
 80193a8:	b300      	cbz	r0, 80193ec <RegionAS923ChannelAdd+0x9c>
    bool freqInvalid = false;
 80193aa:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80193ac:	b106      	cbz	r6, 80193b0 <RegionAS923ChannelAdd+0x60>
 80193ae:	bb1b      	cbnz	r3, 80193f8 <RegionAS923ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 80193b0:	bb26      	cbnz	r6, 80193fc <RegionAS923ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 80193b2:	bb2b      	cbnz	r3, 8019400 <RegionAS923ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80193b4:	4f13      	ldr	r7, [pc, #76]	; (8019404 <RegionAS923ChannelAdd+0xb4>)
 80193b6:	683b      	ldr	r3, [r7, #0]
 80193b8:	006e      	lsls	r6, r5, #1
 80193ba:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80193be:	220c      	movs	r2, #12
 80193c0:	6821      	ldr	r1, [r4, #0]
 80193c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80193c6:	f006 fd7e 	bl	801fec6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 80193ca:	683a      	ldr	r2, [r7, #0]
 80193cc:	442e      	add	r6, r5
 80193ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80193d2:	2000      	movs	r0, #0
 80193d4:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80193d6:	2301      	movs	r3, #1
 80193d8:	fa03 f505 	lsl.w	r5, r3, r5
 80193dc:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 80193e0:	431d      	orrs	r5, r3
 80193e2:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 80193e6:	e006      	b.n	80193f6 <RegionAS923ChannelAdd+0xa6>
        drInvalid = true;
 80193e8:	2601      	movs	r6, #1
 80193ea:	e7c4      	b.n	8019376 <RegionAS923ChannelAdd+0x26>
            freqInvalid = true;
 80193ec:	2301      	movs	r3, #1
 80193ee:	e7dd      	b.n	80193ac <RegionAS923ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80193f0:	2006      	movs	r0, #6
 80193f2:	e000      	b.n	80193f6 <RegionAS923ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80193f4:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 80193f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80193f8:	2006      	movs	r0, #6
 80193fa:	e7fc      	b.n	80193f6 <RegionAS923ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 80193fc:	2005      	movs	r0, #5
 80193fe:	e7fa      	b.n	80193f6 <RegionAS923ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019400:	2004      	movs	r0, #4
 8019402:	e7f8      	b.n	80193f6 <RegionAS923ChannelAdd+0xa6>
 8019404:	20001b64 	.word	0x20001b64

08019408 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 8019408:	7801      	ldrb	r1, [r0, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 801940a:	2901      	cmp	r1, #1
 801940c:	d911      	bls.n	8019432 <RegionAS923ChannelsRemove+0x2a>
{
 801940e:	b510      	push	{r4, lr}
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019410:	4b09      	ldr	r3, [pc, #36]	; (8019438 <RegionAS923ChannelsRemove+0x30>)
 8019412:	6818      	ldr	r0, [r3, #0]
 8019414:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8019418:	009c      	lsls	r4, r3, #2
 801941a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801941e:	2200      	movs	r2, #0
 8019420:	5102      	str	r2, [r0, r4]
 8019422:	605a      	str	r2, [r3, #4]
 8019424:	609a      	str	r2, [r3, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 8019426:	2210      	movs	r2, #16
 8019428:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801942c:	f001 fe69 	bl	801b102 <RegionCommonChanDisable>
#else
    return false;
#endif /* REGION_AS923 */
}
 8019430:	bd10      	pop	{r4, pc}
        return false;
 8019432:	2000      	movs	r0, #0
}
 8019434:	4770      	bx	lr
 8019436:	bf00      	nop
 8019438:	20001b64 	.word	0x20001b64

0801943c <RegionAS923ApplyCFList>:
{
 801943c:	b570      	push	{r4, r5, r6, lr}
 801943e:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8019440:	2350      	movs	r3, #80	; 0x50
 8019442:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 8019446:	7903      	ldrb	r3, [r0, #4]
 8019448:	2b10      	cmp	r3, #16
 801944a:	d135      	bne.n	80194b8 <RegionAS923ApplyCFList+0x7c>
 801944c:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 801944e:	6803      	ldr	r3, [r0, #0]
 8019450:	7bdd      	ldrb	r5, [r3, #15]
 8019452:	2d00      	cmp	r5, #0
 8019454:	d130      	bne.n	80194b8 <RegionAS923ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8019456:	2402      	movs	r4, #2
 8019458:	e01a      	b.n	8019490 <RegionAS923ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801945a:	6832      	ldr	r2, [r6, #0]
 801945c:	5d53      	ldrb	r3, [r2, r5]
 801945e:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8019460:	442a      	add	r2, r5
 8019462:	7851      	ldrb	r1, [r2, #1]
 8019464:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8019468:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801946a:	7892      	ldrb	r2, [r2, #2]
 801946c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 8019470:	2264      	movs	r2, #100	; 0x64
 8019472:	fb02 f303 	mul.w	r3, r2, r3
 8019476:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 8019478:	2300      	movs	r3, #0
 801947a:	9304      	str	r3, [sp, #16]
 801947c:	e011      	b.n	80194a2 <RegionAS923ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 801947e:	f88d 4000 	strb.w	r4, [sp]
            RegionAS923ChannelsRemove( &channelRemove );
 8019482:	4668      	mov	r0, sp
 8019484:	f7ff ffc0 	bl	8019408 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8019488:	3503      	adds	r5, #3
 801948a:	b2ed      	uxtb	r5, r5
 801948c:	3401      	adds	r4, #1
 801948e:	b2e4      	uxtb	r4, r4
 8019490:	2c0f      	cmp	r4, #15
 8019492:	d811      	bhi.n	80194b8 <RegionAS923ApplyCFList+0x7c>
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 8019494:	2c06      	cmp	r4, #6
 8019496:	d9e0      	bls.n	801945a <RegionAS923ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 8019498:	2300      	movs	r3, #0
 801949a:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 801949c:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 80194a0:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 80194a2:	9b03      	ldr	r3, [sp, #12]
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d0ea      	beq.n	801947e <RegionAS923ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 80194a8:	ab03      	add	r3, sp, #12
 80194aa:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 80194ac:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionAS923ChannelAdd( &channelAdd );
 80194b0:	a801      	add	r0, sp, #4
 80194b2:	f7ff ff4d 	bl	8019350 <RegionAS923ChannelAdd>
 80194b6:	e7e7      	b.n	8019488 <RegionAS923ApplyCFList+0x4c>
}
 80194b8:	b006      	add	sp, #24
 80194ba:	bd70      	pop	{r4, r5, r6, pc}

080194bc <RegionAS923NewChannelReq>:
{
 80194bc:	b500      	push	{lr}
 80194be:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 80194c0:	6803      	ldr	r3, [r0, #0]
 80194c2:	681a      	ldr	r2, [r3, #0]
 80194c4:	b952      	cbnz	r2, 80194dc <RegionAS923NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80194c6:	7903      	ldrb	r3, [r0, #4]
 80194c8:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 80194cc:	a801      	add	r0, sp, #4
 80194ce:	f7ff ff9b 	bl	8019408 <RegionAS923ChannelsRemove>
 80194d2:	b1d0      	cbz	r0, 801950a <RegionAS923NewChannelReq+0x4e>
    uint8_t status = 0x03;
 80194d4:	2003      	movs	r0, #3
}
 80194d6:	b005      	add	sp, #20
 80194d8:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80194dc:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80194de:	7903      	ldrb	r3, [r0, #4]
 80194e0:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 80194e4:	a802      	add	r0, sp, #8
 80194e6:	f7ff ff33 	bl	8019350 <RegionAS923ChannelAdd>
 80194ea:	2806      	cmp	r0, #6
 80194ec:	d80b      	bhi.n	8019506 <RegionAS923NewChannelReq+0x4a>
 80194ee:	e8df f000 	tbb	[pc, r0]
 80194f2:	0a04      	.short	0x0a04
 80194f4:	060e0a0a 	.word	0x060e0a0a
 80194f8:	08          	.byte	0x08
 80194f9:	00          	.byte	0x00
 80194fa:	2003      	movs	r0, #3
 80194fc:	e7eb      	b.n	80194d6 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFD;
 80194fe:	2001      	movs	r0, #1
                break;
 8019500:	e7e9      	b.n	80194d6 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 8019502:	2000      	movs	r0, #0
                break;
 8019504:	e7e7      	b.n	80194d6 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 8019506:	2000      	movs	r0, #0
                break;
 8019508:	e7e5      	b.n	80194d6 <RegionAS923NewChannelReq+0x1a>
            status &= 0xFC;
 801950a:	2000      	movs	r0, #0
 801950c:	e7e3      	b.n	80194d6 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFE;
 801950e:	2002      	movs	r0, #2
 8019510:	e7e1      	b.n	80194d6 <RegionAS923NewChannelReq+0x1a>
	...

08019514 <RegionAS923SetContinuousWave>:

void RegionAS923SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019514:	b538      	push	{r3, r4, r5, lr}
 8019516:	4604      	mov	r4, r0
#if defined( REGION_AS923 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8019518:	4b12      	ldr	r3, [pc, #72]	; (8019564 <RegionAS923SetContinuousWave+0x50>)
 801951a:	6819      	ldr	r1, [r3, #0]
 801951c:	4d12      	ldr	r5, [pc, #72]	; (8019568 <RegionAS923SetContinuousWave+0x54>)
 801951e:	682b      	ldr	r3, [r5, #0]
 8019520:	7802      	ldrb	r2, [r0, #0]
 8019522:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019526:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801952a:	7a53      	ldrb	r3, [r2, #9]
 801952c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019530:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8019534:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8019538:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801953c:	f002 f855 	bl	801b5ea <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8019540:	682a      	ldr	r2, [r5, #0]
 8019542:	7823      	ldrb	r3, [r4, #0]
 8019544:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019548:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801954c:	68a2      	ldr	r2, [r4, #8]
 801954e:	6861      	ldr	r1, [r4, #4]
 8019550:	f001 ff68 	bl	801b424 <RegionCommonComputeTxPower>
 8019554:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8019556:	4b05      	ldr	r3, [pc, #20]	; (801956c <RegionAS923SetContinuousWave+0x58>)
 8019558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801955a:	89a2      	ldrh	r2, [r4, #12]
 801955c:	4628      	mov	r0, r5
 801955e:	4798      	blx	r3
#endif /* REGION_AS923 */
}
 8019560:	bd38      	pop	{r3, r4, r5, pc}
 8019562:	bf00      	nop
 8019564:	20001b60 	.word	0x20001b60
 8019568:	20001b64 	.word	0x20001b64
 801956c:	08028984 	.word	0x08028984

08019570 <RegionAS923ApplyDrOffset>:
#if defined( REGION_AS923 )
    // Initialize minDr for a downlink dwell time configuration of 0
    int8_t minDr = DR_0;

    // Update the minDR for a downlink dwell time configuration of 1
    if( downlinkDwellTime == 1 )
 8019570:	2801      	cmp	r0, #1
 8019572:	d00b      	beq.n	801958c <RegionAS923ApplyDrOffset+0x1c>
    int8_t minDr = DR_0;
 8019574:	2000      	movs	r0, #0
    {
        minDr = AS923_DWELL_LIMIT_DATARATE;
    }

    // Apply offset formula
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 8019576:	4b06      	ldr	r3, [pc, #24]	; (8019590 <RegionAS923ApplyDrOffset+0x20>)
 8019578:	569b      	ldrsb	r3, [r3, r2]
 801957a:	1ac9      	subs	r1, r1, r3
 801957c:	4288      	cmp	r0, r1
 801957e:	bfb8      	it	lt
 8019580:	4608      	movlt	r0, r1
 8019582:	2805      	cmp	r0, #5
 8019584:	bfa8      	it	ge
 8019586:	2005      	movge	r0, #5
#else
    return 0;
#endif /* REGION_AS923 */

}
 8019588:	b2c0      	uxtb	r0, r0
 801958a:	4770      	bx	lr
        minDr = AS923_DWELL_LIMIT_DATARATE;
 801958c:	2002      	movs	r0, #2
 801958e:	e7f2      	b.n	8019576 <RegionAS923ApplyDrOffset+0x6>
 8019590:	08028314 	.word	0x08028314

08019594 <VerifyRfFreq>:
 */
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

static bool VerifyRfFreq( uint32_t freq )
{
 8019594:	b510      	push	{r4, lr}
 8019596:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8019598:	4b10      	ldr	r3, [pc, #64]	; (80195dc <VerifyRfFreq+0x48>)
 801959a:	6a1b      	ldr	r3, [r3, #32]
 801959c:	4798      	blx	r3
 801959e:	b1c8      	cbz	r0, 80195d4 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 80195a0:	4b0f      	ldr	r3, [pc, #60]	; (80195e0 <VerifyRfFreq+0x4c>)
 80195a2:	4423      	add	r3, r4
 80195a4:	4a0f      	ldr	r2, [pc, #60]	; (80195e4 <VerifyRfFreq+0x50>)
 80195a6:	4293      	cmp	r3, r2
 80195a8:	d813      	bhi.n	80195d2 <VerifyRfFreq+0x3e>
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) AU915_FIRST_RX1_CHANNEL ) % ( uint32_t ) AU915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 80195aa:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 80195ae:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 80195b2:	f202 7245 	addw	r2, r2, #1861	; 0x745
 80195b6:	fba2 1203 	umull	r1, r2, r2, r3
 80195ba:	0c92      	lsrs	r2, r2, #18
 80195bc:	490a      	ldr	r1, [pc, #40]	; (80195e8 <VerifyRfFreq+0x54>)
 80195be:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 80195c2:	b942      	cbnz	r2, 80195d6 <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 915200000 ) ||  ( freq > 927800000 ) )
 80195c4:	4b09      	ldr	r3, [pc, #36]	; (80195ec <VerifyRfFreq+0x58>)
 80195c6:	4423      	add	r3, r4
 80195c8:	4a09      	ldr	r2, [pc, #36]	; (80195f0 <VerifyRfFreq+0x5c>)
 80195ca:	4293      	cmp	r3, r2
 80195cc:	d902      	bls.n	80195d4 <VerifyRfFreq+0x40>
    {
        return false;
 80195ce:	2000      	movs	r0, #0
 80195d0:	e000      	b.n	80195d4 <VerifyRfFreq+0x40>
        return false;
 80195d2:	2000      	movs	r0, #0
    }
    return true;
}
 80195d4:	bd10      	pop	{r4, pc}
        return false;
 80195d6:	2000      	movs	r0, #0
 80195d8:	e7fc      	b.n	80195d4 <VerifyRfFreq+0x40>
 80195da:	bf00      	nop
 80195dc:	08028984 	.word	0x08028984
 80195e0:	c8f78f60 	.word	0xc8f78f60
 80195e4:	00401640 	.word	0x00401640
 80195e8:	000927c0 	.word	0x000927c0
 80195ec:	c9732800 	.word	0xc9732800
 80195f0:	00c042c0 	.word	0x00c042c0

080195f4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80195f4:	b570      	push	{r4, r5, r6, lr}
 80195f6:	b084      	sub	sp, #16
 80195f8:	460c      	mov	r4, r1
    int8_t phyDr = DataratesAU915[datarate];
 80195fa:	4b0a      	ldr	r3, [pc, #40]	; (8019624 <GetTimeOnAir+0x30>)
 80195fc:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAU915 );
 80195fe:	490a      	ldr	r1, [pc, #40]	; (8019628 <GetTimeOnAir+0x34>)
 8019600:	f001 fff8 	bl	801b5f4 <RegionCommonGetBandwidth>
 8019604:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8019606:	4b09      	ldr	r3, [pc, #36]	; (801962c <GetTimeOnAir+0x38>)
 8019608:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801960a:	2001      	movs	r0, #1
 801960c:	9003      	str	r0, [sp, #12]
 801960e:	b2e4      	uxtb	r4, r4
 8019610:	9402      	str	r4, [sp, #8]
 8019612:	2200      	movs	r2, #0
 8019614:	9201      	str	r2, [sp, #4]
 8019616:	2208      	movs	r2, #8
 8019618:	9200      	str	r2, [sp, #0]
 801961a:	4603      	mov	r3, r0
 801961c:	4632      	mov	r2, r6
 801961e:	47a8      	blx	r5
}
 8019620:	b004      	add	sp, #16
 8019622:	bd70      	pop	{r4, r5, r6, pc}
 8019624:	080283a0 	.word	0x080283a0
 8019628:	08028334 	.word	0x08028334
 801962c:	08028984 	.word	0x08028984

08019630 <RegionAU915GetPhyParam>:
#endif /* REGION_AU915 */

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 8019630:	b500      	push	{lr}
 8019632:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8019634:	2300      	movs	r3, #0
 8019636:	9304      	str	r3, [sp, #16]

#if defined( REGION_AU915 )
    switch( getPhy->Attribute )
 8019638:	7803      	ldrb	r3, [r0, #0]
 801963a:	3b01      	subs	r3, #1
 801963c:	2b38      	cmp	r3, #56	; 0x38
 801963e:	d849      	bhi.n	80196d4 <RegionAU915GetPhyParam+0xa4>
 8019640:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019644:	00410039 	.word	0x00410039
 8019648:	00480048 	.word	0x00480048
 801964c:	00460048 	.word	0x00460048
 8019650:	00480048 	.word	0x00480048
 8019654:	00480048 	.word	0x00480048
 8019658:	00690066 	.word	0x00690066
 801965c:	007a006c 	.word	0x007a006c
 8019660:	00880048 	.word	0x00880048
 8019664:	0090008c 	.word	0x0090008c
 8019668:	00980094 	.word	0x00980094
 801966c:	00a0009c 	.word	0x00a0009c
 8019670:	00a90048 	.word	0x00a90048
 8019674:	00af00ac 	.word	0x00af00ac
 8019678:	00bb00b5 	.word	0x00bb00b5
 801967c:	00c200be 	.word	0x00c200be
 8019680:	00c50048 	.word	0x00c50048
 8019684:	004c00c8 	.word	0x004c00c8
 8019688:	00480048 	.word	0x00480048
 801968c:	00480048 	.word	0x00480048
 8019690:	00480048 	.word	0x00480048
 8019694:	00480048 	.word	0x00480048
 8019698:	00480048 	.word	0x00480048
 801969c:	00480048 	.word	0x00480048
 80196a0:	00cb0048 	.word	0x00cb0048
 80196a4:	00dc00d2 	.word	0x00dc00d2
 80196a8:	004800df 	.word	0x004800df
 80196ac:	00e900e2 	.word	0x00e900e2
 80196b0:	00ef00ec 	.word	0x00ef00ec
 80196b4:	00f5      	.short	0x00f5
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 80196b6:	78c3      	ldrb	r3, [r0, #3]
 80196b8:	b913      	cbnz	r3, 80196c0 <RegionAU915GetPhyParam+0x90>
            {
                phyParam.Value = AU915_RX_MIN_DATARATE;
 80196ba:	2308      	movs	r3, #8
 80196bc:	9304      	str	r3, [sp, #16]
 80196be:	e009      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            }
            else
            {
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
 80196c0:	2302      	movs	r3, #2
 80196c2:	9304      	str	r3, [sp, #16]
 80196c4:	e006      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            }
            break;
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0)
 80196c6:	7883      	ldrb	r3, [r0, #2]
 80196c8:	b123      	cbz	r3, 80196d4 <RegionAU915GetPhyParam+0xa4>
            {
                phyParam.Value = AU915_TX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
 80196ca:	2302      	movs	r3, #2
 80196cc:	9304      	str	r3, [sp, #16]
 80196ce:	e001      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            }
            break;
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AU915_DEFAULT_DATARATE;
 80196d0:	2302      	movs	r3, #2
 80196d2:	9304      	str	r3, [sp, #16]
        }
    }

#endif /* REGION_AU915 */
    return phyParam;
}
 80196d4:	9804      	ldr	r0, [sp, #16]
 80196d6:	b007      	add	sp, #28
 80196d8:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 80196dc:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80196e0:	f88d 3004 	strb.w	r3, [sp, #4]
 80196e4:	2306      	movs	r3, #6
 80196e6:	f88d 3005 	strb.w	r3, [sp, #5]
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AU915_TX_MIN_DATARATE : AU915_DWELL_LIMIT_DATARATE ),
 80196ea:	7883      	ldrb	r3, [r0, #2]
 80196ec:	b103      	cbz	r3, 80196f0 <RegionAU915GetPhyParam+0xc0>
 80196ee:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80196f0:	f88d 3006 	strb.w	r3, [sp, #6]
 80196f4:	2348      	movs	r3, #72	; 0x48
 80196f6:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80196fa:	4b50      	ldr	r3, [pc, #320]	; (801983c <RegionAU915GetPhyParam+0x20c>)
 80196fc:	681b      	ldr	r3, [r3, #0]
 80196fe:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8019702:	9202      	str	r2, [sp, #8]
 8019704:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8019706:	a801      	add	r0, sp, #4
 8019708:	f001 ff50 	bl	801b5ac <RegionCommonGetNextLowerTxDr>
 801970c:	9004      	str	r0, [sp, #16]
            break;
 801970e:	e7e1      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8019710:	2340      	movs	r3, #64	; 0x40
 8019712:	9304      	str	r3, [sp, #16]
            break;
 8019714:	e7de      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8019716:	2320      	movs	r3, #32
 8019718:	9304      	str	r3, [sp, #16]
            break;
 801971a:	e7db      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            if( getPhy->UplinkDwellTime == 0 )
 801971c:	7883      	ldrb	r3, [r0, #2]
 801971e:	b92b      	cbnz	r3, 801972c <RegionAU915GetPhyParam+0xfc>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 8019720:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8019724:	4a46      	ldr	r2, [pc, #280]	; (8019840 <RegionAU915GetPhyParam+0x210>)
 8019726:	5cd3      	ldrb	r3, [r2, r3]
 8019728:	9304      	str	r3, [sp, #16]
 801972a:	e7d3      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 801972c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8019730:	4a44      	ldr	r2, [pc, #272]	; (8019844 <RegionAU915GetPhyParam+0x214>)
 8019732:	5cd3      	ldrb	r3, [r2, r3]
 8019734:	9304      	str	r3, [sp, #16]
 8019736:	e7cd      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            if( getPhy->UplinkDwellTime == 0)
 8019738:	7883      	ldrb	r3, [r0, #2]
 801973a:	b92b      	cbnz	r3, 8019748 <RegionAU915GetPhyParam+0x118>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 801973c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8019740:	4a41      	ldr	r2, [pc, #260]	; (8019848 <RegionAU915GetPhyParam+0x218>)
 8019742:	5cd3      	ldrb	r3, [r2, r3]
 8019744:	9304      	str	r3, [sp, #16]
 8019746:	e7c5      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 8019748:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801974c:	4a3f      	ldr	r2, [pc, #252]	; (801984c <RegionAU915GetPhyParam+0x21c>)
 801974e:	5cd3      	ldrb	r3, [r2, r3]
 8019750:	9304      	str	r3, [sp, #16]
 8019752:	e7bf      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_MAX_RX_WINDOW;
 8019754:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8019758:	9304      	str	r3, [sp, #16]
            break;
 801975a:	e7bb      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801975c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019760:	9304      	str	r3, [sp, #16]
            break;
 8019762:	e7b7      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8019764:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8019768:	9304      	str	r3, [sp, #16]
            break;
 801976a:	e7b3      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801976c:	f241 3388 	movw	r3, #5000	; 0x1388
 8019770:	9304      	str	r3, [sp, #16]
            break;
 8019772:	e7af      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8019774:	f241 7370 	movw	r3, #6000	; 0x1770
 8019778:	9304      	str	r3, [sp, #16]
            break;
 801977a:	e7ab      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801977c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8019780:	9304      	str	r3, [sp, #16]
            break;
 8019782:	e7a7      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8019784:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8019788:	4831      	ldr	r0, [pc, #196]	; (8019850 <RegionAU915GetPhyParam+0x220>)
 801978a:	f006 fb8f 	bl	801feac <randr>
 801978e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8019792:	9004      	str	r0, [sp, #16]
            break;
 8019794:	e79e      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_RX_WND_2_FREQ;
 8019796:	4b2f      	ldr	r3, [pc, #188]	; (8019854 <RegionAU915GetPhyParam+0x224>)
 8019798:	9304      	str	r3, [sp, #16]
            break;
 801979a:	e79b      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_RX_WND_2_DR;
 801979c:	2308      	movs	r3, #8
 801979e:	9304      	str	r3, [sp, #16]
            break;
 80197a0:	e798      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80197a2:	4b26      	ldr	r3, [pc, #152]	; (801983c <RegionAU915GetPhyParam+0x20c>)
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80197aa:	9304      	str	r3, [sp, #16]
            break;
 80197ac:	e792      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80197ae:	4b23      	ldr	r3, [pc, #140]	; (801983c <RegionAU915GetPhyParam+0x20c>)
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80197b6:	9304      	str	r3, [sp, #16]
            break;
 80197b8:	e78c      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 80197ba:	2348      	movs	r3, #72	; 0x48
 80197bc:	9304      	str	r3, [sp, #16]
            break;
 80197be:	e789      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Channels = RegionNvmGroup2->Channels;
 80197c0:	4b1e      	ldr	r3, [pc, #120]	; (801983c <RegionAU915GetPhyParam+0x20c>)
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	9304      	str	r3, [sp, #16]
            break;
 80197c6:	e785      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_DEFAULT_UPLINK_DWELL_TIME;
 80197c8:	2301      	movs	r3, #1
 80197ca:	9304      	str	r3, [sp, #16]
            break;
 80197cc:	e782      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 80197ce:	4b22      	ldr	r3, [pc, #136]	; (8019858 <RegionAU915GetPhyParam+0x228>)
 80197d0:	9304      	str	r3, [sp, #16]
            break;
 80197d2:	e77f      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 80197d4:	4b21      	ldr	r3, [pc, #132]	; (801985c <RegionAU915GetPhyParam+0x22c>)
 80197d6:	9304      	str	r3, [sp, #16]
            break;
 80197d8:	e77c      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80197da:	4a21      	ldr	r2, [pc, #132]	; (8019860 <RegionAU915GetPhyParam+0x230>)
 80197dc:	491d      	ldr	r1, [pc, #116]	; (8019854 <RegionAU915GetPhyParam+0x224>)
 80197de:	7900      	ldrb	r0, [r0, #4]
 80197e0:	f000 fdb1 	bl	801a346 <RegionBaseUSCalcDownlinkFrequency>
 80197e4:	9004      	str	r0, [sp, #16]
            break;
 80197e6:	e775      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 80197e8:	2313      	movs	r3, #19
 80197ea:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = AU915_RFU1_SIZE;
 80197ee:	2303      	movs	r3, #3
 80197f0:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = AU915_RFU2_SIZE;
 80197f4:	2301      	movs	r3, #1
 80197f6:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 80197fa:	e76b      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_BEACON_CHANNEL_DR;
 80197fc:	2308      	movs	r3, #8
 80197fe:	9304      	str	r3, [sp, #16]
            break;
 8019800:	e768      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_BEACON_NB_CHANNELS;
 8019802:	2308      	movs	r3, #8
 8019804:	9304      	str	r3, [sp, #16]
            break;
 8019806:	e765      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8019808:	4a15      	ldr	r2, [pc, #84]	; (8019860 <RegionAU915GetPhyParam+0x230>)
 801980a:	4912      	ldr	r1, [pc, #72]	; (8019854 <RegionAU915GetPhyParam+0x224>)
 801980c:	7900      	ldrb	r0, [r0, #4]
 801980e:	f000 fd9a 	bl	801a346 <RegionBaseUSCalcDownlinkFrequency>
 8019812:	9004      	str	r0, [sp, #16]
            break;
 8019814:	e75e      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_PING_SLOT_CHANNEL_DR;
 8019816:	2308      	movs	r3, #8
 8019818:	9304      	str	r3, [sp, #16]
            break;
 801981a:	e75b      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_BEACON_NB_CHANNELS;
 801981c:	2308      	movs	r3, #8
 801981e:	9304      	str	r3, [sp, #16]
            break;
 8019820:	e758      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 8019822:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8019826:	4a0f      	ldr	r2, [pc, #60]	; (8019864 <RegionAU915GetPhyParam+0x234>)
 8019828:	5cd3      	ldrb	r3, [r2, r3]
 801982a:	9304      	str	r3, [sp, #16]
            break;
 801982c:	e752      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAU915 );
 801982e:	490e      	ldr	r1, [pc, #56]	; (8019868 <RegionAU915GetPhyParam+0x238>)
 8019830:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8019834:	f001 fede 	bl	801b5f4 <RegionCommonGetBandwidth>
 8019838:	9004      	str	r0, [sp, #16]
            break;
 801983a:	e74b      	b.n	80196d4 <RegionAU915GetPhyParam+0xa4>
 801983c:	20001b6c 	.word	0x20001b6c
 8019840:	080283b0 	.word	0x080283b0
 8019844:	080283c0 	.word	0x080283c0
 8019848:	080283d0 	.word	0x080283d0
 801984c:	080283e0 	.word	0x080283e0
 8019850:	fffffc18 	.word	0xfffffc18
 8019854:	370870a0 	.word	0x370870a0
 8019858:	41f00000 	.word	0x41f00000
 801985c:	4009999a 	.word	0x4009999a
 8019860:	000927c0 	.word	0x000927c0
 8019864:	080283a0 	.word	0x080283a0
 8019868:	08028334 	.word	0x08028334

0801986c <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801986c:	b530      	push	{r4, r5, lr}
 801986e:	b083      	sub	sp, #12
#if defined( REGION_AU915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8019870:	4b0b      	ldr	r3, [pc, #44]	; (80198a0 <RegionAU915SetBandTxDone+0x34>)
 8019872:	681d      	ldr	r5, [r3, #0]
 8019874:	4b0b      	ldr	r3, [pc, #44]	; (80198a4 <RegionAU915SetBandTxDone+0x38>)
 8019876:	681a      	ldr	r2, [r3, #0]
 8019878:	7803      	ldrb	r3, [r0, #0]
 801987a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801987e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019882:	7a5b      	ldrb	r3, [r3, #9]
 8019884:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8019888:	6903      	ldr	r3, [r0, #16]
 801988a:	9300      	str	r3, [sp, #0]
 801988c:	68c3      	ldr	r3, [r0, #12]
 801988e:	7842      	ldrb	r2, [r0, #1]
 8019890:	6881      	ldr	r1, [r0, #8]
 8019892:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 8019896:	f001 fc75 	bl	801b184 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_AU915 */
}
 801989a:	b003      	add	sp, #12
 801989c:	bd30      	pop	{r4, r5, pc}
 801989e:	bf00      	nop
 80198a0:	20001b68 	.word	0x20001b68
 80198a4:	20001b6c 	.word	0x20001b6c

080198a8 <RegionAU915InitDefaults>:

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
 80198a8:	b510      	push	{r4, lr}
 80198aa:	b086      	sub	sp, #24
#if defined( REGION_AU915 )
    Band_t bands[AU915_MAX_NB_BANDS] =
 80198ac:	2301      	movs	r3, #1
 80198ae:	f8ad 3000 	strh.w	r3, [sp]
 80198b2:	2300      	movs	r3, #0
 80198b4:	f88d 3002 	strb.w	r3, [sp, #2]
 80198b8:	9301      	str	r3, [sp, #4]
 80198ba:	9302      	str	r3, [sp, #8]
 80198bc:	9303      	str	r3, [sp, #12]
 80198be:	9304      	str	r3, [sp, #16]
 80198c0:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        AU915_BAND0
    };

    switch( params->Type )
 80198c4:	7a04      	ldrb	r4, [r0, #8]
 80198c6:	b17c      	cbz	r4, 80198e8 <RegionAU915InitDefaults+0x40>
 80198c8:	3c01      	subs	r4, #1
 80198ca:	b2e4      	uxtb	r4, r4
 80198cc:	2c01      	cmp	r4, #1
 80198ce:	f200 8082 	bhi.w	80199d6 <RegionAU915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80198d2:	4b42      	ldr	r3, [pc, #264]	; (80199dc <RegionAU915InitDefaults+0x134>)
 80198d4:	6818      	ldr	r0, [r3, #0]
 80198d6:	2206      	movs	r2, #6
 80198d8:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 80198dc:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80198e0:	f001 fc3f 	bl	801b162 <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80198e4:	2300      	movs	r3, #0
 80198e6:	e074      	b.n	80199d2 <RegionAU915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80198e8:	6803      	ldr	r3, [r0, #0]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d073      	beq.n	80199d6 <RegionAU915InitDefaults+0x12e>
 80198ee:	6842      	ldr	r2, [r0, #4]
 80198f0:	2a00      	cmp	r2, #0
 80198f2:	d070      	beq.n	80199d6 <RegionAU915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80198f4:	493a      	ldr	r1, [pc, #232]	; (80199e0 <RegionAU915InitDefaults+0x138>)
 80198f6:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80198f8:	4938      	ldr	r1, [pc, #224]	; (80199dc <RegionAU915InitDefaults+0x134>)
 80198fa:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80198fc:	2200      	movs	r2, #0
 80198fe:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8019902:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 8019906:	2218      	movs	r2, #24
 8019908:	4669      	mov	r1, sp
 801990a:	4618      	mov	r0, r3
 801990c:	f006 fadb 	bl	801fec6 <memcpy1>
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 8019910:	e011      	b.n	8019936 <RegionAU915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 915200000 + i * 200000;
 8019912:	4b32      	ldr	r3, [pc, #200]	; (80199dc <RegionAU915InitDefaults+0x134>)
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	4a33      	ldr	r2, [pc, #204]	; (80199e4 <RegionAU915InitDefaults+0x13c>)
 8019918:	4933      	ldr	r1, [pc, #204]	; (80199e8 <RegionAU915InitDefaults+0x140>)
 801991a:	fb02 1204 	mla	r2, r2, r4, r1
 801991e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8019922:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8019926:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801992a:	2250      	movs	r2, #80	; 0x50
 801992c:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 801992e:	2200      	movs	r2, #0
 8019930:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 8019932:	3401      	adds	r4, #1
 8019934:	b2e4      	uxtb	r4, r4
 8019936:	2c3f      	cmp	r4, #63	; 0x3f
 8019938:	d9eb      	bls.n	8019912 <RegionAU915InitDefaults+0x6a>
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 801993a:	2340      	movs	r3, #64	; 0x40
 801993c:	e013      	b.n	8019966 <RegionAU915InitDefaults+0xbe>
                RegionNvmGroup2->Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801993e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 8019942:	4a26      	ldr	r2, [pc, #152]	; (80199dc <RegionAU915InitDefaults+0x134>)
 8019944:	6812      	ldr	r2, [r2, #0]
 8019946:	4c29      	ldr	r4, [pc, #164]	; (80199ec <RegionAU915InitDefaults+0x144>)
 8019948:	4829      	ldr	r0, [pc, #164]	; (80199f0 <RegionAU915InitDefaults+0x148>)
 801994a:	fb04 0101 	mla	r1, r4, r1, r0
 801994e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8019952:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8019956:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 801995a:	2166      	movs	r1, #102	; 0x66
 801995c:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 801995e:	2100      	movs	r1, #0
 8019960:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 8019962:	3301      	adds	r3, #1
 8019964:	b2db      	uxtb	r3, r3
 8019966:	2b47      	cmp	r3, #71	; 0x47
 8019968:	d9e9      	bls.n	801993e <RegionAU915InitDefaults+0x96>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801996a:	4c1c      	ldr	r4, [pc, #112]	; (80199dc <RegionAU915InitDefaults+0x134>)
 801996c:	6820      	ldr	r0, [r4, #0]
 801996e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019972:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8019976:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801997a:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 801997e:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8019982:	23ff      	movs	r3, #255	; 0xff
 8019984:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8019988:	2300      	movs	r3, #0
 801998a:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801998e:	2206      	movs	r2, #6
 8019990:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8019994:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8019998:	f001 fbe3 	bl	801b162 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801999c:	4b10      	ldr	r3, [pc, #64]	; (80199e0 <RegionAU915InitDefaults+0x138>)
 801999e:	6818      	ldr	r0, [r3, #0]
 80199a0:	6821      	ldr	r1, [r4, #0]
 80199a2:	2206      	movs	r2, #6
 80199a4:	f501 7158 	add.w	r1, r1, #864	; 0x360
 80199a8:	3090      	adds	r0, #144	; 0x90
 80199aa:	f001 fbda 	bl	801b162 <RegionCommonChanMaskCopy>
            break;
 80199ae:	e012      	b.n	80199d6 <RegionAU915InitDefaults+0x12e>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80199b0:	4a0b      	ldr	r2, [pc, #44]	; (80199e0 <RegionAU915InitDefaults+0x138>)
 80199b2:	6811      	ldr	r1, [r2, #0]
 80199b4:	4a09      	ldr	r2, [pc, #36]	; (80199dc <RegionAU915InitDefaults+0x134>)
 80199b6:	6812      	ldr	r2, [r2, #0]
 80199b8:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 80199bc:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 80199c0:	f103 0048 	add.w	r0, r3, #72	; 0x48
 80199c4:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 80199c8:	4022      	ands	r2, r4
 80199ca:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80199ce:	3301      	adds	r3, #1
 80199d0:	b2db      	uxtb	r3, r3
 80199d2:	2b05      	cmp	r3, #5
 80199d4:	d9ec      	bls.n	80199b0 <RegionAU915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_AU915 */
}
 80199d6:	b006      	add	sp, #24
 80199d8:	bd10      	pop	{r4, pc}
 80199da:	bf00      	nop
 80199dc:	20001b6c 	.word	0x20001b6c
 80199e0:	20001b68 	.word	0x20001b68
 80199e4:	00030d40 	.word	0x00030d40
 80199e8:	368cd800 	.word	0x368cd800
 80199ec:	00186a00 	.word	0x00186a00
 80199f0:	36978660 	.word	0x36978660

080199f4 <RegionAU915Verify>:

bool RegionAU915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80199f4:	b508      	push	{r3, lr}
#if defined( REGION_AU915 )
    switch( phyAttribute )
 80199f6:	290a      	cmp	r1, #10
 80199f8:	d841      	bhi.n	8019a7e <RegionAU915Verify+0x8a>
 80199fa:	e8df f001 	tbb	[pc, r1]
 80199fe:	4006      	.short	0x4006
 8019a00:	0a404040 	.word	0x0a404040
 8019a04:	3640200a 	.word	0x3640200a
 8019a08:	36          	.byte	0x36
 8019a09:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8019a0a:	6800      	ldr	r0, [r0, #0]
 8019a0c:	f7ff fdc2 	bl	8019594 <VerifyRfFreq>
 8019a10:	e036      	b.n	8019a80 <RegionAU915Verify+0x8c>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 8019a12:	7883      	ldrb	r3, [r0, #2]
 8019a14:	b94b      	cbnz	r3, 8019a2a <RegionAU915Verify+0x36>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_TX_MIN_DATARATE, AU915_TX_MAX_DATARATE );
 8019a16:	2206      	movs	r2, #6
 8019a18:	2100      	movs	r1, #0
 8019a1a:	f990 0000 	ldrsb.w	r0, [r0]
 8019a1e:	f001 fb2e 	bl	801b07e <RegionCommonValueInRange>
 8019a22:	3800      	subs	r0, #0
 8019a24:	bf18      	it	ne
 8019a26:	2001      	movne	r0, #1
 8019a28:	e02a      	b.n	8019a80 <RegionAU915Verify+0x8c>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_TX_MAX_DATARATE );
 8019a2a:	2206      	movs	r2, #6
 8019a2c:	2102      	movs	r1, #2
 8019a2e:	f990 0000 	ldrsb.w	r0, [r0]
 8019a32:	f001 fb24 	bl	801b07e <RegionCommonValueInRange>
 8019a36:	3800      	subs	r0, #0
 8019a38:	bf18      	it	ne
 8019a3a:	2001      	movne	r0, #1
 8019a3c:	e020      	b.n	8019a80 <RegionAU915Verify+0x8c>
            }
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 8019a3e:	7883      	ldrb	r3, [r0, #2]
 8019a40:	b94b      	cbnz	r3, 8019a56 <RegionAU915Verify+0x62>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 8019a42:	220d      	movs	r2, #13
 8019a44:	2108      	movs	r1, #8
 8019a46:	f990 0000 	ldrsb.w	r0, [r0]
 8019a4a:	f001 fb18 	bl	801b07e <RegionCommonValueInRange>
 8019a4e:	3800      	subs	r0, #0
 8019a50:	bf18      	it	ne
 8019a52:	2001      	movne	r0, #1
 8019a54:	e014      	b.n	8019a80 <RegionAU915Verify+0x8c>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_RX_MAX_DATARATE );
 8019a56:	220d      	movs	r2, #13
 8019a58:	2102      	movs	r1, #2
 8019a5a:	f990 0000 	ldrsb.w	r0, [r0]
 8019a5e:	f001 fb0e 	bl	801b07e <RegionCommonValueInRange>
 8019a62:	3800      	subs	r0, #0
 8019a64:	bf18      	it	ne
 8019a66:	2001      	movne	r0, #1
 8019a68:	e00a      	b.n	8019a80 <RegionAU915Verify+0x8c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 8019a6a:	220e      	movs	r2, #14
 8019a6c:	2100      	movs	r1, #0
 8019a6e:	f990 0000 	ldrsb.w	r0, [r0]
 8019a72:	f001 fb04 	bl	801b07e <RegionCommonValueInRange>
 8019a76:	3800      	subs	r0, #0
 8019a78:	bf18      	it	ne
 8019a7a:	2001      	movne	r0, #1
 8019a7c:	e000      	b.n	8019a80 <RegionAU915Verify+0x8c>
{
 8019a7e:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_AU915 */
}
 8019a80:	bd08      	pop	{r3, pc}
	...

08019a84 <RegionAU915ApplyCFList>:

void RegionAU915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_AU915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8019a84:	7903      	ldrb	r3, [r0, #4]
 8019a86:	2b10      	cmp	r3, #16
 8019a88:	d134      	bne.n	8019af4 <RegionAU915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8019a8a:	6803      	ldr	r3, [r0, #0]
 8019a8c:	7bdb      	ldrb	r3, [r3, #15]
 8019a8e:	2b01      	cmp	r3, #1
 8019a90:	d130      	bne.n	8019af4 <RegionAU915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8019a92:	2200      	movs	r2, #0
 8019a94:	4613      	mov	r3, r2
 8019a96:	2a04      	cmp	r2, #4
 8019a98:	d82b      	bhi.n	8019af2 <RegionAU915ApplyCFList+0x6e>
{
 8019a9a:	b4f0      	push	{r4, r5, r6, r7}
 8019a9c:	e014      	b.n	8019ac8 <RegionAU915ApplyCFList+0x44>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8019a9e:	b2e4      	uxtb	r4, r4
 8019aa0:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8019aa4:	4c14      	ldr	r4, [pc, #80]	; (8019af8 <RegionAU915ApplyCFList+0x74>)
 8019aa6:	6826      	ldr	r6, [r4, #0]
 8019aa8:	f501 74d8 	add.w	r4, r1, #432	; 0x1b0
 8019aac:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 8019ab0:	3148      	adds	r1, #72	; 0x48
 8019ab2:	f836 5011 	ldrh.w	r5, [r6, r1, lsl #1]
 8019ab6:	402c      	ands	r4, r5
 8019ab8:	f826 4011 	strh.w	r4, [r6, r1, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8019abc:	3301      	adds	r3, #1
 8019abe:	b2db      	uxtb	r3, r3
 8019ac0:	3202      	adds	r2, #2
 8019ac2:	b2d2      	uxtb	r2, r2
 8019ac4:	2b04      	cmp	r3, #4
 8019ac6:	d812      	bhi.n	8019aee <RegionAU915ApplyCFList+0x6a>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8019ac8:	6804      	ldr	r4, [r0, #0]
 8019aca:	490c      	ldr	r1, [pc, #48]	; (8019afc <RegionAU915ApplyCFList+0x78>)
 8019acc:	680d      	ldr	r5, [r1, #0]
 8019ace:	4619      	mov	r1, r3
 8019ad0:	5ca4      	ldrb	r4, [r4, r2]
 8019ad2:	f503 77d8 	add.w	r7, r3, #432	; 0x1b0
 8019ad6:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8019ada:	6806      	ldr	r6, [r0, #0]
 8019adc:	4416      	add	r6, r2
 8019ade:	7876      	ldrb	r6, [r6, #1]
 8019ae0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8019ae4:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        if( chMaskItr == 4 )
 8019ae8:	2b04      	cmp	r3, #4
 8019aea:	d1db      	bne.n	8019aa4 <RegionAU915ApplyCFList+0x20>
 8019aec:	e7d7      	b.n	8019a9e <RegionAU915ApplyCFList+0x1a>
    }
#endif /* REGION_AU915 */
}
 8019aee:	bcf0      	pop	{r4, r5, r6, r7}
 8019af0:	4770      	bx	lr
 8019af2:	4770      	bx	lr
 8019af4:	4770      	bx	lr
 8019af6:	bf00      	nop
 8019af8:	20001b68 	.word	0x20001b68
 8019afc:	20001b6c 	.word	0x20001b6c

08019b00 <RegionAU915ChanMaskSet>:

bool RegionAU915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8019b00:	b538      	push	{r3, r4, r5, lr}
#if defined( REGION_AU915 )
    switch( chanMaskSet->ChannelsMaskType )
 8019b02:	7904      	ldrb	r4, [r0, #4]
 8019b04:	b11c      	cbz	r4, 8019b0e <RegionAU915ChanMaskSet+0xe>
 8019b06:	2c01      	cmp	r4, #1
 8019b08:	d025      	beq.n	8019b56 <RegionAU915ChanMaskSet+0x56>
 8019b0a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_AU915 */
}
 8019b0c:	bd38      	pop	{r3, r4, r5, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019b0e:	4d17      	ldr	r5, [pc, #92]	; (8019b6c <RegionAU915ChanMaskSet+0x6c>)
 8019b10:	682b      	ldr	r3, [r5, #0]
 8019b12:	2206      	movs	r2, #6
 8019b14:	6801      	ldr	r1, [r0, #0]
 8019b16:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8019b1a:	f001 fb22 	bl	801b162 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8019b1e:	682d      	ldr	r5, [r5, #0]
 8019b20:	f895 3374 	ldrb.w	r3, [r5, #884]	; 0x374
 8019b24:	f8a5 3374 	strh.w	r3, [r5, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8019b28:	2300      	movs	r3, #0
 8019b2a:	f8a5 3376 	strh.w	r3, [r5, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8019b2e:	2c05      	cmp	r4, #5
 8019b30:	d80f      	bhi.n	8019b52 <RegionAU915ChanMaskSet+0x52>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8019b32:	4b0f      	ldr	r3, [pc, #60]	; (8019b70 <RegionAU915ChanMaskSet+0x70>)
 8019b34:	681a      	ldr	r2, [r3, #0]
 8019b36:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 8019b3a:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8019b3e:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8019b42:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 8019b46:	4003      	ands	r3, r0
 8019b48:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8019b4c:	3401      	adds	r4, #1
 8019b4e:	b2e4      	uxtb	r4, r4
 8019b50:	e7ed      	b.n	8019b2e <RegionAU915ChanMaskSet+0x2e>
    return true;
 8019b52:	2001      	movs	r0, #1
 8019b54:	e7da      	b.n	8019b0c <RegionAU915ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019b56:	4b05      	ldr	r3, [pc, #20]	; (8019b6c <RegionAU915ChanMaskSet+0x6c>)
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	2206      	movs	r2, #6
 8019b5c:	6801      	ldr	r1, [r0, #0]
 8019b5e:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8019b62:	f001 fafe 	bl	801b162 <RegionCommonChanMaskCopy>
    return true;
 8019b66:	2001      	movs	r0, #1
            break;
 8019b68:	e7d0      	b.n	8019b0c <RegionAU915ChanMaskSet+0xc>
 8019b6a:	bf00      	nop
 8019b6c:	20001b6c 	.word	0x20001b6c
 8019b70:	20001b68 	.word	0x20001b68

08019b74 <RegionAU915ComputeRxWindowParameters>:

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b76:	b083      	sub	sp, #12
 8019b78:	460e      	mov	r6, r1
 8019b7a:	4617      	mov	r7, r2
 8019b7c:	461c      	mov	r4, r3
#if defined( REGION_AU915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 8019b7e:	280d      	cmp	r0, #13
 8019b80:	bfa8      	it	ge
 8019b82:	200d      	movge	r0, #13
 8019b84:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAU915 );
 8019b86:	4d0f      	ldr	r5, [pc, #60]	; (8019bc4 <RegionAU915ComputeRxWindowParameters+0x50>)
 8019b88:	4629      	mov	r1, r5
 8019b8a:	f001 fd33 	bl	801b5f4 <RegionCommonGetBandwidth>
 8019b8e:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 8019b90:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8019b94:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8019b98:	4a0b      	ldr	r2, [pc, #44]	; (8019bc8 <RegionAU915ComputeRxWindowParameters+0x54>)
 8019b9a:	5cd0      	ldrb	r0, [r2, r3]
 8019b9c:	f001 fbfa 	bl	801b394 <RegionCommonComputeSymbolTimeLoRa>
 8019ba0:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8019ba2:	4b0a      	ldr	r3, [pc, #40]	; (8019bcc <RegionAU915ComputeRxWindowParameters+0x58>)
 8019ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ba6:	4798      	blx	r3
 8019ba8:	4603      	mov	r3, r0
 8019baa:	f104 020c 	add.w	r2, r4, #12
 8019bae:	9201      	str	r2, [sp, #4]
 8019bb0:	3408      	adds	r4, #8
 8019bb2:	9400      	str	r4, [sp, #0]
 8019bb4:	463a      	mov	r2, r7
 8019bb6:	4631      	mov	r1, r6
 8019bb8:	4628      	mov	r0, r5
 8019bba:	f001 fbf9 	bl	801b3b0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AU915 */
}
 8019bbe:	b003      	add	sp, #12
 8019bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bc2:	bf00      	nop
 8019bc4:	08028334 	.word	0x08028334
 8019bc8:	080283a0 	.word	0x080283a0
 8019bcc:	08028984 	.word	0x08028984

08019bd0 <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8019bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019bd4:	b08b      	sub	sp, #44	; 0x2c
 8019bd6:	4604      	mov	r4, r0
 8019bd8:	460e      	mov	r6, r1
#if defined( REGION_AU915 )
    int8_t dr = rxConfig->Datarate;
 8019bda:	f990 7001 	ldrsb.w	r7, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8019bde:	6845      	ldr	r5, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8019be0:	4b22      	ldr	r3, [pc, #136]	; (8019c6c <RegionAU915RxConfig+0x9c>)
 8019be2:	685b      	ldr	r3, [r3, #4]
 8019be4:	4798      	blx	r3
 8019be6:	2800      	cmp	r0, #0
 8019be8:	d13d      	bne.n	8019c66 <RegionAU915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8019bea:	7ce3      	ldrb	r3, [r4, #19]
 8019bec:	b933      	cbnz	r3, 8019bfc <RegionAU915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 8019bee:	7825      	ldrb	r5, [r4, #0]
 8019bf0:	f005 0507 	and.w	r5, r5, #7
 8019bf4:	4a1e      	ldr	r2, [pc, #120]	; (8019c70 <RegionAU915RxConfig+0xa0>)
 8019bf6:	4b1f      	ldr	r3, [pc, #124]	; (8019c74 <RegionAU915RxConfig+0xa4>)
 8019bf8:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 8019bfc:	4b1e      	ldr	r3, [pc, #120]	; (8019c78 <RegionAU915RxConfig+0xa8>)
 8019bfe:	f913 9007 	ldrsb.w	r9, [r3, r7]

    Radio.SetChannel( frequency );
 8019c02:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8019c6c <RegionAU915RxConfig+0x9c>
 8019c06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019c0a:	4628      	mov	r0, r5
 8019c0c:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8019c0e:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8019c12:	7ca3      	ldrb	r3, [r4, #18]
 8019c14:	9309      	str	r3, [sp, #36]	; 0x24
 8019c16:	2001      	movs	r0, #1
 8019c18:	9008      	str	r0, [sp, #32]
 8019c1a:	2200      	movs	r2, #0
 8019c1c:	9207      	str	r2, [sp, #28]
 8019c1e:	9206      	str	r2, [sp, #24]
 8019c20:	9205      	str	r2, [sp, #20]
 8019c22:	9204      	str	r2, [sp, #16]
 8019c24:	9203      	str	r2, [sp, #12]
 8019c26:	8923      	ldrh	r3, [r4, #8]
 8019c28:	9302      	str	r3, [sp, #8]
 8019c2a:	2308      	movs	r3, #8
 8019c2c:	9301      	str	r3, [sp, #4]
 8019c2e:	9200      	str	r2, [sp, #0]
 8019c30:	4603      	mov	r3, r0
 8019c32:	464a      	mov	r2, r9
 8019c34:	78a1      	ldrb	r1, [r4, #2]
 8019c36:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8019c38:	7c63      	ldrb	r3, [r4, #17]
 8019c3a:	b18b      	cbz	r3, 8019c60 <RegionAU915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 8019c3c:	4b0f      	ldr	r3, [pc, #60]	; (8019c7c <RegionAU915RxConfig+0xac>)
 8019c3e:	5dd9      	ldrb	r1, [r3, r7]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8019c40:	4b0a      	ldr	r3, [pc, #40]	; (8019c6c <RegionAU915RxConfig+0x9c>)
 8019c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019c44:	310d      	adds	r1, #13
 8019c46:	b2c9      	uxtb	r1, r1
 8019c48:	2001      	movs	r0, #1
 8019c4a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8019c4c:	463a      	mov	r2, r7
 8019c4e:	4629      	mov	r1, r5
 8019c50:	7ce0      	ldrb	r0, [r4, #19]
 8019c52:	f001 fce1 	bl	801b618 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8019c56:	7037      	strb	r7, [r6, #0]
    return true;
 8019c58:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_AU915 */
}
 8019c5a:	b00b      	add	sp, #44	; 0x2c
 8019c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 8019c60:	4b07      	ldr	r3, [pc, #28]	; (8019c80 <RegionAU915RxConfig+0xb0>)
 8019c62:	5dd9      	ldrb	r1, [r3, r7]
 8019c64:	e7ec      	b.n	8019c40 <RegionAU915RxConfig+0x70>
        return false;
 8019c66:	2000      	movs	r0, #0
 8019c68:	e7f7      	b.n	8019c5a <RegionAU915RxConfig+0x8a>
 8019c6a:	bf00      	nop
 8019c6c:	08028984 	.word	0x08028984
 8019c70:	000927c0 	.word	0x000927c0
 8019c74:	370870a0 	.word	0x370870a0
 8019c78:	080283a0 	.word	0x080283a0
 8019c7c:	080283d0 	.word	0x080283d0
 8019c80:	080283b0 	.word	0x080283b0

08019c84 <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8019c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c88:	b08d      	sub	sp, #52	; 0x34
 8019c8a:	4604      	mov	r4, r0
 8019c8c:	910b      	str	r1, [sp, #44]	; 0x2c
 8019c8e:	4690      	mov	r8, r2
#if defined( REGION_AU915 )
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 8019c90:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8019c94:	4a31      	ldr	r2, [pc, #196]	; (8019d5c <RegionAU915TxConfig+0xd8>)
 8019c96:	f912 b003 	ldrsb.w	fp, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8019c9a:	4b31      	ldr	r3, [pc, #196]	; (8019d60 <RegionAU915TxConfig+0xdc>)
 8019c9c:	6819      	ldr	r1, [r3, #0]
 8019c9e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019d68 <RegionAU915TxConfig+0xe4>
 8019ca2:	f8da 3000 	ldr.w	r3, [sl]
 8019ca6:	7802      	ldrb	r2, [r0, #0]
 8019ca8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019cac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8019cb0:	7a53      	ldrb	r3, [r2, #9]
 8019cb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019cb6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8019cba:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8019cbe:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8019cc2:	f001 fc92 	bl	801b5ea <RegionCommonLimitTxPower>
 8019cc6:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAU915 );
 8019cc8:	4926      	ldr	r1, [pc, #152]	; (8019d64 <RegionAU915TxConfig+0xe0>)
 8019cca:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8019cce:	f001 fc91 	bl	801b5f4 <RegionCommonGetBandwidth>
 8019cd2:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8019cd4:	68a2      	ldr	r2, [r4, #8]
 8019cd6:	6861      	ldr	r1, [r4, #4]
 8019cd8:	4630      	mov	r0, r6
 8019cda:	f001 fba3 	bl	801b424 <RegionCommonComputeTxPower>
 8019cde:	4607      	mov	r7, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8019ce0:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8019d6c <RegionAU915TxConfig+0xe8>
 8019ce4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8019ce8:	f8da 1000 	ldr.w	r1, [sl]
 8019cec:	7823      	ldrb	r3, [r4, #0]
 8019cee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019cf2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8019cf6:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8019cf8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8019cfc:	9308      	str	r3, [sp, #32]
 8019cfe:	2200      	movs	r2, #0
 8019d00:	9207      	str	r2, [sp, #28]
 8019d02:	9206      	str	r2, [sp, #24]
 8019d04:	9205      	str	r2, [sp, #20]
 8019d06:	2501      	movs	r5, #1
 8019d08:	9504      	str	r5, [sp, #16]
 8019d0a:	9203      	str	r2, [sp, #12]
 8019d0c:	2308      	movs	r3, #8
 8019d0e:	9302      	str	r3, [sp, #8]
 8019d10:	9501      	str	r5, [sp, #4]
 8019d12:	f8cd b000 	str.w	fp, [sp]
 8019d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d18:	4639      	mov	r1, r7
 8019d1a:	4628      	mov	r0, r5
 8019d1c:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8019d20:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8019d22:	f8da 2000 	ldr.w	r2, [sl]
 8019d26:	7823      	ldrb	r3, [r4, #0]
 8019d28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019d2c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8019d30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019d34:	f001 fca0 	bl	801b678 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8019d38:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8019d3c:	7b21      	ldrb	r1, [r4, #12]
 8019d3e:	4628      	mov	r0, r5
 8019d40:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8019d42:	89a1      	ldrh	r1, [r4, #12]
 8019d44:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8019d48:	f7ff fc54 	bl	80195f4 <GetTimeOnAir>
 8019d4c:	f8c8 0000 	str.w	r0, [r8]

    *txPower = txPowerLimited;
 8019d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019d52:	701e      	strb	r6, [r3, #0]
    return true;
#else
    return false;
#endif /* REGION_AU915 */
}
 8019d54:	4628      	mov	r0, r5
 8019d56:	b00d      	add	sp, #52	; 0x34
 8019d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d5c:	080283a0 	.word	0x080283a0
 8019d60:	20001b68 	.word	0x20001b68
 8019d64:	08028334 	.word	0x08028334
 8019d68:	20001b6c 	.word	0x20001b6c
 8019d6c:	08028984 	.word	0x08028984

08019d70 <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d74:	b091      	sub	sp, #68	; 0x44
 8019d76:	4606      	mov	r6, r0
 8019d78:	4689      	mov	r9, r1
 8019d7a:	4690      	mov	r8, r2
 8019d7c:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_AU915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019d7e:	2400      	movs	r4, #0
 8019d80:	940e      	str	r4, [sp, #56]	; 0x38
 8019d82:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8019d86:	940b      	str	r4, [sp, #44]	; 0x2c
 8019d88:	940c      	str	r4, [sp, #48]	; 0x30
 8019d8a:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, 6 );
 8019d8c:	4b95      	ldr	r3, [pc, #596]	; (8019fe4 <RegionAU915LinkAdrReq+0x274>)
 8019d8e:	6819      	ldr	r1, [r3, #0]
 8019d90:	2206      	movs	r2, #6
 8019d92:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8019d96:	a80b      	add	r0, sp, #44	; 0x2c
 8019d98:	f001 f9e3 	bl	801b162 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019d9c:	e00d      	b.n	8019dba <RegionAU915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8019d9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019da2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 8019da6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 8019daa:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 8019dae:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8019db2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8019db6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019dba:	7a33      	ldrb	r3, [r6, #8]
 8019dbc:	42a3      	cmp	r3, r4
 8019dbe:	d978      	bls.n	8019eb2 <RegionAU915LinkAdrReq+0x142>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8019dc0:	6870      	ldr	r0, [r6, #4]
 8019dc2:	a90e      	add	r1, sp, #56	; 0x38
 8019dc4:	4420      	add	r0, r4
 8019dc6:	f001 fa7d 	bl	801b2c4 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8019dca:	2800      	cmp	r0, #0
 8019dcc:	d071      	beq.n	8019eb2 <RegionAU915LinkAdrReq+0x142>
        bytesProcessed += nextIndex;
 8019dce:	4404      	add	r4, r0
 8019dd0:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 8019dd2:	f89d 503b 	ldrb.w	r5, [sp, #59]	; 0x3b
 8019dd6:	2d06      	cmp	r5, #6
 8019dd8:	d0e1      	beq.n	8019d9e <RegionAU915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8019dda:	2d07      	cmp	r5, #7
 8019ddc:	d009      	beq.n	8019df2 <RegionAU915LinkAdrReq+0x82>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8019dde:	2d05      	cmp	r5, #5
 8019de0:	d064      	beq.n	8019eac <RegionAU915LinkAdrReq+0x13c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8019de2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8019de6:	aa10      	add	r2, sp, #64	; 0x40
 8019de8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8019dec:	f825 3c14 	strh.w	r3, [r5, #-20]
 8019df0:	e7e3      	b.n	8019dba <RegionAU915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 8019df2:	2300      	movs	r3, #0
 8019df4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 8019df8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 8019dfc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 8019e00:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8019e04:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8019e08:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8019e0c:	e7d5      	b.n	8019dba <RegionAU915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 8019e0e:	aa10      	add	r2, sp, #64	; 0x40
 8019e10:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8019e14:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8019e18:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8019e1c:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8019e20:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8019e24:	4313      	orrs	r3, r2
 8019e26:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 8019e2a:	3101      	adds	r1, #1
 8019e2c:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 8019e2e:	3501      	adds	r5, #1
 8019e30:	b2ed      	uxtb	r5, r5
 8019e32:	2d07      	cmp	r5, #7
 8019e34:	d8c1      	bhi.n	8019dba <RegionAU915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8019e36:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8019e3a:	2301      	movs	r3, #1
 8019e3c:	40ab      	lsls	r3, r5
 8019e3e:	421a      	tst	r2, r3
 8019e40:	d011      	beq.n	8019e66 <RegionAU915LinkAdrReq+0xf6>
                    if( ( i % 2 ) == 0 )
 8019e42:	f015 0f01 	tst.w	r5, #1
 8019e46:	d1e2      	bne.n	8019e0e <RegionAU915LinkAdrReq+0x9e>
                        channelsMask[cntChannelMask] |= 0x00FF;
 8019e48:	aa10      	add	r2, sp, #64	; 0x40
 8019e4a:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8019e4e:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8019e52:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8019e56:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8019e5a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8019e5e:	4313      	orrs	r3, r2
 8019e60:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8019e64:	e7e3      	b.n	8019e2e <RegionAU915LinkAdrReq+0xbe>
                    if( ( i % 2 ) == 0 )
 8019e66:	f015 0f01 	tst.w	r5, #1
 8019e6a:	d10f      	bne.n	8019e8c <RegionAU915LinkAdrReq+0x11c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 8019e6c:	aa10      	add	r2, sp, #64	; 0x40
 8019e6e:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8019e72:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8019e76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8019e7a:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8019e7e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8019e82:	ea22 0303 	bic.w	r3, r2, r3
 8019e86:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8019e8a:	e7d0      	b.n	8019e2e <RegionAU915LinkAdrReq+0xbe>
                        channelsMask[cntChannelMask] &= 0x00FF;
 8019e8c:	aa10      	add	r2, sp, #64	; 0x40
 8019e8e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8019e92:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 8019e96:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8019e9a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8019e9e:	ea22 0303 	bic.w	r3, r2, r3
 8019ea2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 8019ea6:	3101      	adds	r1, #1
 8019ea8:	b2c9      	uxtb	r1, r1
 8019eaa:	e7c0      	b.n	8019e2e <RegionAU915LinkAdrReq+0xbe>
            for( uint8_t i = 0; i <= 7; i++ )
 8019eac:	2500      	movs	r5, #0
            uint8_t cntChannelMask = 0;
 8019eae:	4629      	mov	r1, r5
 8019eb0:	e7bf      	b.n	8019e32 <RegionAU915LinkAdrReq+0xc2>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8019eb2:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8019eb6:	2b05      	cmp	r3, #5
 8019eb8:	dd58      	ble.n	8019f6c <RegionAU915LinkAdrReq+0x1fc>
 8019eba:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8019ebc:	2302      	movs	r3, #2
 8019ebe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8019ec2:	7a73      	ldrb	r3, [r6, #9]
 8019ec4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionAU915GetPhyParam( &getPhy );
 8019ec8:	a809      	add	r0, sp, #36	; 0x24
 8019eca:	f7ff fbb1 	bl	8019630 <RegionAU915GetPhyParam>
 8019ece:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 8019ed0:	f88d 5004 	strb.w	r5, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8019ed4:	7ab3      	ldrb	r3, [r6, #10]
 8019ed6:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8019eda:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8019ede:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019ee2:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8019ee6:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8019eea:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8019eee:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019ef2:	f996 300b 	ldrsb.w	r3, [r6, #11]
 8019ef6:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019efa:	f996 300c 	ldrsb.w	r3, [r6, #12]
 8019efe:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019f02:	f996 300d 	ldrsb.w	r3, [r6, #13]
 8019f06:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 8019f0a:	2348      	movs	r3, #72	; 0x48
 8019f0c:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8019f10:	ab0b      	add	r3, sp, #44	; 0x2c
 8019f12:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019f14:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 8019f18:	2306      	movs	r3, #6
 8019f1a:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019f1e:	4b31      	ldr	r3, [pc, #196]	; (8019fe4 <RegionAU915LinkAdrReq+0x274>)
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 8019f24:	230e      	movs	r3, #14
 8019f26:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
 8019f2a:	2300      	movs	r3, #0
 8019f2c:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019f30:	6833      	ldr	r3, [r6, #0]
 8019f32:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019f34:	ab0e      	add	r3, sp, #56	; 0x38
 8019f36:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8019f3a:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 8019f3e:	4668      	mov	r0, sp
 8019f40:	f001 f9dc 	bl	801b2fc <RegionCommonLinkAdrReqVerifyParams>
 8019f44:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019f46:	2807      	cmp	r0, #7
 8019f48:	d01b      	beq.n	8019f82 <RegionAU915LinkAdrReq+0x212>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019f4a:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8019f4e:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 8019f52:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8019f56:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 8019f5a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8019f5e:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 8019f60:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019f62:	701c      	strb	r4, [r3, #0]

#endif /* REGION_AU915 */
    return status;
}
 8019f64:	4628      	mov	r0, r5
 8019f66:	b011      	add	sp, #68	; 0x44
 8019f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8019f6c:	2204      	movs	r2, #4
 8019f6e:	2100      	movs	r1, #0
 8019f70:	a80b      	add	r0, sp, #44	; 0x2c
 8019f72:	f001 f8e0 	bl	801b136 <RegionCommonCountChannels>
 8019f76:	2801      	cmp	r0, #1
 8019f78:	d901      	bls.n	8019f7e <RegionAU915LinkAdrReq+0x20e>
 8019f7a:	2507      	movs	r5, #7
 8019f7c:	e79e      	b.n	8019ebc <RegionAU915LinkAdrReq+0x14c>
        status &= 0xFE; // Channel mask KO
 8019f7e:	2506      	movs	r5, #6
 8019f80:	e79c      	b.n	8019ebc <RegionAU915LinkAdrReq+0x14c>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8019f82:	4e18      	ldr	r6, [pc, #96]	; (8019fe4 <RegionAU915LinkAdrReq+0x274>)
 8019f84:	6830      	ldr	r0, [r6, #0]
 8019f86:	2206      	movs	r2, #6
 8019f88:	a90b      	add	r1, sp, #44	; 0x2c
 8019f8a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8019f8e:	f001 f8e8 	bl	801b162 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8019f92:	4b15      	ldr	r3, [pc, #84]	; (8019fe8 <RegionAU915LinkAdrReq+0x278>)
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	6832      	ldr	r2, [r6, #0]
 8019f98:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 8019f9c:	f8b3 0090 	ldrh.w	r0, [r3, #144]	; 0x90
 8019fa0:	4001      	ands	r1, r0
 8019fa2:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8019fa6:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 8019faa:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
 8019fae:	4001      	ands	r1, r0
 8019fb0:	f8a3 1092 	strh.w	r1, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8019fb4:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 8019fb8:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
 8019fbc:	4001      	ands	r1, r0
 8019fbe:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8019fc2:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 8019fc6:	f8b3 0096 	ldrh.w	r0, [r3, #150]	; 0x96
 8019fca:	4001      	ands	r1, r0
 8019fcc:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8019fd0:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 8019fd4:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8019fd8:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8019fdc:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8019fe0:	e7b3      	b.n	8019f4a <RegionAU915LinkAdrReq+0x1da>
 8019fe2:	bf00      	nop
 8019fe4:	20001b6c 	.word	0x20001b6c
 8019fe8:	20001b68 	.word	0x20001b68

08019fec <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019fec:	b538      	push	{r3, r4, r5, lr}
 8019fee:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_AU915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8019ff0:	6840      	ldr	r0, [r0, #4]
 8019ff2:	f7ff facf 	bl	8019594 <VerifyRfFreq>
 8019ff6:	b1e0      	cbz	r0, 801a032 <RegionAU915RxParamSetupReq+0x46>
    uint8_t status = 0x07;
 8019ff8:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 8019ffa:	220d      	movs	r2, #13
 8019ffc:	2108      	movs	r1, #8
 8019ffe:	f994 0000 	ldrsb.w	r0, [r4]
 801a002:	f001 f83c 	bl	801b07e <RegionCommonValueInRange>
 801a006:	b908      	cbnz	r0, 801a00c <RegionAU915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 801a008:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 801a00c:	f994 3000 	ldrsb.w	r3, [r4]
 801a010:	2b07      	cmp	r3, #7
 801a012:	d001      	beq.n	801a018 <RegionAU915RxParamSetupReq+0x2c>
 801a014:	2b0d      	cmp	r3, #13
 801a016:	dd01      	ble.n	801a01c <RegionAU915RxParamSetupReq+0x30>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 801a018:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 801a01c:	2205      	movs	r2, #5
 801a01e:	2100      	movs	r1, #0
 801a020:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801a024:	f001 f82b 	bl	801b07e <RegionCommonValueInRange>
 801a028:	b908      	cbnz	r0, 801a02e <RegionAU915RxParamSetupReq+0x42>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801a02a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_AU915 */
    return status;
}
 801a02e:	4628      	mov	r0, r5
 801a030:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 801a032:	2506      	movs	r5, #6
 801a034:	e7e1      	b.n	8019ffa <RegionAU915RxParamSetupReq+0xe>

0801a036 <RegionAU915NewChannelReq>:

int8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 801a036:	f04f 30ff 	mov.w	r0, #4294967295
 801a03a:	4770      	bx	lr

0801a03c <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 801a03c:	2000      	movs	r0, #0
 801a03e:	4770      	bx	lr

0801a040 <RegionAU915DlChannelReq>:

int8_t RegionAU915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 801a040:	f04f 30ff 	mov.w	r0, #4294967295
 801a044:	4770      	bx	lr
	...

0801a048 <RegionAU915AlternateDr>:
int8_t RegionAU915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_AU915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_2 and then one 500kHz DR_6 channel
    if( type == ALTERNATE_DR )
 801a048:	b9b1      	cbnz	r1, 801a078 <RegionAU915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801a04a:	4b10      	ldr	r3, [pc, #64]	; (801a08c <RegionAU915AlternateDr+0x44>)
 801a04c:	681a      	ldr	r2, [r3, #0]
 801a04e:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 801a052:	3301      	adds	r3, #1
 801a054:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 801a058:	4b0c      	ldr	r3, [pc, #48]	; (801a08c <RegionAU915AlternateDr+0x44>)
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 801a060:	4b0b      	ldr	r3, [pc, #44]	; (801a090 <RegionAU915AlternateDr+0x48>)
 801a062:	fba3 1302 	umull	r1, r3, r3, r2
 801a066:	085b      	lsrs	r3, r3, #1
 801a068:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 801a06c:	1ad3      	subs	r3, r2, r3
 801a06e:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a072:	d109      	bne.n	801a088 <RegionAU915AlternateDr+0x40>
    {
        // Use DR_6 every 9th times.
        currentDr = DR_6;
 801a074:	2006      	movs	r0, #6
 801a076:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 801a078:	4b04      	ldr	r3, [pc, #16]	; (801a08c <RegionAU915AlternateDr+0x44>)
 801a07a:	681a      	ldr	r2, [r3, #0]
 801a07c:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 801a080:	3b01      	subs	r3, #1
 801a082:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 801a086:	e7e7      	b.n	801a058 <RegionAU915AlternateDr+0x10>
    }
    else
    {
        currentDr = DR_2;
 801a088:	2002      	movs	r0, #2
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_AU915 */
}
 801a08a:	4770      	bx	lr
 801a08c:	20001b68 	.word	0x20001b68
 801a090:	38e38e39 	.word	0x38e38e39

0801a094 <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801a094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a098:	b0a4      	sub	sp, #144	; 0x90
 801a09a:	4604      	mov	r4, r0
 801a09c:	460e      	mov	r6, r1
 801a09e:	4690      	mov	r8, r2
 801a0a0:	461f      	mov	r7, r3
#if defined( REGION_AU915 )
    uint8_t nbEnabledChannels = 0;
 801a0a2:	2500      	movs	r5, #0
 801a0a4:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 801a0a8:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 801a0ac:	9511      	str	r5, [sp, #68]	; 0x44
 801a0ae:	2244      	movs	r2, #68	; 0x44
 801a0b0:	4629      	mov	r1, r5
 801a0b2:	a812      	add	r0, sp, #72	; 0x48
 801a0b4:	f009 ff30 	bl	8023f18 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801a0b8:	4b4c      	ldr	r3, [pc, #304]	; (801a1ec <RegionAU915NextChannel+0x158>)
 801a0ba:	6818      	ldr	r0, [r3, #0]
 801a0bc:	2204      	movs	r2, #4
 801a0be:	4629      	mov	r1, r5
 801a0c0:	3090      	adds	r0, #144	; 0x90
 801a0c2:	f001 f838 	bl	801b136 <RegionCommonCountChannels>
 801a0c6:	2800      	cmp	r0, #0
 801a0c8:	d053      	beq.n	801a172 <RegionAU915NextChannel+0xde>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 801a0ca:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801a0ce:	2b05      	cmp	r3, #5
 801a0d0:	dd0a      	ble.n	801a0e8 <RegionAU915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801a0d2:	4b46      	ldr	r3, [pc, #280]	; (801a1ec <RegionAU915NextChannel+0x158>)
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 801a0da:	b92a      	cbnz	r2, 801a0e8 <RegionAU915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801a0dc:	4a44      	ldr	r2, [pc, #272]	; (801a1f0 <RegionAU915NextChannel+0x15c>)
 801a0de:	6812      	ldr	r2, [r2, #0]
 801a0e0:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801a0e4:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801a0e8:	7a63      	ldrb	r3, [r4, #9]
 801a0ea:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801a0ee:	7a23      	ldrb	r3, [r4, #8]
 801a0f0:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801a0f4:	4b3d      	ldr	r3, [pc, #244]	; (801a1ec <RegionAU915NextChannel+0x158>)
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	f103 0290 	add.w	r2, r3, #144	; 0x90
 801a0fc:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801a0fe:	4a3c      	ldr	r2, [pc, #240]	; (801a1f0 <RegionAU915NextChannel+0x15c>)
 801a100:	6812      	ldr	r2, [r2, #0]
 801a102:	9205      	str	r2, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801a104:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = AU915_MAX_NB_CHANNELS;
 801a106:	2348      	movs	r3, #72	; 0x48
 801a108:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 801a10c:	2300      	movs	r3, #0
 801a10e:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801a110:	6823      	ldr	r3, [r4, #0]
 801a112:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801a114:	6863      	ldr	r3, [r4, #4]
 801a116:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801a118:	7aa3      	ldrb	r3, [r4, #10]
 801a11a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = AU915_MAX_NB_BANDS;
 801a11e:	2301      	movs	r3, #1
 801a120:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801a124:	ab0c      	add	r3, sp, #48	; 0x30
 801a126:	6921      	ldr	r1, [r4, #16]
 801a128:	68e0      	ldr	r0, [r4, #12]
 801a12a:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801a12e:	7d23      	ldrb	r3, [r4, #20]
 801a130:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801a134:	8ae1      	ldrh	r1, [r4, #22]
 801a136:	f994 0008 	ldrsb.w	r0, [r4, #8]
 801a13a:	f7ff fa5b 	bl	80195f4 <GetTimeOnAir>
 801a13e:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801a140:	ab03      	add	r3, sp, #12
 801a142:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801a144:	f8cd 8004 	str.w	r8, [sp, #4]
 801a148:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 801a14c:	9300      	str	r3, [sp, #0]
 801a14e:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 801a152:	aa11      	add	r2, sp, #68	; 0x44
 801a154:	4639      	mov	r1, r7
 801a156:	a809      	add	r0, sp, #36	; 0x24
 801a158:	f001 f9e0 	bl	801b51c <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801a15c:	4605      	mov	r5, r0
 801a15e:	2800      	cmp	r0, #0
 801a160:	d140      	bne.n	801a1e4 <RegionAU915NextChannel+0x150>
    {
        if( nextChanParams->Joined == true )
 801a162:	7a63      	ldrb	r3, [r4, #9]
 801a164:	b9a3      	cbnz	r3, 801a190 <RegionAU915NextChannel+0xfc>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR2
            if( nextChanParams->Datarate == DR_2 )
 801a166:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801a16a:	2b02      	cmp	r3, #2
 801a16c:	d01b      	beq.n	801a1a6 <RegionAU915NextChannel+0x112>
            }
            // 500kHz Channels (64 - 71) DR6
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801a16e:	4603      	mov	r3, r0
 801a170:	e027      	b.n	801a1c2 <RegionAU915NextChannel+0x12e>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801a172:	4d1e      	ldr	r5, [pc, #120]	; (801a1ec <RegionAU915NextChannel+0x158>)
 801a174:	6828      	ldr	r0, [r5, #0]
 801a176:	4b1e      	ldr	r3, [pc, #120]	; (801a1f0 <RegionAU915NextChannel+0x15c>)
 801a178:	6819      	ldr	r1, [r3, #0]
 801a17a:	2204      	movs	r2, #4
 801a17c:	f501 7158 	add.w	r1, r1, #864	; 0x360
 801a180:	3090      	adds	r0, #144	; 0x90
 801a182:	f000 ffee 	bl	801b162 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801a186:	682b      	ldr	r3, [r5, #0]
 801a188:	2200      	movs	r2, #0
 801a18a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 801a18e:	e79c      	b.n	801a0ca <RegionAU915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801a190:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 801a194:	3901      	subs	r1, #1
 801a196:	f005 fe89 	bl	801feac <randr>
 801a19a:	ab24      	add	r3, sp, #144	; 0x90
 801a19c:	4418      	add	r0, r3
 801a19e:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 801a1a2:	7033      	strb	r3, [r6, #0]
 801a1a4:	e017      	b.n	801a1d6 <RegionAU915NextChannel+0x142>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801a1a6:	4b11      	ldr	r3, [pc, #68]	; (801a1ec <RegionAU915NextChannel+0x158>)
 801a1a8:	6818      	ldr	r0, [r3, #0]
 801a1aa:	4632      	mov	r2, r6
 801a1ac:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 801a1b0:	3090      	adds	r0, #144	; 0x90
 801a1b2:	f000 f87c 	bl	801a2ae <RegionBaseUSComputeNext125kHzJoinChannel>
 801a1b6:	2803      	cmp	r0, #3
 801a1b8:	d10d      	bne.n	801a1d6 <RegionAU915NextChannel+0x142>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801a1ba:	4605      	mov	r5, r0
 801a1bc:	e012      	b.n	801a1e4 <RegionAU915NextChannel+0x150>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 801a1be:	3301      	adds	r3, #1
 801a1c0:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801a1c2:	4a0a      	ldr	r2, [pc, #40]	; (801a1ec <RegionAU915NextChannel+0x158>)
 801a1c4:	6812      	ldr	r2, [r2, #0]
 801a1c6:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
 801a1ca:	411a      	asrs	r2, r3
 801a1cc:	f012 0f01 	tst.w	r2, #1
 801a1d0:	d0f5      	beq.n	801a1be <RegionAU915NextChannel+0x12a>
                }
                *channel = 64 + i;
 801a1d2:	3340      	adds	r3, #64	; 0x40
 801a1d4:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS );
 801a1d6:	4b05      	ldr	r3, [pc, #20]	; (801a1ec <RegionAU915NextChannel+0x158>)
 801a1d8:	6818      	ldr	r0, [r3, #0]
 801a1da:	2248      	movs	r2, #72	; 0x48
 801a1dc:	7831      	ldrb	r1, [r6, #0]
 801a1de:	3090      	adds	r0, #144	; 0x90
 801a1e0:	f000 ff8f 	bl	801b102 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AU915 */
}
 801a1e4:	4628      	mov	r0, r5
 801a1e6:	b024      	add	sp, #144	; 0x90
 801a1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1ec:	20001b68 	.word	0x20001b68
 801a1f0:	20001b6c 	.word	0x20001b6c

0801a1f4 <RegionAU915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionAU915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801a1f4:	b538      	push	{r3, r4, r5, lr}
 801a1f6:	4604      	mov	r4, r0
#if defined( REGION_AU915 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801a1f8:	4b12      	ldr	r3, [pc, #72]	; (801a244 <RegionAU915SetContinuousWave+0x50>)
 801a1fa:	6819      	ldr	r1, [r3, #0]
 801a1fc:	4d12      	ldr	r5, [pc, #72]	; (801a248 <RegionAU915SetContinuousWave+0x54>)
 801a1fe:	682b      	ldr	r3, [r5, #0]
 801a200:	7802      	ldrb	r2, [r0, #0]
 801a202:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a206:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801a20a:	7a53      	ldrb	r3, [r2, #9]
 801a20c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a210:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801a214:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801a218:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801a21c:	f001 f9e5 	bl	801b5ea <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801a220:	682a      	ldr	r2, [r5, #0]
 801a222:	7823      	ldrb	r3, [r4, #0]
 801a224:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a228:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801a22c:	68a2      	ldr	r2, [r4, #8]
 801a22e:	6861      	ldr	r1, [r4, #4]
 801a230:	f001 f8f8 	bl	801b424 <RegionCommonComputeTxPower>
 801a234:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801a236:	4b05      	ldr	r3, [pc, #20]	; (801a24c <RegionAU915SetContinuousWave+0x58>)
 801a238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a23a:	89a2      	ldrh	r2, [r4, #12]
 801a23c:	4628      	mov	r0, r5
 801a23e:	4798      	blx	r3
#endif /* REGION_AU915 */
}
 801a240:	bd38      	pop	{r3, r4, r5, pc}
 801a242:	bf00      	nop
 801a244:	20001b68 	.word	0x20001b68
 801a248:	20001b6c 	.word	0x20001b6c
 801a24c:	08028984 	.word	0x08028984

0801a250 <RegionAU915ApplyDrOffset>:

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_AU915 )
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 801a250:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a254:	4b06      	ldr	r3, [pc, #24]	; (801a270 <RegionAU915ApplyDrOffset+0x20>)
 801a256:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 801a25a:	568b      	ldrsb	r3, [r1, r2]

    if( datarate < 0 )
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	db01      	blt.n	801a264 <RegionAU915ApplyDrOffset+0x14>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_AU915 */
}
 801a260:	b2d8      	uxtb	r0, r3
 801a262:	4770      	bx	lr
        if( downlinkDwellTime == 0 )
 801a264:	b908      	cbnz	r0, 801a26a <RegionAU915ApplyDrOffset+0x1a>
            datarate = AU915_TX_MIN_DATARATE;
 801a266:	2300      	movs	r3, #0
 801a268:	e7fa      	b.n	801a260 <RegionAU915ApplyDrOffset+0x10>
            datarate = AU915_DWELL_LIMIT_DATARATE;
 801a26a:	2302      	movs	r3, #2
 801a26c:	e7f8      	b.n	801a260 <RegionAU915ApplyDrOffset+0x10>
 801a26e:	bf00      	nop
 801a270:	08028374 	.word	0x08028374

0801a274 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 801a274:	b1b9      	cbz	r1, 801a2a6 <FindAvailable125kHzChannels+0x32>
{
 801a276:	b410      	push	{r4}
 801a278:	460c      	mov	r4, r1
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 801a27a:	b1b2      	cbz	r2, 801a2aa <FindAvailable125kHzChannels+0x36>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 801a27c:	2300      	movs	r3, #0
 801a27e:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 801a280:	e001      	b.n	801a286 <FindAvailable125kHzChannels+0x12>
 801a282:	3301      	adds	r3, #1
 801a284:	b2db      	uxtb	r3, r3
 801a286:	2b07      	cmp	r3, #7
 801a288:	d80a      	bhi.n	801a2a0 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 801a28a:	fa40 f103 	asr.w	r1, r0, r3
 801a28e:	f011 0f01 	tst.w	r1, #1
 801a292:	d0f6      	beq.n	801a282 <FindAvailable125kHzChannels+0xe>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 801a294:	7811      	ldrb	r1, [r2, #0]
 801a296:	5463      	strb	r3, [r4, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 801a298:	7811      	ldrb	r1, [r2, #0]
 801a29a:	3101      	adds	r1, #1
 801a29c:	7011      	strb	r1, [r2, #0]
 801a29e:	e7f0      	b.n	801a282 <FindAvailable125kHzChannels+0xe>
        }
    }

    return LORAMAC_STATUS_OK;
 801a2a0:	2000      	movs	r0, #0
}
 801a2a2:	bc10      	pop	{r4}
 801a2a4:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801a2a6:	2003      	movs	r0, #3
}
 801a2a8:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801a2aa:	2003      	movs	r0, #3
 801a2ac:	e7f9      	b.n	801a2a2 <FindAvailable125kHzChannels+0x2e>

0801a2ae <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 801a2ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2b0:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 801a2b2:	2300      	movs	r3, #0
 801a2b4:	9302      	str	r3, [sp, #8]
 801a2b6:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 801a2b8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 801a2bc:	2800      	cmp	r0, #0
 801a2be:	d03c      	beq.n	801a33a <RegionBaseUSComputeNext125kHzJoinChannel+0x8c>
 801a2c0:	460d      	mov	r5, r1
 801a2c2:	4617      	mov	r7, r2
 801a2c4:	4606      	mov	r6, r0
 801a2c6:	2900      	cmp	r1, #0
 801a2c8:	d039      	beq.n	801a33e <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 801a2ca:	2a00      	cmp	r2, #0
 801a2cc:	d039      	beq.n	801a342 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 801a2ce:	780c      	ldrb	r4, [r1, #0]
 801a2d0:	e015      	b.n	801a2fe <RegionBaseUSComputeNext125kHzJoinChannel+0x50>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 801a2d2:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 801a2d6:	0a00      	lsrs	r0, r0, #8
 801a2d8:	e017      	b.n	801a30a <RegionBaseUSComputeNext125kHzJoinChannel+0x5c>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 801a2da:	3901      	subs	r1, #1
 801a2dc:	2000      	movs	r0, #0
 801a2de:	f005 fde5 	bl	801feac <randr>
 801a2e2:	ab04      	add	r3, sp, #16
 801a2e4:	4418      	add	r0, r3
 801a2e6:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 801a2ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a2ee:	703b      	strb	r3, [r7, #0]
 801a2f0:	e016      	b.n	801a320 <RegionBaseUSComputeNext125kHzJoinChannel+0x72>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 801a2f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801a2f6:	b9cb      	cbnz	r3, 801a32c <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
 801a2f8:	782a      	ldrb	r2, [r5, #0]
 801a2fa:	42a2      	cmp	r2, r4
 801a2fc:	d016      	beq.n	801a32c <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 801a2fe:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 801a300:	f014 0f01 	tst.w	r4, #1
 801a304:	d1e5      	bne.n	801a2d2 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 801a306:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801a30a:	f10d 0207 	add.w	r2, sp, #7
 801a30e:	a902      	add	r1, sp, #8
 801a310:	f7ff ffb0 	bl	801a274 <FindAvailable125kHzChannels>
 801a314:	2803      	cmp	r0, #3
 801a316:	d00b      	beq.n	801a330 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        if ( availableChannels > 0 )
 801a318:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801a31c:	2900      	cmp	r1, #0
 801a31e:	d1dc      	bne.n	801a2da <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 801a320:	3401      	adds	r4, #1
 801a322:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 801a324:	2c07      	cmp	r4, #7
 801a326:	d9e4      	bls.n	801a2f2 <RegionBaseUSComputeNext125kHzJoinChannel+0x44>
            startIndex = 0;
 801a328:	2400      	movs	r4, #0
 801a32a:	e7e2      	b.n	801a2f2 <RegionBaseUSComputeNext125kHzJoinChannel+0x44>

    if ( availableChannels > 0 )
 801a32c:	b913      	cbnz	r3, 801a334 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 801a32e:	2003      	movs	r0, #3
}
 801a330:	b005      	add	sp, #20
 801a332:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 801a334:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 801a336:	2000      	movs	r0, #0
 801a338:	e7fa      	b.n	801a330 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801a33a:	2003      	movs	r0, #3
 801a33c:	e7f8      	b.n	801a330 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 801a33e:	2003      	movs	r0, #3
 801a340:	e7f6      	b.n	801a330 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 801a342:	2003      	movs	r0, #3
 801a344:	e7f4      	b.n	801a330 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>

0801a346 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 801a346:	fb02 1000 	mla	r0, r2, r0, r1
 801a34a:	4770      	bx	lr

0801a34c <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 801a34c:	b510      	push	{r4, lr}
 801a34e:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801a350:	4b05      	ldr	r3, [pc, #20]	; (801a368 <VerifyRfFreq+0x1c>)
 801a352:	6a1b      	ldr	r3, [r3, #32]
 801a354:	4798      	blx	r3
 801a356:	b120      	cbz	r0, 801a362 <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < 779500000 ) || ( freq > 786500000 ) )
 801a358:	4b04      	ldr	r3, [pc, #16]	; (801a36c <VerifyRfFreq+0x20>)
 801a35a:	4423      	add	r3, r4
 801a35c:	4a04      	ldr	r2, [pc, #16]	; (801a370 <VerifyRfFreq+0x24>)
 801a35e:	4293      	cmp	r3, r2
 801a360:	d800      	bhi.n	801a364 <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 801a362:	bd10      	pop	{r4, pc}
        return false;
 801a364:	2000      	movs	r0, #0
 801a366:	e7fc      	b.n	801a362 <VerifyRfFreq+0x16>
 801a368:	08028984 	.word	0x08028984
 801a36c:	d189c620 	.word	0xd189c620
 801a370:	006acfc0 	.word	0x006acfc0

0801a374 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801a374:	b570      	push	{r4, r5, r6, lr}
 801a376:	b084      	sub	sp, #16
 801a378:	4605      	mov	r5, r0
 801a37a:	460c      	mov	r4, r1
    int8_t phyDr = DataratesCN779[datarate];
 801a37c:	4b13      	ldr	r3, [pc, #76]	; (801a3cc <GetTimeOnAir+0x58>)
 801a37e:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsCN779 );
 801a380:	4913      	ldr	r1, [pc, #76]	; (801a3d0 <GetTimeOnAir+0x5c>)
 801a382:	f001 f937 	bl	801b5f4 <RegionCommonGetBandwidth>
 801a386:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 801a388:	2d07      	cmp	r5, #7
 801a38a:	d00e      	beq.n	801a3aa <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801a38c:	4b11      	ldr	r3, [pc, #68]	; (801a3d4 <GetTimeOnAir+0x60>)
 801a38e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801a390:	2001      	movs	r0, #1
 801a392:	9003      	str	r0, [sp, #12]
 801a394:	b2e4      	uxtb	r4, r4
 801a396:	9402      	str	r4, [sp, #8]
 801a398:	2300      	movs	r3, #0
 801a39a:	9301      	str	r3, [sp, #4]
 801a39c:	2308      	movs	r3, #8
 801a39e:	9300      	str	r3, [sp, #0]
 801a3a0:	4603      	mov	r3, r0
 801a3a2:	4632      	mov	r2, r6
 801a3a4:	47a8      	blx	r5
    }
    return timeOnAir;
}
 801a3a6:	b004      	add	sp, #16
 801a3a8:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801a3aa:	4b0a      	ldr	r3, [pc, #40]	; (801a3d4 <GetTimeOnAir+0x60>)
 801a3ac:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801a3ae:	2301      	movs	r3, #1
 801a3b0:	9303      	str	r3, [sp, #12]
 801a3b2:	b2e4      	uxtb	r4, r4
 801a3b4:	9402      	str	r4, [sp, #8]
 801a3b6:	2000      	movs	r0, #0
 801a3b8:	9001      	str	r0, [sp, #4]
 801a3ba:	2305      	movs	r3, #5
 801a3bc:	9300      	str	r3, [sp, #0]
 801a3be:	4603      	mov	r3, r0
 801a3c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a3c4:	fb02 f206 	mul.w	r2, r2, r6
 801a3c8:	47a8      	blx	r5
 801a3ca:	e7ec      	b.n	801a3a6 <GetTimeOnAir+0x32>
 801a3cc:	08028410 	.word	0x08028410
 801a3d0:	080283f0 	.word	0x080283f0
 801a3d4:	08028984 	.word	0x08028984

0801a3d8 <RegionCN779GetPhyParam>:
#endif /* REGION_CN779 */

PhyParam_t RegionCN779GetPhyParam( GetPhyParams_t* getPhy )
{
 801a3d8:	b500      	push	{lr}
 801a3da:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 801a3dc:	2300      	movs	r3, #0
 801a3de:	9304      	str	r3, [sp, #16]

#if defined( REGION_CN779 )
    switch( getPhy->Attribute )
 801a3e0:	7803      	ldrb	r3, [r0, #0]
 801a3e2:	3b0b      	subs	r3, #11
 801a3e4:	2b2e      	cmp	r3, #46	; 0x2e
 801a3e6:	d830      	bhi.n	801a44a <RegionCN779GetPhyParam+0x72>
 801a3e8:	e8df f003 	tbb	[pc, r3]
 801a3ec:	3f393633 	.word	0x3f393633
 801a3f0:	504c4845 	.word	0x504c4845
 801a3f4:	605c5854 	.word	0x605c5854
 801a3f8:	6c2f692f 	.word	0x6c2f692f
 801a3fc:	2f7b7872 	.word	0x2f7b7872
 801a400:	18827f2f 	.word	0x18827f2f
 801a404:	2f2f2f2f 	.word	0x2f2f2f2f
 801a408:	2f2f2f2f 	.word	0x2f2f2f2f
 801a40c:	2f2f2f2f 	.word	0x2f2f2f2f
 801a410:	9288852f 	.word	0x9288852f
 801a414:	98952f2f 	.word	0x98952f2f
 801a418:	9b2f      	.short	0x9b2f
 801a41a:	a1          	.byte	0xa1
 801a41b:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801a41c:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a420:	f88d 3004 	strb.w	r3, [sp, #4]
 801a424:	2307      	movs	r3, #7
 801a426:	f88d 3005 	strb.w	r3, [sp, #5]
 801a42a:	2300      	movs	r3, #0
 801a42c:	f88d 3006 	strb.w	r3, [sp, #6]
 801a430:	2310      	movs	r3, #16
 801a432:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )CN779_TX_MAX_DATARATE,
                .MinDr = ( int8_t )CN779_TX_MIN_DATARATE,
                .NbChannels = CN779_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801a436:	4b41      	ldr	r3, [pc, #260]	; (801a53c <RegionCN779GetPhyParam+0x164>)
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a43e:	9202      	str	r2, [sp, #8]
 801a440:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801a442:	a801      	add	r0, sp, #4
 801a444:	f001 f8b2 	bl	801b5ac <RegionCommonGetNextLowerTxDr>
 801a448:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_CN779 */
    return phyParam;
}
 801a44a:	9804      	ldr	r0, [sp, #16]
 801a44c:	b007      	add	sp, #28
 801a44e:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801a452:	2340      	movs	r3, #64	; 0x40
 801a454:	9304      	str	r3, [sp, #16]
            break;
 801a456:	e7f8      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801a458:	2320      	movs	r3, #32
 801a45a:	9304      	str	r3, [sp, #16]
            break;
 801a45c:	e7f5      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateCN779[getPhy->Datarate];
 801a45e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801a462:	4a37      	ldr	r2, [pc, #220]	; (801a540 <RegionCN779GetPhyParam+0x168>)
 801a464:	5cd3      	ldrb	r3, [r2, r3]
 801a466:	9304      	str	r3, [sp, #16]
            break;
 801a468:	e7ef      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterCN779[getPhy->Datarate];
 801a46a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801a46e:	4a35      	ldr	r2, [pc, #212]	; (801a544 <RegionCN779GetPhyParam+0x16c>)
 801a470:	5cd3      	ldrb	r3, [r2, r3]
 801a472:	9304      	str	r3, [sp, #16]
            break;
 801a474:	e7e9      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_DUTY_CYCLE_ENABLED;
 801a476:	2301      	movs	r3, #1
 801a478:	9304      	str	r3, [sp, #16]
            break;
 801a47a:	e7e6      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_MAX_RX_WINDOW;
 801a47c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801a480:	9304      	str	r3, [sp, #16]
            break;
 801a482:	e7e2      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801a484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a488:	9304      	str	r3, [sp, #16]
            break;
 801a48a:	e7de      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801a48c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801a490:	9304      	str	r3, [sp, #16]
            break;
 801a492:	e7da      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801a494:	f241 3388 	movw	r3, #5000	; 0x1388
 801a498:	9304      	str	r3, [sp, #16]
            break;
 801a49a:	e7d6      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801a49c:	f241 7370 	movw	r3, #6000	; 0x1770
 801a4a0:	9304      	str	r3, [sp, #16]
            break;
 801a4a2:	e7d2      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801a4a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801a4a8:	9304      	str	r3, [sp, #16]
            break;
 801a4aa:	e7ce      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801a4ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a4b0:	4825      	ldr	r0, [pc, #148]	; (801a548 <RegionCN779GetPhyParam+0x170>)
 801a4b2:	f005 fcfb 	bl	801feac <randr>
 801a4b6:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 801a4ba:	9004      	str	r0, [sp, #16]
            break;
 801a4bc:	e7c5      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_RX_WND_2_FREQ;
 801a4be:	4b23      	ldr	r3, [pc, #140]	; (801a54c <RegionCN779GetPhyParam+0x174>)
 801a4c0:	9304      	str	r3, [sp, #16]
            break;
 801a4c2:	e7c2      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801a4c4:	4b1d      	ldr	r3, [pc, #116]	; (801a53c <RegionCN779GetPhyParam+0x164>)
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a4cc:	9304      	str	r3, [sp, #16]
            break;
 801a4ce:	e7bc      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801a4d0:	4b1a      	ldr	r3, [pc, #104]	; (801a53c <RegionCN779GetPhyParam+0x164>)
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a4d8:	9304      	str	r3, [sp, #16]
            break;
 801a4da:	e7b6      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_MAX_NB_CHANNELS;
 801a4dc:	2310      	movs	r3, #16
 801a4de:	9304      	str	r3, [sp, #16]
            break;
 801a4e0:	e7b3      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 801a4e2:	4b16      	ldr	r3, [pc, #88]	; (801a53c <RegionCN779GetPhyParam+0x164>)
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	9304      	str	r3, [sp, #16]
            break;
 801a4e8:	e7af      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.fValue = CN779_DEFAULT_MAX_EIRP;
 801a4ea:	4b19      	ldr	r3, [pc, #100]	; (801a550 <RegionCN779GetPhyParam+0x178>)
 801a4ec:	9304      	str	r3, [sp, #16]
            break;
 801a4ee:	e7ac      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.fValue = CN779_DEFAULT_ANTENNA_GAIN;
 801a4f0:	4b18      	ldr	r3, [pc, #96]	; (801a554 <RegionCN779GetPhyParam+0x17c>)
 801a4f2:	9304      	str	r3, [sp, #16]
            break;
 801a4f4:	e7a9      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_BEACON_CHANNEL_FREQ;
 801a4f6:	4b18      	ldr	r3, [pc, #96]	; (801a558 <RegionCN779GetPhyParam+0x180>)
 801a4f8:	9304      	str	r3, [sp, #16]
            break;
 801a4fa:	e7a6      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = CN779_BEACON_SIZE;
 801a4fc:	2311      	movs	r3, #17
 801a4fe:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = CN779_RFU1_SIZE;
 801a502:	2302      	movs	r3, #2
 801a504:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = CN779_RFU2_SIZE;
 801a508:	2300      	movs	r3, #0
 801a50a:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 801a50e:	e79c      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_BEACON_CHANNEL_DR;
 801a510:	2303      	movs	r3, #3
 801a512:	9304      	str	r3, [sp, #16]
            break;
 801a514:	e799      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_PING_SLOT_CHANNEL_FREQ;
 801a516:	4b10      	ldr	r3, [pc, #64]	; (801a558 <RegionCN779GetPhyParam+0x180>)
 801a518:	9304      	str	r3, [sp, #16]
            break;
 801a51a:	e796      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_PING_SLOT_CHANNEL_DR;
 801a51c:	2303      	movs	r3, #3
 801a51e:	9304      	str	r3, [sp, #16]
            break;
 801a520:	e793      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = DataratesCN779[getPhy->Datarate];
 801a522:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801a526:	4a0d      	ldr	r2, [pc, #52]	; (801a55c <RegionCN779GetPhyParam+0x184>)
 801a528:	5cd3      	ldrb	r3, [r2, r3]
 801a52a:	9304      	str	r3, [sp, #16]
            break;
 801a52c:	e78d      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsCN779 );
 801a52e:	490c      	ldr	r1, [pc, #48]	; (801a560 <RegionCN779GetPhyParam+0x188>)
 801a530:	f990 0001 	ldrsb.w	r0, [r0, #1]
 801a534:	f001 f85e 	bl	801b5f4 <RegionCommonGetBandwidth>
 801a538:	9004      	str	r0, [sp, #16]
            break;
 801a53a:	e786      	b.n	801a44a <RegionCN779GetPhyParam+0x72>
 801a53c:	20001b74 	.word	0x20001b74
 801a540:	08028418 	.word	0x08028418
 801a544:	08028420 	.word	0x08028420
 801a548:	fffffc18 	.word	0xfffffc18
 801a54c:	2ed96880 	.word	0x2ed96880
 801a550:	41426666 	.word	0x41426666
 801a554:	4009999a 	.word	0x4009999a
 801a558:	2eca2640 	.word	0x2eca2640
 801a55c:	08028410 	.word	0x08028410
 801a560:	080283f0 	.word	0x080283f0

0801a564 <RegionCN779SetBandTxDone>:

void RegionCN779SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801a564:	b530      	push	{r4, r5, lr}
 801a566:	b083      	sub	sp, #12
#if defined( REGION_CN779 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801a568:	4b0b      	ldr	r3, [pc, #44]	; (801a598 <RegionCN779SetBandTxDone+0x34>)
 801a56a:	681d      	ldr	r5, [r3, #0]
 801a56c:	4b0b      	ldr	r3, [pc, #44]	; (801a59c <RegionCN779SetBandTxDone+0x38>)
 801a56e:	681a      	ldr	r2, [r3, #0]
 801a570:	7803      	ldrb	r3, [r0, #0]
 801a572:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a576:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a57a:	7a5b      	ldrb	r3, [r3, #9]
 801a57c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 801a580:	6903      	ldr	r3, [r0, #16]
 801a582:	9300      	str	r3, [sp, #0]
 801a584:	68c3      	ldr	r3, [r0, #12]
 801a586:	7842      	ldrb	r2, [r0, #1]
 801a588:	6881      	ldr	r1, [r0, #8]
 801a58a:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 801a58e:	f000 fdf9 	bl	801b184 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_CN779 */
}
 801a592:	b003      	add	sp, #12
 801a594:	bd30      	pop	{r4, r5, pc}
 801a596:	bf00      	nop
 801a598:	20001b70 	.word	0x20001b70
 801a59c:	20001b74 	.word	0x20001b74

0801a5a0 <RegionCN779InitDefaults>:

void RegionCN779InitDefaults( InitDefaultsParams_t* params )
{
 801a5a0:	b530      	push	{r4, r5, lr}
 801a5a2:	b087      	sub	sp, #28
#if defined( REGION_CN779 )
    Band_t bands[CN779_MAX_NB_BANDS] =
 801a5a4:	2364      	movs	r3, #100	; 0x64
 801a5a6:	f8ad 3000 	strh.w	r3, [sp]
 801a5aa:	2300      	movs	r3, #0
 801a5ac:	f88d 3002 	strb.w	r3, [sp, #2]
 801a5b0:	9301      	str	r3, [sp, #4]
 801a5b2:	9302      	str	r3, [sp, #8]
 801a5b4:	9303      	str	r3, [sp, #12]
 801a5b6:	9304      	str	r3, [sp, #16]
 801a5b8:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        CN779_BAND0
    };

    switch( params->Type )
 801a5bc:	7a03      	ldrb	r3, [r0, #8]
 801a5be:	2b01      	cmp	r3, #1
 801a5c0:	d032      	beq.n	801a628 <RegionCN779InitDefaults+0x88>
 801a5c2:	2b02      	cmp	r3, #2
 801a5c4:	d03e      	beq.n	801a644 <RegionCN779InitDefaults+0xa4>
 801a5c6:	b10b      	cbz	r3, 801a5cc <RegionCN779InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_CN779 */
}
 801a5c8:	b007      	add	sp, #28
 801a5ca:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801a5cc:	6803      	ldr	r3, [r0, #0]
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d0fa      	beq.n	801a5c8 <RegionCN779InitDefaults+0x28>
 801a5d2:	6842      	ldr	r2, [r0, #4]
 801a5d4:	2a00      	cmp	r2, #0
 801a5d6:	d0f7      	beq.n	801a5c8 <RegionCN779InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801a5d8:	491f      	ldr	r1, [pc, #124]	; (801a658 <RegionCN779InitDefaults+0xb8>)
 801a5da:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801a5dc:	4c1f      	ldr	r4, [pc, #124]	; (801a65c <RegionCN779InitDefaults+0xbc>)
 801a5de:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * CN779_MAX_NB_BANDS );
 801a5e0:	2218      	movs	r2, #24
 801a5e2:	4669      	mov	r1, sp
 801a5e4:	4618      	mov	r0, r3
 801a5e6:	f005 fc6e 	bl	801fec6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) CN779_LC1;
 801a5ea:	6824      	ldr	r4, [r4, #0]
 801a5ec:	4b1c      	ldr	r3, [pc, #112]	; (801a660 <RegionCN779InitDefaults+0xc0>)
 801a5ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a5f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) CN779_LC2;
 801a5f6:	f104 050c 	add.w	r5, r4, #12
 801a5fa:	f103 020c 	add.w	r2, r3, #12
 801a5fe:	ca07      	ldmia	r2, {r0, r1, r2}
 801a600:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) CN779_LC3;
 801a604:	f104 0518 	add.w	r5, r4, #24
 801a608:	3318      	adds	r3, #24
 801a60a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a60e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801a612:	2307      	movs	r3, #7
 801a614:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a618:	2201      	movs	r2, #1
 801a61a:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 801a61e:	f504 7058 	add.w	r0, r4, #864	; 0x360
 801a622:	f000 fd9e 	bl	801b162 <RegionCommonChanMaskCopy>
            break;
 801a626:	e7cf      	b.n	801a5c8 <RegionCN779InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801a628:	4b0c      	ldr	r3, [pc, #48]	; (801a65c <RegionCN779InitDefaults+0xbc>)
 801a62a:	6818      	ldr	r0, [r3, #0]
 801a62c:	2300      	movs	r3, #0
 801a62e:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801a630:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801a632:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a634:	2201      	movs	r2, #1
 801a636:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 801a63a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801a63e:	f000 fd90 	bl	801b162 <RegionCommonChanMaskCopy>
            break;
 801a642:	e7c1      	b.n	801a5c8 <RegionCN779InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801a644:	4b05      	ldr	r3, [pc, #20]	; (801a65c <RegionCN779InitDefaults+0xbc>)
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 801a64c:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 801a650:	430a      	orrs	r2, r1
 801a652:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 801a656:	e7b7      	b.n	801a5c8 <RegionCN779InitDefaults+0x28>
 801a658:	20001b70 	.word	0x20001b70
 801a65c:	20001b74 	.word	0x20001b74
 801a660:	08024b30 	.word	0x08024b30

0801a664 <RegionCN779Verify>:

bool RegionCN779Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801a664:	b508      	push	{r3, lr}
#if defined( REGION_CN779 )
    switch( phyAttribute )
 801a666:	290f      	cmp	r1, #15
 801a668:	d837      	bhi.n	801a6da <RegionCN779Verify+0x76>
 801a66a:	e8df f001 	tbb	[pc, r1]
 801a66e:	360a      	.short	0x360a
 801a670:	0e363636 	.word	0x0e363636
 801a674:	2c362218 	.word	0x2c362218
 801a678:	3636362c 	.word	0x3636362c
 801a67c:	0836      	.short	0x0836
        case PHY_DUTY_CYCLE:
        {
            return CN779_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 801a67e:	2001      	movs	r0, #1
 801a680:	e02c      	b.n	801a6dc <RegionCN779Verify+0x78>
            return VerifyRfFreq( verify->Frequency );
 801a682:	6800      	ldr	r0, [r0, #0]
 801a684:	f7ff fe62 	bl	801a34c <VerifyRfFreq>
 801a688:	e028      	b.n	801a6dc <RegionCN779Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE );
 801a68a:	2207      	movs	r2, #7
 801a68c:	2100      	movs	r1, #0
 801a68e:	f990 0000 	ldrsb.w	r0, [r0]
 801a692:	f000 fcf4 	bl	801b07e <RegionCommonValueInRange>
 801a696:	3800      	subs	r0, #0
 801a698:	bf18      	it	ne
 801a69a:	2001      	movne	r0, #1
 801a69c:	e01e      	b.n	801a6dc <RegionCN779Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801a69e:	2205      	movs	r2, #5
 801a6a0:	2100      	movs	r1, #0
 801a6a2:	f990 0000 	ldrsb.w	r0, [r0]
 801a6a6:	f000 fcea 	bl	801b07e <RegionCommonValueInRange>
 801a6aa:	3800      	subs	r0, #0
 801a6ac:	bf18      	it	ne
 801a6ae:	2001      	movne	r0, #1
 801a6b0:	e014      	b.n	801a6dc <RegionCN779Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, CN779_RX_MIN_DATARATE, CN779_RX_MAX_DATARATE );
 801a6b2:	2207      	movs	r2, #7
 801a6b4:	2100      	movs	r1, #0
 801a6b6:	f990 0000 	ldrsb.w	r0, [r0]
 801a6ba:	f000 fce0 	bl	801b07e <RegionCommonValueInRange>
 801a6be:	3800      	subs	r0, #0
 801a6c0:	bf18      	it	ne
 801a6c2:	2001      	movne	r0, #1
 801a6c4:	e00a      	b.n	801a6dc <RegionCN779Verify+0x78>
            return RegionCommonValueInRange( verify->TxPower, CN779_MAX_TX_POWER, CN779_MIN_TX_POWER );
 801a6c6:	2205      	movs	r2, #5
 801a6c8:	2100      	movs	r1, #0
 801a6ca:	f990 0000 	ldrsb.w	r0, [r0]
 801a6ce:	f000 fcd6 	bl	801b07e <RegionCommonValueInRange>
 801a6d2:	3800      	subs	r0, #0
 801a6d4:	bf18      	it	ne
 801a6d6:	2001      	movne	r0, #1
 801a6d8:	e000      	b.n	801a6dc <RegionCN779Verify+0x78>
            return false;
 801a6da:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_CN779 */
}
 801a6dc:	bd08      	pop	{r3, pc}
	...

0801a6e0 <RegionCN779ChanMaskSet>:
    }
#endif /* REGION_CN779 */
}

bool RegionCN779ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801a6e0:	b508      	push	{r3, lr}
#if defined( REGION_CN779 )
    switch( chanMaskSet->ChannelsMaskType )
 801a6e2:	7903      	ldrb	r3, [r0, #4]
 801a6e4:	b11b      	cbz	r3, 801a6ee <RegionCN779ChanMaskSet+0xe>
 801a6e6:	2b01      	cmp	r3, #1
 801a6e8:	d00b      	beq.n	801a702 <RegionCN779ChanMaskSet+0x22>
 801a6ea:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_CN779 */
}
 801a6ec:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 801a6ee:	4b0a      	ldr	r3, [pc, #40]	; (801a718 <RegionCN779ChanMaskSet+0x38>)
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	2201      	movs	r2, #1
 801a6f4:	6801      	ldr	r1, [r0, #0]
 801a6f6:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a6fa:	f000 fd32 	bl	801b162 <RegionCommonChanMaskCopy>
    return true;
 801a6fe:	2001      	movs	r0, #1
            break;
 801a700:	e7f4      	b.n	801a6ec <RegionCN779ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 801a702:	4b05      	ldr	r3, [pc, #20]	; (801a718 <RegionCN779ChanMaskSet+0x38>)
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	2201      	movs	r2, #1
 801a708:	6801      	ldr	r1, [r0, #0]
 801a70a:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801a70e:	f000 fd28 	bl	801b162 <RegionCommonChanMaskCopy>
    return true;
 801a712:	2001      	movs	r0, #1
            break;
 801a714:	e7ea      	b.n	801a6ec <RegionCN779ChanMaskSet+0xc>
 801a716:	bf00      	nop
 801a718:	20001b74 	.word	0x20001b74

0801a71c <RegionCN779ComputeRxWindowParameters>:

void RegionCN779ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801a71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a71e:	b083      	sub	sp, #12
 801a720:	460e      	mov	r6, r1
 801a722:	4617      	mov	r7, r2
 801a724:	461c      	mov	r4, r3
#if defined( REGION_CN779 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, CN779_RX_MAX_DATARATE );
 801a726:	2807      	cmp	r0, #7
 801a728:	bfa8      	it	ge
 801a72a:	2007      	movge	r0, #7
 801a72c:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsCN779 );
 801a72e:	4913      	ldr	r1, [pc, #76]	; (801a77c <RegionCN779ComputeRxWindowParameters+0x60>)
 801a730:	f000 ff60 	bl	801b5f4 <RegionCommonGetBandwidth>
 801a734:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801a736:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801a73a:	2b07      	cmp	r3, #7
 801a73c:	d017      	beq.n	801a76e <RegionCN779ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesCN779[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesCN779[rxConfigParams->Datarate], BandwidthsCN779[rxConfigParams->Datarate] );
 801a73e:	4a0f      	ldr	r2, [pc, #60]	; (801a77c <RegionCN779ComputeRxWindowParameters+0x60>)
 801a740:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801a744:	4a0e      	ldr	r2, [pc, #56]	; (801a780 <RegionCN779ComputeRxWindowParameters+0x64>)
 801a746:	5cd0      	ldrb	r0, [r2, r3]
 801a748:	f000 fe24 	bl	801b394 <RegionCommonComputeSymbolTimeLoRa>
 801a74c:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801a74e:	4b0d      	ldr	r3, [pc, #52]	; (801a784 <RegionCN779ComputeRxWindowParameters+0x68>)
 801a750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a752:	4798      	blx	r3
 801a754:	4603      	mov	r3, r0
 801a756:	f104 020c 	add.w	r2, r4, #12
 801a75a:	9201      	str	r2, [sp, #4]
 801a75c:	3408      	adds	r4, #8
 801a75e:	9400      	str	r4, [sp, #0]
 801a760:	463a      	mov	r2, r7
 801a762:	4631      	mov	r1, r6
 801a764:	4628      	mov	r0, r5
 801a766:	f000 fe23 	bl	801b3b0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_CN779 */
}
 801a76a:	b003      	add	sp, #12
 801a76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesCN779[rxConfigParams->Datarate] );
 801a76e:	4a04      	ldr	r2, [pc, #16]	; (801a780 <RegionCN779ComputeRxWindowParameters+0x64>)
 801a770:	5cd0      	ldrb	r0, [r2, r3]
 801a772:	f000 fe17 	bl	801b3a4 <RegionCommonComputeSymbolTimeFsk>
 801a776:	4605      	mov	r5, r0
 801a778:	e7e9      	b.n	801a74e <RegionCN779ComputeRxWindowParameters+0x32>
 801a77a:	bf00      	nop
 801a77c:	080283f0 	.word	0x080283f0
 801a780:	08028410 	.word	0x08028410
 801a784:	08028984 	.word	0x08028984

0801a788 <RegionCN779RxConfig>:

bool RegionCN779RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801a788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a78c:	b08a      	sub	sp, #40	; 0x28
 801a78e:	4604      	mov	r4, r0
 801a790:	460f      	mov	r7, r1
#if defined( REGION_CN779 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801a792:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801a796:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 801a79a:	4b37      	ldr	r3, [pc, #220]	; (801a878 <RegionCN779RxConfig+0xf0>)
 801a79c:	685b      	ldr	r3, [r3, #4]
 801a79e:	4798      	blx	r3
 801a7a0:	2800      	cmp	r0, #0
 801a7a2:	d167      	bne.n	801a874 <RegionCN779RxConfig+0xec>
 801a7a4:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801a7a6:	7ce3      	ldrb	r3, [r4, #19]
 801a7a8:	b983      	cbnz	r3, 801a7cc <RegionCN779RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801a7aa:	4b34      	ldr	r3, [pc, #208]	; (801a87c <RegionCN779RxConfig+0xf4>)
 801a7ac:	681a      	ldr	r2, [r3, #0]
 801a7ae:	7823      	ldrb	r3, [r4, #0]
 801a7b0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801a7b4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801a7b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a7bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a7c0:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801a7c4:	f1b8 0f00 	cmp.w	r8, #0
 801a7c8:	d100      	bne.n	801a7cc <RegionCN779RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801a7ca:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesCN779[dr];
 801a7cc:	4b2c      	ldr	r3, [pc, #176]	; (801a880 <RegionCN779RxConfig+0xf8>)
 801a7ce:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 801a7d2:	4b29      	ldr	r3, [pc, #164]	; (801a878 <RegionCN779RxConfig+0xf0>)
 801a7d4:	68db      	ldr	r3, [r3, #12]
 801a7d6:	4640      	mov	r0, r8
 801a7d8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801a7da:	2d07      	cmp	r5, #7
 801a7dc:	d02b      	beq.n	801a836 <RegionCN779RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801a7de:	4b26      	ldr	r3, [pc, #152]	; (801a878 <RegionCN779RxConfig+0xf0>)
 801a7e0:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801a7e4:	7ca3      	ldrb	r3, [r4, #18]
 801a7e6:	9309      	str	r3, [sp, #36]	; 0x24
 801a7e8:	2601      	movs	r6, #1
 801a7ea:	9608      	str	r6, [sp, #32]
 801a7ec:	2300      	movs	r3, #0
 801a7ee:	9307      	str	r3, [sp, #28]
 801a7f0:	9306      	str	r3, [sp, #24]
 801a7f2:	9305      	str	r3, [sp, #20]
 801a7f4:	9304      	str	r3, [sp, #16]
 801a7f6:	9303      	str	r3, [sp, #12]
 801a7f8:	8922      	ldrh	r2, [r4, #8]
 801a7fa:	9202      	str	r2, [sp, #8]
 801a7fc:	2208      	movs	r2, #8
 801a7fe:	9201      	str	r2, [sp, #4]
 801a800:	9300      	str	r3, [sp, #0]
 801a802:	4633      	mov	r3, r6
 801a804:	464a      	mov	r2, r9
 801a806:	78a1      	ldrb	r1, [r4, #2]
 801a808:	4630      	mov	r0, r6
 801a80a:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801a80c:	7c63      	ldrb	r3, [r4, #17]
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d02d      	beq.n	801a86e <RegionCN779RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterCN779[dr];
 801a812:	4b1c      	ldr	r3, [pc, #112]	; (801a884 <RegionCN779RxConfig+0xfc>)
 801a814:	5d59      	ldrb	r1, [r3, r5]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateCN779[dr];
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801a816:	4b18      	ldr	r3, [pc, #96]	; (801a878 <RegionCN779RxConfig+0xf0>)
 801a818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a81a:	310d      	adds	r1, #13
 801a81c:	b2c9      	uxtb	r1, r1
 801a81e:	4630      	mov	r0, r6
 801a820:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801a822:	462a      	mov	r2, r5
 801a824:	4641      	mov	r1, r8
 801a826:	7ce0      	ldrb	r0, [r4, #19]
 801a828:	f000 fef6 	bl	801b618 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801a82c:	703d      	strb	r5, [r7, #0]
    return true;
 801a82e:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_CN779 */
}
 801a830:	b00a      	add	sp, #40	; 0x28
 801a832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801a836:	4b10      	ldr	r3, [pc, #64]	; (801a878 <RegionCN779RxConfig+0xf0>)
 801a838:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801a83c:	7ca3      	ldrb	r3, [r4, #18]
 801a83e:	9309      	str	r3, [sp, #36]	; 0x24
 801a840:	2000      	movs	r0, #0
 801a842:	9008      	str	r0, [sp, #32]
 801a844:	9007      	str	r0, [sp, #28]
 801a846:	9006      	str	r0, [sp, #24]
 801a848:	2301      	movs	r3, #1
 801a84a:	9305      	str	r3, [sp, #20]
 801a84c:	9004      	str	r0, [sp, #16]
 801a84e:	9003      	str	r0, [sp, #12]
 801a850:	8923      	ldrh	r3, [r4, #8]
 801a852:	9302      	str	r3, [sp, #8]
 801a854:	2305      	movs	r3, #5
 801a856:	9301      	str	r3, [sp, #4]
 801a858:	4b0b      	ldr	r3, [pc, #44]	; (801a888 <RegionCN779RxConfig+0x100>)
 801a85a:	9300      	str	r3, [sp, #0]
 801a85c:	4603      	mov	r3, r0
 801a85e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a862:	fb02 f209 	mul.w	r2, r2, r9
 801a866:	f24c 3150 	movw	r1, #50000	; 0xc350
 801a86a:	47d0      	blx	sl
 801a86c:	e7ce      	b.n	801a80c <RegionCN779RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateCN779[dr];
 801a86e:	4b07      	ldr	r3, [pc, #28]	; (801a88c <RegionCN779RxConfig+0x104>)
 801a870:	5d59      	ldrb	r1, [r3, r5]
 801a872:	e7d0      	b.n	801a816 <RegionCN779RxConfig+0x8e>
        return false;
 801a874:	2000      	movs	r0, #0
 801a876:	e7db      	b.n	801a830 <RegionCN779RxConfig+0xa8>
 801a878:	08028984 	.word	0x08028984
 801a87c:	20001b74 	.word	0x20001b74
 801a880:	08028410 	.word	0x08028410
 801a884:	08028420 	.word	0x08028420
 801a888:	00014585 	.word	0x00014585
 801a88c:	08028418 	.word	0x08028418

0801a890 <RegionCN779TxConfig>:

bool RegionCN779TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801a890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a894:	b08d      	sub	sp, #52	; 0x34
 801a896:	4604      	mov	r4, r0
 801a898:	460f      	mov	r7, r1
 801a89a:	4690      	mov	r8, r2
#if defined( REGION_CN779 )
    RadioModems_t modem;
    int8_t phyDr = DataratesCN779[txConfig->Datarate];
 801a89c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801a8a0:	4a42      	ldr	r2, [pc, #264]	; (801a9ac <RegionCN779TxConfig+0x11c>)
 801a8a2:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801a8a6:	4b42      	ldr	r3, [pc, #264]	; (801a9b0 <RegionCN779TxConfig+0x120>)
 801a8a8:	6819      	ldr	r1, [r3, #0]
 801a8aa:	4d42      	ldr	r5, [pc, #264]	; (801a9b4 <RegionCN779TxConfig+0x124>)
 801a8ac:	682b      	ldr	r3, [r5, #0]
 801a8ae:	7802      	ldrb	r2, [r0, #0]
 801a8b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a8b4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801a8b8:	7a53      	ldrb	r3, [r2, #9]
 801a8ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a8be:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801a8c2:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801a8c6:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801a8ca:	f000 fe8e 	bl	801b5ea <RegionCommonLimitTxPower>
 801a8ce:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsCN779 );
 801a8d0:	4939      	ldr	r1, [pc, #228]	; (801a9b8 <RegionCN779TxConfig+0x128>)
 801a8d2:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801a8d6:	f000 fe8d 	bl	801b5f4 <RegionCommonGetBandwidth>
 801a8da:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801a8dc:	68a2      	ldr	r2, [r4, #8]
 801a8de:	6861      	ldr	r1, [r4, #4]
 801a8e0:	4630      	mov	r0, r6
 801a8e2:	f000 fd9f 	bl	801b424 <RegionCommonComputeTxPower>
 801a8e6:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801a8e8:	4b34      	ldr	r3, [pc, #208]	; (801a9bc <RegionCN779TxConfig+0x12c>)
 801a8ea:	68da      	ldr	r2, [r3, #12]
 801a8ec:	6829      	ldr	r1, [r5, #0]
 801a8ee:	7823      	ldrb	r3, [r4, #0]
 801a8f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a8f4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801a8f8:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801a8fa:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801a8fe:	2b07      	cmp	r3, #7
 801a900:	d031      	beq.n	801a966 <RegionCN779TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801a902:	4b2e      	ldr	r3, [pc, #184]	; (801a9bc <RegionCN779TxConfig+0x12c>)
 801a904:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 801a908:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801a90c:	9308      	str	r3, [sp, #32]
 801a90e:	2200      	movs	r2, #0
 801a910:	9207      	str	r2, [sp, #28]
 801a912:	9206      	str	r2, [sp, #24]
 801a914:	9205      	str	r2, [sp, #20]
 801a916:	2501      	movs	r5, #1
 801a918:	9504      	str	r5, [sp, #16]
 801a91a:	9203      	str	r2, [sp, #12]
 801a91c:	2308      	movs	r3, #8
 801a91e:	9302      	str	r3, [sp, #8]
 801a920:	9501      	str	r5, [sp, #4]
 801a922:	f8cd a000 	str.w	sl, [sp]
 801a926:	464b      	mov	r3, r9
 801a928:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a92a:	4628      	mov	r0, r5
 801a92c:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801a92e:	4b21      	ldr	r3, [pc, #132]	; (801a9b4 <RegionCN779TxConfig+0x124>)
 801a930:	681a      	ldr	r2, [r3, #0]
 801a932:	7823      	ldrb	r3, [r4, #0]
 801a934:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a938:	f994 1001 	ldrsb.w	r1, [r4, #1]
 801a93c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a940:	f000 fe9a 	bl	801b678 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801a944:	89a1      	ldrh	r1, [r4, #12]
 801a946:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801a94a:	f7ff fd13 	bl	801a374 <GetTimeOnAir>
 801a94e:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801a952:	4b1a      	ldr	r3, [pc, #104]	; (801a9bc <RegionCN779TxConfig+0x12c>)
 801a954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a956:	7b21      	ldrb	r1, [r4, #12]
 801a958:	4628      	mov	r0, r5
 801a95a:	4798      	blx	r3

    *txPower = txPowerLimited;
 801a95c:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_CN779 */
}
 801a95e:	2001      	movs	r0, #1
 801a960:	b00d      	add	sp, #52	; 0x34
 801a962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801a966:	4b15      	ldr	r3, [pc, #84]	; (801a9bc <RegionCN779TxConfig+0x12c>)
 801a968:	69dd      	ldr	r5, [r3, #28]
 801a96a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a96e:	fb03 f30a 	mul.w	r3, r3, sl
 801a972:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801a976:	9208      	str	r2, [sp, #32]
 801a978:	f04f 0b00 	mov.w	fp, #0
 801a97c:	f8cd b01c 	str.w	fp, [sp, #28]
 801a980:	f8cd b018 	str.w	fp, [sp, #24]
 801a984:	f8cd b014 	str.w	fp, [sp, #20]
 801a988:	2201      	movs	r2, #1
 801a98a:	9204      	str	r2, [sp, #16]
 801a98c:	f8cd b00c 	str.w	fp, [sp, #12]
 801a990:	2205      	movs	r2, #5
 801a992:	9202      	str	r2, [sp, #8]
 801a994:	f8cd b004 	str.w	fp, [sp, #4]
 801a998:	9300      	str	r3, [sp, #0]
 801a99a:	464b      	mov	r3, r9
 801a99c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801a9a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a9a2:	4658      	mov	r0, fp
 801a9a4:	47a8      	blx	r5
        modem = MODEM_FSK;
 801a9a6:	465d      	mov	r5, fp
 801a9a8:	e7c1      	b.n	801a92e <RegionCN779TxConfig+0x9e>
 801a9aa:	bf00      	nop
 801a9ac:	08028410 	.word	0x08028410
 801a9b0:	20001b70 	.word	0x20001b70
 801a9b4:	20001b74 	.word	0x20001b74
 801a9b8:	080283f0 	.word	0x080283f0
 801a9bc:	08028984 	.word	0x08028984

0801a9c0 <RegionCN779LinkAdrReq>:

uint8_t RegionCN779LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801a9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9c4:	b08f      	sub	sp, #60	; 0x3c
 801a9c6:	4607      	mov	r7, r0
 801a9c8:	468b      	mov	fp, r1
 801a9ca:	4692      	mov	sl, r2
 801a9cc:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_CN779 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801a9ce:	2500      	movs	r5, #0
 801a9d0:	950c      	str	r5, [sp, #48]	; 0x30
 801a9d2:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 801a9d6:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 801a9da:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801a9de:	e02d      	b.n	801aa3c <RegionCN779LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < CN779_MAX_NB_CHANNELS; i++ )
 801a9e0:	2400      	movs	r4, #0
        status = 0x07;
 801a9e2:	f04f 0807 	mov.w	r8, #7
 801a9e6:	e00f      	b.n	801aa08 <RegionCN779LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801a9e8:	4a56      	ldr	r2, [pc, #344]	; (801ab44 <RegionCN779LinkAdrReq+0x184>)
 801a9ea:	6812      	ldr	r2, [r2, #0]
 801a9ec:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801a9f0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801a9f4:	b132      	cbz	r2, 801aa04 <RegionCN779LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 801a9f6:	2201      	movs	r2, #1
 801a9f8:	40a2      	lsls	r2, r4
 801a9fa:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a9fe:	430a      	orrs	r2, r1
 801aa00:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < CN779_MAX_NB_CHANNELS; i++ )
 801aa04:	3401      	adds	r4, #1
 801aa06:	b2e4      	uxtb	r4, r4
 801aa08:	2c0f      	cmp	r4, #15
 801aa0a:	d817      	bhi.n	801aa3c <RegionCN779LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 801aa0c:	2b06      	cmp	r3, #6
 801aa0e:	d0eb      	beq.n	801a9e8 <RegionCN779LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801aa10:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801aa14:	4126      	asrs	r6, r4
 801aa16:	f016 0f01 	tst.w	r6, #1
 801aa1a:	d0f3      	beq.n	801aa04 <RegionCN779LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801aa1c:	4a49      	ldr	r2, [pc, #292]	; (801ab44 <RegionCN779LinkAdrReq+0x184>)
 801aa1e:	6812      	ldr	r2, [r2, #0]
 801aa20:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801aa24:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801aa28:	2a00      	cmp	r2, #0
 801aa2a:	d1eb      	bne.n	801aa04 <RegionCN779LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801aa2c:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 801aa30:	e7e8      	b.n	801aa04 <RegionCN779LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 801aa32:	f04f 0806 	mov.w	r8, #6
 801aa36:	e001      	b.n	801aa3c <RegionCN779LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 801aa38:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801aa3c:	7a3b      	ldrb	r3, [r7, #8]
 801aa3e:	42ab      	cmp	r3, r5
 801aa40:	d919      	bls.n	801aa76 <RegionCN779LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801aa42:	6878      	ldr	r0, [r7, #4]
 801aa44:	a90c      	add	r1, sp, #48	; 0x30
 801aa46:	4428      	add	r0, r5
 801aa48:	f000 fc3c 	bl	801b2c4 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 801aa4c:	b198      	cbz	r0, 801aa76 <RegionCN779LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 801aa4e:	4405      	add	r5, r0
 801aa50:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 801aa52:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801aa56:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801aa5a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801aa5e:	b90b      	cbnz	r3, 801aa64 <RegionCN779LinkAdrReq+0xa4>
 801aa60:	2a00      	cmp	r2, #0
 801aa62:	d0e6      	beq.n	801aa32 <RegionCN779LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801aa64:	1e5a      	subs	r2, r3, #1
 801aa66:	b2d2      	uxtb	r2, r2
 801aa68:	2a04      	cmp	r2, #4
 801aa6a:	d9e5      	bls.n	801aa38 <RegionCN779LinkAdrReq+0x78>
 801aa6c:	2b06      	cmp	r3, #6
 801aa6e:	d9b7      	bls.n	801a9e0 <RegionCN779LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 801aa70:	f04f 0806 	mov.w	r8, #6
 801aa74:	e7e2      	b.n	801aa3c <RegionCN779LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801aa76:	2302      	movs	r3, #2
 801aa78:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801aa7c:	7a7b      	ldrb	r3, [r7, #9]
 801aa7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionCN779GetPhyParam( &getPhy );
 801aa82:	a80a      	add	r0, sp, #40	; 0x28
 801aa84:	f7ff fca8 	bl	801a3d8 <RegionCN779GetPhyParam>

    linkAdrVerifyParams.Status = status;
 801aa88:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801aa8c:	7abb      	ldrb	r3, [r7, #10]
 801aa8e:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801aa92:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801aa96:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801aa9a:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801aa9e:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801aaa2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801aaa6:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801aaaa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801aaae:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801aab2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801aab6:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801aaba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801aabe:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = CN779_MAX_NB_CHANNELS;
 801aac2:	2310      	movs	r3, #16
 801aac4:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801aac8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801aacc:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801aace:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = CN779_TX_MAX_DATARATE;
 801aad2:	2307      	movs	r3, #7
 801aad4:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801aad8:	4b1a      	ldr	r3, [pc, #104]	; (801ab44 <RegionCN779LinkAdrReq+0x184>)
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	9307      	str	r3, [sp, #28]
    linkAdrVerifyParams.MinTxPower = CN779_MIN_TX_POWER;
 801aade:	2305      	movs	r3, #5
 801aae0:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = CN779_MAX_TX_POWER;
 801aae4:	2300      	movs	r3, #0
 801aae6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801aaea:	683b      	ldr	r3, [r7, #0]
 801aaec:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801aaee:	ab0c      	add	r3, sp, #48	; 0x30
 801aaf0:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801aaf4:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 801aaf8:	a801      	add	r0, sp, #4
 801aafa:	f000 fbff 	bl	801b2fc <RegionCommonLinkAdrReqVerifyParams>
 801aafe:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801ab00:	2807      	cmp	r0, #7
 801ab02:	d011      	beq.n	801ab28 <RegionCN779LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801ab04:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801ab08:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 801ab0c:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801ab10:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 801ab14:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801ab18:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 801ab1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ab1e:	701d      	strb	r5, [r3, #0]

#endif /* REGION_CN779 */
    return status;
}
 801ab20:	4620      	mov	r0, r4
 801ab22:	b00f      	add	sp, #60	; 0x3c
 801ab24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801ab28:	4e06      	ldr	r6, [pc, #24]	; (801ab44 <RegionCN779LinkAdrReq+0x184>)
 801ab2a:	6830      	ldr	r0, [r6, #0]
 801ab2c:	220c      	movs	r2, #12
 801ab2e:	2100      	movs	r1, #0
 801ab30:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801ab34:	f005 f9dd 	bl	801fef2 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801ab38:	6833      	ldr	r3, [r6, #0]
 801ab3a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801ab3e:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 801ab42:	e7df      	b.n	801ab04 <RegionCN779LinkAdrReq+0x144>
 801ab44:	20001b74 	.word	0x20001b74

0801ab48 <RegionCN779RxParamSetupReq>:

uint8_t RegionCN779RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801ab48:	b538      	push	{r3, r4, r5, lr}
 801ab4a:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_CN779 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801ab4c:	6840      	ldr	r0, [r0, #4]
 801ab4e:	f7ff fbfd 	bl	801a34c <VerifyRfFreq>
 801ab52:	b1a0      	cbz	r0, 801ab7e <RegionCN779RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 801ab54:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, CN779_RX_MIN_DATARATE, CN779_RX_MAX_DATARATE ) == false )
 801ab56:	2207      	movs	r2, #7
 801ab58:	2100      	movs	r1, #0
 801ab5a:	f994 0000 	ldrsb.w	r0, [r4]
 801ab5e:	f000 fa8e 	bl	801b07e <RegionCommonValueInRange>
 801ab62:	b908      	cbnz	r0, 801ab68 <RegionCN779RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 801ab64:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, CN779_MIN_RX1_DR_OFFSET, CN779_MAX_RX1_DR_OFFSET ) == false )
 801ab68:	2205      	movs	r2, #5
 801ab6a:	2100      	movs	r1, #0
 801ab6c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801ab70:	f000 fa85 	bl	801b07e <RegionCommonValueInRange>
 801ab74:	b908      	cbnz	r0, 801ab7a <RegionCN779RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801ab76:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_CN779 */
    return status;
}
 801ab7a:	4628      	mov	r0, r5
 801ab7c:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 801ab7e:	2506      	movs	r5, #6
 801ab80:	e7e9      	b.n	801ab56 <RegionCN779RxParamSetupReq+0xe>

0801ab82 <RegionCN779TxParamSetupReq>:

int8_t RegionCN779TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 801ab82:	f04f 30ff 	mov.w	r0, #4294967295
 801ab86:	4770      	bx	lr

0801ab88 <RegionCN779DlChannelReq>:

int8_t RegionCN779DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801ab88:	b510      	push	{r4, lr}
 801ab8a:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_CN779 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 801ab8c:	6840      	ldr	r0, [r0, #4]
 801ab8e:	f7ff fbdd 	bl	801a34c <VerifyRfFreq>
 801ab92:	b170      	cbz	r0, 801abb2 <RegionCN779DlChannelReq+0x2a>
    uint8_t status = 0x03;
 801ab94:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801ab96:	4b0b      	ldr	r3, [pc, #44]	; (801abc4 <RegionCN779DlChannelReq+0x3c>)
 801ab98:	681a      	ldr	r2, [r3, #0]
 801ab9a:	7823      	ldrb	r3, [r4, #0]
 801ab9c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801aba0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801aba4:	b909      	cbnz	r1, 801abaa <RegionCN779DlChannelReq+0x22>
    {
        status &= 0xFD;
 801aba6:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801abaa:	2803      	cmp	r0, #3
 801abac:	d003      	beq.n	801abb6 <RegionCN779DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_CN779 */
    return status;
}
 801abae:	b240      	sxtb	r0, r0
 801abb0:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 801abb2:	2002      	movs	r0, #2
 801abb4:	e7ef      	b.n	801ab96 <RegionCN779DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801abb6:	6861      	ldr	r1, [r4, #4]
 801abb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801abbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801abc0:	6059      	str	r1, [r3, #4]
 801abc2:	e7f4      	b.n	801abae <RegionCN779DlChannelReq+0x26>
 801abc4:	20001b74 	.word	0x20001b74

0801abc8 <RegionCN779AlternateDr>:

int8_t RegionCN779AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    return currentDr;
}
 801abc8:	4770      	bx	lr
	...

0801abcc <RegionCN779NextChannel>:

LoRaMacStatus_t RegionCN779NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801abcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abce:	b097      	sub	sp, #92	; 0x5c
 801abd0:	4604      	mov	r4, r0
 801abd2:	460f      	mov	r7, r1
 801abd4:	4616      	mov	r6, r2
 801abd6:	461d      	mov	r5, r3
#if defined( REGION_CN779 )
    uint8_t nbEnabledChannels = 0;
 801abd8:	2100      	movs	r1, #0
 801abda:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 801abde:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[CN779_MAX_NB_CHANNELS] = { 0 };
 801abe2:	9111      	str	r1, [sp, #68]	; 0x44
 801abe4:	9112      	str	r1, [sp, #72]	; 0x48
 801abe6:	9113      	str	r1, [sp, #76]	; 0x4c
 801abe8:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = CN779_JOIN_CHANNELS;
 801abea:	2307      	movs	r3, #7
 801abec:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801abf0:	4b32      	ldr	r3, [pc, #200]	; (801acbc <RegionCN779NextChannel+0xf0>)
 801abf2:	6818      	ldr	r0, [r3, #0]
 801abf4:	2201      	movs	r2, #1
 801abf6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801abfa:	f000 fa9c 	bl	801b136 <RegionCommonCountChannels>
 801abfe:	b938      	cbnz	r0, 801ac10 <RegionCN779NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801ac00:	4b2e      	ldr	r3, [pc, #184]	; (801acbc <RegionCN779NextChannel+0xf0>)
 801ac02:	681a      	ldr	r2, [r3, #0]
 801ac04:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801ac08:	f043 0307 	orr.w	r3, r3, #7
 801ac0c:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801ac10:	7a63      	ldrb	r3, [r4, #9]
 801ac12:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801ac16:	7a23      	ldrb	r3, [r4, #8]
 801ac18:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801ac1c:	4b27      	ldr	r3, [pc, #156]	; (801acbc <RegionCN779NextChannel+0xf0>)
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	f503 7258 	add.w	r2, r3, #864	; 0x360
 801ac24:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801ac26:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801ac28:	4b25      	ldr	r3, [pc, #148]	; (801acc0 <RegionCN779NextChannel+0xf4>)
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = CN779_MAX_NB_CHANNELS;
 801ac2e:	2310      	movs	r3, #16
 801ac30:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 801ac34:	f10d 030a 	add.w	r3, sp, #10
 801ac38:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801ac3a:	6823      	ldr	r3, [r4, #0]
 801ac3c:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801ac3e:	6863      	ldr	r3, [r4, #4]
 801ac40:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801ac42:	7aa3      	ldrb	r3, [r4, #10]
 801ac44:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = CN779_MAX_NB_BANDS;
 801ac48:	2301      	movs	r3, #1
 801ac4a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801ac4e:	ab0c      	add	r3, sp, #48	; 0x30
 801ac50:	6921      	ldr	r1, [r4, #16]
 801ac52:	68e0      	ldr	r0, [r4, #12]
 801ac54:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801ac58:	7d23      	ldrb	r3, [r4, #20]
 801ac5a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801ac5e:	8ae1      	ldrh	r1, [r4, #22]
 801ac60:	f994 0008 	ldrsb.w	r0, [r4, #8]
 801ac64:	f7ff fb86 	bl	801a374 <GetTimeOnAir>
 801ac68:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801ac6a:	ab03      	add	r3, sp, #12
 801ac6c:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801ac6e:	9601      	str	r6, [sp, #4]
 801ac70:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 801ac74:	9300      	str	r3, [sp, #0]
 801ac76:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 801ac7a:	aa11      	add	r2, sp, #68	; 0x44
 801ac7c:	4629      	mov	r1, r5
 801ac7e:	a809      	add	r0, sp, #36	; 0x24
 801ac80:	f000 fc4c 	bl	801b51c <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801ac84:	4604      	mov	r4, r0
 801ac86:	b120      	cbz	r0, 801ac92 <RegionCN779NextChannel+0xc6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801ac88:	280c      	cmp	r0, #12
 801ac8a:	d00d      	beq.n	801aca8 <RegionCN779NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_CN779 */
}
 801ac8c:	4620      	mov	r0, r4
 801ac8e:	b017      	add	sp, #92	; 0x5c
 801ac90:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801ac92:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 801ac96:	3901      	subs	r1, #1
 801ac98:	f005 f908 	bl	801feac <randr>
 801ac9c:	ab16      	add	r3, sp, #88	; 0x58
 801ac9e:	4418      	add	r0, r3
 801aca0:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 801aca4:	703b      	strb	r3, [r7, #0]
 801aca6:	e7f1      	b.n	801ac8c <RegionCN779NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801aca8:	4b04      	ldr	r3, [pc, #16]	; (801acbc <RegionCN779NextChannel+0xf0>)
 801acaa:	681a      	ldr	r2, [r3, #0]
 801acac:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801acb0:	f043 0307 	orr.w	r3, r3, #7
 801acb4:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 801acb8:	e7e8      	b.n	801ac8c <RegionCN779NextChannel+0xc0>
 801acba:	bf00      	nop
 801acbc:	20001b74 	.word	0x20001b74
 801acc0:	20001b70 	.word	0x20001b70

0801acc4 <RegionCN779ChannelAdd>:

LoRaMacStatus_t RegionCN779ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_CN779 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 801acc6:	7905      	ldrb	r5, [r0, #4]

    if( id < CN779_NUMB_DEFAULT_CHANNELS )
 801acc8:	2d02      	cmp	r5, #2
 801acca:	d94b      	bls.n	801ad64 <RegionCN779ChannelAdd+0xa0>
 801accc:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= CN779_MAX_NB_CHANNELS )
 801acce:	2d0f      	cmp	r5, #15
 801acd0:	d84a      	bhi.n	801ad68 <RegionCN779ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE ) == false )
 801acd2:	6803      	ldr	r3, [r0, #0]
 801acd4:	7a18      	ldrb	r0, [r3, #8]
 801acd6:	f340 0003 	sbfx	r0, r0, #0, #4
 801acda:	2207      	movs	r2, #7
 801acdc:	2100      	movs	r1, #0
 801acde:	b240      	sxtb	r0, r0
 801ace0:	f000 f9cd 	bl	801b07e <RegionCommonValueInRange>
 801ace4:	2800      	cmp	r0, #0
 801ace6:	d039      	beq.n	801ad5c <RegionCN779ChannelAdd+0x98>
    bool drInvalid = false;
 801ace8:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE ) == false )
 801acea:	6823      	ldr	r3, [r4, #0]
 801acec:	7a18      	ldrb	r0, [r3, #8]
 801acee:	f340 1003 	sbfx	r0, r0, #4, #4
 801acf2:	2207      	movs	r2, #7
 801acf4:	2100      	movs	r1, #0
 801acf6:	b240      	sxtb	r0, r0
 801acf8:	f000 f9c1 	bl	801b07e <RegionCommonValueInRange>
 801acfc:	b900      	cbnz	r0, 801ad00 <RegionCN779ChannelAdd+0x3c>
    {
        drInvalid = true;
 801acfe:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801ad00:	6821      	ldr	r1, [r4, #0]
 801ad02:	7a0b      	ldrb	r3, [r1, #8]
 801ad04:	f343 0203 	sbfx	r2, r3, #0, #4
 801ad08:	b252      	sxtb	r2, r2
 801ad0a:	f343 1303 	sbfx	r3, r3, #4, #4
 801ad0e:	b25b      	sxtb	r3, r3
 801ad10:	429a      	cmp	r2, r3
 801ad12:	dd00      	ble.n	801ad16 <RegionCN779ChannelAdd+0x52>
    {
        drInvalid = true;
 801ad14:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 801ad16:	6808      	ldr	r0, [r1, #0]
 801ad18:	f7ff fb18 	bl	801a34c <VerifyRfFreq>
 801ad1c:	b300      	cbz	r0, 801ad60 <RegionCN779ChannelAdd+0x9c>
    bool freqInvalid = false;
 801ad1e:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801ad20:	b106      	cbz	r6, 801ad24 <RegionCN779ChannelAdd+0x60>
 801ad22:	bb1b      	cbnz	r3, 801ad6c <RegionCN779ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 801ad24:	bb26      	cbnz	r6, 801ad70 <RegionCN779ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 801ad26:	bb2b      	cbnz	r3, 801ad74 <RegionCN779ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801ad28:	4f13      	ldr	r7, [pc, #76]	; (801ad78 <RegionCN779ChannelAdd+0xb4>)
 801ad2a:	683b      	ldr	r3, [r7, #0]
 801ad2c:	006e      	lsls	r6, r5, #1
 801ad2e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801ad32:	220c      	movs	r2, #12
 801ad34:	6821      	ldr	r1, [r4, #0]
 801ad36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801ad3a:	f005 f8c4 	bl	801fec6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 801ad3e:	683a      	ldr	r2, [r7, #0]
 801ad40:	442e      	add	r6, r5
 801ad42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ad46:	2000      	movs	r0, #0
 801ad48:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 801ad4a:	2301      	movs	r3, #1
 801ad4c:	fa03 f505 	lsl.w	r5, r3, r5
 801ad50:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801ad54:	431d      	orrs	r5, r3
 801ad56:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 801ad5a:	e006      	b.n	801ad6a <RegionCN779ChannelAdd+0xa6>
        drInvalid = true;
 801ad5c:	2601      	movs	r6, #1
 801ad5e:	e7c4      	b.n	801acea <RegionCN779ChannelAdd+0x26>
            freqInvalid = true;
 801ad60:	2301      	movs	r3, #1
 801ad62:	e7dd      	b.n	801ad20 <RegionCN779ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801ad64:	2006      	movs	r0, #6
 801ad66:	e000      	b.n	801ad6a <RegionCN779ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801ad68:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_CN779 */
}
 801ad6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801ad6c:	2006      	movs	r0, #6
 801ad6e:	e7fc      	b.n	801ad6a <RegionCN779ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 801ad70:	2005      	movs	r0, #5
 801ad72:	e7fa      	b.n	801ad6a <RegionCN779ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801ad74:	2004      	movs	r0, #4
 801ad76:	e7f8      	b.n	801ad6a <RegionCN779ChannelAdd+0xa6>
 801ad78:	20001b74 	.word	0x20001b74

0801ad7c <RegionCN779ChannelsRemove>:

bool RegionCN779ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_CN779 )
    uint8_t id = channelRemove->ChannelId;
 801ad7c:	7801      	ldrb	r1, [r0, #0]

    if( id < CN779_NUMB_DEFAULT_CHANNELS )
 801ad7e:	2902      	cmp	r1, #2
 801ad80:	d801      	bhi.n	801ad86 <RegionCN779ChannelsRemove+0xa>
    {
        return false;
 801ad82:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, CN779_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_CN779 */
}
 801ad84:	4770      	bx	lr
{
 801ad86:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801ad88:	4b08      	ldr	r3, [pc, #32]	; (801adac <RegionCN779ChannelsRemove+0x30>)
 801ad8a:	6818      	ldr	r0, [r3, #0]
 801ad8c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 801ad90:	009c      	lsls	r4, r3, #2
 801ad92:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801ad96:	2200      	movs	r2, #0
 801ad98:	5102      	str	r2, [r0, r4]
 801ad9a:	605a      	str	r2, [r3, #4]
 801ad9c:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, CN779_MAX_NB_CHANNELS );
 801ad9e:	2210      	movs	r2, #16
 801ada0:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801ada4:	f000 f9ad 	bl	801b102 <RegionCommonChanDisable>
}
 801ada8:	bd10      	pop	{r4, pc}
 801adaa:	bf00      	nop
 801adac:	20001b74 	.word	0x20001b74

0801adb0 <RegionCN779ApplyCFList>:
{
 801adb0:	b570      	push	{r4, r5, r6, lr}
 801adb2:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801adb4:	2350      	movs	r3, #80	; 0x50
 801adb6:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 801adba:	7903      	ldrb	r3, [r0, #4]
 801adbc:	2b10      	cmp	r3, #16
 801adbe:	d135      	bne.n	801ae2c <RegionCN779ApplyCFList+0x7c>
 801adc0:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 801adc2:	6803      	ldr	r3, [r0, #0]
 801adc4:	7bdd      	ldrb	r5, [r3, #15]
 801adc6:	2d00      	cmp	r5, #0
 801adc8:	d130      	bne.n	801ae2c <RegionCN779ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = CN779_NUMB_DEFAULT_CHANNELS; chanIdx < CN779_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801adca:	2403      	movs	r4, #3
 801adcc:	e01a      	b.n	801ae04 <RegionCN779ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801adce:	6832      	ldr	r2, [r6, #0]
 801add0:	5d53      	ldrb	r3, [r2, r5]
 801add2:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801add4:	442a      	add	r2, r5
 801add6:	7851      	ldrb	r1, [r2, #1]
 801add8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801addc:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801adde:	7892      	ldrb	r2, [r2, #2]
 801ade0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 801ade4:	2264      	movs	r2, #100	; 0x64
 801ade6:	fb02 f303 	mul.w	r3, r2, r3
 801adea:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 801adec:	2300      	movs	r3, #0
 801adee:	9304      	str	r3, [sp, #16]
 801adf0:	e011      	b.n	801ae16 <RegionCN779ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 801adf2:	f88d 4000 	strb.w	r4, [sp]
            RegionCN779ChannelsRemove( &channelRemove );
 801adf6:	4668      	mov	r0, sp
 801adf8:	f7ff ffc0 	bl	801ad7c <RegionCN779ChannelsRemove>
    for( uint8_t i = 0, chanIdx = CN779_NUMB_DEFAULT_CHANNELS; chanIdx < CN779_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801adfc:	3503      	adds	r5, #3
 801adfe:	b2ed      	uxtb	r5, r5
 801ae00:	3401      	adds	r4, #1
 801ae02:	b2e4      	uxtb	r4, r4
 801ae04:	2c0f      	cmp	r4, #15
 801ae06:	d811      	bhi.n	801ae2c <RegionCN779ApplyCFList+0x7c>
        if( chanIdx < ( CN779_NUMB_CHANNELS_CF_LIST + CN779_NUMB_DEFAULT_CHANNELS ) )
 801ae08:	2c07      	cmp	r4, #7
 801ae0a:	d9e0      	bls.n	801adce <RegionCN779ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 801ae0c:	2300      	movs	r3, #0
 801ae0e:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 801ae10:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 801ae14:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 801ae16:	9b03      	ldr	r3, [sp, #12]
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d0ea      	beq.n	801adf2 <RegionCN779ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 801ae1c:	ab03      	add	r3, sp, #12
 801ae1e:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 801ae20:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionCN779ChannelAdd( &channelAdd );
 801ae24:	a801      	add	r0, sp, #4
 801ae26:	f7ff ff4d 	bl	801acc4 <RegionCN779ChannelAdd>
 801ae2a:	e7e7      	b.n	801adfc <RegionCN779ApplyCFList+0x4c>
}
 801ae2c:	b006      	add	sp, #24
 801ae2e:	bd70      	pop	{r4, r5, r6, pc}

0801ae30 <RegionCN779NewChannelReq>:
{
 801ae30:	b500      	push	{lr}
 801ae32:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 801ae34:	6803      	ldr	r3, [r0, #0]
 801ae36:	681a      	ldr	r2, [r3, #0]
 801ae38:	b952      	cbnz	r2, 801ae50 <RegionCN779NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801ae3a:	7903      	ldrb	r3, [r0, #4]
 801ae3c:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionCN779ChannelsRemove( &channelRemove ) == false )
 801ae40:	a801      	add	r0, sp, #4
 801ae42:	f7ff ff9b 	bl	801ad7c <RegionCN779ChannelsRemove>
 801ae46:	b1d0      	cbz	r0, 801ae7e <RegionCN779NewChannelReq+0x4e>
    uint8_t status = 0x03;
 801ae48:	2003      	movs	r0, #3
}
 801ae4a:	b005      	add	sp, #20
 801ae4c:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801ae50:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801ae52:	7903      	ldrb	r3, [r0, #4]
 801ae54:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionCN779ChannelAdd( &channelAdd ) )
 801ae58:	a802      	add	r0, sp, #8
 801ae5a:	f7ff ff33 	bl	801acc4 <RegionCN779ChannelAdd>
 801ae5e:	2806      	cmp	r0, #6
 801ae60:	d80b      	bhi.n	801ae7a <RegionCN779NewChannelReq+0x4a>
 801ae62:	e8df f000 	tbb	[pc, r0]
 801ae66:	0a04      	.short	0x0a04
 801ae68:	060e0a0a 	.word	0x060e0a0a
 801ae6c:	08          	.byte	0x08
 801ae6d:	00          	.byte	0x00
 801ae6e:	2003      	movs	r0, #3
 801ae70:	e7eb      	b.n	801ae4a <RegionCN779NewChannelReq+0x1a>
                status &= 0xFD;
 801ae72:	2001      	movs	r0, #1
                break;
 801ae74:	e7e9      	b.n	801ae4a <RegionCN779NewChannelReq+0x1a>
                status &= 0xFC;
 801ae76:	2000      	movs	r0, #0
                break;
 801ae78:	e7e7      	b.n	801ae4a <RegionCN779NewChannelReq+0x1a>
                status &= 0xFC;
 801ae7a:	2000      	movs	r0, #0
                break;
 801ae7c:	e7e5      	b.n	801ae4a <RegionCN779NewChannelReq+0x1a>
            status &= 0xFC;
 801ae7e:	2000      	movs	r0, #0
 801ae80:	e7e3      	b.n	801ae4a <RegionCN779NewChannelReq+0x1a>
                status &= 0xFE;
 801ae82:	2002      	movs	r0, #2
 801ae84:	e7e1      	b.n	801ae4a <RegionCN779NewChannelReq+0x1a>
	...

0801ae88 <RegionCN779SetContinuousWave>:

void RegionCN779SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801ae88:	b538      	push	{r3, r4, r5, lr}
 801ae8a:	4604      	mov	r4, r0
#if defined( REGION_CN779 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801ae8c:	4b12      	ldr	r3, [pc, #72]	; (801aed8 <RegionCN779SetContinuousWave+0x50>)
 801ae8e:	6819      	ldr	r1, [r3, #0]
 801ae90:	4d12      	ldr	r5, [pc, #72]	; (801aedc <RegionCN779SetContinuousWave+0x54>)
 801ae92:	682b      	ldr	r3, [r5, #0]
 801ae94:	7802      	ldrb	r2, [r0, #0]
 801ae96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ae9a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801ae9e:	7a53      	ldrb	r3, [r2, #9]
 801aea0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aea4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801aea8:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801aeac:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801aeb0:	f000 fb9b 	bl	801b5ea <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801aeb4:	682a      	ldr	r2, [r5, #0]
 801aeb6:	7823      	ldrb	r3, [r4, #0]
 801aeb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aebc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801aec0:	68a2      	ldr	r2, [r4, #8]
 801aec2:	6861      	ldr	r1, [r4, #4]
 801aec4:	f000 faae 	bl	801b424 <RegionCommonComputeTxPower>
 801aec8:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801aeca:	4b05      	ldr	r3, [pc, #20]	; (801aee0 <RegionCN779SetContinuousWave+0x58>)
 801aecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aece:	89a2      	ldrh	r2, [r4, #12]
 801aed0:	4628      	mov	r0, r5
 801aed2:	4798      	blx	r3
#endif /* REGION_CN779 */
}
 801aed4:	bd38      	pop	{r3, r4, r5, pc}
 801aed6:	bf00      	nop
 801aed8:	20001b70 	.word	0x20001b70
 801aedc:	20001b74 	.word	0x20001b74
 801aee0:	08028984 	.word	0x08028984

0801aee4 <RegionCN779ApplyDrOffset>:

uint8_t RegionCN779ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_CN779 )
    int8_t datarate = dr - drOffset;
 801aee4:	1a88      	subs	r0, r1, r2
 801aee6:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 801aee8:	2800      	cmp	r0, #0
 801aeea:	db01      	blt.n	801aef0 <RegionCN779ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_CN779 */
}
 801aeec:	b2c0      	uxtb	r0, r0
 801aeee:	4770      	bx	lr
        datarate = DR_0;
 801aef0:	2000      	movs	r0, #0
 801aef2:	e7fb      	b.n	801aeec <RegionCN779ApplyDrOffset+0x8>

0801aef4 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801aef4:	b082      	sub	sp, #8
 801aef6:	f10d 0c08 	add.w	ip, sp, #8
 801aefa:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 801aefe:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 801af00:	b971      	cbnz	r1, 801af20 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801af02:	9b00      	ldr	r3, [sp, #0]
 801af04:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801af08:	d306      	bcc.n	801af18 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801af0a:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801af0e:	4293      	cmp	r3, r2
 801af10:	d80a      	bhi.n	801af28 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 801af12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801af16:	e000      	b.n	801af1a <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 801af18:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801af1a:	4298      	cmp	r0, r3
 801af1c:	bf38      	it	cc
 801af1e:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801af20:	b900      	cbnz	r0, 801af24 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 801af22:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 801af24:	b002      	add	sp, #8
 801af26:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801af28:	f242 7310 	movw	r3, #10000	; 0x2710
 801af2c:	e7f5      	b.n	801af1a <GetDutyCycle+0x26>

0801af2e <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801af2e:	b410      	push	{r4}
 801af30:	4604      	mov	r4, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 801af32:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 801af34:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 801af36:	e001      	b.n	801af3c <CountChannels+0xe>
 801af38:	3301      	adds	r3, #1
 801af3a:	b2db      	uxtb	r3, r3
 801af3c:	428b      	cmp	r3, r1
 801af3e:	d206      	bcs.n	801af4e <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801af40:	2201      	movs	r2, #1
 801af42:	409a      	lsls	r2, r3
 801af44:	43a2      	bics	r2, r4
 801af46:	d1f7      	bne.n	801af38 <CountChannels+0xa>
        {
            nbActiveBits++;
 801af48:	3001      	adds	r0, #1
 801af4a:	b2c0      	uxtb	r0, r0
 801af4c:	e7f4      	b.n	801af38 <CountChannels+0xa>
        }
    }
    return nbActiveBits;
}
 801af4e:	bc10      	pop	{r4}
 801af50:	4770      	bx	lr
	...

0801af54 <SetMaxTimeCredits>:
{
 801af54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af58:	b089      	sub	sp, #36	; 0x24
 801af5a:	4604      	mov	r4, r0
 801af5c:	460e      	mov	r6, r1
 801af5e:	ad02      	add	r5, sp, #8
 801af60:	e885 000c 	stmia.w	r5, {r2, r3}
 801af64:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801af68:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801af6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801af70:	f007 fc9e 	bl	80228b0 <SysTimeToMs>
 801af74:	4681      	mov	r9, r0
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801af76:	e895 000c 	ldmia.w	r5, {r2, r3}
 801af7a:	4631      	mov	r1, r6
 801af7c:	4620      	mov	r0, r4
 801af7e:	f7ff ffb9 	bl	801aef4 <GetDutyCycle>
 801af82:	4605      	mov	r5, r0
    if( joined == false )
 801af84:	2e00      	cmp	r6, #0
 801af86:	d149      	bne.n	801b01c <SetMaxTimeCredits+0xc8>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 801af88:	2864      	cmp	r0, #100	; 0x64
 801af8a:	d023      	beq.n	801afd4 <SetMaxTimeCredits+0x80>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801af8c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801af90:	d024      	beq.n	801afdc <SetMaxTimeCredits+0x88>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801af92:	4e25      	ldr	r6, [pc, #148]	; (801b028 <SetMaxTimeCredits+0xd4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801af94:	68a1      	ldr	r1, [r4, #8]
 801af96:	a806      	add	r0, sp, #24
 801af98:	f007 fcaa 	bl	80228f0 <SysTimeFromMs>
 801af9c:	9b07      	ldr	r3, [sp, #28]
 801af9e:	9300      	str	r3, [sp, #0]
 801afa0:	9b06      	ldr	r3, [sp, #24]
 801afa2:	9a03      	ldr	r2, [sp, #12]
 801afa4:	9902      	ldr	r1, [sp, #8]
 801afa6:	a804      	add	r0, sp, #16
 801afa8:	f007 fc0c 	bl	80227c4 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801afac:	b917      	cbnz	r7, 801afb4 <SetMaxTimeCredits+0x60>
 801afae:	f1b8 0f00 	cmp.w	r8, #0
 801afb2:	d002      	beq.n	801afba <SetMaxTimeCredits+0x66>
            ( band->MaxTimeCredits != maxCredits ) ||
 801afb4:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801afb6:	42b3      	cmp	r3, r6
 801afb8:	d014      	beq.n	801afe4 <SetMaxTimeCredits+0x90>
            band->TimeCredits = maxCredits;
 801afba:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801afbc:	9b02      	ldr	r3, [sp, #8]
 801afbe:	4a1b      	ldr	r2, [pc, #108]	; (801b02c <SetMaxTimeCredits+0xd8>)
 801afc0:	4293      	cmp	r3, r2
 801afc2:	d814      	bhi.n	801afee <SetMaxTimeCredits+0x9a>
    if( band->LastBandUpdateTime == 0 )
 801afc4:	6863      	ldr	r3, [r4, #4]
 801afc6:	b903      	cbnz	r3, 801afca <SetMaxTimeCredits+0x76>
        band->TimeCredits = maxCredits;
 801afc8:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 801afca:	6126      	str	r6, [r4, #16]
}
 801afcc:	4628      	mov	r0, r5
 801afce:	b009      	add	sp, #36	; 0x24
 801afd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 801afd4:	f8c4 9008 	str.w	r9, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801afd8:	4e15      	ldr	r6, [pc, #84]	; (801b030 <SetMaxTimeCredits+0xdc>)
 801afda:	e7db      	b.n	801af94 <SetMaxTimeCredits+0x40>
            band->LastMaxCreditAssignTime = elapsedTime;
 801afdc:	f8c4 9008 	str.w	r9, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801afe0:	4e14      	ldr	r6, [pc, #80]	; (801b034 <SetMaxTimeCredits+0xe0>)
 801afe2:	e7d7      	b.n	801af94 <SetMaxTimeCredits+0x40>
            ( band->MaxTimeCredits != maxCredits ) ||
 801afe4:	9a04      	ldr	r2, [sp, #16]
 801afe6:	4b14      	ldr	r3, [pc, #80]	; (801b038 <SetMaxTimeCredits+0xe4>)
 801afe8:	429a      	cmp	r2, r3
 801afea:	d9eb      	bls.n	801afc4 <SetMaxTimeCredits+0x70>
 801afec:	e7e5      	b.n	801afba <SetMaxTimeCredits+0x66>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 801afee:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801aff2:	3b30      	subs	r3, #48	; 0x30
 801aff4:	4a11      	ldr	r2, [pc, #68]	; (801b03c <SetMaxTimeCredits+0xe8>)
 801aff6:	fba2 2303 	umull	r2, r3, r2, r3
 801affa:	0c1b      	lsrs	r3, r3, #16
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801affc:	4a10      	ldr	r2, [pc, #64]	; (801b040 <SetMaxTimeCredits+0xec>)
 801affe:	fb02 f303 	mul.w	r3, r2, r3
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801b002:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801b006:	3330      	adds	r3, #48	; 0x30
 801b008:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 801b00a:	2300      	movs	r3, #0
 801b00c:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801b010:	9905      	ldr	r1, [sp, #20]
 801b012:	9804      	ldr	r0, [sp, #16]
 801b014:	f007 fc4c 	bl	80228b0 <SysTimeToMs>
 801b018:	60a0      	str	r0, [r4, #8]
 801b01a:	e7d3      	b.n	801afc4 <SetMaxTimeCredits+0x70>
        if( dutyCycleEnabled == false )
 801b01c:	b917      	cbnz	r7, 801b024 <SetMaxTimeCredits+0xd0>
            band->TimeCredits = maxCredits;
 801b01e:	4e04      	ldr	r6, [pc, #16]	; (801b030 <SetMaxTimeCredits+0xdc>)
 801b020:	60e6      	str	r6, [r4, #12]
 801b022:	e7cf      	b.n	801afc4 <SetMaxTimeCredits+0x70>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801b024:	4e02      	ldr	r6, [pc, #8]	; (801b030 <SetMaxTimeCredits+0xdc>)
 801b026:	e7cd      	b.n	801afc4 <SetMaxTimeCredits+0x70>
 801b028:	02932e00 	.word	0x02932e00
 801b02c:	0001ec2f 	.word	0x0001ec2f
 801b030:	001b7740 	.word	0x001b7740
 801b034:	0112a880 	.word	0x0112a880
 801b038:	0001517f 	.word	0x0001517f
 801b03c:	c22e4507 	.word	0xc22e4507
 801b040:	00015180 	.word	0x00015180

0801b044 <UpdateTimeCredits>:
{
 801b044:	b570      	push	{r4, r5, r6, lr}
 801b046:	b082      	sub	sp, #8
 801b048:	4604      	mov	r4, r0
 801b04a:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801b04c:	9301      	str	r3, [sp, #4]
 801b04e:	9200      	str	r2, [sp, #0]
 801b050:	ab06      	add	r3, sp, #24
 801b052:	cb0c      	ldmia	r3, {r2, r3}
 801b054:	f7ff ff7e 	bl	801af54 <SetMaxTimeCredits>
 801b058:	4605      	mov	r5, r0
    if( joined == true )
 801b05a:	b94e      	cbnz	r6, 801b070 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 801b05c:	68e2      	ldr	r2, [r4, #12]
 801b05e:	6923      	ldr	r3, [r4, #16]
 801b060:	429a      	cmp	r2, r3
 801b062:	d900      	bls.n	801b066 <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 801b064:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 801b066:	9b08      	ldr	r3, [sp, #32]
 801b068:	6063      	str	r3, [r4, #4]
}
 801b06a:	4628      	mov	r0, r5
 801b06c:	b002      	add	sp, #8
 801b06e:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801b070:	6860      	ldr	r0, [r4, #4]
 801b072:	f007 fd09 	bl	8022a88 <UTIL_TIMER_GetElapsedTime>
 801b076:	68e3      	ldr	r3, [r4, #12]
 801b078:	4403      	add	r3, r0
 801b07a:	60e3      	str	r3, [r4, #12]
 801b07c:	e7ee      	b.n	801b05c <UpdateTimeCredits+0x18>

0801b07e <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 801b07e:	4288      	cmp	r0, r1
 801b080:	db03      	blt.n	801b08a <RegionCommonValueInRange+0xc>
 801b082:	4290      	cmp	r0, r2
 801b084:	dd03      	ble.n	801b08e <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 801b086:	2000      	movs	r0, #0
 801b088:	4770      	bx	lr
 801b08a:	2000      	movs	r0, #0
 801b08c:	4770      	bx	lr
        return 1;
 801b08e:	2001      	movs	r0, #1
}
 801b090:	4770      	bx	lr

0801b092 <RegionCommonChanVerifyDr>:
{
 801b092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b096:	4682      	mov	sl, r0
 801b098:	460e      	mov	r6, r1
 801b09a:	4690      	mov	r8, r2
 801b09c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801b0a0:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 801b0a4:	4619      	mov	r1, r3
 801b0a6:	4640      	mov	r0, r8
 801b0a8:	f7ff ffe9 	bl	801b07e <RegionCommonValueInRange>
 801b0ac:	b338      	cbz	r0, 801b0fe <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801b0ae:	2500      	movs	r5, #0
 801b0b0:	462f      	mov	r7, r5
 801b0b2:	e01e      	b.n	801b0f2 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 801b0b4:	3401      	adds	r4, #1
 801b0b6:	b2e4      	uxtb	r4, r4
 801b0b8:	2c0f      	cmp	r4, #15
 801b0ba:	d816      	bhi.n	801b0ea <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801b0bc:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 801b0c0:	4123      	asrs	r3, r4
 801b0c2:	f013 0f01 	tst.w	r3, #1
 801b0c6:	d0f5      	beq.n	801b0b4 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801b0c8:	193b      	adds	r3, r7, r4
 801b0ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b0ce:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801b0d2:	7a19      	ldrb	r1, [r3, #8]
 801b0d4:	090a      	lsrs	r2, r1, #4
 801b0d6:	f001 010f 	and.w	r1, r1, #15
 801b0da:	4640      	mov	r0, r8
 801b0dc:	f7ff ffcf 	bl	801b07e <RegionCommonValueInRange>
 801b0e0:	2801      	cmp	r0, #1
 801b0e2:	d1e7      	bne.n	801b0b4 <RegionCommonChanVerifyDr+0x22>
                    return true;
 801b0e4:	2001      	movs	r0, #1
}
 801b0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801b0ea:	3710      	adds	r7, #16
 801b0ec:	b2ff      	uxtb	r7, r7
 801b0ee:	3501      	adds	r5, #1
 801b0f0:	b2ed      	uxtb	r5, r5
 801b0f2:	4557      	cmp	r7, sl
 801b0f4:	d201      	bcs.n	801b0fa <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 801b0f6:	2400      	movs	r4, #0
 801b0f8:	e7de      	b.n	801b0b8 <RegionCommonChanVerifyDr+0x26>
    return false;
 801b0fa:	2000      	movs	r0, #0
 801b0fc:	e7f3      	b.n	801b0e6 <RegionCommonChanVerifyDr+0x54>
        return false;
 801b0fe:	2000      	movs	r0, #0
 801b100:	e7f1      	b.n	801b0e6 <RegionCommonChanVerifyDr+0x54>

0801b102 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801b102:	0913      	lsrs	r3, r2, #4
 801b104:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 801b108:	d311      	bcc.n	801b12e <RegionCommonChanDisable+0x2c>
{
 801b10a:	b410      	push	{r4}
 801b10c:	090c      	lsrs	r4, r1, #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801b10e:	4291      	cmp	r1, r2
 801b110:	d20f      	bcs.n	801b132 <RegionCommonChanDisable+0x30>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801b112:	f001 010f 	and.w	r1, r1, #15
 801b116:	2301      	movs	r3, #1
 801b118:	fa03 f101 	lsl.w	r1, r3, r1
 801b11c:	f830 2014 	ldrh.w	r2, [r0, r4, lsl #1]
 801b120:	ea22 0101 	bic.w	r1, r2, r1
 801b124:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]

    return true;
 801b128:	4618      	mov	r0, r3
}
 801b12a:	bc10      	pop	{r4}
 801b12c:	4770      	bx	lr
        return false;
 801b12e:	2000      	movs	r0, #0
}
 801b130:	4770      	bx	lr
        return false;
 801b132:	2000      	movs	r0, #0
 801b134:	e7f9      	b.n	801b12a <RegionCommonChanDisable+0x28>

0801b136 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 801b136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 801b138:	b188      	cbz	r0, 801b15e <RegionCommonCountChannels+0x28>
 801b13a:	460c      	mov	r4, r1
 801b13c:	4616      	mov	r6, r2
 801b13e:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 801b140:	2500      	movs	r5, #0
 801b142:	e008      	b.n	801b156 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801b144:	2110      	movs	r1, #16
 801b146:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 801b14a:	f7ff fef0 	bl	801af2e <CountChannels>
 801b14e:	4405      	add	r5, r0
 801b150:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801b152:	3401      	adds	r4, #1
 801b154:	b2e4      	uxtb	r4, r4
 801b156:	42b4      	cmp	r4, r6
 801b158:	d3f4      	bcc.n	801b144 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 801b15a:	4628      	mov	r0, r5
 801b15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 801b15e:	2500      	movs	r5, #0
 801b160:	e7fb      	b.n	801b15a <RegionCommonCountChannels+0x24>

0801b162 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801b162:	b170      	cbz	r0, 801b182 <RegionCommonChanMaskCopy+0x20>
{
 801b164:	b410      	push	{r4}
 801b166:	4604      	mov	r4, r0
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801b168:	b149      	cbz	r1, 801b17e <RegionCommonChanMaskCopy+0x1c>
    {
        for( uint8_t i = 0; i < len; i++ )
 801b16a:	2300      	movs	r3, #0
 801b16c:	4293      	cmp	r3, r2
 801b16e:	d206      	bcs.n	801b17e <RegionCommonChanMaskCopy+0x1c>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 801b170:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801b174:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 801b178:	3301      	adds	r3, #1
 801b17a:	b2db      	uxtb	r3, r3
 801b17c:	e7f6      	b.n	801b16c <RegionCommonChanMaskCopy+0xa>
        }
    }
}
 801b17e:	bc10      	pop	{r4}
 801b180:	4770      	bx	lr
 801b182:	4770      	bx	lr

0801b184 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801b184:	b082      	sub	sp, #8
 801b186:	b538      	push	{r3, r4, r5, lr}
 801b188:	4605      	mov	r5, r0
 801b18a:	460c      	mov	r4, r1
 801b18c:	4611      	mov	r1, r2
 801b18e:	aa04      	add	r2, sp, #16
 801b190:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801b194:	ca0c      	ldmia	r2, {r2, r3}
 801b196:	f7ff fead 	bl	801aef4 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 801b19a:	68eb      	ldr	r3, [r5, #12]
 801b19c:	fb04 f100 	mul.w	r1, r4, r0
 801b1a0:	428b      	cmp	r3, r1
 801b1a2:	d905      	bls.n	801b1b0 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 801b1a4:	1a59      	subs	r1, r3, r1
 801b1a6:	60e9      	str	r1, [r5, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801b1a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b1ac:	b002      	add	sp, #8
 801b1ae:	4770      	bx	lr
        band->TimeCredits = 0;
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	60eb      	str	r3, [r5, #12]
}
 801b1b4:	e7f8      	b.n	801b1a8 <RegionCommonSetBandTxDone+0x24>
	...

0801b1b8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801b1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1bc:	b089      	sub	sp, #36	; 0x24
 801b1be:	4607      	mov	r7, r0
 801b1c0:	468b      	mov	fp, r1
 801b1c2:	4691      	mov	r9, r2
 801b1c4:	4698      	mov	r8, r3
 801b1c6:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801b1ca:	f007 fc53 	bl	8022a74 <UTIL_TIMER_GetCurrentTime>
 801b1ce:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 801b1d0:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 801b1d2:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801b1d4:	f04f 33ff 	mov.w	r3, #4294967295
 801b1d8:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 801b1da:	e005      	b.n	801b1e8 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 801b1dc:	2301      	movs	r3, #1
 801b1de:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 801b1e0:	441e      	add	r6, r3
 801b1e2:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 801b1e4:	3401      	adds	r4, #1
 801b1e6:	b2e4      	uxtb	r4, r4
 801b1e8:	454c      	cmp	r4, r9
 801b1ea:	d25b      	bcs.n	801b2a4 <RegionCommonUpdateBandTimeOff+0xec>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801b1ec:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801b1f0:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 801b1f4:	9b04      	ldr	r3, [sp, #16]
 801b1f6:	9302      	str	r3, [sp, #8]
 801b1f8:	9914      	ldr	r1, [sp, #80]	; 0x50
 801b1fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b1fc:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b200:	4653      	mov	r3, sl
 801b202:	4642      	mov	r2, r8
 801b204:	4639      	mov	r1, r7
 801b206:	4628      	mov	r0, r5
 801b208:	f7ff ff1c 	bl	801b044 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 801b20c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b20e:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801b212:	68ea      	ldr	r2, [r5, #12]
 801b214:	429a      	cmp	r2, r3
 801b216:	d8e1      	bhi.n	801b1dc <RegionCommonUpdateBandTimeOff+0x24>
 801b218:	f1b8 0f00 	cmp.w	r8, #0
 801b21c:	d101      	bne.n	801b222 <RegionCommonUpdateBandTimeOff+0x6a>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801b21e:	2f00      	cmp	r7, #0
 801b220:	d1dc      	bne.n	801b1dc <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801b222:	2100      	movs	r1, #0
 801b224:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 801b226:	6929      	ldr	r1, [r5, #16]
 801b228:	4299      	cmp	r1, r3
 801b22a:	d907      	bls.n	801b23c <RegionCommonUpdateBandTimeOff+0x84>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801b22c:	1a9b      	subs	r3, r3, r2
 801b22e:	9a05      	ldr	r2, [sp, #20]
 801b230:	429a      	cmp	r2, r3
 801b232:	bf28      	it	cs
 801b234:	461a      	movcs	r2, r3
 801b236:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801b238:	3601      	adds	r6, #1
 801b23a:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 801b23c:	2f00      	cmp	r7, #0
 801b23e:	d1d1      	bne.n	801b1e4 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 801b240:	2300      	movs	r3, #0
 801b242:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801b246:	2864      	cmp	r0, #100	; 0x64
 801b248:	d024      	beq.n	801b294 <RegionCommonUpdateBandTimeOff+0xdc>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801b24a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801b24e:	d025      	beq.n	801b29c <RegionCommonUpdateBandTimeOff+0xe4>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801b250:	4b19      	ldr	r3, [pc, #100]	; (801b2b8 <RegionCommonUpdateBandTimeOff+0x100>)
 801b252:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801b254:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b256:	4a18      	ldr	r2, [pc, #96]	; (801b2b8 <RegionCommonUpdateBandTimeOff+0x100>)
 801b258:	4293      	cmp	r3, r2
 801b25a:	d90c      	bls.n	801b276 <RegionCommonUpdateBandTimeOff+0xbe>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801b25c:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801b260:	3b30      	subs	r3, #48	; 0x30
 801b262:	4a16      	ldr	r2, [pc, #88]	; (801b2bc <RegionCommonUpdateBandTimeOff+0x104>)
 801b264:	fba2 2303 	umull	r2, r3, r2, r3
 801b268:	0c1b      	lsrs	r3, r3, #16
 801b26a:	4a15      	ldr	r2, [pc, #84]	; (801b2c0 <RegionCommonUpdateBandTimeOff+0x108>)
 801b26c:	fb03 2202 	mla	r2, r3, r2, r2
 801b270:	9b06      	ldr	r3, [sp, #24]
 801b272:	441a      	add	r2, r3
 801b274:	9206      	str	r2, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801b276:	ad06      	add	r5, sp, #24
 801b278:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b27a:	9300      	str	r3, [sp, #0]
 801b27c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b27e:	e895 0006 	ldmia.w	r5, {r1, r2}
 801b282:	4628      	mov	r0, r5
 801b284:	f007 fa9e 	bl	80227c4 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 801b288:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b28c:	f007 fb10 	bl	80228b0 <SysTimeToMs>
 801b290:	9005      	str	r0, [sp, #20]
 801b292:	e7a7      	b.n	801b1e4 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801b294:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801b298:	9306      	str	r3, [sp, #24]
 801b29a:	e7db      	b.n	801b254 <RegionCommonUpdateBandTimeOff+0x9c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801b29c:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801b2a0:	9306      	str	r3, [sp, #24]
 801b2a2:	e7d7      	b.n	801b254 <RegionCommonUpdateBandTimeOff+0x9c>
            }
        }
    }


    if( validBands == 0 )
 801b2a4:	b11e      	cbz	r6, 801b2ae <RegionCommonUpdateBandTimeOff+0xf6>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 801b2a6:	9805      	ldr	r0, [sp, #20]
 801b2a8:	b009      	add	sp, #36	; 0x24
 801b2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 801b2ae:	f04f 33ff 	mov.w	r3, #4294967295
 801b2b2:	9305      	str	r3, [sp, #20]
 801b2b4:	e7f7      	b.n	801b2a6 <RegionCommonUpdateBandTimeOff+0xee>
 801b2b6:	bf00      	nop
 801b2b8:	0001ec30 	.word	0x0001ec30
 801b2bc:	c22e4507 	.word	0xc22e4507
 801b2c0:	00015180 	.word	0x00015180

0801b2c4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801b2c4:	7803      	ldrb	r3, [r0, #0]
 801b2c6:	2b03      	cmp	r3, #3
 801b2c8:	d001      	beq.n	801b2ce <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 801b2ca:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 801b2cc:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 801b2ce:	7843      	ldrb	r3, [r0, #1]
 801b2d0:	f990 2001 	ldrsb.w	r2, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801b2d4:	f002 020f 	and.w	r2, r2, #15
 801b2d8:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801b2da:	091b      	lsrs	r3, r3, #4
 801b2dc:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 801b2de:	7883      	ldrb	r3, [r0, #2]
 801b2e0:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 801b2e2:	78c2      	ldrb	r2, [r0, #3]
 801b2e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b2e8:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 801b2ea:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801b2ec:	f3c3 1202 	ubfx	r2, r3, #4, #3
 801b2f0:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 801b2f2:	f003 030f 	and.w	r3, r3, #15
 801b2f6:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 801b2f8:	2005      	movs	r0, #5
 801b2fa:	4770      	bx	lr

0801b2fc <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801b2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b300:	b085      	sub	sp, #20
 801b302:	4604      	mov	r4, r0
 801b304:	4688      	mov	r8, r1
 801b306:	4617      	mov	r7, r2
 801b308:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 801b30a:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 801b30c:	f990 b006 	ldrsb.w	fp, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 801b310:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 801b314:	f990 a008 	ldrsb.w	sl, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801b318:	7943      	ldrb	r3, [r0, #5]
 801b31a:	b92b      	cbnz	r3, 801b328 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801b31c:	f990 a00b 	ldrsb.w	sl, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 801b320:	f990 b009 	ldrsb.w	fp, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 801b324:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 801b328:	b95d      	cbnz	r5, 801b342 <RegionCommonLinkAdrReqVerifyParams+0x46>
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801b32a:	2d07      	cmp	r5, #7
 801b32c:	d02c      	beq.n	801b388 <RegionCommonLinkAdrReqVerifyParams+0x8c>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 801b32e:	f888 b000 	strb.w	fp, [r8]
    *txPow = txPower;
 801b332:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 801b336:	f886 a000 	strb.w	sl, [r6]

    return status;
}
 801b33a:	4628      	mov	r0, r5
 801b33c:	b005      	add	sp, #20
 801b33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801b342:	69a3      	ldr	r3, [r4, #24]
 801b344:	9301      	str	r3, [sp, #4]
 801b346:	f994 3015 	ldrsb.w	r3, [r4, #21]
 801b34a:	9300      	str	r3, [sp, #0]
 801b34c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 801b350:	465a      	mov	r2, fp
 801b352:	6921      	ldr	r1, [r4, #16]
 801b354:	7b20      	ldrb	r0, [r4, #12]
 801b356:	f7ff fe9c 	bl	801b092 <RegionCommonChanVerifyDr>
 801b35a:	b908      	cbnz	r0, 801b360 <RegionCommonLinkAdrReqVerifyParams+0x64>
            status &= 0xFD; // Datarate KO
 801b35c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801b360:	f994 301d 	ldrsb.w	r3, [r4, #29]
 801b364:	9303      	str	r3, [sp, #12]
 801b366:	f994 201c 	ldrsb.w	r2, [r4, #28]
 801b36a:	461c      	mov	r4, r3
 801b36c:	4619      	mov	r1, r3
 801b36e:	4648      	mov	r0, r9
 801b370:	f7ff fe85 	bl	801b07e <RegionCommonValueInRange>
 801b374:	2800      	cmp	r0, #0
 801b376:	d1d8      	bne.n	801b32a <RegionCommonLinkAdrReqVerifyParams+0x2e>
            if( verifyParams->MaxTxPower > txPower )
 801b378:	454c      	cmp	r4, r9
 801b37a:	dc02      	bgt.n	801b382 <RegionCommonLinkAdrReqVerifyParams+0x86>
                status &= 0xFB; // TxPower KO
 801b37c:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 801b380:	e7d3      	b.n	801b32a <RegionCommonLinkAdrReqVerifyParams+0x2e>
                txPower = verifyParams->MaxTxPower;
 801b382:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801b386:	e7d0      	b.n	801b32a <RegionCommonLinkAdrReqVerifyParams+0x2e>
        if( nbRepetitions == 0 )
 801b388:	f1ba 0f00 	cmp.w	sl, #0
 801b38c:	d1cf      	bne.n	801b32e <RegionCommonLinkAdrReqVerifyParams+0x32>
            nbRepetitions = 1;
 801b38e:	f04f 0a01 	mov.w	sl, #1
 801b392:	e7cc      	b.n	801b32e <RegionCommonLinkAdrReqVerifyParams+0x32>

0801b394 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 801b394:	4b02      	ldr	r3, [pc, #8]	; (801b3a0 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 801b396:	fa03 f000 	lsl.w	r0, r3, r0
}
 801b39a:	fbb0 f0f1 	udiv	r0, r0, r1
 801b39e:	4770      	bx	lr
 801b3a0:	000f4240 	.word	0x000f4240

0801b3a4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 801b3a4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 801b3a8:	fbb3 f0f0 	udiv	r0, r3, r0
 801b3ac:	4770      	bx	lr
	...

0801b3b0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 801b3b0:	b430      	push	{r4, r5}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801b3b2:	1f0c      	subs	r4, r1, #4
 801b3b4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 801b3b8:	fb05 f202 	mul.w	r2, r5, r2
 801b3bc:	fb00 2204 	mla	r2, r0, r4, r2
 801b3c0:	0052      	lsls	r2, r2, #1
 801b3c2:	d021      	beq.n	801b408 <RegionCommonComputeRxWindowParameters+0x58>
 801b3c4:	4402      	add	r2, r0
 801b3c6:	3a01      	subs	r2, #1
 801b3c8:	fbb2 f2f0 	udiv	r2, r2, r0
 801b3cc:	428a      	cmp	r2, r1
 801b3ce:	bf38      	it	cc
 801b3d0:	460a      	movcc	r2, r1
 801b3d2:	9902      	ldr	r1, [sp, #8]
 801b3d4:	600a      	str	r2, [r1, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801b3d6:	0081      	lsls	r1, r0, #2
 801b3d8:	fb00 f002 	mul.w	r0, r0, r2
 801b3dc:	b1b8      	cbz	r0, 801b40e <RegionCommonComputeRxWindowParameters+0x5e>
 801b3de:	3001      	adds	r0, #1
 801b3e0:	0840      	lsrs	r0, r0, #1
 801b3e2:	1a08      	subs	r0, r1, r0
 801b3e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b3e8:	fb02 0313 	mls	r3, r2, r3, r0
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	dd10      	ble.n	801b412 <RegionCommonComputeRxWindowParameters+0x62>
 801b3f0:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801b3f4:	480a      	ldr	r0, [pc, #40]	; (801b420 <RegionCommonComputeRxWindowParameters+0x70>)
 801b3f6:	fb80 2003 	smull	r2, r0, r0, r3
 801b3fa:	17db      	asrs	r3, r3, #31
 801b3fc:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 801b400:	9a03      	ldr	r2, [sp, #12]
 801b402:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801b404:	bc30      	pop	{r4, r5}
 801b406:	4770      	bx	lr
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801b408:	fbb2 f2f0 	udiv	r2, r2, r0
 801b40c:	e7de      	b.n	801b3cc <RegionCommonComputeRxWindowParameters+0x1c>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801b40e:	0840      	lsrs	r0, r0, #1
 801b410:	e7e7      	b.n	801b3e2 <RegionCommonComputeRxWindowParameters+0x32>
 801b412:	4803      	ldr	r0, [pc, #12]	; (801b420 <RegionCommonComputeRxWindowParameters+0x70>)
 801b414:	fb80 2003 	smull	r2, r0, r0, r3
 801b418:	17db      	asrs	r3, r3, #31
 801b41a:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 801b41e:	e7ef      	b.n	801b400 <RegionCommonComputeRxWindowParameters+0x50>
 801b420:	10624dd3 	.word	0x10624dd3

0801b424 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801b424:	b538      	push	{r3, r4, r5, lr}
 801b426:	460d      	mov	r5, r1
 801b428:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801b42a:	0040      	lsls	r0, r0, #1
 801b42c:	f7ea ffec 	bl	8006408 <__aeabi_ui2f>
 801b430:	4601      	mov	r1, r0
 801b432:	4628      	mov	r0, r5
 801b434:	f7ea ff36 	bl	80062a4 <__aeabi_fsub>
 801b438:	4621      	mov	r1, r4
 801b43a:	f7ea ff33 	bl	80062a4 <__aeabi_fsub>
 801b43e:	f7ea fe25 	bl	800608c <__aeabi_f2d>
 801b442:	f009 f9b1 	bl	80247a8 <floor>
 801b446:	f7ea ff01 	bl	800624c <__aeabi_d2iz>

    return phyTxPower;
}
 801b44a:	b240      	sxtb	r0, r0
 801b44c:	bd38      	pop	{r3, r4, r5, pc}

0801b44e <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801b44e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b452:	b083      	sub	sp, #12
 801b454:	4605      	mov	r5, r0
 801b456:	468b      	mov	fp, r1
 801b458:	9200      	str	r2, [sp, #0]
 801b45a:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801b45c:	2600      	movs	r6, #0
 801b45e:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 801b460:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 801b462:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801b464:	e04a      	b.n	801b4fc <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801b466:	7a3a      	ldrb	r2, [r7, #8]
 801b468:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801b46c:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801b470:	b252      	sxtb	r2, r2
 801b472:	b249      	sxtb	r1, r1
 801b474:	f995 0001 	ldrsb.w	r0, [r5, #1]
 801b478:	f7ff fe01 	bl	801b07e <RegionCommonValueInRange>
 801b47c:	b178      	cbz	r0, 801b49e <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801b47e:	68ea      	ldr	r2, [r5, #12]
 801b480:	7a7b      	ldrb	r3, [r7, #9]
 801b482:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b486:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b48a:	7d1b      	ldrb	r3, [r3, #20]
 801b48c:	b35b      	cbz	r3, 801b4e6 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 801b48e:	f109 0301 	add.w	r3, r9, #1
 801b492:	eb08 0204 	add.w	r2, r8, r4
 801b496:	f80b 2009 	strb.w	r2, [fp, r9]
 801b49a:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 801b49e:	3401      	adds	r4, #1
 801b4a0:	b2e4      	uxtb	r4, r4
 801b4a2:	2c0f      	cmp	r4, #15
 801b4a4:	d824      	bhi.n	801b4f0 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801b4a6:	686b      	ldr	r3, [r5, #4]
 801b4a8:	0072      	lsls	r2, r6, #1
 801b4aa:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 801b4ae:	4123      	asrs	r3, r4
 801b4b0:	f013 0f01 	tst.w	r3, #1
 801b4b4:	d0f3      	beq.n	801b49e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801b4b6:	68a8      	ldr	r0, [r5, #8]
 801b4b8:	eb08 0304 	add.w	r3, r8, r4
 801b4bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b4c0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 801b4c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d0e8      	beq.n	801b49e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801b4cc:	782b      	ldrb	r3, [r5, #0]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d1c9      	bne.n	801b466 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801b4d2:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	d0c6      	beq.n	801b466 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801b4d8:	5a9b      	ldrh	r3, [r3, r2]
 801b4da:	fa43 f104 	asr.w	r1, r3, r4
 801b4de:	f011 0f01 	tst.w	r1, #1
 801b4e2:	d1c0      	bne.n	801b466 <RegionCommonCountNbOfEnabledChannels+0x18>
 801b4e4:	e7db      	b.n	801b49e <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 801b4e6:	f10a 0a01 	add.w	sl, sl, #1
 801b4ea:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 801b4ee:	e7d6      	b.n	801b49e <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801b4f0:	f108 0810 	add.w	r8, r8, #16
 801b4f4:	fa5f f888 	uxtb.w	r8, r8
 801b4f8:	3601      	adds	r6, #1
 801b4fa:	b2f6      	uxtb	r6, r6
 801b4fc:	fa1f f388 	uxth.w	r3, r8
 801b500:	8a2a      	ldrh	r2, [r5, #16]
 801b502:	4293      	cmp	r3, r2
 801b504:	d201      	bcs.n	801b50a <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 801b506:	2400      	movs	r4, #0
 801b508:	e7cb      	b.n	801b4a2 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801b50a:	9b00      	ldr	r3, [sp, #0]
 801b50c:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801b510:	9b01      	ldr	r3, [sp, #4]
 801b512:	f883 a000 	strb.w	sl, [r3]
}
 801b516:	b003      	add	sp, #12
 801b518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b51c <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801b51c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b520:	b085      	sub	sp, #20
 801b522:	4604      	mov	r4, r0
 801b524:	460f      	mov	r7, r1
 801b526:	4616      	mov	r6, r2
 801b528:	461d      	mov	r5, r3
 801b52a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801b52e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801b532:	6840      	ldr	r0, [r0, #4]
 801b534:	f007 faa8 	bl	8022a88 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801b538:	6823      	ldr	r3, [r4, #0]
 801b53a:	1a1b      	subs	r3, r3, r0
 801b53c:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 801b540:	2301      	movs	r3, #1
 801b542:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 801b546:	2300      	movs	r3, #0
 801b548:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801b54a:	6863      	ldr	r3, [r4, #4]
 801b54c:	b113      	cbz	r3, 801b554 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801b54e:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801b550:	4283      	cmp	r3, r0
 801b552:	d81c      	bhi.n	801b58e <RegionCommonIdentifyChannels+0x72>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801b554:	2300      	movs	r3, #0
 801b556:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801b558:	69e3      	ldr	r3, [r4, #28]
 801b55a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801b55e:	781f      	ldrb	r7, [r3, #0]
 801b560:	69a3      	ldr	r3, [r4, #24]
 801b562:	9303      	str	r3, [sp, #12]
 801b564:	ab01      	add	r3, sp, #4
 801b566:	6921      	ldr	r1, [r4, #16]
 801b568:	68e0      	ldr	r0, [r4, #12]
 801b56a:	e883 0003 	stmia.w	r3, {r0, r1}
 801b56e:	7d23      	ldrb	r3, [r4, #20]
 801b570:	9300      	str	r3, [sp, #0]
 801b572:	7a23      	ldrb	r3, [r4, #8]
 801b574:	7a62      	ldrb	r2, [r4, #9]
 801b576:	4661      	mov	r1, ip
 801b578:	4638      	mov	r0, r7
 801b57a:	f7ff fe1d 	bl	801b1b8 <RegionCommonUpdateBandTimeOff>
 801b57e:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801b582:	4643      	mov	r3, r8
 801b584:	462a      	mov	r2, r5
 801b586:	4631      	mov	r1, r6
 801b588:	69e0      	ldr	r0, [r4, #28]
 801b58a:	f7ff ff60 	bl	801b44e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801b58e:	782b      	ldrb	r3, [r5, #0]
 801b590:	b923      	cbnz	r3, 801b59c <RegionCommonIdentifyChannels+0x80>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 801b592:	f898 3000 	ldrb.w	r3, [r8]
 801b596:	b13b      	cbz	r3, 801b5a8 <RegionCommonIdentifyChannels+0x8c>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801b598:	200b      	movs	r0, #11
 801b59a:	e002      	b.n	801b5a2 <RegionCommonIdentifyChannels+0x86>
        *nextTxDelay = 0;
 801b59c:	2000      	movs	r0, #0
 801b59e:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 801b5a2:	b005      	add	sp, #20
 801b5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801b5a8:	200c      	movs	r0, #12
 801b5aa:	e7fa      	b.n	801b5a2 <RegionCommonIdentifyChannels+0x86>

0801b5ac <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801b5ac:	b570      	push	{r4, r5, r6, lr}
 801b5ae:	b082      	sub	sp, #8
 801b5b0:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 801b5b2:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 801b5b6:	f990 6002 	ldrsb.w	r6, [r0, #2]
 801b5ba:	42a6      	cmp	r6, r4
 801b5bc:	d011      	beq.n	801b5e2 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801b5be:	3c01      	subs	r4, #1
 801b5c0:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801b5c2:	42a6      	cmp	r6, r4
 801b5c4:	d00e      	beq.n	801b5e4 <RegionCommonGetNextLowerTxDr+0x38>
 801b5c6:	68ab      	ldr	r3, [r5, #8]
 801b5c8:	9301      	str	r3, [sp, #4]
 801b5ca:	f995 3001 	ldrsb.w	r3, [r5, #1]
 801b5ce:	9300      	str	r3, [sp, #0]
 801b5d0:	4633      	mov	r3, r6
 801b5d2:	4622      	mov	r2, r4
 801b5d4:	6869      	ldr	r1, [r5, #4]
 801b5d6:	78e8      	ldrb	r0, [r5, #3]
 801b5d8:	f7ff fd5b 	bl	801b092 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 801b5dc:	2800      	cmp	r0, #0
 801b5de:	d0ee      	beq.n	801b5be <RegionCommonGetNextLowerTxDr+0x12>
 801b5e0:	e000      	b.n	801b5e4 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 801b5e2:	4634      	mov	r4, r6

        return drLocal;
    }
}
 801b5e4:	4620      	mov	r0, r4
 801b5e6:	b002      	add	sp, #8
 801b5e8:	bd70      	pop	{r4, r5, r6, pc}

0801b5ea <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 801b5ea:	4288      	cmp	r0, r1
 801b5ec:	bfb8      	it	lt
 801b5ee:	4608      	movlt	r0, r1
 801b5f0:	4770      	bx	lr
	...

0801b5f4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 801b5f4:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 801b5f8:	4a05      	ldr	r2, [pc, #20]	; (801b610 <RegionCommonGetBandwidth+0x1c>)
 801b5fa:	4293      	cmp	r3, r2
 801b5fc:	d004      	beq.n	801b608 <RegionCommonGetBandwidth+0x14>
 801b5fe:	4a05      	ldr	r2, [pc, #20]	; (801b614 <RegionCommonGetBandwidth+0x20>)
 801b600:	4293      	cmp	r3, r2
 801b602:	d103      	bne.n	801b60c <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 801b604:	2002      	movs	r0, #2
 801b606:	4770      	bx	lr
            return 1;
 801b608:	2001      	movs	r0, #1
 801b60a:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 801b60c:	2000      	movs	r0, #0
    }
}
 801b60e:	4770      	bx	lr
 801b610:	0003d090 	.word	0x0003d090
 801b614:	0007a120 	.word	0x0007a120

0801b618 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801b618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b61a:	b08b      	sub	sp, #44	; 0x2c
 801b61c:	4606      	mov	r6, r0
 801b61e:	460f      	mov	r7, r1
 801b620:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 801b622:	ac04      	add	r4, sp, #16
 801b624:	4d11      	ldr	r5, [pc, #68]	; (801b66c <RegionCommonRxConfigPrint+0x54>)
 801b626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b62a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b62e:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 801b632:	2e05      	cmp	r6, #5
 801b634:	d810      	bhi.n	801b658 <RegionCommonRxConfigPrint+0x40>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 801b636:	f8cd c008 	str.w	ip, [sp, #8]
 801b63a:	9701      	str	r7, [sp, #4]
 801b63c:	ab0a      	add	r3, sp, #40	; 0x28
 801b63e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 801b642:	f856 3c18 	ldr.w	r3, [r6, #-24]
 801b646:	9300      	str	r3, [sp, #0]
 801b648:	4b09      	ldr	r3, [pc, #36]	; (801b670 <RegionCommonRxConfigPrint+0x58>)
 801b64a:	2201      	movs	r2, #1
 801b64c:	2100      	movs	r1, #0
 801b64e:	2002      	movs	r0, #2
 801b650:	f006 fde4 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801b654:	b00b      	add	sp, #44	; 0x2c
 801b656:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801b658:	f8cd c004 	str.w	ip, [sp, #4]
 801b65c:	9700      	str	r7, [sp, #0]
 801b65e:	4b05      	ldr	r3, [pc, #20]	; (801b674 <RegionCommonRxConfigPrint+0x5c>)
 801b660:	2201      	movs	r2, #1
 801b662:	2100      	movs	r1, #0
 801b664:	2002      	movs	r0, #2
 801b666:	f006 fdd9 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 801b66a:	e7f3      	b.n	801b654 <RegionCommonRxConfigPrint+0x3c>
 801b66c:	08024b54 	.word	0x08024b54
 801b670:	08028438 	.word	0x08028438
 801b674:	08028458 	.word	0x08028458

0801b678 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801b678:	b500      	push	{lr}
 801b67a:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801b67c:	9101      	str	r1, [sp, #4]
 801b67e:	9000      	str	r0, [sp, #0]
 801b680:	4b04      	ldr	r3, [pc, #16]	; (801b694 <RegionCommonTxConfigPrint+0x1c>)
 801b682:	2201      	movs	r2, #1
 801b684:	2100      	movs	r1, #0
 801b686:	2002      	movs	r0, #2
 801b688:	f006 fdc8 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 801b68c:	b003      	add	sp, #12
 801b68e:	f85d fb04 	ldr.w	pc, [sp], #4
 801b692:	bf00      	nop
 801b694:	08028474 	.word	0x08028474

0801b698 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801b698:	b538      	push	{r3, r4, r5, lr}
 801b69a:	4604      	mov	r4, r0
 801b69c:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801b69e:	4b1b      	ldr	r3, [pc, #108]	; (801b70c <VerifyRfFreq+0x74>)
 801b6a0:	6a1b      	ldr	r3, [r3, #32]
 801b6a2:	4798      	blx	r3
 801b6a4:	b130      	cbz	r0, 801b6b4 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801b6a6:	4b1a      	ldr	r3, [pc, #104]	; (801b710 <VerifyRfFreq+0x78>)
 801b6a8:	4423      	add	r3, r4
 801b6aa:	4a1a      	ldr	r2, [pc, #104]	; (801b714 <VerifyRfFreq+0x7c>)
 801b6ac:	4293      	cmp	r3, r2
 801b6ae:	d802      	bhi.n	801b6b6 <VerifyRfFreq+0x1e>
    {
        *band = 2;
 801b6b0:	2302      	movs	r3, #2
 801b6b2:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 801b6b4:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801b6b6:	4b18      	ldr	r3, [pc, #96]	; (801b718 <VerifyRfFreq+0x80>)
 801b6b8:	4423      	add	r3, r4
 801b6ba:	4a18      	ldr	r2, [pc, #96]	; (801b71c <VerifyRfFreq+0x84>)
 801b6bc:	4293      	cmp	r3, r2
 801b6be:	d802      	bhi.n	801b6c6 <VerifyRfFreq+0x2e>
        *band = 0;
 801b6c0:	2300      	movs	r3, #0
 801b6c2:	702b      	strb	r3, [r5, #0]
 801b6c4:	e7f6      	b.n	801b6b4 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801b6c6:	4b16      	ldr	r3, [pc, #88]	; (801b720 <VerifyRfFreq+0x88>)
 801b6c8:	4423      	add	r3, r4
 801b6ca:	4a16      	ldr	r2, [pc, #88]	; (801b724 <VerifyRfFreq+0x8c>)
 801b6cc:	4293      	cmp	r3, r2
 801b6ce:	d802      	bhi.n	801b6d6 <VerifyRfFreq+0x3e>
        *band = 1;
 801b6d0:	2301      	movs	r3, #1
 801b6d2:	702b      	strb	r3, [r5, #0]
 801b6d4:	e7ee      	b.n	801b6b4 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801b6d6:	4b14      	ldr	r3, [pc, #80]	; (801b728 <VerifyRfFreq+0x90>)
 801b6d8:	4423      	add	r3, r4
 801b6da:	4a14      	ldr	r2, [pc, #80]	; (801b72c <VerifyRfFreq+0x94>)
 801b6dc:	4293      	cmp	r3, r2
 801b6de:	d802      	bhi.n	801b6e6 <VerifyRfFreq+0x4e>
        *band = 5;
 801b6e0:	2305      	movs	r3, #5
 801b6e2:	702b      	strb	r3, [r5, #0]
 801b6e4:	e7e6      	b.n	801b6b4 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801b6e6:	4b12      	ldr	r3, [pc, #72]	; (801b730 <VerifyRfFreq+0x98>)
 801b6e8:	4423      	add	r3, r4
 801b6ea:	4a12      	ldr	r2, [pc, #72]	; (801b734 <VerifyRfFreq+0x9c>)
 801b6ec:	4293      	cmp	r3, r2
 801b6ee:	d802      	bhi.n	801b6f6 <VerifyRfFreq+0x5e>
        *band = 3;
 801b6f0:	2303      	movs	r3, #3
 801b6f2:	702b      	strb	r3, [r5, #0]
 801b6f4:	e7de      	b.n	801b6b4 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801b6f6:	4b10      	ldr	r3, [pc, #64]	; (801b738 <VerifyRfFreq+0xa0>)
 801b6f8:	4423      	add	r3, r4
 801b6fa:	4a10      	ldr	r2, [pc, #64]	; (801b73c <VerifyRfFreq+0xa4>)
 801b6fc:	4293      	cmp	r3, r2
 801b6fe:	d802      	bhi.n	801b706 <VerifyRfFreq+0x6e>
        *band = 4;
 801b700:	2304      	movs	r3, #4
 801b702:	702b      	strb	r3, [r5, #0]
 801b704:	e7d6      	b.n	801b6b4 <VerifyRfFreq+0x1c>
        return false;
 801b706:	2000      	movs	r0, #0
 801b708:	e7d4      	b.n	801b6b4 <VerifyRfFreq+0x1c>
 801b70a:	bf00      	nop
 801b70c:	08028984 	.word	0x08028984
 801b710:	cc8faa40 	.word	0xcc8faa40
 801b714:	001e847f 	.word	0x001e847f
 801b718:	cc7125c0 	.word	0xcc7125c0
 801b71c:	002dc6c0 	.word	0x002dc6c0
 801b720:	cc435eff 	.word	0xcc435eff
 801b724:	000927bf 	.word	0x000927bf
 801b728:	cc38b0a0 	.word	0xcc38b0a0
 801b72c:	0007a120 	.word	0x0007a120
 801b730:	cc2e0240 	.word	0xcc2e0240
 801b734:	0003d090 	.word	0x0003d090
 801b738:	cc296e60 	.word	0xcc296e60
 801b73c:	000493e0 	.word	0x000493e0

0801b740 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801b740:	b570      	push	{r4, r5, r6, lr}
 801b742:	b084      	sub	sp, #16
 801b744:	4605      	mov	r5, r0
 801b746:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 801b748:	4b13      	ldr	r3, [pc, #76]	; (801b798 <GetTimeOnAir+0x58>)
 801b74a:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801b74c:	4913      	ldr	r1, [pc, #76]	; (801b79c <GetTimeOnAir+0x5c>)
 801b74e:	f7ff ff51 	bl	801b5f4 <RegionCommonGetBandwidth>
 801b752:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 801b754:	2d07      	cmp	r5, #7
 801b756:	d00e      	beq.n	801b776 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801b758:	4b11      	ldr	r3, [pc, #68]	; (801b7a0 <GetTimeOnAir+0x60>)
 801b75a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801b75c:	2001      	movs	r0, #1
 801b75e:	9003      	str	r0, [sp, #12]
 801b760:	b2e4      	uxtb	r4, r4
 801b762:	9402      	str	r4, [sp, #8]
 801b764:	2300      	movs	r3, #0
 801b766:	9301      	str	r3, [sp, #4]
 801b768:	2308      	movs	r3, #8
 801b76a:	9300      	str	r3, [sp, #0]
 801b76c:	4603      	mov	r3, r0
 801b76e:	4632      	mov	r2, r6
 801b770:	47a8      	blx	r5
    }
    return timeOnAir;
}
 801b772:	b004      	add	sp, #16
 801b774:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801b776:	4b0a      	ldr	r3, [pc, #40]	; (801b7a0 <GetTimeOnAir+0x60>)
 801b778:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801b77a:	2301      	movs	r3, #1
 801b77c:	9303      	str	r3, [sp, #12]
 801b77e:	b2e4      	uxtb	r4, r4
 801b780:	9402      	str	r4, [sp, #8]
 801b782:	2000      	movs	r0, #0
 801b784:	9001      	str	r0, [sp, #4]
 801b786:	2305      	movs	r3, #5
 801b788:	9300      	str	r3, [sp, #0]
 801b78a:	4603      	mov	r3, r0
 801b78c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b790:	fb02 f206 	mul.w	r2, r2, r6
 801b794:	47a8      	blx	r5
 801b796:	e7ec      	b.n	801b772 <GetTimeOnAir+0x32>
 801b798:	080284b0 	.word	0x080284b0
 801b79c:	08028490 	.word	0x08028490
 801b7a0:	08028984 	.word	0x08028984

0801b7a4 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801b7a4:	b500      	push	{lr}
 801b7a6:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 801b7a8:	2300      	movs	r3, #0
 801b7aa:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 801b7ac:	7803      	ldrb	r3, [r0, #0]
 801b7ae:	3b0b      	subs	r3, #11
 801b7b0:	2b2e      	cmp	r3, #46	; 0x2e
 801b7b2:	d830      	bhi.n	801b816 <RegionEU868GetPhyParam+0x72>
 801b7b4:	e8df f003 	tbb	[pc, r3]
 801b7b8:	3f393633 	.word	0x3f393633
 801b7bc:	504c4845 	.word	0x504c4845
 801b7c0:	605c5854 	.word	0x605c5854
 801b7c4:	6c2f692f 	.word	0x6c2f692f
 801b7c8:	2f7b7872 	.word	0x2f7b7872
 801b7cc:	18837f2f 	.word	0x18837f2f
 801b7d0:	2f2f2f2f 	.word	0x2f2f2f2f
 801b7d4:	2f2f2f2f 	.word	0x2f2f2f2f
 801b7d8:	2f2f2f2f 	.word	0x2f2f2f2f
 801b7dc:	9389862f 	.word	0x9389862f
 801b7e0:	99962f2f 	.word	0x99962f2f
 801b7e4:	9c2f      	.short	0x9c2f
 801b7e6:	a2          	.byte	0xa2
 801b7e7:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801b7e8:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801b7ec:	f88d 3004 	strb.w	r3, [sp, #4]
 801b7f0:	2307      	movs	r3, #7
 801b7f2:	f88d 3005 	strb.w	r3, [sp, #5]
 801b7f6:	2300      	movs	r3, #0
 801b7f8:	f88d 3006 	strb.w	r3, [sp, #6]
 801b7fc:	2310      	movs	r3, #16
 801b7fe:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801b802:	4b42      	ldr	r3, [pc, #264]	; (801b90c <RegionEU868GetPhyParam+0x168>)
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801b80a:	9202      	str	r2, [sp, #8]
 801b80c:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801b80e:	a801      	add	r0, sp, #4
 801b810:	f7ff fecc 	bl	801b5ac <RegionCommonGetNextLowerTxDr>
 801b814:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
}
 801b816:	9804      	ldr	r0, [sp, #16]
 801b818:	b007      	add	sp, #28
 801b81a:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801b81e:	2340      	movs	r3, #64	; 0x40
 801b820:	9304      	str	r3, [sp, #16]
            break;
 801b822:	e7f8      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801b824:	2320      	movs	r3, #32
 801b826:	9304      	str	r3, [sp, #16]
            break;
 801b828:	e7f5      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801b82a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801b82e:	4a38      	ldr	r2, [pc, #224]	; (801b910 <RegionEU868GetPhyParam+0x16c>)
 801b830:	5cd3      	ldrb	r3, [r2, r3]
 801b832:	9304      	str	r3, [sp, #16]
            break;
 801b834:	e7ef      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801b836:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801b83a:	4a36      	ldr	r2, [pc, #216]	; (801b914 <RegionEU868GetPhyParam+0x170>)
 801b83c:	5cd3      	ldrb	r3, [r2, r3]
 801b83e:	9304      	str	r3, [sp, #16]
            break;
 801b840:	e7e9      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801b842:	2301      	movs	r3, #1
 801b844:	9304      	str	r3, [sp, #16]
            break;
 801b846:	e7e6      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801b848:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801b84c:	9304      	str	r3, [sp, #16]
            break;
 801b84e:	e7e2      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801b850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801b854:	9304      	str	r3, [sp, #16]
            break;
 801b856:	e7de      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801b858:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801b85c:	9304      	str	r3, [sp, #16]
            break;
 801b85e:	e7da      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801b860:	f241 3388 	movw	r3, #5000	; 0x1388
 801b864:	9304      	str	r3, [sp, #16]
            break;
 801b866:	e7d6      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801b868:	f241 7370 	movw	r3, #6000	; 0x1770
 801b86c:	9304      	str	r3, [sp, #16]
            break;
 801b86e:	e7d2      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801b870:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801b874:	9304      	str	r3, [sp, #16]
            break;
 801b876:	e7ce      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801b878:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801b87c:	4826      	ldr	r0, [pc, #152]	; (801b918 <RegionEU868GetPhyParam+0x174>)
 801b87e:	f004 fb15 	bl	801feac <randr>
 801b882:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 801b886:	9004      	str	r0, [sp, #16]
            break;
 801b888:	e7c5      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801b88a:	4b24      	ldr	r3, [pc, #144]	; (801b91c <RegionEU868GetPhyParam+0x178>)
 801b88c:	9304      	str	r3, [sp, #16]
            break;
 801b88e:	e7c2      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801b890:	4b1e      	ldr	r3, [pc, #120]	; (801b90c <RegionEU868GetPhyParam+0x168>)
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b898:	9304      	str	r3, [sp, #16]
            break;
 801b89a:	e7bc      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801b89c:	4b1b      	ldr	r3, [pc, #108]	; (801b90c <RegionEU868GetPhyParam+0x168>)
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801b8a4:	9304      	str	r3, [sp, #16]
            break;
 801b8a6:	e7b6      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801b8a8:	2310      	movs	r3, #16
 801b8aa:	9304      	str	r3, [sp, #16]
            break;
 801b8ac:	e7b3      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 801b8ae:	4b17      	ldr	r3, [pc, #92]	; (801b90c <RegionEU868GetPhyParam+0x168>)
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	9304      	str	r3, [sp, #16]
            break;
 801b8b4:	e7af      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801b8b6:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801b8ba:	9304      	str	r3, [sp, #16]
            break;
 801b8bc:	e7ab      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801b8be:	4b18      	ldr	r3, [pc, #96]	; (801b920 <RegionEU868GetPhyParam+0x17c>)
 801b8c0:	9304      	str	r3, [sp, #16]
            break;
 801b8c2:	e7a8      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801b8c4:	4b15      	ldr	r3, [pc, #84]	; (801b91c <RegionEU868GetPhyParam+0x178>)
 801b8c6:	9304      	str	r3, [sp, #16]
            break;
 801b8c8:	e7a5      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801b8ca:	2311      	movs	r3, #17
 801b8cc:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801b8d0:	2302      	movs	r3, #2
 801b8d2:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 801b8d6:	2300      	movs	r3, #0
 801b8d8:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 801b8dc:	e79b      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801b8de:	2303      	movs	r3, #3
 801b8e0:	9304      	str	r3, [sp, #16]
            break;
 801b8e2:	e798      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 801b8e4:	4b0d      	ldr	r3, [pc, #52]	; (801b91c <RegionEU868GetPhyParam+0x178>)
 801b8e6:	9304      	str	r3, [sp, #16]
            break;
 801b8e8:	e795      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801b8ea:	2303      	movs	r3, #3
 801b8ec:	9304      	str	r3, [sp, #16]
            break;
 801b8ee:	e792      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801b8f0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801b8f4:	4a0b      	ldr	r2, [pc, #44]	; (801b924 <RegionEU868GetPhyParam+0x180>)
 801b8f6:	5cd3      	ldrb	r3, [r2, r3]
 801b8f8:	9304      	str	r3, [sp, #16]
            break;
 801b8fa:	e78c      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801b8fc:	490a      	ldr	r1, [pc, #40]	; (801b928 <RegionEU868GetPhyParam+0x184>)
 801b8fe:	f990 0001 	ldrsb.w	r0, [r0, #1]
 801b902:	f7ff fe77 	bl	801b5f4 <RegionCommonGetBandwidth>
 801b906:	9004      	str	r0, [sp, #16]
            break;
 801b908:	e785      	b.n	801b816 <RegionEU868GetPhyParam+0x72>
 801b90a:	bf00      	nop
 801b90c:	20001b7c 	.word	0x20001b7c
 801b910:	080284b8 	.word	0x080284b8
 801b914:	080284c0 	.word	0x080284c0
 801b918:	fffffc18 	.word	0xfffffc18
 801b91c:	33d3e608 	.word	0x33d3e608
 801b920:	4009999a 	.word	0x4009999a
 801b924:	080284b0 	.word	0x080284b0
 801b928:	08028490 	.word	0x08028490

0801b92c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801b92c:	b530      	push	{r4, r5, lr}
 801b92e:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801b930:	4b0b      	ldr	r3, [pc, #44]	; (801b960 <RegionEU868SetBandTxDone+0x34>)
 801b932:	681d      	ldr	r5, [r3, #0]
 801b934:	4b0b      	ldr	r3, [pc, #44]	; (801b964 <RegionEU868SetBandTxDone+0x38>)
 801b936:	681a      	ldr	r2, [r3, #0]
 801b938:	7803      	ldrb	r3, [r0, #0]
 801b93a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b93e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b942:	7a5b      	ldrb	r3, [r3, #9]
 801b944:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 801b948:	6903      	ldr	r3, [r0, #16]
 801b94a:	9300      	str	r3, [sp, #0]
 801b94c:	68c3      	ldr	r3, [r0, #12]
 801b94e:	7842      	ldrb	r2, [r0, #1]
 801b950:	6881      	ldr	r1, [r0, #8]
 801b952:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 801b956:	f7ff fc15 	bl	801b184 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 801b95a:	b003      	add	sp, #12
 801b95c:	bd30      	pop	{r4, r5, pc}
 801b95e:	bf00      	nop
 801b960:	20001b78 	.word	0x20001b78
 801b964:	20001b7c 	.word	0x20001b7c

0801b968 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 801b968:	b530      	push	{r4, r5, lr}
 801b96a:	b0a5      	sub	sp, #148	; 0x94
 801b96c:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 801b96e:	2290      	movs	r2, #144	; 0x90
 801b970:	2100      	movs	r1, #0
 801b972:	4668      	mov	r0, sp
 801b974:	f008 fad0 	bl	8023f18 <memset>
 801b978:	2364      	movs	r3, #100	; 0x64
 801b97a:	f8ad 3000 	strh.w	r3, [sp]
 801b97e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b982:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b986:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801b98a:	210a      	movs	r1, #10
 801b98c:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 801b990:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 801b994:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 801b998:	7a23      	ldrb	r3, [r4, #8]
 801b99a:	2b01      	cmp	r3, #1
 801b99c:	d031      	beq.n	801ba02 <RegionEU868InitDefaults+0x9a>
 801b99e:	2b02      	cmp	r3, #2
 801b9a0:	d03d      	beq.n	801ba1e <RegionEU868InitDefaults+0xb6>
 801b9a2:	b10b      	cbz	r3, 801b9a8 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 801b9a4:	b025      	add	sp, #148	; 0x94
 801b9a6:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801b9a8:	6820      	ldr	r0, [r4, #0]
 801b9aa:	2800      	cmp	r0, #0
 801b9ac:	d0fa      	beq.n	801b9a4 <RegionEU868InitDefaults+0x3c>
 801b9ae:	6863      	ldr	r3, [r4, #4]
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d0f7      	beq.n	801b9a4 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801b9b4:	4a1f      	ldr	r2, [pc, #124]	; (801ba34 <RegionEU868InitDefaults+0xcc>)
 801b9b6:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801b9b8:	4c1f      	ldr	r4, [pc, #124]	; (801ba38 <RegionEU868InitDefaults+0xd0>)
 801b9ba:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801b9bc:	2290      	movs	r2, #144	; 0x90
 801b9be:	4669      	mov	r1, sp
 801b9c0:	f004 fa81 	bl	801fec6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801b9c4:	6824      	ldr	r4, [r4, #0]
 801b9c6:	4b1d      	ldr	r3, [pc, #116]	; (801ba3c <RegionEU868InitDefaults+0xd4>)
 801b9c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b9cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801b9d0:	f104 050c 	add.w	r5, r4, #12
 801b9d4:	f103 020c 	add.w	r2, r3, #12
 801b9d8:	ca07      	ldmia	r2, {r0, r1, r2}
 801b9da:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801b9de:	f104 0518 	add.w	r5, r4, #24
 801b9e2:	3318      	adds	r3, #24
 801b9e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b9e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801b9ec:	2307      	movs	r3, #7
 801b9ee:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801b9f2:	2201      	movs	r2, #1
 801b9f4:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 801b9f8:	f504 7058 	add.w	r0, r4, #864	; 0x360
 801b9fc:	f7ff fbb1 	bl	801b162 <RegionCommonChanMaskCopy>
            break;
 801ba00:	e7d0      	b.n	801b9a4 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801ba02:	4b0d      	ldr	r3, [pc, #52]	; (801ba38 <RegionEU868InitDefaults+0xd0>)
 801ba04:	6818      	ldr	r0, [r3, #0]
 801ba06:	2300      	movs	r3, #0
 801ba08:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801ba0a:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801ba0c:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801ba0e:	2201      	movs	r2, #1
 801ba10:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 801ba14:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801ba18:	f7ff fba3 	bl	801b162 <RegionCommonChanMaskCopy>
            break;
 801ba1c:	e7c2      	b.n	801b9a4 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801ba1e:	4b06      	ldr	r3, [pc, #24]	; (801ba38 <RegionEU868InitDefaults+0xd0>)
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 801ba26:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 801ba2a:	430a      	orrs	r2, r1
 801ba2c:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 801ba30:	e7b8      	b.n	801b9a4 <RegionEU868InitDefaults+0x3c>
 801ba32:	bf00      	nop
 801ba34:	20001b78 	.word	0x20001b78
 801ba38:	20001b7c 	.word	0x20001b7c
 801ba3c:	08024b6c 	.word	0x08024b6c

0801ba40 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801ba40:	b500      	push	{lr}
 801ba42:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 801ba44:	290f      	cmp	r1, #15
 801ba46:	d83c      	bhi.n	801bac2 <RegionEU868Verify+0x82>
 801ba48:	e8df f001 	tbb	[pc, r1]
 801ba4c:	3b3b3b0a 	.word	0x3b3b3b0a
 801ba50:	271d133b 	.word	0x271d133b
 801ba54:	3b31313b 	.word	0x3b31313b
 801ba58:	083b3b3b 	.word	0x083b3b3b
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 801ba5c:	2001      	movs	r0, #1
 801ba5e:	e031      	b.n	801bac4 <RegionEU868Verify+0x84>
            uint8_t band = 0;
 801ba60:	2300      	movs	r3, #0
 801ba62:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 801ba66:	f10d 0107 	add.w	r1, sp, #7
 801ba6a:	6800      	ldr	r0, [r0, #0]
 801ba6c:	f7ff fe14 	bl	801b698 <VerifyRfFreq>
 801ba70:	e028      	b.n	801bac4 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 801ba72:	2207      	movs	r2, #7
 801ba74:	2100      	movs	r1, #0
 801ba76:	f990 0000 	ldrsb.w	r0, [r0]
 801ba7a:	f7ff fb00 	bl	801b07e <RegionCommonValueInRange>
 801ba7e:	3800      	subs	r0, #0
 801ba80:	bf18      	it	ne
 801ba82:	2001      	movne	r0, #1
 801ba84:	e01e      	b.n	801bac4 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801ba86:	2205      	movs	r2, #5
 801ba88:	2100      	movs	r1, #0
 801ba8a:	f990 0000 	ldrsb.w	r0, [r0]
 801ba8e:	f7ff faf6 	bl	801b07e <RegionCommonValueInRange>
 801ba92:	3800      	subs	r0, #0
 801ba94:	bf18      	it	ne
 801ba96:	2001      	movne	r0, #1
 801ba98:	e014      	b.n	801bac4 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801ba9a:	2207      	movs	r2, #7
 801ba9c:	2100      	movs	r1, #0
 801ba9e:	f990 0000 	ldrsb.w	r0, [r0]
 801baa2:	f7ff faec 	bl	801b07e <RegionCommonValueInRange>
 801baa6:	3800      	subs	r0, #0
 801baa8:	bf18      	it	ne
 801baaa:	2001      	movne	r0, #1
 801baac:	e00a      	b.n	801bac4 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801baae:	2207      	movs	r2, #7
 801bab0:	2100      	movs	r1, #0
 801bab2:	f990 0000 	ldrsb.w	r0, [r0]
 801bab6:	f7ff fae2 	bl	801b07e <RegionCommonValueInRange>
 801baba:	3800      	subs	r0, #0
 801babc:	bf18      	it	ne
 801babe:	2001      	movne	r0, #1
 801bac0:	e000      	b.n	801bac4 <RegionEU868Verify+0x84>
            return false;
 801bac2:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801bac4:	b003      	add	sp, #12
 801bac6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801bacc <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801bacc:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 801bace:	7903      	ldrb	r3, [r0, #4]
 801bad0:	b11b      	cbz	r3, 801bada <RegionEU868ChanMaskSet+0xe>
 801bad2:	2b01      	cmp	r3, #1
 801bad4:	d00b      	beq.n	801baee <RegionEU868ChanMaskSet+0x22>
 801bad6:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 801bad8:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801bada:	4b0a      	ldr	r3, [pc, #40]	; (801bb04 <RegionEU868ChanMaskSet+0x38>)
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	2201      	movs	r2, #1
 801bae0:	6801      	ldr	r1, [r0, #0]
 801bae2:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801bae6:	f7ff fb3c 	bl	801b162 <RegionCommonChanMaskCopy>
    return true;
 801baea:	2001      	movs	r0, #1
            break;
 801baec:	e7f4      	b.n	801bad8 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801baee:	4b05      	ldr	r3, [pc, #20]	; (801bb04 <RegionEU868ChanMaskSet+0x38>)
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	2201      	movs	r2, #1
 801baf4:	6801      	ldr	r1, [r0, #0]
 801baf6:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801bafa:	f7ff fb32 	bl	801b162 <RegionCommonChanMaskCopy>
    return true;
 801bafe:	2001      	movs	r0, #1
            break;
 801bb00:	e7ea      	b.n	801bad8 <RegionEU868ChanMaskSet+0xc>
 801bb02:	bf00      	nop
 801bb04:	20001b7c 	.word	0x20001b7c

0801bb08 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801bb08:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb0a:	b083      	sub	sp, #12
 801bb0c:	460e      	mov	r6, r1
 801bb0e:	4617      	mov	r7, r2
 801bb10:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801bb12:	2807      	cmp	r0, #7
 801bb14:	bfa8      	it	ge
 801bb16:	2007      	movge	r0, #7
 801bb18:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 801bb1a:	4913      	ldr	r1, [pc, #76]	; (801bb68 <RegionEU868ComputeRxWindowParameters+0x60>)
 801bb1c:	f7ff fd6a 	bl	801b5f4 <RegionCommonGetBandwidth>
 801bb20:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801bb22:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801bb26:	2b07      	cmp	r3, #7
 801bb28:	d017      	beq.n	801bb5a <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 801bb2a:	4a0f      	ldr	r2, [pc, #60]	; (801bb68 <RegionEU868ComputeRxWindowParameters+0x60>)
 801bb2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801bb30:	4a0e      	ldr	r2, [pc, #56]	; (801bb6c <RegionEU868ComputeRxWindowParameters+0x64>)
 801bb32:	5cd0      	ldrb	r0, [r2, r3]
 801bb34:	f7ff fc2e 	bl	801b394 <RegionCommonComputeSymbolTimeLoRa>
 801bb38:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801bb3a:	4b0d      	ldr	r3, [pc, #52]	; (801bb70 <RegionEU868ComputeRxWindowParameters+0x68>)
 801bb3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bb3e:	4798      	blx	r3
 801bb40:	4603      	mov	r3, r0
 801bb42:	f104 020c 	add.w	r2, r4, #12
 801bb46:	9201      	str	r2, [sp, #4]
 801bb48:	3408      	adds	r4, #8
 801bb4a:	9400      	str	r4, [sp, #0]
 801bb4c:	463a      	mov	r2, r7
 801bb4e:	4631      	mov	r1, r6
 801bb50:	4628      	mov	r0, r5
 801bb52:	f7ff fc2d 	bl	801b3b0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 801bb56:	b003      	add	sp, #12
 801bb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801bb5a:	4a04      	ldr	r2, [pc, #16]	; (801bb6c <RegionEU868ComputeRxWindowParameters+0x64>)
 801bb5c:	5cd0      	ldrb	r0, [r2, r3]
 801bb5e:	f7ff fc21 	bl	801b3a4 <RegionCommonComputeSymbolTimeFsk>
 801bb62:	4605      	mov	r5, r0
 801bb64:	e7e9      	b.n	801bb3a <RegionEU868ComputeRxWindowParameters+0x32>
 801bb66:	bf00      	nop
 801bb68:	08028490 	.word	0x08028490
 801bb6c:	080284b0 	.word	0x080284b0
 801bb70:	08028984 	.word	0x08028984

0801bb74 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801bb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb78:	b08a      	sub	sp, #40	; 0x28
 801bb7a:	4604      	mov	r4, r0
 801bb7c:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801bb7e:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801bb82:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 801bb86:	4b37      	ldr	r3, [pc, #220]	; (801bc64 <RegionEU868RxConfig+0xf0>)
 801bb88:	685b      	ldr	r3, [r3, #4]
 801bb8a:	4798      	blx	r3
 801bb8c:	2800      	cmp	r0, #0
 801bb8e:	d167      	bne.n	801bc60 <RegionEU868RxConfig+0xec>
 801bb90:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801bb92:	7ce3      	ldrb	r3, [r4, #19]
 801bb94:	b983      	cbnz	r3, 801bbb8 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801bb96:	4b34      	ldr	r3, [pc, #208]	; (801bc68 <RegionEU868RxConfig+0xf4>)
 801bb98:	681a      	ldr	r2, [r3, #0]
 801bb9a:	7823      	ldrb	r3, [r4, #0]
 801bb9c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801bba0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801bba4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bba8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bbac:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801bbb0:	f1b8 0f00 	cmp.w	r8, #0
 801bbb4:	d100      	bne.n	801bbb8 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801bbb6:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801bbb8:	4b2c      	ldr	r3, [pc, #176]	; (801bc6c <RegionEU868RxConfig+0xf8>)
 801bbba:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 801bbbe:	4b29      	ldr	r3, [pc, #164]	; (801bc64 <RegionEU868RxConfig+0xf0>)
 801bbc0:	68db      	ldr	r3, [r3, #12]
 801bbc2:	4640      	mov	r0, r8
 801bbc4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801bbc6:	2d07      	cmp	r5, #7
 801bbc8:	d02b      	beq.n	801bc22 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801bbca:	4b26      	ldr	r3, [pc, #152]	; (801bc64 <RegionEU868RxConfig+0xf0>)
 801bbcc:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801bbd0:	7ca3      	ldrb	r3, [r4, #18]
 801bbd2:	9309      	str	r3, [sp, #36]	; 0x24
 801bbd4:	2601      	movs	r6, #1
 801bbd6:	9608      	str	r6, [sp, #32]
 801bbd8:	2300      	movs	r3, #0
 801bbda:	9307      	str	r3, [sp, #28]
 801bbdc:	9306      	str	r3, [sp, #24]
 801bbde:	9305      	str	r3, [sp, #20]
 801bbe0:	9304      	str	r3, [sp, #16]
 801bbe2:	9303      	str	r3, [sp, #12]
 801bbe4:	8922      	ldrh	r2, [r4, #8]
 801bbe6:	9202      	str	r2, [sp, #8]
 801bbe8:	2208      	movs	r2, #8
 801bbea:	9201      	str	r2, [sp, #4]
 801bbec:	9300      	str	r3, [sp, #0]
 801bbee:	4633      	mov	r3, r6
 801bbf0:	464a      	mov	r2, r9
 801bbf2:	78a1      	ldrb	r1, [r4, #2]
 801bbf4:	4630      	mov	r0, r6
 801bbf6:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801bbf8:	7c63      	ldrb	r3, [r4, #17]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d02d      	beq.n	801bc5a <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801bbfe:	4b1c      	ldr	r3, [pc, #112]	; (801bc70 <RegionEU868RxConfig+0xfc>)
 801bc00:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801bc02:	4b18      	ldr	r3, [pc, #96]	; (801bc64 <RegionEU868RxConfig+0xf0>)
 801bc04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bc06:	310d      	adds	r1, #13
 801bc08:	b2c9      	uxtb	r1, r1
 801bc0a:	4630      	mov	r0, r6
 801bc0c:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801bc0e:	462a      	mov	r2, r5
 801bc10:	4641      	mov	r1, r8
 801bc12:	7ce0      	ldrb	r0, [r4, #19]
 801bc14:	f7ff fd00 	bl	801b618 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801bc18:	703d      	strb	r5, [r7, #0]
    return true;
 801bc1a:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801bc1c:	b00a      	add	sp, #40	; 0x28
 801bc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801bc22:	4b10      	ldr	r3, [pc, #64]	; (801bc64 <RegionEU868RxConfig+0xf0>)
 801bc24:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801bc28:	7ca3      	ldrb	r3, [r4, #18]
 801bc2a:	9309      	str	r3, [sp, #36]	; 0x24
 801bc2c:	2000      	movs	r0, #0
 801bc2e:	9008      	str	r0, [sp, #32]
 801bc30:	9007      	str	r0, [sp, #28]
 801bc32:	9006      	str	r0, [sp, #24]
 801bc34:	2301      	movs	r3, #1
 801bc36:	9305      	str	r3, [sp, #20]
 801bc38:	9004      	str	r0, [sp, #16]
 801bc3a:	9003      	str	r0, [sp, #12]
 801bc3c:	8923      	ldrh	r3, [r4, #8]
 801bc3e:	9302      	str	r3, [sp, #8]
 801bc40:	2305      	movs	r3, #5
 801bc42:	9301      	str	r3, [sp, #4]
 801bc44:	4b0b      	ldr	r3, [pc, #44]	; (801bc74 <RegionEU868RxConfig+0x100>)
 801bc46:	9300      	str	r3, [sp, #0]
 801bc48:	4603      	mov	r3, r0
 801bc4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801bc4e:	fb02 f209 	mul.w	r2, r2, r9
 801bc52:	f24c 3150 	movw	r1, #50000	; 0xc350
 801bc56:	47d0      	blx	sl
 801bc58:	e7ce      	b.n	801bbf8 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801bc5a:	4b07      	ldr	r3, [pc, #28]	; (801bc78 <RegionEU868RxConfig+0x104>)
 801bc5c:	5d59      	ldrb	r1, [r3, r5]
 801bc5e:	e7d0      	b.n	801bc02 <RegionEU868RxConfig+0x8e>
        return false;
 801bc60:	2000      	movs	r0, #0
 801bc62:	e7db      	b.n	801bc1c <RegionEU868RxConfig+0xa8>
 801bc64:	08028984 	.word	0x08028984
 801bc68:	20001b7c 	.word	0x20001b7c
 801bc6c:	080284b0 	.word	0x080284b0
 801bc70:	080284c0 	.word	0x080284c0
 801bc74:	00014585 	.word	0x00014585
 801bc78:	080284b8 	.word	0x080284b8

0801bc7c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801bc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc80:	b08d      	sub	sp, #52	; 0x34
 801bc82:	4604      	mov	r4, r0
 801bc84:	460f      	mov	r7, r1
 801bc86:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801bc88:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801bc8c:	4a42      	ldr	r2, [pc, #264]	; (801bd98 <RegionEU868TxConfig+0x11c>)
 801bc8e:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801bc92:	4b42      	ldr	r3, [pc, #264]	; (801bd9c <RegionEU868TxConfig+0x120>)
 801bc94:	6819      	ldr	r1, [r3, #0]
 801bc96:	4d42      	ldr	r5, [pc, #264]	; (801bda0 <RegionEU868TxConfig+0x124>)
 801bc98:	682b      	ldr	r3, [r5, #0]
 801bc9a:	7802      	ldrb	r2, [r0, #0]
 801bc9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bca0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801bca4:	7a53      	ldrb	r3, [r2, #9]
 801bca6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bcaa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801bcae:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801bcb2:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801bcb6:	f7ff fc98 	bl	801b5ea <RegionCommonLimitTxPower>
 801bcba:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801bcbc:	4939      	ldr	r1, [pc, #228]	; (801bda4 <RegionEU868TxConfig+0x128>)
 801bcbe:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801bcc2:	f7ff fc97 	bl	801b5f4 <RegionCommonGetBandwidth>
 801bcc6:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801bcc8:	68a2      	ldr	r2, [r4, #8]
 801bcca:	6861      	ldr	r1, [r4, #4]
 801bccc:	4630      	mov	r0, r6
 801bcce:	f7ff fba9 	bl	801b424 <RegionCommonComputeTxPower>
 801bcd2:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801bcd4:	4b34      	ldr	r3, [pc, #208]	; (801bda8 <RegionEU868TxConfig+0x12c>)
 801bcd6:	68da      	ldr	r2, [r3, #12]
 801bcd8:	6829      	ldr	r1, [r5, #0]
 801bcda:	7823      	ldrb	r3, [r4, #0]
 801bcdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bce0:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801bce4:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801bce6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801bcea:	2b07      	cmp	r3, #7
 801bcec:	d031      	beq.n	801bd52 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801bcee:	4b2e      	ldr	r3, [pc, #184]	; (801bda8 <RegionEU868TxConfig+0x12c>)
 801bcf0:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 801bcf4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801bcf8:	9308      	str	r3, [sp, #32]
 801bcfa:	2200      	movs	r2, #0
 801bcfc:	9207      	str	r2, [sp, #28]
 801bcfe:	9206      	str	r2, [sp, #24]
 801bd00:	9205      	str	r2, [sp, #20]
 801bd02:	2501      	movs	r5, #1
 801bd04:	9504      	str	r5, [sp, #16]
 801bd06:	9203      	str	r2, [sp, #12]
 801bd08:	2308      	movs	r3, #8
 801bd0a:	9302      	str	r3, [sp, #8]
 801bd0c:	9501      	str	r5, [sp, #4]
 801bd0e:	f8cd a000 	str.w	sl, [sp]
 801bd12:	464b      	mov	r3, r9
 801bd14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bd16:	4628      	mov	r0, r5
 801bd18:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801bd1a:	4b21      	ldr	r3, [pc, #132]	; (801bda0 <RegionEU868TxConfig+0x124>)
 801bd1c:	681a      	ldr	r2, [r3, #0]
 801bd1e:	7823      	ldrb	r3, [r4, #0]
 801bd20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bd24:	f994 1001 	ldrsb.w	r1, [r4, #1]
 801bd28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bd2c:	f7ff fca4 	bl	801b678 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801bd30:	89a1      	ldrh	r1, [r4, #12]
 801bd32:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801bd36:	f7ff fd03 	bl	801b740 <GetTimeOnAir>
 801bd3a:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801bd3e:	4b1a      	ldr	r3, [pc, #104]	; (801bda8 <RegionEU868TxConfig+0x12c>)
 801bd40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bd42:	7b21      	ldrb	r1, [r4, #12]
 801bd44:	4628      	mov	r0, r5
 801bd46:	4798      	blx	r3

    *txPower = txPowerLimited;
 801bd48:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 801bd4a:	2001      	movs	r0, #1
 801bd4c:	b00d      	add	sp, #52	; 0x34
 801bd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801bd52:	4b15      	ldr	r3, [pc, #84]	; (801bda8 <RegionEU868TxConfig+0x12c>)
 801bd54:	69dd      	ldr	r5, [r3, #28]
 801bd56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801bd5a:	fb03 f30a 	mul.w	r3, r3, sl
 801bd5e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801bd62:	9208      	str	r2, [sp, #32]
 801bd64:	f04f 0b00 	mov.w	fp, #0
 801bd68:	f8cd b01c 	str.w	fp, [sp, #28]
 801bd6c:	f8cd b018 	str.w	fp, [sp, #24]
 801bd70:	f8cd b014 	str.w	fp, [sp, #20]
 801bd74:	2201      	movs	r2, #1
 801bd76:	9204      	str	r2, [sp, #16]
 801bd78:	f8cd b00c 	str.w	fp, [sp, #12]
 801bd7c:	2205      	movs	r2, #5
 801bd7e:	9202      	str	r2, [sp, #8]
 801bd80:	f8cd b004 	str.w	fp, [sp, #4]
 801bd84:	9300      	str	r3, [sp, #0]
 801bd86:	464b      	mov	r3, r9
 801bd88:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801bd8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bd8e:	4658      	mov	r0, fp
 801bd90:	47a8      	blx	r5
        modem = MODEM_FSK;
 801bd92:	465d      	mov	r5, fp
 801bd94:	e7c1      	b.n	801bd1a <RegionEU868TxConfig+0x9e>
 801bd96:	bf00      	nop
 801bd98:	080284b0 	.word	0x080284b0
 801bd9c:	20001b78 	.word	0x20001b78
 801bda0:	20001b7c 	.word	0x20001b7c
 801bda4:	08028490 	.word	0x08028490
 801bda8:	08028984 	.word	0x08028984

0801bdac <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801bdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdb0:	b08f      	sub	sp, #60	; 0x3c
 801bdb2:	4607      	mov	r7, r0
 801bdb4:	468b      	mov	fp, r1
 801bdb6:	4692      	mov	sl, r2
 801bdb8:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801bdba:	2500      	movs	r5, #0
 801bdbc:	950c      	str	r5, [sp, #48]	; 0x30
 801bdbe:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 801bdc2:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 801bdc6:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801bdca:	e02d      	b.n	801be28 <RegionEU868LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801bdcc:	2400      	movs	r4, #0
        status = 0x07;
 801bdce:	f04f 0807 	mov.w	r8, #7
 801bdd2:	e00f      	b.n	801bdf4 <RegionEU868LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801bdd4:	4a56      	ldr	r2, [pc, #344]	; (801bf30 <RegionEU868LinkAdrReq+0x184>)
 801bdd6:	6812      	ldr	r2, [r2, #0]
 801bdd8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801bddc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801bde0:	b132      	cbz	r2, 801bdf0 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 801bde2:	2201      	movs	r2, #1
 801bde4:	40a2      	lsls	r2, r4
 801bde6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801bdea:	430a      	orrs	r2, r1
 801bdec:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801bdf0:	3401      	adds	r4, #1
 801bdf2:	b2e4      	uxtb	r4, r4
 801bdf4:	2c0f      	cmp	r4, #15
 801bdf6:	d817      	bhi.n	801be28 <RegionEU868LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 801bdf8:	2b06      	cmp	r3, #6
 801bdfa:	d0eb      	beq.n	801bdd4 <RegionEU868LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801bdfc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801be00:	4126      	asrs	r6, r4
 801be02:	f016 0f01 	tst.w	r6, #1
 801be06:	d0f3      	beq.n	801bdf0 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801be08:	4a49      	ldr	r2, [pc, #292]	; (801bf30 <RegionEU868LinkAdrReq+0x184>)
 801be0a:	6812      	ldr	r2, [r2, #0]
 801be0c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801be10:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801be14:	2a00      	cmp	r2, #0
 801be16:	d1eb      	bne.n	801bdf0 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801be18:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 801be1c:	e7e8      	b.n	801bdf0 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 801be1e:	f04f 0806 	mov.w	r8, #6
 801be22:	e001      	b.n	801be28 <RegionEU868LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 801be24:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801be28:	7a3b      	ldrb	r3, [r7, #8]
 801be2a:	42ab      	cmp	r3, r5
 801be2c:	d919      	bls.n	801be62 <RegionEU868LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801be2e:	6878      	ldr	r0, [r7, #4]
 801be30:	a90c      	add	r1, sp, #48	; 0x30
 801be32:	4428      	add	r0, r5
 801be34:	f7ff fa46 	bl	801b2c4 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 801be38:	b198      	cbz	r0, 801be62 <RegionEU868LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 801be3a:	4405      	add	r5, r0
 801be3c:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 801be3e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801be42:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801be46:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801be4a:	b90b      	cbnz	r3, 801be50 <RegionEU868LinkAdrReq+0xa4>
 801be4c:	2a00      	cmp	r2, #0
 801be4e:	d0e6      	beq.n	801be1e <RegionEU868LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801be50:	1e5a      	subs	r2, r3, #1
 801be52:	b2d2      	uxtb	r2, r2
 801be54:	2a04      	cmp	r2, #4
 801be56:	d9e5      	bls.n	801be24 <RegionEU868LinkAdrReq+0x78>
 801be58:	2b06      	cmp	r3, #6
 801be5a:	d9b7      	bls.n	801bdcc <RegionEU868LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 801be5c:	f04f 0806 	mov.w	r8, #6
 801be60:	e7e2      	b.n	801be28 <RegionEU868LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801be62:	2302      	movs	r3, #2
 801be64:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801be68:	7a7b      	ldrb	r3, [r7, #9]
 801be6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 801be6e:	a80a      	add	r0, sp, #40	; 0x28
 801be70:	f7ff fc98 	bl	801b7a4 <RegionEU868GetPhyParam>

    linkAdrVerifyParams.Status = status;
 801be74:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801be78:	7abb      	ldrb	r3, [r7, #10]
 801be7a:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801be7e:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801be82:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801be86:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801be8a:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801be8e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801be92:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801be96:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801be9a:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801be9e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801bea2:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801bea6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801beaa:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801beae:	2310      	movs	r3, #16
 801beb0:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801beb4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801beb8:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801beba:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801bebe:	2307      	movs	r3, #7
 801bec0:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801bec4:	4a1a      	ldr	r2, [pc, #104]	; (801bf30 <RegionEU868LinkAdrReq+0x184>)
 801bec6:	6812      	ldr	r2, [r2, #0]
 801bec8:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801beca:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801bece:	2300      	movs	r3, #0
 801bed0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801bed4:	683b      	ldr	r3, [r7, #0]
 801bed6:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801bed8:	ab0c      	add	r3, sp, #48	; 0x30
 801beda:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801bede:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 801bee2:	a801      	add	r0, sp, #4
 801bee4:	f7ff fa0a 	bl	801b2fc <RegionCommonLinkAdrReqVerifyParams>
 801bee8:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801beea:	2807      	cmp	r0, #7
 801beec:	d011      	beq.n	801bf12 <RegionEU868LinkAdrReq+0x166>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801beee:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801bef2:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 801bef6:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801befa:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 801befe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801bf02:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 801bf06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bf08:	701d      	strb	r5, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 801bf0a:	4620      	mov	r0, r4
 801bf0c:	b00f      	add	sp, #60	; 0x3c
 801bf0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801bf12:	4e07      	ldr	r6, [pc, #28]	; (801bf30 <RegionEU868LinkAdrReq+0x184>)
 801bf14:	6830      	ldr	r0, [r6, #0]
 801bf16:	220c      	movs	r2, #12
 801bf18:	2100      	movs	r1, #0
 801bf1a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801bf1e:	f003 ffe8 	bl	801fef2 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801bf22:	6833      	ldr	r3, [r6, #0]
 801bf24:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801bf28:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 801bf2c:	e7df      	b.n	801beee <RegionEU868LinkAdrReq+0x142>
 801bf2e:	bf00      	nop
 801bf30:	20001b7c 	.word	0x20001b7c

0801bf34 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801bf34:	b530      	push	{r4, r5, lr}
 801bf36:	b083      	sub	sp, #12
 801bf38:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801bf3a:	2300      	movs	r3, #0
 801bf3c:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 801bf40:	f10d 0107 	add.w	r1, sp, #7
 801bf44:	6840      	ldr	r0, [r0, #4]
 801bf46:	f7ff fba7 	bl	801b698 <VerifyRfFreq>
 801bf4a:	b1a8      	cbz	r0, 801bf78 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 801bf4c:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 801bf4e:	2207      	movs	r2, #7
 801bf50:	2100      	movs	r1, #0
 801bf52:	f994 0000 	ldrsb.w	r0, [r4]
 801bf56:	f7ff f892 	bl	801b07e <RegionCommonValueInRange>
 801bf5a:	b908      	cbnz	r0, 801bf60 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 801bf5c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801bf60:	2205      	movs	r2, #5
 801bf62:	2100      	movs	r1, #0
 801bf64:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801bf68:	f7ff f889 	bl	801b07e <RegionCommonValueInRange>
 801bf6c:	b908      	cbnz	r0, 801bf72 <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801bf6e:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 801bf72:	4628      	mov	r0, r5
 801bf74:	b003      	add	sp, #12
 801bf76:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 801bf78:	2506      	movs	r5, #6
 801bf7a:	e7e8      	b.n	801bf4e <RegionEU868RxParamSetupReq+0x1a>

0801bf7c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 801bf7c:	f04f 30ff 	mov.w	r0, #4294967295
 801bf80:	4770      	bx	lr
	...

0801bf84 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801bf84:	b510      	push	{r4, lr}
 801bf86:	b082      	sub	sp, #8
 801bf88:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801bf8a:	2300      	movs	r3, #0
 801bf8c:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801bf90:	f10d 0107 	add.w	r1, sp, #7
 801bf94:	6840      	ldr	r0, [r0, #4]
 801bf96:	f7ff fb7f 	bl	801b698 <VerifyRfFreq>
 801bf9a:	b178      	cbz	r0, 801bfbc <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 801bf9c:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801bf9e:	4b0c      	ldr	r3, [pc, #48]	; (801bfd0 <RegionEU868DlChannelReq+0x4c>)
 801bfa0:	681a      	ldr	r2, [r3, #0]
 801bfa2:	7823      	ldrb	r3, [r4, #0]
 801bfa4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801bfa8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801bfac:	b909      	cbnz	r1, 801bfb2 <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 801bfae:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801bfb2:	2803      	cmp	r0, #3
 801bfb4:	d004      	beq.n	801bfc0 <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 801bfb6:	b240      	sxtb	r0, r0
 801bfb8:	b002      	add	sp, #8
 801bfba:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 801bfbc:	2002      	movs	r0, #2
 801bfbe:	e7ee      	b.n	801bf9e <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801bfc0:	6861      	ldr	r1, [r4, #4]
 801bfc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bfc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bfca:	6059      	str	r1, [r3, #4]
 801bfcc:	e7f3      	b.n	801bfb6 <RegionEU868DlChannelReq+0x32>
 801bfce:	bf00      	nop
 801bfd0:	20001b7c 	.word	0x20001b7c

0801bfd4 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 801bfd4:	4770      	bx	lr
	...

0801bfd8 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801bfd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfda:	b097      	sub	sp, #92	; 0x5c
 801bfdc:	4604      	mov	r4, r0
 801bfde:	460f      	mov	r7, r1
 801bfe0:	4616      	mov	r6, r2
 801bfe2:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801bfe4:	2100      	movs	r1, #0
 801bfe6:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 801bfea:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801bfee:	9111      	str	r1, [sp, #68]	; 0x44
 801bff0:	9112      	str	r1, [sp, #72]	; 0x48
 801bff2:	9113      	str	r1, [sp, #76]	; 0x4c
 801bff4:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 801bff6:	2307      	movs	r3, #7
 801bff8:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801bffc:	4b32      	ldr	r3, [pc, #200]	; (801c0c8 <RegionEU868NextChannel+0xf0>)
 801bffe:	6818      	ldr	r0, [r3, #0]
 801c000:	2201      	movs	r2, #1
 801c002:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801c006:	f7ff f896 	bl	801b136 <RegionCommonCountChannels>
 801c00a:	b938      	cbnz	r0, 801c01c <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801c00c:	4b2e      	ldr	r3, [pc, #184]	; (801c0c8 <RegionEU868NextChannel+0xf0>)
 801c00e:	681a      	ldr	r2, [r3, #0]
 801c010:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801c014:	f043 0307 	orr.w	r3, r3, #7
 801c018:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801c01c:	7a63      	ldrb	r3, [r4, #9]
 801c01e:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801c022:	7a23      	ldrb	r3, [r4, #8]
 801c024:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801c028:	4b27      	ldr	r3, [pc, #156]	; (801c0c8 <RegionEU868NextChannel+0xf0>)
 801c02a:	681b      	ldr	r3, [r3, #0]
 801c02c:	f503 7258 	add.w	r2, r3, #864	; 0x360
 801c030:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801c032:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801c034:	4b25      	ldr	r3, [pc, #148]	; (801c0cc <RegionEU868NextChannel+0xf4>)
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801c03a:	2310      	movs	r3, #16
 801c03c:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 801c040:	f10d 030a 	add.w	r3, sp, #10
 801c044:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801c046:	6823      	ldr	r3, [r4, #0]
 801c048:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801c04a:	6863      	ldr	r3, [r4, #4]
 801c04c:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801c04e:	7aa3      	ldrb	r3, [r4, #10]
 801c050:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801c054:	2306      	movs	r3, #6
 801c056:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801c05a:	ab0c      	add	r3, sp, #48	; 0x30
 801c05c:	6921      	ldr	r1, [r4, #16]
 801c05e:	68e0      	ldr	r0, [r4, #12]
 801c060:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801c064:	7d23      	ldrb	r3, [r4, #20]
 801c066:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801c06a:	8ae1      	ldrh	r1, [r4, #22]
 801c06c:	f994 0008 	ldrsb.w	r0, [r4, #8]
 801c070:	f7ff fb66 	bl	801b740 <GetTimeOnAir>
 801c074:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801c076:	ab03      	add	r3, sp, #12
 801c078:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801c07a:	9601      	str	r6, [sp, #4]
 801c07c:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 801c080:	9300      	str	r3, [sp, #0]
 801c082:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 801c086:	aa11      	add	r2, sp, #68	; 0x44
 801c088:	4629      	mov	r1, r5
 801c08a:	a809      	add	r0, sp, #36	; 0x24
 801c08c:	f7ff fa46 	bl	801b51c <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801c090:	4604      	mov	r4, r0
 801c092:	b120      	cbz	r0, 801c09e <RegionEU868NextChannel+0xc6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801c094:	280c      	cmp	r0, #12
 801c096:	d00d      	beq.n	801c0b4 <RegionEU868NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801c098:	4620      	mov	r0, r4
 801c09a:	b017      	add	sp, #92	; 0x5c
 801c09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801c09e:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 801c0a2:	3901      	subs	r1, #1
 801c0a4:	f003 ff02 	bl	801feac <randr>
 801c0a8:	ab16      	add	r3, sp, #88	; 0x58
 801c0aa:	4418      	add	r0, r3
 801c0ac:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 801c0b0:	703b      	strb	r3, [r7, #0]
 801c0b2:	e7f1      	b.n	801c098 <RegionEU868NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801c0b4:	4b04      	ldr	r3, [pc, #16]	; (801c0c8 <RegionEU868NextChannel+0xf0>)
 801c0b6:	681a      	ldr	r2, [r3, #0]
 801c0b8:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801c0bc:	f043 0307 	orr.w	r3, r3, #7
 801c0c0:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 801c0c4:	e7e8      	b.n	801c098 <RegionEU868NextChannel+0xc0>
 801c0c6:	bf00      	nop
 801c0c8:	20001b7c 	.word	0x20001b7c
 801c0cc:	20001b78 	.word	0x20001b78

0801c0d0 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801c0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0d2:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801c0d4:	2300      	movs	r3, #0
 801c0d6:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 801c0da:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801c0dc:	2d02      	cmp	r5, #2
 801c0de:	d94f      	bls.n	801c180 <RegionEU868ChannelAdd+0xb0>
 801c0e0:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801c0e2:	2d0f      	cmp	r5, #15
 801c0e4:	d84e      	bhi.n	801c184 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801c0e6:	6803      	ldr	r3, [r0, #0]
 801c0e8:	7a18      	ldrb	r0, [r3, #8]
 801c0ea:	f340 0003 	sbfx	r0, r0, #0, #4
 801c0ee:	2207      	movs	r2, #7
 801c0f0:	2100      	movs	r1, #0
 801c0f2:	b240      	sxtb	r0, r0
 801c0f4:	f7fe ffc3 	bl	801b07e <RegionCommonValueInRange>
 801c0f8:	2800      	cmp	r0, #0
 801c0fa:	d03d      	beq.n	801c178 <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 801c0fc:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801c0fe:	6823      	ldr	r3, [r4, #0]
 801c100:	7a18      	ldrb	r0, [r3, #8]
 801c102:	f340 1003 	sbfx	r0, r0, #4, #4
 801c106:	2207      	movs	r2, #7
 801c108:	2100      	movs	r1, #0
 801c10a:	b240      	sxtb	r0, r0
 801c10c:	f7fe ffb7 	bl	801b07e <RegionCommonValueInRange>
 801c110:	b900      	cbnz	r0, 801c114 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 801c112:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801c114:	6820      	ldr	r0, [r4, #0]
 801c116:	7a03      	ldrb	r3, [r0, #8]
 801c118:	f343 0203 	sbfx	r2, r3, #0, #4
 801c11c:	b252      	sxtb	r2, r2
 801c11e:	f343 1303 	sbfx	r3, r3, #4, #4
 801c122:	b25b      	sxtb	r3, r3
 801c124:	429a      	cmp	r2, r3
 801c126:	dd00      	ble.n	801c12a <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 801c128:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801c12a:	f10d 0107 	add.w	r1, sp, #7
 801c12e:	6800      	ldr	r0, [r0, #0]
 801c130:	f7ff fab2 	bl	801b698 <VerifyRfFreq>
 801c134:	b310      	cbz	r0, 801c17c <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 801c136:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801c138:	b106      	cbz	r6, 801c13c <RegionEU868ChannelAdd+0x6c>
 801c13a:	bb33      	cbnz	r3, 801c18a <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 801c13c:	bb3e      	cbnz	r6, 801c18e <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 801c13e:	bb43      	cbnz	r3, 801c192 <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801c140:	4f15      	ldr	r7, [pc, #84]	; (801c198 <RegionEU868ChannelAdd+0xc8>)
 801c142:	683b      	ldr	r3, [r7, #0]
 801c144:	006e      	lsls	r6, r5, #1
 801c146:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801c14a:	220c      	movs	r2, #12
 801c14c:	6821      	ldr	r1, [r4, #0]
 801c14e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801c152:	f003 feb8 	bl	801fec6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801c156:	683a      	ldr	r2, [r7, #0]
 801c158:	442e      	add	r6, r5
 801c15a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c15e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c162:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 801c164:	2301      	movs	r3, #1
 801c166:	fa03 f505 	lsl.w	r5, r3, r5
 801c16a:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801c16e:	431d      	orrs	r5, r3
 801c170:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 801c174:	2000      	movs	r0, #0
 801c176:	e006      	b.n	801c186 <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 801c178:	2601      	movs	r6, #1
 801c17a:	e7c0      	b.n	801c0fe <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 801c17c:	2301      	movs	r3, #1
 801c17e:	e7db      	b.n	801c138 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801c180:	2006      	movs	r0, #6
 801c182:	e000      	b.n	801c186 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801c184:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801c186:	b003      	add	sp, #12
 801c188:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801c18a:	2006      	movs	r0, #6
 801c18c:	e7fb      	b.n	801c186 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 801c18e:	2005      	movs	r0, #5
 801c190:	e7f9      	b.n	801c186 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801c192:	2004      	movs	r0, #4
 801c194:	e7f7      	b.n	801c186 <RegionEU868ChannelAdd+0xb6>
 801c196:	bf00      	nop
 801c198:	20001b7c 	.word	0x20001b7c

0801c19c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801c19c:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801c19e:	2902      	cmp	r1, #2
 801c1a0:	d801      	bhi.n	801c1a6 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 801c1a2:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 801c1a4:	4770      	bx	lr
{
 801c1a6:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801c1a8:	4b08      	ldr	r3, [pc, #32]	; (801c1cc <RegionEU868ChannelsRemove+0x30>)
 801c1aa:	6818      	ldr	r0, [r3, #0]
 801c1ac:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 801c1b0:	009c      	lsls	r4, r3, #2
 801c1b2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801c1b6:	2200      	movs	r2, #0
 801c1b8:	5102      	str	r2, [r0, r4]
 801c1ba:	605a      	str	r2, [r3, #4]
 801c1bc:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801c1be:	2210      	movs	r2, #16
 801c1c0:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801c1c4:	f7fe ff9d 	bl	801b102 <RegionCommonChanDisable>
}
 801c1c8:	bd10      	pop	{r4, pc}
 801c1ca:	bf00      	nop
 801c1cc:	20001b7c 	.word	0x20001b7c

0801c1d0 <RegionEU868ApplyCFList>:
{
 801c1d0:	b570      	push	{r4, r5, r6, lr}
 801c1d2:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801c1d4:	2350      	movs	r3, #80	; 0x50
 801c1d6:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 801c1da:	7903      	ldrb	r3, [r0, #4]
 801c1dc:	2b10      	cmp	r3, #16
 801c1de:	d135      	bne.n	801c24c <RegionEU868ApplyCFList+0x7c>
 801c1e0:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 801c1e2:	6803      	ldr	r3, [r0, #0]
 801c1e4:	7bdd      	ldrb	r5, [r3, #15]
 801c1e6:	2d00      	cmp	r5, #0
 801c1e8:	d130      	bne.n	801c24c <RegionEU868ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801c1ea:	2403      	movs	r4, #3
 801c1ec:	e01a      	b.n	801c224 <RegionEU868ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801c1ee:	6832      	ldr	r2, [r6, #0]
 801c1f0:	5d53      	ldrb	r3, [r2, r5]
 801c1f2:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801c1f4:	442a      	add	r2, r5
 801c1f6:	7851      	ldrb	r1, [r2, #1]
 801c1f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801c1fc:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801c1fe:	7892      	ldrb	r2, [r2, #2]
 801c200:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 801c204:	2264      	movs	r2, #100	; 0x64
 801c206:	fb02 f303 	mul.w	r3, r2, r3
 801c20a:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 801c20c:	2300      	movs	r3, #0
 801c20e:	9304      	str	r3, [sp, #16]
 801c210:	e011      	b.n	801c236 <RegionEU868ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 801c212:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 801c216:	4668      	mov	r0, sp
 801c218:	f7ff ffc0 	bl	801c19c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801c21c:	3503      	adds	r5, #3
 801c21e:	b2ed      	uxtb	r5, r5
 801c220:	3401      	adds	r4, #1
 801c222:	b2e4      	uxtb	r4, r4
 801c224:	2c0f      	cmp	r4, #15
 801c226:	d811      	bhi.n	801c24c <RegionEU868ApplyCFList+0x7c>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 801c228:	2c07      	cmp	r4, #7
 801c22a:	d9e0      	bls.n	801c1ee <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 801c22c:	2300      	movs	r3, #0
 801c22e:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 801c230:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 801c234:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 801c236:	9b03      	ldr	r3, [sp, #12]
 801c238:	2b00      	cmp	r3, #0
 801c23a:	d0ea      	beq.n	801c212 <RegionEU868ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 801c23c:	ab03      	add	r3, sp, #12
 801c23e:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 801c240:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 801c244:	a801      	add	r0, sp, #4
 801c246:	f7ff ff43 	bl	801c0d0 <RegionEU868ChannelAdd>
 801c24a:	e7e7      	b.n	801c21c <RegionEU868ApplyCFList+0x4c>
}
 801c24c:	b006      	add	sp, #24
 801c24e:	bd70      	pop	{r4, r5, r6, pc}

0801c250 <RegionEU868NewChannelReq>:
{
 801c250:	b500      	push	{lr}
 801c252:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 801c254:	6803      	ldr	r3, [r0, #0]
 801c256:	681a      	ldr	r2, [r3, #0]
 801c258:	b952      	cbnz	r2, 801c270 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801c25a:	7903      	ldrb	r3, [r0, #4]
 801c25c:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801c260:	a801      	add	r0, sp, #4
 801c262:	f7ff ff9b 	bl	801c19c <RegionEU868ChannelsRemove>
 801c266:	b1d0      	cbz	r0, 801c29e <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 801c268:	2003      	movs	r0, #3
}
 801c26a:	b005      	add	sp, #20
 801c26c:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801c270:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801c272:	7903      	ldrb	r3, [r0, #4]
 801c274:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801c278:	a802      	add	r0, sp, #8
 801c27a:	f7ff ff29 	bl	801c0d0 <RegionEU868ChannelAdd>
 801c27e:	2806      	cmp	r0, #6
 801c280:	d80b      	bhi.n	801c29a <RegionEU868NewChannelReq+0x4a>
 801c282:	e8df f000 	tbb	[pc, r0]
 801c286:	0a04      	.short	0x0a04
 801c288:	060e0a0a 	.word	0x060e0a0a
 801c28c:	08          	.byte	0x08
 801c28d:	00          	.byte	0x00
 801c28e:	2003      	movs	r0, #3
 801c290:	e7eb      	b.n	801c26a <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 801c292:	2001      	movs	r0, #1
                break;
 801c294:	e7e9      	b.n	801c26a <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 801c296:	2000      	movs	r0, #0
                break;
 801c298:	e7e7      	b.n	801c26a <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 801c29a:	2000      	movs	r0, #0
                break;
 801c29c:	e7e5      	b.n	801c26a <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 801c29e:	2000      	movs	r0, #0
 801c2a0:	e7e3      	b.n	801c26a <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 801c2a2:	2002      	movs	r0, #2
 801c2a4:	e7e1      	b.n	801c26a <RegionEU868NewChannelReq+0x1a>
	...

0801c2a8 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801c2a8:	b538      	push	{r3, r4, r5, lr}
 801c2aa:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801c2ac:	4b12      	ldr	r3, [pc, #72]	; (801c2f8 <RegionEU868SetContinuousWave+0x50>)
 801c2ae:	6819      	ldr	r1, [r3, #0]
 801c2b0:	4d12      	ldr	r5, [pc, #72]	; (801c2fc <RegionEU868SetContinuousWave+0x54>)
 801c2b2:	682b      	ldr	r3, [r5, #0]
 801c2b4:	7802      	ldrb	r2, [r0, #0]
 801c2b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c2ba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801c2be:	7a53      	ldrb	r3, [r2, #9]
 801c2c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c2c4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801c2c8:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801c2cc:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801c2d0:	f7ff f98b 	bl	801b5ea <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801c2d4:	682a      	ldr	r2, [r5, #0]
 801c2d6:	7823      	ldrb	r3, [r4, #0]
 801c2d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c2dc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801c2e0:	68a2      	ldr	r2, [r4, #8]
 801c2e2:	6861      	ldr	r1, [r4, #4]
 801c2e4:	f7ff f89e 	bl	801b424 <RegionCommonComputeTxPower>
 801c2e8:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801c2ea:	4b05      	ldr	r3, [pc, #20]	; (801c300 <RegionEU868SetContinuousWave+0x58>)
 801c2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c2ee:	89a2      	ldrh	r2, [r4, #12]
 801c2f0:	4628      	mov	r0, r5
 801c2f2:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 801c2f4:	bd38      	pop	{r3, r4, r5, pc}
 801c2f6:	bf00      	nop
 801c2f8:	20001b78 	.word	0x20001b78
 801c2fc:	20001b7c 	.word	0x20001b7c
 801c300:	08028984 	.word	0x08028984

0801c304 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801c304:	1a88      	subs	r0, r1, r2
 801c306:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 801c308:	2800      	cmp	r0, #0
 801c30a:	db01      	blt.n	801c310 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 801c30c:	b2c0      	uxtb	r0, r0
 801c30e:	4770      	bx	lr
        datarate = DR_0;
 801c310:	2000      	movs	r0, #0
 801c312:	e7fb      	b.n	801c30c <RegionEU868ApplyDrOffset+0x8>

0801c314 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;


static bool VerifyRfFreq( uint32_t freq )
{
 801c314:	b510      	push	{r4, lr}
 801c316:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801c318:	4b05      	ldr	r3, [pc, #20]	; (801c330 <VerifyRfFreq+0x1c>)
 801c31a:	6a1b      	ldr	r3, [r3, #32]
 801c31c:	4798      	blx	r3
 801c31e:	b120      	cbz	r0, 801c32a <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 801c320:	4b04      	ldr	r3, [pc, #16]	; (801c334 <VerifyRfFreq+0x20>)
 801c322:	4423      	add	r3, r4
 801c324:	4a04      	ldr	r2, [pc, #16]	; (801c338 <VerifyRfFreq+0x24>)
 801c326:	4293      	cmp	r3, r2
 801c328:	d800      	bhi.n	801c32c <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 801c32a:	bd10      	pop	{r4, pc}
        return false;
 801c32c:	2000      	movs	r0, #0
 801c32e:	e7fc      	b.n	801c32a <VerifyRfFreq+0x16>
 801c330:	08028984 	.word	0x08028984
 801c334:	cc7125c0 	.word	0xcc7125c0
 801c338:	001e8480 	.word	0x001e8480

0801c33c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801c33c:	b570      	push	{r4, r5, r6, lr}
 801c33e:	b084      	sub	sp, #16
 801c340:	4605      	mov	r5, r0
 801c342:	460c      	mov	r4, r1
    int8_t phyDr = DataratesIN865[datarate];
 801c344:	4b13      	ldr	r3, [pc, #76]	; (801c394 <GetTimeOnAir+0x58>)
 801c346:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsIN865 );
 801c348:	4913      	ldr	r1, [pc, #76]	; (801c398 <GetTimeOnAir+0x5c>)
 801c34a:	f7ff f953 	bl	801b5f4 <RegionCommonGetBandwidth>
 801c34e:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 801c350:	2d07      	cmp	r5, #7
 801c352:	d00e      	beq.n	801c372 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801c354:	4b11      	ldr	r3, [pc, #68]	; (801c39c <GetTimeOnAir+0x60>)
 801c356:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801c358:	2001      	movs	r0, #1
 801c35a:	9003      	str	r0, [sp, #12]
 801c35c:	b2e4      	uxtb	r4, r4
 801c35e:	9402      	str	r4, [sp, #8]
 801c360:	2300      	movs	r3, #0
 801c362:	9301      	str	r3, [sp, #4]
 801c364:	2308      	movs	r3, #8
 801c366:	9300      	str	r3, [sp, #0]
 801c368:	4603      	mov	r3, r0
 801c36a:	4632      	mov	r2, r6
 801c36c:	47a8      	blx	r5
    }
    return timeOnAir;
}
 801c36e:	b004      	add	sp, #16
 801c370:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801c372:	4b0a      	ldr	r3, [pc, #40]	; (801c39c <GetTimeOnAir+0x60>)
 801c374:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801c376:	2301      	movs	r3, #1
 801c378:	9303      	str	r3, [sp, #12]
 801c37a:	b2e4      	uxtb	r4, r4
 801c37c:	9402      	str	r4, [sp, #8]
 801c37e:	2000      	movs	r0, #0
 801c380:	9001      	str	r0, [sp, #4]
 801c382:	2305      	movs	r3, #5
 801c384:	9300      	str	r3, [sp, #0]
 801c386:	4603      	mov	r3, r0
 801c388:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c38c:	fb02 f206 	mul.w	r2, r2, r6
 801c390:	47a8      	blx	r5
 801c392:	e7ec      	b.n	801c36e <GetTimeOnAir+0x32>
 801c394:	080284e8 	.word	0x080284e8
 801c398:	080284c8 	.word	0x080284c8
 801c39c:	08028984 	.word	0x08028984

0801c3a0 <RegionIN865GetPhyParam>:
#endif /* REGION_IN865 */

PhyParam_t RegionIN865GetPhyParam( GetPhyParams_t* getPhy )
{
 801c3a0:	b500      	push	{lr}
 801c3a2:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 801c3a4:	2300      	movs	r3, #0
 801c3a6:	9304      	str	r3, [sp, #16]

#if defined( REGION_IN865 )
    switch( getPhy->Attribute )
 801c3a8:	7803      	ldrb	r3, [r0, #0]
 801c3aa:	3b0b      	subs	r3, #11
 801c3ac:	2b2e      	cmp	r3, #46	; 0x2e
 801c3ae:	d830      	bhi.n	801c412 <RegionIN865GetPhyParam+0x72>
 801c3b0:	e8df f003 	tbb	[pc, r3]
 801c3b4:	3f393633 	.word	0x3f393633
 801c3b8:	4d49452f 	.word	0x4d49452f
 801c3bc:	5d595551 	.word	0x5d595551
 801c3c0:	6c69662f 	.word	0x6c69662f
 801c3c4:	2f7b7872 	.word	0x2f7b7872
 801c3c8:	18827f2f 	.word	0x18827f2f
 801c3cc:	2f2f2f2f 	.word	0x2f2f2f2f
 801c3d0:	2f2f2f2f 	.word	0x2f2f2f2f
 801c3d4:	2f2f2f2f 	.word	0x2f2f2f2f
 801c3d8:	9288852f 	.word	0x9288852f
 801c3dc:	98952f2f 	.word	0x98952f2f
 801c3e0:	9b2f      	.short	0x9b2f
 801c3e2:	a1          	.byte	0xa1
 801c3e3:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801c3e4:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801c3e8:	f88d 3004 	strb.w	r3, [sp, #4]
 801c3ec:	2307      	movs	r3, #7
 801c3ee:	f88d 3005 	strb.w	r3, [sp, #5]
 801c3f2:	2300      	movs	r3, #0
 801c3f4:	f88d 3006 	strb.w	r3, [sp, #6]
 801c3f8:	2310      	movs	r3, #16
 801c3fa:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )IN865_TX_MAX_DATARATE,
                .MinDr = ( int8_t )IN865_TX_MIN_DATARATE,
                .NbChannels = IN865_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801c3fe:	4b41      	ldr	r3, [pc, #260]	; (801c504 <RegionIN865GetPhyParam+0x164>)
 801c400:	681b      	ldr	r3, [r3, #0]
 801c402:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801c406:	9202      	str	r2, [sp, #8]
 801c408:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801c40a:	a801      	add	r0, sp, #4
 801c40c:	f7ff f8ce 	bl	801b5ac <RegionCommonGetNextLowerTxDr>
 801c410:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_IN865 */
    return phyParam;
}
 801c412:	9804      	ldr	r0, [sp, #16]
 801c414:	b007      	add	sp, #28
 801c416:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801c41a:	2340      	movs	r3, #64	; 0x40
 801c41c:	9304      	str	r3, [sp, #16]
            break;
 801c41e:	e7f8      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801c420:	2320      	movs	r3, #32
 801c422:	9304      	str	r3, [sp, #16]
            break;
 801c424:	e7f5      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateIN865[getPhy->Datarate];
 801c426:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801c42a:	4a37      	ldr	r2, [pc, #220]	; (801c508 <RegionIN865GetPhyParam+0x168>)
 801c42c:	5cd3      	ldrb	r3, [r2, r3]
 801c42e:	9304      	str	r3, [sp, #16]
            break;
 801c430:	e7ef      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterIN865[getPhy->Datarate];
 801c432:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801c436:	4a35      	ldr	r2, [pc, #212]	; (801c50c <RegionIN865GetPhyParam+0x16c>)
 801c438:	5cd3      	ldrb	r3, [r2, r3]
 801c43a:	9304      	str	r3, [sp, #16]
            break;
 801c43c:	e7e9      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_MAX_RX_WINDOW;
 801c43e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801c442:	9304      	str	r3, [sp, #16]
            break;
 801c444:	e7e5      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801c446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801c44a:	9304      	str	r3, [sp, #16]
            break;
 801c44c:	e7e1      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801c44e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801c452:	9304      	str	r3, [sp, #16]
            break;
 801c454:	e7dd      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801c456:	f241 3388 	movw	r3, #5000	; 0x1388
 801c45a:	9304      	str	r3, [sp, #16]
            break;
 801c45c:	e7d9      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801c45e:	f241 7370 	movw	r3, #6000	; 0x1770
 801c462:	9304      	str	r3, [sp, #16]
            break;
 801c464:	e7d5      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801c466:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801c46a:	9304      	str	r3, [sp, #16]
            break;
 801c46c:	e7d1      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801c46e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801c472:	4827      	ldr	r0, [pc, #156]	; (801c510 <RegionIN865GetPhyParam+0x170>)
 801c474:	f003 fd1a 	bl	801feac <randr>
 801c478:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 801c47c:	9004      	str	r0, [sp, #16]
            break;
 801c47e:	e7c8      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_RX_WND_2_FREQ;
 801c480:	4b24      	ldr	r3, [pc, #144]	; (801c514 <RegionIN865GetPhyParam+0x174>)
 801c482:	9304      	str	r3, [sp, #16]
            break;
 801c484:	e7c5      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_RX_WND_2_DR;
 801c486:	2302      	movs	r3, #2
 801c488:	9304      	str	r3, [sp, #16]
            break;
 801c48a:	e7c2      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801c48c:	4b1d      	ldr	r3, [pc, #116]	; (801c504 <RegionIN865GetPhyParam+0x164>)
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801c494:	9304      	str	r3, [sp, #16]
            break;
 801c496:	e7bc      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801c498:	4b1a      	ldr	r3, [pc, #104]	; (801c504 <RegionIN865GetPhyParam+0x164>)
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801c4a0:	9304      	str	r3, [sp, #16]
            break;
 801c4a2:	e7b6      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_MAX_NB_CHANNELS;
 801c4a4:	2310      	movs	r3, #16
 801c4a6:	9304      	str	r3, [sp, #16]
            break;
 801c4a8:	e7b3      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 801c4aa:	4b16      	ldr	r3, [pc, #88]	; (801c504 <RegionIN865GetPhyParam+0x164>)
 801c4ac:	681b      	ldr	r3, [r3, #0]
 801c4ae:	9304      	str	r3, [sp, #16]
            break;
 801c4b0:	e7af      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.fValue = IN865_DEFAULT_MAX_EIRP;
 801c4b2:	4b19      	ldr	r3, [pc, #100]	; (801c518 <RegionIN865GetPhyParam+0x178>)
 801c4b4:	9304      	str	r3, [sp, #16]
            break;
 801c4b6:	e7ac      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.fValue = IN865_DEFAULT_ANTENNA_GAIN;
 801c4b8:	4b18      	ldr	r3, [pc, #96]	; (801c51c <RegionIN865GetPhyParam+0x17c>)
 801c4ba:	9304      	str	r3, [sp, #16]
            break;
 801c4bc:	e7a9      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_BEACON_CHANNEL_FREQ;
 801c4be:	4b15      	ldr	r3, [pc, #84]	; (801c514 <RegionIN865GetPhyParam+0x174>)
 801c4c0:	9304      	str	r3, [sp, #16]
            break;
 801c4c2:	e7a6      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = IN865_BEACON_SIZE;
 801c4c4:	2313      	movs	r3, #19
 801c4c6:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = IN865_RFU1_SIZE;
 801c4ca:	2301      	movs	r3, #1
 801c4cc:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = IN865_RFU2_SIZE;
 801c4d0:	2303      	movs	r3, #3
 801c4d2:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 801c4d6:	e79c      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_BEACON_CHANNEL_DR;
 801c4d8:	2304      	movs	r3, #4
 801c4da:	9304      	str	r3, [sp, #16]
            break;
 801c4dc:	e799      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_PING_SLOT_CHANNEL_FREQ;
 801c4de:	4b0d      	ldr	r3, [pc, #52]	; (801c514 <RegionIN865GetPhyParam+0x174>)
 801c4e0:	9304      	str	r3, [sp, #16]
            break;
 801c4e2:	e796      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_PING_SLOT_CHANNEL_DR;
 801c4e4:	2304      	movs	r3, #4
 801c4e6:	9304      	str	r3, [sp, #16]
            break;
 801c4e8:	e793      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = DataratesIN865[getPhy->Datarate];
 801c4ea:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801c4ee:	4a0c      	ldr	r2, [pc, #48]	; (801c520 <RegionIN865GetPhyParam+0x180>)
 801c4f0:	5cd3      	ldrb	r3, [r2, r3]
 801c4f2:	9304      	str	r3, [sp, #16]
            break;
 801c4f4:	e78d      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsIN865 );
 801c4f6:	490b      	ldr	r1, [pc, #44]	; (801c524 <RegionIN865GetPhyParam+0x184>)
 801c4f8:	f990 0001 	ldrsb.w	r0, [r0, #1]
 801c4fc:	f7ff f87a 	bl	801b5f4 <RegionCommonGetBandwidth>
 801c500:	9004      	str	r0, [sp, #16]
            break;
 801c502:	e786      	b.n	801c412 <RegionIN865GetPhyParam+0x72>
 801c504:	20001b84 	.word	0x20001b84
 801c508:	080284f8 	.word	0x080284f8
 801c50c:	08028500 	.word	0x08028500
 801c510:	fffffc18 	.word	0xfffffc18
 801c514:	33a680f0 	.word	0x33a680f0
 801c518:	41f00000 	.word	0x41f00000
 801c51c:	4009999a 	.word	0x4009999a
 801c520:	080284e8 	.word	0x080284e8
 801c524:	080284c8 	.word	0x080284c8

0801c528 <RegionIN865SetBandTxDone>:

void RegionIN865SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801c528:	b530      	push	{r4, r5, lr}
 801c52a:	b083      	sub	sp, #12
#if defined( REGION_IN865 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801c52c:	4b0b      	ldr	r3, [pc, #44]	; (801c55c <RegionIN865SetBandTxDone+0x34>)
 801c52e:	681d      	ldr	r5, [r3, #0]
 801c530:	4b0b      	ldr	r3, [pc, #44]	; (801c560 <RegionIN865SetBandTxDone+0x38>)
 801c532:	681a      	ldr	r2, [r3, #0]
 801c534:	7803      	ldrb	r3, [r0, #0]
 801c536:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c53a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c53e:	7a5b      	ldrb	r3, [r3, #9]
 801c540:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 801c544:	6903      	ldr	r3, [r0, #16]
 801c546:	9300      	str	r3, [sp, #0]
 801c548:	68c3      	ldr	r3, [r0, #12]
 801c54a:	7842      	ldrb	r2, [r0, #1]
 801c54c:	6881      	ldr	r1, [r0, #8]
 801c54e:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 801c552:	f7fe fe17 	bl	801b184 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_IN865 */
}
 801c556:	b003      	add	sp, #12
 801c558:	bd30      	pop	{r4, r5, pc}
 801c55a:	bf00      	nop
 801c55c:	20001b80 	.word	0x20001b80
 801c560:	20001b84 	.word	0x20001b84

0801c564 <RegionIN865InitDefaults>:

void RegionIN865InitDefaults( InitDefaultsParams_t* params )
{
 801c564:	b530      	push	{r4, r5, lr}
 801c566:	b087      	sub	sp, #28
#if defined( REGION_IN865 )
    Band_t bands[IN865_MAX_NB_BANDS] =
 801c568:	2301      	movs	r3, #1
 801c56a:	f8ad 3000 	strh.w	r3, [sp]
 801c56e:	2300      	movs	r3, #0
 801c570:	f88d 3002 	strb.w	r3, [sp, #2]
 801c574:	9301      	str	r3, [sp, #4]
 801c576:	9302      	str	r3, [sp, #8]
 801c578:	9303      	str	r3, [sp, #12]
 801c57a:	9304      	str	r3, [sp, #16]
 801c57c:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        IN865_BAND0
    };

    switch( params->Type )
 801c580:	7a03      	ldrb	r3, [r0, #8]
 801c582:	2b01      	cmp	r3, #1
 801c584:	d032      	beq.n	801c5ec <RegionIN865InitDefaults+0x88>
 801c586:	2b02      	cmp	r3, #2
 801c588:	d03e      	beq.n	801c608 <RegionIN865InitDefaults+0xa4>
 801c58a:	b10b      	cbz	r3, 801c590 <RegionIN865InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_IN865 */
}
 801c58c:	b007      	add	sp, #28
 801c58e:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801c590:	6803      	ldr	r3, [r0, #0]
 801c592:	2b00      	cmp	r3, #0
 801c594:	d0fa      	beq.n	801c58c <RegionIN865InitDefaults+0x28>
 801c596:	6842      	ldr	r2, [r0, #4]
 801c598:	2a00      	cmp	r2, #0
 801c59a:	d0f7      	beq.n	801c58c <RegionIN865InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801c59c:	491f      	ldr	r1, [pc, #124]	; (801c61c <RegionIN865InitDefaults+0xb8>)
 801c59e:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801c5a0:	4c1f      	ldr	r4, [pc, #124]	; (801c620 <RegionIN865InitDefaults+0xbc>)
 801c5a2:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * IN865_MAX_NB_BANDS );
 801c5a4:	2218      	movs	r2, #24
 801c5a6:	4669      	mov	r1, sp
 801c5a8:	4618      	mov	r0, r3
 801c5aa:	f003 fc8c 	bl	801fec6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) IN865_LC1;
 801c5ae:	6824      	ldr	r4, [r4, #0]
 801c5b0:	4b1c      	ldr	r3, [pc, #112]	; (801c624 <RegionIN865InitDefaults+0xc0>)
 801c5b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c5b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) IN865_LC2;
 801c5ba:	f104 050c 	add.w	r5, r4, #12
 801c5be:	f103 020c 	add.w	r2, r3, #12
 801c5c2:	ca07      	ldmia	r2, {r0, r1, r2}
 801c5c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) IN865_LC3;
 801c5c8:	f104 0518 	add.w	r5, r4, #24
 801c5cc:	3318      	adds	r3, #24
 801c5ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c5d2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801c5d6:	2307      	movs	r3, #7
 801c5d8:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801c5dc:	2201      	movs	r2, #1
 801c5de:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 801c5e2:	f504 7058 	add.w	r0, r4, #864	; 0x360
 801c5e6:	f7fe fdbc 	bl	801b162 <RegionCommonChanMaskCopy>
            break;
 801c5ea:	e7cf      	b.n	801c58c <RegionIN865InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801c5ec:	4b0c      	ldr	r3, [pc, #48]	; (801c620 <RegionIN865InitDefaults+0xbc>)
 801c5ee:	6818      	ldr	r0, [r3, #0]
 801c5f0:	2300      	movs	r3, #0
 801c5f2:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801c5f4:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801c5f6:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801c5f8:	2201      	movs	r2, #1
 801c5fa:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 801c5fe:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801c602:	f7fe fdae 	bl	801b162 <RegionCommonChanMaskCopy>
            break;
 801c606:	e7c1      	b.n	801c58c <RegionIN865InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801c608:	4b05      	ldr	r3, [pc, #20]	; (801c620 <RegionIN865InitDefaults+0xbc>)
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 801c610:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 801c614:	430a      	orrs	r2, r1
 801c616:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 801c61a:	e7b7      	b.n	801c58c <RegionIN865InitDefaults+0x28>
 801c61c:	20001b80 	.word	0x20001b80
 801c620:	20001b84 	.word	0x20001b84
 801c624:	08024b90 	.word	0x08024b90

0801c628 <RegionIN865Verify>:

bool RegionIN865Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801c628:	b508      	push	{r3, lr}
#if defined( REGION_IN865 )
    switch( phyAttribute )
 801c62a:	290a      	cmp	r1, #10
 801c62c:	d83b      	bhi.n	801c6a6 <RegionIN865Verify+0x7e>
 801c62e:	e8df f001 	tbb	[pc, r1]
 801c632:	3a06      	.short	0x3a06
 801c634:	0a3a3a3a 	.word	0x0a3a3a3a
 801c638:	303a2218 	.word	0x303a2218
 801c63c:	30          	.byte	0x30
 801c63d:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801c63e:	6800      	ldr	r0, [r0, #0]
 801c640:	f7ff fe68 	bl	801c314 <VerifyRfFreq>
 801c644:	e030      	b.n	801c6a8 <RegionIN865Verify+0x80>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 801c646:	f990 0000 	ldrsb.w	r0, [r0]
 801c64a:	2806      	cmp	r0, #6
 801c64c:	d101      	bne.n	801c652 <RegionIN865Verify+0x2a>
            {// DR_6 is not supported by this region
                return false;
 801c64e:	2000      	movs	r0, #0
 801c650:	e02a      	b.n	801c6a8 <RegionIN865Verify+0x80>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE );
 801c652:	2207      	movs	r2, #7
 801c654:	2100      	movs	r1, #0
 801c656:	f7fe fd12 	bl	801b07e <RegionCommonValueInRange>
 801c65a:	3800      	subs	r0, #0
 801c65c:	bf18      	it	ne
 801c65e:	2001      	movne	r0, #1
 801c660:	e022      	b.n	801c6a8 <RegionIN865Verify+0x80>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801c662:	2205      	movs	r2, #5
 801c664:	2100      	movs	r1, #0
 801c666:	f990 0000 	ldrsb.w	r0, [r0]
 801c66a:	f7fe fd08 	bl	801b07e <RegionCommonValueInRange>
 801c66e:	3800      	subs	r0, #0
 801c670:	bf18      	it	ne
 801c672:	2001      	movne	r0, #1
 801c674:	e018      	b.n	801c6a8 <RegionIN865Verify+0x80>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 801c676:	f990 0000 	ldrsb.w	r0, [r0]
 801c67a:	2806      	cmp	r0, #6
 801c67c:	d101      	bne.n	801c682 <RegionIN865Verify+0x5a>
            {// DR_6 is not supported by this region
                return false;
 801c67e:	2000      	movs	r0, #0
 801c680:	e012      	b.n	801c6a8 <RegionIN865Verify+0x80>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE );
 801c682:	2207      	movs	r2, #7
 801c684:	2100      	movs	r1, #0
 801c686:	f7fe fcfa 	bl	801b07e <RegionCommonValueInRange>
 801c68a:	3800      	subs	r0, #0
 801c68c:	bf18      	it	ne
 801c68e:	2001      	movne	r0, #1
 801c690:	e00a      	b.n	801c6a8 <RegionIN865Verify+0x80>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, IN865_MAX_TX_POWER, IN865_MIN_TX_POWER );
 801c692:	220a      	movs	r2, #10
 801c694:	2100      	movs	r1, #0
 801c696:	f990 0000 	ldrsb.w	r0, [r0]
 801c69a:	f7fe fcf0 	bl	801b07e <RegionCommonValueInRange>
 801c69e:	3800      	subs	r0, #0
 801c6a0:	bf18      	it	ne
 801c6a2:	2001      	movne	r0, #1
 801c6a4:	e000      	b.n	801c6a8 <RegionIN865Verify+0x80>
{
 801c6a6:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_IN865 */
}
 801c6a8:	bd08      	pop	{r3, pc}
	...

0801c6ac <RegionIN865ChanMaskSet>:
    }
#endif /* REGION_IN865 */
}

bool RegionIN865ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801c6ac:	b508      	push	{r3, lr}
#if defined( REGION_IN865 )
    switch( chanMaskSet->ChannelsMaskType )
 801c6ae:	7903      	ldrb	r3, [r0, #4]
 801c6b0:	b11b      	cbz	r3, 801c6ba <RegionIN865ChanMaskSet+0xe>
 801c6b2:	2b01      	cmp	r3, #1
 801c6b4:	d00b      	beq.n	801c6ce <RegionIN865ChanMaskSet+0x22>
 801c6b6:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_IN865 */
}
 801c6b8:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 801c6ba:	4b0a      	ldr	r3, [pc, #40]	; (801c6e4 <RegionIN865ChanMaskSet+0x38>)
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	2201      	movs	r2, #1
 801c6c0:	6801      	ldr	r1, [r0, #0]
 801c6c2:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801c6c6:	f7fe fd4c 	bl	801b162 <RegionCommonChanMaskCopy>
    return true;
 801c6ca:	2001      	movs	r0, #1
            break;
 801c6cc:	e7f4      	b.n	801c6b8 <RegionIN865ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 801c6ce:	4b05      	ldr	r3, [pc, #20]	; (801c6e4 <RegionIN865ChanMaskSet+0x38>)
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	2201      	movs	r2, #1
 801c6d4:	6801      	ldr	r1, [r0, #0]
 801c6d6:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801c6da:	f7fe fd42 	bl	801b162 <RegionCommonChanMaskCopy>
    return true;
 801c6de:	2001      	movs	r0, #1
            break;
 801c6e0:	e7ea      	b.n	801c6b8 <RegionIN865ChanMaskSet+0xc>
 801c6e2:	bf00      	nop
 801c6e4:	20001b84 	.word	0x20001b84

0801c6e8 <RegionIN865ComputeRxWindowParameters>:

void RegionIN865ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801c6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c6ea:	b083      	sub	sp, #12
 801c6ec:	460e      	mov	r6, r1
 801c6ee:	4617      	mov	r7, r2
 801c6f0:	461c      	mov	r4, r3
#if defined( REGION_IN865 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, IN865_RX_MAX_DATARATE );
 801c6f2:	2807      	cmp	r0, #7
 801c6f4:	bfa8      	it	ge
 801c6f6:	2007      	movge	r0, #7
 801c6f8:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsIN865 );
 801c6fa:	4913      	ldr	r1, [pc, #76]	; (801c748 <RegionIN865ComputeRxWindowParameters+0x60>)
 801c6fc:	f7fe ff7a 	bl	801b5f4 <RegionCommonGetBandwidth>
 801c700:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801c702:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801c706:	2b07      	cmp	r3, #7
 801c708:	d017      	beq.n	801c73a <RegionIN865ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesIN865[rxConfigParams->Datarate], BandwidthsIN865[rxConfigParams->Datarate] );
 801c70a:	4a0f      	ldr	r2, [pc, #60]	; (801c748 <RegionIN865ComputeRxWindowParameters+0x60>)
 801c70c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801c710:	4a0e      	ldr	r2, [pc, #56]	; (801c74c <RegionIN865ComputeRxWindowParameters+0x64>)
 801c712:	5cd0      	ldrb	r0, [r2, r3]
 801c714:	f7fe fe3e 	bl	801b394 <RegionCommonComputeSymbolTimeLoRa>
 801c718:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801c71a:	4b0d      	ldr	r3, [pc, #52]	; (801c750 <RegionIN865ComputeRxWindowParameters+0x68>)
 801c71c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c71e:	4798      	blx	r3
 801c720:	4603      	mov	r3, r0
 801c722:	f104 020c 	add.w	r2, r4, #12
 801c726:	9201      	str	r2, [sp, #4]
 801c728:	3408      	adds	r4, #8
 801c72a:	9400      	str	r4, [sp, #0]
 801c72c:	463a      	mov	r2, r7
 801c72e:	4631      	mov	r1, r6
 801c730:	4628      	mov	r0, r5
 801c732:	f7fe fe3d 	bl	801b3b0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_IN865 */
}
 801c736:	b003      	add	sp, #12
 801c738:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
 801c73a:	4a04      	ldr	r2, [pc, #16]	; (801c74c <RegionIN865ComputeRxWindowParameters+0x64>)
 801c73c:	5cd0      	ldrb	r0, [r2, r3]
 801c73e:	f7fe fe31 	bl	801b3a4 <RegionCommonComputeSymbolTimeFsk>
 801c742:	4605      	mov	r5, r0
 801c744:	e7e9      	b.n	801c71a <RegionIN865ComputeRxWindowParameters+0x32>
 801c746:	bf00      	nop
 801c748:	080284c8 	.word	0x080284c8
 801c74c:	080284e8 	.word	0x080284e8
 801c750:	08028984 	.word	0x08028984

0801c754 <RegionIN865RxConfig>:

bool RegionIN865RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801c754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c758:	b08a      	sub	sp, #40	; 0x28
 801c75a:	4604      	mov	r4, r0
 801c75c:	460f      	mov	r7, r1
#if defined( REGION_IN865 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801c75e:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801c762:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 801c766:	4b37      	ldr	r3, [pc, #220]	; (801c844 <RegionIN865RxConfig+0xf0>)
 801c768:	685b      	ldr	r3, [r3, #4]
 801c76a:	4798      	blx	r3
 801c76c:	2800      	cmp	r0, #0
 801c76e:	d167      	bne.n	801c840 <RegionIN865RxConfig+0xec>
 801c770:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801c772:	7ce3      	ldrb	r3, [r4, #19]
 801c774:	b983      	cbnz	r3, 801c798 <RegionIN865RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801c776:	4b34      	ldr	r3, [pc, #208]	; (801c848 <RegionIN865RxConfig+0xf4>)
 801c778:	681a      	ldr	r2, [r3, #0]
 801c77a:	7823      	ldrb	r3, [r4, #0]
 801c77c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801c780:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801c784:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c788:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c78c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801c790:	f1b8 0f00 	cmp.w	r8, #0
 801c794:	d100      	bne.n	801c798 <RegionIN865RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801c796:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesIN865[dr];
 801c798:	4b2c      	ldr	r3, [pc, #176]	; (801c84c <RegionIN865RxConfig+0xf8>)
 801c79a:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 801c79e:	4b29      	ldr	r3, [pc, #164]	; (801c844 <RegionIN865RxConfig+0xf0>)
 801c7a0:	68db      	ldr	r3, [r3, #12]
 801c7a2:	4640      	mov	r0, r8
 801c7a4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801c7a6:	2d07      	cmp	r5, #7
 801c7a8:	d02b      	beq.n	801c802 <RegionIN865RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801c7aa:	4b26      	ldr	r3, [pc, #152]	; (801c844 <RegionIN865RxConfig+0xf0>)
 801c7ac:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801c7b0:	7ca3      	ldrb	r3, [r4, #18]
 801c7b2:	9309      	str	r3, [sp, #36]	; 0x24
 801c7b4:	2601      	movs	r6, #1
 801c7b6:	9608      	str	r6, [sp, #32]
 801c7b8:	2300      	movs	r3, #0
 801c7ba:	9307      	str	r3, [sp, #28]
 801c7bc:	9306      	str	r3, [sp, #24]
 801c7be:	9305      	str	r3, [sp, #20]
 801c7c0:	9304      	str	r3, [sp, #16]
 801c7c2:	9303      	str	r3, [sp, #12]
 801c7c4:	8922      	ldrh	r2, [r4, #8]
 801c7c6:	9202      	str	r2, [sp, #8]
 801c7c8:	2208      	movs	r2, #8
 801c7ca:	9201      	str	r2, [sp, #4]
 801c7cc:	9300      	str	r3, [sp, #0]
 801c7ce:	4633      	mov	r3, r6
 801c7d0:	464a      	mov	r2, r9
 801c7d2:	78a1      	ldrb	r1, [r4, #2]
 801c7d4:	4630      	mov	r0, r6
 801c7d6:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801c7d8:	7c63      	ldrb	r3, [r4, #17]
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d02d      	beq.n	801c83a <RegionIN865RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterIN865[dr];
 801c7de:	4b1c      	ldr	r3, [pc, #112]	; (801c850 <RegionIN865RxConfig+0xfc>)
 801c7e0:	5d59      	ldrb	r1, [r3, r5]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateIN865[dr];
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801c7e2:	4b18      	ldr	r3, [pc, #96]	; (801c844 <RegionIN865RxConfig+0xf0>)
 801c7e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c7e6:	310d      	adds	r1, #13
 801c7e8:	b2c9      	uxtb	r1, r1
 801c7ea:	4630      	mov	r0, r6
 801c7ec:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801c7ee:	462a      	mov	r2, r5
 801c7f0:	4641      	mov	r1, r8
 801c7f2:	7ce0      	ldrb	r0, [r4, #19]
 801c7f4:	f7fe ff10 	bl	801b618 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801c7f8:	703d      	strb	r5, [r7, #0]
    return true;
 801c7fa:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_IN865 */
}
 801c7fc:	b00a      	add	sp, #40	; 0x28
 801c7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801c802:	4b10      	ldr	r3, [pc, #64]	; (801c844 <RegionIN865RxConfig+0xf0>)
 801c804:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801c808:	7ca3      	ldrb	r3, [r4, #18]
 801c80a:	9309      	str	r3, [sp, #36]	; 0x24
 801c80c:	2000      	movs	r0, #0
 801c80e:	9008      	str	r0, [sp, #32]
 801c810:	9007      	str	r0, [sp, #28]
 801c812:	9006      	str	r0, [sp, #24]
 801c814:	2301      	movs	r3, #1
 801c816:	9305      	str	r3, [sp, #20]
 801c818:	9004      	str	r0, [sp, #16]
 801c81a:	9003      	str	r0, [sp, #12]
 801c81c:	8923      	ldrh	r3, [r4, #8]
 801c81e:	9302      	str	r3, [sp, #8]
 801c820:	2305      	movs	r3, #5
 801c822:	9301      	str	r3, [sp, #4]
 801c824:	4b0b      	ldr	r3, [pc, #44]	; (801c854 <RegionIN865RxConfig+0x100>)
 801c826:	9300      	str	r3, [sp, #0]
 801c828:	4603      	mov	r3, r0
 801c82a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c82e:	fb02 f209 	mul.w	r2, r2, r9
 801c832:	f24c 3150 	movw	r1, #50000	; 0xc350
 801c836:	47d0      	blx	sl
 801c838:	e7ce      	b.n	801c7d8 <RegionIN865RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateIN865[dr];
 801c83a:	4b07      	ldr	r3, [pc, #28]	; (801c858 <RegionIN865RxConfig+0x104>)
 801c83c:	5d59      	ldrb	r1, [r3, r5]
 801c83e:	e7d0      	b.n	801c7e2 <RegionIN865RxConfig+0x8e>
        return false;
 801c840:	2000      	movs	r0, #0
 801c842:	e7db      	b.n	801c7fc <RegionIN865RxConfig+0xa8>
 801c844:	08028984 	.word	0x08028984
 801c848:	20001b84 	.word	0x20001b84
 801c84c:	080284e8 	.word	0x080284e8
 801c850:	08028500 	.word	0x08028500
 801c854:	00014585 	.word	0x00014585
 801c858:	080284f8 	.word	0x080284f8

0801c85c <RegionIN865TxConfig>:

bool RegionIN865TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801c85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c860:	b08d      	sub	sp, #52	; 0x34
 801c862:	4604      	mov	r4, r0
 801c864:	460f      	mov	r7, r1
 801c866:	4690      	mov	r8, r2
#if defined( REGION_IN865 )
    RadioModems_t modem;
    int8_t phyDr = DataratesIN865[txConfig->Datarate];
 801c868:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801c86c:	4a42      	ldr	r2, [pc, #264]	; (801c978 <RegionIN865TxConfig+0x11c>)
 801c86e:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801c872:	4b42      	ldr	r3, [pc, #264]	; (801c97c <RegionIN865TxConfig+0x120>)
 801c874:	6819      	ldr	r1, [r3, #0]
 801c876:	4d42      	ldr	r5, [pc, #264]	; (801c980 <RegionIN865TxConfig+0x124>)
 801c878:	682b      	ldr	r3, [r5, #0]
 801c87a:	7802      	ldrb	r2, [r0, #0]
 801c87c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c880:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801c884:	7a53      	ldrb	r3, [r2, #9]
 801c886:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c88a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801c88e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801c892:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801c896:	f7fe fea8 	bl	801b5ea <RegionCommonLimitTxPower>
 801c89a:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsIN865 );
 801c89c:	4939      	ldr	r1, [pc, #228]	; (801c984 <RegionIN865TxConfig+0x128>)
 801c89e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801c8a2:	f7fe fea7 	bl	801b5f4 <RegionCommonGetBandwidth>
 801c8a6:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801c8a8:	68a2      	ldr	r2, [r4, #8]
 801c8aa:	6861      	ldr	r1, [r4, #4]
 801c8ac:	4630      	mov	r0, r6
 801c8ae:	f7fe fdb9 	bl	801b424 <RegionCommonComputeTxPower>
 801c8b2:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801c8b4:	4b34      	ldr	r3, [pc, #208]	; (801c988 <RegionIN865TxConfig+0x12c>)
 801c8b6:	68da      	ldr	r2, [r3, #12]
 801c8b8:	6829      	ldr	r1, [r5, #0]
 801c8ba:	7823      	ldrb	r3, [r4, #0]
 801c8bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c8c0:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801c8c4:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801c8c6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801c8ca:	2b07      	cmp	r3, #7
 801c8cc:	d031      	beq.n	801c932 <RegionIN865TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801c8ce:	4b2e      	ldr	r3, [pc, #184]	; (801c988 <RegionIN865TxConfig+0x12c>)
 801c8d0:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 801c8d4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801c8d8:	9308      	str	r3, [sp, #32]
 801c8da:	2200      	movs	r2, #0
 801c8dc:	9207      	str	r2, [sp, #28]
 801c8de:	9206      	str	r2, [sp, #24]
 801c8e0:	9205      	str	r2, [sp, #20]
 801c8e2:	2501      	movs	r5, #1
 801c8e4:	9504      	str	r5, [sp, #16]
 801c8e6:	9203      	str	r2, [sp, #12]
 801c8e8:	2308      	movs	r3, #8
 801c8ea:	9302      	str	r3, [sp, #8]
 801c8ec:	9501      	str	r5, [sp, #4]
 801c8ee:	f8cd a000 	str.w	sl, [sp]
 801c8f2:	464b      	mov	r3, r9
 801c8f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c8f6:	4628      	mov	r0, r5
 801c8f8:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801c8fa:	4b21      	ldr	r3, [pc, #132]	; (801c980 <RegionIN865TxConfig+0x124>)
 801c8fc:	681a      	ldr	r2, [r3, #0]
 801c8fe:	7823      	ldrb	r3, [r4, #0]
 801c900:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c904:	f994 1001 	ldrsb.w	r1, [r4, #1]
 801c908:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801c90c:	f7fe feb4 	bl	801b678 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801c910:	89a1      	ldrh	r1, [r4, #12]
 801c912:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801c916:	f7ff fd11 	bl	801c33c <GetTimeOnAir>
 801c91a:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801c91e:	4b1a      	ldr	r3, [pc, #104]	; (801c988 <RegionIN865TxConfig+0x12c>)
 801c920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c922:	7b21      	ldrb	r1, [r4, #12]
 801c924:	4628      	mov	r0, r5
 801c926:	4798      	blx	r3

    *txPower = txPowerLimited;
 801c928:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_IN865 */
}
 801c92a:	2001      	movs	r0, #1
 801c92c:	b00d      	add	sp, #52	; 0x34
 801c92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801c932:	4b15      	ldr	r3, [pc, #84]	; (801c988 <RegionIN865TxConfig+0x12c>)
 801c934:	69dd      	ldr	r5, [r3, #28]
 801c936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801c93a:	fb03 f30a 	mul.w	r3, r3, sl
 801c93e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801c942:	9208      	str	r2, [sp, #32]
 801c944:	f04f 0b00 	mov.w	fp, #0
 801c948:	f8cd b01c 	str.w	fp, [sp, #28]
 801c94c:	f8cd b018 	str.w	fp, [sp, #24]
 801c950:	f8cd b014 	str.w	fp, [sp, #20]
 801c954:	2201      	movs	r2, #1
 801c956:	9204      	str	r2, [sp, #16]
 801c958:	f8cd b00c 	str.w	fp, [sp, #12]
 801c95c:	2205      	movs	r2, #5
 801c95e:	9202      	str	r2, [sp, #8]
 801c960:	f8cd b004 	str.w	fp, [sp, #4]
 801c964:	9300      	str	r3, [sp, #0]
 801c966:	464b      	mov	r3, r9
 801c968:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801c96c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c96e:	4658      	mov	r0, fp
 801c970:	47a8      	blx	r5
        modem = MODEM_FSK;
 801c972:	465d      	mov	r5, fp
 801c974:	e7c1      	b.n	801c8fa <RegionIN865TxConfig+0x9e>
 801c976:	bf00      	nop
 801c978:	080284e8 	.word	0x080284e8
 801c97c:	20001b80 	.word	0x20001b80
 801c980:	20001b84 	.word	0x20001b84
 801c984:	080284c8 	.word	0x080284c8
 801c988:	08028984 	.word	0x08028984

0801c98c <RegionIN865LinkAdrReq>:

uint8_t RegionIN865LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801c98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c990:	b08f      	sub	sp, #60	; 0x3c
 801c992:	4607      	mov	r7, r0
 801c994:	468b      	mov	fp, r1
 801c996:	4692      	mov	sl, r2
 801c998:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_IN865 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801c99a:	2500      	movs	r5, #0
 801c99c:	950c      	str	r5, [sp, #48]	; 0x30
 801c99e:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 801c9a2:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 801c9a6:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801c9aa:	e02d      	b.n	801ca08 <RegionIN865LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 801c9ac:	2400      	movs	r4, #0
        status = 0x07;
 801c9ae:	f04f 0807 	mov.w	r8, #7
 801c9b2:	e00f      	b.n	801c9d4 <RegionIN865LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801c9b4:	4a5a      	ldr	r2, [pc, #360]	; (801cb20 <RegionIN865LinkAdrReq+0x194>)
 801c9b6:	6812      	ldr	r2, [r2, #0]
 801c9b8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801c9bc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801c9c0:	b132      	cbz	r2, 801c9d0 <RegionIN865LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 801c9c2:	2201      	movs	r2, #1
 801c9c4:	40a2      	lsls	r2, r4
 801c9c6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801c9ca:	430a      	orrs	r2, r1
 801c9cc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 801c9d0:	3401      	adds	r4, #1
 801c9d2:	b2e4      	uxtb	r4, r4
 801c9d4:	2c0f      	cmp	r4, #15
 801c9d6:	d817      	bhi.n	801ca08 <RegionIN865LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 801c9d8:	2b06      	cmp	r3, #6
 801c9da:	d0eb      	beq.n	801c9b4 <RegionIN865LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801c9dc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801c9e0:	4126      	asrs	r6, r4
 801c9e2:	f016 0f01 	tst.w	r6, #1
 801c9e6:	d0f3      	beq.n	801c9d0 <RegionIN865LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801c9e8:	4a4d      	ldr	r2, [pc, #308]	; (801cb20 <RegionIN865LinkAdrReq+0x194>)
 801c9ea:	6812      	ldr	r2, [r2, #0]
 801c9ec:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801c9f0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801c9f4:	2a00      	cmp	r2, #0
 801c9f6:	d1eb      	bne.n	801c9d0 <RegionIN865LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801c9f8:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 801c9fc:	e7e8      	b.n	801c9d0 <RegionIN865LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 801c9fe:	f04f 0806 	mov.w	r8, #6
 801ca02:	e001      	b.n	801ca08 <RegionIN865LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 801ca04:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801ca08:	7a3b      	ldrb	r3, [r7, #8]
 801ca0a:	42ab      	cmp	r3, r5
 801ca0c:	d919      	bls.n	801ca42 <RegionIN865LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801ca0e:	6878      	ldr	r0, [r7, #4]
 801ca10:	a90c      	add	r1, sp, #48	; 0x30
 801ca12:	4428      	add	r0, r5
 801ca14:	f7fe fc56 	bl	801b2c4 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 801ca18:	b198      	cbz	r0, 801ca42 <RegionIN865LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 801ca1a:	4405      	add	r5, r0
 801ca1c:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 801ca1e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801ca22:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801ca26:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801ca2a:	b90b      	cbnz	r3, 801ca30 <RegionIN865LinkAdrReq+0xa4>
 801ca2c:	2a00      	cmp	r2, #0
 801ca2e:	d0e6      	beq.n	801c9fe <RegionIN865LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801ca30:	1e5a      	subs	r2, r3, #1
 801ca32:	b2d2      	uxtb	r2, r2
 801ca34:	2a04      	cmp	r2, #4
 801ca36:	d9e5      	bls.n	801ca04 <RegionIN865LinkAdrReq+0x78>
 801ca38:	2b06      	cmp	r3, #6
 801ca3a:	d9b7      	bls.n	801c9ac <RegionIN865LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 801ca3c:	f04f 0806 	mov.w	r8, #6
 801ca40:	e7e2      	b.n	801ca08 <RegionIN865LinkAdrReq+0x7c>
                }
            }
        }
    }

    if( linkAdrParams.Datarate != DR_6 )
 801ca42:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801ca46:	2b06      	cmp	r3, #6
 801ca48:	d116      	bne.n	801ca78 <RegionIN865LinkAdrReq+0xec>
        // Verify the parameters and update, if necessary
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
    }
    else
    {// DR_6 is not supported by this region
        status &= 0xFD; // Datarate KO
 801ca4a:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    }

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801ca4e:	f1b8 0f07 	cmp.w	r8, #7
 801ca52:	d057      	beq.n	801cb04 <RegionIN865LinkAdrReq+0x178>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801ca54:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801ca58:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 801ca5c:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801ca60:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 801ca64:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801ca68:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 801ca6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ca6e:	701d      	strb	r5, [r3, #0]

#endif /* REGION_IN865 */
    return status;
}
 801ca70:	4640      	mov	r0, r8
 801ca72:	b00f      	add	sp, #60	; 0x3c
 801ca74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        getPhy.Attribute = PHY_MIN_TX_DR;
 801ca78:	2302      	movs	r3, #2
 801ca7a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801ca7e:	7a7b      	ldrb	r3, [r7, #9]
 801ca80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        phyParam = RegionIN865GetPhyParam( &getPhy );
 801ca84:	a80a      	add	r0, sp, #40	; 0x28
 801ca86:	f7ff fc8b 	bl	801c3a0 <RegionIN865GetPhyParam>
        linkAdrVerifyParams.Status = status;
 801ca8a:	f88d 8008 	strb.w	r8, [sp, #8]
        linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801ca8e:	7abb      	ldrb	r3, [r7, #10]
 801ca90:	f88d 3009 	strb.w	r3, [sp, #9]
        linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801ca94:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801ca98:	f88d 300a 	strb.w	r3, [sp, #10]
        linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801ca9c:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801caa0:	f88d 300b 	strb.w	r3, [sp, #11]
        linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801caa4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801caa8:	f88d 300c 	strb.w	r3, [sp, #12]
        linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801caac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801cab0:	f88d 300d 	strb.w	r3, [sp, #13]
        linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801cab4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801cab8:	f88d 300e 	strb.w	r3, [sp, #14]
        linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801cabc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801cac0:	f88d 300f 	strb.w	r3, [sp, #15]
        linkAdrVerifyParams.NbChannels = IN865_MAX_NB_CHANNELS;
 801cac4:	2310      	movs	r3, #16
 801cac6:	f88d 3010 	strb.w	r3, [sp, #16]
        linkAdrVerifyParams.ChannelsMask = &chMask;
 801caca:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801cace:	9305      	str	r3, [sp, #20]
        linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801cad0:	f88d 0018 	strb.w	r0, [sp, #24]
        linkAdrVerifyParams.MaxDatarate = IN865_TX_MAX_DATARATE;
 801cad4:	2307      	movs	r3, #7
 801cad6:	f88d 3019 	strb.w	r3, [sp, #25]
        linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801cada:	4b11      	ldr	r3, [pc, #68]	; (801cb20 <RegionIN865LinkAdrReq+0x194>)
 801cadc:	681b      	ldr	r3, [r3, #0]
 801cade:	9307      	str	r3, [sp, #28]
        linkAdrVerifyParams.MinTxPower = IN865_MIN_TX_POWER;
 801cae0:	230a      	movs	r3, #10
 801cae2:	f88d 3020 	strb.w	r3, [sp, #32]
        linkAdrVerifyParams.MaxTxPower = IN865_MAX_TX_POWER;
 801cae6:	2300      	movs	r3, #0
 801cae8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        linkAdrVerifyParams.Version = linkAdrReq->Version;
 801caec:	683b      	ldr	r3, [r7, #0]
 801caee:	9301      	str	r3, [sp, #4]
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801caf0:	ab0c      	add	r3, sp, #48	; 0x30
 801caf2:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801caf6:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 801cafa:	a801      	add	r0, sp, #4
 801cafc:	f7fe fbfe 	bl	801b2fc <RegionCommonLinkAdrReqVerifyParams>
 801cb00:	4680      	mov	r8, r0
 801cb02:	e7a4      	b.n	801ca4e <RegionIN865LinkAdrReq+0xc2>
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801cb04:	4c06      	ldr	r4, [pc, #24]	; (801cb20 <RegionIN865LinkAdrReq+0x194>)
 801cb06:	6820      	ldr	r0, [r4, #0]
 801cb08:	220c      	movs	r2, #12
 801cb0a:	2100      	movs	r1, #0
 801cb0c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801cb10:	f003 f9ef 	bl	801fef2 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801cb14:	6823      	ldr	r3, [r4, #0]
 801cb16:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801cb1a:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 801cb1e:	e799      	b.n	801ca54 <RegionIN865LinkAdrReq+0xc8>
 801cb20:	20001b84 	.word	0x20001b84

0801cb24 <RegionIN865RxParamSetupReq>:

uint8_t RegionIN865RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801cb24:	b538      	push	{r3, r4, r5, lr}
 801cb26:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_IN865 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801cb28:	6840      	ldr	r0, [r0, #4]
 801cb2a:	f7ff fbf3 	bl	801c314 <VerifyRfFreq>
 801cb2e:	b1c0      	cbz	r0, 801cb62 <RegionIN865RxParamSetupReq+0x3e>
    uint8_t status = 0x07;
 801cb30:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false ) ||
 801cb32:	2207      	movs	r2, #7
 801cb34:	2100      	movs	r1, #0
 801cb36:	f994 0000 	ldrsb.w	r0, [r4]
 801cb3a:	f7fe faa0 	bl	801b07e <RegionCommonValueInRange>
 801cb3e:	b118      	cbz	r0, 801cb48 <RegionIN865RxParamSetupReq+0x24>
        // DR_6 is not supported by this region
        ( rxParamSetupReq->Datarate == DR_6 ) )
 801cb40:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false ) ||
 801cb44:	2b06      	cmp	r3, #6
 801cb46:	d101      	bne.n	801cb4c <RegionIN865RxParamSetupReq+0x28>
    {
        status &= 0xFD; // Datarate KO
 801cb48:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, IN865_MIN_RX1_DR_OFFSET, IN865_MAX_RX1_DR_OFFSET ) == false )
 801cb4c:	2207      	movs	r2, #7
 801cb4e:	2100      	movs	r1, #0
 801cb50:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801cb54:	f7fe fa93 	bl	801b07e <RegionCommonValueInRange>
 801cb58:	b908      	cbnz	r0, 801cb5e <RegionIN865RxParamSetupReq+0x3a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801cb5a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_IN865 */
    return status;
}
 801cb5e:	4628      	mov	r0, r5
 801cb60:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 801cb62:	2506      	movs	r5, #6
 801cb64:	e7e5      	b.n	801cb32 <RegionIN865RxParamSetupReq+0xe>

0801cb66 <RegionIN865TxParamSetupReq>:

int8_t RegionIN865TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 801cb66:	f04f 30ff 	mov.w	r0, #4294967295
 801cb6a:	4770      	bx	lr

0801cb6c <RegionIN865DlChannelReq>:

int8_t RegionIN865DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801cb6c:	b510      	push	{r4, lr}
 801cb6e:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_IN865 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 801cb70:	6840      	ldr	r0, [r0, #4]
 801cb72:	f7ff fbcf 	bl	801c314 <VerifyRfFreq>
 801cb76:	b170      	cbz	r0, 801cb96 <RegionIN865DlChannelReq+0x2a>
    uint8_t status = 0x03;
 801cb78:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801cb7a:	4b0b      	ldr	r3, [pc, #44]	; (801cba8 <RegionIN865DlChannelReq+0x3c>)
 801cb7c:	681a      	ldr	r2, [r3, #0]
 801cb7e:	7823      	ldrb	r3, [r4, #0]
 801cb80:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801cb84:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801cb88:	b909      	cbnz	r1, 801cb8e <RegionIN865DlChannelReq+0x22>
    {
        status &= 0xFD;
 801cb8a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801cb8e:	2803      	cmp	r0, #3
 801cb90:	d003      	beq.n	801cb9a <RegionIN865DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_IN865 */
    return status;
}
 801cb92:	b240      	sxtb	r0, r0
 801cb94:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 801cb96:	2002      	movs	r0, #2
 801cb98:	e7ef      	b.n	801cb7a <RegionIN865DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801cb9a:	6861      	ldr	r1, [r4, #4]
 801cb9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cba0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cba4:	6059      	str	r1, [r3, #4]
 801cba6:	e7f4      	b.n	801cb92 <RegionIN865DlChannelReq+0x26>
 801cba8:	20001b84 	.word	0x20001b84

0801cbac <RegionIN865AlternateDr>:
#if defined( REGION_IN865 )
    return currentDr;
#else
    return -1;
#endif /* REGION_IN865 */
}
 801cbac:	4770      	bx	lr
	...

0801cbb0 <RegionIN865NextChannel>:

LoRaMacStatus_t RegionIN865NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801cbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbb2:	b097      	sub	sp, #92	; 0x5c
 801cbb4:	4604      	mov	r4, r0
 801cbb6:	460f      	mov	r7, r1
 801cbb8:	4616      	mov	r6, r2
 801cbba:	461d      	mov	r5, r3
#if defined( REGION_IN865 )
    uint8_t nbEnabledChannels = 0;
 801cbbc:	2100      	movs	r1, #0
 801cbbe:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 801cbc2:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[IN865_MAX_NB_CHANNELS] = { 0 };
 801cbc6:	9111      	str	r1, [sp, #68]	; 0x44
 801cbc8:	9112      	str	r1, [sp, #72]	; 0x48
 801cbca:	9113      	str	r1, [sp, #76]	; 0x4c
 801cbcc:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = IN865_JOIN_CHANNELS;
 801cbce:	2307      	movs	r3, #7
 801cbd0:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801cbd4:	4b32      	ldr	r3, [pc, #200]	; (801cca0 <RegionIN865NextChannel+0xf0>)
 801cbd6:	6818      	ldr	r0, [r3, #0]
 801cbd8:	2201      	movs	r2, #1
 801cbda:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801cbde:	f7fe faaa 	bl	801b136 <RegionCommonCountChannels>
 801cbe2:	b938      	cbnz	r0, 801cbf4 <RegionIN865NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801cbe4:	4b2e      	ldr	r3, [pc, #184]	; (801cca0 <RegionIN865NextChannel+0xf0>)
 801cbe6:	681a      	ldr	r2, [r3, #0]
 801cbe8:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801cbec:	f043 0307 	orr.w	r3, r3, #7
 801cbf0:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801cbf4:	7a63      	ldrb	r3, [r4, #9]
 801cbf6:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801cbfa:	7a23      	ldrb	r3, [r4, #8]
 801cbfc:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801cc00:	4b27      	ldr	r3, [pc, #156]	; (801cca0 <RegionIN865NextChannel+0xf0>)
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	f503 7258 	add.w	r2, r3, #864	; 0x360
 801cc08:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801cc0a:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801cc0c:	4b25      	ldr	r3, [pc, #148]	; (801cca4 <RegionIN865NextChannel+0xf4>)
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = IN865_MAX_NB_CHANNELS;
 801cc12:	2310      	movs	r3, #16
 801cc14:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 801cc18:	f10d 030a 	add.w	r3, sp, #10
 801cc1c:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801cc1e:	6823      	ldr	r3, [r4, #0]
 801cc20:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801cc22:	6863      	ldr	r3, [r4, #4]
 801cc24:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801cc26:	7aa3      	ldrb	r3, [r4, #10]
 801cc28:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = IN865_MAX_NB_BANDS;
 801cc2c:	2301      	movs	r3, #1
 801cc2e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801cc32:	ab0c      	add	r3, sp, #48	; 0x30
 801cc34:	6921      	ldr	r1, [r4, #16]
 801cc36:	68e0      	ldr	r0, [r4, #12]
 801cc38:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801cc3c:	7d23      	ldrb	r3, [r4, #20]
 801cc3e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801cc42:	8ae1      	ldrh	r1, [r4, #22]
 801cc44:	f994 0008 	ldrsb.w	r0, [r4, #8]
 801cc48:	f7ff fb78 	bl	801c33c <GetTimeOnAir>
 801cc4c:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801cc4e:	ab03      	add	r3, sp, #12
 801cc50:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801cc52:	9601      	str	r6, [sp, #4]
 801cc54:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 801cc58:	9300      	str	r3, [sp, #0]
 801cc5a:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 801cc5e:	aa11      	add	r2, sp, #68	; 0x44
 801cc60:	4629      	mov	r1, r5
 801cc62:	a809      	add	r0, sp, #36	; 0x24
 801cc64:	f7fe fc5a 	bl	801b51c <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801cc68:	4604      	mov	r4, r0
 801cc6a:	b120      	cbz	r0, 801cc76 <RegionIN865NextChannel+0xc6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801cc6c:	280c      	cmp	r0, #12
 801cc6e:	d00d      	beq.n	801cc8c <RegionIN865NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_IN865 */
}
 801cc70:	4620      	mov	r0, r4
 801cc72:	b017      	add	sp, #92	; 0x5c
 801cc74:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801cc76:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 801cc7a:	3901      	subs	r1, #1
 801cc7c:	f003 f916 	bl	801feac <randr>
 801cc80:	ab16      	add	r3, sp, #88	; 0x58
 801cc82:	4418      	add	r0, r3
 801cc84:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 801cc88:	703b      	strb	r3, [r7, #0]
 801cc8a:	e7f1      	b.n	801cc70 <RegionIN865NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801cc8c:	4b04      	ldr	r3, [pc, #16]	; (801cca0 <RegionIN865NextChannel+0xf0>)
 801cc8e:	681a      	ldr	r2, [r3, #0]
 801cc90:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801cc94:	f043 0307 	orr.w	r3, r3, #7
 801cc98:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 801cc9c:	e7e8      	b.n	801cc70 <RegionIN865NextChannel+0xc0>
 801cc9e:	bf00      	nop
 801cca0:	20001b84 	.word	0x20001b84
 801cca4:	20001b80 	.word	0x20001b80

0801cca8 <RegionIN865ChannelAdd>:

LoRaMacStatus_t RegionIN865ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801cca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_IN865 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 801ccaa:	7905      	ldrb	r5, [r0, #4]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 801ccac:	2d02      	cmp	r5, #2
 801ccae:	d94b      	bls.n	801cd48 <RegionIN865ChannelAdd+0xa0>
 801ccb0:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= IN865_MAX_NB_CHANNELS )
 801ccb2:	2d0f      	cmp	r5, #15
 801ccb4:	d84a      	bhi.n	801cd4c <RegionIN865ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 801ccb6:	6803      	ldr	r3, [r0, #0]
 801ccb8:	7a18      	ldrb	r0, [r3, #8]
 801ccba:	f340 0003 	sbfx	r0, r0, #0, #4
 801ccbe:	2207      	movs	r2, #7
 801ccc0:	2100      	movs	r1, #0
 801ccc2:	b240      	sxtb	r0, r0
 801ccc4:	f7fe f9db 	bl	801b07e <RegionCommonValueInRange>
 801ccc8:	2800      	cmp	r0, #0
 801ccca:	d039      	beq.n	801cd40 <RegionIN865ChannelAdd+0x98>
    bool drInvalid = false;
 801cccc:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 801ccce:	6823      	ldr	r3, [r4, #0]
 801ccd0:	7a18      	ldrb	r0, [r3, #8]
 801ccd2:	f340 1003 	sbfx	r0, r0, #4, #4
 801ccd6:	2207      	movs	r2, #7
 801ccd8:	2100      	movs	r1, #0
 801ccda:	b240      	sxtb	r0, r0
 801ccdc:	f7fe f9cf 	bl	801b07e <RegionCommonValueInRange>
 801cce0:	b900      	cbnz	r0, 801cce4 <RegionIN865ChannelAdd+0x3c>
    {
        drInvalid = true;
 801cce2:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801cce4:	6821      	ldr	r1, [r4, #0]
 801cce6:	7a0b      	ldrb	r3, [r1, #8]
 801cce8:	f343 0203 	sbfx	r2, r3, #0, #4
 801ccec:	b252      	sxtb	r2, r2
 801ccee:	f343 1303 	sbfx	r3, r3, #4, #4
 801ccf2:	b25b      	sxtb	r3, r3
 801ccf4:	429a      	cmp	r2, r3
 801ccf6:	dd00      	ble.n	801ccfa <RegionIN865ChannelAdd+0x52>
    {
        drInvalid = true;
 801ccf8:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 801ccfa:	6808      	ldr	r0, [r1, #0]
 801ccfc:	f7ff fb0a 	bl	801c314 <VerifyRfFreq>
 801cd00:	b300      	cbz	r0, 801cd44 <RegionIN865ChannelAdd+0x9c>
    bool freqInvalid = false;
 801cd02:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801cd04:	b106      	cbz	r6, 801cd08 <RegionIN865ChannelAdd+0x60>
 801cd06:	bb1b      	cbnz	r3, 801cd50 <RegionIN865ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 801cd08:	bb26      	cbnz	r6, 801cd54 <RegionIN865ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 801cd0a:	bb2b      	cbnz	r3, 801cd58 <RegionIN865ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801cd0c:	4f13      	ldr	r7, [pc, #76]	; (801cd5c <RegionIN865ChannelAdd+0xb4>)
 801cd0e:	683b      	ldr	r3, [r7, #0]
 801cd10:	006e      	lsls	r6, r5, #1
 801cd12:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801cd16:	220c      	movs	r2, #12
 801cd18:	6821      	ldr	r1, [r4, #0]
 801cd1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801cd1e:	f003 f8d2 	bl	801fec6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 801cd22:	683a      	ldr	r2, [r7, #0]
 801cd24:	442e      	add	r6, r5
 801cd26:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801cd2a:	2000      	movs	r0, #0
 801cd2c:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 801cd2e:	2301      	movs	r3, #1
 801cd30:	fa03 f505 	lsl.w	r5, r3, r5
 801cd34:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801cd38:	431d      	orrs	r5, r3
 801cd3a:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 801cd3e:	e006      	b.n	801cd4e <RegionIN865ChannelAdd+0xa6>
        drInvalid = true;
 801cd40:	2601      	movs	r6, #1
 801cd42:	e7c4      	b.n	801ccce <RegionIN865ChannelAdd+0x26>
            freqInvalid = true;
 801cd44:	2301      	movs	r3, #1
 801cd46:	e7dd      	b.n	801cd04 <RegionIN865ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801cd48:	2006      	movs	r0, #6
 801cd4a:	e000      	b.n	801cd4e <RegionIN865ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801cd4c:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_IN865 */
}
 801cd4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801cd50:	2006      	movs	r0, #6
 801cd52:	e7fc      	b.n	801cd4e <RegionIN865ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 801cd54:	2005      	movs	r0, #5
 801cd56:	e7fa      	b.n	801cd4e <RegionIN865ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801cd58:	2004      	movs	r0, #4
 801cd5a:	e7f8      	b.n	801cd4e <RegionIN865ChannelAdd+0xa6>
 801cd5c:	20001b84 	.word	0x20001b84

0801cd60 <RegionIN865ChannelsRemove>:

bool RegionIN865ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_IN865 )
    uint8_t id = channelRemove->ChannelId;
 801cd60:	7801      	ldrb	r1, [r0, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 801cd62:	2902      	cmp	r1, #2
 801cd64:	d801      	bhi.n	801cd6a <RegionIN865ChannelsRemove+0xa>
    {
        return false;
 801cd66:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, IN865_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_IN865 */
}
 801cd68:	4770      	bx	lr
{
 801cd6a:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801cd6c:	4b08      	ldr	r3, [pc, #32]	; (801cd90 <RegionIN865ChannelsRemove+0x30>)
 801cd6e:	6818      	ldr	r0, [r3, #0]
 801cd70:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 801cd74:	009c      	lsls	r4, r3, #2
 801cd76:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801cd7a:	2200      	movs	r2, #0
 801cd7c:	5102      	str	r2, [r0, r4]
 801cd7e:	605a      	str	r2, [r3, #4]
 801cd80:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, IN865_MAX_NB_CHANNELS );
 801cd82:	2210      	movs	r2, #16
 801cd84:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801cd88:	f7fe f9bb 	bl	801b102 <RegionCommonChanDisable>
}
 801cd8c:	bd10      	pop	{r4, pc}
 801cd8e:	bf00      	nop
 801cd90:	20001b84 	.word	0x20001b84

0801cd94 <RegionIN865ApplyCFList>:
{
 801cd94:	b570      	push	{r4, r5, r6, lr}
 801cd96:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801cd98:	2350      	movs	r3, #80	; 0x50
 801cd9a:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 801cd9e:	7903      	ldrb	r3, [r0, #4]
 801cda0:	2b10      	cmp	r3, #16
 801cda2:	d135      	bne.n	801ce10 <RegionIN865ApplyCFList+0x7c>
 801cda4:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 801cda6:	6803      	ldr	r3, [r0, #0]
 801cda8:	7bdd      	ldrb	r5, [r3, #15]
 801cdaa:	2d00      	cmp	r5, #0
 801cdac:	d130      	bne.n	801ce10 <RegionIN865ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801cdae:	2403      	movs	r4, #3
 801cdb0:	e01a      	b.n	801cde8 <RegionIN865ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801cdb2:	6832      	ldr	r2, [r6, #0]
 801cdb4:	5d53      	ldrb	r3, [r2, r5]
 801cdb6:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801cdb8:	442a      	add	r2, r5
 801cdba:	7851      	ldrb	r1, [r2, #1]
 801cdbc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801cdc0:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801cdc2:	7892      	ldrb	r2, [r2, #2]
 801cdc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 801cdc8:	2264      	movs	r2, #100	; 0x64
 801cdca:	fb02 f303 	mul.w	r3, r2, r3
 801cdce:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 801cdd0:	2300      	movs	r3, #0
 801cdd2:	9304      	str	r3, [sp, #16]
 801cdd4:	e011      	b.n	801cdfa <RegionIN865ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 801cdd6:	f88d 4000 	strb.w	r4, [sp]
            RegionIN865ChannelsRemove( &channelRemove );
 801cdda:	4668      	mov	r0, sp
 801cddc:	f7ff ffc0 	bl	801cd60 <RegionIN865ChannelsRemove>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801cde0:	3503      	adds	r5, #3
 801cde2:	b2ed      	uxtb	r5, r5
 801cde4:	3401      	adds	r4, #1
 801cde6:	b2e4      	uxtb	r4, r4
 801cde8:	2c0f      	cmp	r4, #15
 801cdea:	d811      	bhi.n	801ce10 <RegionIN865ApplyCFList+0x7c>
        if( chanIdx < ( IN865_NUMB_CHANNELS_CF_LIST + IN865_NUMB_DEFAULT_CHANNELS ) )
 801cdec:	2c07      	cmp	r4, #7
 801cdee:	d9e0      	bls.n	801cdb2 <RegionIN865ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 801cdf0:	2300      	movs	r3, #0
 801cdf2:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 801cdf4:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 801cdf8:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 801cdfa:	9b03      	ldr	r3, [sp, #12]
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d0ea      	beq.n	801cdd6 <RegionIN865ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 801ce00:	ab03      	add	r3, sp, #12
 801ce02:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 801ce04:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionIN865ChannelAdd( &channelAdd );
 801ce08:	a801      	add	r0, sp, #4
 801ce0a:	f7ff ff4d 	bl	801cca8 <RegionIN865ChannelAdd>
 801ce0e:	e7e7      	b.n	801cde0 <RegionIN865ApplyCFList+0x4c>
}
 801ce10:	b006      	add	sp, #24
 801ce12:	bd70      	pop	{r4, r5, r6, pc}

0801ce14 <RegionIN865NewChannelReq>:
{
 801ce14:	b500      	push	{lr}
 801ce16:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 801ce18:	6803      	ldr	r3, [r0, #0]
 801ce1a:	681a      	ldr	r2, [r3, #0]
 801ce1c:	b952      	cbnz	r2, 801ce34 <RegionIN865NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801ce1e:	7903      	ldrb	r3, [r0, #4]
 801ce20:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionIN865ChannelsRemove( &channelRemove ) == false )
 801ce24:	a801      	add	r0, sp, #4
 801ce26:	f7ff ff9b 	bl	801cd60 <RegionIN865ChannelsRemove>
 801ce2a:	b1d0      	cbz	r0, 801ce62 <RegionIN865NewChannelReq+0x4e>
    uint8_t status = 0x03;
 801ce2c:	2003      	movs	r0, #3
}
 801ce2e:	b005      	add	sp, #20
 801ce30:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801ce34:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801ce36:	7903      	ldrb	r3, [r0, #4]
 801ce38:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionIN865ChannelAdd( &channelAdd ) )
 801ce3c:	a802      	add	r0, sp, #8
 801ce3e:	f7ff ff33 	bl	801cca8 <RegionIN865ChannelAdd>
 801ce42:	2806      	cmp	r0, #6
 801ce44:	d80b      	bhi.n	801ce5e <RegionIN865NewChannelReq+0x4a>
 801ce46:	e8df f000 	tbb	[pc, r0]
 801ce4a:	0a04      	.short	0x0a04
 801ce4c:	060e0a0a 	.word	0x060e0a0a
 801ce50:	08          	.byte	0x08
 801ce51:	00          	.byte	0x00
 801ce52:	2003      	movs	r0, #3
 801ce54:	e7eb      	b.n	801ce2e <RegionIN865NewChannelReq+0x1a>
                status &= 0xFD;
 801ce56:	2001      	movs	r0, #1
                break;
 801ce58:	e7e9      	b.n	801ce2e <RegionIN865NewChannelReq+0x1a>
                status &= 0xFC;
 801ce5a:	2000      	movs	r0, #0
                break;
 801ce5c:	e7e7      	b.n	801ce2e <RegionIN865NewChannelReq+0x1a>
                status &= 0xFC;
 801ce5e:	2000      	movs	r0, #0
                break;
 801ce60:	e7e5      	b.n	801ce2e <RegionIN865NewChannelReq+0x1a>
            status &= 0xFC;
 801ce62:	2000      	movs	r0, #0
 801ce64:	e7e3      	b.n	801ce2e <RegionIN865NewChannelReq+0x1a>
                status &= 0xFE;
 801ce66:	2002      	movs	r0, #2
 801ce68:	e7e1      	b.n	801ce2e <RegionIN865NewChannelReq+0x1a>
	...

0801ce6c <RegionIN865SetContinuousWave>:

void RegionIN865SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801ce6c:	b538      	push	{r3, r4, r5, lr}
 801ce6e:	4604      	mov	r4, r0
#if defined( REGION_IN865 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801ce70:	4b12      	ldr	r3, [pc, #72]	; (801cebc <RegionIN865SetContinuousWave+0x50>)
 801ce72:	6819      	ldr	r1, [r3, #0]
 801ce74:	4d12      	ldr	r5, [pc, #72]	; (801cec0 <RegionIN865SetContinuousWave+0x54>)
 801ce76:	682b      	ldr	r3, [r5, #0]
 801ce78:	7802      	ldrb	r2, [r0, #0]
 801ce7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ce7e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801ce82:	7a53      	ldrb	r3, [r2, #9]
 801ce84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ce88:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801ce8c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801ce90:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801ce94:	f7fe fba9 	bl	801b5ea <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801ce98:	682a      	ldr	r2, [r5, #0]
 801ce9a:	7823      	ldrb	r3, [r4, #0]
 801ce9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cea0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801cea4:	68a2      	ldr	r2, [r4, #8]
 801cea6:	6861      	ldr	r1, [r4, #4]
 801cea8:	f7fe fabc 	bl	801b424 <RegionCommonComputeTxPower>
 801ceac:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801ceae:	4b05      	ldr	r3, [pc, #20]	; (801cec4 <RegionIN865SetContinuousWave+0x58>)
 801ceb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ceb2:	89a2      	ldrh	r2, [r4, #12]
 801ceb4:	4628      	mov	r0, r5
 801ceb6:	4798      	blx	r3
#endif /* REGION_IN865 */
}
 801ceb8:	bd38      	pop	{r3, r4, r5, pc}
 801ceba:	bf00      	nop
 801cebc:	20001b80 	.word	0x20001b80
 801cec0:	20001b84 	.word	0x20001b84
 801cec4:	08028984 	.word	0x08028984

0801cec8 <RegionIN865ApplyDrOffset>:

uint8_t RegionIN865ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_IN865 )
    // Apply offset formula
    return MIN( DR_5, MAX( DR_0, dr - EffectiveRx1DrOffsetIN865[drOffset] ) );
 801cec8:	4b05      	ldr	r3, [pc, #20]	; (801cee0 <RegionIN865ApplyDrOffset+0x18>)
 801ceca:	5698      	ldrsb	r0, [r3, r2]
 801cecc:	1a09      	subs	r1, r1, r0
 801cece:	2905      	cmp	r1, #5
 801ced0:	dc03      	bgt.n	801ceda <RegionIN865ApplyDrOffset+0x12>
 801ced2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801ced6:	b2c8      	uxtb	r0, r1
 801ced8:	4770      	bx	lr
 801ceda:	2005      	movs	r0, #5
#else
    return 0;
#endif /* REGION_IN865 */
}
 801cedc:	4770      	bx	lr
 801cede:	bf00      	nop
 801cee0:	080284f0 	.word	0x080284f0

0801cee4 <GetMaxEIRP>:
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static int8_t GetMaxEIRP( uint32_t freq )
{
    if( freq >= 922100000 )
 801cee4:	4b03      	ldr	r3, [pc, #12]	; (801cef4 <GetMaxEIRP+0x10>)
 801cee6:	4298      	cmp	r0, r3
 801cee8:	d801      	bhi.n	801ceee <GetMaxEIRP+0xa>
    {// Limit to 14dBm
        return KR920_DEFAULT_MAX_EIRP_HIGH;
    }
    // Limit to 10dBm
    return KR920_DEFAULT_MAX_EIRP_LOW;
 801ceea:	200a      	movs	r0, #10
 801ceec:	4770      	bx	lr
        return KR920_DEFAULT_MAX_EIRP_HIGH;
 801ceee:	200e      	movs	r0, #14
}
 801cef0:	4770      	bx	lr
 801cef2:	bf00      	nop
 801cef4:	36f6211f 	.word	0x36f6211f

0801cef8 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 801cef8:	b510      	push	{r4, lr}
 801cefa:	4604      	mov	r4, r0
    uint32_t tmpFreq = freq;

    // Check radio driver support
    if( Radio.CheckRfFrequency( tmpFreq ) == false )
 801cefc:	4b0a      	ldr	r3, [pc, #40]	; (801cf28 <VerifyRfFreq+0x30>)
 801cefe:	6a1b      	ldr	r3, [r3, #32]
 801cf00:	4798      	blx	r3
 801cf02:	b180      	cbz	r0, 801cf26 <VerifyRfFreq+0x2e>
        return false;
    }

    // Verify if the frequency is valid. The frequency must be in a specified
    // range and can be set to specific values.
    if( ( tmpFreq >= 920900000 ) && ( tmpFreq <=923300000 ) )
 801cf04:	4b09      	ldr	r3, [pc, #36]	; (801cf2c <VerifyRfFreq+0x34>)
 801cf06:	4423      	add	r3, r4
 801cf08:	4a09      	ldr	r2, [pc, #36]	; (801cf30 <VerifyRfFreq+0x38>)
 801cf0a:	4293      	cmp	r3, r2
 801cf0c:	d80a      	bhi.n	801cf24 <VerifyRfFreq+0x2c>
    {
        // Range ok, check for specific value
        tmpFreq -= 920900000;
        if( ( tmpFreq % 200000 ) == 0 )
 801cf0e:	099a      	lsrs	r2, r3, #6
 801cf10:	4908      	ldr	r1, [pc, #32]	; (801cf34 <VerifyRfFreq+0x3c>)
 801cf12:	fba1 1202 	umull	r1, r2, r1, r2
 801cf16:	0992      	lsrs	r2, r2, #6
 801cf18:	4907      	ldr	r1, [pc, #28]	; (801cf38 <VerifyRfFreq+0x40>)
 801cf1a:	fb01 3212 	mls	r2, r1, r2, r3
 801cf1e:	b112      	cbz	r2, 801cf26 <VerifyRfFreq+0x2e>
        {
            return true;
        }
    }
    return false;
 801cf20:	2000      	movs	r0, #0
 801cf22:	e000      	b.n	801cf26 <VerifyRfFreq+0x2e>
 801cf24:	2000      	movs	r0, #0
}
 801cf26:	bd10      	pop	{r4, pc}
 801cf28:	08028984 	.word	0x08028984
 801cf2c:	c91c2e60 	.word	0xc91c2e60
 801cf30:	00249f00 	.word	0x00249f00
 801cf34:	053e2d63 	.word	0x053e2d63
 801cf38:	00030d40 	.word	0x00030d40

0801cf3c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801cf3c:	b570      	push	{r4, r5, r6, lr}
 801cf3e:	b084      	sub	sp, #16
 801cf40:	460c      	mov	r4, r1
    int8_t phyDr = DataratesKR920[datarate];
 801cf42:	4b0a      	ldr	r3, [pc, #40]	; (801cf6c <GetTimeOnAir+0x30>)
 801cf44:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsKR920 );
 801cf46:	490a      	ldr	r1, [pc, #40]	; (801cf70 <GetTimeOnAir+0x34>)
 801cf48:	f7fe fb54 	bl	801b5f4 <RegionCommonGetBandwidth>
 801cf4c:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801cf4e:	4b09      	ldr	r3, [pc, #36]	; (801cf74 <GetTimeOnAir+0x38>)
 801cf50:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801cf52:	2001      	movs	r0, #1
 801cf54:	9003      	str	r0, [sp, #12]
 801cf56:	b2e4      	uxtb	r4, r4
 801cf58:	9402      	str	r4, [sp, #8]
 801cf5a:	2200      	movs	r2, #0
 801cf5c:	9201      	str	r2, [sp, #4]
 801cf5e:	2208      	movs	r2, #8
 801cf60:	9200      	str	r2, [sp, #0]
 801cf62:	4603      	mov	r3, r0
 801cf64:	4632      	mov	r2, r6
 801cf66:	47a8      	blx	r5
}
 801cf68:	b004      	add	sp, #16
 801cf6a:	bd70      	pop	{r4, r5, r6, pc}
 801cf6c:	08028520 	.word	0x08028520
 801cf70:	08028508 	.word	0x08028508
 801cf74:	08028984 	.word	0x08028984

0801cf78 <RegionKR920GetPhyParam>:
#endif /* REGION_KR920 */

PhyParam_t RegionKR920GetPhyParam( GetPhyParams_t* getPhy )
{
 801cf78:	b500      	push	{lr}
 801cf7a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 801cf7c:	2300      	movs	r3, #0
 801cf7e:	9304      	str	r3, [sp, #16]

#if defined( REGION_KR920 )
    switch( getPhy->Attribute )
 801cf80:	7803      	ldrb	r3, [r0, #0]
 801cf82:	3b0b      	subs	r3, #11
 801cf84:	2b2e      	cmp	r3, #46	; 0x2e
 801cf86:	d830      	bhi.n	801cfea <RegionKR920GetPhyParam+0x72>
 801cf88:	e8df f003 	tbb	[pc, r3]
 801cf8c:	3f393633 	.word	0x3f393633
 801cf90:	4d49452f 	.word	0x4d49452f
 801cf94:	5d595551 	.word	0x5d595551
 801cf98:	692f662f 	.word	0x692f662f
 801cf9c:	2f78756f 	.word	0x2f78756f
 801cfa0:	187f7c2f 	.word	0x187f7c2f
 801cfa4:	2f2f2f2f 	.word	0x2f2f2f2f
 801cfa8:	2f2f2f2f 	.word	0x2f2f2f2f
 801cfac:	2f2f2f2f 	.word	0x2f2f2f2f
 801cfb0:	8f85822f 	.word	0x8f85822f
 801cfb4:	95922f2f 	.word	0x95922f2f
 801cfb8:	982f      	.short	0x982f
 801cfba:	9e          	.byte	0x9e
 801cfbb:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801cfbc:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801cfc0:	f88d 3004 	strb.w	r3, [sp, #4]
 801cfc4:	2305      	movs	r3, #5
 801cfc6:	f88d 3005 	strb.w	r3, [sp, #5]
 801cfca:	2300      	movs	r3, #0
 801cfcc:	f88d 3006 	strb.w	r3, [sp, #6]
 801cfd0:	2310      	movs	r3, #16
 801cfd2:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )KR920_TX_MAX_DATARATE,
                .MinDr = ( int8_t )KR920_TX_MIN_DATARATE,
                .NbChannels = KR920_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801cfd6:	4b40      	ldr	r3, [pc, #256]	; (801d0d8 <RegionKR920GetPhyParam+0x160>)
 801cfd8:	681b      	ldr	r3, [r3, #0]
 801cfda:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801cfde:	9202      	str	r2, [sp, #8]
 801cfe0:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801cfe2:	a801      	add	r0, sp, #4
 801cfe4:	f7fe fae2 	bl	801b5ac <RegionCommonGetNextLowerTxDr>
 801cfe8:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_KR920 */
    return phyParam;
}
 801cfea:	9804      	ldr	r0, [sp, #16]
 801cfec:	b007      	add	sp, #28
 801cfee:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801cff2:	2340      	movs	r3, #64	; 0x40
 801cff4:	9304      	str	r3, [sp, #16]
            break;
 801cff6:	e7f8      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801cff8:	2320      	movs	r3, #32
 801cffa:	9304      	str	r3, [sp, #16]
            break;
 801cffc:	e7f5      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateKR920[getPhy->Datarate];
 801cffe:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801d002:	4a36      	ldr	r2, [pc, #216]	; (801d0dc <RegionKR920GetPhyParam+0x164>)
 801d004:	5cd3      	ldrb	r3, [r2, r3]
 801d006:	9304      	str	r3, [sp, #16]
            break;
 801d008:	e7ef      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterKR920[getPhy->Datarate];
 801d00a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801d00e:	4a34      	ldr	r2, [pc, #208]	; (801d0e0 <RegionKR920GetPhyParam+0x168>)
 801d010:	5cd3      	ldrb	r3, [r2, r3]
 801d012:	9304      	str	r3, [sp, #16]
            break;
 801d014:	e7e9      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = KR920_MAX_RX_WINDOW;
 801d016:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801d01a:	9304      	str	r3, [sp, #16]
            break;
 801d01c:	e7e5      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801d01e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d022:	9304      	str	r3, [sp, #16]
            break;
 801d024:	e7e1      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801d026:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801d02a:	9304      	str	r3, [sp, #16]
            break;
 801d02c:	e7dd      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801d02e:	f241 3388 	movw	r3, #5000	; 0x1388
 801d032:	9304      	str	r3, [sp, #16]
            break;
 801d034:	e7d9      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801d036:	f241 7370 	movw	r3, #6000	; 0x1770
 801d03a:	9304      	str	r3, [sp, #16]
            break;
 801d03c:	e7d5      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801d03e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d042:	9304      	str	r3, [sp, #16]
            break;
 801d044:	e7d1      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801d046:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d04a:	4826      	ldr	r0, [pc, #152]	; (801d0e4 <RegionKR920GetPhyParam+0x16c>)
 801d04c:	f002 ff2e 	bl	801feac <randr>
 801d050:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 801d054:	9004      	str	r0, [sp, #16]
            break;
 801d056:	e7c8      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = KR920_RX_WND_2_FREQ;
 801d058:	4b23      	ldr	r3, [pc, #140]	; (801d0e8 <RegionKR920GetPhyParam+0x170>)
 801d05a:	9304      	str	r3, [sp, #16]
            break;
 801d05c:	e7c5      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801d05e:	4b1e      	ldr	r3, [pc, #120]	; (801d0d8 <RegionKR920GetPhyParam+0x160>)
 801d060:	681b      	ldr	r3, [r3, #0]
 801d062:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801d066:	9304      	str	r3, [sp, #16]
            break;
 801d068:	e7bf      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801d06a:	4b1b      	ldr	r3, [pc, #108]	; (801d0d8 <RegionKR920GetPhyParam+0x160>)
 801d06c:	681b      	ldr	r3, [r3, #0]
 801d06e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801d072:	9304      	str	r3, [sp, #16]
            break;
 801d074:	e7b9      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = KR920_MAX_NB_CHANNELS;
 801d076:	2310      	movs	r3, #16
 801d078:	9304      	str	r3, [sp, #16]
            break;
 801d07a:	e7b6      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 801d07c:	4b16      	ldr	r3, [pc, #88]	; (801d0d8 <RegionKR920GetPhyParam+0x160>)
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	9304      	str	r3, [sp, #16]
            break;
 801d082:	e7b2      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.fValue = KR920_DEFAULT_MAX_EIRP_HIGH;
 801d084:	4b19      	ldr	r3, [pc, #100]	; (801d0ec <RegionKR920GetPhyParam+0x174>)
 801d086:	9304      	str	r3, [sp, #16]
            break;
 801d088:	e7af      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.fValue = KR920_DEFAULT_ANTENNA_GAIN;
 801d08a:	4b19      	ldr	r3, [pc, #100]	; (801d0f0 <RegionKR920GetPhyParam+0x178>)
 801d08c:	9304      	str	r3, [sp, #16]
            break;
 801d08e:	e7ac      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = KR920_BEACON_CHANNEL_FREQ;
 801d090:	4b18      	ldr	r3, [pc, #96]	; (801d0f4 <RegionKR920GetPhyParam+0x17c>)
 801d092:	9304      	str	r3, [sp, #16]
            break;
 801d094:	e7a9      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = KR920_BEACON_SIZE;
 801d096:	2311      	movs	r3, #17
 801d098:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = KR920_RFU1_SIZE;
 801d09c:	2302      	movs	r3, #2
 801d09e:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = KR920_RFU2_SIZE;
 801d0a2:	2300      	movs	r3, #0
 801d0a4:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 801d0a8:	e79f      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = KR920_BEACON_CHANNEL_DR;
 801d0aa:	2303      	movs	r3, #3
 801d0ac:	9304      	str	r3, [sp, #16]
            break;
 801d0ae:	e79c      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = KR920_PING_SLOT_CHANNEL_FREQ;
 801d0b0:	4b10      	ldr	r3, [pc, #64]	; (801d0f4 <RegionKR920GetPhyParam+0x17c>)
 801d0b2:	9304      	str	r3, [sp, #16]
            break;
 801d0b4:	e799      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = KR920_PING_SLOT_CHANNEL_DR;
 801d0b6:	2303      	movs	r3, #3
 801d0b8:	9304      	str	r3, [sp, #16]
            break;
 801d0ba:	e796      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = DataratesKR920[getPhy->Datarate];
 801d0bc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801d0c0:	4a0d      	ldr	r2, [pc, #52]	; (801d0f8 <RegionKR920GetPhyParam+0x180>)
 801d0c2:	5cd3      	ldrb	r3, [r2, r3]
 801d0c4:	9304      	str	r3, [sp, #16]
            break;
 801d0c6:	e790      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsKR920 );
 801d0c8:	490c      	ldr	r1, [pc, #48]	; (801d0fc <RegionKR920GetPhyParam+0x184>)
 801d0ca:	f990 0001 	ldrsb.w	r0, [r0, #1]
 801d0ce:	f7fe fa91 	bl	801b5f4 <RegionCommonGetBandwidth>
 801d0d2:	9004      	str	r0, [sp, #16]
            break;
 801d0d4:	e789      	b.n	801cfea <RegionKR920GetPhyParam+0x72>
 801d0d6:	bf00      	nop
 801d0d8:	20001b8c 	.word	0x20001b8c
 801d0dc:	08028528 	.word	0x08028528
 801d0e0:	08028530 	.word	0x08028530
 801d0e4:	fffffc18 	.word	0xfffffc18
 801d0e8:	36f313e0 	.word	0x36f313e0
 801d0ec:	41600000 	.word	0x41600000
 801d0f0:	4009999a 	.word	0x4009999a
 801d0f4:	37056360 	.word	0x37056360
 801d0f8:	08028520 	.word	0x08028520
 801d0fc:	08028508 	.word	0x08028508

0801d100 <RegionKR920SetBandTxDone>:

void RegionKR920SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801d100:	b530      	push	{r4, r5, lr}
 801d102:	b083      	sub	sp, #12
#if defined( REGION_KR920 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801d104:	4b0b      	ldr	r3, [pc, #44]	; (801d134 <RegionKR920SetBandTxDone+0x34>)
 801d106:	681d      	ldr	r5, [r3, #0]
 801d108:	4b0b      	ldr	r3, [pc, #44]	; (801d138 <RegionKR920SetBandTxDone+0x38>)
 801d10a:	681a      	ldr	r2, [r3, #0]
 801d10c:	7803      	ldrb	r3, [r0, #0]
 801d10e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d112:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d116:	7a5b      	ldrb	r3, [r3, #9]
 801d118:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 801d11c:	6903      	ldr	r3, [r0, #16]
 801d11e:	9300      	str	r3, [sp, #0]
 801d120:	68c3      	ldr	r3, [r0, #12]
 801d122:	7842      	ldrb	r2, [r0, #1]
 801d124:	6881      	ldr	r1, [r0, #8]
 801d126:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 801d12a:	f7fe f82b 	bl	801b184 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_KR920 */
}
 801d12e:	b003      	add	sp, #12
 801d130:	bd30      	pop	{r4, r5, pc}
 801d132:	bf00      	nop
 801d134:	20001b88 	.word	0x20001b88
 801d138:	20001b8c 	.word	0x20001b8c

0801d13c <RegionKR920InitDefaults>:

void RegionKR920InitDefaults( InitDefaultsParams_t* params )
{
 801d13c:	b530      	push	{r4, r5, lr}
 801d13e:	b087      	sub	sp, #28
#if defined( REGION_KR920 )
    Band_t bands[KR920_MAX_NB_BANDS] =
 801d140:	2301      	movs	r3, #1
 801d142:	f8ad 3000 	strh.w	r3, [sp]
 801d146:	2300      	movs	r3, #0
 801d148:	f88d 3002 	strb.w	r3, [sp, #2]
 801d14c:	9301      	str	r3, [sp, #4]
 801d14e:	9302      	str	r3, [sp, #8]
 801d150:	9303      	str	r3, [sp, #12]
 801d152:	9304      	str	r3, [sp, #16]
 801d154:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        KR920_BAND0
    };

    switch( params->Type )
 801d158:	7a03      	ldrb	r3, [r0, #8]
 801d15a:	2b01      	cmp	r3, #1
 801d15c:	d032      	beq.n	801d1c4 <RegionKR920InitDefaults+0x88>
 801d15e:	2b02      	cmp	r3, #2
 801d160:	d03e      	beq.n	801d1e0 <RegionKR920InitDefaults+0xa4>
 801d162:	b10b      	cbz	r3, 801d168 <RegionKR920InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_KR920 */
}
 801d164:	b007      	add	sp, #28
 801d166:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801d168:	6803      	ldr	r3, [r0, #0]
 801d16a:	2b00      	cmp	r3, #0
 801d16c:	d0fa      	beq.n	801d164 <RegionKR920InitDefaults+0x28>
 801d16e:	6842      	ldr	r2, [r0, #4]
 801d170:	2a00      	cmp	r2, #0
 801d172:	d0f7      	beq.n	801d164 <RegionKR920InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801d174:	491f      	ldr	r1, [pc, #124]	; (801d1f4 <RegionKR920InitDefaults+0xb8>)
 801d176:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801d178:	4c1f      	ldr	r4, [pc, #124]	; (801d1f8 <RegionKR920InitDefaults+0xbc>)
 801d17a:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * KR920_MAX_NB_BANDS );
 801d17c:	2218      	movs	r2, #24
 801d17e:	4669      	mov	r1, sp
 801d180:	4618      	mov	r0, r3
 801d182:	f002 fea0 	bl	801fec6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) KR920_LC1;
 801d186:	6824      	ldr	r4, [r4, #0]
 801d188:	4b1c      	ldr	r3, [pc, #112]	; (801d1fc <RegionKR920InitDefaults+0xc0>)
 801d18a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d18e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) KR920_LC2;
 801d192:	f104 050c 	add.w	r5, r4, #12
 801d196:	f103 020c 	add.w	r2, r3, #12
 801d19a:	ca07      	ldmia	r2, {r0, r1, r2}
 801d19c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) KR920_LC3;
 801d1a0:	f104 0518 	add.w	r5, r4, #24
 801d1a4:	3318      	adds	r3, #24
 801d1a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d1aa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801d1ae:	2307      	movs	r3, #7
 801d1b0:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801d1b4:	2201      	movs	r2, #1
 801d1b6:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 801d1ba:	f504 7058 	add.w	r0, r4, #864	; 0x360
 801d1be:	f7fd ffd0 	bl	801b162 <RegionCommonChanMaskCopy>
            break;
 801d1c2:	e7cf      	b.n	801d164 <RegionKR920InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801d1c4:	4b0c      	ldr	r3, [pc, #48]	; (801d1f8 <RegionKR920InitDefaults+0xbc>)
 801d1c6:	6818      	ldr	r0, [r3, #0]
 801d1c8:	2300      	movs	r3, #0
 801d1ca:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801d1cc:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801d1ce:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801d1d0:	2201      	movs	r2, #1
 801d1d2:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 801d1d6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801d1da:	f7fd ffc2 	bl	801b162 <RegionCommonChanMaskCopy>
            break;
 801d1de:	e7c1      	b.n	801d164 <RegionKR920InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801d1e0:	4b05      	ldr	r3, [pc, #20]	; (801d1f8 <RegionKR920InitDefaults+0xbc>)
 801d1e2:	681b      	ldr	r3, [r3, #0]
 801d1e4:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 801d1e8:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 801d1ec:	430a      	orrs	r2, r1
 801d1ee:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 801d1f2:	e7b7      	b.n	801d164 <RegionKR920InitDefaults+0x28>
 801d1f4:	20001b88 	.word	0x20001b88
 801d1f8:	20001b8c 	.word	0x20001b8c
 801d1fc:	08024bb4 	.word	0x08024bb4

0801d200 <RegionKR920Verify>:

bool RegionKR920Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801d200:	b508      	push	{r3, lr}
#if defined( REGION_KR920 )
    switch( phyAttribute )
 801d202:	290a      	cmp	r1, #10
 801d204:	d833      	bhi.n	801d26e <RegionKR920Verify+0x6e>
 801d206:	e8df f001 	tbb	[pc, r1]
 801d20a:	3206      	.short	0x3206
 801d20c:	0a323232 	.word	0x0a323232
 801d210:	28321e14 	.word	0x28321e14
 801d214:	28          	.byte	0x28
 801d215:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801d216:	6800      	ldr	r0, [r0, #0]
 801d218:	f7ff fe6e 	bl	801cef8 <VerifyRfFreq>
 801d21c:	e028      	b.n	801d270 <RegionKR920Verify+0x70>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE );
 801d21e:	2205      	movs	r2, #5
 801d220:	2100      	movs	r1, #0
 801d222:	f990 0000 	ldrsb.w	r0, [r0]
 801d226:	f7fd ff2a 	bl	801b07e <RegionCommonValueInRange>
 801d22a:	3800      	subs	r0, #0
 801d22c:	bf18      	it	ne
 801d22e:	2001      	movne	r0, #1
 801d230:	e01e      	b.n	801d270 <RegionKR920Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801d232:	2205      	movs	r2, #5
 801d234:	2100      	movs	r1, #0
 801d236:	f990 0000 	ldrsb.w	r0, [r0]
 801d23a:	f7fd ff20 	bl	801b07e <RegionCommonValueInRange>
 801d23e:	3800      	subs	r0, #0
 801d240:	bf18      	it	ne
 801d242:	2001      	movne	r0, #1
 801d244:	e014      	b.n	801d270 <RegionKR920Verify+0x70>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, KR920_RX_MIN_DATARATE, KR920_RX_MAX_DATARATE );
 801d246:	2205      	movs	r2, #5
 801d248:	2100      	movs	r1, #0
 801d24a:	f990 0000 	ldrsb.w	r0, [r0]
 801d24e:	f7fd ff16 	bl	801b07e <RegionCommonValueInRange>
 801d252:	3800      	subs	r0, #0
 801d254:	bf18      	it	ne
 801d256:	2001      	movne	r0, #1
 801d258:	e00a      	b.n	801d270 <RegionKR920Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, KR920_MAX_TX_POWER, KR920_MIN_TX_POWER );
 801d25a:	2207      	movs	r2, #7
 801d25c:	2100      	movs	r1, #0
 801d25e:	f990 0000 	ldrsb.w	r0, [r0]
 801d262:	f7fd ff0c 	bl	801b07e <RegionCommonValueInRange>
 801d266:	3800      	subs	r0, #0
 801d268:	bf18      	it	ne
 801d26a:	2001      	movne	r0, #1
 801d26c:	e000      	b.n	801d270 <RegionKR920Verify+0x70>
{
 801d26e:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_KR920 */
}
 801d270:	bd08      	pop	{r3, pc}
	...

0801d274 <RegionKR920ChanMaskSet>:
    }
#endif /* REGION_KR920 */
}

bool RegionKR920ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801d274:	b508      	push	{r3, lr}
#if defined( REGION_KR920 )
    switch( chanMaskSet->ChannelsMaskType )
 801d276:	7903      	ldrb	r3, [r0, #4]
 801d278:	b11b      	cbz	r3, 801d282 <RegionKR920ChanMaskSet+0xe>
 801d27a:	2b01      	cmp	r3, #1
 801d27c:	d00b      	beq.n	801d296 <RegionKR920ChanMaskSet+0x22>
 801d27e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_KR920 */
}
 801d280:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 801d282:	4b0a      	ldr	r3, [pc, #40]	; (801d2ac <RegionKR920ChanMaskSet+0x38>)
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	2201      	movs	r2, #1
 801d288:	6801      	ldr	r1, [r0, #0]
 801d28a:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801d28e:	f7fd ff68 	bl	801b162 <RegionCommonChanMaskCopy>
    return true;
 801d292:	2001      	movs	r0, #1
            break;
 801d294:	e7f4      	b.n	801d280 <RegionKR920ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 801d296:	4b05      	ldr	r3, [pc, #20]	; (801d2ac <RegionKR920ChanMaskSet+0x38>)
 801d298:	681b      	ldr	r3, [r3, #0]
 801d29a:	2201      	movs	r2, #1
 801d29c:	6801      	ldr	r1, [r0, #0]
 801d29e:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801d2a2:	f7fd ff5e 	bl	801b162 <RegionCommonChanMaskCopy>
    return true;
 801d2a6:	2001      	movs	r0, #1
            break;
 801d2a8:	e7ea      	b.n	801d280 <RegionKR920ChanMaskSet+0xc>
 801d2aa:	bf00      	nop
 801d2ac:	20001b8c 	.word	0x20001b8c

0801d2b0 <RegionKR920ComputeRxWindowParameters>:

void RegionKR920ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801d2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2b2:	b083      	sub	sp, #12
 801d2b4:	460e      	mov	r6, r1
 801d2b6:	4617      	mov	r7, r2
 801d2b8:	461c      	mov	r4, r3
#if defined( REGION_KR920 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, KR920_RX_MAX_DATARATE );
 801d2ba:	2805      	cmp	r0, #5
 801d2bc:	bfa8      	it	ge
 801d2be:	2005      	movge	r0, #5
 801d2c0:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsKR920 );
 801d2c2:	4d0f      	ldr	r5, [pc, #60]	; (801d300 <RegionKR920ComputeRxWindowParameters+0x50>)
 801d2c4:	4629      	mov	r1, r5
 801d2c6:	f7fe f995 	bl	801b5f4 <RegionCommonGetBandwidth>
 801d2ca:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesKR920[rxConfigParams->Datarate], BandwidthsKR920[rxConfigParams->Datarate] );
 801d2cc:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801d2d0:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801d2d4:	4a0b      	ldr	r2, [pc, #44]	; (801d304 <RegionKR920ComputeRxWindowParameters+0x54>)
 801d2d6:	5cd0      	ldrb	r0, [r2, r3]
 801d2d8:	f7fe f85c 	bl	801b394 <RegionCommonComputeSymbolTimeLoRa>
 801d2dc:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801d2de:	4b0a      	ldr	r3, [pc, #40]	; (801d308 <RegionKR920ComputeRxWindowParameters+0x58>)
 801d2e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d2e2:	4798      	blx	r3
 801d2e4:	4603      	mov	r3, r0
 801d2e6:	f104 020c 	add.w	r2, r4, #12
 801d2ea:	9201      	str	r2, [sp, #4]
 801d2ec:	3408      	adds	r4, #8
 801d2ee:	9400      	str	r4, [sp, #0]
 801d2f0:	463a      	mov	r2, r7
 801d2f2:	4631      	mov	r1, r6
 801d2f4:	4628      	mov	r0, r5
 801d2f6:	f7fe f85b 	bl	801b3b0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_KR920 */
}
 801d2fa:	b003      	add	sp, #12
 801d2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2fe:	bf00      	nop
 801d300:	08028508 	.word	0x08028508
 801d304:	08028520 	.word	0x08028520
 801d308:	08028984 	.word	0x08028984

0801d30c <RegionKR920RxConfig>:

bool RegionKR920RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801d30c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d310:	b08b      	sub	sp, #44	; 0x2c
 801d312:	4604      	mov	r4, r0
 801d314:	460d      	mov	r5, r1
#if defined( REGION_KR920 )
    int8_t dr = rxConfig->Datarate;
 801d316:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801d31a:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 801d31c:	4b25      	ldr	r3, [pc, #148]	; (801d3b4 <RegionKR920RxConfig+0xa8>)
 801d31e:	685b      	ldr	r3, [r3, #4]
 801d320:	4798      	blx	r3
 801d322:	2800      	cmp	r0, #0
 801d324:	d144      	bne.n	801d3b0 <RegionKR920RxConfig+0xa4>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801d326:	7ce3      	ldrb	r3, [r4, #19]
 801d328:	b96b      	cbnz	r3, 801d346 <RegionKR920RxConfig+0x3a>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801d32a:	4b23      	ldr	r3, [pc, #140]	; (801d3b8 <RegionKR920RxConfig+0xac>)
 801d32c:	681a      	ldr	r2, [r3, #0]
 801d32e:	7823      	ldrb	r3, [r4, #0]
 801d330:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801d334:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801d338:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d33c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d340:	685f      	ldr	r7, [r3, #4]
 801d342:	b907      	cbnz	r7, 801d346 <RegionKR920RxConfig+0x3a>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801d344:	460f      	mov	r7, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesKR920[dr];
 801d346:	4b1d      	ldr	r3, [pc, #116]	; (801d3bc <RegionKR920RxConfig+0xb0>)
 801d348:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 801d34c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 801d3b4 <RegionKR920RxConfig+0xa8>
 801d350:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d354:	4638      	mov	r0, r7
 801d356:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801d358:	f8d8 8018 	ldr.w	r8, [r8, #24]
 801d35c:	7ca3      	ldrb	r3, [r4, #18]
 801d35e:	9309      	str	r3, [sp, #36]	; 0x24
 801d360:	2001      	movs	r0, #1
 801d362:	9008      	str	r0, [sp, #32]
 801d364:	2200      	movs	r2, #0
 801d366:	9207      	str	r2, [sp, #28]
 801d368:	9206      	str	r2, [sp, #24]
 801d36a:	9205      	str	r2, [sp, #20]
 801d36c:	9204      	str	r2, [sp, #16]
 801d36e:	9203      	str	r2, [sp, #12]
 801d370:	8923      	ldrh	r3, [r4, #8]
 801d372:	9302      	str	r3, [sp, #8]
 801d374:	2308      	movs	r3, #8
 801d376:	9301      	str	r3, [sp, #4]
 801d378:	9200      	str	r2, [sp, #0]
 801d37a:	4603      	mov	r3, r0
 801d37c:	464a      	mov	r2, r9
 801d37e:	78a1      	ldrb	r1, [r4, #2]
 801d380:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801d382:	7c63      	ldrb	r3, [r4, #17]
 801d384:	b18b      	cbz	r3, 801d3aa <RegionKR920RxConfig+0x9e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterKR920[dr];
 801d386:	4b0e      	ldr	r3, [pc, #56]	; (801d3c0 <RegionKR920RxConfig+0xb4>)
 801d388:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateKR920[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801d38a:	4b0a      	ldr	r3, [pc, #40]	; (801d3b4 <RegionKR920RxConfig+0xa8>)
 801d38c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d38e:	310d      	adds	r1, #13
 801d390:	b2c9      	uxtb	r1, r1
 801d392:	2001      	movs	r0, #1
 801d394:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801d396:	4632      	mov	r2, r6
 801d398:	4639      	mov	r1, r7
 801d39a:	7ce0      	ldrb	r0, [r4, #19]
 801d39c:	f7fe f93c 	bl	801b618 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801d3a0:	702e      	strb	r6, [r5, #0]
    return true;
 801d3a2:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_KR920 */
}
 801d3a4:	b00b      	add	sp, #44	; 0x2c
 801d3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateKR920[dr];
 801d3aa:	4b06      	ldr	r3, [pc, #24]	; (801d3c4 <RegionKR920RxConfig+0xb8>)
 801d3ac:	5d99      	ldrb	r1, [r3, r6]
 801d3ae:	e7ec      	b.n	801d38a <RegionKR920RxConfig+0x7e>
        return false;
 801d3b0:	2000      	movs	r0, #0
 801d3b2:	e7f7      	b.n	801d3a4 <RegionKR920RxConfig+0x98>
 801d3b4:	08028984 	.word	0x08028984
 801d3b8:	20001b8c 	.word	0x20001b8c
 801d3bc:	08028520 	.word	0x08028520
 801d3c0:	08028530 	.word	0x08028530
 801d3c4:	08028528 	.word	0x08028528

0801d3c8 <RegionKR920TxConfig>:

bool RegionKR920TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801d3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3cc:	b08d      	sub	sp, #52	; 0x34
 801d3ce:	4604      	mov	r4, r0
 801d3d0:	910b      	str	r1, [sp, #44]	; 0x2c
 801d3d2:	4690      	mov	r8, r2
#if defined( REGION_KR920 )
    int8_t phyDr = DataratesKR920[txConfig->Datarate];
 801d3d4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801d3d8:	4a39      	ldr	r2, [pc, #228]	; (801d4c0 <RegionKR920TxConfig+0xf8>)
 801d3da:	f912 b003 	ldrsb.w	fp, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801d3de:	4b39      	ldr	r3, [pc, #228]	; (801d4c4 <RegionKR920TxConfig+0xfc>)
 801d3e0:	6819      	ldr	r1, [r3, #0]
 801d3e2:	4d39      	ldr	r5, [pc, #228]	; (801d4c8 <RegionKR920TxConfig+0x100>)
 801d3e4:	682b      	ldr	r3, [r5, #0]
 801d3e6:	7802      	ldrb	r2, [r0, #0]
 801d3e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d3ec:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801d3f0:	7a53      	ldrb	r3, [r2, #9]
 801d3f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d3f6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801d3fa:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801d3fe:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801d402:	f7fe f8f2 	bl	801b5ea <RegionCommonLimitTxPower>
 801d406:	900a      	str	r0, [sp, #40]	; 0x28
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsKR920 );
 801d408:	4930      	ldr	r1, [pc, #192]	; (801d4cc <RegionKR920TxConfig+0x104>)
 801d40a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801d40e:	f7fe f8f1 	bl	801b5f4 <RegionCommonGetBandwidth>
 801d412:	4606      	mov	r6, r0
    float maxEIRP = GetMaxEIRP( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801d414:	682a      	ldr	r2, [r5, #0]
 801d416:	7823      	ldrb	r3, [r4, #0]
 801d418:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d41c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d420:	f7ff fd60 	bl	801cee4 <GetMaxEIRP>
 801d424:	f7e8 fff4 	bl	8006410 <__aeabi_i2f>
 801d428:	4605      	mov	r5, r0
    int8_t phyTxPower = 0;

    // Take the minimum between the maxEIRP and txConfig->MaxEirp.
    // The value of txConfig->MaxEirp could have changed during runtime, e.g. due to a MAC command.
    maxEIRP = MIN( txConfig->MaxEirp, maxEIRP );
 801d42a:	6867      	ldr	r7, [r4, #4]
 801d42c:	4601      	mov	r1, r0
 801d42e:	4638      	mov	r0, r7
 801d430:	f7e9 f890 	bl	8006554 <__aeabi_fcmplt>
 801d434:	b900      	cbnz	r0, 801d438 <RegionKR920TxConfig+0x70>
 801d436:	462f      	mov	r7, r5

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, maxEIRP, txConfig->AntennaGain );
 801d438:	68a2      	ldr	r2, [r4, #8]
 801d43a:	4639      	mov	r1, r7
 801d43c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801d43e:	f7fd fff1 	bl	801b424 <RegionCommonComputeTxPower>
 801d442:	4681      	mov	r9, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801d444:	4f22      	ldr	r7, [pc, #136]	; (801d4d0 <RegionKR920TxConfig+0x108>)
 801d446:	68fa      	ldr	r2, [r7, #12]
 801d448:	f8df a07c 	ldr.w	sl, [pc, #124]	; 801d4c8 <RegionKR920TxConfig+0x100>
 801d44c:	f8da 1000 	ldr.w	r1, [sl]
 801d450:	7823      	ldrb	r3, [r4, #0]
 801d452:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d456:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801d45a:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801d45c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801d460:	9308      	str	r3, [sp, #32]
 801d462:	2200      	movs	r2, #0
 801d464:	9207      	str	r2, [sp, #28]
 801d466:	9206      	str	r2, [sp, #24]
 801d468:	9205      	str	r2, [sp, #20]
 801d46a:	2501      	movs	r5, #1
 801d46c:	9504      	str	r5, [sp, #16]
 801d46e:	9203      	str	r2, [sp, #12]
 801d470:	2308      	movs	r3, #8
 801d472:	9302      	str	r3, [sp, #8]
 801d474:	9501      	str	r5, [sp, #4]
 801d476:	f8cd b000 	str.w	fp, [sp]
 801d47a:	4633      	mov	r3, r6
 801d47c:	4649      	mov	r1, r9
 801d47e:	4628      	mov	r0, r5
 801d480:	69fe      	ldr	r6, [r7, #28]
 801d482:	47b0      	blx	r6
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801d484:	f8da 2000 	ldr.w	r2, [sl]
 801d488:	7823      	ldrb	r3, [r4, #0]
 801d48a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d48e:	f994 1001 	ldrsb.w	r1, [r4, #1]
 801d492:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d496:	f7fe f8ef 	bl	801b678 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801d49a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d49c:	7b21      	ldrb	r1, [r4, #12]
 801d49e:	4628      	mov	r0, r5
 801d4a0:	4798      	blx	r3
    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801d4a2:	89a1      	ldrh	r1, [r4, #12]
 801d4a4:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801d4a8:	f7ff fd48 	bl	801cf3c <GetTimeOnAir>
 801d4ac:	f8c8 0000 	str.w	r0, [r8]

    *txPower = txPowerLimited;
 801d4b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d4b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d4b4:	701a      	strb	r2, [r3, #0]
    return true;
#else
    return false;
#endif /* REGION_KR920 */
}
 801d4b6:	4628      	mov	r0, r5
 801d4b8:	b00d      	add	sp, #52	; 0x34
 801d4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4be:	bf00      	nop
 801d4c0:	08028520 	.word	0x08028520
 801d4c4:	20001b88 	.word	0x20001b88
 801d4c8:	20001b8c 	.word	0x20001b8c
 801d4cc:	08028508 	.word	0x08028508
 801d4d0:	08028984 	.word	0x08028984

0801d4d4 <RegionKR920LinkAdrReq>:

uint8_t RegionKR920LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801d4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4d8:	b08f      	sub	sp, #60	; 0x3c
 801d4da:	4607      	mov	r7, r0
 801d4dc:	468b      	mov	fp, r1
 801d4de:	4692      	mov	sl, r2
 801d4e0:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_KR920 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801d4e2:	2500      	movs	r5, #0
 801d4e4:	950c      	str	r5, [sp, #48]	; 0x30
 801d4e6:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 801d4ea:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 801d4ee:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801d4f2:	e02d      	b.n	801d550 <RegionKR920LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < KR920_MAX_NB_CHANNELS; i++ )
 801d4f4:	2400      	movs	r4, #0
        status = 0x07;
 801d4f6:	f04f 0807 	mov.w	r8, #7
 801d4fa:	e00f      	b.n	801d51c <RegionKR920LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801d4fc:	4a56      	ldr	r2, [pc, #344]	; (801d658 <RegionKR920LinkAdrReq+0x184>)
 801d4fe:	6812      	ldr	r2, [r2, #0]
 801d500:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801d504:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801d508:	b132      	cbz	r2, 801d518 <RegionKR920LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 801d50a:	2201      	movs	r2, #1
 801d50c:	40a2      	lsls	r2, r4
 801d50e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801d512:	430a      	orrs	r2, r1
 801d514:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < KR920_MAX_NB_CHANNELS; i++ )
 801d518:	3401      	adds	r4, #1
 801d51a:	b2e4      	uxtb	r4, r4
 801d51c:	2c0f      	cmp	r4, #15
 801d51e:	d817      	bhi.n	801d550 <RegionKR920LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 801d520:	2b06      	cmp	r3, #6
 801d522:	d0eb      	beq.n	801d4fc <RegionKR920LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801d524:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801d528:	4126      	asrs	r6, r4
 801d52a:	f016 0f01 	tst.w	r6, #1
 801d52e:	d0f3      	beq.n	801d518 <RegionKR920LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801d530:	4a49      	ldr	r2, [pc, #292]	; (801d658 <RegionKR920LinkAdrReq+0x184>)
 801d532:	6812      	ldr	r2, [r2, #0]
 801d534:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801d538:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801d53c:	2a00      	cmp	r2, #0
 801d53e:	d1eb      	bne.n	801d518 <RegionKR920LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801d540:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 801d544:	e7e8      	b.n	801d518 <RegionKR920LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 801d546:	f04f 0806 	mov.w	r8, #6
 801d54a:	e001      	b.n	801d550 <RegionKR920LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 801d54c:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801d550:	7a3b      	ldrb	r3, [r7, #8]
 801d552:	42ab      	cmp	r3, r5
 801d554:	d919      	bls.n	801d58a <RegionKR920LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801d556:	6878      	ldr	r0, [r7, #4]
 801d558:	a90c      	add	r1, sp, #48	; 0x30
 801d55a:	4428      	add	r0, r5
 801d55c:	f7fd feb2 	bl	801b2c4 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 801d560:	b198      	cbz	r0, 801d58a <RegionKR920LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 801d562:	4405      	add	r5, r0
 801d564:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 801d566:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d56a:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801d56e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801d572:	b90b      	cbnz	r3, 801d578 <RegionKR920LinkAdrReq+0xa4>
 801d574:	2a00      	cmp	r2, #0
 801d576:	d0e6      	beq.n	801d546 <RegionKR920LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801d578:	1e5a      	subs	r2, r3, #1
 801d57a:	b2d2      	uxtb	r2, r2
 801d57c:	2a04      	cmp	r2, #4
 801d57e:	d9e5      	bls.n	801d54c <RegionKR920LinkAdrReq+0x78>
 801d580:	2b06      	cmp	r3, #6
 801d582:	d9b7      	bls.n	801d4f4 <RegionKR920LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 801d584:	f04f 0806 	mov.w	r8, #6
 801d588:	e7e2      	b.n	801d550 <RegionKR920LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801d58a:	2302      	movs	r3, #2
 801d58c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801d590:	7a7b      	ldrb	r3, [r7, #9]
 801d592:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionKR920GetPhyParam( &getPhy );
 801d596:	a80a      	add	r0, sp, #40	; 0x28
 801d598:	f7ff fcee 	bl	801cf78 <RegionKR920GetPhyParam>

    linkAdrVerifyParams.Status = status;
 801d59c:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801d5a0:	7abb      	ldrb	r3, [r7, #10]
 801d5a2:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801d5a6:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801d5aa:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801d5ae:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801d5b2:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801d5b6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801d5ba:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801d5be:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801d5c2:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801d5c6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801d5ca:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801d5ce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801d5d2:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = KR920_MAX_NB_CHANNELS;
 801d5d6:	2310      	movs	r3, #16
 801d5d8:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801d5dc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801d5e0:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801d5e2:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = KR920_TX_MAX_DATARATE;
 801d5e6:	2305      	movs	r3, #5
 801d5e8:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801d5ec:	4b1a      	ldr	r3, [pc, #104]	; (801d658 <RegionKR920LinkAdrReq+0x184>)
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	9307      	str	r3, [sp, #28]
    linkAdrVerifyParams.MinTxPower = KR920_MIN_TX_POWER;
 801d5f2:	2307      	movs	r3, #7
 801d5f4:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = KR920_MAX_TX_POWER;
 801d5f8:	2300      	movs	r3, #0
 801d5fa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801d5fe:	683b      	ldr	r3, [r7, #0]
 801d600:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801d602:	ab0c      	add	r3, sp, #48	; 0x30
 801d604:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801d608:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 801d60c:	a801      	add	r0, sp, #4
 801d60e:	f7fd fe75 	bl	801b2fc <RegionCommonLinkAdrReqVerifyParams>
 801d612:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801d614:	2807      	cmp	r0, #7
 801d616:	d011      	beq.n	801d63c <RegionKR920LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801d618:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801d61c:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 801d620:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801d624:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 801d628:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801d62c:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 801d630:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d632:	701d      	strb	r5, [r3, #0]

#endif /* REGION_KR920 */
    return status;
}
 801d634:	4620      	mov	r0, r4
 801d636:	b00f      	add	sp, #60	; 0x3c
 801d638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801d63c:	4e06      	ldr	r6, [pc, #24]	; (801d658 <RegionKR920LinkAdrReq+0x184>)
 801d63e:	6830      	ldr	r0, [r6, #0]
 801d640:	220c      	movs	r2, #12
 801d642:	2100      	movs	r1, #0
 801d644:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801d648:	f002 fc53 	bl	801fef2 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801d64c:	6833      	ldr	r3, [r6, #0]
 801d64e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801d652:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 801d656:	e7df      	b.n	801d618 <RegionKR920LinkAdrReq+0x144>
 801d658:	20001b8c 	.word	0x20001b8c

0801d65c <RegionKR920RxParamSetupReq>:

uint8_t RegionKR920RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801d65c:	b538      	push	{r3, r4, r5, lr}
 801d65e:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_KR920 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801d660:	6840      	ldr	r0, [r0, #4]
 801d662:	f7ff fc49 	bl	801cef8 <VerifyRfFreq>
 801d666:	b1a0      	cbz	r0, 801d692 <RegionKR920RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 801d668:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, KR920_RX_MIN_DATARATE, KR920_RX_MAX_DATARATE ) == false )
 801d66a:	2205      	movs	r2, #5
 801d66c:	2100      	movs	r1, #0
 801d66e:	f994 0000 	ldrsb.w	r0, [r4]
 801d672:	f7fd fd04 	bl	801b07e <RegionCommonValueInRange>
 801d676:	b908      	cbnz	r0, 801d67c <RegionKR920RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 801d678:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, KR920_MIN_RX1_DR_OFFSET, KR920_MAX_RX1_DR_OFFSET ) == false )
 801d67c:	2205      	movs	r2, #5
 801d67e:	2100      	movs	r1, #0
 801d680:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801d684:	f7fd fcfb 	bl	801b07e <RegionCommonValueInRange>
 801d688:	b908      	cbnz	r0, 801d68e <RegionKR920RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801d68a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_KR920 */
    return status;
}
 801d68e:	4628      	mov	r0, r5
 801d690:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 801d692:	2506      	movs	r5, #6
 801d694:	e7e9      	b.n	801d66a <RegionKR920RxParamSetupReq+0xe>

0801d696 <RegionKR920TxParamSetupReq>:

int8_t RegionKR920TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 801d696:	f04f 30ff 	mov.w	r0, #4294967295
 801d69a:	4770      	bx	lr

0801d69c <RegionKR920DlChannelReq>:

int8_t RegionKR920DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801d69c:	b510      	push	{r4, lr}
 801d69e:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_KR920 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 801d6a0:	6840      	ldr	r0, [r0, #4]
 801d6a2:	f7ff fc29 	bl	801cef8 <VerifyRfFreq>
 801d6a6:	b170      	cbz	r0, 801d6c6 <RegionKR920DlChannelReq+0x2a>
    uint8_t status = 0x03;
 801d6a8:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801d6aa:	4b0b      	ldr	r3, [pc, #44]	; (801d6d8 <RegionKR920DlChannelReq+0x3c>)
 801d6ac:	681a      	ldr	r2, [r3, #0]
 801d6ae:	7823      	ldrb	r3, [r4, #0]
 801d6b0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801d6b4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801d6b8:	b909      	cbnz	r1, 801d6be <RegionKR920DlChannelReq+0x22>
    {
        status &= 0xFD;
 801d6ba:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801d6be:	2803      	cmp	r0, #3
 801d6c0:	d003      	beq.n	801d6ca <RegionKR920DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_KR920 */
    return status;
}
 801d6c2:	b240      	sxtb	r0, r0
 801d6c4:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 801d6c6:	2002      	movs	r0, #2
 801d6c8:	e7ef      	b.n	801d6aa <RegionKR920DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801d6ca:	6861      	ldr	r1, [r4, #4]
 801d6cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d6d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d6d4:	6059      	str	r1, [r3, #4]
 801d6d6:	e7f4      	b.n	801d6c2 <RegionKR920DlChannelReq+0x26>
 801d6d8:	20001b8c 	.word	0x20001b8c

0801d6dc <RegionKR920AlternateDr>:
#if defined( REGION_KR920 )
    return currentDr;
#else
    return -1;
#endif /* REGION_KR920 */
}
 801d6dc:	4770      	bx	lr
	...

0801d6e0 <RegionKR920NextChannel>:

LoRaMacStatus_t RegionKR920NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801d6e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d6e4:	b097      	sub	sp, #92	; 0x5c
 801d6e6:	4604      	mov	r4, r0
 801d6e8:	4689      	mov	r9, r1
 801d6ea:	4616      	mov	r6, r2
 801d6ec:	461d      	mov	r5, r3
#if defined( REGION_KR920 )
    uint8_t channelNext = 0;
    uint8_t nbEnabledChannels = 0;
 801d6ee:	2100      	movs	r1, #0
 801d6f0:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 801d6f4:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[KR920_MAX_NB_CHANNELS] = { 0 };
 801d6f8:	9111      	str	r1, [sp, #68]	; 0x44
 801d6fa:	9112      	str	r1, [sp, #72]	; 0x48
 801d6fc:	9113      	str	r1, [sp, #76]	; 0x4c
 801d6fe:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = KR920_JOIN_CHANNELS;
 801d700:	2307      	movs	r3, #7
 801d702:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801d706:	4b43      	ldr	r3, [pc, #268]	; (801d814 <RegionKR920NextChannel+0x134>)
 801d708:	6818      	ldr	r0, [r3, #0]
 801d70a:	2201      	movs	r2, #1
 801d70c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801d710:	f7fd fd11 	bl	801b136 <RegionCommonCountChannels>
 801d714:	b938      	cbnz	r0, 801d726 <RegionKR920NextChannel+0x46>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801d716:	4b3f      	ldr	r3, [pc, #252]	; (801d814 <RegionKR920NextChannel+0x134>)
 801d718:	681a      	ldr	r2, [r3, #0]
 801d71a:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801d71e:	f043 0307 	orr.w	r3, r3, #7
 801d722:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801d726:	7a63      	ldrb	r3, [r4, #9]
 801d728:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801d72c:	7a23      	ldrb	r3, [r4, #8]
 801d72e:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801d732:	4b38      	ldr	r3, [pc, #224]	; (801d814 <RegionKR920NextChannel+0x134>)
 801d734:	681b      	ldr	r3, [r3, #0]
 801d736:	f503 7258 	add.w	r2, r3, #864	; 0x360
 801d73a:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801d73c:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801d73e:	4b36      	ldr	r3, [pc, #216]	; (801d818 <RegionKR920NextChannel+0x138>)
 801d740:	681b      	ldr	r3, [r3, #0]
 801d742:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = KR920_MAX_NB_CHANNELS;
 801d744:	2310      	movs	r3, #16
 801d746:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 801d74a:	f10d 030a 	add.w	r3, sp, #10
 801d74e:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801d750:	6823      	ldr	r3, [r4, #0]
 801d752:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801d754:	6863      	ldr	r3, [r4, #4]
 801d756:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801d758:	7aa3      	ldrb	r3, [r4, #10]
 801d75a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = KR920_MAX_NB_BANDS;
 801d75e:	2301      	movs	r3, #1
 801d760:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801d764:	ab0c      	add	r3, sp, #48	; 0x30
 801d766:	6921      	ldr	r1, [r4, #16]
 801d768:	68e0      	ldr	r0, [r4, #12]
 801d76a:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801d76e:	7d23      	ldrb	r3, [r4, #20]
 801d770:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801d774:	8ae1      	ldrh	r1, [r4, #22]
 801d776:	f994 0008 	ldrsb.w	r0, [r4, #8]
 801d77a:	f7ff fbdf 	bl	801cf3c <GetTimeOnAir>
 801d77e:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801d780:	ab03      	add	r3, sp, #12
 801d782:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801d784:	9601      	str	r6, [sp, #4]
 801d786:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 801d78a:	9300      	str	r3, [sp, #0]
 801d78c:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 801d790:	aa11      	add	r2, sp, #68	; 0x44
 801d792:	4629      	mov	r1, r5
 801d794:	a809      	add	r0, sp, #36	; 0x24
 801d796:	f7fd fec1 	bl	801b51c <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801d79a:	4680      	mov	r8, r0
 801d79c:	b128      	cbz	r0, 801d7aa <RegionKR920NextChannel+0xca>
        }
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801d79e:	280c      	cmp	r0, #12
 801d7a0:	d02f      	beq.n	801d802 <RegionKR920NextChannel+0x122>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_KR920 */
}
 801d7a2:	4640      	mov	r0, r8
 801d7a4:	b017      	add	sp, #92	; 0x5c
 801d7a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < KR920_MAX_NB_CHANNELS; i++ )
 801d7aa:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 801d7ae:	3901      	subs	r1, #1
 801d7b0:	f002 fb7c 	bl	801feac <randr>
 801d7b4:	b2c4      	uxtb	r4, r0
 801d7b6:	4645      	mov	r5, r8
 801d7b8:	2d0f      	cmp	r5, #15
 801d7ba:	d81f      	bhi.n	801d7fc <RegionKR920NextChannel+0x11c>
            channelNext = enabledChannels[j];
 801d7bc:	ab16      	add	r3, sp, #88	; 0x58
 801d7be:	4423      	add	r3, r4
 801d7c0:	f813 6c14 	ldrb.w	r6, [r3, #-20]
            j = ( j + 1 ) % nbEnabledChannels;
 801d7c4:	1c60      	adds	r0, r4, #1
 801d7c6:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
 801d7ca:	fb90 f4f3 	sdiv	r4, r0, r3
 801d7ce:	fb03 0414 	mls	r4, r3, r4, r0
 801d7d2:	b2e4      	uxtb	r4, r4
            if( Radio.IsChannelFree( RegionNvmGroup2->Channels[channelNext].Frequency, KR920_LBT_RX_BANDWIDTH, KR920_RSSI_FREE_TH, KR920_CARRIER_SENSE_TIME ) == true )
 801d7d4:	4b11      	ldr	r3, [pc, #68]	; (801d81c <RegionKR920NextChannel+0x13c>)
 801d7d6:	691f      	ldr	r7, [r3, #16]
 801d7d8:	4b0e      	ldr	r3, [pc, #56]	; (801d814 <RegionKR920NextChannel+0x134>)
 801d7da:	6818      	ldr	r0, [r3, #0]
 801d7dc:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801d7e0:	2306      	movs	r3, #6
 801d7e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d7e6:	490e      	ldr	r1, [pc, #56]	; (801d820 <RegionKR920NextChannel+0x140>)
 801d7e8:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 801d7ec:	47b8      	blx	r7
 801d7ee:	b910      	cbnz	r0, 801d7f6 <RegionKR920NextChannel+0x116>
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < KR920_MAX_NB_CHANNELS; i++ )
 801d7f0:	3501      	adds	r5, #1
 801d7f2:	b2ed      	uxtb	r5, r5
 801d7f4:	e7e0      	b.n	801d7b8 <RegionKR920NextChannel+0xd8>
                *channel = channelNext;
 801d7f6:	f889 6000 	strb.w	r6, [r9]
                return LORAMAC_STATUS_OK;
 801d7fa:	e7d2      	b.n	801d7a2 <RegionKR920NextChannel+0xc2>
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
 801d7fc:	f04f 080d 	mov.w	r8, #13
 801d800:	e7cf      	b.n	801d7a2 <RegionKR920NextChannel+0xc2>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801d802:	4b04      	ldr	r3, [pc, #16]	; (801d814 <RegionKR920NextChannel+0x134>)
 801d804:	681a      	ldr	r2, [r3, #0]
 801d806:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801d80a:	f043 0307 	orr.w	r3, r3, #7
 801d80e:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 801d812:	e7c6      	b.n	801d7a2 <RegionKR920NextChannel+0xc2>
 801d814:	20001b8c 	.word	0x20001b8c
 801d818:	20001b88 	.word	0x20001b88
 801d81c:	08028984 	.word	0x08028984
 801d820:	00030d40 	.word	0x00030d40

0801d824 <RegionKR920ChannelAdd>:

LoRaMacStatus_t RegionKR920ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801d824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_KR920 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 801d826:	7905      	ldrb	r5, [r0, #4]

    if( id < KR920_NUMB_DEFAULT_CHANNELS )
 801d828:	2d02      	cmp	r5, #2
 801d82a:	d94b      	bls.n	801d8c4 <RegionKR920ChannelAdd+0xa0>
 801d82c:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= KR920_MAX_NB_CHANNELS )
 801d82e:	2d0f      	cmp	r5, #15
 801d830:	d84a      	bhi.n	801d8c8 <RegionKR920ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE ) == false )
 801d832:	6803      	ldr	r3, [r0, #0]
 801d834:	7a18      	ldrb	r0, [r3, #8]
 801d836:	f340 0003 	sbfx	r0, r0, #0, #4
 801d83a:	2205      	movs	r2, #5
 801d83c:	2100      	movs	r1, #0
 801d83e:	b240      	sxtb	r0, r0
 801d840:	f7fd fc1d 	bl	801b07e <RegionCommonValueInRange>
 801d844:	2800      	cmp	r0, #0
 801d846:	d039      	beq.n	801d8bc <RegionKR920ChannelAdd+0x98>
    bool drInvalid = false;
 801d848:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE ) == false )
 801d84a:	6823      	ldr	r3, [r4, #0]
 801d84c:	7a18      	ldrb	r0, [r3, #8]
 801d84e:	f340 1003 	sbfx	r0, r0, #4, #4
 801d852:	2205      	movs	r2, #5
 801d854:	2100      	movs	r1, #0
 801d856:	b240      	sxtb	r0, r0
 801d858:	f7fd fc11 	bl	801b07e <RegionCommonValueInRange>
 801d85c:	b900      	cbnz	r0, 801d860 <RegionKR920ChannelAdd+0x3c>
    {
        drInvalid = true;
 801d85e:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801d860:	6821      	ldr	r1, [r4, #0]
 801d862:	7a0b      	ldrb	r3, [r1, #8]
 801d864:	f343 0203 	sbfx	r2, r3, #0, #4
 801d868:	b252      	sxtb	r2, r2
 801d86a:	f343 1303 	sbfx	r3, r3, #4, #4
 801d86e:	b25b      	sxtb	r3, r3
 801d870:	429a      	cmp	r2, r3
 801d872:	dd00      	ble.n	801d876 <RegionKR920ChannelAdd+0x52>
    {
        drInvalid = true;
 801d874:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 801d876:	6808      	ldr	r0, [r1, #0]
 801d878:	f7ff fb3e 	bl	801cef8 <VerifyRfFreq>
 801d87c:	b300      	cbz	r0, 801d8c0 <RegionKR920ChannelAdd+0x9c>
    bool freqInvalid = false;
 801d87e:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801d880:	b106      	cbz	r6, 801d884 <RegionKR920ChannelAdd+0x60>
 801d882:	bb1b      	cbnz	r3, 801d8cc <RegionKR920ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 801d884:	bb26      	cbnz	r6, 801d8d0 <RegionKR920ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 801d886:	bb2b      	cbnz	r3, 801d8d4 <RegionKR920ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801d888:	4f13      	ldr	r7, [pc, #76]	; (801d8d8 <RegionKR920ChannelAdd+0xb4>)
 801d88a:	683b      	ldr	r3, [r7, #0]
 801d88c:	006e      	lsls	r6, r5, #1
 801d88e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801d892:	220c      	movs	r2, #12
 801d894:	6821      	ldr	r1, [r4, #0]
 801d896:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801d89a:	f002 fb14 	bl	801fec6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 801d89e:	683a      	ldr	r2, [r7, #0]
 801d8a0:	442e      	add	r6, r5
 801d8a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d8a6:	2000      	movs	r0, #0
 801d8a8:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 801d8aa:	2301      	movs	r3, #1
 801d8ac:	fa03 f505 	lsl.w	r5, r3, r5
 801d8b0:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801d8b4:	431d      	orrs	r5, r3
 801d8b6:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 801d8ba:	e006      	b.n	801d8ca <RegionKR920ChannelAdd+0xa6>
        drInvalid = true;
 801d8bc:	2601      	movs	r6, #1
 801d8be:	e7c4      	b.n	801d84a <RegionKR920ChannelAdd+0x26>
            freqInvalid = true;
 801d8c0:	2301      	movs	r3, #1
 801d8c2:	e7dd      	b.n	801d880 <RegionKR920ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801d8c4:	2006      	movs	r0, #6
 801d8c6:	e000      	b.n	801d8ca <RegionKR920ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801d8c8:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_KR920 */
}
 801d8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801d8cc:	2006      	movs	r0, #6
 801d8ce:	e7fc      	b.n	801d8ca <RegionKR920ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 801d8d0:	2005      	movs	r0, #5
 801d8d2:	e7fa      	b.n	801d8ca <RegionKR920ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801d8d4:	2004      	movs	r0, #4
 801d8d6:	e7f8      	b.n	801d8ca <RegionKR920ChannelAdd+0xa6>
 801d8d8:	20001b8c 	.word	0x20001b8c

0801d8dc <RegionKR920ChannelsRemove>:

bool RegionKR920ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_KR920 )
    uint8_t id = channelRemove->ChannelId;
 801d8dc:	7801      	ldrb	r1, [r0, #0]

    if( id < KR920_NUMB_DEFAULT_CHANNELS )
 801d8de:	2902      	cmp	r1, #2
 801d8e0:	d801      	bhi.n	801d8e6 <RegionKR920ChannelsRemove+0xa>
    {
        return false;
 801d8e2:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, KR920_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_KR920 */
}
 801d8e4:	4770      	bx	lr
{
 801d8e6:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801d8e8:	4b08      	ldr	r3, [pc, #32]	; (801d90c <RegionKR920ChannelsRemove+0x30>)
 801d8ea:	6818      	ldr	r0, [r3, #0]
 801d8ec:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 801d8f0:	009c      	lsls	r4, r3, #2
 801d8f2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801d8f6:	2200      	movs	r2, #0
 801d8f8:	5102      	str	r2, [r0, r4]
 801d8fa:	605a      	str	r2, [r3, #4]
 801d8fc:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, KR920_MAX_NB_CHANNELS );
 801d8fe:	2210      	movs	r2, #16
 801d900:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801d904:	f7fd fbfd 	bl	801b102 <RegionCommonChanDisable>
}
 801d908:	bd10      	pop	{r4, pc}
 801d90a:	bf00      	nop
 801d90c:	20001b8c 	.word	0x20001b8c

0801d910 <RegionKR920ApplyCFList>:
{
 801d910:	b570      	push	{r4, r5, r6, lr}
 801d912:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801d914:	2350      	movs	r3, #80	; 0x50
 801d916:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 801d91a:	7903      	ldrb	r3, [r0, #4]
 801d91c:	2b10      	cmp	r3, #16
 801d91e:	d135      	bne.n	801d98c <RegionKR920ApplyCFList+0x7c>
 801d920:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 801d922:	6803      	ldr	r3, [r0, #0]
 801d924:	7bdd      	ldrb	r5, [r3, #15]
 801d926:	2d00      	cmp	r5, #0
 801d928:	d130      	bne.n	801d98c <RegionKR920ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = KR920_NUMB_DEFAULT_CHANNELS; chanIdx < KR920_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801d92a:	2403      	movs	r4, #3
 801d92c:	e01a      	b.n	801d964 <RegionKR920ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801d92e:	6832      	ldr	r2, [r6, #0]
 801d930:	5d53      	ldrb	r3, [r2, r5]
 801d932:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801d934:	442a      	add	r2, r5
 801d936:	7851      	ldrb	r1, [r2, #1]
 801d938:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801d93c:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801d93e:	7892      	ldrb	r2, [r2, #2]
 801d940:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 801d944:	2264      	movs	r2, #100	; 0x64
 801d946:	fb02 f303 	mul.w	r3, r2, r3
 801d94a:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 801d94c:	2300      	movs	r3, #0
 801d94e:	9304      	str	r3, [sp, #16]
 801d950:	e011      	b.n	801d976 <RegionKR920ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 801d952:	f88d 4000 	strb.w	r4, [sp]
            RegionKR920ChannelsRemove( &channelRemove );
 801d956:	4668      	mov	r0, sp
 801d958:	f7ff ffc0 	bl	801d8dc <RegionKR920ChannelsRemove>
    for( uint8_t i = 0, chanIdx = KR920_NUMB_DEFAULT_CHANNELS; chanIdx < KR920_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801d95c:	3503      	adds	r5, #3
 801d95e:	b2ed      	uxtb	r5, r5
 801d960:	3401      	adds	r4, #1
 801d962:	b2e4      	uxtb	r4, r4
 801d964:	2c0f      	cmp	r4, #15
 801d966:	d811      	bhi.n	801d98c <RegionKR920ApplyCFList+0x7c>
        if( chanIdx < ( KR920_NUMB_CHANNELS_CF_LIST + KR920_NUMB_DEFAULT_CHANNELS ) )
 801d968:	2c07      	cmp	r4, #7
 801d96a:	d9e0      	bls.n	801d92e <RegionKR920ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 801d96c:	2300      	movs	r3, #0
 801d96e:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 801d970:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 801d974:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 801d976:	9b03      	ldr	r3, [sp, #12]
 801d978:	2b00      	cmp	r3, #0
 801d97a:	d0ea      	beq.n	801d952 <RegionKR920ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 801d97c:	ab03      	add	r3, sp, #12
 801d97e:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 801d980:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionKR920ChannelAdd( &channelAdd );
 801d984:	a801      	add	r0, sp, #4
 801d986:	f7ff ff4d 	bl	801d824 <RegionKR920ChannelAdd>
 801d98a:	e7e7      	b.n	801d95c <RegionKR920ApplyCFList+0x4c>
}
 801d98c:	b006      	add	sp, #24
 801d98e:	bd70      	pop	{r4, r5, r6, pc}

0801d990 <RegionKR920NewChannelReq>:
{
 801d990:	b500      	push	{lr}
 801d992:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 801d994:	6803      	ldr	r3, [r0, #0]
 801d996:	681a      	ldr	r2, [r3, #0]
 801d998:	b952      	cbnz	r2, 801d9b0 <RegionKR920NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801d99a:	7903      	ldrb	r3, [r0, #4]
 801d99c:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionKR920ChannelsRemove( &channelRemove ) == false )
 801d9a0:	a801      	add	r0, sp, #4
 801d9a2:	f7ff ff9b 	bl	801d8dc <RegionKR920ChannelsRemove>
 801d9a6:	b1d0      	cbz	r0, 801d9de <RegionKR920NewChannelReq+0x4e>
    uint8_t status = 0x03;
 801d9a8:	2003      	movs	r0, #3
}
 801d9aa:	b005      	add	sp, #20
 801d9ac:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801d9b0:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801d9b2:	7903      	ldrb	r3, [r0, #4]
 801d9b4:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionKR920ChannelAdd( &channelAdd ) )
 801d9b8:	a802      	add	r0, sp, #8
 801d9ba:	f7ff ff33 	bl	801d824 <RegionKR920ChannelAdd>
 801d9be:	2806      	cmp	r0, #6
 801d9c0:	d80b      	bhi.n	801d9da <RegionKR920NewChannelReq+0x4a>
 801d9c2:	e8df f000 	tbb	[pc, r0]
 801d9c6:	0a04      	.short	0x0a04
 801d9c8:	060e0a0a 	.word	0x060e0a0a
 801d9cc:	08          	.byte	0x08
 801d9cd:	00          	.byte	0x00
 801d9ce:	2003      	movs	r0, #3
 801d9d0:	e7eb      	b.n	801d9aa <RegionKR920NewChannelReq+0x1a>
                status &= 0xFD;
 801d9d2:	2001      	movs	r0, #1
                break;
 801d9d4:	e7e9      	b.n	801d9aa <RegionKR920NewChannelReq+0x1a>
                status &= 0xFC;
 801d9d6:	2000      	movs	r0, #0
                break;
 801d9d8:	e7e7      	b.n	801d9aa <RegionKR920NewChannelReq+0x1a>
                status &= 0xFC;
 801d9da:	2000      	movs	r0, #0
                break;
 801d9dc:	e7e5      	b.n	801d9aa <RegionKR920NewChannelReq+0x1a>
            status &= 0xFC;
 801d9de:	2000      	movs	r0, #0
 801d9e0:	e7e3      	b.n	801d9aa <RegionKR920NewChannelReq+0x1a>
                status &= 0xFE;
 801d9e2:	2002      	movs	r0, #2
 801d9e4:	e7e1      	b.n	801d9aa <RegionKR920NewChannelReq+0x1a>
	...

0801d9e8 <RegionKR920SetContinuousWave>:

void RegionKR920SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801d9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9ec:	4604      	mov	r4, r0
#if defined( REGION_KR920 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801d9ee:	4b1a      	ldr	r3, [pc, #104]	; (801da58 <RegionKR920SetContinuousWave+0x70>)
 801d9f0:	6819      	ldr	r1, [r3, #0]
 801d9f2:	4d1a      	ldr	r5, [pc, #104]	; (801da5c <RegionKR920SetContinuousWave+0x74>)
 801d9f4:	682b      	ldr	r3, [r5, #0]
 801d9f6:	7802      	ldrb	r2, [r0, #0]
 801d9f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d9fc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801da00:	7a53      	ldrb	r3, [r2, #9]
 801da02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da06:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801da0a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801da0e:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801da12:	f7fd fdea 	bl	801b5ea <RegionCommonLimitTxPower>
 801da16:	4606      	mov	r6, r0
    float maxEIRP = GetMaxEIRP( RegionNvmGroup2->Channels[continuousWave->Channel].Frequency );
 801da18:	682a      	ldr	r2, [r5, #0]
 801da1a:	7823      	ldrb	r3, [r4, #0]
 801da1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da20:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 801da24:	4640      	mov	r0, r8
 801da26:	f7ff fa5d 	bl	801cee4 <GetMaxEIRP>
 801da2a:	f7e8 fcf1 	bl	8006410 <__aeabi_i2f>
 801da2e:	4605      	mov	r5, r0
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;

    // Take the minimum between the maxEIRP and continuousWave->MaxEirp.
    // The value of continuousWave->MaxEirp could have changed during runtime, e.g. due to a MAC command.
    maxEIRP = MIN( continuousWave->MaxEirp, maxEIRP );
 801da30:	6867      	ldr	r7, [r4, #4]
 801da32:	4601      	mov	r1, r0
 801da34:	4638      	mov	r0, r7
 801da36:	f7e8 fd8d 	bl	8006554 <__aeabi_fcmplt>
 801da3a:	b900      	cbnz	r0, 801da3e <RegionKR920SetContinuousWave+0x56>
 801da3c:	462f      	mov	r7, r5

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, maxEIRP, continuousWave->AntennaGain );
 801da3e:	68a2      	ldr	r2, [r4, #8]
 801da40:	4639      	mov	r1, r7
 801da42:	4630      	mov	r0, r6
 801da44:	f7fd fcee 	bl	801b424 <RegionCommonComputeTxPower>
 801da48:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801da4a:	4b05      	ldr	r3, [pc, #20]	; (801da60 <RegionKR920SetContinuousWave+0x78>)
 801da4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801da4e:	89a2      	ldrh	r2, [r4, #12]
 801da50:	4640      	mov	r0, r8
 801da52:	4798      	blx	r3
#endif /* REGION_KR920 */
}
 801da54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da58:	20001b88 	.word	0x20001b88
 801da5c:	20001b8c 	.word	0x20001b8c
 801da60:	08028984 	.word	0x08028984

0801da64 <RegionKR920ApplyDrOffset>:

uint8_t RegionKR920ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_KR920 )
    int8_t datarate = dr - drOffset;
 801da64:	1a88      	subs	r0, r1, r2
 801da66:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 801da68:	2800      	cmp	r0, #0
 801da6a:	db01      	blt.n	801da70 <RegionKR920ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_KR920 */
}
 801da6c:	b2c0      	uxtb	r0, r0
 801da6e:	4770      	bx	lr
        datarate = DR_0;
 801da70:	2000      	movs	r0, #0
 801da72:	e7fb      	b.n	801da6c <RegionKR920ApplyDrOffset+0x8>

0801da74 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 801da74:	b510      	push	{r4, lr}
 801da76:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801da78:	4b05      	ldr	r3, [pc, #20]	; (801da90 <VerifyRfFreq+0x1c>)
 801da7a:	6a1b      	ldr	r3, [r3, #32]
 801da7c:	4798      	blx	r3
 801da7e:	b120      	cbz	r0, 801da8a <VerifyRfFreq+0x16>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq < 864000000 ) ||  ( freq > 870000000 ) )
 801da80:	4b04      	ldr	r3, [pc, #16]	; (801da94 <VerifyRfFreq+0x20>)
 801da82:	4423      	add	r3, r4
 801da84:	4a04      	ldr	r2, [pc, #16]	; (801da98 <VerifyRfFreq+0x24>)
 801da86:	4293      	cmp	r3, r2
 801da88:	d800      	bhi.n	801da8c <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 801da8a:	bd10      	pop	{r4, pc}
        return false;
 801da8c:	2000      	movs	r0, #0
 801da8e:	e7fc      	b.n	801da8a <VerifyRfFreq+0x16>
 801da90:	08028984 	.word	0x08028984
 801da94:	cc806800 	.word	0xcc806800
 801da98:	005b8d80 	.word	0x005b8d80

0801da9c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801da9c:	b570      	push	{r4, r5, r6, lr}
 801da9e:	b084      	sub	sp, #16
 801daa0:	4605      	mov	r5, r0
 801daa2:	460c      	mov	r4, r1
    int8_t phyDr = DataratesRU864[datarate];
 801daa4:	4b13      	ldr	r3, [pc, #76]	; (801daf4 <GetTimeOnAir+0x58>)
 801daa6:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsRU864 );
 801daa8:	4913      	ldr	r1, [pc, #76]	; (801daf8 <GetTimeOnAir+0x5c>)
 801daaa:	f7fd fda3 	bl	801b5f4 <RegionCommonGetBandwidth>
 801daae:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 801dab0:	2d07      	cmp	r5, #7
 801dab2:	d00e      	beq.n	801dad2 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801dab4:	4b11      	ldr	r3, [pc, #68]	; (801dafc <GetTimeOnAir+0x60>)
 801dab6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801dab8:	2001      	movs	r0, #1
 801daba:	9003      	str	r0, [sp, #12]
 801dabc:	b2e4      	uxtb	r4, r4
 801dabe:	9402      	str	r4, [sp, #8]
 801dac0:	2300      	movs	r3, #0
 801dac2:	9301      	str	r3, [sp, #4]
 801dac4:	2308      	movs	r3, #8
 801dac6:	9300      	str	r3, [sp, #0]
 801dac8:	4603      	mov	r3, r0
 801daca:	4632      	mov	r2, r6
 801dacc:	47a8      	blx	r5
    }
    return timeOnAir;
}
 801dace:	b004      	add	sp, #16
 801dad0:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801dad2:	4b0a      	ldr	r3, [pc, #40]	; (801dafc <GetTimeOnAir+0x60>)
 801dad4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801dad6:	2301      	movs	r3, #1
 801dad8:	9303      	str	r3, [sp, #12]
 801dada:	b2e4      	uxtb	r4, r4
 801dadc:	9402      	str	r4, [sp, #8]
 801dade:	2000      	movs	r0, #0
 801dae0:	9001      	str	r0, [sp, #4]
 801dae2:	2305      	movs	r3, #5
 801dae4:	9300      	str	r3, [sp, #0]
 801dae6:	4603      	mov	r3, r0
 801dae8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801daec:	fb02 f206 	mul.w	r2, r2, r6
 801daf0:	47a8      	blx	r5
 801daf2:	e7ec      	b.n	801dace <GetTimeOnAir+0x32>
 801daf4:	08028558 	.word	0x08028558
 801daf8:	08028538 	.word	0x08028538
 801dafc:	08028984 	.word	0x08028984

0801db00 <RegionRU864GetPhyParam>:
#endif /* REGION_RU864 */

PhyParam_t RegionRU864GetPhyParam( GetPhyParams_t* getPhy )
{
 801db00:	b500      	push	{lr}
 801db02:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 801db04:	2300      	movs	r3, #0
 801db06:	9304      	str	r3, [sp, #16]

#if defined( REGION_RU864 )
    switch( getPhy->Attribute )
 801db08:	7803      	ldrb	r3, [r0, #0]
 801db0a:	3b0b      	subs	r3, #11
 801db0c:	2b2e      	cmp	r3, #46	; 0x2e
 801db0e:	d830      	bhi.n	801db72 <RegionRU864GetPhyParam+0x72>
 801db10:	e8df f003 	tbb	[pc, r3]
 801db14:	3f393633 	.word	0x3f393633
 801db18:	504c4845 	.word	0x504c4845
 801db1c:	605c5854 	.word	0x605c5854
 801db20:	6c2f692f 	.word	0x6c2f692f
 801db24:	2f7b7872 	.word	0x2f7b7872
 801db28:	18837f2f 	.word	0x18837f2f
 801db2c:	2f2f2f2f 	.word	0x2f2f2f2f
 801db30:	2f2f2f2f 	.word	0x2f2f2f2f
 801db34:	2f2f2f2f 	.word	0x2f2f2f2f
 801db38:	9389862f 	.word	0x9389862f
 801db3c:	99962f2f 	.word	0x99962f2f
 801db40:	9c2f      	.short	0x9c2f
 801db42:	a2          	.byte	0xa2
 801db43:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801db44:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801db48:	f88d 3004 	strb.w	r3, [sp, #4]
 801db4c:	2307      	movs	r3, #7
 801db4e:	f88d 3005 	strb.w	r3, [sp, #5]
 801db52:	2300      	movs	r3, #0
 801db54:	f88d 3006 	strb.w	r3, [sp, #6]
 801db58:	2308      	movs	r3, #8
 801db5a:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )RU864_TX_MAX_DATARATE,
                .MinDr = ( int8_t )RU864_TX_MIN_DATARATE,
                .NbChannels = RU864_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801db5e:	4b42      	ldr	r3, [pc, #264]	; (801dc68 <RegionRU864GetPhyParam+0x168>)
 801db60:	681b      	ldr	r3, [r3, #0]
 801db62:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801db66:	9202      	str	r2, [sp, #8]
 801db68:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801db6a:	a801      	add	r0, sp, #4
 801db6c:	f7fd fd1e 	bl	801b5ac <RegionCommonGetNextLowerTxDr>
 801db70:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_RU864 */
    return phyParam;
}
 801db72:	9804      	ldr	r0, [sp, #16]
 801db74:	b007      	add	sp, #28
 801db76:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801db7a:	2340      	movs	r3, #64	; 0x40
 801db7c:	9304      	str	r3, [sp, #16]
            break;
 801db7e:	e7f8      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801db80:	2320      	movs	r3, #32
 801db82:	9304      	str	r3, [sp, #16]
            break;
 801db84:	e7f5      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRU864[getPhy->Datarate];
 801db86:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801db8a:	4a38      	ldr	r2, [pc, #224]	; (801dc6c <RegionRU864GetPhyParam+0x16c>)
 801db8c:	5cd3      	ldrb	r3, [r2, r3]
 801db8e:	9304      	str	r3, [sp, #16]
            break;
 801db90:	e7ef      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterRU864[getPhy->Datarate];
 801db92:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801db96:	4a36      	ldr	r2, [pc, #216]	; (801dc70 <RegionRU864GetPhyParam+0x170>)
 801db98:	5cd3      	ldrb	r3, [r2, r3]
 801db9a:	9304      	str	r3, [sp, #16]
            break;
 801db9c:	e7e9      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_DUTY_CYCLE_ENABLED;
 801db9e:	2301      	movs	r3, #1
 801dba0:	9304      	str	r3, [sp, #16]
            break;
 801dba2:	e7e6      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_MAX_RX_WINDOW;
 801dba4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801dba8:	9304      	str	r3, [sp, #16]
            break;
 801dbaa:	e7e2      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801dbac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801dbb0:	9304      	str	r3, [sp, #16]
            break;
 801dbb2:	e7de      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801dbb4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801dbb8:	9304      	str	r3, [sp, #16]
            break;
 801dbba:	e7da      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801dbbc:	f241 3388 	movw	r3, #5000	; 0x1388
 801dbc0:	9304      	str	r3, [sp, #16]
            break;
 801dbc2:	e7d6      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801dbc4:	f241 7370 	movw	r3, #6000	; 0x1770
 801dbc8:	9304      	str	r3, [sp, #16]
            break;
 801dbca:	e7d2      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801dbcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801dbd0:	9304      	str	r3, [sp, #16]
            break;
 801dbd2:	e7ce      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801dbd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801dbd8:	4826      	ldr	r0, [pc, #152]	; (801dc74 <RegionRU864GetPhyParam+0x174>)
 801dbda:	f002 f967 	bl	801feac <randr>
 801dbde:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 801dbe2:	9004      	str	r0, [sp, #16]
            break;
 801dbe4:	e7c5      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_RX_WND_2_FREQ;
 801dbe6:	4b24      	ldr	r3, [pc, #144]	; (801dc78 <RegionRU864GetPhyParam+0x178>)
 801dbe8:	9304      	str	r3, [sp, #16]
            break;
 801dbea:	e7c2      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801dbec:	4b1e      	ldr	r3, [pc, #120]	; (801dc68 <RegionRU864GetPhyParam+0x168>)
 801dbee:	681b      	ldr	r3, [r3, #0]
 801dbf0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801dbf4:	9304      	str	r3, [sp, #16]
            break;
 801dbf6:	e7bc      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801dbf8:	4b1b      	ldr	r3, [pc, #108]	; (801dc68 <RegionRU864GetPhyParam+0x168>)
 801dbfa:	681b      	ldr	r3, [r3, #0]
 801dbfc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801dc00:	9304      	str	r3, [sp, #16]
            break;
 801dc02:	e7b6      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_MAX_NB_CHANNELS;
 801dc04:	2308      	movs	r3, #8
 801dc06:	9304      	str	r3, [sp, #16]
            break;
 801dc08:	e7b3      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 801dc0a:	4b17      	ldr	r3, [pc, #92]	; (801dc68 <RegionRU864GetPhyParam+0x168>)
 801dc0c:	681b      	ldr	r3, [r3, #0]
 801dc0e:	9304      	str	r3, [sp, #16]
            break;
 801dc10:	e7af      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.fValue = RU864_DEFAULT_MAX_EIRP;
 801dc12:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801dc16:	9304      	str	r3, [sp, #16]
            break;
 801dc18:	e7ab      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.fValue = RU864_DEFAULT_ANTENNA_GAIN;
 801dc1a:	4b18      	ldr	r3, [pc, #96]	; (801dc7c <RegionRU864GetPhyParam+0x17c>)
 801dc1c:	9304      	str	r3, [sp, #16]
            break;
 801dc1e:	e7a8      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_BEACON_CHANNEL_FREQ;
 801dc20:	4b15      	ldr	r3, [pc, #84]	; (801dc78 <RegionRU864GetPhyParam+0x178>)
 801dc22:	9304      	str	r3, [sp, #16]
            break;
 801dc24:	e7a5      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = RU864_BEACON_SIZE;
 801dc26:	2311      	movs	r3, #17
 801dc28:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = RU864_RFU1_SIZE;
 801dc2c:	2302      	movs	r3, #2
 801dc2e:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = RU864_RFU2_SIZE;
 801dc32:	2300      	movs	r3, #0
 801dc34:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 801dc38:	e79b      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_BEACON_CHANNEL_DR;
 801dc3a:	2303      	movs	r3, #3
 801dc3c:	9304      	str	r3, [sp, #16]
            break;
 801dc3e:	e798      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_PING_SLOT_CHANNEL_FREQ;
 801dc40:	4b0f      	ldr	r3, [pc, #60]	; (801dc80 <RegionRU864GetPhyParam+0x180>)
 801dc42:	9304      	str	r3, [sp, #16]
            break;
 801dc44:	e795      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_PING_SLOT_CHANNEL_DR;
 801dc46:	2303      	movs	r3, #3
 801dc48:	9304      	str	r3, [sp, #16]
            break;
 801dc4a:	e792      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = DataratesRU864[getPhy->Datarate];
 801dc4c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801dc50:	4a0c      	ldr	r2, [pc, #48]	; (801dc84 <RegionRU864GetPhyParam+0x184>)
 801dc52:	5cd3      	ldrb	r3, [r2, r3]
 801dc54:	9304      	str	r3, [sp, #16]
            break;
 801dc56:	e78c      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsRU864 );
 801dc58:	490b      	ldr	r1, [pc, #44]	; (801dc88 <RegionRU864GetPhyParam+0x188>)
 801dc5a:	f990 0001 	ldrsb.w	r0, [r0, #1]
 801dc5e:	f7fd fcc9 	bl	801b5f4 <RegionCommonGetBandwidth>
 801dc62:	9004      	str	r0, [sp, #16]
            break;
 801dc64:	e785      	b.n	801db72 <RegionRU864GetPhyParam+0x72>
 801dc66:	bf00      	nop
 801dc68:	20001b94 	.word	0x20001b94
 801dc6c:	08028560 	.word	0x08028560
 801dc70:	08028568 	.word	0x08028568
 801dc74:	fffffc18 	.word	0xfffffc18
 801dc78:	33cd69e0 	.word	0x33cd69e0
 801dc7c:	4009999a 	.word	0x4009999a
 801dc80:	33ca5ca0 	.word	0x33ca5ca0
 801dc84:	08028558 	.word	0x08028558
 801dc88:	08028538 	.word	0x08028538

0801dc8c <RegionRU864SetBandTxDone>:

void RegionRU864SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801dc8c:	b530      	push	{r4, r5, lr}
 801dc8e:	b083      	sub	sp, #12
#if defined( REGION_RU864 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801dc90:	4b0b      	ldr	r3, [pc, #44]	; (801dcc0 <RegionRU864SetBandTxDone+0x34>)
 801dc92:	681d      	ldr	r5, [r3, #0]
 801dc94:	4b0b      	ldr	r3, [pc, #44]	; (801dcc4 <RegionRU864SetBandTxDone+0x38>)
 801dc96:	681a      	ldr	r2, [r3, #0]
 801dc98:	7803      	ldrb	r3, [r0, #0]
 801dc9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801dca2:	7a5b      	ldrb	r3, [r3, #9]
 801dca4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 801dca8:	6903      	ldr	r3, [r0, #16]
 801dcaa:	9300      	str	r3, [sp, #0]
 801dcac:	68c3      	ldr	r3, [r0, #12]
 801dcae:	7842      	ldrb	r2, [r0, #1]
 801dcb0:	6881      	ldr	r1, [r0, #8]
 801dcb2:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 801dcb6:	f7fd fa65 	bl	801b184 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_RU864 */
}
 801dcba:	b003      	add	sp, #12
 801dcbc:	bd30      	pop	{r4, r5, pc}
 801dcbe:	bf00      	nop
 801dcc0:	20001b90 	.word	0x20001b90
 801dcc4:	20001b94 	.word	0x20001b94

0801dcc8 <RegionRU864InitDefaults>:

void RegionRU864InitDefaults( InitDefaultsParams_t* params )
{
 801dcc8:	b530      	push	{r4, r5, lr}
 801dcca:	b087      	sub	sp, #28
#if defined( REGION_RU864 )
    Band_t bands[RU864_MAX_NB_BANDS] =
 801dccc:	2364      	movs	r3, #100	; 0x64
 801dcce:	f8ad 3000 	strh.w	r3, [sp]
 801dcd2:	2300      	movs	r3, #0
 801dcd4:	f88d 3002 	strb.w	r3, [sp, #2]
 801dcd8:	9301      	str	r3, [sp, #4]
 801dcda:	9302      	str	r3, [sp, #8]
 801dcdc:	9303      	str	r3, [sp, #12]
 801dcde:	9304      	str	r3, [sp, #16]
 801dce0:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        RU864_BAND0
    };

    switch( params->Type )
 801dce4:	7a03      	ldrb	r3, [r0, #8]
 801dce6:	2b01      	cmp	r3, #1
 801dce8:	d02b      	beq.n	801dd42 <RegionRU864InitDefaults+0x7a>
 801dcea:	2b02      	cmp	r3, #2
 801dcec:	d036      	beq.n	801dd5c <RegionRU864InitDefaults+0x94>
 801dcee:	b10b      	cbz	r3, 801dcf4 <RegionRU864InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_RU864 */
}
 801dcf0:	b007      	add	sp, #28
 801dcf2:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801dcf4:	6803      	ldr	r3, [r0, #0]
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d0fa      	beq.n	801dcf0 <RegionRU864InitDefaults+0x28>
 801dcfa:	6842      	ldr	r2, [r0, #4]
 801dcfc:	2a00      	cmp	r2, #0
 801dcfe:	d0f7      	beq.n	801dcf0 <RegionRU864InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801dd00:	491b      	ldr	r1, [pc, #108]	; (801dd70 <RegionRU864InitDefaults+0xa8>)
 801dd02:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801dd04:	4c1b      	ldr	r4, [pc, #108]	; (801dd74 <RegionRU864InitDefaults+0xac>)
 801dd06:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * RU864_MAX_NB_BANDS );
 801dd08:	2218      	movs	r2, #24
 801dd0a:	4669      	mov	r1, sp
 801dd0c:	4618      	mov	r0, r3
 801dd0e:	f002 f8da 	bl	801fec6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) RU864_LC1;
 801dd12:	6824      	ldr	r4, [r4, #0]
 801dd14:	4b18      	ldr	r3, [pc, #96]	; (801dd78 <RegionRU864InitDefaults+0xb0>)
 801dd16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801dd1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) RU864_LC2;
 801dd1e:	f104 050c 	add.w	r5, r4, #12
 801dd22:	330c      	adds	r3, #12
 801dd24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801dd28:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 801dd2c:	2303      	movs	r3, #3
 801dd2e:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801dd32:	2201      	movs	r2, #1
 801dd34:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 801dd38:	f504 7058 	add.w	r0, r4, #864	; 0x360
 801dd3c:	f7fd fa11 	bl	801b162 <RegionCommonChanMaskCopy>
            break;
 801dd40:	e7d6      	b.n	801dcf0 <RegionRU864InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801dd42:	4b0c      	ldr	r3, [pc, #48]	; (801dd74 <RegionRU864InitDefaults+0xac>)
 801dd44:	6818      	ldr	r0, [r3, #0]
 801dd46:	2300      	movs	r3, #0
 801dd48:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801dd4a:	6103      	str	r3, [r0, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801dd4c:	2201      	movs	r2, #1
 801dd4e:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 801dd52:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801dd56:	f7fd fa04 	bl	801b162 <RegionCommonChanMaskCopy>
            break;
 801dd5a:	e7c9      	b.n	801dcf0 <RegionRU864InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801dd5c:	4b05      	ldr	r3, [pc, #20]	; (801dd74 <RegionRU864InitDefaults+0xac>)
 801dd5e:	681b      	ldr	r3, [r3, #0]
 801dd60:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 801dd64:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 801dd68:	430a      	orrs	r2, r1
 801dd6a:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 801dd6e:	e7bf      	b.n	801dcf0 <RegionRU864InitDefaults+0x28>
 801dd70:	20001b90 	.word	0x20001b90
 801dd74:	20001b94 	.word	0x20001b94
 801dd78:	08024bd8 	.word	0x08024bd8

0801dd7c <RegionRU864Verify>:

bool RegionRU864Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801dd7c:	b508      	push	{r3, lr}
#if defined( REGION_RU864 )
    switch( phyAttribute )
 801dd7e:	290f      	cmp	r1, #15
 801dd80:	d837      	bhi.n	801ddf2 <RegionRU864Verify+0x76>
 801dd82:	e8df f001 	tbb	[pc, r1]
 801dd86:	360a      	.short	0x360a
 801dd88:	0e363636 	.word	0x0e363636
 801dd8c:	2c362218 	.word	0x2c362218
 801dd90:	3636362c 	.word	0x3636362c
 801dd94:	0836      	.short	0x0836
        case PHY_DUTY_CYCLE:
        {
            return RU864_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 801dd96:	2001      	movs	r0, #1
 801dd98:	e02c      	b.n	801ddf4 <RegionRU864Verify+0x78>
            return VerifyRfFreq( verify->Frequency );
 801dd9a:	6800      	ldr	r0, [r0, #0]
 801dd9c:	f7ff fe6a 	bl	801da74 <VerifyRfFreq>
 801dda0:	e028      	b.n	801ddf4 <RegionRU864Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE );
 801dda2:	2207      	movs	r2, #7
 801dda4:	2100      	movs	r1, #0
 801dda6:	f990 0000 	ldrsb.w	r0, [r0]
 801ddaa:	f7fd f968 	bl	801b07e <RegionCommonValueInRange>
 801ddae:	3800      	subs	r0, #0
 801ddb0:	bf18      	it	ne
 801ddb2:	2001      	movne	r0, #1
 801ddb4:	e01e      	b.n	801ddf4 <RegionRU864Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801ddb6:	2205      	movs	r2, #5
 801ddb8:	2100      	movs	r1, #0
 801ddba:	f990 0000 	ldrsb.w	r0, [r0]
 801ddbe:	f7fd f95e 	bl	801b07e <RegionCommonValueInRange>
 801ddc2:	3800      	subs	r0, #0
 801ddc4:	bf18      	it	ne
 801ddc6:	2001      	movne	r0, #1
 801ddc8:	e014      	b.n	801ddf4 <RegionRU864Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, RU864_RX_MIN_DATARATE, RU864_RX_MAX_DATARATE );
 801ddca:	2207      	movs	r2, #7
 801ddcc:	2100      	movs	r1, #0
 801ddce:	f990 0000 	ldrsb.w	r0, [r0]
 801ddd2:	f7fd f954 	bl	801b07e <RegionCommonValueInRange>
 801ddd6:	3800      	subs	r0, #0
 801ddd8:	bf18      	it	ne
 801ddda:	2001      	movne	r0, #1
 801dddc:	e00a      	b.n	801ddf4 <RegionRU864Verify+0x78>
            return RegionCommonValueInRange( verify->TxPower, RU864_MAX_TX_POWER, RU864_MIN_TX_POWER );
 801ddde:	2207      	movs	r2, #7
 801dde0:	2100      	movs	r1, #0
 801dde2:	f990 0000 	ldrsb.w	r0, [r0]
 801dde6:	f7fd f94a 	bl	801b07e <RegionCommonValueInRange>
 801ddea:	3800      	subs	r0, #0
 801ddec:	bf18      	it	ne
 801ddee:	2001      	movne	r0, #1
 801ddf0:	e000      	b.n	801ddf4 <RegionRU864Verify+0x78>
            return false;
 801ddf2:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_RU864 */
}
 801ddf4:	bd08      	pop	{r3, pc}
	...

0801ddf8 <RegionRU864ChanMaskSet>:
    }
#endif /* REGION_RU864 */
}

bool RegionRU864ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801ddf8:	b508      	push	{r3, lr}
#if defined( REGION_RU864 )
    switch( chanMaskSet->ChannelsMaskType )
 801ddfa:	7903      	ldrb	r3, [r0, #4]
 801ddfc:	b11b      	cbz	r3, 801de06 <RegionRU864ChanMaskSet+0xe>
 801ddfe:	2b01      	cmp	r3, #1
 801de00:	d00b      	beq.n	801de1a <RegionRU864ChanMaskSet+0x22>
 801de02:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_RU864 */
}
 801de04:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 801de06:	4b0a      	ldr	r3, [pc, #40]	; (801de30 <RegionRU864ChanMaskSet+0x38>)
 801de08:	681b      	ldr	r3, [r3, #0]
 801de0a:	2201      	movs	r2, #1
 801de0c:	6801      	ldr	r1, [r0, #0]
 801de0e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801de12:	f7fd f9a6 	bl	801b162 <RegionCommonChanMaskCopy>
    return true;
 801de16:	2001      	movs	r0, #1
            break;
 801de18:	e7f4      	b.n	801de04 <RegionRU864ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 801de1a:	4b05      	ldr	r3, [pc, #20]	; (801de30 <RegionRU864ChanMaskSet+0x38>)
 801de1c:	681b      	ldr	r3, [r3, #0]
 801de1e:	2201      	movs	r2, #1
 801de20:	6801      	ldr	r1, [r0, #0]
 801de22:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801de26:	f7fd f99c 	bl	801b162 <RegionCommonChanMaskCopy>
    return true;
 801de2a:	2001      	movs	r0, #1
            break;
 801de2c:	e7ea      	b.n	801de04 <RegionRU864ChanMaskSet+0xc>
 801de2e:	bf00      	nop
 801de30:	20001b94 	.word	0x20001b94

0801de34 <RegionRU864ComputeRxWindowParameters>:

void RegionRU864ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801de34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de36:	b083      	sub	sp, #12
 801de38:	460e      	mov	r6, r1
 801de3a:	4617      	mov	r7, r2
 801de3c:	461c      	mov	r4, r3
#if defined( REGION_RU864 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, RU864_RX_MAX_DATARATE );
 801de3e:	2807      	cmp	r0, #7
 801de40:	bfa8      	it	ge
 801de42:	2007      	movge	r0, #7
 801de44:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsRU864 );
 801de46:	4913      	ldr	r1, [pc, #76]	; (801de94 <RegionRU864ComputeRxWindowParameters+0x60>)
 801de48:	f7fd fbd4 	bl	801b5f4 <RegionCommonGetBandwidth>
 801de4c:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801de4e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801de52:	2b07      	cmp	r3, #7
 801de54:	d017      	beq.n	801de86 <RegionRU864ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesRU864[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesRU864[rxConfigParams->Datarate], BandwidthsRU864[rxConfigParams->Datarate] );
 801de56:	4a0f      	ldr	r2, [pc, #60]	; (801de94 <RegionRU864ComputeRxWindowParameters+0x60>)
 801de58:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801de5c:	4a0e      	ldr	r2, [pc, #56]	; (801de98 <RegionRU864ComputeRxWindowParameters+0x64>)
 801de5e:	5cd0      	ldrb	r0, [r2, r3]
 801de60:	f7fd fa98 	bl	801b394 <RegionCommonComputeSymbolTimeLoRa>
 801de64:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801de66:	4b0d      	ldr	r3, [pc, #52]	; (801de9c <RegionRU864ComputeRxWindowParameters+0x68>)
 801de68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801de6a:	4798      	blx	r3
 801de6c:	4603      	mov	r3, r0
 801de6e:	f104 020c 	add.w	r2, r4, #12
 801de72:	9201      	str	r2, [sp, #4]
 801de74:	3408      	adds	r4, #8
 801de76:	9400      	str	r4, [sp, #0]
 801de78:	463a      	mov	r2, r7
 801de7a:	4631      	mov	r1, r6
 801de7c:	4628      	mov	r0, r5
 801de7e:	f7fd fa97 	bl	801b3b0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_RU864 */
}
 801de82:	b003      	add	sp, #12
 801de84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesRU864[rxConfigParams->Datarate] );
 801de86:	4a04      	ldr	r2, [pc, #16]	; (801de98 <RegionRU864ComputeRxWindowParameters+0x64>)
 801de88:	5cd0      	ldrb	r0, [r2, r3]
 801de8a:	f7fd fa8b 	bl	801b3a4 <RegionCommonComputeSymbolTimeFsk>
 801de8e:	4605      	mov	r5, r0
 801de90:	e7e9      	b.n	801de66 <RegionRU864ComputeRxWindowParameters+0x32>
 801de92:	bf00      	nop
 801de94:	08028538 	.word	0x08028538
 801de98:	08028558 	.word	0x08028558
 801de9c:	08028984 	.word	0x08028984

0801dea0 <RegionRU864RxConfig>:

bool RegionRU864RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801dea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dea4:	b08a      	sub	sp, #40	; 0x28
 801dea6:	4604      	mov	r4, r0
 801dea8:	460f      	mov	r7, r1
#if defined( REGION_RU864 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801deaa:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801deae:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 801deb2:	4b37      	ldr	r3, [pc, #220]	; (801df90 <RegionRU864RxConfig+0xf0>)
 801deb4:	685b      	ldr	r3, [r3, #4]
 801deb6:	4798      	blx	r3
 801deb8:	2800      	cmp	r0, #0
 801deba:	d167      	bne.n	801df8c <RegionRU864RxConfig+0xec>
 801debc:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801debe:	7ce3      	ldrb	r3, [r4, #19]
 801dec0:	b983      	cbnz	r3, 801dee4 <RegionRU864RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801dec2:	4b34      	ldr	r3, [pc, #208]	; (801df94 <RegionRU864RxConfig+0xf4>)
 801dec4:	681a      	ldr	r2, [r3, #0]
 801dec6:	7823      	ldrb	r3, [r4, #0]
 801dec8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801decc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801ded0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ded4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ded8:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801dedc:	f1b8 0f00 	cmp.w	r8, #0
 801dee0:	d100      	bne.n	801dee4 <RegionRU864RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801dee2:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesRU864[dr];
 801dee4:	4b2c      	ldr	r3, [pc, #176]	; (801df98 <RegionRU864RxConfig+0xf8>)
 801dee6:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 801deea:	4b29      	ldr	r3, [pc, #164]	; (801df90 <RegionRU864RxConfig+0xf0>)
 801deec:	68db      	ldr	r3, [r3, #12]
 801deee:	4640      	mov	r0, r8
 801def0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801def2:	2d07      	cmp	r5, #7
 801def4:	d02b      	beq.n	801df4e <RegionRU864RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801def6:	4b26      	ldr	r3, [pc, #152]	; (801df90 <RegionRU864RxConfig+0xf0>)
 801def8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801defc:	7ca3      	ldrb	r3, [r4, #18]
 801defe:	9309      	str	r3, [sp, #36]	; 0x24
 801df00:	2601      	movs	r6, #1
 801df02:	9608      	str	r6, [sp, #32]
 801df04:	2300      	movs	r3, #0
 801df06:	9307      	str	r3, [sp, #28]
 801df08:	9306      	str	r3, [sp, #24]
 801df0a:	9305      	str	r3, [sp, #20]
 801df0c:	9304      	str	r3, [sp, #16]
 801df0e:	9303      	str	r3, [sp, #12]
 801df10:	8922      	ldrh	r2, [r4, #8]
 801df12:	9202      	str	r2, [sp, #8]
 801df14:	2208      	movs	r2, #8
 801df16:	9201      	str	r2, [sp, #4]
 801df18:	9300      	str	r3, [sp, #0]
 801df1a:	4633      	mov	r3, r6
 801df1c:	464a      	mov	r2, r9
 801df1e:	78a1      	ldrb	r1, [r4, #2]
 801df20:	4630      	mov	r0, r6
 801df22:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801df24:	7c63      	ldrb	r3, [r4, #17]
 801df26:	2b00      	cmp	r3, #0
 801df28:	d02d      	beq.n	801df86 <RegionRU864RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterRU864[dr];
 801df2a:	4b1c      	ldr	r3, [pc, #112]	; (801df9c <RegionRU864RxConfig+0xfc>)
 801df2c:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateRU864[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801df2e:	4b18      	ldr	r3, [pc, #96]	; (801df90 <RegionRU864RxConfig+0xf0>)
 801df30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801df32:	310d      	adds	r1, #13
 801df34:	b2c9      	uxtb	r1, r1
 801df36:	4630      	mov	r0, r6
 801df38:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801df3a:	462a      	mov	r2, r5
 801df3c:	4641      	mov	r1, r8
 801df3e:	7ce0      	ldrb	r0, [r4, #19]
 801df40:	f7fd fb6a 	bl	801b618 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801df44:	703d      	strb	r5, [r7, #0]
    return true;
 801df46:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_RU864 */
}
 801df48:	b00a      	add	sp, #40	; 0x28
 801df4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801df4e:	4b10      	ldr	r3, [pc, #64]	; (801df90 <RegionRU864RxConfig+0xf0>)
 801df50:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801df54:	7ca3      	ldrb	r3, [r4, #18]
 801df56:	9309      	str	r3, [sp, #36]	; 0x24
 801df58:	2000      	movs	r0, #0
 801df5a:	9008      	str	r0, [sp, #32]
 801df5c:	9007      	str	r0, [sp, #28]
 801df5e:	9006      	str	r0, [sp, #24]
 801df60:	2301      	movs	r3, #1
 801df62:	9305      	str	r3, [sp, #20]
 801df64:	9004      	str	r0, [sp, #16]
 801df66:	9003      	str	r0, [sp, #12]
 801df68:	8923      	ldrh	r3, [r4, #8]
 801df6a:	9302      	str	r3, [sp, #8]
 801df6c:	2305      	movs	r3, #5
 801df6e:	9301      	str	r3, [sp, #4]
 801df70:	4b0b      	ldr	r3, [pc, #44]	; (801dfa0 <RegionRU864RxConfig+0x100>)
 801df72:	9300      	str	r3, [sp, #0]
 801df74:	4603      	mov	r3, r0
 801df76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801df7a:	fb02 f209 	mul.w	r2, r2, r9
 801df7e:	f24c 3150 	movw	r1, #50000	; 0xc350
 801df82:	47d0      	blx	sl
 801df84:	e7ce      	b.n	801df24 <RegionRU864RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateRU864[dr];
 801df86:	4b07      	ldr	r3, [pc, #28]	; (801dfa4 <RegionRU864RxConfig+0x104>)
 801df88:	5d59      	ldrb	r1, [r3, r5]
 801df8a:	e7d0      	b.n	801df2e <RegionRU864RxConfig+0x8e>
        return false;
 801df8c:	2000      	movs	r0, #0
 801df8e:	e7db      	b.n	801df48 <RegionRU864RxConfig+0xa8>
 801df90:	08028984 	.word	0x08028984
 801df94:	20001b94 	.word	0x20001b94
 801df98:	08028558 	.word	0x08028558
 801df9c:	08028568 	.word	0x08028568
 801dfa0:	00014585 	.word	0x00014585
 801dfa4:	08028560 	.word	0x08028560

0801dfa8 <RegionRU864TxConfig>:

bool RegionRU864TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801dfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfac:	b08d      	sub	sp, #52	; 0x34
 801dfae:	4604      	mov	r4, r0
 801dfb0:	460f      	mov	r7, r1
 801dfb2:	4690      	mov	r8, r2
#if defined( REGION_RU864 )
    RadioModems_t modem;
    int8_t phyDr = DataratesRU864[txConfig->Datarate];
 801dfb4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801dfb8:	4a42      	ldr	r2, [pc, #264]	; (801e0c4 <RegionRU864TxConfig+0x11c>)
 801dfba:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801dfbe:	4b42      	ldr	r3, [pc, #264]	; (801e0c8 <RegionRU864TxConfig+0x120>)
 801dfc0:	6819      	ldr	r1, [r3, #0]
 801dfc2:	4d42      	ldr	r5, [pc, #264]	; (801e0cc <RegionRU864TxConfig+0x124>)
 801dfc4:	682b      	ldr	r3, [r5, #0]
 801dfc6:	7802      	ldrb	r2, [r0, #0]
 801dfc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dfcc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801dfd0:	7a53      	ldrb	r3, [r2, #9]
 801dfd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dfd6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801dfda:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801dfde:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801dfe2:	f7fd fb02 	bl	801b5ea <RegionCommonLimitTxPower>
 801dfe6:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsRU864 );
 801dfe8:	4939      	ldr	r1, [pc, #228]	; (801e0d0 <RegionRU864TxConfig+0x128>)
 801dfea:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801dfee:	f7fd fb01 	bl	801b5f4 <RegionCommonGetBandwidth>
 801dff2:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801dff4:	68a2      	ldr	r2, [r4, #8]
 801dff6:	6861      	ldr	r1, [r4, #4]
 801dff8:	4630      	mov	r0, r6
 801dffa:	f7fd fa13 	bl	801b424 <RegionCommonComputeTxPower>
 801dffe:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801e000:	4b34      	ldr	r3, [pc, #208]	; (801e0d4 <RegionRU864TxConfig+0x12c>)
 801e002:	68da      	ldr	r2, [r3, #12]
 801e004:	6829      	ldr	r1, [r5, #0]
 801e006:	7823      	ldrb	r3, [r4, #0]
 801e008:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e00c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801e010:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801e012:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801e016:	2b07      	cmp	r3, #7
 801e018:	d031      	beq.n	801e07e <RegionRU864TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801e01a:	4b2e      	ldr	r3, [pc, #184]	; (801e0d4 <RegionRU864TxConfig+0x12c>)
 801e01c:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 801e020:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801e024:	9308      	str	r3, [sp, #32]
 801e026:	2200      	movs	r2, #0
 801e028:	9207      	str	r2, [sp, #28]
 801e02a:	9206      	str	r2, [sp, #24]
 801e02c:	9205      	str	r2, [sp, #20]
 801e02e:	2501      	movs	r5, #1
 801e030:	9504      	str	r5, [sp, #16]
 801e032:	9203      	str	r2, [sp, #12]
 801e034:	2308      	movs	r3, #8
 801e036:	9302      	str	r3, [sp, #8]
 801e038:	9501      	str	r5, [sp, #4]
 801e03a:	f8cd a000 	str.w	sl, [sp]
 801e03e:	464b      	mov	r3, r9
 801e040:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e042:	4628      	mov	r0, r5
 801e044:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801e046:	4b21      	ldr	r3, [pc, #132]	; (801e0cc <RegionRU864TxConfig+0x124>)
 801e048:	681a      	ldr	r2, [r3, #0]
 801e04a:	7823      	ldrb	r3, [r4, #0]
 801e04c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e050:	f994 1001 	ldrsb.w	r1, [r4, #1]
 801e054:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e058:	f7fd fb0e 	bl	801b678 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801e05c:	89a1      	ldrh	r1, [r4, #12]
 801e05e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801e062:	f7ff fd1b 	bl	801da9c <GetTimeOnAir>
 801e066:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801e06a:	4b1a      	ldr	r3, [pc, #104]	; (801e0d4 <RegionRU864TxConfig+0x12c>)
 801e06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e06e:	7b21      	ldrb	r1, [r4, #12]
 801e070:	4628      	mov	r0, r5
 801e072:	4798      	blx	r3

    *txPower = txPowerLimited;
 801e074:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_RU864 */
}
 801e076:	2001      	movs	r0, #1
 801e078:	b00d      	add	sp, #52	; 0x34
 801e07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801e07e:	4b15      	ldr	r3, [pc, #84]	; (801e0d4 <RegionRU864TxConfig+0x12c>)
 801e080:	69dd      	ldr	r5, [r3, #28]
 801e082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801e086:	fb03 f30a 	mul.w	r3, r3, sl
 801e08a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801e08e:	9208      	str	r2, [sp, #32]
 801e090:	f04f 0b00 	mov.w	fp, #0
 801e094:	f8cd b01c 	str.w	fp, [sp, #28]
 801e098:	f8cd b018 	str.w	fp, [sp, #24]
 801e09c:	f8cd b014 	str.w	fp, [sp, #20]
 801e0a0:	2201      	movs	r2, #1
 801e0a2:	9204      	str	r2, [sp, #16]
 801e0a4:	f8cd b00c 	str.w	fp, [sp, #12]
 801e0a8:	2205      	movs	r2, #5
 801e0aa:	9202      	str	r2, [sp, #8]
 801e0ac:	f8cd b004 	str.w	fp, [sp, #4]
 801e0b0:	9300      	str	r3, [sp, #0]
 801e0b2:	464b      	mov	r3, r9
 801e0b4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801e0b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e0ba:	4658      	mov	r0, fp
 801e0bc:	47a8      	blx	r5
        modem = MODEM_FSK;
 801e0be:	465d      	mov	r5, fp
 801e0c0:	e7c1      	b.n	801e046 <RegionRU864TxConfig+0x9e>
 801e0c2:	bf00      	nop
 801e0c4:	08028558 	.word	0x08028558
 801e0c8:	20001b90 	.word	0x20001b90
 801e0cc:	20001b94 	.word	0x20001b94
 801e0d0:	08028538 	.word	0x08028538
 801e0d4:	08028984 	.word	0x08028984

0801e0d8 <RegionRU864LinkAdrReq>:

uint8_t RegionRU864LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801e0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0dc:	b08e      	sub	sp, #56	; 0x38
 801e0de:	4606      	mov	r6, r0
 801e0e0:	4689      	mov	r9, r1
 801e0e2:	4690      	mov	r8, r2
 801e0e4:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_RU864 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801e0e6:	2500      	movs	r5, #0
 801e0e8:	950c      	str	r5, [sp, #48]	; 0x30
 801e0ea:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 801e0ee:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 801e0f2:	f04f 0a07 	mov.w	sl, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801e0f6:	e02d      	b.n	801e154 <RegionRU864LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < RU864_MAX_NB_CHANNELS; i++ )
 801e0f8:	2400      	movs	r4, #0
        status = 0x07;
 801e0fa:	f04f 0a07 	mov.w	sl, #7
 801e0fe:	e00f      	b.n	801e120 <RegionRU864LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801e100:	4b55      	ldr	r3, [pc, #340]	; (801e258 <RegionRU864LinkAdrReq+0x180>)
 801e102:	681b      	ldr	r3, [r3, #0]
 801e104:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801e108:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e10c:	b133      	cbz	r3, 801e11c <RegionRU864LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 801e10e:	2301      	movs	r3, #1
 801e110:	40a3      	lsls	r3, r4
 801e112:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801e116:	430b      	orrs	r3, r1
 801e118:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < RU864_MAX_NB_CHANNELS; i++ )
 801e11c:	3401      	adds	r4, #1
 801e11e:	b2e4      	uxtb	r4, r4
 801e120:	2c07      	cmp	r4, #7
 801e122:	d817      	bhi.n	801e154 <RegionRU864LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 801e124:	2a06      	cmp	r2, #6
 801e126:	d0eb      	beq.n	801e100 <RegionRU864LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801e128:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801e12c:	4123      	asrs	r3, r4
 801e12e:	f013 0f01 	tst.w	r3, #1
 801e132:	d0f3      	beq.n	801e11c <RegionRU864LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801e134:	4b48      	ldr	r3, [pc, #288]	; (801e258 <RegionRU864LinkAdrReq+0x180>)
 801e136:	681b      	ldr	r3, [r3, #0]
 801e138:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801e13c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801e140:	2b00      	cmp	r3, #0
 801e142:	d1eb      	bne.n	801e11c <RegionRU864LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801e144:	f00a 0afe 	and.w	sl, sl, #254	; 0xfe
 801e148:	e7e8      	b.n	801e11c <RegionRU864LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 801e14a:	f04f 0a06 	mov.w	sl, #6
 801e14e:	e001      	b.n	801e154 <RegionRU864LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 801e150:	f04f 0a06 	mov.w	sl, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801e154:	7a33      	ldrb	r3, [r6, #8]
 801e156:	42ab      	cmp	r3, r5
 801e158:	d919      	bls.n	801e18e <RegionRU864LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801e15a:	6870      	ldr	r0, [r6, #4]
 801e15c:	a90c      	add	r1, sp, #48	; 0x30
 801e15e:	4428      	add	r0, r5
 801e160:	f7fd f8b0 	bl	801b2c4 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 801e164:	b198      	cbz	r0, 801e18e <RegionRU864LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 801e166:	4405      	add	r5, r0
 801e168:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 801e16a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801e16e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801e172:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 801e176:	b90a      	cbnz	r2, 801e17c <RegionRU864LinkAdrReq+0xa4>
 801e178:	2b00      	cmp	r3, #0
 801e17a:	d0e6      	beq.n	801e14a <RegionRU864LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801e17c:	1e53      	subs	r3, r2, #1
 801e17e:	b2db      	uxtb	r3, r3
 801e180:	2b04      	cmp	r3, #4
 801e182:	d9e5      	bls.n	801e150 <RegionRU864LinkAdrReq+0x78>
 801e184:	2a06      	cmp	r2, #6
 801e186:	d9b7      	bls.n	801e0f8 <RegionRU864LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 801e188:	f04f 0a06 	mov.w	sl, #6
 801e18c:	e7e2      	b.n	801e154 <RegionRU864LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801e18e:	2302      	movs	r3, #2
 801e190:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801e194:	7a73      	ldrb	r3, [r6, #9]
 801e196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionRU864GetPhyParam( &getPhy );
 801e19a:	a80a      	add	r0, sp, #40	; 0x28
 801e19c:	f7ff fcb0 	bl	801db00 <RegionRU864GetPhyParam>

    linkAdrVerifyParams.Status = status;
 801e1a0:	f88d a008 	strb.w	sl, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801e1a4:	7ab3      	ldrb	r3, [r6, #10]
 801e1a6:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801e1aa:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801e1ae:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801e1b2:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801e1b6:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801e1ba:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801e1be:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801e1c2:	f996 300b 	ldrsb.w	r3, [r6, #11]
 801e1c6:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801e1ca:	f996 300c 	ldrsb.w	r3, [r6, #12]
 801e1ce:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801e1d2:	f996 300d 	ldrsb.w	r3, [r6, #13]
 801e1d6:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = RU864_MAX_NB_CHANNELS;
 801e1da:	2308      	movs	r3, #8
 801e1dc:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801e1e0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801e1e4:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801e1e6:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = RU864_TX_MAX_DATARATE;
 801e1ea:	2307      	movs	r3, #7
 801e1ec:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801e1f0:	4a19      	ldr	r2, [pc, #100]	; (801e258 <RegionRU864LinkAdrReq+0x180>)
 801e1f2:	6812      	ldr	r2, [r2, #0]
 801e1f4:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = RU864_MIN_TX_POWER;
 801e1f6:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = RU864_MAX_TX_POWER;
 801e1fa:	2300      	movs	r3, #0
 801e1fc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801e200:	6833      	ldr	r3, [r6, #0]
 801e202:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801e204:	ab0c      	add	r3, sp, #48	; 0x30
 801e206:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801e20a:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 801e20e:	a801      	add	r0, sp, #4
 801e210:	f7fd f874 	bl	801b2fc <RegionCommonLinkAdrReqVerifyParams>
 801e214:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801e216:	2807      	cmp	r0, #7
 801e218:	d010      	beq.n	801e23c <RegionRU864LinkAdrReq+0x164>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801e21a:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801e21e:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 801e222:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801e226:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 801e22a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801e22e:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 801e230:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e232:	701d      	strb	r5, [r3, #0]

#endif /* REGION_RU864 */
    return status;
}
 801e234:	4620      	mov	r0, r4
 801e236:	b00e      	add	sp, #56	; 0x38
 801e238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801e23c:	4e06      	ldr	r6, [pc, #24]	; (801e258 <RegionRU864LinkAdrReq+0x180>)
 801e23e:	6830      	ldr	r0, [r6, #0]
 801e240:	220c      	movs	r2, #12
 801e242:	2100      	movs	r1, #0
 801e244:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801e248:	f001 fe53 	bl	801fef2 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801e24c:	6833      	ldr	r3, [r6, #0]
 801e24e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801e252:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 801e256:	e7e0      	b.n	801e21a <RegionRU864LinkAdrReq+0x142>
 801e258:	20001b94 	.word	0x20001b94

0801e25c <RegionRU864RxParamSetupReq>:

uint8_t RegionRU864RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801e25c:	b538      	push	{r3, r4, r5, lr}
 801e25e:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_RU864 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801e260:	6840      	ldr	r0, [r0, #4]
 801e262:	f7ff fc07 	bl	801da74 <VerifyRfFreq>
 801e266:	b1a0      	cbz	r0, 801e292 <RegionRU864RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 801e268:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, RU864_RX_MIN_DATARATE, RU864_RX_MAX_DATARATE ) == false )
 801e26a:	2207      	movs	r2, #7
 801e26c:	2100      	movs	r1, #0
 801e26e:	f994 0000 	ldrsb.w	r0, [r4]
 801e272:	f7fc ff04 	bl	801b07e <RegionCommonValueInRange>
 801e276:	b908      	cbnz	r0, 801e27c <RegionRU864RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 801e278:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, RU864_MIN_RX1_DR_OFFSET, RU864_MAX_RX1_DR_OFFSET ) == false )
 801e27c:	2205      	movs	r2, #5
 801e27e:	2100      	movs	r1, #0
 801e280:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801e284:	f7fc fefb 	bl	801b07e <RegionCommonValueInRange>
 801e288:	b908      	cbnz	r0, 801e28e <RegionRU864RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801e28a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_RU864 */
    return status;
}
 801e28e:	4628      	mov	r0, r5
 801e290:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 801e292:	2506      	movs	r5, #6
 801e294:	e7e9      	b.n	801e26a <RegionRU864RxParamSetupReq+0xe>

0801e296 <RegionRU864TxParamSetupReq>:

int8_t RegionRU864TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 801e296:	f04f 30ff 	mov.w	r0, #4294967295
 801e29a:	4770      	bx	lr

0801e29c <RegionRU864DlChannelReq>:

int8_t RegionRU864DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801e29c:	b510      	push	{r4, lr}
 801e29e:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_RU864 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 801e2a0:	6840      	ldr	r0, [r0, #4]
 801e2a2:	f7ff fbe7 	bl	801da74 <VerifyRfFreq>
 801e2a6:	b170      	cbz	r0, 801e2c6 <RegionRU864DlChannelReq+0x2a>
    uint8_t status = 0x03;
 801e2a8:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801e2aa:	4b0b      	ldr	r3, [pc, #44]	; (801e2d8 <RegionRU864DlChannelReq+0x3c>)
 801e2ac:	681a      	ldr	r2, [r3, #0]
 801e2ae:	7823      	ldrb	r3, [r4, #0]
 801e2b0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801e2b4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801e2b8:	b909      	cbnz	r1, 801e2be <RegionRU864DlChannelReq+0x22>
    {
        status &= 0xFD;
 801e2ba:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801e2be:	2803      	cmp	r0, #3
 801e2c0:	d003      	beq.n	801e2ca <RegionRU864DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_RU864 */
    return status;
}
 801e2c2:	b240      	sxtb	r0, r0
 801e2c4:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 801e2c6:	2002      	movs	r0, #2
 801e2c8:	e7ef      	b.n	801e2aa <RegionRU864DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801e2ca:	6861      	ldr	r1, [r4, #4]
 801e2cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e2d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e2d4:	6059      	str	r1, [r3, #4]
 801e2d6:	e7f4      	b.n	801e2c2 <RegionRU864DlChannelReq+0x26>
 801e2d8:	20001b94 	.word	0x20001b94

0801e2dc <RegionRU864AlternateDr>:
#if defined( REGION_RU864 )
    return currentDr;
#else
    return -1;
#endif /* REGION_RU864 */
}
 801e2dc:	4770      	bx	lr
	...

0801e2e0 <RegionRU864NextChannel>:

LoRaMacStatus_t RegionRU864NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801e2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2e2:	b095      	sub	sp, #84	; 0x54
 801e2e4:	4604      	mov	r4, r0
 801e2e6:	460f      	mov	r7, r1
 801e2e8:	4616      	mov	r6, r2
 801e2ea:	461d      	mov	r5, r3
#if defined( REGION_RU864 )
    uint8_t nbEnabledChannels = 0;
 801e2ec:	2100      	movs	r1, #0
 801e2ee:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    uint8_t nbRestrictedChannels = 0;
 801e2f2:	f88d 104e 	strb.w	r1, [sp, #78]	; 0x4e
    uint8_t enabledChannels[RU864_MAX_NB_CHANNELS] = { 0 };
 801e2f6:	9111      	str	r1, [sp, #68]	; 0x44
 801e2f8:	9112      	str	r1, [sp, #72]	; 0x48
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = RU864_JOIN_CHANNELS;
 801e2fa:	2303      	movs	r3, #3
 801e2fc:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801e300:	4b32      	ldr	r3, [pc, #200]	; (801e3cc <RegionRU864NextChannel+0xec>)
 801e302:	6818      	ldr	r0, [r3, #0]
 801e304:	2201      	movs	r2, #1
 801e306:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801e30a:	f7fc ff14 	bl	801b136 <RegionCommonCountChannels>
 801e30e:	b938      	cbnz	r0, 801e320 <RegionRU864NextChannel+0x40>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 801e310:	4b2e      	ldr	r3, [pc, #184]	; (801e3cc <RegionRU864NextChannel+0xec>)
 801e312:	681a      	ldr	r2, [r3, #0]
 801e314:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801e318:	f043 0303 	orr.w	r3, r3, #3
 801e31c:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801e320:	7a63      	ldrb	r3, [r4, #9]
 801e322:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801e326:	7a23      	ldrb	r3, [r4, #8]
 801e328:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801e32c:	4b27      	ldr	r3, [pc, #156]	; (801e3cc <RegionRU864NextChannel+0xec>)
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	f503 7258 	add.w	r2, r3, #864	; 0x360
 801e334:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801e336:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801e338:	4b25      	ldr	r3, [pc, #148]	; (801e3d0 <RegionRU864NextChannel+0xf0>)
 801e33a:	681b      	ldr	r3, [r3, #0]
 801e33c:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = RU864_MAX_NB_CHANNELS;
 801e33e:	2308      	movs	r3, #8
 801e340:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 801e344:	f10d 030a 	add.w	r3, sp, #10
 801e348:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801e34a:	6823      	ldr	r3, [r4, #0]
 801e34c:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801e34e:	6863      	ldr	r3, [r4, #4]
 801e350:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801e352:	7aa3      	ldrb	r3, [r4, #10]
 801e354:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = RU864_MAX_NB_BANDS;
 801e358:	2301      	movs	r3, #1
 801e35a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801e35e:	ab0c      	add	r3, sp, #48	; 0x30
 801e360:	6921      	ldr	r1, [r4, #16]
 801e362:	68e0      	ldr	r0, [r4, #12]
 801e364:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801e368:	7d23      	ldrb	r3, [r4, #20]
 801e36a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801e36e:	8ae1      	ldrh	r1, [r4, #22]
 801e370:	f994 0008 	ldrsb.w	r0, [r4, #8]
 801e374:	f7ff fb92 	bl	801da9c <GetTimeOnAir>
 801e378:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801e37a:	ab03      	add	r3, sp, #12
 801e37c:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801e37e:	9601      	str	r6, [sp, #4]
 801e380:	f10d 034e 	add.w	r3, sp, #78	; 0x4e
 801e384:	9300      	str	r3, [sp, #0]
 801e386:	f10d 034f 	add.w	r3, sp, #79	; 0x4f
 801e38a:	aa11      	add	r2, sp, #68	; 0x44
 801e38c:	4629      	mov	r1, r5
 801e38e:	a809      	add	r0, sp, #36	; 0x24
 801e390:	f7fd f8c4 	bl	801b51c <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801e394:	4604      	mov	r4, r0
 801e396:	b120      	cbz	r0, 801e3a2 <RegionRU864NextChannel+0xc2>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801e398:	280c      	cmp	r0, #12
 801e39a:	d00d      	beq.n	801e3b8 <RegionRU864NextChannel+0xd8>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_RU864 */
}
 801e39c:	4620      	mov	r0, r4
 801e39e:	b015      	add	sp, #84	; 0x54
 801e3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801e3a2:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 801e3a6:	3901      	subs	r1, #1
 801e3a8:	f001 fd80 	bl	801feac <randr>
 801e3ac:	ab14      	add	r3, sp, #80	; 0x50
 801e3ae:	4418      	add	r0, r3
 801e3b0:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
 801e3b4:	703b      	strb	r3, [r7, #0]
 801e3b6:	e7f1      	b.n	801e39c <RegionRU864NextChannel+0xbc>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 801e3b8:	4b04      	ldr	r3, [pc, #16]	; (801e3cc <RegionRU864NextChannel+0xec>)
 801e3ba:	681a      	ldr	r2, [r3, #0]
 801e3bc:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801e3c0:	f043 0303 	orr.w	r3, r3, #3
 801e3c4:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 801e3c8:	e7e8      	b.n	801e39c <RegionRU864NextChannel+0xbc>
 801e3ca:	bf00      	nop
 801e3cc:	20001b94 	.word	0x20001b94
 801e3d0:	20001b90 	.word	0x20001b90

0801e3d4 <RegionRU864ChannelAdd>:

LoRaMacStatus_t RegionRU864ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801e3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_RU864 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 801e3d6:	7905      	ldrb	r5, [r0, #4]

    if( id < RU864_NUMB_DEFAULT_CHANNELS )
 801e3d8:	2d01      	cmp	r5, #1
 801e3da:	d94b      	bls.n	801e474 <RegionRU864ChannelAdd+0xa0>
 801e3dc:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= RU864_MAX_NB_CHANNELS )
 801e3de:	2d07      	cmp	r5, #7
 801e3e0:	d84a      	bhi.n	801e478 <RegionRU864ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE ) == false )
 801e3e2:	6803      	ldr	r3, [r0, #0]
 801e3e4:	7a18      	ldrb	r0, [r3, #8]
 801e3e6:	f340 0003 	sbfx	r0, r0, #0, #4
 801e3ea:	2207      	movs	r2, #7
 801e3ec:	2100      	movs	r1, #0
 801e3ee:	b240      	sxtb	r0, r0
 801e3f0:	f7fc fe45 	bl	801b07e <RegionCommonValueInRange>
 801e3f4:	2800      	cmp	r0, #0
 801e3f6:	d039      	beq.n	801e46c <RegionRU864ChannelAdd+0x98>
    bool drInvalid = false;
 801e3f8:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE ) == false )
 801e3fa:	6823      	ldr	r3, [r4, #0]
 801e3fc:	7a18      	ldrb	r0, [r3, #8]
 801e3fe:	f340 1003 	sbfx	r0, r0, #4, #4
 801e402:	2207      	movs	r2, #7
 801e404:	2100      	movs	r1, #0
 801e406:	b240      	sxtb	r0, r0
 801e408:	f7fc fe39 	bl	801b07e <RegionCommonValueInRange>
 801e40c:	b900      	cbnz	r0, 801e410 <RegionRU864ChannelAdd+0x3c>
    {
        drInvalid = true;
 801e40e:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801e410:	6821      	ldr	r1, [r4, #0]
 801e412:	7a0b      	ldrb	r3, [r1, #8]
 801e414:	f343 0203 	sbfx	r2, r3, #0, #4
 801e418:	b252      	sxtb	r2, r2
 801e41a:	f343 1303 	sbfx	r3, r3, #4, #4
 801e41e:	b25b      	sxtb	r3, r3
 801e420:	429a      	cmp	r2, r3
 801e422:	dd00      	ble.n	801e426 <RegionRU864ChannelAdd+0x52>
    {
        drInvalid = true;
 801e424:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 801e426:	6808      	ldr	r0, [r1, #0]
 801e428:	f7ff fb24 	bl	801da74 <VerifyRfFreq>
 801e42c:	b300      	cbz	r0, 801e470 <RegionRU864ChannelAdd+0x9c>
    bool freqInvalid = false;
 801e42e:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801e430:	b106      	cbz	r6, 801e434 <RegionRU864ChannelAdd+0x60>
 801e432:	bb1b      	cbnz	r3, 801e47c <RegionRU864ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 801e434:	bb26      	cbnz	r6, 801e480 <RegionRU864ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 801e436:	bb2b      	cbnz	r3, 801e484 <RegionRU864ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801e438:	4f13      	ldr	r7, [pc, #76]	; (801e488 <RegionRU864ChannelAdd+0xb4>)
 801e43a:	683b      	ldr	r3, [r7, #0]
 801e43c:	006e      	lsls	r6, r5, #1
 801e43e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801e442:	220c      	movs	r2, #12
 801e444:	6821      	ldr	r1, [r4, #0]
 801e446:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801e44a:	f001 fd3c 	bl	801fec6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 801e44e:	683a      	ldr	r2, [r7, #0]
 801e450:	442e      	add	r6, r5
 801e452:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e456:	2000      	movs	r0, #0
 801e458:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 801e45a:	2301      	movs	r3, #1
 801e45c:	fa03 f505 	lsl.w	r5, r3, r5
 801e460:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801e464:	431d      	orrs	r5, r3
 801e466:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 801e46a:	e006      	b.n	801e47a <RegionRU864ChannelAdd+0xa6>
        drInvalid = true;
 801e46c:	2601      	movs	r6, #1
 801e46e:	e7c4      	b.n	801e3fa <RegionRU864ChannelAdd+0x26>
            freqInvalid = true;
 801e470:	2301      	movs	r3, #1
 801e472:	e7dd      	b.n	801e430 <RegionRU864ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801e474:	2006      	movs	r0, #6
 801e476:	e000      	b.n	801e47a <RegionRU864ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801e478:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_RU864 */
}
 801e47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801e47c:	2006      	movs	r0, #6
 801e47e:	e7fc      	b.n	801e47a <RegionRU864ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 801e480:	2005      	movs	r0, #5
 801e482:	e7fa      	b.n	801e47a <RegionRU864ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801e484:	2004      	movs	r0, #4
 801e486:	e7f8      	b.n	801e47a <RegionRU864ChannelAdd+0xa6>
 801e488:	20001b94 	.word	0x20001b94

0801e48c <RegionRU864ChannelsRemove>:

bool RegionRU864ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_RU864 )
    uint8_t id = channelRemove->ChannelId;
 801e48c:	7801      	ldrb	r1, [r0, #0]

    if( id < RU864_NUMB_DEFAULT_CHANNELS )
 801e48e:	2901      	cmp	r1, #1
 801e490:	d911      	bls.n	801e4b6 <RegionRU864ChannelsRemove+0x2a>
{
 801e492:	b510      	push	{r4, lr}
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801e494:	4b09      	ldr	r3, [pc, #36]	; (801e4bc <RegionRU864ChannelsRemove+0x30>)
 801e496:	6818      	ldr	r0, [r3, #0]
 801e498:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 801e49c:	009c      	lsls	r4, r3, #2
 801e49e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e4a2:	2200      	movs	r2, #0
 801e4a4:	5102      	str	r2, [r0, r4]
 801e4a6:	605a      	str	r2, [r3, #4]
 801e4a8:	609a      	str	r2, [r3, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, RU864_MAX_NB_CHANNELS );
 801e4aa:	2208      	movs	r2, #8
 801e4ac:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801e4b0:	f7fc fe27 	bl	801b102 <RegionCommonChanDisable>
#else
    return false;
#endif /* REGION_RU864 */
}
 801e4b4:	bd10      	pop	{r4, pc}
        return false;
 801e4b6:	2000      	movs	r0, #0
}
 801e4b8:	4770      	bx	lr
 801e4ba:	bf00      	nop
 801e4bc:	20001b94 	.word	0x20001b94

0801e4c0 <RegionRU864ApplyCFList>:
{
 801e4c0:	b570      	push	{r4, r5, r6, lr}
 801e4c2:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801e4c4:	2350      	movs	r3, #80	; 0x50
 801e4c6:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 801e4ca:	7903      	ldrb	r3, [r0, #4]
 801e4cc:	2b10      	cmp	r3, #16
 801e4ce:	d135      	bne.n	801e53c <RegionRU864ApplyCFList+0x7c>
 801e4d0:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 801e4d2:	6803      	ldr	r3, [r0, #0]
 801e4d4:	7bdd      	ldrb	r5, [r3, #15]
 801e4d6:	2d00      	cmp	r5, #0
 801e4d8:	d130      	bne.n	801e53c <RegionRU864ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = RU864_NUMB_DEFAULT_CHANNELS; chanIdx < RU864_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801e4da:	2402      	movs	r4, #2
 801e4dc:	e00e      	b.n	801e4fc <RegionRU864ApplyCFList+0x3c>
            newChannel.Frequency = 0;
 801e4de:	2300      	movs	r3, #0
 801e4e0:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 801e4e2:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 801e4e6:	9304      	str	r3, [sp, #16]
 801e4e8:	e01d      	b.n	801e526 <RegionRU864ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 801e4ea:	f88d 4000 	strb.w	r4, [sp]
            RegionRU864ChannelsRemove( &channelRemove );
 801e4ee:	4668      	mov	r0, sp
 801e4f0:	f7ff ffcc 	bl	801e48c <RegionRU864ChannelsRemove>
    for( uint8_t i = 0, chanIdx = RU864_NUMB_DEFAULT_CHANNELS; chanIdx < RU864_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801e4f4:	3503      	adds	r5, #3
 801e4f6:	b2ed      	uxtb	r5, r5
 801e4f8:	3401      	adds	r4, #1
 801e4fa:	b2e4      	uxtb	r4, r4
 801e4fc:	2c07      	cmp	r4, #7
 801e4fe:	d81d      	bhi.n	801e53c <RegionRU864ApplyCFList+0x7c>
        if( chanIdx < ( RU864_NUMB_CHANNELS_CF_LIST + RU864_NUMB_DEFAULT_CHANNELS ) )
 801e500:	2c06      	cmp	r4, #6
 801e502:	d8ec      	bhi.n	801e4de <RegionRU864ApplyCFList+0x1e>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801e504:	6832      	ldr	r2, [r6, #0]
 801e506:	5d53      	ldrb	r3, [r2, r5]
 801e508:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801e50a:	442a      	add	r2, r5
 801e50c:	7851      	ldrb	r1, [r2, #1]
 801e50e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801e512:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801e514:	7892      	ldrb	r2, [r2, #2]
 801e516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 801e51a:	2264      	movs	r2, #100	; 0x64
 801e51c:	fb02 f303 	mul.w	r3, r2, r3
 801e520:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 801e522:	2300      	movs	r3, #0
 801e524:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 801e526:	9b03      	ldr	r3, [sp, #12]
 801e528:	2b00      	cmp	r3, #0
 801e52a:	d0de      	beq.n	801e4ea <RegionRU864ApplyCFList+0x2a>
            channelAdd.NewChannel = &newChannel;
 801e52c:	ab03      	add	r3, sp, #12
 801e52e:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 801e530:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionRU864ChannelAdd( &channelAdd );
 801e534:	a801      	add	r0, sp, #4
 801e536:	f7ff ff4d 	bl	801e3d4 <RegionRU864ChannelAdd>
 801e53a:	e7db      	b.n	801e4f4 <RegionRU864ApplyCFList+0x34>
}
 801e53c:	b006      	add	sp, #24
 801e53e:	bd70      	pop	{r4, r5, r6, pc}

0801e540 <RegionRU864NewChannelReq>:
{
 801e540:	b500      	push	{lr}
 801e542:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 801e544:	6803      	ldr	r3, [r0, #0]
 801e546:	681a      	ldr	r2, [r3, #0]
 801e548:	b952      	cbnz	r2, 801e560 <RegionRU864NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801e54a:	7903      	ldrb	r3, [r0, #4]
 801e54c:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionRU864ChannelsRemove( &channelRemove ) == false )
 801e550:	a801      	add	r0, sp, #4
 801e552:	f7ff ff9b 	bl	801e48c <RegionRU864ChannelsRemove>
 801e556:	b1d0      	cbz	r0, 801e58e <RegionRU864NewChannelReq+0x4e>
    uint8_t status = 0x03;
 801e558:	2003      	movs	r0, #3
}
 801e55a:	b005      	add	sp, #20
 801e55c:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801e560:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801e562:	7903      	ldrb	r3, [r0, #4]
 801e564:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionRU864ChannelAdd( &channelAdd ) )
 801e568:	a802      	add	r0, sp, #8
 801e56a:	f7ff ff33 	bl	801e3d4 <RegionRU864ChannelAdd>
 801e56e:	2806      	cmp	r0, #6
 801e570:	d80b      	bhi.n	801e58a <RegionRU864NewChannelReq+0x4a>
 801e572:	e8df f000 	tbb	[pc, r0]
 801e576:	0a04      	.short	0x0a04
 801e578:	060e0a0a 	.word	0x060e0a0a
 801e57c:	08          	.byte	0x08
 801e57d:	00          	.byte	0x00
 801e57e:	2003      	movs	r0, #3
 801e580:	e7eb      	b.n	801e55a <RegionRU864NewChannelReq+0x1a>
                status &= 0xFD;
 801e582:	2001      	movs	r0, #1
                break;
 801e584:	e7e9      	b.n	801e55a <RegionRU864NewChannelReq+0x1a>
                status &= 0xFC;
 801e586:	2000      	movs	r0, #0
                break;
 801e588:	e7e7      	b.n	801e55a <RegionRU864NewChannelReq+0x1a>
                status &= 0xFC;
 801e58a:	2000      	movs	r0, #0
                break;
 801e58c:	e7e5      	b.n	801e55a <RegionRU864NewChannelReq+0x1a>
            status &= 0xFC;
 801e58e:	2000      	movs	r0, #0
 801e590:	e7e3      	b.n	801e55a <RegionRU864NewChannelReq+0x1a>
                status &= 0xFE;
 801e592:	2002      	movs	r0, #2
 801e594:	e7e1      	b.n	801e55a <RegionRU864NewChannelReq+0x1a>
	...

0801e598 <RegionRU864SetContinuousWave>:

void RegionRU864SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801e598:	b538      	push	{r3, r4, r5, lr}
 801e59a:	4604      	mov	r4, r0
#if defined( REGION_RU864 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801e59c:	4b12      	ldr	r3, [pc, #72]	; (801e5e8 <RegionRU864SetContinuousWave+0x50>)
 801e59e:	6819      	ldr	r1, [r3, #0]
 801e5a0:	4d12      	ldr	r5, [pc, #72]	; (801e5ec <RegionRU864SetContinuousWave+0x54>)
 801e5a2:	682b      	ldr	r3, [r5, #0]
 801e5a4:	7802      	ldrb	r2, [r0, #0]
 801e5a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e5aa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801e5ae:	7a53      	ldrb	r3, [r2, #9]
 801e5b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e5b4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e5b8:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801e5bc:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801e5c0:	f7fd f813 	bl	801b5ea <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801e5c4:	682a      	ldr	r2, [r5, #0]
 801e5c6:	7823      	ldrb	r3, [r4, #0]
 801e5c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e5cc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801e5d0:	68a2      	ldr	r2, [r4, #8]
 801e5d2:	6861      	ldr	r1, [r4, #4]
 801e5d4:	f7fc ff26 	bl	801b424 <RegionCommonComputeTxPower>
 801e5d8:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801e5da:	4b05      	ldr	r3, [pc, #20]	; (801e5f0 <RegionRU864SetContinuousWave+0x58>)
 801e5dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e5de:	89a2      	ldrh	r2, [r4, #12]
 801e5e0:	4628      	mov	r0, r5
 801e5e2:	4798      	blx	r3
#endif /* REGION_RU864 */
}
 801e5e4:	bd38      	pop	{r3, r4, r5, pc}
 801e5e6:	bf00      	nop
 801e5e8:	20001b90 	.word	0x20001b90
 801e5ec:	20001b94 	.word	0x20001b94
 801e5f0:	08028984 	.word	0x08028984

0801e5f4 <RegionRU864ApplyDrOffset>:

uint8_t RegionRU864ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_RU864 )
    int8_t datarate = dr - drOffset;
 801e5f4:	1a88      	subs	r0, r1, r2
 801e5f6:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 801e5f8:	2800      	cmp	r0, #0
 801e5fa:	db01      	blt.n	801e600 <RegionRU864ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_RU864 */
}
 801e5fc:	b2c0      	uxtb	r0, r0
 801e5fe:	4770      	bx	lr
        datarate = DR_0;
 801e600:	2000      	movs	r0, #0
 801e602:	e7fb      	b.n	801e5fc <RegionRU864ApplyDrOffset+0x8>

0801e604 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 801e604:	b510      	push	{r4, lr}
 801e606:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801e608:	4b10      	ldr	r3, [pc, #64]	; (801e64c <VerifyRfFreq+0x48>)
 801e60a:	6a1b      	ldr	r3, [r3, #32]
 801e60c:	4798      	blx	r3
 801e60e:	b1c8      	cbz	r0, 801e644 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 801e610:	4b0f      	ldr	r3, [pc, #60]	; (801e650 <VerifyRfFreq+0x4c>)
 801e612:	4423      	add	r3, r4
 801e614:	4a0f      	ldr	r2, [pc, #60]	; (801e654 <VerifyRfFreq+0x50>)
 801e616:	4293      	cmp	r3, r2
 801e618:	d813      	bhi.n	801e642 <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 801e61a:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 801e61e:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 801e622:	f202 7245 	addw	r2, r2, #1861	; 0x745
 801e626:	fba2 1203 	umull	r1, r2, r2, r3
 801e62a:	0c92      	lsrs	r2, r2, #18
 801e62c:	490a      	ldr	r1, [pc, #40]	; (801e658 <VerifyRfFreq+0x54>)
 801e62e:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801e632:	b942      	cbnz	r2, 801e646 <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801e634:	4b09      	ldr	r3, [pc, #36]	; (801e65c <VerifyRfFreq+0x58>)
 801e636:	4423      	add	r3, r4
 801e638:	4a09      	ldr	r2, [pc, #36]	; (801e660 <VerifyRfFreq+0x5c>)
 801e63a:	4293      	cmp	r3, r2
 801e63c:	d902      	bls.n	801e644 <VerifyRfFreq+0x40>
    {
        return false;
 801e63e:	2000      	movs	r0, #0
 801e640:	e000      	b.n	801e644 <VerifyRfFreq+0x40>
        return false;
 801e642:	2000      	movs	r0, #0
    }
    return true;
}
 801e644:	bd10      	pop	{r4, pc}
        return false;
 801e646:	2000      	movs	r0, #0
 801e648:	e7fc      	b.n	801e644 <VerifyRfFreq+0x40>
 801e64a:	bf00      	nop
 801e64c:	08028984 	.word	0x08028984
 801e650:	c8f78f60 	.word	0xc8f78f60
 801e654:	00401640 	.word	0x00401640
 801e658:	000927c0 	.word	0x000927c0
 801e65c:	ca37fea0 	.word	0xca37fea0
 801e660:	01808580 	.word	0x01808580

0801e664 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801e664:	b570      	push	{r4, r5, r6, lr}
 801e666:	b084      	sub	sp, #16
 801e668:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 801e66a:	4b0a      	ldr	r3, [pc, #40]	; (801e694 <GetTimeOnAir+0x30>)
 801e66c:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801e66e:	490a      	ldr	r1, [pc, #40]	; (801e698 <GetTimeOnAir+0x34>)
 801e670:	f7fc ffc0 	bl	801b5f4 <RegionCommonGetBandwidth>
 801e674:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801e676:	4b09      	ldr	r3, [pc, #36]	; (801e69c <GetTimeOnAir+0x38>)
 801e678:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801e67a:	2001      	movs	r0, #1
 801e67c:	9003      	str	r0, [sp, #12]
 801e67e:	b2e4      	uxtb	r4, r4
 801e680:	9402      	str	r4, [sp, #8]
 801e682:	2200      	movs	r2, #0
 801e684:	9201      	str	r2, [sp, #4]
 801e686:	2208      	movs	r2, #8
 801e688:	9200      	str	r2, [sp, #0]
 801e68a:	4603      	mov	r3, r0
 801e68c:	4632      	mov	r2, r6
 801e68e:	47a8      	blx	r5
}
 801e690:	b004      	add	sp, #16
 801e692:	bd70      	pop	{r4, r5, r6, pc}
 801e694:	080285c4 	.word	0x080285c4
 801e698:	08028570 	.word	0x08028570
 801e69c:	08028984 	.word	0x08028984

0801e6a0 <LimitTxPower>:
{
 801e6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6a2:	4606      	mov	r6, r0
 801e6a4:	4615      	mov	r5, r2
 801e6a6:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 801e6a8:	f7fc ff9f 	bl	801b5ea <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 801e6ac:	2d04      	cmp	r5, #4
 801e6ae:	d105      	bne.n	801e6bc <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 801e6b0:	4634      	mov	r4, r6
 801e6b2:	2e02      	cmp	r6, #2
 801e6b4:	bfb8      	it	lt
 801e6b6:	2402      	movlt	r4, #2
}
 801e6b8:	4620      	mov	r0, r4
 801e6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e6bc:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801e6be:	2204      	movs	r2, #4
 801e6c0:	2100      	movs	r1, #0
 801e6c2:	4638      	mov	r0, r7
 801e6c4:	f7fc fd37 	bl	801b136 <RegionCommonCountChannels>
 801e6c8:	2831      	cmp	r0, #49	; 0x31
 801e6ca:	d8f5      	bhi.n	801e6b8 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801e6cc:	4634      	mov	r4, r6
 801e6ce:	2e05      	cmp	r6, #5
 801e6d0:	bfb8      	it	lt
 801e6d2:	2405      	movlt	r4, #5
 801e6d4:	e7f0      	b.n	801e6b8 <LimitTxPower+0x18>
	...

0801e6d8 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801e6d8:	b500      	push	{lr}
 801e6da:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 801e6dc:	2300      	movs	r3, #0
 801e6de:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 801e6e0:	7803      	ldrb	r3, [r0, #0]
 801e6e2:	3b01      	subs	r3, #1
 801e6e4:	2b38      	cmp	r3, #56	; 0x38
 801e6e6:	d820      	bhi.n	801e72a <RegionUS915GetPhyParam+0x52>
 801e6e8:	e8df f003 	tbb	[pc, r3]
 801e6ec:	1f1f1f1d 	.word	0x1f1f1f1d
 801e6f0:	1f1f1f1f 	.word	0x1f1f1f1f
 801e6f4:	3e3b1f1f 	.word	0x3e3b1f1f
 801e6f8:	4d1f4741 	.word	0x4d1f4741
 801e6fc:	5d595551 	.word	0x5d595551
 801e700:	6e1f6561 	.word	0x6e1f6561
 801e704:	807a7471 	.word	0x807a7471
 801e708:	871f1f83 	.word	0x871f1f83
 801e70c:	1f1f238a 	.word	0x1f1f238a
 801e710:	1f1f1f1f 	.word	0x1f1f1f1f
 801e714:	1f1f1f1f 	.word	0x1f1f1f1f
 801e718:	8d1f1f1f 	.word	0x8d1f1f1f
 801e71c:	1fa19e94 	.word	0x1fa19e94
 801e720:	b1aeaba4 	.word	0xb1aeaba4
 801e724:	b7          	.byte	0xb7
 801e725:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801e726:	2308      	movs	r3, #8
 801e728:	9304      	str	r3, [sp, #16]
        }
    }

#endif /* REGION_US915 */
    return phyParam;
}
 801e72a:	9804      	ldr	r0, [sp, #16]
 801e72c:	b007      	add	sp, #28
 801e72e:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 801e732:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801e736:	f88d 3004 	strb.w	r3, [sp, #4]
 801e73a:	2304      	movs	r3, #4
 801e73c:	f88d 3005 	strb.w	r3, [sp, #5]
 801e740:	2300      	movs	r3, #0
 801e742:	f88d 3006 	strb.w	r3, [sp, #6]
 801e746:	2348      	movs	r3, #72	; 0x48
 801e748:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801e74c:	4b46      	ldr	r3, [pc, #280]	; (801e868 <RegionUS915GetPhyParam+0x190>)
 801e74e:	681b      	ldr	r3, [r3, #0]
 801e750:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801e754:	9202      	str	r2, [sp, #8]
 801e756:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801e758:	a801      	add	r0, sp, #4
 801e75a:	f7fc ff27 	bl	801b5ac <RegionCommonGetNextLowerTxDr>
 801e75e:	9004      	str	r0, [sp, #16]
            break;
 801e760:	e7e3      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801e762:	2340      	movs	r3, #64	; 0x40
 801e764:	9304      	str	r3, [sp, #16]
            break;
 801e766:	e7e0      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801e768:	2320      	movs	r3, #32
 801e76a:	9304      	str	r3, [sp, #16]
            break;
 801e76c:	e7dd      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801e76e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801e772:	4a3e      	ldr	r2, [pc, #248]	; (801e86c <RegionUS915GetPhyParam+0x194>)
 801e774:	5cd3      	ldrb	r3, [r2, r3]
 801e776:	9304      	str	r3, [sp, #16]
            break;
 801e778:	e7d7      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801e77a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801e77e:	4a3c      	ldr	r2, [pc, #240]	; (801e870 <RegionUS915GetPhyParam+0x198>)
 801e780:	5cd3      	ldrb	r3, [r2, r3]
 801e782:	9304      	str	r3, [sp, #16]
            break;
 801e784:	e7d1      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_RX_WINDOW;
 801e786:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801e78a:	9304      	str	r3, [sp, #16]
            break;
 801e78c:	e7cd      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801e78e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801e792:	9304      	str	r3, [sp, #16]
            break;
 801e794:	e7c9      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801e796:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801e79a:	9304      	str	r3, [sp, #16]
            break;
 801e79c:	e7c5      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801e79e:	f241 3388 	movw	r3, #5000	; 0x1388
 801e7a2:	9304      	str	r3, [sp, #16]
            break;
 801e7a4:	e7c1      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801e7a6:	f241 7370 	movw	r3, #6000	; 0x1770
 801e7aa:	9304      	str	r3, [sp, #16]
            break;
 801e7ac:	e7bd      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801e7ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801e7b2:	9304      	str	r3, [sp, #16]
            break;
 801e7b4:	e7b9      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801e7b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801e7ba:	482e      	ldr	r0, [pc, #184]	; (801e874 <RegionUS915GetPhyParam+0x19c>)
 801e7bc:	f001 fb76 	bl	801feac <randr>
 801e7c0:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 801e7c4:	9004      	str	r0, [sp, #16]
            break;
 801e7c6:	e7b0      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_FREQ;
 801e7c8:	4b2b      	ldr	r3, [pc, #172]	; (801e878 <RegionUS915GetPhyParam+0x1a0>)
 801e7ca:	9304      	str	r3, [sp, #16]
            break;
 801e7cc:	e7ad      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_DR;
 801e7ce:	2308      	movs	r3, #8
 801e7d0:	9304      	str	r3, [sp, #16]
            break;
 801e7d2:	e7aa      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801e7d4:	4b24      	ldr	r3, [pc, #144]	; (801e868 <RegionUS915GetPhyParam+0x190>)
 801e7d6:	681b      	ldr	r3, [r3, #0]
 801e7d8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801e7dc:	9304      	str	r3, [sp, #16]
            break;
 801e7de:	e7a4      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801e7e0:	4b21      	ldr	r3, [pc, #132]	; (801e868 <RegionUS915GetPhyParam+0x190>)
 801e7e2:	681b      	ldr	r3, [r3, #0]
 801e7e4:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801e7e8:	9304      	str	r3, [sp, #16]
            break;
 801e7ea:	e79e      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801e7ec:	2348      	movs	r3, #72	; 0x48
 801e7ee:	9304      	str	r3, [sp, #16]
            break;
 801e7f0:	e79b      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Channels = RegionNvmGroup2->Channels;
 801e7f2:	4b1d      	ldr	r3, [pc, #116]	; (801e868 <RegionUS915GetPhyParam+0x190>)
 801e7f4:	681b      	ldr	r3, [r3, #0]
 801e7f6:	9304      	str	r3, [sp, #16]
            break;
 801e7f8:	e797      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801e7fa:	4b20      	ldr	r3, [pc, #128]	; (801e87c <RegionUS915GetPhyParam+0x1a4>)
 801e7fc:	9304      	str	r3, [sp, #16]
            break;
 801e7fe:	e794      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = 0;
 801e800:	2300      	movs	r3, #0
 801e802:	9304      	str	r3, [sp, #16]
            break;
 801e804:	e791      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801e806:	4a1e      	ldr	r2, [pc, #120]	; (801e880 <RegionUS915GetPhyParam+0x1a8>)
 801e808:	491b      	ldr	r1, [pc, #108]	; (801e878 <RegionUS915GetPhyParam+0x1a0>)
 801e80a:	7900      	ldrb	r0, [r0, #4]
 801e80c:	f7fb fd9b 	bl	801a346 <RegionBaseUSCalcDownlinkFrequency>
 801e810:	9004      	str	r0, [sp, #16]
            break;
 801e812:	e78a      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801e814:	2317      	movs	r3, #23
 801e816:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801e81a:	2305      	movs	r3, #5
 801e81c:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801e820:	2303      	movs	r3, #3
 801e822:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 801e826:	e780      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801e828:	2308      	movs	r3, #8
 801e82a:	9304      	str	r3, [sp, #16]
            break;
 801e82c:	e77d      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801e82e:	2308      	movs	r3, #8
 801e830:	9304      	str	r3, [sp, #16]
            break;
 801e832:	e77a      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801e834:	4a12      	ldr	r2, [pc, #72]	; (801e880 <RegionUS915GetPhyParam+0x1a8>)
 801e836:	4910      	ldr	r1, [pc, #64]	; (801e878 <RegionUS915GetPhyParam+0x1a0>)
 801e838:	7900      	ldrb	r0, [r0, #4]
 801e83a:	f7fb fd84 	bl	801a346 <RegionBaseUSCalcDownlinkFrequency>
 801e83e:	9004      	str	r0, [sp, #16]
            break;
 801e840:	e773      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801e842:	2308      	movs	r3, #8
 801e844:	9304      	str	r3, [sp, #16]
            break;
 801e846:	e770      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801e848:	2308      	movs	r3, #8
 801e84a:	9304      	str	r3, [sp, #16]
            break;
 801e84c:	e76d      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801e84e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801e852:	4a0c      	ldr	r2, [pc, #48]	; (801e884 <RegionUS915GetPhyParam+0x1ac>)
 801e854:	5cd3      	ldrb	r3, [r2, r3]
 801e856:	9304      	str	r3, [sp, #16]
            break;
 801e858:	e767      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801e85a:	490b      	ldr	r1, [pc, #44]	; (801e888 <RegionUS915GetPhyParam+0x1b0>)
 801e85c:	f990 0001 	ldrsb.w	r0, [r0, #1]
 801e860:	f7fc fec8 	bl	801b5f4 <RegionCommonGetBandwidth>
 801e864:	9004      	str	r0, [sp, #16]
            break;
 801e866:	e760      	b.n	801e72a <RegionUS915GetPhyParam+0x52>
 801e868:	20001b9c 	.word	0x20001b9c
 801e86c:	080285e4 	.word	0x080285e4
 801e870:	080285d4 	.word	0x080285d4
 801e874:	fffffc18 	.word	0xfffffc18
 801e878:	370870a0 	.word	0x370870a0
 801e87c:	4200999a 	.word	0x4200999a
 801e880:	000927c0 	.word	0x000927c0
 801e884:	080285c4 	.word	0x080285c4
 801e888:	08028570 	.word	0x08028570

0801e88c <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801e88c:	b530      	push	{r4, r5, lr}
 801e88e:	b083      	sub	sp, #12
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801e890:	4b0b      	ldr	r3, [pc, #44]	; (801e8c0 <RegionUS915SetBandTxDone+0x34>)
 801e892:	681d      	ldr	r5, [r3, #0]
 801e894:	4b0b      	ldr	r3, [pc, #44]	; (801e8c4 <RegionUS915SetBandTxDone+0x38>)
 801e896:	681a      	ldr	r2, [r3, #0]
 801e898:	7803      	ldrb	r3, [r0, #0]
 801e89a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e89e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e8a2:	7a5b      	ldrb	r3, [r3, #9]
 801e8a4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 801e8a8:	6903      	ldr	r3, [r0, #16]
 801e8aa:	9300      	str	r3, [sp, #0]
 801e8ac:	68c3      	ldr	r3, [r0, #12]
 801e8ae:	7842      	ldrb	r2, [r0, #1]
 801e8b0:	6881      	ldr	r1, [r0, #8]
 801e8b2:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 801e8b6:	f7fc fc65 	bl	801b184 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 801e8ba:	b003      	add	sp, #12
 801e8bc:	bd30      	pop	{r4, r5, pc}
 801e8be:	bf00      	nop
 801e8c0:	20001b98 	.word	0x20001b98
 801e8c4:	20001b9c 	.word	0x20001b9c

0801e8c8 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801e8c8:	b510      	push	{r4, lr}
 801e8ca:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 801e8cc:	2301      	movs	r3, #1
 801e8ce:	f8ad 3000 	strh.w	r3, [sp]
 801e8d2:	2300      	movs	r3, #0
 801e8d4:	f88d 3002 	strb.w	r3, [sp, #2]
 801e8d8:	9301      	str	r3, [sp, #4]
 801e8da:	9302      	str	r3, [sp, #8]
 801e8dc:	9303      	str	r3, [sp, #12]
 801e8de:	9304      	str	r3, [sp, #16]
 801e8e0:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 801e8e4:	7a04      	ldrb	r4, [r0, #8]
 801e8e6:	b17c      	cbz	r4, 801e908 <RegionUS915InitDefaults+0x40>
 801e8e8:	3c01      	subs	r4, #1
 801e8ea:	b2e4      	uxtb	r4, r4
 801e8ec:	2c01      	cmp	r4, #1
 801e8ee:	f200 8082 	bhi.w	801e9f6 <RegionUS915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801e8f2:	4b42      	ldr	r3, [pc, #264]	; (801e9fc <RegionUS915InitDefaults+0x134>)
 801e8f4:	6818      	ldr	r0, [r3, #0]
 801e8f6:	2206      	movs	r2, #6
 801e8f8:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 801e8fc:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801e900:	f7fc fc2f 	bl	801b162 <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801e904:	2300      	movs	r3, #0
 801e906:	e074      	b.n	801e9f2 <RegionUS915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801e908:	6803      	ldr	r3, [r0, #0]
 801e90a:	2b00      	cmp	r3, #0
 801e90c:	d073      	beq.n	801e9f6 <RegionUS915InitDefaults+0x12e>
 801e90e:	6842      	ldr	r2, [r0, #4]
 801e910:	2a00      	cmp	r2, #0
 801e912:	d070      	beq.n	801e9f6 <RegionUS915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801e914:	493a      	ldr	r1, [pc, #232]	; (801ea00 <RegionUS915InitDefaults+0x138>)
 801e916:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801e918:	4938      	ldr	r1, [pc, #224]	; (801e9fc <RegionUS915InitDefaults+0x134>)
 801e91a:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801e91c:	2200      	movs	r2, #0
 801e91e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801e922:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801e926:	2218      	movs	r2, #24
 801e928:	4669      	mov	r1, sp
 801e92a:	4618      	mov	r0, r3
 801e92c:	f001 facb 	bl	801fec6 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801e930:	e011      	b.n	801e956 <RegionUS915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801e932:	4b32      	ldr	r3, [pc, #200]	; (801e9fc <RegionUS915InitDefaults+0x134>)
 801e934:	681b      	ldr	r3, [r3, #0]
 801e936:	4a33      	ldr	r2, [pc, #204]	; (801ea04 <RegionUS915InitDefaults+0x13c>)
 801e938:	4933      	ldr	r1, [pc, #204]	; (801ea08 <RegionUS915InitDefaults+0x140>)
 801e93a:	fb02 1204 	mla	r2, r2, r4, r1
 801e93e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801e942:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 801e946:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801e94a:	2230      	movs	r2, #48	; 0x30
 801e94c:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 801e94e:	2200      	movs	r2, #0
 801e950:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801e952:	3401      	adds	r4, #1
 801e954:	b2e4      	uxtb	r4, r4
 801e956:	2c3f      	cmp	r4, #63	; 0x3f
 801e958:	d9eb      	bls.n	801e932 <RegionUS915InitDefaults+0x6a>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801e95a:	2340      	movs	r3, #64	; 0x40
 801e95c:	e013      	b.n	801e986 <RegionUS915InitDefaults+0xbe>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801e95e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 801e962:	4a26      	ldr	r2, [pc, #152]	; (801e9fc <RegionUS915InitDefaults+0x134>)
 801e964:	6812      	ldr	r2, [r2, #0]
 801e966:	4c29      	ldr	r4, [pc, #164]	; (801ea0c <RegionUS915InitDefaults+0x144>)
 801e968:	4829      	ldr	r0, [pc, #164]	; (801ea10 <RegionUS915InitDefaults+0x148>)
 801e96a:	fb04 0101 	mla	r1, r4, r1, r0
 801e96e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 801e972:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 801e976:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801e97a:	2144      	movs	r1, #68	; 0x44
 801e97c:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 801e97e:	2100      	movs	r1, #0
 801e980:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801e982:	3301      	adds	r3, #1
 801e984:	b2db      	uxtb	r3, r3
 801e986:	2b47      	cmp	r3, #71	; 0x47
 801e988:	d9e9      	bls.n	801e95e <RegionUS915InitDefaults+0x96>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801e98a:	4c1c      	ldr	r4, [pc, #112]	; (801e9fc <RegionUS915InitDefaults+0x134>)
 801e98c:	6820      	ldr	r0, [r4, #0]
 801e98e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e992:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801e996:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801e99a:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 801e99e:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801e9a2:	23ff      	movs	r3, #255	; 0xff
 801e9a4:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801e9a8:	2300      	movs	r3, #0
 801e9aa:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801e9ae:	2206      	movs	r2, #6
 801e9b0:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 801e9b4:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801e9b8:	f7fc fbd3 	bl	801b162 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801e9bc:	4b10      	ldr	r3, [pc, #64]	; (801ea00 <RegionUS915InitDefaults+0x138>)
 801e9be:	6818      	ldr	r0, [r3, #0]
 801e9c0:	6821      	ldr	r1, [r4, #0]
 801e9c2:	2206      	movs	r2, #6
 801e9c4:	f501 7158 	add.w	r1, r1, #864	; 0x360
 801e9c8:	3090      	adds	r0, #144	; 0x90
 801e9ca:	f7fc fbca 	bl	801b162 <RegionCommonChanMaskCopy>
            break;
 801e9ce:	e012      	b.n	801e9f6 <RegionUS915InitDefaults+0x12e>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801e9d0:	4a0b      	ldr	r2, [pc, #44]	; (801ea00 <RegionUS915InitDefaults+0x138>)
 801e9d2:	6811      	ldr	r1, [r2, #0]
 801e9d4:	4a09      	ldr	r2, [pc, #36]	; (801e9fc <RegionUS915InitDefaults+0x134>)
 801e9d6:	6812      	ldr	r2, [r2, #0]
 801e9d8:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 801e9dc:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 801e9e0:	f103 0048 	add.w	r0, r3, #72	; 0x48
 801e9e4:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 801e9e8:	4022      	ands	r2, r4
 801e9ea:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801e9ee:	3301      	adds	r3, #1
 801e9f0:	b2db      	uxtb	r3, r3
 801e9f2:	2b05      	cmp	r3, #5
 801e9f4:	d9ec      	bls.n	801e9d0 <RegionUS915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 801e9f6:	b006      	add	sp, #24
 801e9f8:	bd10      	pop	{r4, pc}
 801e9fa:	bf00      	nop
 801e9fc:	20001b9c 	.word	0x20001b9c
 801ea00:	20001b98 	.word	0x20001b98
 801ea04:	00030d40 	.word	0x00030d40
 801ea08:	35c80160 	.word	0x35c80160
 801ea0c:	00186a00 	.word	0x00186a00
 801ea10:	35d2afc0 	.word	0x35d2afc0

0801ea14 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801ea14:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 801ea16:	290a      	cmp	r1, #10
 801ea18:	d829      	bhi.n	801ea6e <RegionUS915Verify+0x5a>
 801ea1a:	e8df f001 	tbb	[pc, r1]
 801ea1e:	2806      	.short	0x2806
 801ea20:	0a282828 	.word	0x0a282828
 801ea24:	1e28140a 	.word	0x1e28140a
 801ea28:	1e          	.byte	0x1e
 801ea29:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801ea2a:	6800      	ldr	r0, [r0, #0]
 801ea2c:	f7ff fdea 	bl	801e604 <VerifyRfFreq>
 801ea30:	e01e      	b.n	801ea70 <RegionUS915Verify+0x5c>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801ea32:	2204      	movs	r2, #4
 801ea34:	2100      	movs	r1, #0
 801ea36:	f990 0000 	ldrsb.w	r0, [r0]
 801ea3a:	f7fc fb20 	bl	801b07e <RegionCommonValueInRange>
 801ea3e:	3800      	subs	r0, #0
 801ea40:	bf18      	it	ne
 801ea42:	2001      	movne	r0, #1
 801ea44:	e014      	b.n	801ea70 <RegionUS915Verify+0x5c>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801ea46:	220d      	movs	r2, #13
 801ea48:	2108      	movs	r1, #8
 801ea4a:	f990 0000 	ldrsb.w	r0, [r0]
 801ea4e:	f7fc fb16 	bl	801b07e <RegionCommonValueInRange>
 801ea52:	3800      	subs	r0, #0
 801ea54:	bf18      	it	ne
 801ea56:	2001      	movne	r0, #1
 801ea58:	e00a      	b.n	801ea70 <RegionUS915Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801ea5a:	220e      	movs	r2, #14
 801ea5c:	2100      	movs	r1, #0
 801ea5e:	f990 0000 	ldrsb.w	r0, [r0]
 801ea62:	f7fc fb0c 	bl	801b07e <RegionCommonValueInRange>
 801ea66:	3800      	subs	r0, #0
 801ea68:	bf18      	it	ne
 801ea6a:	2001      	movne	r0, #1
 801ea6c:	e000      	b.n	801ea70 <RegionUS915Verify+0x5c>
{
 801ea6e:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801ea70:	bd08      	pop	{r3, pc}
	...

0801ea74 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801ea74:	7903      	ldrb	r3, [r0, #4]
 801ea76:	2b10      	cmp	r3, #16
 801ea78:	d134      	bne.n	801eae4 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801ea7a:	6803      	ldr	r3, [r0, #0]
 801ea7c:	7bdb      	ldrb	r3, [r3, #15]
 801ea7e:	2b01      	cmp	r3, #1
 801ea80:	d130      	bne.n	801eae4 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801ea82:	2200      	movs	r2, #0
 801ea84:	4613      	mov	r3, r2
 801ea86:	2a04      	cmp	r2, #4
 801ea88:	d82b      	bhi.n	801eae2 <RegionUS915ApplyCFList+0x6e>
{
 801ea8a:	b4f0      	push	{r4, r5, r6, r7}
 801ea8c:	e014      	b.n	801eab8 <RegionUS915ApplyCFList+0x44>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801ea8e:	b2e4      	uxtb	r4, r4
 801ea90:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801ea94:	4c14      	ldr	r4, [pc, #80]	; (801eae8 <RegionUS915ApplyCFList+0x74>)
 801ea96:	6826      	ldr	r6, [r4, #0]
 801ea98:	f501 74d8 	add.w	r4, r1, #432	; 0x1b0
 801ea9c:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 801eaa0:	3148      	adds	r1, #72	; 0x48
 801eaa2:	f836 5011 	ldrh.w	r5, [r6, r1, lsl #1]
 801eaa6:	402c      	ands	r4, r5
 801eaa8:	f826 4011 	strh.w	r4, [r6, r1, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801eaac:	3301      	adds	r3, #1
 801eaae:	b2db      	uxtb	r3, r3
 801eab0:	3202      	adds	r2, #2
 801eab2:	b2d2      	uxtb	r2, r2
 801eab4:	2b04      	cmp	r3, #4
 801eab6:	d812      	bhi.n	801eade <RegionUS915ApplyCFList+0x6a>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801eab8:	6804      	ldr	r4, [r0, #0]
 801eaba:	490c      	ldr	r1, [pc, #48]	; (801eaec <RegionUS915ApplyCFList+0x78>)
 801eabc:	680d      	ldr	r5, [r1, #0]
 801eabe:	4619      	mov	r1, r3
 801eac0:	5ca4      	ldrb	r4, [r4, r2]
 801eac2:	f503 77d8 	add.w	r7, r3, #432	; 0x1b0
 801eac6:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801eaca:	6806      	ldr	r6, [r0, #0]
 801eacc:	4416      	add	r6, r2
 801eace:	7876      	ldrb	r6, [r6, #1]
 801ead0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 801ead4:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        if( chMaskItr == 4 )
 801ead8:	2b04      	cmp	r3, #4
 801eada:	d1db      	bne.n	801ea94 <RegionUS915ApplyCFList+0x20>
 801eadc:	e7d7      	b.n	801ea8e <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 801eade:	bcf0      	pop	{r4, r5, r6, r7}
 801eae0:	4770      	bx	lr
 801eae2:	4770      	bx	lr
 801eae4:	4770      	bx	lr
 801eae6:	bf00      	nop
 801eae8:	20001b98 	.word	0x20001b98
 801eaec:	20001b9c 	.word	0x20001b9c

0801eaf0 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801eaf0:	b570      	push	{r4, r5, r6, lr}
 801eaf2:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 801eaf4:	2204      	movs	r2, #4
 801eaf6:	2100      	movs	r1, #0
 801eaf8:	6800      	ldr	r0, [r0, #0]
 801eafa:	f7fc fb1c 	bl	801b136 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801eafe:	2801      	cmp	r0, #1
 801eb00:	d033      	beq.n	801eb6a <RegionUS915ChanMaskSet+0x7a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 801eb02:	792c      	ldrb	r4, [r5, #4]
 801eb04:	b11c      	cbz	r4, 801eb0e <RegionUS915ChanMaskSet+0x1e>
 801eb06:	2c01      	cmp	r4, #1
 801eb08:	d025      	beq.n	801eb56 <RegionUS915ChanMaskSet+0x66>
 801eb0a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 801eb0c:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801eb0e:	4e18      	ldr	r6, [pc, #96]	; (801eb70 <RegionUS915ChanMaskSet+0x80>)
 801eb10:	6830      	ldr	r0, [r6, #0]
 801eb12:	2206      	movs	r2, #6
 801eb14:	6829      	ldr	r1, [r5, #0]
 801eb16:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801eb1a:	f7fc fb22 	bl	801b162 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801eb1e:	6835      	ldr	r5, [r6, #0]
 801eb20:	f895 3374 	ldrb.w	r3, [r5, #884]	; 0x374
 801eb24:	f8a5 3374 	strh.w	r3, [r5, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801eb28:	2300      	movs	r3, #0
 801eb2a:	f8a5 3376 	strh.w	r3, [r5, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801eb2e:	2c05      	cmp	r4, #5
 801eb30:	d80f      	bhi.n	801eb52 <RegionUS915ChanMaskSet+0x62>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801eb32:	4b10      	ldr	r3, [pc, #64]	; (801eb74 <RegionUS915ChanMaskSet+0x84>)
 801eb34:	681a      	ldr	r2, [r3, #0]
 801eb36:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 801eb3a:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 801eb3e:	f104 0148 	add.w	r1, r4, #72	; 0x48
 801eb42:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 801eb46:	4003      	ands	r3, r0
 801eb48:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801eb4c:	3401      	adds	r4, #1
 801eb4e:	b2e4      	uxtb	r4, r4
 801eb50:	e7ed      	b.n	801eb2e <RegionUS915ChanMaskSet+0x3e>
    return true;
 801eb52:	2001      	movs	r0, #1
 801eb54:	e7da      	b.n	801eb0c <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801eb56:	4b06      	ldr	r3, [pc, #24]	; (801eb70 <RegionUS915ChanMaskSet+0x80>)
 801eb58:	6818      	ldr	r0, [r3, #0]
 801eb5a:	2206      	movs	r2, #6
 801eb5c:	6829      	ldr	r1, [r5, #0]
 801eb5e:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 801eb62:	f7fc fafe 	bl	801b162 <RegionCommonChanMaskCopy>
    return true;
 801eb66:	2001      	movs	r0, #1
            break;
 801eb68:	e7d0      	b.n	801eb0c <RegionUS915ChanMaskSet+0x1c>
        return false;
 801eb6a:	2000      	movs	r0, #0
 801eb6c:	e7ce      	b.n	801eb0c <RegionUS915ChanMaskSet+0x1c>
 801eb6e:	bf00      	nop
 801eb70:	20001b9c 	.word	0x20001b9c
 801eb74:	20001b98 	.word	0x20001b98

0801eb78 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801eb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eb7a:	b083      	sub	sp, #12
 801eb7c:	460e      	mov	r6, r1
 801eb7e:	4617      	mov	r7, r2
 801eb80:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801eb82:	280d      	cmp	r0, #13
 801eb84:	bfa8      	it	ge
 801eb86:	200d      	movge	r0, #13
 801eb88:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801eb8a:	4d0f      	ldr	r5, [pc, #60]	; (801ebc8 <RegionUS915ComputeRxWindowParameters+0x50>)
 801eb8c:	4629      	mov	r1, r5
 801eb8e:	f7fc fd31 	bl	801b5f4 <RegionCommonGetBandwidth>
 801eb92:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801eb94:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801eb98:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801eb9c:	4a0b      	ldr	r2, [pc, #44]	; (801ebcc <RegionUS915ComputeRxWindowParameters+0x54>)
 801eb9e:	5cd0      	ldrb	r0, [r2, r3]
 801eba0:	f7fc fbf8 	bl	801b394 <RegionCommonComputeSymbolTimeLoRa>
 801eba4:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801eba6:	4b0a      	ldr	r3, [pc, #40]	; (801ebd0 <RegionUS915ComputeRxWindowParameters+0x58>)
 801eba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ebaa:	4798      	blx	r3
 801ebac:	4603      	mov	r3, r0
 801ebae:	f104 020c 	add.w	r2, r4, #12
 801ebb2:	9201      	str	r2, [sp, #4]
 801ebb4:	3408      	adds	r4, #8
 801ebb6:	9400      	str	r4, [sp, #0]
 801ebb8:	463a      	mov	r2, r7
 801ebba:	4631      	mov	r1, r6
 801ebbc:	4628      	mov	r0, r5
 801ebbe:	f7fc fbf7 	bl	801b3b0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801ebc2:	b003      	add	sp, #12
 801ebc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ebc6:	bf00      	nop
 801ebc8:	08028570 	.word	0x08028570
 801ebcc:	080285c4 	.word	0x080285c4
 801ebd0:	08028984 	.word	0x08028984

0801ebd4 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801ebd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ebd8:	b08b      	sub	sp, #44	; 0x2c
 801ebda:	4604      	mov	r4, r0
 801ebdc:	460e      	mov	r6, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801ebde:	f990 7001 	ldrsb.w	r7, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801ebe2:	6845      	ldr	r5, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 801ebe4:	4b22      	ldr	r3, [pc, #136]	; (801ec70 <RegionUS915RxConfig+0x9c>)
 801ebe6:	685b      	ldr	r3, [r3, #4]
 801ebe8:	4798      	blx	r3
 801ebea:	2800      	cmp	r0, #0
 801ebec:	d13d      	bne.n	801ec6a <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801ebee:	7ce3      	ldrb	r3, [r4, #19]
 801ebf0:	b933      	cbnz	r3, 801ec00 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801ebf2:	7825      	ldrb	r5, [r4, #0]
 801ebf4:	f005 0507 	and.w	r5, r5, #7
 801ebf8:	4a1e      	ldr	r2, [pc, #120]	; (801ec74 <RegionUS915RxConfig+0xa0>)
 801ebfa:	4b1f      	ldr	r3, [pc, #124]	; (801ec78 <RegionUS915RxConfig+0xa4>)
 801ebfc:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801ec00:	4b1e      	ldr	r3, [pc, #120]	; (801ec7c <RegionUS915RxConfig+0xa8>)
 801ec02:	f913 9007 	ldrsb.w	r9, [r3, r7]

    Radio.SetChannel( frequency );
 801ec06:	f8df 8068 	ldr.w	r8, [pc, #104]	; 801ec70 <RegionUS915RxConfig+0x9c>
 801ec0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ec0e:	4628      	mov	r0, r5
 801ec10:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801ec12:	f8d8 8018 	ldr.w	r8, [r8, #24]
 801ec16:	7ca3      	ldrb	r3, [r4, #18]
 801ec18:	9309      	str	r3, [sp, #36]	; 0x24
 801ec1a:	2001      	movs	r0, #1
 801ec1c:	9008      	str	r0, [sp, #32]
 801ec1e:	2200      	movs	r2, #0
 801ec20:	9207      	str	r2, [sp, #28]
 801ec22:	9206      	str	r2, [sp, #24]
 801ec24:	9205      	str	r2, [sp, #20]
 801ec26:	9204      	str	r2, [sp, #16]
 801ec28:	9203      	str	r2, [sp, #12]
 801ec2a:	8923      	ldrh	r3, [r4, #8]
 801ec2c:	9302      	str	r3, [sp, #8]
 801ec2e:	2308      	movs	r3, #8
 801ec30:	9301      	str	r3, [sp, #4]
 801ec32:	9200      	str	r2, [sp, #0]
 801ec34:	4603      	mov	r3, r0
 801ec36:	464a      	mov	r2, r9
 801ec38:	78a1      	ldrb	r1, [r4, #2]
 801ec3a:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801ec3c:	7c63      	ldrb	r3, [r4, #17]
 801ec3e:	b18b      	cbz	r3, 801ec64 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801ec40:	4b0f      	ldr	r3, [pc, #60]	; (801ec80 <RegionUS915RxConfig+0xac>)
 801ec42:	5dd9      	ldrb	r1, [r3, r7]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801ec44:	4b0a      	ldr	r3, [pc, #40]	; (801ec70 <RegionUS915RxConfig+0x9c>)
 801ec46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ec48:	310d      	adds	r1, #13
 801ec4a:	b2c9      	uxtb	r1, r1
 801ec4c:	2001      	movs	r0, #1
 801ec4e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801ec50:	463a      	mov	r2, r7
 801ec52:	4629      	mov	r1, r5
 801ec54:	7ce0      	ldrb	r0, [r4, #19]
 801ec56:	f7fc fcdf 	bl	801b618 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801ec5a:	7037      	strb	r7, [r6, #0]
    return true;
 801ec5c:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ec5e:	b00b      	add	sp, #44	; 0x2c
 801ec60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801ec64:	4b07      	ldr	r3, [pc, #28]	; (801ec84 <RegionUS915RxConfig+0xb0>)
 801ec66:	5dd9      	ldrb	r1, [r3, r7]
 801ec68:	e7ec      	b.n	801ec44 <RegionUS915RxConfig+0x70>
        return false;
 801ec6a:	2000      	movs	r0, #0
 801ec6c:	e7f7      	b.n	801ec5e <RegionUS915RxConfig+0x8a>
 801ec6e:	bf00      	nop
 801ec70:	08028984 	.word	0x08028984
 801ec74:	000927c0 	.word	0x000927c0
 801ec78:	370870a0 	.word	0x370870a0
 801ec7c:	080285c4 	.word	0x080285c4
 801ec80:	080285d4 	.word	0x080285d4
 801ec84:	080285e4 	.word	0x080285e4

0801ec88 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801ec88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec8c:	b08d      	sub	sp, #52	; 0x34
 801ec8e:	4604      	mov	r4, r0
 801ec90:	910b      	str	r1, [sp, #44]	; 0x2c
 801ec92:	4690      	mov	r8, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801ec94:	f990 2001 	ldrsb.w	r2, [r0, #1]
 801ec98:	4b32      	ldr	r3, [pc, #200]	; (801ed64 <RegionUS915TxConfig+0xdc>)
 801ec9a:	f913 b002 	ldrsb.w	fp, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801ec9e:	4b32      	ldr	r3, [pc, #200]	; (801ed68 <RegionUS915TxConfig+0xe0>)
 801eca0:	6818      	ldr	r0, [r3, #0]
 801eca2:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 801ed74 <RegionUS915TxConfig+0xec>
 801eca6:	f8da 3000 	ldr.w	r3, [sl]
 801ecaa:	7821      	ldrb	r1, [r4, #0]
 801ecac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ecb0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801ecb4:	7a49      	ldrb	r1, [r1, #9]
 801ecb6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ecba:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801ecbe:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801ecc2:	f991 1002 	ldrsb.w	r1, [r1, #2]
 801ecc6:	f994 0002 	ldrsb.w	r0, [r4, #2]
 801ecca:	f7ff fce9 	bl	801e6a0 <LimitTxPower>
 801ecce:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801ecd0:	4926      	ldr	r1, [pc, #152]	; (801ed6c <RegionUS915TxConfig+0xe4>)
 801ecd2:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801ecd6:	f7fc fc8d 	bl	801b5f4 <RegionCommonGetBandwidth>
 801ecda:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801ecdc:	2200      	movs	r2, #0
 801ecde:	4924      	ldr	r1, [pc, #144]	; (801ed70 <RegionUS915TxConfig+0xe8>)
 801ece0:	4630      	mov	r0, r6
 801ece2:	f7fc fb9f 	bl	801b424 <RegionCommonComputeTxPower>
 801ece6:	4607      	mov	r7, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801ece8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801ed78 <RegionUS915TxConfig+0xf0>
 801ecec:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ecf0:	f8da 1000 	ldr.w	r1, [sl]
 801ecf4:	7823      	ldrb	r3, [r4, #0]
 801ecf6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ecfa:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801ecfe:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801ed00:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801ed04:	9308      	str	r3, [sp, #32]
 801ed06:	2200      	movs	r2, #0
 801ed08:	9207      	str	r2, [sp, #28]
 801ed0a:	9206      	str	r2, [sp, #24]
 801ed0c:	9205      	str	r2, [sp, #20]
 801ed0e:	2501      	movs	r5, #1
 801ed10:	9504      	str	r5, [sp, #16]
 801ed12:	9203      	str	r2, [sp, #12]
 801ed14:	2308      	movs	r3, #8
 801ed16:	9302      	str	r3, [sp, #8]
 801ed18:	9501      	str	r5, [sp, #4]
 801ed1a:	f8cd b000 	str.w	fp, [sp]
 801ed1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ed20:	4639      	mov	r1, r7
 801ed22:	4628      	mov	r0, r5
 801ed24:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801ed28:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801ed2a:	f8da 2000 	ldr.w	r2, [sl]
 801ed2e:	7823      	ldrb	r3, [r4, #0]
 801ed30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed34:	f994 1001 	ldrsb.w	r1, [r4, #1]
 801ed38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ed3c:	f7fc fc9c 	bl	801b678 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801ed40:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 801ed44:	7b21      	ldrb	r1, [r4, #12]
 801ed46:	4628      	mov	r0, r5
 801ed48:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801ed4a:	89a1      	ldrh	r1, [r4, #12]
 801ed4c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801ed50:	f7ff fc88 	bl	801e664 <GetTimeOnAir>
 801ed54:	f8c8 0000 	str.w	r0, [r8]

    *txPower = txPowerLimited;
 801ed58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ed5a:	701e      	strb	r6, [r3, #0]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 801ed5c:	4628      	mov	r0, r5
 801ed5e:	b00d      	add	sp, #52	; 0x34
 801ed60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed64:	080285c4 	.word	0x080285c4
 801ed68:	20001b98 	.word	0x20001b98
 801ed6c:	08028570 	.word	0x08028570
 801ed70:	41f00000 	.word	0x41f00000
 801ed74:	20001b9c 	.word	0x20001b9c
 801ed78:	08028984 	.word	0x08028984

0801ed7c <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801ed7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ed80:	b091      	sub	sp, #68	; 0x44
 801ed82:	4606      	mov	r6, r0
 801ed84:	4689      	mov	r9, r1
 801ed86:	4690      	mov	r8, r2
 801ed88:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801ed8a:	2400      	movs	r4, #0
 801ed8c:	940e      	str	r4, [sp, #56]	; 0x38
 801ed8e:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 801ed92:	940b      	str	r4, [sp, #44]	; 0x2c
 801ed94:	940c      	str	r4, [sp, #48]	; 0x30
 801ed96:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801ed98:	4b95      	ldr	r3, [pc, #596]	; (801eff0 <RegionUS915LinkAdrReq+0x274>)
 801ed9a:	6819      	ldr	r1, [r3, #0]
 801ed9c:	2206      	movs	r2, #6
 801ed9e:	f501 7158 	add.w	r1, r1, #864	; 0x360
 801eda2:	a80b      	add	r0, sp, #44	; 0x2c
 801eda4:	f7fc f9dd 	bl	801b162 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801eda8:	e00d      	b.n	801edc6 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801edaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801edae:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 801edb2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 801edb6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 801edba:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801edbe:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 801edc2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801edc6:	7a33      	ldrb	r3, [r6, #8]
 801edc8:	42a3      	cmp	r3, r4
 801edca:	d978      	bls.n	801eebe <RegionUS915LinkAdrReq+0x142>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801edcc:	6870      	ldr	r0, [r6, #4]
 801edce:	a90e      	add	r1, sp, #56	; 0x38
 801edd0:	4420      	add	r0, r4
 801edd2:	f7fc fa77 	bl	801b2c4 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 801edd6:	2800      	cmp	r0, #0
 801edd8:	d071      	beq.n	801eebe <RegionUS915LinkAdrReq+0x142>
        bytesProcessed += nextIndex;
 801edda:	4404      	add	r4, r0
 801eddc:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 801edde:	f89d 503b 	ldrb.w	r5, [sp, #59]	; 0x3b
 801ede2:	2d06      	cmp	r5, #6
 801ede4:	d0e1      	beq.n	801edaa <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801ede6:	2d07      	cmp	r5, #7
 801ede8:	d009      	beq.n	801edfe <RegionUS915LinkAdrReq+0x82>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801edea:	2d05      	cmp	r5, #5
 801edec:	d064      	beq.n	801eeb8 <RegionUS915LinkAdrReq+0x13c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801edee:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801edf2:	aa10      	add	r2, sp, #64	; 0x40
 801edf4:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801edf8:	f825 3c14 	strh.w	r3, [r5, #-20]
 801edfc:	e7e3      	b.n	801edc6 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 801edfe:	2300      	movs	r3, #0
 801ee00:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 801ee04:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 801ee08:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 801ee0c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801ee10:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 801ee14:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801ee18:	e7d5      	b.n	801edc6 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 801ee1a:	aa10      	add	r2, sp, #64	; 0x40
 801ee1c:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 801ee20:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 801ee24:	f062 02ff 	orn	r2, r2, #255	; 0xff
 801ee28:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 801ee2c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801ee30:	4313      	orrs	r3, r2
 801ee32:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 801ee36:	3101      	adds	r1, #1
 801ee38:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 801ee3a:	3501      	adds	r5, #1
 801ee3c:	b2ed      	uxtb	r5, r5
 801ee3e:	2d07      	cmp	r5, #7
 801ee40:	d8c1      	bhi.n	801edc6 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801ee42:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801ee46:	2301      	movs	r3, #1
 801ee48:	40ab      	lsls	r3, r5
 801ee4a:	421a      	tst	r2, r3
 801ee4c:	d011      	beq.n	801ee72 <RegionUS915LinkAdrReq+0xf6>
                    if( ( i % 2 ) == 0 )
 801ee4e:	f015 0f01 	tst.w	r5, #1
 801ee52:	d1e2      	bne.n	801ee1a <RegionUS915LinkAdrReq+0x9e>
                        channelsMask[cntChannelMask] |= 0x00FF;
 801ee54:	aa10      	add	r2, sp, #64	; 0x40
 801ee56:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 801ee5a:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 801ee5e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 801ee62:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 801ee66:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801ee6a:	4313      	orrs	r3, r2
 801ee6c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801ee70:	e7e3      	b.n	801ee3a <RegionUS915LinkAdrReq+0xbe>
                    if( ( i % 2 ) == 0 )
 801ee72:	f015 0f01 	tst.w	r5, #1
 801ee76:	d10f      	bne.n	801ee98 <RegionUS915LinkAdrReq+0x11c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 801ee78:	aa10      	add	r2, sp, #64	; 0x40
 801ee7a:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 801ee7e:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 801ee82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801ee86:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 801ee8a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801ee8e:	ea22 0303 	bic.w	r3, r2, r3
 801ee92:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801ee96:	e7d0      	b.n	801ee3a <RegionUS915LinkAdrReq+0xbe>
                        channelsMask[cntChannelMask] &= 0x00FF;
 801ee98:	aa10      	add	r2, sp, #64	; 0x40
 801ee9a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801ee9e:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 801eea2:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 801eea6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801eeaa:	ea22 0303 	bic.w	r3, r2, r3
 801eeae:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 801eeb2:	3101      	adds	r1, #1
 801eeb4:	b2c9      	uxtb	r1, r1
 801eeb6:	e7c0      	b.n	801ee3a <RegionUS915LinkAdrReq+0xbe>
            for( uint8_t i = 0; i <= 7; i++ )
 801eeb8:	2500      	movs	r5, #0
            uint8_t cntChannelMask = 0;
 801eeba:	4629      	mov	r1, r5
 801eebc:	e7bf      	b.n	801ee3e <RegionUS915LinkAdrReq+0xc2>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801eebe:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 801eec2:	2b03      	cmp	r3, #3
 801eec4:	dd58      	ble.n	801ef78 <RegionUS915LinkAdrReq+0x1fc>
 801eec6:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801eec8:	2302      	movs	r3, #2
 801eeca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801eece:	7a73      	ldrb	r3, [r6, #9]
 801eed0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801eed4:	a809      	add	r0, sp, #36	; 0x24
 801eed6:	f7ff fbff 	bl	801e6d8 <RegionUS915GetPhyParam>
 801eeda:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 801eedc:	f88d 5004 	strb.w	r5, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801eee0:	7ab3      	ldrb	r3, [r6, #10]
 801eee2:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801eee6:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 801eeea:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801eeee:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 801eef2:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801eef6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 801eefa:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801eefe:	f996 300b 	ldrsb.w	r3, [r6, #11]
 801ef02:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801ef06:	f996 300c 	ldrsb.w	r3, [r6, #12]
 801ef0a:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801ef0e:	f996 300d 	ldrsb.w	r3, [r6, #13]
 801ef12:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801ef16:	2348      	movs	r3, #72	; 0x48
 801ef18:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801ef1c:	ab0b      	add	r3, sp, #44	; 0x2c
 801ef1e:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801ef20:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801ef24:	2304      	movs	r3, #4
 801ef26:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801ef2a:	4b31      	ldr	r3, [pc, #196]	; (801eff0 <RegionUS915LinkAdrReq+0x274>)
 801ef2c:	681b      	ldr	r3, [r3, #0]
 801ef2e:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801ef30:	230e      	movs	r3, #14
 801ef32:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801ef36:	2300      	movs	r3, #0
 801ef38:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801ef3c:	6833      	ldr	r3, [r6, #0]
 801ef3e:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801ef40:	ab0e      	add	r3, sp, #56	; 0x38
 801ef42:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 801ef46:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 801ef4a:	4668      	mov	r0, sp
 801ef4c:	f7fc f9d6 	bl	801b2fc <RegionCommonLinkAdrReqVerifyParams>
 801ef50:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801ef52:	2807      	cmp	r0, #7
 801ef54:	d01b      	beq.n	801ef8e <RegionUS915LinkAdrReq+0x212>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801ef56:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 801ef5a:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 801ef5e:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 801ef62:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 801ef66:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 801ef6a:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 801ef6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ef6e:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 801ef70:	4628      	mov	r0, r5
 801ef72:	b011      	add	sp, #68	; 0x44
 801ef74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801ef78:	2204      	movs	r2, #4
 801ef7a:	2100      	movs	r1, #0
 801ef7c:	a80b      	add	r0, sp, #44	; 0x2c
 801ef7e:	f7fc f8da 	bl	801b136 <RegionCommonCountChannels>
 801ef82:	2801      	cmp	r0, #1
 801ef84:	d901      	bls.n	801ef8a <RegionUS915LinkAdrReq+0x20e>
 801ef86:	2507      	movs	r5, #7
 801ef88:	e79e      	b.n	801eec8 <RegionUS915LinkAdrReq+0x14c>
        status &= 0xFE; // Channel mask KO
 801ef8a:	2506      	movs	r5, #6
 801ef8c:	e79c      	b.n	801eec8 <RegionUS915LinkAdrReq+0x14c>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801ef8e:	4e18      	ldr	r6, [pc, #96]	; (801eff0 <RegionUS915LinkAdrReq+0x274>)
 801ef90:	6830      	ldr	r0, [r6, #0]
 801ef92:	2206      	movs	r2, #6
 801ef94:	a90b      	add	r1, sp, #44	; 0x2c
 801ef96:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801ef9a:	f7fc f8e2 	bl	801b162 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801ef9e:	4b15      	ldr	r3, [pc, #84]	; (801eff4 <RegionUS915LinkAdrReq+0x278>)
 801efa0:	681b      	ldr	r3, [r3, #0]
 801efa2:	6832      	ldr	r2, [r6, #0]
 801efa4:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 801efa8:	f8b3 0090 	ldrh.w	r0, [r3, #144]	; 0x90
 801efac:	4001      	ands	r1, r0
 801efae:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801efb2:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 801efb6:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
 801efba:	4001      	ands	r1, r0
 801efbc:	f8a3 1092 	strh.w	r1, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801efc0:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 801efc4:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
 801efc8:	4001      	ands	r1, r0
 801efca:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801efce:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 801efd2:	f8b3 0096 	ldrh.w	r0, [r3, #150]	; 0x96
 801efd6:	4001      	ands	r1, r0
 801efd8:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801efdc:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 801efe0:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801efe4:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801efe8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 801efec:	e7b3      	b.n	801ef56 <RegionUS915LinkAdrReq+0x1da>
 801efee:	bf00      	nop
 801eff0:	20001b9c 	.word	0x20001b9c
 801eff4:	20001b98 	.word	0x20001b98

0801eff8 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801eff8:	b538      	push	{r3, r4, r5, lr}
 801effa:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801effc:	6840      	ldr	r0, [r0, #4]
 801effe:	f7ff fb01 	bl	801e604 <VerifyRfFreq>
 801f002:	b310      	cbz	r0, 801f04a <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 801f004:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801f006:	220d      	movs	r2, #13
 801f008:	2108      	movs	r1, #8
 801f00a:	f994 0000 	ldrsb.w	r0, [r4]
 801f00e:	f7fc f836 	bl	801b07e <RegionCommonValueInRange>
 801f012:	b908      	cbnz	r0, 801f018 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 801f014:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801f018:	2207      	movs	r2, #7
 801f01a:	2105      	movs	r1, #5
 801f01c:	f994 0000 	ldrsb.w	r0, [r4]
 801f020:	f7fc f82d 	bl	801b07e <RegionCommonValueInRange>
 801f024:	2801      	cmp	r0, #1
 801f026:	d003      	beq.n	801f030 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801f028:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801f02c:	2b0d      	cmp	r3, #13
 801f02e:	dd01      	ble.n	801f034 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 801f030:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801f034:	2203      	movs	r2, #3
 801f036:	2100      	movs	r1, #0
 801f038:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801f03c:	f7fc f81f 	bl	801b07e <RegionCommonValueInRange>
 801f040:	b908      	cbnz	r0, 801f046 <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801f042:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 801f046:	4628      	mov	r0, r5
 801f048:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 801f04a:	2506      	movs	r5, #6
 801f04c:	e7db      	b.n	801f006 <RegionUS915RxParamSetupReq+0xe>

0801f04e <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 801f04e:	f04f 30ff 	mov.w	r0, #4294967295
 801f052:	4770      	bx	lr

0801f054 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 801f054:	f04f 30ff 	mov.w	r0, #4294967295
 801f058:	4770      	bx	lr

0801f05a <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 801f05a:	f04f 30ff 	mov.w	r0, #4294967295
 801f05e:	4770      	bx	lr

0801f060 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 801f060:	b9b1      	cbnz	r1, 801f090 <RegionUS915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801f062:	4b10      	ldr	r3, [pc, #64]	; (801f0a4 <RegionUS915AlternateDr+0x44>)
 801f064:	681a      	ldr	r2, [r3, #0]
 801f066:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 801f06a:	3301      	adds	r3, #1
 801f06c:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 801f070:	4b0c      	ldr	r3, [pc, #48]	; (801f0a4 <RegionUS915AlternateDr+0x44>)
 801f072:	681b      	ldr	r3, [r3, #0]
 801f074:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 801f078:	4b0b      	ldr	r3, [pc, #44]	; (801f0a8 <RegionUS915AlternateDr+0x48>)
 801f07a:	fba3 1302 	umull	r1, r3, r3, r2
 801f07e:	085b      	lsrs	r3, r3, #1
 801f080:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 801f084:	1ad3      	subs	r3, r2, r3
 801f086:	f013 0fff 	tst.w	r3, #255	; 0xff
 801f08a:	d009      	beq.n	801f0a0 <RegionUS915AlternateDr+0x40>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 801f08c:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 801f08e:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 801f090:	4b04      	ldr	r3, [pc, #16]	; (801f0a4 <RegionUS915AlternateDr+0x44>)
 801f092:	681a      	ldr	r2, [r3, #0]
 801f094:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 801f098:	3b01      	subs	r3, #1
 801f09a:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 801f09e:	e7e7      	b.n	801f070 <RegionUS915AlternateDr+0x10>
        currentDr = DR_4;
 801f0a0:	2004      	movs	r0, #4
 801f0a2:	4770      	bx	lr
 801f0a4:	20001b98 	.word	0x20001b98
 801f0a8:	38e38e39 	.word	0x38e38e39

0801f0ac <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801f0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0b0:	b0a4      	sub	sp, #144	; 0x90
 801f0b2:	4604      	mov	r4, r0
 801f0b4:	460e      	mov	r6, r1
 801f0b6:	4690      	mov	r8, r2
 801f0b8:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801f0ba:	2500      	movs	r5, #0
 801f0bc:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 801f0c0:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801f0c4:	9511      	str	r5, [sp, #68]	; 0x44
 801f0c6:	2244      	movs	r2, #68	; 0x44
 801f0c8:	4629      	mov	r1, r5
 801f0ca:	a812      	add	r0, sp, #72	; 0x48
 801f0cc:	f004 ff24 	bl	8023f18 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801f0d0:	4b4c      	ldr	r3, [pc, #304]	; (801f204 <RegionUS915NextChannel+0x158>)
 801f0d2:	6818      	ldr	r0, [r3, #0]
 801f0d4:	2204      	movs	r2, #4
 801f0d6:	4629      	mov	r1, r5
 801f0d8:	3090      	adds	r0, #144	; 0x90
 801f0da:	f7fc f82c 	bl	801b136 <RegionCommonCountChannels>
 801f0de:	2800      	cmp	r0, #0
 801f0e0:	d05c      	beq.n	801f19c <RegionUS915NextChannel+0xf0>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801f0e2:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801f0e6:	2b03      	cmp	r3, #3
 801f0e8:	dd0a      	ble.n	801f100 <RegionUS915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801f0ea:	4b46      	ldr	r3, [pc, #280]	; (801f204 <RegionUS915NextChannel+0x158>)
 801f0ec:	681b      	ldr	r3, [r3, #0]
 801f0ee:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 801f0f2:	b92a      	cbnz	r2, 801f100 <RegionUS915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801f0f4:	4a44      	ldr	r2, [pc, #272]	; (801f208 <RegionUS915NextChannel+0x15c>)
 801f0f6:	6812      	ldr	r2, [r2, #0]
 801f0f8:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801f0fc:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801f100:	7a63      	ldrb	r3, [r4, #9]
 801f102:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801f106:	7a23      	ldrb	r3, [r4, #8]
 801f108:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801f10c:	4b3d      	ldr	r3, [pc, #244]	; (801f204 <RegionUS915NextChannel+0x158>)
 801f10e:	681b      	ldr	r3, [r3, #0]
 801f110:	f103 0290 	add.w	r2, r3, #144	; 0x90
 801f114:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801f116:	4a3c      	ldr	r2, [pc, #240]	; (801f208 <RegionUS915NextChannel+0x15c>)
 801f118:	6812      	ldr	r2, [r2, #0]
 801f11a:	9205      	str	r2, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801f11c:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801f11e:	2348      	movs	r3, #72	; 0x48
 801f120:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 801f124:	2300      	movs	r3, #0
 801f126:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801f128:	6823      	ldr	r3, [r4, #0]
 801f12a:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801f12c:	6863      	ldr	r3, [r4, #4]
 801f12e:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801f130:	7aa3      	ldrb	r3, [r4, #10]
 801f132:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801f136:	2301      	movs	r3, #1
 801f138:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801f13c:	ab0c      	add	r3, sp, #48	; 0x30
 801f13e:	6921      	ldr	r1, [r4, #16]
 801f140:	68e0      	ldr	r0, [r4, #12]
 801f142:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801f146:	7d23      	ldrb	r3, [r4, #20]
 801f148:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801f14c:	8ae1      	ldrh	r1, [r4, #22]
 801f14e:	f994 0008 	ldrsb.w	r0, [r4, #8]
 801f152:	f7ff fa87 	bl	801e664 <GetTimeOnAir>
 801f156:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801f158:	ab03      	add	r3, sp, #12
 801f15a:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801f15c:	f8cd 8004 	str.w	r8, [sp, #4]
 801f160:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 801f164:	9300      	str	r3, [sp, #0]
 801f166:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 801f16a:	aa11      	add	r2, sp, #68	; 0x44
 801f16c:	4639      	mov	r1, r7
 801f16e:	a809      	add	r0, sp, #36	; 0x24
 801f170:	f7fc f9d4 	bl	801b51c <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801f174:	4605      	mov	r5, r0
 801f176:	2800      	cmp	r0, #0
 801f178:	d13f      	bne.n	801f1fa <RegionUS915NextChannel+0x14e>
    {
        if( nextChanParams->Joined == true )
 801f17a:	7a63      	ldrb	r3, [r4, #9]
 801f17c:	b9eb      	cbnz	r3, 801f1ba <RegionUS915NextChannel+0x10e>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801f17e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801f182:	b32b      	cbz	r3, 801f1d0 <RegionUS915NextChannel+0x124>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801f184:	4603      	mov	r3, r0
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801f186:	4a1f      	ldr	r2, [pc, #124]	; (801f204 <RegionUS915NextChannel+0x158>)
 801f188:	6812      	ldr	r2, [r2, #0]
 801f18a:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
 801f18e:	411a      	asrs	r2, r3
 801f190:	f012 0f01 	tst.w	r2, #1
 801f194:	d128      	bne.n	801f1e8 <RegionUS915NextChannel+0x13c>
                {
                    i++;
 801f196:	3301      	adds	r3, #1
 801f198:	b2db      	uxtb	r3, r3
 801f19a:	e7f4      	b.n	801f186 <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801f19c:	4d19      	ldr	r5, [pc, #100]	; (801f204 <RegionUS915NextChannel+0x158>)
 801f19e:	6828      	ldr	r0, [r5, #0]
 801f1a0:	4b19      	ldr	r3, [pc, #100]	; (801f208 <RegionUS915NextChannel+0x15c>)
 801f1a2:	6819      	ldr	r1, [r3, #0]
 801f1a4:	2204      	movs	r2, #4
 801f1a6:	f501 7158 	add.w	r1, r1, #864	; 0x360
 801f1aa:	3090      	adds	r0, #144	; 0x90
 801f1ac:	f7fb ffd9 	bl	801b162 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801f1b0:	682b      	ldr	r3, [r5, #0]
 801f1b2:	2200      	movs	r2, #0
 801f1b4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 801f1b8:	e793      	b.n	801f0e2 <RegionUS915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801f1ba:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 801f1be:	3901      	subs	r1, #1
 801f1c0:	f000 fe74 	bl	801feac <randr>
 801f1c4:	ab24      	add	r3, sp, #144	; 0x90
 801f1c6:	4418      	add	r0, r3
 801f1c8:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 801f1cc:	7033      	strb	r3, [r6, #0]
 801f1ce:	e00d      	b.n	801f1ec <RegionUS915NextChannel+0x140>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801f1d0:	4b0c      	ldr	r3, [pc, #48]	; (801f204 <RegionUS915NextChannel+0x158>)
 801f1d2:	6818      	ldr	r0, [r3, #0]
 801f1d4:	4632      	mov	r2, r6
 801f1d6:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 801f1da:	3090      	adds	r0, #144	; 0x90
 801f1dc:	f7fb f867 	bl	801a2ae <RegionBaseUSComputeNext125kHzJoinChannel>
 801f1e0:	2803      	cmp	r0, #3
 801f1e2:	d103      	bne.n	801f1ec <RegionUS915NextChannel+0x140>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801f1e4:	4605      	mov	r5, r0
 801f1e6:	e008      	b.n	801f1fa <RegionUS915NextChannel+0x14e>
                }
                *channel = 64 + i;
 801f1e8:	3340      	adds	r3, #64	; 0x40
 801f1ea:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801f1ec:	4b05      	ldr	r3, [pc, #20]	; (801f204 <RegionUS915NextChannel+0x158>)
 801f1ee:	6818      	ldr	r0, [r3, #0]
 801f1f0:	2248      	movs	r2, #72	; 0x48
 801f1f2:	7831      	ldrb	r1, [r6, #0]
 801f1f4:	3090      	adds	r0, #144	; 0x90
 801f1f6:	f7fb ff84 	bl	801b102 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801f1fa:	4628      	mov	r0, r5
 801f1fc:	b024      	add	sp, #144	; 0x90
 801f1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f202:	bf00      	nop
 801f204:	20001b98 	.word	0x20001b98
 801f208:	20001b9c 	.word	0x20001b9c

0801f20c <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801f20c:	b538      	push	{r3, r4, r5, lr}
 801f20e:	4604      	mov	r4, r0
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 801f210:	4b14      	ldr	r3, [pc, #80]	; (801f264 <RegionUS915SetContinuousWave+0x58>)
 801f212:	6819      	ldr	r1, [r3, #0]
 801f214:	4d14      	ldr	r5, [pc, #80]	; (801f268 <RegionUS915SetContinuousWave+0x5c>)
 801f216:	682b      	ldr	r3, [r5, #0]
 801f218:	7802      	ldrb	r2, [r0, #0]
 801f21a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f21e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801f222:	7a52      	ldrb	r2, [r2, #9]
 801f224:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f228:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801f22c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801f230:	f990 2001 	ldrsb.w	r2, [r0, #1]
 801f234:	f991 1002 	ldrsb.w	r1, [r1, #2]
 801f238:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801f23c:	f7ff fa30 	bl	801e6a0 <LimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801f240:	682a      	ldr	r2, [r5, #0]
 801f242:	7823      	ldrb	r3, [r4, #0]
 801f244:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f248:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801f24c:	2200      	movs	r2, #0
 801f24e:	4907      	ldr	r1, [pc, #28]	; (801f26c <RegionUS915SetContinuousWave+0x60>)
 801f250:	f7fc f8e8 	bl	801b424 <RegionCommonComputeTxPower>
 801f254:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801f256:	4b06      	ldr	r3, [pc, #24]	; (801f270 <RegionUS915SetContinuousWave+0x64>)
 801f258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f25a:	89a2      	ldrh	r2, [r4, #12]
 801f25c:	4628      	mov	r0, r5
 801f25e:	4798      	blx	r3
#endif /* REGION_US915 */
}
 801f260:	bd38      	pop	{r3, r4, r5, pc}
 801f262:	bf00      	nop
 801f264:	20001b98 	.word	0x20001b98
 801f268:	20001b9c 	.word	0x20001b9c
 801f26c:	41f00000 	.word	0x41f00000
 801f270:	08028984 	.word	0x08028984

0801f274 <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801f274:	4b04      	ldr	r3, [pc, #16]	; (801f288 <RegionUS915ApplyDrOffset+0x14>)
 801f276:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801f27a:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 801f27c:	2800      	cmp	r0, #0
 801f27e:	db01      	blt.n	801f284 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 801f280:	b2c0      	uxtb	r0, r0
 801f282:	4770      	bx	lr
        datarate = DR_0;
 801f284:	2000      	movs	r0, #0
 801f286:	e7fb      	b.n	801f280 <RegionUS915ApplyDrOffset+0xc>
 801f288:	080285b0 	.word	0x080285b0

0801f28c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 801f28c:	b510      	push	{r4, lr}
 801f28e:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 801f290:	2210      	movs	r2, #16
 801f292:	2100      	movs	r1, #0
 801f294:	30f1      	adds	r0, #241	; 0xf1
 801f296:	f000 fe2c 	bl	801fef2 <memset1>
    ctx->M_n = 0;
 801f29a:	2100      	movs	r1, #0
 801f29c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 801f2a0:	22f0      	movs	r2, #240	; 0xf0
 801f2a2:	4620      	mov	r0, r4
 801f2a4:	f000 fe25 	bl	801fef2 <memset1>
}
 801f2a8:	bd10      	pop	{r4, pc}

0801f2aa <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 801f2aa:	b508      	push	{r3, lr}
 801f2ac:	4602      	mov	r2, r0
 801f2ae:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 801f2b0:	2110      	movs	r1, #16
 801f2b2:	f000 fb05 	bl	801f8c0 <lorawan_aes_set_key>
}
 801f2b6:	bd08      	pop	{r3, pc}

0801f2b8 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 801f2b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f2bc:	b085      	sub	sp, #20
 801f2be:	4607      	mov	r7, r0
 801f2c0:	4688      	mov	r8, r1
 801f2c2:	4691      	mov	r9, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 801f2c4:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 801f2c8:	2b00      	cmp	r3, #0
 801f2ca:	d04b      	beq.n	801f364 <AES_CMAC_Update+0xac>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 801f2cc:	f1c3 0510 	rsb	r5, r3, #16
 801f2d0:	462c      	mov	r4, r5
 801f2d2:	4295      	cmp	r5, r2
 801f2d4:	bf28      	it	cs
 801f2d6:	4614      	movcs	r4, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 801f2d8:	f200 1001 	addw	r0, r0, #257	; 0x101
 801f2dc:	b2a2      	uxth	r2, r4
 801f2de:	4418      	add	r0, r3
 801f2e0:	f000 fdf1 	bl	801fec6 <memcpy1>
        ctx->M_n += mlen;
 801f2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801f2e8:	4423      	add	r3, r4
 801f2ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 801f2ee:	2b0f      	cmp	r3, #15
 801f2f0:	d951      	bls.n	801f396 <AES_CMAC_Update+0xde>
 801f2f2:	454d      	cmp	r5, r9
 801f2f4:	d24f      	bcs.n	801f396 <AES_CMAC_Update+0xde>
            return;
        XOR( ctx->M_last, ctx->X );
 801f2f6:	2300      	movs	r3, #0
 801f2f8:	e008      	b.n	801f30c <AES_CMAC_Update+0x54>
 801f2fa:	18fa      	adds	r2, r7, r3
 801f2fc:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 801f300:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 801f304:	4041      	eors	r1, r0
 801f306:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 801f30a:	3301      	adds	r3, #1
 801f30c:	2b0f      	cmp	r3, #15
 801f30e:	ddf4      	ble.n	801f2fa <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801f310:	f107 05f1 	add.w	r5, r7, #241	; 0xf1
 801f314:	2210      	movs	r2, #16
 801f316:	4629      	mov	r1, r5
 801f318:	4668      	mov	r0, sp
 801f31a:	f000 fdd4 	bl	801fec6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801f31e:	463a      	mov	r2, r7
 801f320:	4669      	mov	r1, sp
 801f322:	4668      	mov	r0, sp
 801f324:	f000 fb56 	bl	801f9d4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801f328:	2210      	movs	r2, #16
 801f32a:	4669      	mov	r1, sp
 801f32c:	4628      	mov	r0, r5
 801f32e:	f000 fdca 	bl	801fec6 <memcpy1>

        data += mlen;
 801f332:	44a0      	add	r8, r4
        len -= mlen;
 801f334:	eba9 0904 	sub.w	r9, r9, r4
 801f338:	e014      	b.n	801f364 <AES_CMAC_Update+0xac>
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801f33a:	f107 04f1 	add.w	r4, r7, #241	; 0xf1
 801f33e:	2210      	movs	r2, #16
 801f340:	4621      	mov	r1, r4
 801f342:	4668      	mov	r0, sp
 801f344:	f000 fdbf 	bl	801fec6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801f348:	463a      	mov	r2, r7
 801f34a:	4669      	mov	r1, sp
 801f34c:	4668      	mov	r0, sp
 801f34e:	f000 fb41 	bl	801f9d4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801f352:	2210      	movs	r2, #16
 801f354:	4669      	mov	r1, sp
 801f356:	4620      	mov	r0, r4
 801f358:	f000 fdb5 	bl	801fec6 <memcpy1>

        data += 16;
 801f35c:	f108 0810 	add.w	r8, r8, #16
        len -= 16;
 801f360:	f1a9 0910 	sub.w	r9, r9, #16
    while( len > 16 )
 801f364:	f1b9 0f10 	cmp.w	r9, #16
 801f368:	d90c      	bls.n	801f384 <AES_CMAC_Update+0xcc>
        XOR( data, ctx->X );
 801f36a:	2300      	movs	r3, #0
 801f36c:	2b0f      	cmp	r3, #15
 801f36e:	dce4      	bgt.n	801f33a <AES_CMAC_Update+0x82>
 801f370:	18fd      	adds	r5, r7, r3
 801f372:	f895 40f1 	ldrb.w	r4, [r5, #241]	; 0xf1
 801f376:	f818 6003 	ldrb.w	r6, [r8, r3]
 801f37a:	4074      	eors	r4, r6
 801f37c:	f885 40f1 	strb.w	r4, [r5, #241]	; 0xf1
 801f380:	3301      	adds	r3, #1
 801f382:	e7f3      	b.n	801f36c <AES_CMAC_Update+0xb4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 801f384:	fa1f f289 	uxth.w	r2, r9
 801f388:	4641      	mov	r1, r8
 801f38a:	f207 1001 	addw	r0, r7, #257	; 0x101
 801f38e:	f000 fd9a 	bl	801fec6 <memcpy1>
    ctx->M_n = len;
 801f392:	f8c7 9114 	str.w	r9, [r7, #276]	; 0x114
}
 801f396:	b005      	add	sp, #20
 801f398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801f39c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 801f39c:	b570      	push	{r4, r5, r6, lr}
 801f39e:	b088      	sub	sp, #32
 801f3a0:	4606      	mov	r6, r0
 801f3a2:	460d      	mov	r5, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 801f3a4:	2210      	movs	r2, #16
 801f3a6:	2100      	movs	r1, #0
 801f3a8:	eb0d 0002 	add.w	r0, sp, r2
 801f3ac:	f000 fda1 	bl	801fef2 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 801f3b0:	462a      	mov	r2, r5
 801f3b2:	a904      	add	r1, sp, #16
 801f3b4:	4608      	mov	r0, r1
 801f3b6:	f000 fb0d 	bl	801f9d4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 801f3ba:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801f3be:	2b00      	cmp	r3, #0
 801f3c0:	db19      	blt.n	801f3f6 <AES_CMAC_Final+0x5a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 801f3c2:	2300      	movs	r3, #0
 801f3c4:	e026      	b.n	801f414 <AES_CMAC_Final+0x78>
        LSHIFT( K, K );
 801f3c6:	aa08      	add	r2, sp, #32
 801f3c8:	18d1      	adds	r1, r2, r3
 801f3ca:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 801f3ce:	3301      	adds	r3, #1
 801f3d0:	441a      	add	r2, r3
 801f3d2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801f3d6:	09d2      	lsrs	r2, r2, #7
 801f3d8:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 801f3dc:	f801 2c10 	strb.w	r2, [r1, #-16]
 801f3e0:	2b0e      	cmp	r3, #14
 801f3e2:	ddf0      	ble.n	801f3c6 <AES_CMAC_Final+0x2a>
 801f3e4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801f3e8:	005b      	lsls	r3, r3, #1
 801f3ea:	b2db      	uxtb	r3, r3
        K[15] ^= 0x87;
 801f3ec:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 801f3f0:	f88d 301f 	strb.w	r3, [sp, #31]
 801f3f4:	e015      	b.n	801f422 <AES_CMAC_Final+0x86>
        LSHIFT( K, K );
 801f3f6:	2300      	movs	r3, #0
 801f3f8:	e7f2      	b.n	801f3e0 <AES_CMAC_Final+0x44>
        LSHIFT( K, K );
 801f3fa:	aa08      	add	r2, sp, #32
 801f3fc:	18d1      	adds	r1, r2, r3
 801f3fe:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 801f402:	3301      	adds	r3, #1
 801f404:	441a      	add	r2, r3
 801f406:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801f40a:	09d2      	lsrs	r2, r2, #7
 801f40c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 801f410:	f801 2c10 	strb.w	r2, [r1, #-16]
 801f414:	2b0e      	cmp	r3, #14
 801f416:	ddf0      	ble.n	801f3fa <AES_CMAC_Final+0x5e>
 801f418:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801f41c:	005b      	lsls	r3, r3, #1
 801f41e:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 801f422:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
 801f426:	2810      	cmp	r0, #16
 801f428:	d014      	beq.n	801f454 <AES_CMAC_Final+0xb8>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 801f42a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801f42e:	2b00      	cmp	r3, #0
 801f430:	db1f      	blt.n	801f472 <AES_CMAC_Final+0xd6>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 801f432:	2300      	movs	r3, #0
 801f434:	2b0e      	cmp	r3, #14
 801f436:	dc36      	bgt.n	801f4a6 <AES_CMAC_Final+0x10a>
 801f438:	aa08      	add	r2, sp, #32
 801f43a:	18d1      	adds	r1, r2, r3
 801f43c:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 801f440:	3301      	adds	r3, #1
 801f442:	441a      	add	r2, r3
 801f444:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801f448:	09d2      	lsrs	r2, r2, #7
 801f44a:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 801f44e:	f801 2c10 	strb.w	r2, [r1, #-16]
 801f452:	e7ef      	b.n	801f434 <AES_CMAC_Final+0x98>
        XOR( K, ctx->M_last );
 801f454:	2300      	movs	r3, #0
 801f456:	2b0f      	cmp	r3, #15
 801f458:	dc49      	bgt.n	801f4ee <AES_CMAC_Final+0x152>
 801f45a:	18e9      	adds	r1, r5, r3
 801f45c:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 801f460:	a808      	add	r0, sp, #32
 801f462:	4418      	add	r0, r3
 801f464:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 801f468:	4042      	eors	r2, r0
 801f46a:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 801f46e:	3301      	adds	r3, #1
 801f470:	e7f1      	b.n	801f456 <AES_CMAC_Final+0xba>
            LSHIFT( K, K );
 801f472:	2300      	movs	r3, #0
 801f474:	2b0e      	cmp	r3, #14
 801f476:	dc0d      	bgt.n	801f494 <AES_CMAC_Final+0xf8>
 801f478:	aa08      	add	r2, sp, #32
 801f47a:	18d1      	adds	r1, r2, r3
 801f47c:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 801f480:	3301      	adds	r3, #1
 801f482:	441a      	add	r2, r3
 801f484:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801f488:	09d2      	lsrs	r2, r2, #7
 801f48a:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 801f48e:	f801 2c10 	strb.w	r2, [r1, #-16]
 801f492:	e7ef      	b.n	801f474 <AES_CMAC_Final+0xd8>
 801f494:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801f498:	005b      	lsls	r3, r3, #1
 801f49a:	b2db      	uxtb	r3, r3
            K[15] ^= 0x87;
 801f49c:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 801f4a0:	f88d 301f 	strb.w	r3, [sp, #31]
 801f4a4:	e004      	b.n	801f4b0 <AES_CMAC_Final+0x114>
            LSHIFT( K, K );
 801f4a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801f4aa:	005b      	lsls	r3, r3, #1
 801f4ac:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 801f4b0:	4428      	add	r0, r5
 801f4b2:	2380      	movs	r3, #128	; 0x80
 801f4b4:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 801f4b8:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 801f4bc:	3301      	adds	r3, #1
 801f4be:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
 801f4c2:	2b0f      	cmp	r3, #15
 801f4c4:	d804      	bhi.n	801f4d0 <AES_CMAC_Final+0x134>
            ctx->M_last[ctx->M_n] = 0;
 801f4c6:	442b      	add	r3, r5
 801f4c8:	2200      	movs	r2, #0
 801f4ca:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 801f4ce:	e7f3      	b.n	801f4b8 <AES_CMAC_Final+0x11c>

        XOR( K, ctx->M_last );
 801f4d0:	2300      	movs	r3, #0
 801f4d2:	2b0f      	cmp	r3, #15
 801f4d4:	dc0b      	bgt.n	801f4ee <AES_CMAC_Final+0x152>
 801f4d6:	18e9      	adds	r1, r5, r3
 801f4d8:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 801f4dc:	a808      	add	r0, sp, #32
 801f4de:	4418      	add	r0, r3
 801f4e0:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 801f4e4:	4042      	eors	r2, r0
 801f4e6:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 801f4ea:	3301      	adds	r3, #1
 801f4ec:	e7f1      	b.n	801f4d2 <AES_CMAC_Final+0x136>
 801f4ee:	2300      	movs	r3, #0
    }
    XOR( ctx->M_last, ctx->X );
 801f4f0:	2b0f      	cmp	r3, #15
 801f4f2:	dc09      	bgt.n	801f508 <AES_CMAC_Final+0x16c>
 801f4f4:	18ea      	adds	r2, r5, r3
 801f4f6:	f892 40f1 	ldrb.w	r4, [r2, #241]	; 0xf1
 801f4fa:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 801f4fe:	404c      	eors	r4, r1
 801f500:	f882 40f1 	strb.w	r4, [r2, #241]	; 0xf1
 801f504:	3301      	adds	r3, #1
 801f506:	e7f3      	b.n	801f4f0 <AES_CMAC_Final+0x154>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801f508:	2210      	movs	r2, #16
 801f50a:	f105 01f1 	add.w	r1, r5, #241	; 0xf1
 801f50e:	4668      	mov	r0, sp
 801f510:	f000 fcd9 	bl	801fec6 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 801f514:	462a      	mov	r2, r5
 801f516:	4631      	mov	r1, r6
 801f518:	4668      	mov	r0, sp
 801f51a:	f000 fa5b 	bl	801f9d4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 801f51e:	2210      	movs	r2, #16
 801f520:	2100      	movs	r1, #0
 801f522:	eb0d 0002 	add.w	r0, sp, r2
 801f526:	f000 fce4 	bl	801fef2 <memset1>
}
 801f52a:	b008      	add	sp, #32
 801f52c:	bd70      	pop	{r4, r5, r6, pc}

0801f52e <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 801f52e:	780b      	ldrb	r3, [r1, #0]
 801f530:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 801f532:	784b      	ldrb	r3, [r1, #1]
 801f534:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 801f536:	788b      	ldrb	r3, [r1, #2]
 801f538:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 801f53a:	78cb      	ldrb	r3, [r1, #3]
 801f53c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 801f53e:	790b      	ldrb	r3, [r1, #4]
 801f540:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 801f542:	794b      	ldrb	r3, [r1, #5]
 801f544:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 801f546:	798b      	ldrb	r3, [r1, #6]
 801f548:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 801f54a:	79cb      	ldrb	r3, [r1, #7]
 801f54c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 801f54e:	7a0b      	ldrb	r3, [r1, #8]
 801f550:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 801f552:	7a4b      	ldrb	r3, [r1, #9]
 801f554:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 801f556:	7a8b      	ldrb	r3, [r1, #10]
 801f558:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 801f55a:	7acb      	ldrb	r3, [r1, #11]
 801f55c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 801f55e:	7b0b      	ldrb	r3, [r1, #12]
 801f560:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 801f562:	7b4b      	ldrb	r3, [r1, #13]
 801f564:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 801f566:	7b8b      	ldrb	r3, [r1, #14]
 801f568:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 801f56a:	7bcb      	ldrb	r3, [r1, #15]
 801f56c:	73c3      	strb	r3, [r0, #15]
#endif
}
 801f56e:	4770      	bx	lr

0801f570 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 801f570:	1e53      	subs	r3, r2, #1
 801f572:	b2db      	uxtb	r3, r3
 801f574:	b12a      	cbz	r2, 801f582 <copy_block_nn+0x12>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 801f576:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f57a:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 801f57e:	461a      	mov	r2, r3
 801f580:	e7f6      	b.n	801f570 <copy_block_nn>
}
 801f582:	4770      	bx	lr

0801f584 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 801f584:	780b      	ldrb	r3, [r1, #0]
 801f586:	7802      	ldrb	r2, [r0, #0]
 801f588:	4053      	eors	r3, r2
 801f58a:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 801f58c:	784b      	ldrb	r3, [r1, #1]
 801f58e:	7842      	ldrb	r2, [r0, #1]
 801f590:	4053      	eors	r3, r2
 801f592:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 801f594:	788b      	ldrb	r3, [r1, #2]
 801f596:	7882      	ldrb	r2, [r0, #2]
 801f598:	4053      	eors	r3, r2
 801f59a:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 801f59c:	78cb      	ldrb	r3, [r1, #3]
 801f59e:	78c2      	ldrb	r2, [r0, #3]
 801f5a0:	4053      	eors	r3, r2
 801f5a2:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 801f5a4:	790b      	ldrb	r3, [r1, #4]
 801f5a6:	7902      	ldrb	r2, [r0, #4]
 801f5a8:	4053      	eors	r3, r2
 801f5aa:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 801f5ac:	794b      	ldrb	r3, [r1, #5]
 801f5ae:	7942      	ldrb	r2, [r0, #5]
 801f5b0:	4053      	eors	r3, r2
 801f5b2:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 801f5b4:	798b      	ldrb	r3, [r1, #6]
 801f5b6:	7982      	ldrb	r2, [r0, #6]
 801f5b8:	4053      	eors	r3, r2
 801f5ba:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 801f5bc:	79cb      	ldrb	r3, [r1, #7]
 801f5be:	79c2      	ldrb	r2, [r0, #7]
 801f5c0:	4053      	eors	r3, r2
 801f5c2:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 801f5c4:	7a0b      	ldrb	r3, [r1, #8]
 801f5c6:	7a02      	ldrb	r2, [r0, #8]
 801f5c8:	4053      	eors	r3, r2
 801f5ca:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 801f5cc:	7a4b      	ldrb	r3, [r1, #9]
 801f5ce:	7a42      	ldrb	r2, [r0, #9]
 801f5d0:	4053      	eors	r3, r2
 801f5d2:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 801f5d4:	7a8b      	ldrb	r3, [r1, #10]
 801f5d6:	7a82      	ldrb	r2, [r0, #10]
 801f5d8:	4053      	eors	r3, r2
 801f5da:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 801f5dc:	7acb      	ldrb	r3, [r1, #11]
 801f5de:	7ac2      	ldrb	r2, [r0, #11]
 801f5e0:	4053      	eors	r3, r2
 801f5e2:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 801f5e4:	7b0b      	ldrb	r3, [r1, #12]
 801f5e6:	7b02      	ldrb	r2, [r0, #12]
 801f5e8:	4053      	eors	r3, r2
 801f5ea:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 801f5ec:	7b4b      	ldrb	r3, [r1, #13]
 801f5ee:	7b42      	ldrb	r2, [r0, #13]
 801f5f0:	4053      	eors	r3, r2
 801f5f2:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 801f5f4:	7b8b      	ldrb	r3, [r1, #14]
 801f5f6:	7b82      	ldrb	r2, [r0, #14]
 801f5f8:	4053      	eors	r3, r2
 801f5fa:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 801f5fc:	7bcb      	ldrb	r3, [r1, #15]
 801f5fe:	7bc2      	ldrb	r2, [r0, #15]
 801f600:	4053      	eors	r3, r2
 801f602:	73c3      	strb	r3, [r0, #15]
#endif
}
 801f604:	4770      	bx	lr

0801f606 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 801f606:	b410      	push	{r4}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 801f608:	780b      	ldrb	r3, [r1, #0]
 801f60a:	7814      	ldrb	r4, [r2, #0]
 801f60c:	4063      	eors	r3, r4
 801f60e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 801f610:	784b      	ldrb	r3, [r1, #1]
 801f612:	7854      	ldrb	r4, [r2, #1]
 801f614:	4063      	eors	r3, r4
 801f616:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 801f618:	788b      	ldrb	r3, [r1, #2]
 801f61a:	7894      	ldrb	r4, [r2, #2]
 801f61c:	4063      	eors	r3, r4
 801f61e:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 801f620:	78cb      	ldrb	r3, [r1, #3]
 801f622:	78d4      	ldrb	r4, [r2, #3]
 801f624:	4063      	eors	r3, r4
 801f626:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 801f628:	790b      	ldrb	r3, [r1, #4]
 801f62a:	7914      	ldrb	r4, [r2, #4]
 801f62c:	4063      	eors	r3, r4
 801f62e:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 801f630:	794b      	ldrb	r3, [r1, #5]
 801f632:	7954      	ldrb	r4, [r2, #5]
 801f634:	4063      	eors	r3, r4
 801f636:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 801f638:	798b      	ldrb	r3, [r1, #6]
 801f63a:	7994      	ldrb	r4, [r2, #6]
 801f63c:	4063      	eors	r3, r4
 801f63e:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 801f640:	79cb      	ldrb	r3, [r1, #7]
 801f642:	79d4      	ldrb	r4, [r2, #7]
 801f644:	4063      	eors	r3, r4
 801f646:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 801f648:	7a0b      	ldrb	r3, [r1, #8]
 801f64a:	7a14      	ldrb	r4, [r2, #8]
 801f64c:	4063      	eors	r3, r4
 801f64e:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 801f650:	7a4b      	ldrb	r3, [r1, #9]
 801f652:	7a54      	ldrb	r4, [r2, #9]
 801f654:	4063      	eors	r3, r4
 801f656:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 801f658:	7a8b      	ldrb	r3, [r1, #10]
 801f65a:	7a94      	ldrb	r4, [r2, #10]
 801f65c:	4063      	eors	r3, r4
 801f65e:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 801f660:	7acb      	ldrb	r3, [r1, #11]
 801f662:	7ad4      	ldrb	r4, [r2, #11]
 801f664:	4063      	eors	r3, r4
 801f666:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 801f668:	7b0b      	ldrb	r3, [r1, #12]
 801f66a:	7b14      	ldrb	r4, [r2, #12]
 801f66c:	4063      	eors	r3, r4
 801f66e:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 801f670:	7b4b      	ldrb	r3, [r1, #13]
 801f672:	7b54      	ldrb	r4, [r2, #13]
 801f674:	4063      	eors	r3, r4
 801f676:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 801f678:	7b8b      	ldrb	r3, [r1, #14]
 801f67a:	7b94      	ldrb	r4, [r2, #14]
 801f67c:	4063      	eors	r3, r4
 801f67e:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 801f680:	7bcb      	ldrb	r3, [r1, #15]
 801f682:	7bd2      	ldrb	r2, [r2, #15]
 801f684:	4053      	eors	r3, r2
 801f686:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 801f688:	bc10      	pop	{r4}
 801f68a:	4770      	bx	lr

0801f68c <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 801f68c:	b508      	push	{r3, lr}
    xor_block(d, k);
 801f68e:	f7ff ff79 	bl	801f584 <xor_block>
}
 801f692:	bd08      	pop	{r3, pc}

0801f694 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 801f694:	7802      	ldrb	r2, [r0, #0]
 801f696:	4b18      	ldr	r3, [pc, #96]	; (801f6f8 <shift_sub_rows+0x64>)
 801f698:	5c9a      	ldrb	r2, [r3, r2]
 801f69a:	7002      	strb	r2, [r0, #0]
 801f69c:	7902      	ldrb	r2, [r0, #4]
 801f69e:	5c9a      	ldrb	r2, [r3, r2]
 801f6a0:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 801f6a2:	7a02      	ldrb	r2, [r0, #8]
 801f6a4:	5c9a      	ldrb	r2, [r3, r2]
 801f6a6:	7202      	strb	r2, [r0, #8]
 801f6a8:	7b02      	ldrb	r2, [r0, #12]
 801f6aa:	5c9a      	ldrb	r2, [r3, r2]
 801f6ac:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 801f6ae:	7842      	ldrb	r2, [r0, #1]
 801f6b0:	7941      	ldrb	r1, [r0, #5]
 801f6b2:	5c59      	ldrb	r1, [r3, r1]
 801f6b4:	7041      	strb	r1, [r0, #1]
 801f6b6:	7a41      	ldrb	r1, [r0, #9]
 801f6b8:	5c59      	ldrb	r1, [r3, r1]
 801f6ba:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 801f6bc:	7b41      	ldrb	r1, [r0, #13]
 801f6be:	5c59      	ldrb	r1, [r3, r1]
 801f6c0:	7241      	strb	r1, [r0, #9]
 801f6c2:	5c9a      	ldrb	r2, [r3, r2]
 801f6c4:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 801f6c6:	7882      	ldrb	r2, [r0, #2]
 801f6c8:	7a81      	ldrb	r1, [r0, #10]
 801f6ca:	5c59      	ldrb	r1, [r3, r1]
 801f6cc:	7081      	strb	r1, [r0, #2]
 801f6ce:	5c9a      	ldrb	r2, [r3, r2]
 801f6d0:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 801f6d2:	7982      	ldrb	r2, [r0, #6]
 801f6d4:	7b81      	ldrb	r1, [r0, #14]
 801f6d6:	5c59      	ldrb	r1, [r3, r1]
 801f6d8:	7181      	strb	r1, [r0, #6]
 801f6da:	5c9a      	ldrb	r2, [r3, r2]
 801f6dc:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 801f6de:	7bc2      	ldrb	r2, [r0, #15]
 801f6e0:	7ac1      	ldrb	r1, [r0, #11]
 801f6e2:	5c59      	ldrb	r1, [r3, r1]
 801f6e4:	73c1      	strb	r1, [r0, #15]
 801f6e6:	79c1      	ldrb	r1, [r0, #7]
 801f6e8:	5c59      	ldrb	r1, [r3, r1]
 801f6ea:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 801f6ec:	78c1      	ldrb	r1, [r0, #3]
 801f6ee:	5c59      	ldrb	r1, [r3, r1]
 801f6f0:	71c1      	strb	r1, [r0, #7]
 801f6f2:	5c9b      	ldrb	r3, [r3, r2]
 801f6f4:	70c3      	strb	r3, [r0, #3]
}
 801f6f6:	4770      	bx	lr
 801f6f8:	080287f4 	.word	0x080287f4

0801f6fc <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 801f6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f700:	b084      	sub	sp, #16
 801f702:	4604      	mov	r4, r0
    block_copy(st, dt);
 801f704:	4601      	mov	r1, r0
 801f706:	4668      	mov	r0, sp
 801f708:	f7ff ff11 	bl	801f52e <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 801f70c:	f89d c000 	ldrb.w	ip, [sp]
 801f710:	4b68      	ldr	r3, [pc, #416]	; (801f8b4 <mix_sub_columns+0x1b8>)
 801f712:	f813 000c 	ldrb.w	r0, [r3, ip]
 801f716:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801f71a:	4a67      	ldr	r2, [pc, #412]	; (801f8b8 <mix_sub_columns+0x1bc>)
 801f71c:	f812 9008 	ldrb.w	r9, [r2, r8]
 801f720:	f89d e00a 	ldrb.w	lr, [sp, #10]
 801f724:	4965      	ldr	r1, [pc, #404]	; (801f8bc <mix_sub_columns+0x1c0>)
 801f726:	f811 500e 	ldrb.w	r5, [r1, lr]
 801f72a:	f89d 700f 	ldrb.w	r7, [sp, #15]
 801f72e:	5dce      	ldrb	r6, [r1, r7]
 801f730:	ea80 0009 	eor.w	r0, r0, r9
 801f734:	4068      	eors	r0, r5
 801f736:	4070      	eors	r0, r6
 801f738:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 801f73a:	f811 000c 	ldrb.w	r0, [r1, ip]
 801f73e:	f813 a008 	ldrb.w	sl, [r3, r8]
 801f742:	f812 900e 	ldrb.w	r9, [r2, lr]
 801f746:	ea80 0a0a 	eor.w	sl, r0, sl
 801f74a:	ea89 090a 	eor.w	r9, r9, sl
 801f74e:	ea86 0609 	eor.w	r6, r6, r9
 801f752:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 801f754:	f811 8008 	ldrb.w	r8, [r1, r8]
 801f758:	f813 e00e 	ldrb.w	lr, [r3, lr]
 801f75c:	5dd6      	ldrb	r6, [r2, r7]
 801f75e:	ea80 0008 	eor.w	r0, r0, r8
 801f762:	ea8e 0000 	eor.w	r0, lr, r0
 801f766:	4070      	eors	r0, r6
 801f768:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 801f76a:	f812 600c 	ldrb.w	r6, [r2, ip]
 801f76e:	5dd8      	ldrb	r0, [r3, r7]
 801f770:	ea86 0608 	eor.w	r6, r6, r8
 801f774:	4075      	eors	r5, r6
 801f776:	4045      	eors	r5, r0
 801f778:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 801f77a:	f89d c004 	ldrb.w	ip, [sp, #4]
 801f77e:	f813 000c 	ldrb.w	r0, [r3, ip]
 801f782:	f89d 8009 	ldrb.w	r8, [sp, #9]
 801f786:	f812 9008 	ldrb.w	r9, [r2, r8]
 801f78a:	f89d e00e 	ldrb.w	lr, [sp, #14]
 801f78e:	f811 500e 	ldrb.w	r5, [r1, lr]
 801f792:	f89d 7003 	ldrb.w	r7, [sp, #3]
 801f796:	5dce      	ldrb	r6, [r1, r7]
 801f798:	ea80 0009 	eor.w	r0, r0, r9
 801f79c:	4068      	eors	r0, r5
 801f79e:	4070      	eors	r0, r6
 801f7a0:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 801f7a2:	f811 000c 	ldrb.w	r0, [r1, ip]
 801f7a6:	f813 a008 	ldrb.w	sl, [r3, r8]
 801f7aa:	f812 900e 	ldrb.w	r9, [r2, lr]
 801f7ae:	ea80 0a0a 	eor.w	sl, r0, sl
 801f7b2:	ea89 090a 	eor.w	r9, r9, sl
 801f7b6:	ea86 0609 	eor.w	r6, r6, r9
 801f7ba:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 801f7bc:	f811 8008 	ldrb.w	r8, [r1, r8]
 801f7c0:	f813 e00e 	ldrb.w	lr, [r3, lr]
 801f7c4:	5dd6      	ldrb	r6, [r2, r7]
 801f7c6:	ea80 0008 	eor.w	r0, r0, r8
 801f7ca:	ea8e 0000 	eor.w	r0, lr, r0
 801f7ce:	4070      	eors	r0, r6
 801f7d0:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 801f7d2:	f812 600c 	ldrb.w	r6, [r2, ip]
 801f7d6:	5dd8      	ldrb	r0, [r3, r7]
 801f7d8:	ea86 0608 	eor.w	r6, r6, r8
 801f7dc:	4075      	eors	r5, r6
 801f7de:	4045      	eors	r5, r0
 801f7e0:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 801f7e2:	f89d c008 	ldrb.w	ip, [sp, #8]
 801f7e6:	f813 000c 	ldrb.w	r0, [r3, ip]
 801f7ea:	f89d 800d 	ldrb.w	r8, [sp, #13]
 801f7ee:	f812 9008 	ldrb.w	r9, [r2, r8]
 801f7f2:	f89d e002 	ldrb.w	lr, [sp, #2]
 801f7f6:	f811 500e 	ldrb.w	r5, [r1, lr]
 801f7fa:	f89d 7007 	ldrb.w	r7, [sp, #7]
 801f7fe:	5dce      	ldrb	r6, [r1, r7]
 801f800:	ea80 0009 	eor.w	r0, r0, r9
 801f804:	4068      	eors	r0, r5
 801f806:	4070      	eors	r0, r6
 801f808:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 801f80a:	f811 000c 	ldrb.w	r0, [r1, ip]
 801f80e:	f813 a008 	ldrb.w	sl, [r3, r8]
 801f812:	f812 900e 	ldrb.w	r9, [r2, lr]
 801f816:	ea80 0a0a 	eor.w	sl, r0, sl
 801f81a:	ea89 090a 	eor.w	r9, r9, sl
 801f81e:	ea86 0609 	eor.w	r6, r6, r9
 801f822:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 801f824:	f811 8008 	ldrb.w	r8, [r1, r8]
 801f828:	f813 e00e 	ldrb.w	lr, [r3, lr]
 801f82c:	5dd6      	ldrb	r6, [r2, r7]
 801f82e:	ea80 0008 	eor.w	r0, r0, r8
 801f832:	ea8e 0000 	eor.w	r0, lr, r0
 801f836:	4070      	eors	r0, r6
 801f838:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 801f83a:	f812 600c 	ldrb.w	r6, [r2, ip]
 801f83e:	5dd8      	ldrb	r0, [r3, r7]
 801f840:	ea86 0608 	eor.w	r6, r6, r8
 801f844:	4075      	eors	r5, r6
 801f846:	4045      	eors	r5, r0
 801f848:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 801f84a:	f89d c00c 	ldrb.w	ip, [sp, #12]
 801f84e:	f813 000c 	ldrb.w	r0, [r3, ip]
 801f852:	f89d 8001 	ldrb.w	r8, [sp, #1]
 801f856:	f812 9008 	ldrb.w	r9, [r2, r8]
 801f85a:	f89d e006 	ldrb.w	lr, [sp, #6]
 801f85e:	f811 500e 	ldrb.w	r5, [r1, lr]
 801f862:	f89d 700b 	ldrb.w	r7, [sp, #11]
 801f866:	5dce      	ldrb	r6, [r1, r7]
 801f868:	ea80 0009 	eor.w	r0, r0, r9
 801f86c:	4068      	eors	r0, r5
 801f86e:	4070      	eors	r0, r6
 801f870:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 801f872:	f811 000c 	ldrb.w	r0, [r1, ip]
 801f876:	f813 a008 	ldrb.w	sl, [r3, r8]
 801f87a:	f812 900e 	ldrb.w	r9, [r2, lr]
 801f87e:	ea80 0a0a 	eor.w	sl, r0, sl
 801f882:	ea89 090a 	eor.w	r9, r9, sl
 801f886:	ea86 0609 	eor.w	r6, r6, r9
 801f88a:	7366      	strb	r6, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 801f88c:	f811 1008 	ldrb.w	r1, [r1, r8]
 801f890:	f813 e00e 	ldrb.w	lr, [r3, lr]
 801f894:	5dd6      	ldrb	r6, [r2, r7]
 801f896:	4048      	eors	r0, r1
 801f898:	ea8e 0000 	eor.w	r0, lr, r0
 801f89c:	4070      	eors	r0, r6
 801f89e:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 801f8a0:	f812 200c 	ldrb.w	r2, [r2, ip]
 801f8a4:	5ddb      	ldrb	r3, [r3, r7]
 801f8a6:	4051      	eors	r1, r2
 801f8a8:	404d      	eors	r5, r1
 801f8aa:	405d      	eors	r5, r3
 801f8ac:	73e5      	strb	r5, [r4, #15]
  }
 801f8ae:	b004      	add	sp, #16
 801f8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f8b4:	080285f4 	.word	0x080285f4
 801f8b8:	080286f4 	.word	0x080286f4
 801f8bc:	080287f4 	.word	0x080287f4

0801f8c0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 801f8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f8c4:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 801f8c6:	f1a1 0310 	sub.w	r3, r1, #16
 801f8ca:	b2da      	uxtb	r2, r3
 801f8cc:	2a10      	cmp	r2, #16
 801f8ce:	d807      	bhi.n	801f8e0 <lorawan_aes_set_key+0x20>
 801f8d0:	460d      	mov	r5, r1
 801f8d2:	2301      	movs	r3, #1
 801f8d4:	4093      	lsls	r3, r2
 801f8d6:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 801f8da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801f8de:	b92b      	cbnz	r3, 801f8ec <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 801f8e0:	2300      	movs	r3, #0
 801f8e2:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 801f8e6:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 801f8e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 801f8ec:	460a      	mov	r2, r1
 801f8ee:	4601      	mov	r1, r0
 801f8f0:	4620      	mov	r0, r4
 801f8f2:	f7ff fe3d 	bl	801f570 <copy_block_nn>
    hi = (keylen + 28) << 2;
 801f8f6:	f105 031c 	add.w	r3, r5, #28
 801f8fa:	b2db      	uxtb	r3, r3
 801f8fc:	009b      	lsls	r3, r3, #2
 801f8fe:	b2df      	uxtb	r7, r3
    ctx->rnd = (hi >> 4) - 1;
 801f900:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801f904:	3b01      	subs	r3, #1
 801f906:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 801f90a:	462b      	mov	r3, r5
 801f90c:	2601      	movs	r6, #1
 801f90e:	e028      	b.n	801f962 <lorawan_aes_set_key+0xa2>
        else if( keylen > 24 && cc % keylen == 16 )
 801f910:	2d18      	cmp	r5, #24
 801f912:	d901      	bls.n	801f918 <lorawan_aes_set_key+0x58>
 801f914:	2a10      	cmp	r2, #16
 801f916:	d04f      	beq.n	801f9b8 <lorawan_aes_set_key+0xf8>
        tt = cc - keylen;
 801f918:	1b5a      	subs	r2, r3, r5
 801f91a:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 801f91c:	f814 9002 	ldrb.w	r9, [r4, r2]
 801f920:	ea89 0808 	eor.w	r8, r9, r8
 801f924:	f804 8001 	strb.w	r8, [r4, r1]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 801f928:	f102 0801 	add.w	r8, r2, #1
 801f92c:	f814 8008 	ldrb.w	r8, [r4, r8]
 801f930:	f101 0901 	add.w	r9, r1, #1
 801f934:	ea88 0e0e 	eor.w	lr, r8, lr
 801f938:	f804 e009 	strb.w	lr, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 801f93c:	f102 0e02 	add.w	lr, r2, #2
 801f940:	f814 e00e 	ldrb.w	lr, [r4, lr]
 801f944:	f101 0802 	add.w	r8, r1, #2
 801f948:	ea8e 0c0c 	eor.w	ip, lr, ip
 801f94c:	f804 c008 	strb.w	ip, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 801f950:	3203      	adds	r2, #3
 801f952:	f814 c002 	ldrb.w	ip, [r4, r2]
 801f956:	1cca      	adds	r2, r1, #3
 801f958:	ea8c 0000 	eor.w	r0, ip, r0
 801f95c:	54a0      	strb	r0, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 801f95e:	3304      	adds	r3, #4
 801f960:	b2db      	uxtb	r3, r3
 801f962:	42bb      	cmp	r3, r7
 801f964:	d231      	bcs.n	801f9ca <lorawan_aes_set_key+0x10a>
        t0 = ctx->ksch[cc - 4];
 801f966:	4619      	mov	r1, r3
 801f968:	1f1a      	subs	r2, r3, #4
 801f96a:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 801f96e:	1eda      	subs	r2, r3, #3
 801f970:	f814 e002 	ldrb.w	lr, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 801f974:	1e9a      	subs	r2, r3, #2
 801f976:	f814 c002 	ldrb.w	ip, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 801f97a:	1e5a      	subs	r2, r3, #1
 801f97c:	5ca0      	ldrb	r0, [r4, r2]
        if( cc % keylen == 0 )
 801f97e:	fbb3 f2f5 	udiv	r2, r3, r5
 801f982:	fb05 3212 	mls	r2, r5, r2, r3
 801f986:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801f98a:	d1c1      	bne.n	801f910 <lorawan_aes_set_key+0x50>
            t0 = s_box(t1) ^ rc;
 801f98c:	4a10      	ldr	r2, [pc, #64]	; (801f9d0 <lorawan_aes_set_key+0x110>)
 801f98e:	f812 900e 	ldrb.w	r9, [r2, lr]
 801f992:	ea89 0906 	eor.w	r9, r9, r6
            t1 = s_box(t2);
 801f996:	f812 e00c 	ldrb.w	lr, [r2, ip]
            t2 = s_box(t3);
 801f99a:	f812 c000 	ldrb.w	ip, [r2, r0]
            t3 = s_box(tt);
 801f99e:	f812 0008 	ldrb.w	r0, [r2, r8]
            rc = f2(rc);
 801f9a2:	09f2      	lsrs	r2, r6, #7
 801f9a4:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801f9a8:	4442      	add	r2, r8
 801f9aa:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 801f9ae:	ea82 0646 	eor.w	r6, r2, r6, lsl #1
 801f9b2:	b2f6      	uxtb	r6, r6
            t0 = s_box(t1) ^ rc;
 801f9b4:	46c8      	mov	r8, r9
 801f9b6:	e7af      	b.n	801f918 <lorawan_aes_set_key+0x58>
            t0 = s_box(t0);
 801f9b8:	4a05      	ldr	r2, [pc, #20]	; (801f9d0 <lorawan_aes_set_key+0x110>)
 801f9ba:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 801f9be:	f812 e00e 	ldrb.w	lr, [r2, lr]
            t2 = s_box(t2);
 801f9c2:	f812 c00c 	ldrb.w	ip, [r2, ip]
            t3 = s_box(t3);
 801f9c6:	5c10      	ldrb	r0, [r2, r0]
 801f9c8:	e7a6      	b.n	801f918 <lorawan_aes_set_key+0x58>
    return 0;
 801f9ca:	2000      	movs	r0, #0
 801f9cc:	e78c      	b.n	801f8e8 <lorawan_aes_set_key+0x28>
 801f9ce:	bf00      	nop
 801f9d0:	080287f4 	.word	0x080287f4

0801f9d4 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 801f9d4:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 801f9d8:	b323      	cbz	r3, 801fa24 <lorawan_aes_encrypt+0x50>
{
 801f9da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f9dc:	b085      	sub	sp, #20
 801f9de:	460f      	mov	r7, r1
 801f9e0:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 801f9e2:	4616      	mov	r6, r2
 801f9e4:	4601      	mov	r1, r0
 801f9e6:	4668      	mov	r0, sp
 801f9e8:	f7ff fe0d 	bl	801f606 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 801f9ec:	2401      	movs	r4, #1
 801f9ee:	e009      	b.n	801fa04 <lorawan_aes_encrypt+0x30>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 801f9f0:	4668      	mov	r0, sp
 801f9f2:	f7ff fe83 	bl	801f6fc <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 801f9f6:	eb06 1104 	add.w	r1, r6, r4, lsl #4
 801f9fa:	4668      	mov	r0, sp
 801f9fc:	f7ff fe46 	bl	801f68c <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 801fa00:	3401      	adds	r4, #1
 801fa02:	b2e4      	uxtb	r4, r4
 801fa04:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 801fa08:	42a3      	cmp	r3, r4
 801fa0a:	d8f1      	bhi.n	801f9f0 <lorawan_aes_encrypt+0x1c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 801fa0c:	4668      	mov	r0, sp
 801fa0e:	f7ff fe41 	bl	801f694 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 801fa12:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 801fa16:	4669      	mov	r1, sp
 801fa18:	4638      	mov	r0, r7
 801fa1a:	f7ff fdf4 	bl	801f606 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 801fa1e:	2000      	movs	r0, #0
}
 801fa20:	b005      	add	sp, #20
 801fa22:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ( uint8_t )-1;
 801fa24:	20ff      	movs	r0, #255	; 0xff
}
 801fa26:	4770      	bx	lr

0801fa28 <GetKeyByID>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801fa28:	2300      	movs	r3, #0
 801fa2a:	2b09      	cmp	r3, #9
 801fa2c:	d816      	bhi.n	801fa5c <GetKeyByID+0x34>
{
 801fa2e:	b430      	push	{r4, r5}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 801fa30:	4a0b      	ldr	r2, [pc, #44]	; (801fa60 <GetKeyByID+0x38>)
 801fa32:	6814      	ldr	r4, [r2, #0]
 801fa34:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 801fa38:	4422      	add	r2, r4
 801fa3a:	7c12      	ldrb	r2, [r2, #16]
 801fa3c:	4282      	cmp	r2, r0
 801fa3e:	d006      	beq.n	801fa4e <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801fa40:	3301      	adds	r3, #1
 801fa42:	b2db      	uxtb	r3, r3
 801fa44:	2b09      	cmp	r3, #9
 801fa46:	d9f3      	bls.n	801fa30 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801fa48:	2003      	movs	r0, #3
}
 801fa4a:	bc30      	pop	{r4, r5}
 801fa4c:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 801fa4e:	eb03 1503 	add.w	r5, r3, r3, lsl #4
 801fa52:	3510      	adds	r5, #16
 801fa54:	442c      	add	r4, r5
 801fa56:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 801fa58:	2000      	movs	r0, #0
 801fa5a:	e7f6      	b.n	801fa4a <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801fa5c:	2003      	movs	r0, #3
}
 801fa5e:	4770      	bx	lr
 801fa60:	20001ba0 	.word	0x20001ba0

0801fa64 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 801fa64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa68:	b0cc      	sub	sp, #304	; 0x130
 801fa6a:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 801fa6c:	b3a9      	cbz	r1, 801fada <ComputeCmac+0x76>
 801fa6e:	4605      	mov	r5, r0
 801fa70:	4617      	mov	r7, r2
 801fa72:	461c      	mov	r4, r3
 801fa74:	4688      	mov	r8, r1
 801fa76:	b396      	cbz	r6, 801fade <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 801fa78:	a802      	add	r0, sp, #8
 801fa7a:	f7ff fc07 	bl	801f28c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 801fa7e:	a901      	add	r1, sp, #4
 801fa80:	4620      	mov	r0, r4
 801fa82:	f7ff ffd1 	bl	801fa28 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 801fa86:	4604      	mov	r4, r0
 801fa88:	b118      	cbz	r0, 801fa92 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 801fa8a:	4620      	mov	r0, r4
 801fa8c:	b04c      	add	sp, #304	; 0x130
 801fa8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 801fa92:	9901      	ldr	r1, [sp, #4]
 801fa94:	3101      	adds	r1, #1
 801fa96:	a802      	add	r0, sp, #8
 801fa98:	f7ff fc07 	bl	801f2aa <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 801fa9c:	b125      	cbz	r5, 801faa8 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 801fa9e:	2210      	movs	r2, #16
 801faa0:	4629      	mov	r1, r5
 801faa2:	a802      	add	r0, sp, #8
 801faa4:	f7ff fc08 	bl	801f2b8 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 801faa8:	463a      	mov	r2, r7
 801faaa:	4641      	mov	r1, r8
 801faac:	a802      	add	r0, sp, #8
 801faae:	f7ff fc03 	bl	801f2b8 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 801fab2:	a902      	add	r1, sp, #8
 801fab4:	a848      	add	r0, sp, #288	; 0x120
 801fab6:	f7ff fc71 	bl	801f39c <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 801faba:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 801fabe:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 801fac2:	041b      	lsls	r3, r3, #16
 801fac4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801fac8:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 801facc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 801fad0:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 801fad4:	4313      	orrs	r3, r2
 801fad6:	6033      	str	r3, [r6, #0]
 801fad8:	e7d7      	b.n	801fa8a <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 801fada:	2402      	movs	r4, #2
 801fadc:	e7d5      	b.n	801fa8a <ComputeCmac+0x26>
 801fade:	2402      	movs	r4, #2
 801fae0:	e7d3      	b.n	801fa8a <ComputeCmac+0x26>
	...

0801fae4 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 801fae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fae6:	b0b1      	sub	sp, #196	; 0xc4
 801fae8:	4606      	mov	r6, r0
 801faea:	460f      	mov	r7, r1
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 801faec:	22b0      	movs	r2, #176	; 0xb0
 801faee:	2100      	movs	r1, #0
 801faf0:	a804      	add	r0, sp, #16
 801faf2:	f004 fa11 	bl	8023f18 <memset>
 801faf6:	4a2f      	ldr	r2, [pc, #188]	; (801fbb4 <SecureElementInit+0xd0>)
 801faf8:	466b      	mov	r3, sp
 801fafa:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fafe:	e883 0003 	stmia.w	r3, {r0, r1}
 801fb02:	4a2d      	ldr	r2, [pc, #180]	; (801fbb8 <SecureElementInit+0xd4>)
 801fb04:	ab02      	add	r3, sp, #8
 801fb06:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fb0a:	e883 0003 	stmia.w	r3, {r0, r1}
 801fb0e:	4c2b      	ldr	r4, [pc, #172]	; (801fbbc <SecureElementInit+0xd8>)
 801fb10:	4625      	mov	r5, r4
 801fb12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801fb14:	f8cd 0011 	str.w	r0, [sp, #17]
 801fb18:	f8cd 1015 	str.w	r1, [sp, #21]
 801fb1c:	f8cd 2019 	str.w	r2, [sp, #25]
 801fb20:	f8cd 301d 	str.w	r3, [sp, #29]
 801fb24:	2301      	movs	r3, #1
 801fb26:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801fb2a:	4625      	mov	r5, r4
 801fb2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801fb2e:	f8cd 0022 	str.w	r0, [sp, #34]	; 0x22
 801fb32:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 801fb36:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 801fb3a:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
 801fb3e:	2302      	movs	r3, #2
 801fb40:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 801fb44:	4625      	mov	r5, r4
 801fb46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801fb48:	f8cd 0033 	str.w	r0, [sp, #51]	; 0x33
 801fb4c:	f8cd 1037 	str.w	r1, [sp, #55]	; 0x37
 801fb50:	f8cd 203b 	str.w	r2, [sp, #59]	; 0x3b
 801fb54:	f8cd 303f 	str.w	r3, [sp, #63]	; 0x3f
 801fb58:	2303      	movs	r3, #3
 801fb5a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 801fb5e:	ad11      	add	r5, sp, #68	; 0x44
 801fb60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801fb64:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801fb68:	2304      	movs	r3, #4
 801fb6a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 801fb6e:	237f      	movs	r3, #127	; 0x7f
 801fb70:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
 801fb74:	2380      	movs	r3, #128	; 0x80
 801fb76:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
 801fb7a:	2381      	movs	r3, #129	; 0x81
 801fb7c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 801fb80:	2382      	movs	r3, #130	; 0x82
 801fb82:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 801fb86:	2383      	movs	r3, #131	; 0x83
 801fb88:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 801fb8c:	b16e      	cbz	r6, 801fbaa <SecureElementInit+0xc6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 801fb8e:	4b0c      	ldr	r3, [pc, #48]	; (801fbc0 <SecureElementInit+0xdc>)
 801fb90:	601e      	str	r6, [r3, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 801fb92:	22c0      	movs	r2, #192	; 0xc0
 801fb94:	4669      	mov	r1, sp
 801fb96:	4630      	mov	r0, r6
 801fb98:	f000 f995 	bl	801fec6 <memcpy1>
    PrintKey(NWK_S_KEY);
#endif /* KEY_EXTRACTABLE */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 801fb9c:	b13f      	cbz	r7, 801fbae <SecureElementInit+0xca>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 801fb9e:	4b08      	ldr	r3, [pc, #32]	; (801fbc0 <SecureElementInit+0xdc>)
 801fba0:	6818      	ldr	r0, [r3, #0]
 801fba2:	47b8      	blx	r7
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 801fba4:	2000      	movs	r0, #0
}
 801fba6:	b031      	add	sp, #196	; 0xc4
 801fba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801fbaa:	2002      	movs	r0, #2
 801fbac:	e7fb      	b.n	801fba6 <SecureElementInit+0xc2>
    return SECURE_ELEMENT_SUCCESS;
 801fbae:	2000      	movs	r0, #0
 801fbb0:	e7f9      	b.n	801fba6 <SecureElementInit+0xc2>
 801fbb2:	bf00      	nop
 801fbb4:	08024bf0 	.word	0x08024bf0
 801fbb8:	080288f4 	.word	0x080288f4
 801fbbc:	08028900 	.word	0x08028900
 801fbc0:	20001ba0 	.word	0x20001ba0

0801fbc4 <SecureElementGetKeyByID>:
/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 801fbc4:	2300      	movs	r3, #0
 801fbc6:	2b09      	cmp	r3, #9
 801fbc8:	d816      	bhi.n	801fbf8 <SecureElementGetKeyByID+0x34>
{
 801fbca:	b430      	push	{r4, r5}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 801fbcc:	4a0b      	ldr	r2, [pc, #44]	; (801fbfc <SecureElementGetKeyByID+0x38>)
 801fbce:	6814      	ldr	r4, [r2, #0]
 801fbd0:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 801fbd4:	4422      	add	r2, r4
 801fbd6:	7c12      	ldrb	r2, [r2, #16]
 801fbd8:	4282      	cmp	r2, r0
 801fbda:	d006      	beq.n	801fbea <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 801fbdc:	3301      	adds	r3, #1
 801fbde:	b2db      	uxtb	r3, r3
 801fbe0:	2b09      	cmp	r3, #9
 801fbe2:	d9f3      	bls.n	801fbcc <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801fbe4:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 801fbe6:	bc30      	pop	{r4, r5}
 801fbe8:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 801fbea:	eb03 1503 	add.w	r5, r3, r3, lsl #4
 801fbee:	3510      	adds	r5, #16
 801fbf0:	442c      	add	r4, r5
 801fbf2:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 801fbf4:	2000      	movs	r0, #0
 801fbf6:	e7f6      	b.n	801fbe6 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801fbf8:	2003      	movs	r0, #3
}
 801fbfa:	4770      	bx	lr
 801fbfc:	20001ba0 	.word	0x20001ba0

0801fc00 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 801fc00:	2b7e      	cmp	r3, #126	; 0x7e
 801fc02:	d807      	bhi.n	801fc14 <SecureElementComputeAesCmac+0x14>
{
 801fc04:	b510      	push	{r4, lr}
 801fc06:	b082      	sub	sp, #8
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 801fc08:	9c04      	ldr	r4, [sp, #16]
 801fc0a:	9400      	str	r4, [sp, #0]
 801fc0c:	f7ff ff2a 	bl	801fa64 <ComputeCmac>
}
 801fc10:	b002      	add	sp, #8
 801fc12:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801fc14:	2003      	movs	r0, #3
}
 801fc16:	4770      	bx	lr

0801fc18 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 801fc18:	b190      	cbz	r0, 801fc40 <SecureElementVerifyAesCmac+0x28>
{
 801fc1a:	b530      	push	{r4, r5, lr}
 801fc1c:	b085      	sub	sp, #20
 801fc1e:	460c      	mov	r4, r1
 801fc20:	4615      	mov	r5, r2
 801fc22:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 801fc24:	2000      	movs	r0, #0
 801fc26:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 801fc28:	aa03      	add	r2, sp, #12
 801fc2a:	9200      	str	r2, [sp, #0]
 801fc2c:	4622      	mov	r2, r4
 801fc2e:	f7ff ff19 	bl	801fa64 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 801fc32:	b918      	cbnz	r0, 801fc3c <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 801fc34:	9b03      	ldr	r3, [sp, #12]
 801fc36:	42ab      	cmp	r3, r5
 801fc38:	d000      	beq.n	801fc3c <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 801fc3a:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 801fc3c:	b005      	add	sp, #20
 801fc3e:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801fc40:	2002      	movs	r0, #2
}
 801fc42:	4770      	bx	lr

0801fc44 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 801fc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc48:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 801fc4a:	b350      	cbz	r0, 801fca2 <SecureElementAesEncrypt+0x5e>
 801fc4c:	460c      	mov	r4, r1
 801fc4e:	4615      	mov	r5, r2
 801fc50:	461e      	mov	r6, r3
 801fc52:	4607      	mov	r7, r0
 801fc54:	b343      	cbz	r3, 801fca8 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 801fc56:	f011 0f0f 	tst.w	r1, #15
 801fc5a:	d128      	bne.n	801fcae <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 801fc5c:	22f0      	movs	r2, #240	; 0xf0
 801fc5e:	2100      	movs	r1, #0
 801fc60:	a801      	add	r0, sp, #4
 801fc62:	f000 f946 	bl	801fef2 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 801fc66:	4669      	mov	r1, sp
 801fc68:	4628      	mov	r0, r5
 801fc6a:	f7ff fedd 	bl	801fa28 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 801fc6e:	4680      	mov	r8, r0
 801fc70:	b118      	cbz	r0, 801fc7a <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 801fc72:	4640      	mov	r0, r8
 801fc74:	b03e      	add	sp, #248	; 0xf8
 801fc76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 801fc7a:	aa01      	add	r2, sp, #4
 801fc7c:	2110      	movs	r1, #16
 801fc7e:	9800      	ldr	r0, [sp, #0]
 801fc80:	3001      	adds	r0, #1
 801fc82:	f7ff fe1d 	bl	801f8c0 <lorawan_aes_set_key>
        uint8_t block = 0;
 801fc86:	4645      	mov	r5, r8
        while( size != 0 )
 801fc88:	e008      	b.n	801fc9c <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 801fc8a:	aa01      	add	r2, sp, #4
 801fc8c:	1971      	adds	r1, r6, r5
 801fc8e:	1978      	adds	r0, r7, r5
 801fc90:	f7ff fea0 	bl	801f9d4 <lorawan_aes_encrypt>
            block = block + 16;
 801fc94:	3510      	adds	r5, #16
 801fc96:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 801fc98:	3c10      	subs	r4, #16
 801fc9a:	b2a4      	uxth	r4, r4
        while( size != 0 )
 801fc9c:	2c00      	cmp	r4, #0
 801fc9e:	d1f4      	bne.n	801fc8a <SecureElementAesEncrypt+0x46>
 801fca0:	e7e7      	b.n	801fc72 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 801fca2:	f04f 0802 	mov.w	r8, #2
 801fca6:	e7e4      	b.n	801fc72 <SecureElementAesEncrypt+0x2e>
 801fca8:	f04f 0802 	mov.w	r8, #2
 801fcac:	e7e1      	b.n	801fc72 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801fcae:	f04f 0805 	mov.w	r8, #5
 801fcb2:	e7de      	b.n	801fc72 <SecureElementAesEncrypt+0x2e>

0801fcb4 <SecureElementSetKey>:
{
 801fcb4:	b530      	push	{r4, r5, lr}
 801fcb6:	b085      	sub	sp, #20
    if( key == NULL )
 801fcb8:	2900      	cmp	r1, #0
 801fcba:	d038      	beq.n	801fd2e <SecureElementSetKey+0x7a>
 801fcbc:	460d      	mov	r5, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801fcbe:	2300      	movs	r3, #0
 801fcc0:	2b09      	cmp	r3, #9
 801fcc2:	d830      	bhi.n	801fd26 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 801fcc4:	4a1b      	ldr	r2, [pc, #108]	; (801fd34 <SecureElementSetKey+0x80>)
 801fcc6:	6811      	ldr	r1, [r2, #0]
 801fcc8:	461c      	mov	r4, r3
 801fcca:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 801fcce:	440a      	add	r2, r1
 801fcd0:	7c12      	ldrb	r2, [r2, #16]
 801fcd2:	4282      	cmp	r2, r0
 801fcd4:	d002      	beq.n	801fcdc <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801fcd6:	3301      	adds	r3, #1
 801fcd8:	b2db      	uxtb	r3, r3
 801fcda:	e7f1      	b.n	801fcc0 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 801fcdc:	2880      	cmp	r0, #128	; 0x80
 801fcde:	d00a      	beq.n	801fcf6 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 801fce0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fce4:	3310      	adds	r3, #16
 801fce6:	440b      	add	r3, r1
 801fce8:	2210      	movs	r2, #16
 801fcea:	4629      	mov	r1, r5
 801fcec:	1c58      	adds	r0, r3, #1
 801fcee:	f000 f8ea 	bl	801fec6 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 801fcf2:	2500      	movs	r5, #0
 801fcf4:	e018      	b.n	801fd28 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 801fcf6:	2300      	movs	r3, #0
 801fcf8:	9300      	str	r3, [sp, #0]
 801fcfa:	9301      	str	r3, [sp, #4]
 801fcfc:	9302      	str	r3, [sp, #8]
 801fcfe:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 801fd00:	466b      	mov	r3, sp
 801fd02:	227f      	movs	r2, #127	; 0x7f
 801fd04:	2110      	movs	r1, #16
 801fd06:	4628      	mov	r0, r5
 801fd08:	f7ff ff9c 	bl	801fc44 <SecureElementAesEncrypt>
 801fd0c:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 801fd0e:	4b09      	ldr	r3, [pc, #36]	; (801fd34 <SecureElementSetKey+0x80>)
 801fd10:	6818      	ldr	r0, [r3, #0]
 801fd12:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801fd16:	3410      	adds	r4, #16
 801fd18:	4420      	add	r0, r4
 801fd1a:	2210      	movs	r2, #16
 801fd1c:	4669      	mov	r1, sp
 801fd1e:	3001      	adds	r0, #1
 801fd20:	f000 f8d1 	bl	801fec6 <memcpy1>
                return retval;
 801fd24:	e000      	b.n	801fd28 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801fd26:	2503      	movs	r5, #3
}
 801fd28:	4628      	mov	r0, r5
 801fd2a:	b005      	add	sp, #20
 801fd2c:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801fd2e:	2502      	movs	r5, #2
 801fd30:	e7fa      	b.n	801fd28 <SecureElementSetKey+0x74>
 801fd32:	bf00      	nop
 801fd34:	20001ba0 	.word	0x20001ba0

0801fd38 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 801fd38:	b1d0      	cbz	r0, 801fd70 <SecureElementDeriveAndStoreKey+0x38>
{
 801fd3a:	b530      	push	{r4, r5, lr}
 801fd3c:	b085      	sub	sp, #20
 801fd3e:	4614      	mov	r4, r2
 801fd40:	4605      	mov	r5, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 801fd42:	2a7f      	cmp	r2, #127	; 0x7f
 801fd44:	d101      	bne.n	801fd4a <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 801fd46:	2904      	cmp	r1, #4
 801fd48:	d114      	bne.n	801fd74 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 801fd4a:	2300      	movs	r3, #0
 801fd4c:	9300      	str	r3, [sp, #0]
 801fd4e:	9301      	str	r3, [sp, #4]
 801fd50:	9302      	str	r3, [sp, #8]
 801fd52:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 801fd54:	466b      	mov	r3, sp
 801fd56:	460a      	mov	r2, r1
 801fd58:	2110      	movs	r1, #16
 801fd5a:	4628      	mov	r0, r5
 801fd5c:	f7ff ff72 	bl	801fc44 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 801fd60:	b108      	cbz	r0, 801fd66 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 801fd62:	b005      	add	sp, #20
 801fd64:	bd30      	pop	{r4, r5, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 801fd66:	4669      	mov	r1, sp
 801fd68:	4620      	mov	r0, r4
 801fd6a:	f7ff ffa3 	bl	801fcb4 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 801fd6e:	e7f8      	b.n	801fd62 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 801fd70:	2002      	movs	r0, #2
}
 801fd72:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801fd74:	2003      	movs	r0, #3
 801fd76:	e7f4      	b.n	801fd62 <SecureElementDeriveAndStoreKey+0x2a>

0801fd78 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 801fd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd7c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801fd80:	9d07      	ldr	r5, [sp, #28]
 801fd82:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 801fd84:	b37b      	cbz	r3, 801fde6 <SecureElementProcessJoinAccept+0x6e>
 801fd86:	4698      	mov	r8, r3
 801fd88:	b37d      	cbz	r5, 801fdea <SecureElementProcessJoinAccept+0x72>
 801fd8a:	b386      	cbz	r6, 801fdee <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 801fd8c:	2c21      	cmp	r4, #33	; 0x21
 801fd8e:	d830      	bhi.n	801fdf2 <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 801fd90:	b2a7      	uxth	r7, r4
 801fd92:	463a      	mov	r2, r7
 801fd94:	4619      	mov	r1, r3
 801fd96:	4628      	mov	r0, r5
 801fd98:	f000 f895 	bl	801fec6 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 801fd9c:	1e79      	subs	r1, r7, #1
 801fd9e:	1c6b      	adds	r3, r5, #1
 801fda0:	2201      	movs	r2, #1
 801fda2:	b289      	uxth	r1, r1
 801fda4:	eb08 0002 	add.w	r0, r8, r2
 801fda8:	f7ff ff4c 	bl	801fc44 <SecureElementAesEncrypt>
 801fdac:	bb20      	cbnz	r0, 801fdf8 <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 801fdae:	7aeb      	ldrb	r3, [r5, #11]
 801fdb0:	09db      	lsrs	r3, r3, #7
 801fdb2:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 801fdb4:	442c      	add	r4, r5
 801fdb6:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 801fdba:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801fdbe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 801fdc2:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801fdc6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 801fdca:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801fdce:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 801fdd2:	b99b      	cbnz	r3, 801fdfc <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 801fdd4:	1f39      	subs	r1, r7, #4
 801fdd6:	2301      	movs	r3, #1
 801fdd8:	b289      	uxth	r1, r1
 801fdda:	4628      	mov	r0, r5
 801fddc:	f7ff ff1c 	bl	801fc18 <SecureElementVerifyAesCmac>
 801fde0:	b140      	cbz	r0, 801fdf4 <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 801fde2:	2001      	movs	r0, #1
 801fde4:	e006      	b.n	801fdf4 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 801fde6:	2002      	movs	r0, #2
 801fde8:	e004      	b.n	801fdf4 <SecureElementProcessJoinAccept+0x7c>
 801fdea:	2002      	movs	r0, #2
 801fdec:	e002      	b.n	801fdf4 <SecureElementProcessJoinAccept+0x7c>
 801fdee:	2002      	movs	r0, #2
 801fdf0:	e000      	b.n	801fdf4 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801fdf2:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 801fdf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 801fdf8:	2007      	movs	r0, #7
 801fdfa:	e7fb      	b.n	801fdf4 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 801fdfc:	2004      	movs	r0, #4
 801fdfe:	e7f9      	b.n	801fdf4 <SecureElementProcessJoinAccept+0x7c>

0801fe00 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
    if( randomNum == NULL )
 801fe00:	b138      	cbz	r0, 801fe12 <SecureElementRandomNumber+0x12>
{
 801fe02:	b510      	push	{r4, lr}
 801fe04:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 801fe06:	4b04      	ldr	r3, [pc, #16]	; (801fe18 <SecureElementRandomNumber+0x18>)
 801fe08:	695b      	ldr	r3, [r3, #20]
 801fe0a:	4798      	blx	r3
 801fe0c:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 801fe0e:	2000      	movs	r0, #0
}
 801fe10:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801fe12:	2002      	movs	r0, #2
}
 801fe14:	4770      	bx	lr
 801fe16:	bf00      	nop
 801fe18:	08028984 	.word	0x08028984

0801fe1c <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 801fe1c:	b140      	cbz	r0, 801fe30 <SecureElementSetDevEui+0x14>
{
 801fe1e:	b508      	push	{r3, lr}
 801fe20:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 801fe22:	2208      	movs	r2, #8
 801fe24:	4b03      	ldr	r3, [pc, #12]	; (801fe34 <SecureElementSetDevEui+0x18>)
 801fe26:	6818      	ldr	r0, [r3, #0]
 801fe28:	f000 f84d 	bl	801fec6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801fe2c:	2000      	movs	r0, #0
}
 801fe2e:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801fe30:	2002      	movs	r0, #2
}
 801fe32:	4770      	bx	lr
 801fe34:	20001ba0 	.word	0x20001ba0

0801fe38 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 801fe38:	4b01      	ldr	r3, [pc, #4]	; (801fe40 <SecureElementGetDevEui+0x8>)
 801fe3a:	6818      	ldr	r0, [r3, #0]
 801fe3c:	4770      	bx	lr
 801fe3e:	bf00      	nop
 801fe40:	20001ba0 	.word	0x20001ba0

0801fe44 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 801fe44:	b148      	cbz	r0, 801fe5a <SecureElementSetJoinEui+0x16>
{
 801fe46:	b508      	push	{r3, lr}
 801fe48:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 801fe4a:	4b05      	ldr	r3, [pc, #20]	; (801fe60 <SecureElementSetJoinEui+0x1c>)
 801fe4c:	6818      	ldr	r0, [r3, #0]
 801fe4e:	2208      	movs	r2, #8
 801fe50:	4410      	add	r0, r2
 801fe52:	f000 f838 	bl	801fec6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801fe56:	2000      	movs	r0, #0
}
 801fe58:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801fe5a:	2002      	movs	r0, #2
}
 801fe5c:	4770      	bx	lr
 801fe5e:	bf00      	nop
 801fe60:	20001ba0 	.word	0x20001ba0

0801fe64 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 801fe64:	4b01      	ldr	r3, [pc, #4]	; (801fe6c <SecureElementGetJoinEui+0x8>)
 801fe66:	6818      	ldr	r0, [r3, #0]
}
 801fe68:	3008      	adds	r0, #8
 801fe6a:	4770      	bx	lr
 801fe6c:	20001ba0 	.word	0x20001ba0

0801fe70 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801fe70:	4b09      	ldr	r3, [pc, #36]	; (801fe98 <rand1+0x28>)
 801fe72:	6818      	ldr	r0, [r3, #0]
 801fe74:	4909      	ldr	r1, [pc, #36]	; (801fe9c <rand1+0x2c>)
 801fe76:	f243 0239 	movw	r2, #12345	; 0x3039
 801fe7a:	fb01 2000 	mla	r0, r1, r0, r2
 801fe7e:	6018      	str	r0, [r3, #0]
 801fe80:	2303      	movs	r3, #3
 801fe82:	fba3 2300 	umull	r2, r3, r3, r0
 801fe86:	1ac2      	subs	r2, r0, r3
 801fe88:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 801fe8c:	0f9b      	lsrs	r3, r3, #30
 801fe8e:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 801fe92:	1ac0      	subs	r0, r0, r3
 801fe94:	4770      	bx	lr
 801fe96:	bf00      	nop
 801fe98:	200001fc 	.word	0x200001fc
 801fe9c:	41c64e6d 	.word	0x41c64e6d

0801fea0 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 801fea0:	4b01      	ldr	r3, [pc, #4]	; (801fea8 <srand1+0x8>)
 801fea2:	6018      	str	r0, [r3, #0]
}
 801fea4:	4770      	bx	lr
 801fea6:	bf00      	nop
 801fea8:	200001fc 	.word	0x200001fc

0801feac <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801feac:	b538      	push	{r3, r4, r5, lr}
 801feae:	4605      	mov	r5, r0
 801feb0:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801feb2:	f7ff ffdd 	bl	801fe70 <rand1>
 801feb6:	1b61      	subs	r1, r4, r5
 801feb8:	3101      	adds	r1, #1
 801feba:	fb90 f3f1 	sdiv	r3, r0, r1
 801febe:	fb01 0013 	mls	r0, r1, r3, r0
}
 801fec2:	4428      	add	r0, r5
 801fec4:	bd38      	pop	{r3, r4, r5, pc}

0801fec6 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 801fec6:	1e53      	subs	r3, r2, #1
 801fec8:	b29b      	uxth	r3, r3
 801feca:	b12a      	cbz	r2, 801fed8 <memcpy1+0x12>
    {
        *dst++ = *src++;
 801fecc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fed0:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 801fed4:	461a      	mov	r2, r3
 801fed6:	e7f6      	b.n	801fec6 <memcpy1>
    }
}
 801fed8:	4770      	bx	lr

0801feda <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 801feda:	1e53      	subs	r3, r2, #1
 801fedc:	4418      	add	r0, r3
    while( size-- )
 801fede:	1e53      	subs	r3, r2, #1
 801fee0:	b29b      	uxth	r3, r3
 801fee2:	b12a      	cbz	r2, 801fef0 <memcpyr+0x16>
    {
        *dst-- = *src++;
 801fee4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fee8:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 801feec:	461a      	mov	r2, r3
 801feee:	e7f6      	b.n	801fede <memcpyr+0x4>
    }
}
 801fef0:	4770      	bx	lr

0801fef2 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 801fef2:	1e53      	subs	r3, r2, #1
 801fef4:	b29b      	uxth	r3, r3
 801fef6:	b11a      	cbz	r2, 801ff00 <memset1+0xe>
    {
        *dst++ = value;
 801fef8:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 801fefc:	461a      	mov	r2, r3
 801fefe:	e7f8      	b.n	801fef2 <memset1>
    }
}
 801ff00:	4770      	bx	lr
	...

0801ff04 <Crc32>:
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 801ff04:	b1d0      	cbz	r0, 801ff3c <Crc32+0x38>
{
 801ff06:	b470      	push	{r4, r5, r6}
 801ff08:	4606      	mov	r6, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 801ff0a:	2500      	movs	r5, #0
    uint32_t crc = 0xFFFFFFFF;
 801ff0c:	f04f 30ff 	mov.w	r0, #4294967295
 801ff10:	e00b      	b.n	801ff2a <Crc32+0x26>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801ff12:	f340 0400 	sbfx	r4, r0, #0, #1
 801ff16:	4a0a      	ldr	r2, [pc, #40]	; (801ff40 <Crc32+0x3c>)
 801ff18:	4022      	ands	r2, r4
 801ff1a:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 801ff1e:	3301      	adds	r3, #1
 801ff20:	b29b      	uxth	r3, r3
 801ff22:	2b07      	cmp	r3, #7
 801ff24:	d9f5      	bls.n	801ff12 <Crc32+0xe>
    for( uint16_t i = 0; i < length; ++i )
 801ff26:	3501      	adds	r5, #1
 801ff28:	b2ad      	uxth	r5, r5
 801ff2a:	428d      	cmp	r5, r1
 801ff2c:	d203      	bcs.n	801ff36 <Crc32+0x32>
        crc ^= ( uint32_t )buffer[i];
 801ff2e:	5d73      	ldrb	r3, [r6, r5]
 801ff30:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 801ff32:	2300      	movs	r3, #0
 801ff34:	e7f5      	b.n	801ff22 <Crc32+0x1e>
        }
    }

    return ~crc;
 801ff36:	43c0      	mvns	r0, r0
}
 801ff38:	bc70      	pop	{r4, r5, r6}
 801ff3a:	4770      	bx	lr
        return 0;
 801ff3c:	2000      	movs	r0, #0
}
 801ff3e:	4770      	bx	lr
 801ff40:	edb88320 	.word	0xedb88320

0801ff44 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 801ff44:	2001      	movs	r0, #1
 801ff46:	4770      	bx	lr

0801ff48 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 801ff48:	280a      	cmp	r0, #10
 801ff4a:	d807      	bhi.n	801ff5c <RadioGetLoRaBandwidthInHz+0x14>
 801ff4c:	e8df f000 	tbb	[pc, r0]
 801ff50:	17110b20 	.word	0x17110b20
 801ff54:	061e1c1a 	.word	0x061e1c1a
 801ff58:	0e08      	.short	0x0e08
 801ff5a:	14          	.byte	0x14
 801ff5b:	00          	.byte	0x00
        break;
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
        break;
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801ff5c:	2000      	movs	r0, #0
 801ff5e:	4770      	bx	lr
        bandwidthInHz = 10417UL;
 801ff60:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 801ff64:	4770      	bx	lr
        bandwidthInHz = 15625UL;
 801ff66:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 801ff6a:	4770      	bx	lr
        bandwidthInHz = 20833UL;
 801ff6c:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 801ff70:	4770      	bx	lr
        bandwidthInHz = 31250UL;
 801ff72:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 801ff76:	4770      	bx	lr
        bandwidthInHz = 41667UL;
 801ff78:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 801ff7c:	4770      	bx	lr
        bandwidthInHz = 62500UL;
 801ff7e:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 801ff82:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 801ff84:	4804      	ldr	r0, [pc, #16]	; (801ff98 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 801ff86:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 801ff88:	4804      	ldr	r0, [pc, #16]	; (801ff9c <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 801ff8a:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801ff8c:	4804      	ldr	r0, [pc, #16]	; (801ffa0 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 801ff8e:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 801ff90:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 801ff94:	4770      	bx	lr
 801ff96:	bf00      	nop
 801ff98:	0001e848 	.word	0x0001e848
 801ff9c:	0003d090 	.word	0x0003d090
 801ffa0:	0007a120 	.word	0x0007a120

0801ffa4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801ffa4:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801ffa8:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801ffaa:	b953      	cbnz	r3, 801ffc2 <RadioGetGfskTimeOnAirNumerator+0x1e>
 801ffac:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 801ffae:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801ffb0:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801ffb2:	b141      	cbz	r1, 801ffc6 <RadioGetGfskTimeOnAirNumerator+0x22>
 801ffb4:	2302      	movs	r3, #2
 801ffb6:	f89d 0000 	ldrb.w	r0, [sp]
 801ffba:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 801ffbc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 801ffc0:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801ffc2:	2000      	movs	r0, #0
 801ffc4:	e7f3      	b.n	801ffae <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801ffc6:	2300      	movs	r3, #0
 801ffc8:	e7f5      	b.n	801ffb6 <RadioGetGfskTimeOnAirNumerator+0x12>

0801ffca <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801ffca:	b4f0      	push	{r4, r5, r6, r7}
 801ffcc:	f89d 6010 	ldrb.w	r6, [sp, #16]
 801ffd0:	f89d 4018 	ldrb.w	r4, [sp, #24]
    int32_t crDenom           = coderate + 4;
 801ffd4:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801ffd6:	1f4d      	subs	r5, r1, #5
 801ffd8:	2d01      	cmp	r5, #1
 801ffda:	d92d      	bls.n	8020038 <RadioGetLoRaTimeOnAirNumerator+0x6e>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801ffdc:	b918      	cbnz	r0, 801ffe6 <RadioGetLoRaTimeOnAirNumerator+0x1c>
 801ffde:	f1a1 050b 	sub.w	r5, r1, #11
 801ffe2:	2d01      	cmp	r5, #1
 801ffe4:	d930      	bls.n	8020048 <RadioGetLoRaTimeOnAirNumerator+0x7e>
 801ffe6:	2801      	cmp	r0, #1
 801ffe8:	d02a      	beq.n	8020040 <RadioGetLoRaTimeOnAirNumerator+0x76>
    bool    lowDatareOptimize = false;
 801ffea:	2700      	movs	r7, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801ffec:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801fff0:	00ed      	lsls	r5, r5, #3
                            ( crcOn ? 16 : 0 ) -
 801fff2:	b36c      	cbz	r4, 8020050 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801fff4:	2410      	movs	r4, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801fff6:	4425      	add	r5, r4
                            ( 4 * datarate ) +
 801fff8:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 801fffa:	eba5 0581 	sub.w	r5, r5, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 801fffe:	b34e      	cbz	r6, 8020054 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8020000:	2400      	movs	r4, #0
                            ( 4 * datarate ) +
 8020002:	442c      	add	r4, r5

    if( datarate <= 6 )
 8020004:	2906      	cmp	r1, #6
 8020006:	d903      	bls.n	8020010 <RadioGetLoRaTimeOnAirNumerator+0x46>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8020008:	3408      	adds	r4, #8

        if( lowDatareOptimize == true )
 802000a:	b10f      	cbz	r7, 8020010 <RadioGetLoRaTimeOnAirNumerator+0x46>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 802000c:	1e88      	subs	r0, r1, #2
 802000e:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8020010:	2c00      	cmp	r4, #0
 8020012:	db21      	blt.n	8020058 <RadioGetLoRaTimeOnAirNumerator+0x8e>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8020014:	4404      	add	r4, r0
 8020016:	3c01      	subs	r4, #1
 8020018:	fb94 f4f0 	sdiv	r4, r4, r0
 802001c:	fb02 3304 	mla	r3, r2, r4, r3
    int32_t intermediate =
 8020020:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8020024:	2906      	cmp	r1, #6
 8020026:	d801      	bhi.n	802002c <RadioGetLoRaTimeOnAirNumerator+0x62>
    {
        intermediate += 2;
 8020028:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 802002c:	0080      	lsls	r0, r0, #2
 802002e:	3001      	adds	r0, #1
 8020030:	3902      	subs	r1, #2
}
 8020032:	4088      	lsls	r0, r1
 8020034:	bcf0      	pop	{r4, r5, r6, r7}
 8020036:	4770      	bx	lr
        if( preambleLen < 12 )
 8020038:	2b0b      	cmp	r3, #11
 802003a:	d8cf      	bhi.n	801ffdc <RadioGetLoRaTimeOnAirNumerator+0x12>
            preambleLen = 12;
 802003c:	230c      	movs	r3, #12
 802003e:	e7cd      	b.n	801ffdc <RadioGetLoRaTimeOnAirNumerator+0x12>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8020040:	290c      	cmp	r1, #12
 8020042:	d003      	beq.n	802004c <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8020044:	2700      	movs	r7, #0
 8020046:	e7d1      	b.n	801ffec <RadioGetLoRaTimeOnAirNumerator+0x22>
        lowDatareOptimize = true;
 8020048:	2701      	movs	r7, #1
 802004a:	e7cf      	b.n	801ffec <RadioGetLoRaTimeOnAirNumerator+0x22>
 802004c:	2701      	movs	r7, #1
 802004e:	e7cd      	b.n	801ffec <RadioGetLoRaTimeOnAirNumerator+0x22>
                            ( crcOn ? 16 : 0 ) -
 8020050:	2400      	movs	r4, #0
 8020052:	e7d0      	b.n	801fff6 <RadioGetLoRaTimeOnAirNumerator+0x2c>
                            ( fixLen ? 0 : 20 );
 8020054:	2414      	movs	r4, #20
 8020056:	e7d4      	b.n	8020002 <RadioGetLoRaTimeOnAirNumerator+0x38>
        ceilNumerator = 0;
 8020058:	2400      	movs	r4, #0
 802005a:	e7db      	b.n	8020014 <RadioGetLoRaTimeOnAirNumerator+0x4a>

0802005c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 802005c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802005e:	b085      	sub	sp, #20
 8020060:	460e      	mov	r6, r1
 8020062:	4615      	mov	r5, r2
 8020064:	4619      	mov	r1, r3
 8020066:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802006a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 802006e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8020072:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8020076:	b148      	cbz	r0, 802008c <RadioTimeOnAir+0x30>
 8020078:	2801      	cmp	r0, #1
 802007a:	d012      	beq.n	80200a2 <RadioTimeOnAir+0x46>
 802007c:	2501      	movs	r5, #1
 802007e:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8020080:	1960      	adds	r0, r4, r5
 8020082:	3801      	subs	r0, #1
}
 8020084:	fbb0 f0f5 	udiv	r0, r0, r5
 8020088:	b005      	add	sp, #20
 802008a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 802008c:	f8cd c004 	str.w	ip, [sp, #4]
 8020090:	9700      	str	r7, [sp, #0]
 8020092:	4628      	mov	r0, r5
 8020094:	f7ff ff86 	bl	801ffa4 <RadioGetGfskTimeOnAirNumerator>
 8020098:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 802009c:	fb04 f400 	mul.w	r4, r4, r0
        break;
 80200a0:	e7ee      	b.n	8020080 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80200a2:	f8cd c008 	str.w	ip, [sp, #8]
 80200a6:	9701      	str	r7, [sp, #4]
 80200a8:	9300      	str	r3, [sp, #0]
 80200aa:	4613      	mov	r3, r2
 80200ac:	460a      	mov	r2, r1
 80200ae:	4629      	mov	r1, r5
 80200b0:	4630      	mov	r0, r6
 80200b2:	f7ff ff8a 	bl	801ffca <RadioGetLoRaTimeOnAirNumerator>
 80200b6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80200ba:	fb04 f400 	mul.w	r4, r4, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80200be:	4b03      	ldr	r3, [pc, #12]	; (80200cc <RadioTimeOnAir+0x70>)
 80200c0:	5d98      	ldrb	r0, [r3, r6]
 80200c2:	f7ff ff41 	bl	801ff48 <RadioGetLoRaBandwidthInHz>
 80200c6:	4605      	mov	r5, r0
        break;
 80200c8:	e7da      	b.n	8020080 <RadioTimeOnAir+0x24>
 80200ca:	bf00      	nop
 80200cc:	08028980 	.word	0x08028980

080200d0 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 80200d0:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80200d2:	4b03      	ldr	r3, [pc, #12]	; (80200e0 <RadioOnTxTimeoutProcess+0x10>)
 80200d4:	681b      	ldr	r3, [r3, #0]
 80200d6:	b113      	cbz	r3, 80200de <RadioOnTxTimeoutProcess+0xe>
 80200d8:	685b      	ldr	r3, [r3, #4]
 80200da:	b103      	cbz	r3, 80200de <RadioOnTxTimeoutProcess+0xe>
    {
        RadioEvents->TxTimeout( );
 80200dc:	4798      	blx	r3
    }
}
 80200de:	bd08      	pop	{r3, pc}
 80200e0:	20001ca4 	.word	0x20001ca4

080200e4 <RadioOnTxTimeoutIrq>:
{
 80200e4:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 80200e6:	f7ff fff3 	bl	80200d0 <RadioOnTxTimeoutProcess>
}
 80200ea:	bd08      	pop	{r3, pc}

080200ec <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80200ec:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80200ee:	4b03      	ldr	r3, [pc, #12]	; (80200fc <RadioOnRxTimeoutProcess+0x10>)
 80200f0:	681b      	ldr	r3, [r3, #0]
 80200f2:	b113      	cbz	r3, 80200fa <RadioOnRxTimeoutProcess+0xe>
 80200f4:	68db      	ldr	r3, [r3, #12]
 80200f6:	b103      	cbz	r3, 80200fa <RadioOnRxTimeoutProcess+0xe>
    {
        RadioEvents->RxTimeout( );
 80200f8:	4798      	blx	r3
    }
}
 80200fa:	bd08      	pop	{r3, pc}
 80200fc:	20001ca4 	.word	0x20001ca4

08020100 <RadioOnRxTimeoutIrq>:
{
 8020100:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8020102:	f7ff fff3 	bl	80200ec <RadioOnRxTimeoutProcess>
}
 8020106:	bd08      	pop	{r3, pc}

08020108 <payload_integration>:
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
    SUBGRF_SetTxContinuousWave( );
}

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8020108:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;

    for (i = 0; i < size; i++)
 802010a:	2300      	movs	r3, #0
 802010c:	4616      	mov	r6, r2
 802010e:	429a      	cmp	r2, r3
 8020110:	dd06      	ble.n	8020120 <payload_integration+0x18>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8020112:	5ccc      	ldrb	r4, [r1, r3]
 8020114:	43e4      	mvns	r4, r4
 8020116:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 8020118:	2400      	movs	r4, #0
 802011a:	54c4      	strb	r4, [r0, r3]
    for (i = 0; i < size; i++)
 802011c:	3301      	adds	r3, #1
 802011e:	e7f5      	b.n	802010c <payload_integration+0x4>
    }

    for (i = 0; i < (size * 8); i++)
 8020120:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 8020122:	461f      	mov	r7, r3
 8020124:	e013      	b.n	802014e <payload_integration+0x46>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 8020126:	f103 0c07 	add.w	ip, r3, #7
 802012a:	e021      	b.n	8020170 <payload_integration+0x68>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 802012c:	fa5f fc8c 	uxtb.w	ip, ip
 8020130:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8020134:	fa4c f505 	asr.w	r5, ip, r5
 8020138:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 802013c:	406f      	eors	r7, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 802013e:	f3ce 05c7 	ubfx	r5, lr, #3, #8
 8020142:	fa07 fc04 	lsl.w	ip, r7, r4
 8020146:	5d44      	ldrb	r4, [r0, r5]
 8020148:	ea44 040c 	orr.w	r4, r4, ip
 802014c:	5544      	strb	r4, [r0, r5]
    for (i = 0; i < (size * 8); i++)
 802014e:	ebb3 0fc6 	cmp.w	r3, r6, lsl #3
 8020152:	da23      	bge.n	802019c <payload_integration+0x94>
        index_bit = 7 - ( i % 8 );
 8020154:	425d      	negs	r5, r3
 8020156:	f003 0407 	and.w	r4, r3, #7
 802015a:	f005 0507 	and.w	r5, r5, #7
 802015e:	bf58      	it	pl
 8020160:	426c      	negpl	r4, r5
 8020162:	b2e5      	uxtb	r5, r4
 8020164:	f1c5 0507 	rsb	r5, r5, #7
 8020168:	b2ed      	uxtb	r5, r5
        index_byte = i / 8;
 802016a:	469c      	mov	ip, r3
 802016c:	2b00      	cmp	r3, #0
 802016e:	dbda      	blt.n	8020126 <payload_integration+0x1e>
 8020170:	ea4f 0cec 	mov.w	ip, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8020174:	3301      	adds	r3, #1
 8020176:	f1d3 0e00 	rsbs	lr, r3, #0
 802017a:	f003 0407 	and.w	r4, r3, #7
 802017e:	f00e 0e07 	and.w	lr, lr, #7
 8020182:	bf58      	it	pl
 8020184:	f1ce 0400 	rsbpl	r4, lr, #0
 8020188:	b2e4      	uxtb	r4, r4
 802018a:	f1c4 0407 	rsb	r4, r4, #7
 802018e:	b2e4      	uxtb	r4, r4
        index_byte_out = ( i + 1 ) / 8;
 8020190:	469e      	mov	lr, r3
 8020192:	2b00      	cmp	r3, #0
 8020194:	daca      	bge.n	802012c <payload_integration+0x24>
 8020196:	f103 0e07 	add.w	lr, r3, #7
 802019a:	e7c7      	b.n	802012c <payload_integration+0x24>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 802019c:	01bb      	lsls	r3, r7, #6
 802019e:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 80201a2:	b25b      	sxtb	r3, r3
 80201a4:	b91f      	cbnz	r7, 80201ae <payload_integration+0xa6>
 80201a6:	2120      	movs	r1, #32
 80201a8:	430b      	orrs	r3, r1
 80201aa:	5483      	strb	r3, [r0, r2]
}
 80201ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80201ae:	2100      	movs	r1, #0
 80201b0:	e7fa      	b.n	80201a8 <payload_integration+0xa0>
	...

080201b4 <RadioSetMaxPayloadLength>:
{
 80201b4:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 80201b6:	2801      	cmp	r0, #1
 80201b8:	d004      	beq.n	80201c4 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80201ba:	4b0a      	ldr	r3, [pc, #40]	; (80201e4 <RadioSetMaxPayloadLength+0x30>)
 80201bc:	7d5b      	ldrb	r3, [r3, #21]
 80201be:	2b01      	cmp	r3, #1
 80201c0:	d008      	beq.n	80201d4 <RadioSetMaxPayloadLength+0x20>
}
 80201c2:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80201c4:	4b08      	ldr	r3, [pc, #32]	; (80201e8 <RadioSetMaxPayloadLength+0x34>)
 80201c6:	7019      	strb	r1, [r3, #0]
 80201c8:	4806      	ldr	r0, [pc, #24]	; (80201e4 <RadioSetMaxPayloadLength+0x30>)
 80201ca:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80201cc:	300e      	adds	r0, #14
 80201ce:	f001 fd3f 	bl	8021c50 <SUBGRF_SetPacketParams>
 80201d2:	e7f6      	b.n	80201c2 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80201d4:	4b04      	ldr	r3, [pc, #16]	; (80201e8 <RadioSetMaxPayloadLength+0x34>)
 80201d6:	7019      	strb	r1, [r3, #0]
 80201d8:	4802      	ldr	r0, [pc, #8]	; (80201e4 <RadioSetMaxPayloadLength+0x30>)
 80201da:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80201dc:	300e      	adds	r0, #14
 80201de:	f001 fd37 	bl	8021c50 <SUBGRF_SetPacketParams>
}
 80201e2:	e7ee      	b.n	80201c2 <RadioSetMaxPayloadLength+0xe>
 80201e4:	200028bc 	.word	0x200028bc
 80201e8:	20000200 	.word	0x20000200

080201ec <RadioRead>:
{
 80201ec:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister(addr);
 80201ee:	f001 fbe7 	bl	80219c0 <SUBGRF_ReadRegister>
}
 80201f2:	bd08      	pop	{r3, pc}

080201f4 <RadioWrite>:
{
 80201f4:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister(addr, data );
 80201f6:	f001 faf3 	bl	80217e0 <SUBGRF_WriteRegister>
}
 80201fa:	bd08      	pop	{r3, pc}

080201fc <RadioTxCw>:
{
 80201fc:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80201fe:	f001 fe3d 	bl	8021e7c <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8020202:	2101      	movs	r1, #1
 8020204:	f001 fe26 	bl	8021e54 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8020208:	f001 f978 	bl	80214fc <SUBGRF_SetTxContinuousWave>
}
 802020c:	bd08      	pop	{r3, pc}
	...

08020210 <RadioTxPrbs>:
{
 8020210:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8020212:	2101      	movs	r1, #1
 8020214:	4b07      	ldr	r3, [pc, #28]	; (8020234 <RadioTxPrbs+0x24>)
 8020216:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 802021a:	f001 fe1b 	bl	8021e54 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 802021e:	212d      	movs	r1, #45	; 0x2d
 8020220:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8020224:	f7ff ffe6 	bl	80201f4 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8020228:	f001 f96f 	bl	802150a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 802022c:	4802      	ldr	r0, [pc, #8]	; (8020238 <RadioTxPrbs+0x28>)
 802022e:	f001 f901 	bl	8021434 <SUBGRF_SetTx>
}
 8020232:	bd08      	pop	{r3, pc}
 8020234:	200028bc 	.word	0x200028bc
 8020238:	000fffff 	.word	0x000fffff

0802023c <RadioSetRxDutyCycle>:
{
 802023c:	b538      	push	{r3, r4, r5, lr}
 802023e:	4604      	mov	r4, r0
 8020240:	460d      	mov	r5, r1
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8020242:	2100      	movs	r1, #0
 8020244:	4b04      	ldr	r3, [pc, #16]	; (8020258 <RadioSetRxDutyCycle+0x1c>)
 8020246:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 802024a:	f001 fe03 	bl	8021e54 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 802024e:	4629      	mov	r1, r5
 8020250:	4620      	mov	r0, r4
 8020252:	f001 f923 	bl	802149c <SUBGRF_SetRxDutyCycle>
}
 8020256:	bd38      	pop	{r3, r4, r5, pc}
 8020258:	200028bc 	.word	0x200028bc

0802025c <RadioRxBoosted>:
{
 802025c:	b538      	push	{r3, r4, r5, lr}
 802025e:	4604      	mov	r4, r0
    if (1UL==RFW_Is_Init())
 8020260:	f001 fee2 	bl	8022028 <RFW_Is_Init>
 8020264:	2801      	cmp	r0, #1
 8020266:	d014      	beq.n	8020292 <RadioRxBoosted+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8020268:	2300      	movs	r3, #0
 802026a:	461a      	mov	r2, r3
 802026c:	f240 2162 	movw	r1, #610	; 0x262
 8020270:	4608      	mov	r0, r1
 8020272:	f001 f9f4 	bl	802165e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8020276:	b97c      	cbnz	r4, 8020298 <RadioRxBoosted+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8020278:	4c0f      	ldr	r4, [pc, #60]	; (80202b8 <RadioRxBoosted+0x5c>)
 802027a:	2100      	movs	r1, #0
 802027c:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8020280:	f001 fde8 	bl	8021e54 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8020284:	7863      	ldrb	r3, [r4, #1]
 8020286:	b183      	cbz	r3, 80202aa <RadioRxBoosted+0x4e>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8020288:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802028c:	f001 fab8 	bl	8021800 <SUBGRF_SetRxBoosted>
}
 8020290:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit();
 8020292:	f001 fed1 	bl	8022038 <RFW_ReceiveInit>
 8020296:	e7ee      	b.n	8020276 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8020298:	4d08      	ldr	r5, [pc, #32]	; (80202bc <RadioRxBoosted+0x60>)
 802029a:	4621      	mov	r1, r4
 802029c:	4628      	mov	r0, r5
 802029e:	f002 fcd1 	bl	8022c44 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80202a2:	4628      	mov	r0, r5
 80202a4:	f002 fc88 	bl	8022bb8 <UTIL_TIMER_Start>
 80202a8:	e7e6      	b.n	8020278 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80202aa:	4b03      	ldr	r3, [pc, #12]	; (80202b8 <RadioRxBoosted+0x5c>)
 80202ac:	6898      	ldr	r0, [r3, #8]
 80202ae:	0180      	lsls	r0, r0, #6
 80202b0:	f001 faa6 	bl	8021800 <SUBGRF_SetRxBoosted>
}
 80202b4:	e7ec      	b.n	8020290 <RadioRxBoosted+0x34>
 80202b6:	bf00      	nop
 80202b8:	200028bc 	.word	0x200028bc
 80202bc:	2000292c 	.word	0x2000292c

080202c0 <RadioStandby>:
{
 80202c0:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 80202c2:	2000      	movs	r0, #0
 80202c4:	f001 f89c 	bl	8021400 <SUBGRF_SetStandby>
}
 80202c8:	bd08      	pop	{r3, pc}

080202ca <RadioGetStatus>:
{
 80202ca:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 80202cc:	f001 f892 	bl	80213f4 <SUBGRF_GetOperatingMode>
 80202d0:	2805      	cmp	r0, #5
 80202d2:	d007      	beq.n	80202e4 <RadioGetStatus+0x1a>
 80202d4:	2807      	cmp	r0, #7
 80202d6:	d007      	beq.n	80202e8 <RadioGetStatus+0x1e>
 80202d8:	2804      	cmp	r0, #4
 80202da:	d001      	beq.n	80202e0 <RadioGetStatus+0x16>
            return RF_IDLE;
 80202dc:	2000      	movs	r0, #0
}
 80202de:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 80202e0:	2002      	movs	r0, #2
 80202e2:	e7fc      	b.n	80202de <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 80202e4:	2001      	movs	r0, #1
 80202e6:	e7fa      	b.n	80202de <RadioGetStatus+0x14>
            return RF_CAD;
 80202e8:	2003      	movs	r0, #3
 80202ea:	e7f8      	b.n	80202de <RadioGetStatus+0x14>

080202ec <RadioIrqProcess>:
{
 80202ec:	b530      	push	{r4, r5, lr}
 80202ee:	b083      	sub	sp, #12
    uint8_t size = 0;
 80202f0:	2300      	movs	r3, #0
 80202f2:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80202f6:	9300      	str	r3, [sp, #0]
    switch ( SubgRf.RadioIrq )
 80202f8:	4b9c      	ldr	r3, [pc, #624]	; (802056c <RadioIrqProcess+0x280>)
 80202fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80202fe:	2b20      	cmp	r3, #32
 8020300:	d829      	bhi.n	8020356 <RadioIrqProcess+0x6a>
 8020302:	b21a      	sxth	r2, r3
 8020304:	2a00      	cmp	r2, #0
 8020306:	f000 80eb 	beq.w	80204e0 <RadioIrqProcess+0x1f4>
 802030a:	3b01      	subs	r3, #1
 802030c:	2b1f      	cmp	r3, #31
 802030e:	f200 80e7 	bhi.w	80204e0 <RadioIrqProcess+0x1f4>
 8020312:	e8df f013 	tbh	[pc, r3, lsl #1]
 8020316:	005f      	.short	0x005f
 8020318:	00e50075 	.word	0x00e50075
 802031c:	00e500df 	.word	0x00e500df
 8020320:	00e500e5 	.word	0x00e500e5
 8020324:	00e500e7 	.word	0x00e500e7
 8020328:	00e500e5 	.word	0x00e500e5
 802032c:	00e500e5 	.word	0x00e500e5
 8020330:	00e500e5 	.word	0x00e500e5
 8020334:	00e500f4 	.word	0x00e500f4
 8020338:	00e500e5 	.word	0x00e500e5
 802033c:	00e500e5 	.word	0x00e500e5
 8020340:	00e500e5 	.word	0x00e500e5
 8020344:	00e500e5 	.word	0x00e500e5
 8020348:	00e500e5 	.word	0x00e500e5
 802034c:	00e500e5 	.word	0x00e500e5
 8020350:	00e500e5 	.word	0x00e500e5
 8020354:	00fb      	.short	0x00fb
 8020356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802035a:	f000 80a3 	beq.w	80204a4 <RadioIrqProcess+0x1b8>
 802035e:	d924      	bls.n	80203aa <RadioIrqProcess+0xbe>
 8020360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020364:	f040 80bc 	bne.w	80204e0 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8020368:	4b81      	ldr	r3, [pc, #516]	; (8020570 <RadioIrqProcess+0x284>)
 802036a:	2201      	movs	r2, #1
 802036c:	2100      	movs	r1, #0
 802036e:	2002      	movs	r0, #2
 8020370:	f001 ff54 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8020374:	f001 f83e 	bl	80213f4 <SUBGRF_GetOperatingMode>
 8020378:	2804      	cmp	r0, #4
 802037a:	f000 809e 	beq.w	80204ba <RadioIrqProcess+0x1ce>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 802037e:	f001 f839 	bl	80213f4 <SUBGRF_GetOperatingMode>
 8020382:	2805      	cmp	r0, #5
 8020384:	f040 80ac 	bne.w	80204e0 <RadioIrqProcess+0x1f4>
            TimerStop( &RxTimeoutTimer );
 8020388:	487a      	ldr	r0, [pc, #488]	; (8020574 <RadioIrqProcess+0x288>)
 802038a:	f002 fbb3 	bl	8022af4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 802038e:	2000      	movs	r0, #0
 8020390:	f001 f836 	bl	8021400 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8020394:	4b78      	ldr	r3, [pc, #480]	; (8020578 <RadioIrqProcess+0x28c>)
 8020396:	681b      	ldr	r3, [r3, #0]
 8020398:	2b00      	cmp	r3, #0
 802039a:	f000 80a1 	beq.w	80204e0 <RadioIrqProcess+0x1f4>
 802039e:	68db      	ldr	r3, [r3, #12]
 80203a0:	2b00      	cmp	r3, #0
 80203a2:	f000 809d 	beq.w	80204e0 <RadioIrqProcess+0x1f4>
                RadioEvents->RxTimeout( );
 80203a6:	4798      	blx	r3
 80203a8:	e09a      	b.n	80204e0 <RadioIrqProcess+0x1f4>
    switch ( SubgRf.RadioIrq )
 80203aa:	2b40      	cmp	r3, #64	; 0x40
 80203ac:	f000 80c7 	beq.w	802053e <RadioIrqProcess+0x252>
 80203b0:	2b80      	cmp	r3, #128	; 0x80
 80203b2:	f040 8095 	bne.w	80204e0 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 80203b6:	2000      	movs	r0, #0
 80203b8:	f001 f822 	bl	8021400 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80203bc:	4b6e      	ldr	r3, [pc, #440]	; (8020578 <RadioIrqProcess+0x28c>)
 80203be:	681b      	ldr	r3, [r3, #0]
 80203c0:	2b00      	cmp	r3, #0
 80203c2:	f000 808d 	beq.w	80204e0 <RadioIrqProcess+0x1f4>
 80203c6:	699b      	ldr	r3, [r3, #24]
 80203c8:	2b00      	cmp	r3, #0
 80203ca:	f000 8089 	beq.w	80204e0 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( false );
 80203ce:	2000      	movs	r0, #0
 80203d0:	4798      	blx	r3
 80203d2:	e085      	b.n	80204e0 <RadioIrqProcess+0x1f4>
        TimerStop( &TxTimeoutTimer );
 80203d4:	4869      	ldr	r0, [pc, #420]	; (802057c <RadioIrqProcess+0x290>)
 80203d6:	f002 fb8d 	bl	8022af4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80203da:	2000      	movs	r0, #0
 80203dc:	f001 f810 	bl	8021400 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 80203e0:	f001 fe24 	bl	802202c <RFW_Is_LongPacketModeEnabled>
 80203e4:	2801      	cmp	r0, #1
 80203e6:	d008      	beq.n	80203fa <RadioIrqProcess+0x10e>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80203e8:	4b63      	ldr	r3, [pc, #396]	; (8020578 <RadioIrqProcess+0x28c>)
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	2b00      	cmp	r3, #0
 80203ee:	d077      	beq.n	80204e0 <RadioIrqProcess+0x1f4>
 80203f0:	681b      	ldr	r3, [r3, #0]
 80203f2:	2b00      	cmp	r3, #0
 80203f4:	d074      	beq.n	80204e0 <RadioIrqProcess+0x1f4>
            RadioEvents->TxDone( );
 80203f6:	4798      	blx	r3
 80203f8:	e072      	b.n	80204e0 <RadioIrqProcess+0x1f4>
            RFW_DeInit_TxLongPacket( );
 80203fa:	f001 fe20 	bl	802203e <RFW_DeInit_TxLongPacket>
 80203fe:	e7f3      	b.n	80203e8 <RadioIrqProcess+0xfc>
        TimerStop( &RxTimeoutTimer );
 8020400:	485c      	ldr	r0, [pc, #368]	; (8020574 <RadioIrqProcess+0x288>)
 8020402:	f002 fb77 	bl	8022af4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8020406:	4b59      	ldr	r3, [pc, #356]	; (802056c <RadioIrqProcess+0x280>)
 8020408:	785b      	ldrb	r3, [r3, #1]
 802040a:	b1f3      	cbz	r3, 802044a <RadioIrqProcess+0x15e>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 802040c:	22ff      	movs	r2, #255	; 0xff
 802040e:	f10d 0107 	add.w	r1, sp, #7
 8020412:	485b      	ldr	r0, [pc, #364]	; (8020580 <RadioIrqProcess+0x294>)
 8020414:	f001 fd04 	bl	8021e20 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8020418:	485a      	ldr	r0, [pc, #360]	; (8020584 <RadioIrqProcess+0x298>)
 802041a:	f001 f9a5 	bl	8021768 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 802041e:	4b56      	ldr	r3, [pc, #344]	; (8020578 <RadioIrqProcess+0x28c>)
 8020420:	681b      	ldr	r3, [r3, #0]
 8020422:	2b00      	cmp	r3, #0
 8020424:	d05c      	beq.n	80204e0 <RadioIrqProcess+0x1f4>
 8020426:	689c      	ldr	r4, [r3, #8]
 8020428:	2c00      	cmp	r4, #0
 802042a:	d059      	beq.n	80204e0 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 802042c:	4b4f      	ldr	r3, [pc, #316]	; (802056c <RadioIrqProcess+0x280>)
 802042e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8020432:	2b01      	cmp	r3, #1
 8020434:	d11d      	bne.n	8020472 <RadioIrqProcess+0x186>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8020436:	4a4d      	ldr	r2, [pc, #308]	; (802056c <RadioIrqProcess+0x280>)
 8020438:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 802043c:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8020440:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8020444:	484e      	ldr	r0, [pc, #312]	; (8020580 <RadioIrqProcess+0x294>)
 8020446:	47a0      	blx	r4
                break;
 8020448:	e04a      	b.n	80204e0 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 802044a:	2000      	movs	r0, #0
 802044c:	f000 ffd8 	bl	8021400 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8020450:	2100      	movs	r1, #0
 8020452:	f640 1002 	movw	r0, #2306	; 0x902
 8020456:	f001 f9c3 	bl	80217e0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 802045a:	f640 1044 	movw	r0, #2372	; 0x944
 802045e:	f001 faaf 	bl	80219c0 <SUBGRF_ReadRegister>
 8020462:	f040 0102 	orr.w	r1, r0, #2
 8020466:	b2c9      	uxtb	r1, r1
 8020468:	f640 1044 	movw	r0, #2372	; 0x944
 802046c:	f001 f9b8 	bl	80217e0 <SUBGRF_WriteRegister>
 8020470:	e7cc      	b.n	802040c <RadioIrqProcess+0x120>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8020472:	4c3e      	ldr	r4, [pc, #248]	; (802056c <RadioIrqProcess+0x280>)
 8020474:	4669      	mov	r1, sp
 8020476:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8020478:	f001 fd88 	bl	8021f8c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 802047c:	4b3e      	ldr	r3, [pc, #248]	; (8020578 <RadioIrqProcess+0x28c>)
 802047e:	681b      	ldr	r3, [r3, #0]
 8020480:	689d      	ldr	r5, [r3, #8]
 8020482:	9b00      	ldr	r3, [sp, #0]
 8020484:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8020488:	4a3f      	ldr	r2, [pc, #252]	; (8020588 <RadioIrqProcess+0x29c>)
 802048a:	fb82 1203 	smull	r1, r2, r2, r3
 802048e:	17db      	asrs	r3, r3, #31
 8020490:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8020494:	b25b      	sxtb	r3, r3
 8020496:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 802049a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 802049e:	4838      	ldr	r0, [pc, #224]	; (8020580 <RadioIrqProcess+0x294>)
 80204a0:	47a8      	blx	r5
                break;
 80204a2:	e01d      	b.n	80204e0 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 80204a4:	2000      	movs	r0, #0
 80204a6:	f000 ffab 	bl	8021400 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80204aa:	4b33      	ldr	r3, [pc, #204]	; (8020578 <RadioIrqProcess+0x28c>)
 80204ac:	681b      	ldr	r3, [r3, #0]
 80204ae:	b1bb      	cbz	r3, 80204e0 <RadioIrqProcess+0x1f4>
 80204b0:	699b      	ldr	r3, [r3, #24]
 80204b2:	b1ab      	cbz	r3, 80204e0 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( true );
 80204b4:	2001      	movs	r0, #1
 80204b6:	4798      	blx	r3
 80204b8:	e012      	b.n	80204e0 <RadioIrqProcess+0x1f4>
            TimerStop( &TxTimeoutTimer );
 80204ba:	4830      	ldr	r0, [pc, #192]	; (802057c <RadioIrqProcess+0x290>)
 80204bc:	f002 fb1a 	bl	8022af4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80204c0:	2000      	movs	r0, #0
 80204c2:	f000 ff9d 	bl	8021400 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80204c6:	4b2c      	ldr	r3, [pc, #176]	; (8020578 <RadioIrqProcess+0x28c>)
 80204c8:	681b      	ldr	r3, [r3, #0]
 80204ca:	b14b      	cbz	r3, 80204e0 <RadioIrqProcess+0x1f4>
 80204cc:	685b      	ldr	r3, [r3, #4]
 80204ce:	b13b      	cbz	r3, 80204e0 <RadioIrqProcess+0x1f4>
                RadioEvents->TxTimeout( );
 80204d0:	4798      	blx	r3
 80204d2:	e005      	b.n	80204e0 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80204d4:	4b2d      	ldr	r3, [pc, #180]	; (802058c <RadioIrqProcess+0x2a0>)
 80204d6:	2201      	movs	r2, #1
 80204d8:	2100      	movs	r1, #0
 80204da:	2002      	movs	r0, #2
 80204dc:	f001 fe9e 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
}
 80204e0:	b003      	add	sp, #12
 80204e2:	bd30      	pop	{r4, r5, pc}
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80204e4:	4b2a      	ldr	r3, [pc, #168]	; (8020590 <RadioIrqProcess+0x2a4>)
 80204e6:	2201      	movs	r2, #1
 80204e8:	2100      	movs	r1, #0
 80204ea:	2002      	movs	r0, #2
 80204ec:	f001 fe96 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 80204f0:	f001 fd9a 	bl	8022028 <RFW_Is_Init>
 80204f4:	2801      	cmp	r0, #1
 80204f6:	d1f3      	bne.n	80204e0 <RadioIrqProcess+0x1f4>
            RFW_ReceivePayload( );
 80204f8:	f001 fda2 	bl	8022040 <RFW_ReceivePayload>
 80204fc:	e7f0      	b.n	80204e0 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80204fe:	4b25      	ldr	r3, [pc, #148]	; (8020594 <RadioIrqProcess+0x2a8>)
 8020500:	2201      	movs	r2, #1
 8020502:	2100      	movs	r1, #0
 8020504:	2002      	movs	r0, #2
 8020506:	f001 fe89 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
        break;
 802050a:	e7e9      	b.n	80204e0 <RadioIrqProcess+0x1f4>
        TimerStop( &RxTimeoutTimer );
 802050c:	4819      	ldr	r0, [pc, #100]	; (8020574 <RadioIrqProcess+0x288>)
 802050e:	f002 faf1 	bl	8022af4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8020512:	4b16      	ldr	r3, [pc, #88]	; (802056c <RadioIrqProcess+0x280>)
 8020514:	785b      	ldrb	r3, [r3, #1]
 8020516:	b173      	cbz	r3, 8020536 <RadioIrqProcess+0x24a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8020518:	4b17      	ldr	r3, [pc, #92]	; (8020578 <RadioIrqProcess+0x28c>)
 802051a:	681b      	ldr	r3, [r3, #0]
 802051c:	2b00      	cmp	r3, #0
 802051e:	d0df      	beq.n	80204e0 <RadioIrqProcess+0x1f4>
 8020520:	68db      	ldr	r3, [r3, #12]
 8020522:	2b00      	cmp	r3, #0
 8020524:	d0dc      	beq.n	80204e0 <RadioIrqProcess+0x1f4>
            RadioEvents->RxTimeout( );
 8020526:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8020528:	4b1b      	ldr	r3, [pc, #108]	; (8020598 <RadioIrqProcess+0x2ac>)
 802052a:	2201      	movs	r2, #1
 802052c:	2100      	movs	r1, #0
 802052e:	2002      	movs	r0, #2
 8020530:	f001 fe74 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
 8020534:	e7d4      	b.n	80204e0 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 8020536:	2000      	movs	r0, #0
 8020538:	f000 ff62 	bl	8021400 <SUBGRF_SetStandby>
 802053c:	e7ec      	b.n	8020518 <RadioIrqProcess+0x22c>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 802053e:	4b17      	ldr	r3, [pc, #92]	; (802059c <RadioIrqProcess+0x2b0>)
 8020540:	2201      	movs	r2, #1
 8020542:	2100      	movs	r1, #0
 8020544:	2002      	movs	r0, #2
 8020546:	f001 fe69 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 802054a:	4b08      	ldr	r3, [pc, #32]	; (802056c <RadioIrqProcess+0x280>)
 802054c:	785b      	ldrb	r3, [r3, #1]
 802054e:	b143      	cbz	r3, 8020562 <RadioIrqProcess+0x276>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8020550:	4b09      	ldr	r3, [pc, #36]	; (8020578 <RadioIrqProcess+0x28c>)
 8020552:	681b      	ldr	r3, [r3, #0]
 8020554:	2b00      	cmp	r3, #0
 8020556:	d0c3      	beq.n	80204e0 <RadioIrqProcess+0x1f4>
 8020558:	691b      	ldr	r3, [r3, #16]
 802055a:	2b00      	cmp	r3, #0
 802055c:	d0c0      	beq.n	80204e0 <RadioIrqProcess+0x1f4>
            RadioEvents->RxError( );
 802055e:	4798      	blx	r3
}
 8020560:	e7be      	b.n	80204e0 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 8020562:	2000      	movs	r0, #0
 8020564:	f000 ff4c 	bl	8021400 <SUBGRF_SetStandby>
 8020568:	e7f2      	b.n	8020550 <RadioIrqProcess+0x264>
 802056a:	bf00      	nop
 802056c:	200028bc 	.word	0x200028bc
 8020570:	08028914 	.word	0x08028914
 8020574:	2000292c 	.word	0x2000292c
 8020578:	20001ca4 	.word	0x20001ca4
 802057c:	20002914 	.word	0x20002914
 8020580:	20001ba4 	.word	0x20001ba4
 8020584:	200028e0 	.word	0x200028e0
 8020588:	10624dd3 	.word	0x10624dd3
 802058c:	08028928 	.word	0x08028928
 8020590:	08028934 	.word	0x08028934
 8020594:	08028940 	.word	0x08028940
 8020598:	0802894c 	.word	0x0802894c
 802059c:	08028958 	.word	0x08028958

080205a0 <RadioOnDioIrq>:
{
 80205a0:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 80205a2:	4b03      	ldr	r3, [pc, #12]	; (80205b0 <RadioOnDioIrq+0x10>)
 80205a4:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 80205a8:	f7ff fea0 	bl	80202ec <RadioIrqProcess>
}
 80205ac:	bd08      	pop	{r3, pc}
 80205ae:	bf00      	nop
 80205b0:	200028bc 	.word	0x200028bc

080205b4 <RadioGetWakeupTime>:
{
 80205b4:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80205b6:	f001 fc78 	bl	8021eaa <SUBGRF_GetRadioWakeUpTime>
}
 80205ba:	3003      	adds	r0, #3
 80205bc:	bd08      	pop	{r3, pc}

080205be <RadioReadRegisters>:
{
 80205be:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 80205c0:	f001 fbb8 	bl	8021d34 <SUBGRF_ReadRegisters>
}
 80205c4:	bd08      	pop	{r3, pc}

080205c6 <RadioWriteRegisters>:
{
 80205c6:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 80205c8:	f001 fb00 	bl	8021bcc <SUBGRF_WriteRegisters>
}
 80205cc:	bd08      	pop	{r3, pc}

080205ce <RadioRssi>:
{
 80205ce:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 80205d0:	f001 f8bc 	bl	802174c <SUBGRF_GetRssiInst>
}
 80205d4:	b200      	sxth	r0, r0
 80205d6:	bd08      	pop	{r3, pc}

080205d8 <RadioSetTxContinuousWave>:
{
 80205d8:	b538      	push	{r3, r4, r5, lr}
 80205da:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80205dc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80205e0:	fb04 f402 	mul.w	r4, r4, r2
    SUBGRF_SetRfFrequency( freq );
 80205e4:	f001 f872 	bl	80216cc <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 80205e8:	4628      	mov	r0, r5
 80205ea:	f001 fc47 	bl	8021e7c <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 80205ee:	2101      	movs	r1, #1
 80205f0:	f001 fc30 	bl	8021e54 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80205f4:	f000 ff82 	bl	80214fc <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80205f8:	4d04      	ldr	r5, [pc, #16]	; (802060c <RadioSetTxContinuousWave+0x34>)
 80205fa:	4621      	mov	r1, r4
 80205fc:	4628      	mov	r0, r5
 80205fe:	f002 fb21 	bl	8022c44 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8020602:	4628      	mov	r0, r5
 8020604:	f002 fad8 	bl	8022bb8 <UTIL_TIMER_Start>
}
 8020608:	bd38      	pop	{r3, r4, r5, pc}
 802060a:	bf00      	nop
 802060c:	20002914 	.word	0x20002914

08020610 <RadioSetChannel>:
{
 8020610:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8020612:	f001 f85b 	bl	80216cc <SUBGRF_SetRfFrequency>
}
 8020616:	bd08      	pop	{r3, pc}

08020618 <RadioStartCad>:
{
 8020618:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 802061a:	2100      	movs	r1, #0
 802061c:	4b07      	ldr	r3, [pc, #28]	; (802063c <RadioStartCad+0x24>)
 802061e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8020622:	f001 fc17 	bl	8021e54 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8020626:	2300      	movs	r3, #0
 8020628:	461a      	mov	r2, r3
 802062a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 802062e:	4608      	mov	r0, r1
 8020630:	f001 f815 	bl	802165e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8020634:	f000 ff56 	bl	80214e4 <SUBGRF_SetCad>
}
 8020638:	bd08      	pop	{r3, pc}
 802063a:	bf00      	nop
 802063c:	200028bc 	.word	0x200028bc

08020640 <RadioRx>:
{
 8020640:	b538      	push	{r3, r4, r5, lr}
 8020642:	4604      	mov	r4, r0
    if ( 1UL == RFW_Is_Init( ) )
 8020644:	f001 fcf0 	bl	8022028 <RFW_Is_Init>
 8020648:	2801      	cmp	r0, #1
 802064a:	d014      	beq.n	8020676 <RadioRx+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 802064c:	2300      	movs	r3, #0
 802064e:	461a      	mov	r2, r3
 8020650:	f240 2162 	movw	r1, #610	; 0x262
 8020654:	4608      	mov	r0, r1
 8020656:	f001 f802 	bl	802165e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 802065a:	b97c      	cbnz	r4, 802067c <RadioRx+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 802065c:	4c0f      	ldr	r4, [pc, #60]	; (802069c <RadioRx+0x5c>)
 802065e:	2100      	movs	r1, #0
 8020660:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8020664:	f001 fbf6 	bl	8021e54 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8020668:	7863      	ldrb	r3, [r4, #1]
 802066a:	b183      	cbz	r3, 802068e <RadioRx+0x4e>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 802066c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020670:	f000 fefa 	bl	8021468 <SUBGRF_SetRx>
}
 8020674:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit( );
 8020676:	f001 fcdf 	bl	8022038 <RFW_ReceiveInit>
 802067a:	e7ee      	b.n	802065a <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 802067c:	4d08      	ldr	r5, [pc, #32]	; (80206a0 <RadioRx+0x60>)
 802067e:	4621      	mov	r1, r4
 8020680:	4628      	mov	r0, r5
 8020682:	f002 fadf 	bl	8022c44 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8020686:	4628      	mov	r0, r5
 8020688:	f002 fa96 	bl	8022bb8 <UTIL_TIMER_Start>
 802068c:	e7e6      	b.n	802065c <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 802068e:	4b03      	ldr	r3, [pc, #12]	; (802069c <RadioRx+0x5c>)
 8020690:	6898      	ldr	r0, [r3, #8]
 8020692:	0180      	lsls	r0, r0, #6
 8020694:	f000 fee8 	bl	8021468 <SUBGRF_SetRx>
}
 8020698:	e7ec      	b.n	8020674 <RadioRx+0x34>
 802069a:	bf00      	nop
 802069c:	200028bc 	.word	0x200028bc
 80206a0:	2000292c 	.word	0x2000292c

080206a4 <RadioSleep>:
{
 80206a4:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 80206a6:	f04f 0004 	mov.w	r0, #4
 80206aa:	f001 f9e3 	bl	8021a74 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 80206ae:	2002      	movs	r0, #2
 80206b0:	f7e6 fe26 	bl	8007300 <HAL_Delay>
}
 80206b4:	bd08      	pop	{r3, pc}
	...

080206b8 <RadioSend>:
{
 80206b8:	b570      	push	{r4, r5, r6, lr}
 80206ba:	b082      	sub	sp, #8
 80206bc:	4605      	mov	r5, r0
 80206be:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80206c0:	2300      	movs	r3, #0
 80206c2:	461a      	mov	r2, r3
 80206c4:	f240 2101 	movw	r1, #513	; 0x201
 80206c8:	4608      	mov	r0, r1
 80206ca:	f000 ffc8 	bl	802165e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 80206ce:	4e5a      	ldr	r6, [pc, #360]	; (8020838 <RadioSend+0x180>)
 80206d0:	2101      	movs	r1, #1
 80206d2:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 80206d6:	f001 fbbd 	bl	8021e54 <SUBGRF_SetSwitch>
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 80206da:	7833      	ldrb	r3, [r6, #0]
 80206dc:	2b01      	cmp	r3, #1
 80206de:	d103      	bne.n	80206e8 <RadioSend+0x30>
 80206e0:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 80206e4:	2b06      	cmp	r3, #6
 80206e6:	d012      	beq.n	802070e <RadioSend+0x56>
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80206e8:	f640 0089 	movw	r0, #2185	; 0x889
 80206ec:	f001 f968 	bl	80219c0 <SUBGRF_ReadRegister>
 80206f0:	f040 0104 	orr.w	r1, r0, #4
 80206f4:	b2c9      	uxtb	r1, r1
 80206f6:	f640 0089 	movw	r0, #2185	; 0x889
 80206fa:	f001 f871 	bl	80217e0 <SUBGRF_WriteRegister>
    switch(SubgRf.Modem)
 80206fe:	4b4e      	ldr	r3, [pc, #312]	; (8020838 <RadioSend+0x180>)
 8020700:	781b      	ldrb	r3, [r3, #0]
 8020702:	2b03      	cmp	r3, #3
 8020704:	d818      	bhi.n	8020738 <RadioSend+0x80>
 8020706:	e8df f003 	tbb	[pc, r3]
 802070a:	0d22      	.short	0x0d22
 802070c:	5a4d      	.short	0x5a4d
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 802070e:	f640 0089 	movw	r0, #2185	; 0x889
 8020712:	f001 f955 	bl	80219c0 <SUBGRF_ReadRegister>
 8020716:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 802071a:	f640 0089 	movw	r0, #2185	; 0x889
 802071e:	f001 f85f 	bl	80217e0 <SUBGRF_WriteRegister>
 8020722:	e7ec      	b.n	80206fe <RadioSend+0x46>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8020724:	4844      	ldr	r0, [pc, #272]	; (8020838 <RadioSend+0x180>)
 8020726:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8020728:	300e      	adds	r0, #14
 802072a:	f001 fa91 	bl	8021c50 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 802072e:	2200      	movs	r2, #0
 8020730:	4621      	mov	r1, r4
 8020732:	4628      	mov	r0, r5
 8020734:	f001 fb5b 	bl	8021dee <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8020738:	4c40      	ldr	r4, [pc, #256]	; (802083c <RadioSend+0x184>)
 802073a:	4b3f      	ldr	r3, [pc, #252]	; (8020838 <RadioSend+0x180>)
 802073c:	6859      	ldr	r1, [r3, #4]
 802073e:	4620      	mov	r0, r4
 8020740:	f002 fa80 	bl	8022c44 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8020744:	4620      	mov	r0, r4
 8020746:	f002 fa37 	bl	8022bb8 <UTIL_TIMER_Start>
}
 802074a:	b002      	add	sp, #8
 802074c:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 802074e:	f001 fc6b 	bl	8022028 <RFW_Is_Init>
 8020752:	2801      	cmp	r0, #1
 8020754:	d00a      	beq.n	802076c <RadioSend+0xb4>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8020756:	4838      	ldr	r0, [pc, #224]	; (8020838 <RadioSend+0x180>)
 8020758:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 802075a:	300e      	adds	r0, #14
 802075c:	f001 fa78 	bl	8021c50 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8020760:	2200      	movs	r2, #0
 8020762:	4621      	mov	r1, r4
 8020764:	4628      	mov	r0, r5
 8020766:	f001 fb42 	bl	8021dee <SUBGRF_SendPayload>
 802076a:	e7e5      	b.n	8020738 <RadioSend+0x80>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 802076c:	f10d 0207 	add.w	r2, sp, #7
 8020770:	4621      	mov	r1, r4
 8020772:	4628      	mov	r0, r5
 8020774:	f001 fc5d 	bl	8022032 <RFW_TransmitInit>
 8020778:	b968      	cbnz	r0, 8020796 <RadioSend+0xde>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 802077a:	482f      	ldr	r0, [pc, #188]	; (8020838 <RadioSend+0x180>)
 802077c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8020780:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8020782:	300e      	adds	r0, #14
 8020784:	f001 fa64 	bl	8021c50 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8020788:	2200      	movs	r2, #0
 802078a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 802078e:	4628      	mov	r0, r5
 8020790:	f001 fb2d 	bl	8021dee <SUBGRF_SendPayload>
 8020794:	e7d0      	b.n	8020738 <RadioSend+0x80>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8020796:	4b2a      	ldr	r3, [pc, #168]	; (8020840 <RadioSend+0x188>)
 8020798:	2201      	movs	r2, #1
 802079a:	2100      	movs	r1, #0
 802079c:	2002      	movs	r0, #2
 802079e:	f001 fd3d 	bl	802221c <UTIL_ADV_TRACE_COND_FSend>
                return;
 80207a2:	e7d2      	b.n	802074a <RadioSend+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80207a4:	4824      	ldr	r0, [pc, #144]	; (8020838 <RadioSend+0x180>)
 80207a6:	2302      	movs	r3, #2
 80207a8:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80207aa:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80207ac:	300e      	adds	r0, #14
 80207ae:	f001 fa4f 	bl	8021c50 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80207b2:	2200      	movs	r2, #0
 80207b4:	4621      	mov	r1, r4
 80207b6:	4628      	mov	r0, r5
 80207b8:	f001 fb19 	bl	8021dee <SUBGRF_SendPayload>
            break;
 80207bc:	e7bc      	b.n	8020738 <RadioSend+0x80>
            payload_integration( RadioBuffer, buffer, size );
 80207be:	4622      	mov	r2, r4
 80207c0:	4629      	mov	r1, r5
 80207c2:	4820      	ldr	r0, [pc, #128]	; (8020844 <RadioSend+0x18c>)
 80207c4:	f7ff fca0 	bl	8020108 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80207c8:	4e1b      	ldr	r6, [pc, #108]	; (8020838 <RadioSend+0x180>)
 80207ca:	2302      	movs	r3, #2
 80207cc:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80207ce:	1c65      	adds	r5, r4, #1
 80207d0:	b2ed      	uxtb	r5, r5
 80207d2:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80207d4:	f106 000e 	add.w	r0, r6, #14
 80207d8:	f001 fa3a 	bl	8021c50 <SUBGRF_SetPacketParams>
            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 80207dc:	2100      	movs	r1, #0
 80207de:	20f1      	movs	r0, #241	; 0xf1
 80207e0:	f7ff fd08 	bl	80201f4 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 80207e4:	2100      	movs	r1, #0
 80207e6:	20f0      	movs	r0, #240	; 0xf0
 80207e8:	f7ff fd04 	bl	80201f4 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80207ec:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80207ee:	2b64      	cmp	r3, #100	; 0x64
 80207f0:	d019      	beq.n	8020826 <RadioSend+0x16e>
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 80207f2:	21e1      	movs	r1, #225	; 0xe1
 80207f4:	20f3      	movs	r0, #243	; 0xf3
 80207f6:	f7ff fcfd 	bl	80201f4 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 80207fa:	2104      	movs	r1, #4
 80207fc:	20f2      	movs	r0, #242	; 0xf2
 80207fe:	f7ff fcf9 	bl	80201f4 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 8020802:	00e1      	lsls	r1, r4, #3
 8020804:	1c8c      	adds	r4, r1, #2
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8020806:	0a09      	lsrs	r1, r1, #8
 8020808:	20f4      	movs	r0, #244	; 0xf4
 802080a:	f7ff fcf3 	bl	80201f4 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 802080e:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 8020812:	20f5      	movs	r0, #245	; 0xf5
 8020814:	f7ff fcee 	bl	80201f4 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8020818:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 802081c:	4629      	mov	r1, r5
 802081e:	4809      	ldr	r0, [pc, #36]	; (8020844 <RadioSend+0x18c>)
 8020820:	f001 fae5 	bl	8021dee <SUBGRF_SendPayload>
            break;
 8020824:	e788      	b.n	8020738 <RadioSend+0x80>
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8020826:	2170      	movs	r1, #112	; 0x70
 8020828:	20f3      	movs	r0, #243	; 0xf3
 802082a:	f7ff fce3 	bl	80201f4 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 802082e:	211d      	movs	r1, #29
 8020830:	20f2      	movs	r0, #242	; 0xf2
 8020832:	f7ff fcdf 	bl	80201f4 <RadioWrite>
 8020836:	e7e4      	b.n	8020802 <RadioSend+0x14a>
 8020838:	200028bc 	.word	0x200028bc
 802083c:	20002914 	.word	0x20002914
 8020840:	08028968 	.word	0x08028968
 8020844:	20001ba4 	.word	0x20001ba4

08020848 <RadioSetModem>:
{
 8020848:	b510      	push	{r4, lr}
 802084a:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 802084c:	4b19      	ldr	r3, [pc, #100]	; (80208b4 <RadioSetModem+0x6c>)
 802084e:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem(modem);
 8020850:	f001 fbf7 	bl	8022042 <RFW_SetRadioModem>
    switch( modem )
 8020854:	3c01      	subs	r4, #1
 8020856:	2c03      	cmp	r4, #3
 8020858:	d803      	bhi.n	8020862 <RadioSetModem+0x1a>
 802085a:	e8df f004 	tbb	[pc, r4]
 802085e:	1509      	.short	0x1509
 8020860:	231c      	.short	0x231c
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8020862:	2000      	movs	r0, #0
 8020864:	f001 f80c 	bl	8021880 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8020868:	4b12      	ldr	r3, [pc, #72]	; (80208b4 <RadioSetModem+0x6c>)
 802086a:	2200      	movs	r2, #0
 802086c:	735a      	strb	r2, [r3, #13]
        break;
 802086e:	e011      	b.n	8020894 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8020870:	2001      	movs	r0, #1
 8020872:	f001 f805 	bl	8021880 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8020876:	4b0f      	ldr	r3, [pc, #60]	; (80208b4 <RadioSetModem+0x6c>)
 8020878:	7b5a      	ldrb	r2, [r3, #13]
 802087a:	7b18      	ldrb	r0, [r3, #12]
 802087c:	4282      	cmp	r2, r0
 802087e:	d009      	beq.n	8020894 <RadioSetModem+0x4c>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8020880:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8020882:	f000 fa83 	bl	8020d8c <RadioSetPublicNetwork>
 8020886:	e005      	b.n	8020894 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8020888:	2002      	movs	r0, #2
 802088a:	f000 fff9 	bl	8021880 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 802088e:	4b09      	ldr	r3, [pc, #36]	; (80208b4 <RadioSetModem+0x6c>)
 8020890:	2200      	movs	r2, #0
 8020892:	735a      	strb	r2, [r3, #13]
}
 8020894:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8020896:	2002      	movs	r0, #2
 8020898:	f000 fff2 	bl	8021880 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 802089c:	4b05      	ldr	r3, [pc, #20]	; (80208b4 <RadioSetModem+0x6c>)
 802089e:	2200      	movs	r2, #0
 80208a0:	735a      	strb	r2, [r3, #13]
        break;
 80208a2:	e7f7      	b.n	8020894 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80208a4:	2000      	movs	r0, #0
 80208a6:	f000 ffeb 	bl	8021880 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80208aa:	4b02      	ldr	r3, [pc, #8]	; (80208b4 <RadioSetModem+0x6c>)
 80208ac:	2200      	movs	r2, #0
 80208ae:	735a      	strb	r2, [r3, #13]
}
 80208b0:	e7f0      	b.n	8020894 <RadioSetModem+0x4c>
 80208b2:	bf00      	nop
 80208b4:	200028bc 	.word	0x200028bc

080208b8 <RadioSetTxGenericConfig>:
    }
    return status;
}

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 80208b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80208bc:	b086      	sub	sp, #24
 80208be:	4605      	mov	r5, r0
 80208c0:	460c      	mov	r4, r1
 80208c2:	4617      	mov	r7, r2
 80208c4:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 80208c6:	2300      	movs	r3, #0
 80208c8:	9304      	str	r3, [sp, #16]
 80208ca:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80208cc:	f001 fbab 	bl	8022026 <RFW_DeInit>
    switch( modem )
 80208d0:	2d01      	cmp	r5, #1
 80208d2:	f000 8085 	beq.w	80209e0 <RadioSetTxGenericConfig+0x128>
 80208d6:	2d02      	cmp	r5, #2
 80208d8:	f000 80ed 	beq.w	8020ab6 <RadioSetTxGenericConfig+0x1fe>
 80208dc:	b165      	cbz	r5, 80208f8 <RadioSetTxGenericConfig+0x40>
        break;
    default:
        break;
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80208de:	4638      	mov	r0, r7
 80208e0:	f001 facc 	bl	8021e7c <SUBGRF_SetRfTxPower>
 80208e4:	4c84      	ldr	r4, [pc, #528]	; (8020af8 <RadioSetTxGenericConfig+0x240>)
 80208e6:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80208ea:	f001 fba1 	bl	8022030 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80208ee:	6066      	str	r6, [r4, #4]
    return 0;
 80208f0:	2000      	movs	r0, #0
}
 80208f2:	b006      	add	sp, #24
 80208f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80208f8:	68a3      	ldr	r3, [r4, #8]
 80208fa:	2b00      	cmp	r3, #0
 80208fc:	f000 80f0 	beq.w	8020ae0 <RadioSetTxGenericConfig+0x228>
 8020900:	6923      	ldr	r3, [r4, #16]
 8020902:	2b00      	cmp	r3, #0
 8020904:	f000 80ef 	beq.w	8020ae6 <RadioSetTxGenericConfig+0x22e>
        if( config->fsk.SyncWordLength > 8 )
 8020908:	7d20      	ldrb	r0, [r4, #20]
 802090a:	2808      	cmp	r0, #8
 802090c:	f200 80ee 	bhi.w	8020aec <RadioSetTxGenericConfig+0x234>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8020910:	2100      	movs	r1, #0
 8020912:	e006      	b.n	8020922 <RadioSetTxGenericConfig+0x6a>
                syncword[i] = config->fsk.SyncWord[i];
 8020914:	69a3      	ldr	r3, [r4, #24]
 8020916:	5c5a      	ldrb	r2, [r3, r1]
 8020918:	ab06      	add	r3, sp, #24
 802091a:	440b      	add	r3, r1
 802091c:	f803 2c08 	strb.w	r2, [r3, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8020920:	3101      	adds	r1, #1
 8020922:	4288      	cmp	r0, r1
 8020924:	dcf6      	bgt.n	8020914 <RadioSetTxGenericConfig+0x5c>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8020926:	4d74      	ldr	r5, [pc, #464]	; (8020af8 <RadioSetTxGenericConfig+0x240>)
 8020928:	f04f 0800 	mov.w	r8, #0
 802092c:	f885 8038 	strb.w	r8, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8020930:	68a3      	ldr	r3, [r4, #8]
 8020932:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8020934:	7823      	ldrb	r3, [r4, #0]
 8020936:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 802093a:	6860      	ldr	r0, [r4, #4]
 802093c:	f001 fb0c 	bl	8021f58 <SUBGRF_GetFskBandwidthRegValue>
 8020940:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8020944:	68e3      	ldr	r3, [r4, #12]
 8020946:	642b      	str	r3, [r5, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8020948:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 802094c:	6923      	ldr	r3, [r4, #16]
 802094e:	00db      	lsls	r3, r3, #3
 8020950:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8020952:	2304      	movs	r3, #4
 8020954:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8020956:	7d23      	ldrb	r3, [r4, #20]
 8020958:	00db      	lsls	r3, r3, #3
 802095a:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 802095c:	f885 8014 	strb.w	r8, [r5, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8020960:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8020964:	2b02      	cmp	r3, #2
 8020966:	d008      	beq.n	802097a <RadioSetTxGenericConfig+0xc2>
 8020968:	7fa2      	ldrb	r2, [r4, #30]
 802096a:	2a02      	cmp	r2, #2
 802096c:	d005      	beq.n	802097a <RadioSetTxGenericConfig+0xc2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 802096e:	7fe0      	ldrb	r0, [r4, #31]
 8020970:	4961      	ldr	r1, [pc, #388]	; (8020af8 <RadioSetTxGenericConfig+0x240>)
 8020972:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8020974:	760b      	strb	r3, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8020976:	754a      	strb	r2, [r1, #21]
 8020978:	e018      	b.n	80209ac <RadioSetTxGenericConfig+0xf4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 802097a:	7fe2      	ldrb	r2, [r4, #31]
 802097c:	f102 030f 	add.w	r3, r2, #15
 8020980:	b2db      	uxtb	r3, r3
 8020982:	2b01      	cmp	r3, #1
 8020984:	d901      	bls.n	802098a <RadioSetTxGenericConfig+0xd2>
 8020986:	2a01      	cmp	r2, #1
 8020988:	d127      	bne.n	80209da <RadioSetTxGenericConfig+0x122>
            ConfigGeneric.rtx = CONFIG_TX;
 802098a:	2301      	movs	r3, #1
 802098c:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 8020990:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8020992:	4a5a      	ldr	r2, [pc, #360]	; (8020afc <RadioSetTxGenericConfig+0x244>)
 8020994:	4b5a      	ldr	r3, [pc, #360]	; (8020b00 <RadioSetTxGenericConfig+0x248>)
 8020996:	6819      	ldr	r1, [r3, #0]
 8020998:	a801      	add	r0, sp, #4
 802099a:	f001 fb41 	bl	8022020 <RFW_Init>
 802099e:	b9e0      	cbnz	r0, 80209da <RadioSetTxGenericConfig+0x122>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80209a0:	4b55      	ldr	r3, [pc, #340]	; (8020af8 <RadioSetTxGenericConfig+0x240>)
 80209a2:	2200      	movs	r2, #0
 80209a4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80209a6:	2101      	movs	r1, #1
 80209a8:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80209aa:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80209ac:	f7ff fc88 	bl	80202c0 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80209b0:	2000      	movs	r0, #0
 80209b2:	f7ff ff49 	bl	8020848 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80209b6:	4d53      	ldr	r5, [pc, #332]	; (8020b04 <RadioSetTxGenericConfig+0x24c>)
 80209b8:	4628      	mov	r0, r5
 80209ba:	f000 ff79 	bl	80218b0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80209be:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 80209c2:	f001 f945 	bl	8021c50 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80209c6:	a804      	add	r0, sp, #16
 80209c8:	f001 f910 	bl	8021bec <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80209cc:	8ba0      	ldrh	r0, [r4, #28]
 80209ce:	f001 f873 	bl	8021ab8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 80209d2:	8c20      	ldrh	r0, [r4, #32]
 80209d4:	f001 f927 	bl	8021c26 <SUBGRF_SetCrcPolynomial>
        break;
 80209d8:	e781      	b.n	80208de <RadioSetTxGenericConfig+0x26>
                return -1;
 80209da:	f04f 30ff 	mov.w	r0, #4294967295
 80209de:	e788      	b.n	80208f2 <RadioSetTxGenericConfig+0x3a>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80209e0:	4b45      	ldr	r3, [pc, #276]	; (8020af8 <RadioSetTxGenericConfig+0x240>)
 80209e2:	2201      	movs	r2, #1
 80209e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80209e8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80209ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80209f0:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80209f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80209f8:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 80209fc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8020a00:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8020a04:	2b01      	cmp	r3, #1
 8020a06:	d036      	beq.n	8020a76 <RadioSetTxGenericConfig+0x1be>
 8020a08:	2b02      	cmp	r3, #2
 8020a0a:	d039      	beq.n	8020a80 <RadioSetTxGenericConfig+0x1c8>
 8020a0c:	b373      	cbz	r3, 8020a6c <RadioSetTxGenericConfig+0x1b4>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8020a0e:	4d3a      	ldr	r5, [pc, #232]	; (8020af8 <RadioSetTxGenericConfig+0x240>)
 8020a10:	f04f 0801 	mov.w	r8, #1
 8020a14:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8020a18:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8020a1a:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8020a1c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8020a20:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8020a22:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8020a26:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8020a2a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8020a2e:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8020a32:	f7ff fc45 	bl	80202c0 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8020a36:	4640      	mov	r0, r8
 8020a38:	f7ff ff06 	bl	8020848 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8020a3c:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8020a40:	f000 ff36 	bl	80218b0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8020a44:	f105 000e 	add.w	r0, r5, #14
 8020a48:	f001 f902 	bl	8021c50 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8020a4c:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 8020a50:	2b06      	cmp	r3, #6
 8020a52:	d025      	beq.n	8020aa0 <RadioSetTxGenericConfig+0x1e8>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8020a54:	f640 0089 	movw	r0, #2185	; 0x889
 8020a58:	f000 ffb2 	bl	80219c0 <SUBGRF_ReadRegister>
 8020a5c:	f040 0104 	orr.w	r1, r0, #4
 8020a60:	b2c9      	uxtb	r1, r1
 8020a62:	f640 0089 	movw	r0, #2185	; 0x889
 8020a66:	f000 febb 	bl	80217e0 <SUBGRF_WriteRegister>
 8020a6a:	e738      	b.n	80208de <RadioSetTxGenericConfig+0x26>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8020a6c:	4b22      	ldr	r3, [pc, #136]	; (8020af8 <RadioSetTxGenericConfig+0x240>)
 8020a6e:	2200      	movs	r2, #0
 8020a70:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8020a74:	e7cb      	b.n	8020a0e <RadioSetTxGenericConfig+0x156>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8020a76:	4b20      	ldr	r3, [pc, #128]	; (8020af8 <RadioSetTxGenericConfig+0x240>)
 8020a78:	2201      	movs	r2, #1
 8020a7a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8020a7e:	e7c6      	b.n	8020a0e <RadioSetTxGenericConfig+0x156>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8020a80:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8020a84:	3b0b      	subs	r3, #11
 8020a86:	b2db      	uxtb	r3, r3
 8020a88:	2b01      	cmp	r3, #1
 8020a8a:	d904      	bls.n	8020a96 <RadioSetTxGenericConfig+0x1de>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8020a8c:	4b1a      	ldr	r3, [pc, #104]	; (8020af8 <RadioSetTxGenericConfig+0x240>)
 8020a8e:	2200      	movs	r2, #0
 8020a90:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8020a94:	e7bb      	b.n	8020a0e <RadioSetTxGenericConfig+0x156>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8020a96:	4b18      	ldr	r3, [pc, #96]	; (8020af8 <RadioSetTxGenericConfig+0x240>)
 8020a98:	2201      	movs	r2, #1
 8020a9a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8020a9e:	e7b6      	b.n	8020a0e <RadioSetTxGenericConfig+0x156>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8020aa0:	f640 0089 	movw	r0, #2185	; 0x889
 8020aa4:	f000 ff8c 	bl	80219c0 <SUBGRF_ReadRegister>
 8020aa8:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8020aac:	f640 0089 	movw	r0, #2185	; 0x889
 8020ab0:	f000 fe96 	bl	80217e0 <SUBGRF_WriteRegister>
 8020ab4:	e713      	b.n	80208de <RadioSetTxGenericConfig+0x26>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8020ab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020ab8:	3b01      	subs	r3, #1
 8020aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8020abe:	d218      	bcs.n	8020af2 <RadioSetTxGenericConfig+0x23a>
        RadioSetModem( MODEM_BPSK );
 8020ac0:	2002      	movs	r0, #2
 8020ac2:	f7ff fec1 	bl	8020848 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8020ac6:	480c      	ldr	r0, [pc, #48]	; (8020af8 <RadioSetTxGenericConfig+0x240>)
 8020ac8:	2302      	movs	r3, #2
 8020aca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8020ace:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020ad0:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8020ad2:	2316      	movs	r3, #22
 8020ad4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8020ad8:	3038      	adds	r0, #56	; 0x38
 8020ada:	f000 fee9 	bl	80218b0 <SUBGRF_SetModulationParams>
        break;
 8020ade:	e6fe      	b.n	80208de <RadioSetTxGenericConfig+0x26>
            return -1;
 8020ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8020ae4:	e705      	b.n	80208f2 <RadioSetTxGenericConfig+0x3a>
 8020ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8020aea:	e702      	b.n	80208f2 <RadioSetTxGenericConfig+0x3a>
            return -1;
 8020aec:	f04f 30ff 	mov.w	r0, #4294967295
 8020af0:	e6ff      	b.n	80208f2 <RadioSetTxGenericConfig+0x3a>
            return -1;
 8020af2:	f04f 30ff 	mov.w	r0, #4294967295
 8020af6:	e6fc      	b.n	80208f2 <RadioSetTxGenericConfig+0x3a>
 8020af8:	200028bc 	.word	0x200028bc
 8020afc:	20002914 	.word	0x20002914
 8020b00:	20001ca4 	.word	0x20001ca4
 8020b04:	200028f4 	.word	0x200028f4

08020b08 <RadioSetRxGenericConfig>:
{
 8020b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020b0a:	b087      	sub	sp, #28
 8020b0c:	4607      	mov	r7, r0
 8020b0e:	460c      	mov	r4, r1
 8020b10:	4615      	mov	r5, r2
 8020b12:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 8020b14:	2300      	movs	r3, #0
 8020b16:	9304      	str	r3, [sp, #16]
 8020b18:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8020b1a:	f001 fa84 	bl	8022026 <RFW_DeInit>
    if( rxContinuous != 0 )
 8020b1e:	b105      	cbz	r5, 8020b22 <RadioSetRxGenericConfig+0x1a>
        symbTimeout = 0;
 8020b20:	2600      	movs	r6, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8020b22:	3d00      	subs	r5, #0
 8020b24:	bf18      	it	ne
 8020b26:	2501      	movne	r5, #1
 8020b28:	4b94      	ldr	r3, [pc, #592]	; (8020d7c <RadioSetRxGenericConfig+0x274>)
 8020b2a:	705d      	strb	r5, [r3, #1]
    switch( modem )
 8020b2c:	b12f      	cbz	r7, 8020b3a <RadioSetRxGenericConfig+0x32>
 8020b2e:	2f01      	cmp	r7, #1
 8020b30:	f000 8094 	beq.w	8020c5c <RadioSetRxGenericConfig+0x154>
 8020b34:	2000      	movs	r0, #0
}
 8020b36:	b007      	add	sp, #28
 8020b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8020b3a:	68e3      	ldr	r3, [r4, #12]
 8020b3c:	2b00      	cmp	r3, #0
 8020b3e:	f000 8110 	beq.w	8020d62 <RadioSetRxGenericConfig+0x25a>
 8020b42:	6923      	ldr	r3, [r4, #16]
 8020b44:	2b00      	cmp	r3, #0
 8020b46:	f000 810f 	beq.w	8020d68 <RadioSetRxGenericConfig+0x260>
        if( config->fsk.SyncWordLength > 8 )
 8020b4a:	7d63      	ldrb	r3, [r4, #21]
 8020b4c:	2b08      	cmp	r3, #8
 8020b4e:	f200 810e 	bhi.w	8020d6e <RadioSetRxGenericConfig+0x266>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8020b52:	2200      	movs	r2, #0
 8020b54:	e006      	b.n	8020b64 <RadioSetRxGenericConfig+0x5c>
                syncword[i] = config->fsk.SyncWord[i];
 8020b56:	69a1      	ldr	r1, [r4, #24]
 8020b58:	5c88      	ldrb	r0, [r1, r2]
 8020b5a:	a906      	add	r1, sp, #24
 8020b5c:	4411      	add	r1, r2
 8020b5e:	f801 0c08 	strb.w	r0, [r1, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8020b62:	3201      	adds	r2, #1
 8020b64:	4293      	cmp	r3, r2
 8020b66:	dcf6      	bgt.n	8020b56 <RadioSetRxGenericConfig+0x4e>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8020b68:	6820      	ldr	r0, [r4, #0]
 8020b6a:	3800      	subs	r0, #0
 8020b6c:	bf18      	it	ne
 8020b6e:	2001      	movne	r0, #1
 8020b70:	f000 fcd2 	bl	8021518 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8020b74:	4d81      	ldr	r5, [pc, #516]	; (8020d7c <RadioSetRxGenericConfig+0x274>)
 8020b76:	2700      	movs	r7, #0
 8020b78:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8020b7c:	68e3      	ldr	r3, [r4, #12]
 8020b7e:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8020b80:	7923      	ldrb	r3, [r4, #4]
 8020b82:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8020b86:	68a0      	ldr	r0, [r4, #8]
 8020b88:	f001 f9e6 	bl	8021f58 <SUBGRF_GetFskBandwidthRegValue>
 8020b8c:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8020b90:	73af      	strb	r7, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8020b92:	6923      	ldr	r3, [r4, #16]
 8020b94:	00db      	lsls	r3, r3, #3
 8020b96:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8020b98:	7d23      	ldrb	r3, [r4, #20]
 8020b9a:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8020b9c:	7d63      	ldrb	r3, [r4, #21]
 8020b9e:	00db      	lsls	r3, r3, #3
 8020ba0:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8020ba2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8020ba6:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8020ba8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8020bac:	b973      	cbnz	r3, 8020bcc <RadioSetRxGenericConfig+0xc4>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8020bae:	69e1      	ldr	r1, [r4, #28]
 8020bb0:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8020bb2:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8020bb6:	2a02      	cmp	r2, #2
 8020bb8:	d012      	beq.n	8020be0 <RadioSetRxGenericConfig+0xd8>
 8020bba:	2b02      	cmp	r3, #2
 8020bbc:	d010      	beq.n	8020be0 <RadioSetRxGenericConfig+0xd8>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8020bbe:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8020bc2:	496e      	ldr	r1, [pc, #440]	; (8020d7c <RadioSetRxGenericConfig+0x274>)
 8020bc4:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8020bc6:	760a      	strb	r2, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8020bc8:	754b      	strb	r3, [r1, #21]
 8020bca:	e023      	b.n	8020c14 <RadioSetRxGenericConfig+0x10c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8020bcc:	2b02      	cmp	r3, #2
 8020bce:	d003      	beq.n	8020bd8 <RadioSetRxGenericConfig+0xd0>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8020bd0:	4a6a      	ldr	r2, [pc, #424]	; (8020d7c <RadioSetRxGenericConfig+0x274>)
 8020bd2:	21ff      	movs	r1, #255	; 0xff
 8020bd4:	7591      	strb	r1, [r2, #22]
 8020bd6:	e7ec      	b.n	8020bb2 <RadioSetRxGenericConfig+0xaa>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8020bd8:	4a68      	ldr	r2, [pc, #416]	; (8020d7c <RadioSetRxGenericConfig+0x274>)
 8020bda:	21ff      	movs	r1, #255	; 0xff
 8020bdc:	7591      	strb	r1, [r2, #22]
 8020bde:	e7e8      	b.n	8020bb2 <RadioSetRxGenericConfig+0xaa>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8020be0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8020be4:	f102 030f 	add.w	r3, r2, #15
 8020be8:	b2db      	uxtb	r3, r3
 8020bea:	2b01      	cmp	r3, #1
 8020bec:	d901      	bls.n	8020bf2 <RadioSetRxGenericConfig+0xea>
 8020bee:	2a01      	cmp	r2, #1
 8020bf0:	d131      	bne.n	8020c56 <RadioSetRxGenericConfig+0x14e>
          ConfigGeneric.rtx = CONFIG_RX;
 8020bf2:	2300      	movs	r3, #0
 8020bf4:	f88d 300c 	strb.w	r3, [sp, #12]
          ConfigGeneric.RxConfig = config;
 8020bf8:	9402      	str	r4, [sp, #8]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8020bfa:	4a61      	ldr	r2, [pc, #388]	; (8020d80 <RadioSetRxGenericConfig+0x278>)
 8020bfc:	4b61      	ldr	r3, [pc, #388]	; (8020d84 <RadioSetRxGenericConfig+0x27c>)
 8020bfe:	6819      	ldr	r1, [r3, #0]
 8020c00:	a801      	add	r0, sp, #4
 8020c02:	f001 fa0d 	bl	8022020 <RFW_Init>
 8020c06:	bb30      	cbnz	r0, 8020c56 <RadioSetRxGenericConfig+0x14e>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8020c08:	4b5c      	ldr	r3, [pc, #368]	; (8020d7c <RadioSetRxGenericConfig+0x274>)
 8020c0a:	2200      	movs	r2, #0
 8020c0c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8020c0e:	2101      	movs	r1, #1
 8020c10:	75d9      	strb	r1, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8020c12:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8020c14:	f7ff fb54 	bl	80202c0 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8020c18:	2000      	movs	r0, #0
 8020c1a:	f7ff fe15 	bl	8020848 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8020c1e:	4d5a      	ldr	r5, [pc, #360]	; (8020d88 <RadioSetRxGenericConfig+0x280>)
 8020c20:	4628      	mov	r0, r5
 8020c22:	f000 fe45 	bl	80218b0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8020c26:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 8020c2a:	f001 f811 	bl	8021c50 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8020c2e:	a804      	add	r0, sp, #16
 8020c30:	f000 ffdc 	bl	8021bec <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8020c34:	8c20      	ldrh	r0, [r4, #32]
 8020c36:	f000 ff3f 	bl	8021ab8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8020c3a:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8020c3c:	f000 fff3 	bl	8021c26 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8020c40:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8020c44:	fb03 f606 	mul.w	r6, r3, r6
 8020c48:	68e3      	ldr	r3, [r4, #12]
 8020c4a:	fbb6 f6f3 	udiv	r6, r6, r3
 8020c4e:	f845 6c30 	str.w	r6, [r5, #-48]
    return status;
 8020c52:	2000      	movs	r0, #0
        break;
 8020c54:	e76f      	b.n	8020b36 <RadioSetRxGenericConfig+0x2e>
            return -1;
 8020c56:	f04f 30ff 	mov.w	r0, #4294967295
 8020c5a:	e76c      	b.n	8020b36 <RadioSetRxGenericConfig+0x2e>
        if( config->lora.PreambleLen == 0 )
 8020c5c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8020c5e:	2b00      	cmp	r3, #0
 8020c60:	f000 8088 	beq.w	8020d74 <RadioSetRxGenericConfig+0x26c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8020c64:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8020c68:	2b01      	cmp	r3, #1
 8020c6a:	d053      	beq.n	8020d14 <RadioSetRxGenericConfig+0x20c>
            MaxPayloadLength = 0xFF;
 8020c6c:	27ff      	movs	r7, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8020c6e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8020c70:	3800      	subs	r0, #0
 8020c72:	bf18      	it	ne
 8020c74:	2001      	movne	r0, #1
 8020c76:	f000 fc4f 	bl	8021518 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8020c7a:	b2f0      	uxtb	r0, r6
 8020c7c:	f000 fdde 	bl	802183c <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8020c80:	4b3e      	ldr	r3, [pc, #248]	; (8020d7c <RadioSetRxGenericConfig+0x274>)
 8020c82:	2201      	movs	r2, #1
 8020c84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8020c88:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8020c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8020c90:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8020c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8020c98:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 8020c9c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8020ca0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8020ca4:	2b01      	cmp	r3, #1
 8020ca6:	d03c      	beq.n	8020d22 <RadioSetRxGenericConfig+0x21a>
 8020ca8:	2b02      	cmp	r3, #2
 8020caa:	d03f      	beq.n	8020d2c <RadioSetRxGenericConfig+0x224>
 8020cac:	b3a3      	cbz	r3, 8020d18 <RadioSetRxGenericConfig+0x210>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8020cae:	4d33      	ldr	r5, [pc, #204]	; (8020d7c <RadioSetRxGenericConfig+0x274>)
 8020cb0:	2601      	movs	r6, #1
 8020cb2:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8020cb4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8020cb6:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8020cb8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8020cbc:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8020cbe:	77ef      	strb	r7, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8020cc0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8020cc4:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8020cc8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8020ccc:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8020cd0:	f7ff faf6 	bl	80202c0 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8020cd4:	4630      	mov	r0, r6
 8020cd6:	f7ff fdb7 	bl	8020848 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8020cda:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8020cde:	f000 fde7 	bl	80218b0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8020ce2:	f105 000e 	add.w	r0, r5, #14
 8020ce6:	f000 ffb3 	bl	8021c50 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8020cea:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8020cee:	42b3      	cmp	r3, r6
 8020cf0:	d02c      	beq.n	8020d4c <RadioSetRxGenericConfig+0x244>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8020cf2:	f240 7036 	movw	r0, #1846	; 0x736
 8020cf6:	f000 fe63 	bl	80219c0 <SUBGRF_ReadRegister>
 8020cfa:	f040 0104 	orr.w	r1, r0, #4
 8020cfe:	b2c9      	uxtb	r1, r1
 8020d00:	f240 7036 	movw	r0, #1846	; 0x736
 8020d04:	f000 fd6c 	bl	80217e0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8020d08:	4b1c      	ldr	r3, [pc, #112]	; (8020d7c <RadioSetRxGenericConfig+0x274>)
 8020d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020d0e:	609a      	str	r2, [r3, #8]
    return status;
 8020d10:	2000      	movs	r0, #0
        break;
 8020d12:	e710      	b.n	8020b36 <RadioSetRxGenericConfig+0x2e>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8020d14:	7f27      	ldrb	r7, [r4, #28]
 8020d16:	e7aa      	b.n	8020c6e <RadioSetRxGenericConfig+0x166>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8020d18:	4b18      	ldr	r3, [pc, #96]	; (8020d7c <RadioSetRxGenericConfig+0x274>)
 8020d1a:	2200      	movs	r2, #0
 8020d1c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8020d20:	e7c5      	b.n	8020cae <RadioSetRxGenericConfig+0x1a6>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8020d22:	4b16      	ldr	r3, [pc, #88]	; (8020d7c <RadioSetRxGenericConfig+0x274>)
 8020d24:	2201      	movs	r2, #1
 8020d26:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8020d2a:	e7c0      	b.n	8020cae <RadioSetRxGenericConfig+0x1a6>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8020d2c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8020d30:	3b0b      	subs	r3, #11
 8020d32:	b2db      	uxtb	r3, r3
 8020d34:	2b01      	cmp	r3, #1
 8020d36:	d904      	bls.n	8020d42 <RadioSetRxGenericConfig+0x23a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8020d38:	4b10      	ldr	r3, [pc, #64]	; (8020d7c <RadioSetRxGenericConfig+0x274>)
 8020d3a:	2200      	movs	r2, #0
 8020d3c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8020d40:	e7b5      	b.n	8020cae <RadioSetRxGenericConfig+0x1a6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8020d42:	4b0e      	ldr	r3, [pc, #56]	; (8020d7c <RadioSetRxGenericConfig+0x274>)
 8020d44:	2201      	movs	r2, #1
 8020d46:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8020d4a:	e7b0      	b.n	8020cae <RadioSetRxGenericConfig+0x1a6>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8020d4c:	f240 7036 	movw	r0, #1846	; 0x736
 8020d50:	f000 fe36 	bl	80219c0 <SUBGRF_ReadRegister>
 8020d54:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8020d58:	f240 7036 	movw	r0, #1846	; 0x736
 8020d5c:	f000 fd40 	bl	80217e0 <SUBGRF_WriteRegister>
 8020d60:	e7d2      	b.n	8020d08 <RadioSetRxGenericConfig+0x200>
            return -1;
 8020d62:	f04f 30ff 	mov.w	r0, #4294967295
 8020d66:	e6e6      	b.n	8020b36 <RadioSetRxGenericConfig+0x2e>
 8020d68:	f04f 30ff 	mov.w	r0, #4294967295
 8020d6c:	e6e3      	b.n	8020b36 <RadioSetRxGenericConfig+0x2e>
            return -1;
 8020d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8020d72:	e6e0      	b.n	8020b36 <RadioSetRxGenericConfig+0x2e>
            return -1;
 8020d74:	f04f 30ff 	mov.w	r0, #4294967295
 8020d78:	e6dd      	b.n	8020b36 <RadioSetRxGenericConfig+0x2e>
 8020d7a:	bf00      	nop
 8020d7c:	200028bc 	.word	0x200028bc
 8020d80:	2000292c 	.word	0x2000292c
 8020d84:	20001ca4 	.word	0x20001ca4
 8020d88:	200028f4 	.word	0x200028f4

08020d8c <RadioSetPublicNetwork>:
{
 8020d8c:	b510      	push	{r4, lr}
 8020d8e:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8020d90:	4b0e      	ldr	r3, [pc, #56]	; (8020dcc <RadioSetPublicNetwork+0x40>)
 8020d92:	7318      	strb	r0, [r3, #12]
 8020d94:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8020d96:	2001      	movs	r0, #1
 8020d98:	f7ff fd56 	bl	8020848 <RadioSetModem>
    if( enable == true )
 8020d9c:	b154      	cbz	r4, 8020db4 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8020d9e:	2134      	movs	r1, #52	; 0x34
 8020da0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8020da4:	f000 fd1c 	bl	80217e0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8020da8:	2144      	movs	r1, #68	; 0x44
 8020daa:	f240 7041 	movw	r0, #1857	; 0x741
 8020dae:	f000 fd17 	bl	80217e0 <SUBGRF_WriteRegister>
}
 8020db2:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8020db4:	2114      	movs	r1, #20
 8020db6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8020dba:	f000 fd11 	bl	80217e0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8020dbe:	2124      	movs	r1, #36	; 0x24
 8020dc0:	f240 7041 	movw	r0, #1857	; 0x741
 8020dc4:	f000 fd0c 	bl	80217e0 <SUBGRF_WriteRegister>
}
 8020dc8:	e7f3      	b.n	8020db2 <RadioSetPublicNetwork+0x26>
 8020dca:	bf00      	nop
 8020dcc:	200028bc 	.word	0x200028bc

08020dd0 <RadioSetTxConfig>:
{
 8020dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dd4:	b083      	sub	sp, #12
 8020dd6:	4604      	mov	r4, r0
 8020dd8:	460d      	mov	r5, r1
 8020dda:	4691      	mov	r9, r2
 8020ddc:	461f      	mov	r7, r3
 8020dde:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8020de2:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 8020de6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8020dea:	f001 f91c 	bl	8022026 <RFW_DeInit>
    switch( modem )
 8020dee:	2c01      	cmp	r4, #1
 8020df0:	d05a      	beq.n	8020ea8 <RadioSetTxConfig+0xd8>
 8020df2:	2c03      	cmp	r4, #3
 8020df4:	f000 80ab 	beq.w	8020f4e <RadioSetTxConfig+0x17e>
 8020df8:	b164      	cbz	r4, 8020e14 <RadioSetTxConfig+0x44>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8020dfa:	4628      	mov	r0, r5
 8020dfc:	f001 f83e 	bl	8021e7c <SUBGRF_SetRfTxPower>
 8020e00:	4c5b      	ldr	r4, [pc, #364]	; (8020f70 <RadioSetTxConfig+0x1a0>)
 8020e02:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8020e06:	f001 f913 	bl	8022030 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8020e0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020e0c:	6063      	str	r3, [r4, #4]
}
 8020e0e:	b003      	add	sp, #12
 8020e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8020e14:	4c56      	ldr	r4, [pc, #344]	; (8020f70 <RadioSetTxConfig+0x1a0>)
 8020e16:	f04f 0b00 	mov.w	fp, #0
 8020e1a:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8020e1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e20:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8020e22:	230b      	movs	r3, #11
 8020e24:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8020e28:	4638      	mov	r0, r7
 8020e2a:	f001 f895 	bl	8021f58 <SUBGRF_GetFskBandwidthRegValue>
 8020e2e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8020e32:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8020e36:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8020e3a:	00f6      	lsls	r6, r6, #3
 8020e3c:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8020e3e:	2304      	movs	r3, #4
 8020e40:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8020e42:	2318      	movs	r3, #24
 8020e44:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8020e46:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8020e4a:	f088 0801 	eor.w	r8, r8, #1
 8020e4e:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 8020e52:	f1ba 0f00 	cmp.w	sl, #0
 8020e56:	d023      	beq.n	8020ea0 <RadioSetTxConfig+0xd0>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8020e58:	22f2      	movs	r2, #242	; 0xf2
 8020e5a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8020e5c:	4c44      	ldr	r4, [pc, #272]	; (8020f70 <RadioSetTxConfig+0x1a0>)
 8020e5e:	2301      	movs	r3, #1
 8020e60:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8020e62:	f7ff fa2d 	bl	80202c0 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8020e66:	4626      	mov	r6, r4
 8020e68:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 8020e6c:	3800      	subs	r0, #0
 8020e6e:	bf18      	it	ne
 8020e70:	2001      	movne	r0, #1
 8020e72:	f7ff fce9 	bl	8020848 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8020e76:	4630      	mov	r0, r6
 8020e78:	f000 fd1a 	bl	80218b0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8020e7c:	f104 000e 	add.w	r0, r4, #14
 8020e80:	f000 fee6 	bl	8021c50 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8020e84:	4a3b      	ldr	r2, [pc, #236]	; (8020f74 <RadioSetTxConfig+0x1a4>)
 8020e86:	466b      	mov	r3, sp
 8020e88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020e8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8020e90:	4618      	mov	r0, r3
 8020e92:	f000 feab 	bl	8021bec <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8020e96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8020e9a:	f000 fe0d 	bl	8021ab8 <SUBGRF_SetWhiteningSeed>
            break;
 8020e9e:	e7ac      	b.n	8020dfa <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8020ea0:	4b33      	ldr	r3, [pc, #204]	; (8020f70 <RadioSetTxConfig+0x1a0>)
 8020ea2:	2201      	movs	r2, #1
 8020ea4:	75da      	strb	r2, [r3, #23]
 8020ea6:	e7d9      	b.n	8020e5c <RadioSetTxConfig+0x8c>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8020ea8:	4a31      	ldr	r2, [pc, #196]	; (8020f70 <RadioSetTxConfig+0x1a0>)
 8020eaa:	2301      	movs	r3, #1
 8020eac:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8020eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020eb2:	b2db      	uxtb	r3, r3
 8020eb4:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8020eb8:	492f      	ldr	r1, [pc, #188]	; (8020f78 <RadioSetTxConfig+0x1a8>)
 8020eba:	5dc9      	ldrb	r1, [r1, r7]
 8020ebc:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8020ec0:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8020ec4:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8020ec8:	b91f      	cbnz	r7, 8020ed2 <RadioSetTxConfig+0x102>
 8020eca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020ecc:	3a0b      	subs	r2, #11
 8020ece:	2a01      	cmp	r2, #1
 8020ed0:	d92f      	bls.n	8020f32 <RadioSetTxConfig+0x162>
 8020ed2:	2f01      	cmp	r7, #1
 8020ed4:	d02a      	beq.n	8020f2c <RadioSetTxConfig+0x15c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8020ed6:	4a26      	ldr	r2, [pc, #152]	; (8020f70 <RadioSetTxConfig+0x1a0>)
 8020ed8:	2100      	movs	r1, #0
 8020eda:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8020ede:	4a24      	ldr	r2, [pc, #144]	; (8020f70 <RadioSetTxConfig+0x1a0>)
 8020ee0:	2101      	movs	r1, #1
 8020ee2:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8020ee4:	3b05      	subs	r3, #5
 8020ee6:	b2db      	uxtb	r3, r3
 8020ee8:	428b      	cmp	r3, r1
 8020eea:	d927      	bls.n	8020f3c <RadioSetTxConfig+0x16c>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8020eec:	4b20      	ldr	r3, [pc, #128]	; (8020f70 <RadioSetTxConfig+0x1a0>)
 8020eee:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8020ef0:	4c1f      	ldr	r4, [pc, #124]	; (8020f70 <RadioSetTxConfig+0x1a0>)
 8020ef2:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8020ef6:	4b21      	ldr	r3, [pc, #132]	; (8020f7c <RadioSetTxConfig+0x1ac>)
 8020ef8:	781b      	ldrb	r3, [r3, #0]
 8020efa:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8020efc:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8020f00:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8020f04:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8020f08:	f7ff f9da 	bl	80202c0 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8020f0c:	4626      	mov	r6, r4
 8020f0e:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 8020f12:	3800      	subs	r0, #0
 8020f14:	bf18      	it	ne
 8020f16:	2001      	movne	r0, #1
 8020f18:	f7ff fc96 	bl	8020848 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8020f1c:	4630      	mov	r0, r6
 8020f1e:	f000 fcc7 	bl	80218b0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8020f22:	f104 000e 	add.w	r0, r4, #14
 8020f26:	f000 fe93 	bl	8021c50 <SUBGRF_SetPacketParams>
            break;
 8020f2a:	e766      	b.n	8020dfa <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8020f2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020f2e:	2a0c      	cmp	r2, #12
 8020f30:	d1d1      	bne.n	8020ed6 <RadioSetTxConfig+0x106>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8020f32:	4a0f      	ldr	r2, [pc, #60]	; (8020f70 <RadioSetTxConfig+0x1a0>)
 8020f34:	2101      	movs	r1, #1
 8020f36:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8020f3a:	e7d0      	b.n	8020ede <RadioSetTxConfig+0x10e>
                if( preambleLen < 12 )
 8020f3c:	2e0b      	cmp	r6, #11
 8020f3e:	d803      	bhi.n	8020f48 <RadioSetTxConfig+0x178>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8020f40:	4613      	mov	r3, r2
 8020f42:	220c      	movs	r2, #12
 8020f44:	839a      	strh	r2, [r3, #28]
 8020f46:	e7d3      	b.n	8020ef0 <RadioSetTxConfig+0x120>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8020f48:	4b09      	ldr	r3, [pc, #36]	; (8020f70 <RadioSetTxConfig+0x1a0>)
 8020f4a:	839e      	strh	r6, [r3, #28]
 8020f4c:	e7d0      	b.n	8020ef0 <RadioSetTxConfig+0x120>
            RadioSetModem(MODEM_SIGFOX_TX);
 8020f4e:	2003      	movs	r0, #3
 8020f50:	f7ff fc7a 	bl	8020848 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8020f54:	4806      	ldr	r0, [pc, #24]	; (8020f70 <RadioSetTxConfig+0x1a0>)
 8020f56:	2302      	movs	r3, #2
 8020f58:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8020f5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020f5e:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8020f60:	2316      	movs	r3, #22
 8020f62:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8020f66:	3038      	adds	r0, #56	; 0x38
 8020f68:	f000 fca2 	bl	80218b0 <SUBGRF_SetModulationParams>
            break;
 8020f6c:	e745      	b.n	8020dfa <RadioSetTxConfig+0x2a>
 8020f6e:	bf00      	nop
 8020f70:	200028bc 	.word	0x200028bc
 8020f74:	08024bf8 	.word	0x08024bf8
 8020f78:	08028980 	.word	0x08028980
 8020f7c:	20000200 	.word	0x20000200

08020f80 <RadioSetRxConfig>:
{
 8020f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f84:	b087      	sub	sp, #28
 8020f86:	4604      	mov	r4, r0
 8020f88:	460e      	mov	r6, r1
 8020f8a:	4615      	mov	r5, r2
 8020f8c:	9301      	str	r3, [sp, #4]
 8020f8e:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 8020f92:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 8020f96:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8020f9a:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 8020f9e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 8020fa2:	4baf      	ldr	r3, [pc, #700]	; (8021260 <RadioSetRxConfig+0x2e0>)
 8020fa4:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8020fa8:	f001 f83d 	bl	8022026 <RFW_DeInit>
    if( rxContinuous == true )
 8020fac:	f1b8 0f00 	cmp.w	r8, #0
 8020fb0:	d001      	beq.n	8020fb6 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8020fb2:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8020fb6:	b16f      	cbz	r7, 8020fd4 <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 8020fb8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8020fbc:	4ba9      	ldr	r3, [pc, #676]	; (8021264 <RadioSetRxConfig+0x2e4>)
 8020fbe:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8020fc0:	2c01      	cmp	r4, #1
 8020fc2:	f000 80d6 	beq.w	8021172 <RadioSetRxConfig+0x1f2>
 8020fc6:	2c04      	cmp	r4, #4
 8020fc8:	d008      	beq.n	8020fdc <RadioSetRxConfig+0x5c>
 8020fca:	2c00      	cmp	r4, #0
 8020fcc:	d07c      	beq.n	80210c8 <RadioSetRxConfig+0x148>
}
 8020fce:	b007      	add	sp, #28
 8020fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8020fd4:	4ba3      	ldr	r3, [pc, #652]	; (8021264 <RadioSetRxConfig+0x2e4>)
 8020fd6:	22ff      	movs	r2, #255	; 0xff
 8020fd8:	701a      	strb	r2, [r3, #0]
 8020fda:	e7f1      	b.n	8020fc0 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8020fdc:	2001      	movs	r0, #1
 8020fde:	f000 fa9b 	bl	8021518 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8020fe2:	4c9f      	ldr	r4, [pc, #636]	; (8021260 <RadioSetRxConfig+0x2e0>)
 8020fe4:	2700      	movs	r7, #0
 8020fe6:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8020fea:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8020fec:	2309      	movs	r3, #9
 8020fee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8020ff2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8020ff6:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8020ff8:	4630      	mov	r0, r6
 8020ffa:	f000 ffad 	bl	8021f58 <SUBGRF_GetFskBandwidthRegValue>
 8020ffe:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8021002:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8021004:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8021008:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 802100c:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 802100e:	2310      	movs	r3, #16
 8021010:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8021012:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8021014:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8021016:	4b93      	ldr	r3, [pc, #588]	; (8021264 <RadioSetRxConfig+0x2e4>)
 8021018:	781b      	ldrb	r3, [r3, #0]
 802101a:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 802101c:	2301      	movs	r3, #1
 802101e:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8021020:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8021022:	2004      	movs	r0, #4
 8021024:	f7ff fc10 	bl	8020848 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8021028:	f104 0038 	add.w	r0, r4, #56	; 0x38
 802102c:	f000 fc40 	bl	80218b0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8021030:	f104 000e 	add.w	r0, r4, #14
 8021034:	f000 fe0c 	bl	8021c50 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8021038:	ab02      	add	r3, sp, #8
 802103a:	4a8b      	ldr	r2, [pc, #556]	; (8021268 <RadioSetRxConfig+0x2e8>)
 802103c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021040:	e883 0003 	stmia.w	r3, {r0, r1}
 8021044:	4618      	mov	r0, r3
 8021046:	f000 fdd1 	bl	8021bec <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 802104a:	f240 10ff 	movw	r0, #511	; 0x1ff
 802104e:	f000 fd33 	bl	8021ab8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8021052:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8021056:	f7ff f8c9 	bl	80201ec <RadioRead>
            RadioWrite(0x8b8, modReg);
 802105a:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 802105e:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8021062:	f7ff f8c7 	bl	80201f4 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8021066:	2104      	movs	r1, #4
 8021068:	f640 00b9 	movw	r0, #2233	; 0x8b9
 802106c:	f7ff f8c2 	bl	80201f4 <RadioWrite>
            modReg= RadioRead(0x89b);
 8021070:	f640 009b 	movw	r0, #2203	; 0x89b
 8021074:	f7ff f8ba 	bl	80201ec <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8021078:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 802107c:	f041 0108 	orr.w	r1, r1, #8
 8021080:	f640 009b 	movw	r0, #2203	; 0x89b
 8021084:	f7ff f8b6 	bl	80201f4 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8021088:	f240 60d1 	movw	r0, #1745	; 0x6d1
 802108c:	f7ff f8ae 	bl	80201ec <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8021090:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8021094:	f041 0118 	orr.w	r1, r1, #24
 8021098:	f240 60d1 	movw	r0, #1745	; 0x6d1
 802109c:	f7ff f8aa 	bl	80201f4 <RadioWrite>
            modReg= RadioRead(0x6ac);
 80210a0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80210a4:	f7ff f8a2 	bl	80201ec <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80210a8:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80210ac:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80210b0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80210b4:	f7ff f89e 	bl	80201f4 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80210b8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80210bc:	fb03 fa0a 	mul.w	sl, r3, sl
 80210c0:	fbba f5f5 	udiv	r5, sl, r5
 80210c4:	60a5      	str	r5, [r4, #8]
            break;
 80210c6:	e782      	b.n	8020fce <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80210c8:	2000      	movs	r0, #0
 80210ca:	f000 fa25 	bl	8021518 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80210ce:	4c64      	ldr	r4, [pc, #400]	; (8021260 <RadioSetRxConfig+0x2e0>)
 80210d0:	f04f 0800 	mov.w	r8, #0
 80210d4:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80210d8:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80210da:	230b      	movs	r3, #11
 80210dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80210e0:	4630      	mov	r0, r6
 80210e2:	f000 ff39 	bl	8021f58 <SUBGRF_GetFskBandwidthRegValue>
 80210e6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80210ea:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80210ee:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80210f2:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80210f6:	2304      	movs	r3, #4
 80210f8:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80210fa:	2318      	movs	r3, #24
 80210fc:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80210fe:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8021102:	f087 0701 	eor.w	r7, r7, #1
 8021106:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8021108:	4b56      	ldr	r3, [pc, #344]	; (8021264 <RadioSetRxConfig+0x2e4>)
 802110a:	781b      	ldrb	r3, [r3, #0]
 802110c:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 802110e:	f1bb 0f00 	cmp.w	fp, #0
 8021112:	d02a      	beq.n	802116a <RadioSetRxConfig+0x1ea>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8021114:	22f2      	movs	r2, #242	; 0xf2
 8021116:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8021118:	4c51      	ldr	r4, [pc, #324]	; (8021260 <RadioSetRxConfig+0x2e0>)
 802111a:	2301      	movs	r3, #1
 802111c:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 802111e:	f7ff f8cf 	bl	80202c0 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8021122:	4626      	mov	r6, r4
 8021124:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 8021128:	3800      	subs	r0, #0
 802112a:	bf18      	it	ne
 802112c:	2001      	movne	r0, #1
 802112e:	f7ff fb8b 	bl	8020848 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8021132:	4630      	mov	r0, r6
 8021134:	f000 fbbc 	bl	80218b0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8021138:	f104 000e 	add.w	r0, r4, #14
 802113c:	f000 fd88 	bl	8021c50 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8021140:	4a4a      	ldr	r2, [pc, #296]	; (802126c <RadioSetRxConfig+0x2ec>)
 8021142:	ab04      	add	r3, sp, #16
 8021144:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021148:	e883 0003 	stmia.w	r3, {r0, r1}
 802114c:	4618      	mov	r0, r3
 802114e:	f000 fd4d 	bl	8021bec <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8021152:	f240 10ff 	movw	r0, #511	; 0x1ff
 8021156:	f000 fcaf 	bl	8021ab8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 802115a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 802115e:	fb03 fa0a 	mul.w	sl, r3, sl
 8021162:	fbba f5f5 	udiv	r5, sl, r5
 8021166:	60a5      	str	r5, [r4, #8]
            break;
 8021168:	e731      	b.n	8020fce <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 802116a:	4b3d      	ldr	r3, [pc, #244]	; (8021260 <RadioSetRxConfig+0x2e0>)
 802116c:	2201      	movs	r2, #1
 802116e:	75da      	strb	r2, [r3, #23]
 8021170:	e7d2      	b.n	8021118 <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8021172:	2000      	movs	r0, #0
 8021174:	f000 f9d0 	bl	8021518 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8021178:	4a39      	ldr	r2, [pc, #228]	; (8021260 <RadioSetRxConfig+0x2e0>)
 802117a:	2301      	movs	r3, #1
 802117c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8021180:	b2eb      	uxtb	r3, r5
 8021182:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8021186:	493a      	ldr	r1, [pc, #232]	; (8021270 <RadioSetRxConfig+0x2f0>)
 8021188:	5d89      	ldrb	r1, [r1, r6]
 802118a:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 802118e:	9901      	ldr	r1, [sp, #4]
 8021190:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8021194:	b91e      	cbnz	r6, 802119e <RadioSetRxConfig+0x21e>
 8021196:	f1a5 020b 	sub.w	r2, r5, #11
 802119a:	2a01      	cmp	r2, #1
 802119c:	d945      	bls.n	802122a <RadioSetRxConfig+0x2aa>
 802119e:	2e01      	cmp	r6, #1
 80211a0:	d041      	beq.n	8021226 <RadioSetRxConfig+0x2a6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80211a2:	4a2f      	ldr	r2, [pc, #188]	; (8021260 <RadioSetRxConfig+0x2e0>)
 80211a4:	2100      	movs	r1, #0
 80211a6:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80211aa:	4a2d      	ldr	r2, [pc, #180]	; (8021260 <RadioSetRxConfig+0x2e0>)
 80211ac:	2101      	movs	r1, #1
 80211ae:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80211b0:	3b05      	subs	r3, #5
 80211b2:	b2db      	uxtb	r3, r3
 80211b4:	428b      	cmp	r3, r1
 80211b6:	d93d      	bls.n	8021234 <RadioSetRxConfig+0x2b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80211b8:	4b29      	ldr	r3, [pc, #164]	; (8021260 <RadioSetRxConfig+0x2e0>)
 80211ba:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80211be:	4c28      	ldr	r4, [pc, #160]	; (8021260 <RadioSetRxConfig+0x2e0>)
 80211c0:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80211c2:	4b28      	ldr	r3, [pc, #160]	; (8021264 <RadioSetRxConfig+0x2e4>)
 80211c4:	781b      	ldrb	r3, [r3, #0]
 80211c6:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80211c8:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80211cc:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80211d0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80211d4:	f7ff f874 	bl	80202c0 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80211d8:	4625      	mov	r5, r4
 80211da:	f815 0f38 	ldrb.w	r0, [r5, #56]!
 80211de:	3800      	subs	r0, #0
 80211e0:	bf18      	it	ne
 80211e2:	2001      	movne	r0, #1
 80211e4:	f7ff fb30 	bl	8020848 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80211e8:	4628      	mov	r0, r5
 80211ea:	f000 fb61 	bl	80218b0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80211ee:	f104 000e 	add.w	r0, r4, #14
 80211f2:	f000 fd2d 	bl	8021c50 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80211f6:	fa5f f08a 	uxtb.w	r0, sl
 80211fa:	f000 fb1f 	bl	802183c <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80211fe:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8021202:	2b01      	cmp	r3, #1
 8021204:	d021      	beq.n	802124a <RadioSetRxConfig+0x2ca>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8021206:	f240 7036 	movw	r0, #1846	; 0x736
 802120a:	f000 fbd9 	bl	80219c0 <SUBGRF_ReadRegister>
 802120e:	f040 0104 	orr.w	r1, r0, #4
 8021212:	b2c9      	uxtb	r1, r1
 8021214:	f240 7036 	movw	r0, #1846	; 0x736
 8021218:	f000 fae2 	bl	80217e0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 802121c:	4b10      	ldr	r3, [pc, #64]	; (8021260 <RadioSetRxConfig+0x2e0>)
 802121e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021222:	609a      	str	r2, [r3, #8]
}
 8021224:	e6d3      	b.n	8020fce <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8021226:	2d0c      	cmp	r5, #12
 8021228:	d1bb      	bne.n	80211a2 <RadioSetRxConfig+0x222>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 802122a:	4a0d      	ldr	r2, [pc, #52]	; (8021260 <RadioSetRxConfig+0x2e0>)
 802122c:	2101      	movs	r1, #1
 802122e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8021232:	e7ba      	b.n	80211aa <RadioSetRxConfig+0x22a>
                if( preambleLen < 12 )
 8021234:	f1b9 0f0b 	cmp.w	r9, #11
 8021238:	d803      	bhi.n	8021242 <RadioSetRxConfig+0x2c2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 802123a:	4613      	mov	r3, r2
 802123c:	220c      	movs	r2, #12
 802123e:	839a      	strh	r2, [r3, #28]
 8021240:	e7bd      	b.n	80211be <RadioSetRxConfig+0x23e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8021242:	4b07      	ldr	r3, [pc, #28]	; (8021260 <RadioSetRxConfig+0x2e0>)
 8021244:	f8a3 901c 	strh.w	r9, [r3, #28]
 8021248:	e7b9      	b.n	80211be <RadioSetRxConfig+0x23e>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 802124a:	f240 7036 	movw	r0, #1846	; 0x736
 802124e:	f000 fbb7 	bl	80219c0 <SUBGRF_ReadRegister>
 8021252:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8021256:	f240 7036 	movw	r0, #1846	; 0x736
 802125a:	f000 fac1 	bl	80217e0 <SUBGRF_WriteRegister>
 802125e:	e7dd      	b.n	802121c <RadioSetRxConfig+0x29c>
 8021260:	200028bc 	.word	0x200028bc
 8021264:	20000200 	.word	0x20000200
 8021268:	08024c00 	.word	0x08024c00
 802126c:	08024bf8 	.word	0x08024bf8
 8021270:	08028980 	.word	0x08028980

08021274 <RadioRandom>:
{
 8021274:	b508      	push	{r3, lr}
    RadioSetModem( MODEM_LORA );
 8021276:	2001      	movs	r0, #1
 8021278:	f7ff fae6 	bl	8020848 <RadioSetModem>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 802127c:	2300      	movs	r3, #0
 802127e:	461a      	mov	r2, r3
 8021280:	4619      	mov	r1, r3
 8021282:	4618      	mov	r0, r3
 8021284:	f000 f9eb 	bl	802165e <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8021288:	f000 fd64 	bl	8021d54 <SUBGRF_GetRandom>
}
 802128c:	bd08      	pop	{r3, pc}

0802128e <RadioIsChannelFree>:
{
 802128e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021290:	b08b      	sub	sp, #44	; 0x2c
 8021292:	4604      	mov	r4, r0
 8021294:	460f      	mov	r7, r1
 8021296:	4616      	mov	r6, r2
 8021298:	461d      	mov	r5, r3
    RadioStandby( );
 802129a:	f7ff f811 	bl	80202c0 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 802129e:	2000      	movs	r0, #0
 80212a0:	f7ff fad2 	bl	8020848 <RadioSetModem>
    RadioSetChannel( freq );
 80212a4:	4620      	mov	r0, r4
 80212a6:	f7ff f9b3 	bl	8020610 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80212aa:	2301      	movs	r3, #1
 80212ac:	9309      	str	r3, [sp, #36]	; 0x24
 80212ae:	2400      	movs	r4, #0
 80212b0:	9408      	str	r4, [sp, #32]
 80212b2:	9407      	str	r4, [sp, #28]
 80212b4:	9406      	str	r4, [sp, #24]
 80212b6:	9405      	str	r4, [sp, #20]
 80212b8:	9404      	str	r4, [sp, #16]
 80212ba:	9403      	str	r4, [sp, #12]
 80212bc:	9402      	str	r4, [sp, #8]
 80212be:	2303      	movs	r3, #3
 80212c0:	9301      	str	r3, [sp, #4]
 80212c2:	9700      	str	r7, [sp, #0]
 80212c4:	4623      	mov	r3, r4
 80212c6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80212ca:	4639      	mov	r1, r7
 80212cc:	4620      	mov	r0, r4
 80212ce:	f7ff fe57 	bl	8020f80 <RadioSetRxConfig>
    RadioRx( 0 );
 80212d2:	4620      	mov	r0, r4
 80212d4:	f7ff f9b4 	bl	8020640 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80212d8:	f7ff f96c 	bl	80205b4 <RadioGetWakeupTime>
 80212dc:	f7e6 f810 	bl	8007300 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80212e0:	f001 fbc8 	bl	8022a74 <UTIL_TIMER_GetCurrentTime>
 80212e4:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80212e6:	4620      	mov	r0, r4
 80212e8:	f001 fbce 	bl	8022a88 <UTIL_TIMER_GetElapsedTime>
 80212ec:	42a8      	cmp	r0, r5
 80212ee:	d206      	bcs.n	80212fe <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 80212f0:	2000      	movs	r0, #0
 80212f2:	f7ff f96c 	bl	80205ce <RadioRssi>
        if( rssi > rssiThresh )
 80212f6:	42b0      	cmp	r0, r6
 80212f8:	ddf5      	ble.n	80212e6 <RadioIsChannelFree+0x58>
            status = false;
 80212fa:	2400      	movs	r4, #0
 80212fc:	e000      	b.n	8021300 <RadioIsChannelFree+0x72>
    bool status = true;
 80212fe:	2401      	movs	r4, #1
    RadioStandby( );
 8021300:	f7fe ffde 	bl	80202c0 <RadioStandby>
}
 8021304:	4620      	mov	r0, r4
 8021306:	b00b      	add	sp, #44	; 0x2c
 8021308:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0802130c <RadioInit>:
{
 802130c:	b570      	push	{r4, r5, r6, lr}
 802130e:	b082      	sub	sp, #8
    RadioEvents = events;
 8021310:	4b21      	ldr	r3, [pc, #132]	; (8021398 <RadioInit+0x8c>)
 8021312:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8021314:	4b21      	ldr	r3, [pc, #132]	; (802139c <RadioInit+0x90>)
 8021316:	2200      	movs	r2, #0
 8021318:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 802131a:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 802131c:	609a      	str	r2, [r3, #8]
    SUBGRF_Init( RadioOnDioIrq );
 802131e:	4820      	ldr	r0, [pc, #128]	; (80213a0 <RadioInit+0x94>)
 8021320:	f000 fb72 	bl	8021a08 <SUBGRF_Init>
	if(E2P_LORA_Read_Network_Type() == PUBLIC_NETWORK)
 8021324:	f7e8 ff1d 	bl	800a162 <E2P_LORA_Read_Network_Type>
 8021328:	2801      	cmp	r0, #1
 802132a:	d031      	beq.n	8021390 <RadioInit+0x84>
		RadioSetPublicNetwork(false);
 802132c:	2000      	movs	r0, #0
 802132e:	f7ff fd2d 	bl	8020d8c <RadioSetPublicNetwork>
    SUBGRF_SetRegulatorMode(  );
 8021332:	f000 f8fe 	bl	8021532 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8021336:	2100      	movs	r1, #0
 8021338:	4608      	mov	r0, r1
 802133a:	f000 f9f9 	bl	8021730 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 802133e:	2204      	movs	r2, #4
 8021340:	2100      	movs	r1, #0
 8021342:	2001      	movs	r0, #1
 8021344:	f000 fbd1 	bl	8021aea <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8021348:	2300      	movs	r3, #0
 802134a:	461a      	mov	r2, r3
 802134c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8021350:	4608      	mov	r0, r1
 8021352:	f000 f984 	bl	802165e <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8021356:	f7ff f9a5 	bl	80206a4 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 802135a:	4e12      	ldr	r6, [pc, #72]	; (80213a4 <RadioInit+0x98>)
 802135c:	2400      	movs	r4, #0
 802135e:	9400      	str	r4, [sp, #0]
 8021360:	4b11      	ldr	r3, [pc, #68]	; (80213a8 <RadioInit+0x9c>)
 8021362:	4622      	mov	r2, r4
 8021364:	f04f 31ff 	mov.w	r1, #4294967295
 8021368:	4630      	mov	r0, r6
 802136a:	f001 fb65 	bl	8022a38 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 802136e:	4d0f      	ldr	r5, [pc, #60]	; (80213ac <RadioInit+0xa0>)
 8021370:	9400      	str	r4, [sp, #0]
 8021372:	4b0f      	ldr	r3, [pc, #60]	; (80213b0 <RadioInit+0xa4>)
 8021374:	4622      	mov	r2, r4
 8021376:	f04f 31ff 	mov.w	r1, #4294967295
 802137a:	4628      	mov	r0, r5
 802137c:	f001 fb5c 	bl	8022a38 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8021380:	4630      	mov	r0, r6
 8021382:	f001 fbb7 	bl	8022af4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8021386:	4628      	mov	r0, r5
 8021388:	f001 fbb4 	bl	8022af4 <UTIL_TIMER_Stop>
}
 802138c:	b002      	add	sp, #8
 802138e:	bd70      	pop	{r4, r5, r6, pc}
		RadioSetPublicNetwork(true);
 8021390:	f7ff fcfc 	bl	8020d8c <RadioSetPublicNetwork>
 8021394:	e7cd      	b.n	8021332 <RadioInit+0x26>
 8021396:	bf00      	nop
 8021398:	20001ca4 	.word	0x20001ca4
 802139c:	200028bc 	.word	0x200028bc
 80213a0:	080205a1 	.word	0x080205a1
 80213a4:	20002914 	.word	0x20002914
 80213a8:	080200e5 	.word	0x080200e5
 80213ac:	2000292c 	.word	0x2000292c
 80213b0:	08020101 	.word	0x08020101

080213b4 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80213b4:	b510      	push	{r4, lr}
 80213b6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80213b8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80213bc:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80213be:	460a      	mov	r2, r1
 80213c0:	4601      	mov	r1, r0
 80213c2:	4803      	ldr	r0, [pc, #12]	; (80213d0 <SUBGRF_WriteCommand+0x1c>)
 80213c4:	f7f0 f906 	bl	80115d4 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80213c8:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80213cc:	bd10      	pop	{r4, pc}
 80213ce:	bf00      	nop
 80213d0:	20002764 	.word	0x20002764

080213d4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80213d4:	b510      	push	{r4, lr}
 80213d6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80213d8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80213dc:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80213de:	460a      	mov	r2, r1
 80213e0:	4601      	mov	r1, r0
 80213e2:	4803      	ldr	r0, [pc, #12]	; (80213f0 <SUBGRF_ReadCommand+0x1c>)
 80213e4:	f7f0 f94c 	bl	8011680 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80213e8:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80213ec:	bd10      	pop	{r4, pc}
 80213ee:	bf00      	nop
 80213f0:	20002764 	.word	0x20002764

080213f4 <SUBGRF_GetOperatingMode>:
}
 80213f4:	4b01      	ldr	r3, [pc, #4]	; (80213fc <SUBGRF_GetOperatingMode+0x8>)
 80213f6:	7818      	ldrb	r0, [r3, #0]
 80213f8:	4770      	bx	lr
 80213fa:	bf00      	nop
 80213fc:	20001cae 	.word	0x20001cae

08021400 <SUBGRF_SetStandby>:
{
 8021400:	b500      	push	{lr}
 8021402:	b083      	sub	sp, #12
 8021404:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8021408:	2201      	movs	r2, #1
 802140a:	f10d 0107 	add.w	r1, sp, #7
 802140e:	2080      	movs	r0, #128	; 0x80
 8021410:	f7ff ffd0 	bl	80213b4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8021414:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8021418:	b92b      	cbnz	r3, 8021426 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 802141a:	4b05      	ldr	r3, [pc, #20]	; (8021430 <SUBGRF_SetStandby+0x30>)
 802141c:	2201      	movs	r2, #1
 802141e:	701a      	strb	r2, [r3, #0]
}
 8021420:	b003      	add	sp, #12
 8021422:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8021426:	4b02      	ldr	r3, [pc, #8]	; (8021430 <SUBGRF_SetStandby+0x30>)
 8021428:	2202      	movs	r2, #2
 802142a:	701a      	strb	r2, [r3, #0]
}
 802142c:	e7f8      	b.n	8021420 <SUBGRF_SetStandby+0x20>
 802142e:	bf00      	nop
 8021430:	20001cae 	.word	0x20001cae

08021434 <SUBGRF_SetTx>:
{
 8021434:	b500      	push	{lr}
 8021436:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8021438:	4b0a      	ldr	r3, [pc, #40]	; (8021464 <SUBGRF_SetTx+0x30>)
 802143a:	2204      	movs	r2, #4
 802143c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 802143e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8021442:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8021446:	f3c0 2307 	ubfx	r3, r0, #8, #8
 802144a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 802144e:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8021452:	2203      	movs	r2, #3
 8021454:	a901      	add	r1, sp, #4
 8021456:	2083      	movs	r0, #131	; 0x83
 8021458:	f7ff ffac 	bl	80213b4 <SUBGRF_WriteCommand>
}
 802145c:	b003      	add	sp, #12
 802145e:	f85d fb04 	ldr.w	pc, [sp], #4
 8021462:	bf00      	nop
 8021464:	20001cae 	.word	0x20001cae

08021468 <SUBGRF_SetRx>:
{
 8021468:	b500      	push	{lr}
 802146a:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 802146c:	4b0a      	ldr	r3, [pc, #40]	; (8021498 <SUBGRF_SetRx+0x30>)
 802146e:	2205      	movs	r2, #5
 8021470:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8021472:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8021476:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 802147a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 802147e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8021482:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8021486:	2203      	movs	r2, #3
 8021488:	a901      	add	r1, sp, #4
 802148a:	2082      	movs	r0, #130	; 0x82
 802148c:	f7ff ff92 	bl	80213b4 <SUBGRF_WriteCommand>
}
 8021490:	b003      	add	sp, #12
 8021492:	f85d fb04 	ldr.w	pc, [sp], #4
 8021496:	bf00      	nop
 8021498:	20001cae 	.word	0x20001cae

0802149c <SUBGRF_SetRxDutyCycle>:
{
 802149c:	b500      	push	{lr}
 802149e:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80214a0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80214a4:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80214a8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80214ac:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80214b0:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80214b4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80214b8:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80214bc:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80214c0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80214c4:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80214c8:	2206      	movs	r2, #6
 80214ca:	4669      	mov	r1, sp
 80214cc:	2094      	movs	r0, #148	; 0x94
 80214ce:	f7ff ff71 	bl	80213b4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80214d2:	4b03      	ldr	r3, [pc, #12]	; (80214e0 <SUBGRF_SetRxDutyCycle+0x44>)
 80214d4:	2206      	movs	r2, #6
 80214d6:	701a      	strb	r2, [r3, #0]
}
 80214d8:	b003      	add	sp, #12
 80214da:	f85d fb04 	ldr.w	pc, [sp], #4
 80214de:	bf00      	nop
 80214e0:	20001cae 	.word	0x20001cae

080214e4 <SUBGRF_SetCad>:
{
 80214e4:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80214e6:	2200      	movs	r2, #0
 80214e8:	4611      	mov	r1, r2
 80214ea:	20c5      	movs	r0, #197	; 0xc5
 80214ec:	f7ff ff62 	bl	80213b4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80214f0:	4b01      	ldr	r3, [pc, #4]	; (80214f8 <SUBGRF_SetCad+0x14>)
 80214f2:	2207      	movs	r2, #7
 80214f4:	701a      	strb	r2, [r3, #0]
}
 80214f6:	bd08      	pop	{r3, pc}
 80214f8:	20001cae 	.word	0x20001cae

080214fc <SUBGRF_SetTxContinuousWave>:
{
 80214fc:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80214fe:	2200      	movs	r2, #0
 8021500:	4611      	mov	r1, r2
 8021502:	20d1      	movs	r0, #209	; 0xd1
 8021504:	f7ff ff56 	bl	80213b4 <SUBGRF_WriteCommand>
}
 8021508:	bd08      	pop	{r3, pc}

0802150a <SUBGRF_SetTxInfinitePreamble>:
{
 802150a:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 802150c:	2200      	movs	r2, #0
 802150e:	4611      	mov	r1, r2
 8021510:	20d2      	movs	r0, #210	; 0xd2
 8021512:	f7ff ff4f 	bl	80213b4 <SUBGRF_WriteCommand>
}
 8021516:	bd08      	pop	{r3, pc}

08021518 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8021518:	b500      	push	{lr}
 802151a:	b083      	sub	sp, #12
 802151c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8021520:	2201      	movs	r2, #1
 8021522:	f10d 0107 	add.w	r1, sp, #7
 8021526:	209f      	movs	r0, #159	; 0x9f
 8021528:	f7ff ff44 	bl	80213b4 <SUBGRF_WriteCommand>
}
 802152c:	b003      	add	sp, #12
 802152e:	f85d fb04 	ldr.w	pc, [sp], #4

08021532 <SUBGRF_SetRegulatorMode>:
{
 8021532:	b500      	push	{lr}
 8021534:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8021536:	f7e5 fc95 	bl	8006e64 <RBI_IsDCDC>
 802153a:	2801      	cmp	r0, #1
 802153c:	d00b      	beq.n	8021556 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 802153e:	2300      	movs	r3, #0
 8021540:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8021544:	2201      	movs	r2, #1
 8021546:	f10d 0107 	add.w	r1, sp, #7
 802154a:	2096      	movs	r0, #150	; 0x96
 802154c:	f7ff ff32 	bl	80213b4 <SUBGRF_WriteCommand>
}
 8021550:	b003      	add	sp, #12
 8021552:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8021556:	2301      	movs	r3, #1
 8021558:	f88d 3007 	strb.w	r3, [sp, #7]
 802155c:	e7f2      	b.n	8021544 <SUBGRF_SetRegulatorMode+0x12>

0802155e <SUBGRF_Calibrate>:
{
 802155e:	b500      	push	{lr}
 8021560:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8021562:	f3c0 1280 	ubfx	r2, r0, #6, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8021566:	f3c0 1340 	ubfx	r3, r0, #5, #1
 802156a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 802156c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8021570:	f3c0 1200 	ubfx	r2, r0, #4, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8021574:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8021578:	f3c0 02c0 	ubfx	r2, r0, #3, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 802157c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8021580:	f3c0 0280 	ubfx	r2, r0, #2, #1
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8021584:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8021588:	f3c0 0240 	ubfx	r2, r0, #1, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 802158c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8021590:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8021594:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8021596:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 802159a:	2201      	movs	r2, #1
 802159c:	f10d 0107 	add.w	r1, sp, #7
 80215a0:	2089      	movs	r0, #137	; 0x89
 80215a2:	f7ff ff07 	bl	80213b4 <SUBGRF_WriteCommand>
}
 80215a6:	b003      	add	sp, #12
 80215a8:	f85d fb04 	ldr.w	pc, [sp], #4

080215ac <SUBGRF_CalibrateImage>:
{
 80215ac:	b500      	push	{lr}
 80215ae:	b083      	sub	sp, #12
    if( freq > 900000000 )
 80215b0:	4b1c      	ldr	r3, [pc, #112]	; (8021624 <SUBGRF_CalibrateImage+0x78>)
 80215b2:	4298      	cmp	r0, r3
 80215b4:	d90d      	bls.n	80215d2 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 80215b6:	23e1      	movs	r3, #225	; 0xe1
 80215b8:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 80215bc:	23e9      	movs	r3, #233	; 0xe9
 80215be:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80215c2:	2202      	movs	r2, #2
 80215c4:	a901      	add	r1, sp, #4
 80215c6:	2098      	movs	r0, #152	; 0x98
 80215c8:	f7ff fef4 	bl	80213b4 <SUBGRF_WriteCommand>
}
 80215cc:	b003      	add	sp, #12
 80215ce:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 80215d2:	4b15      	ldr	r3, [pc, #84]	; (8021628 <SUBGRF_CalibrateImage+0x7c>)
 80215d4:	4298      	cmp	r0, r3
 80215d6:	d906      	bls.n	80215e6 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 80215d8:	23d7      	movs	r3, #215	; 0xd7
 80215da:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 80215de:	23db      	movs	r3, #219	; 0xdb
 80215e0:	f88d 3005 	strb.w	r3, [sp, #5]
 80215e4:	e7ed      	b.n	80215c2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 80215e6:	4b11      	ldr	r3, [pc, #68]	; (802162c <SUBGRF_CalibrateImage+0x80>)
 80215e8:	4298      	cmp	r0, r3
 80215ea:	d906      	bls.n	80215fa <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 80215ec:	23c1      	movs	r3, #193	; 0xc1
 80215ee:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 80215f2:	23c5      	movs	r3, #197	; 0xc5
 80215f4:	f88d 3005 	strb.w	r3, [sp, #5]
 80215f8:	e7e3      	b.n	80215c2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 80215fa:	4b0d      	ldr	r3, [pc, #52]	; (8021630 <SUBGRF_CalibrateImage+0x84>)
 80215fc:	4298      	cmp	r0, r3
 80215fe:	d906      	bls.n	802160e <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8021600:	2375      	movs	r3, #117	; 0x75
 8021602:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8021606:	2381      	movs	r3, #129	; 0x81
 8021608:	f88d 3005 	strb.w	r3, [sp, #5]
 802160c:	e7d9      	b.n	80215c2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 802160e:	4b09      	ldr	r3, [pc, #36]	; (8021634 <SUBGRF_CalibrateImage+0x88>)
 8021610:	4298      	cmp	r0, r3
 8021612:	d9d6      	bls.n	80215c2 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 8021614:	236b      	movs	r3, #107	; 0x6b
 8021616:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 802161a:	236f      	movs	r3, #111	; 0x6f
 802161c:	f88d 3005 	strb.w	r3, [sp, #5]
 8021620:	e7cf      	b.n	80215c2 <SUBGRF_CalibrateImage+0x16>
 8021622:	bf00      	nop
 8021624:	35a4e900 	.word	0x35a4e900
 8021628:	32a9f880 	.word	0x32a9f880
 802162c:	2de54480 	.word	0x2de54480
 8021630:	1b6b0b00 	.word	0x1b6b0b00
 8021634:	1954fc40 	.word	0x1954fc40

08021638 <SUBGRF_SetPaConfig>:
{
 8021638:	b500      	push	{lr}
 802163a:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 802163c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8021640:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8021644:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8021648:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 802164c:	2204      	movs	r2, #4
 802164e:	eb0d 0102 	add.w	r1, sp, r2
 8021652:	2095      	movs	r0, #149	; 0x95
 8021654:	f7ff feae 	bl	80213b4 <SUBGRF_WriteCommand>
}
 8021658:	b003      	add	sp, #12
 802165a:	f85d fb04 	ldr.w	pc, [sp], #4

0802165e <SUBGRF_SetDioIrqParams>:
{
 802165e:	b510      	push	{r4, lr}
 8021660:	b082      	sub	sp, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8021662:	0a04      	lsrs	r4, r0, #8
 8021664:	f88d 4000 	strb.w	r4, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8021668:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 802166c:	0a08      	lsrs	r0, r1, #8
 802166e:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8021672:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8021676:	0a11      	lsrs	r1, r2, #8
 8021678:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 802167c:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8021680:	0a1a      	lsrs	r2, r3, #8
 8021682:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8021686:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 802168a:	2208      	movs	r2, #8
 802168c:	4669      	mov	r1, sp
 802168e:	4610      	mov	r0, r2
 8021690:	f7ff fe90 	bl	80213b4 <SUBGRF_WriteCommand>
}
 8021694:	b002      	add	sp, #8
 8021696:	bd10      	pop	{r4, pc}

08021698 <SUBGRF_SetTcxoMode>:
{
 8021698:	b500      	push	{lr}
 802169a:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 802169c:	f000 0007 	and.w	r0, r0, #7
 80216a0:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80216a4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80216a8:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80216ac:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80216b0:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80216b4:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80216b8:	2204      	movs	r2, #4
 80216ba:	eb0d 0102 	add.w	r1, sp, r2
 80216be:	2097      	movs	r0, #151	; 0x97
 80216c0:	f7ff fe78 	bl	80213b4 <SUBGRF_WriteCommand>
}
 80216c4:	b003      	add	sp, #12
 80216c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080216cc <SUBGRF_SetRfFrequency>:
{
 80216cc:	b510      	push	{r4, lr}
 80216ce:	b082      	sub	sp, #8
 80216d0:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 80216d2:	4b12      	ldr	r3, [pc, #72]	; (802171c <SUBGRF_SetRfFrequency+0x50>)
 80216d4:	781b      	ldrb	r3, [r3, #0]
 80216d6:	b1d3      	cbz	r3, 802170e <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 80216d8:	4a11      	ldr	r2, [pc, #68]	; (8021720 <SUBGRF_SetRfFrequency+0x54>)
 80216da:	2300      	movs	r3, #0
 80216dc:	0660      	lsls	r0, r4, #25
 80216de:	09e1      	lsrs	r1, r4, #7
 80216e0:	f7e4 ff60 	bl	80065a4 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80216e4:	0e03      	lsrs	r3, r0, #24
 80216e6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80216ea:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80216ee:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80216f2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80216f6:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80216fa:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80216fe:	2204      	movs	r2, #4
 8021700:	eb0d 0102 	add.w	r1, sp, r2
 8021704:	2086      	movs	r0, #134	; 0x86
 8021706:	f7ff fe55 	bl	80213b4 <SUBGRF_WriteCommand>
}
 802170a:	b002      	add	sp, #8
 802170c:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 802170e:	f7ff ff4d 	bl	80215ac <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8021712:	4b02      	ldr	r3, [pc, #8]	; (802171c <SUBGRF_SetRfFrequency+0x50>)
 8021714:	2201      	movs	r2, #1
 8021716:	701a      	strb	r2, [r3, #0]
 8021718:	e7de      	b.n	80216d8 <SUBGRF_SetRfFrequency+0xc>
 802171a:	bf00      	nop
 802171c:	20001cac 	.word	0x20001cac
 8021720:	01e84800 	.word	0x01e84800

08021724 <SUBGRF_GetPacketType>:
}
 8021724:	4b01      	ldr	r3, [pc, #4]	; (802172c <SUBGRF_GetPacketType+0x8>)
 8021726:	7818      	ldrb	r0, [r3, #0]
 8021728:	4770      	bx	lr
 802172a:	bf00      	nop
 802172c:	20001caf 	.word	0x20001caf

08021730 <SUBGRF_SetBufferBaseAddress>:
{
 8021730:	b500      	push	{lr}
 8021732:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8021734:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8021738:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 802173c:	2202      	movs	r2, #2
 802173e:	a901      	add	r1, sp, #4
 8021740:	208f      	movs	r0, #143	; 0x8f
 8021742:	f7ff fe37 	bl	80213b4 <SUBGRF_WriteCommand>
}
 8021746:	b003      	add	sp, #12
 8021748:	f85d fb04 	ldr.w	pc, [sp], #4

0802174c <SUBGRF_GetRssiInst>:
{
 802174c:	b500      	push	{lr}
 802174e:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8021750:	2201      	movs	r2, #1
 8021752:	a901      	add	r1, sp, #4
 8021754:	2015      	movs	r0, #21
 8021756:	f7ff fe3d 	bl	80213d4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 802175a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 802175e:	4240      	negs	r0, r0
}
 8021760:	1040      	asrs	r0, r0, #1
 8021762:	b003      	add	sp, #12
 8021764:	f85d fb04 	ldr.w	pc, [sp], #4

08021768 <SUBGRF_GetPacketStatus>:
{
 8021768:	b510      	push	{r4, lr}
 802176a:	b082      	sub	sp, #8
 802176c:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 802176e:	2203      	movs	r2, #3
 8021770:	a901      	add	r1, sp, #4
 8021772:	2014      	movs	r0, #20
 8021774:	f7ff fe2e 	bl	80213d4 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8021778:	f7ff ffd4 	bl	8021724 <SUBGRF_GetPacketType>
 802177c:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 802177e:	b148      	cbz	r0, 8021794 <SUBGRF_GetPacketStatus+0x2c>
 8021780:	2801      	cmp	r0, #1
 8021782:	d018      	beq.n	80217b6 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8021784:	2214      	movs	r2, #20
 8021786:	2100      	movs	r1, #0
 8021788:	4620      	mov	r0, r4
 802178a:	f000 fe65 	bl	8022458 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 802178e:	230f      	movs	r3, #15
 8021790:	7023      	strb	r3, [r4, #0]
}
 8021792:	e00e      	b.n	80217b2 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8021794:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8021798:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 802179a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 802179e:	425b      	negs	r3, r3
 80217a0:	105b      	asrs	r3, r3, #1
 80217a2:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80217a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80217a8:	425b      	negs	r3, r3
 80217aa:	105b      	asrs	r3, r3, #1
 80217ac:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80217ae:	2300      	movs	r3, #0
 80217b0:	60a3      	str	r3, [r4, #8]
}
 80217b2:	b002      	add	sp, #8
 80217b4:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80217b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80217ba:	425b      	negs	r3, r3
 80217bc:	105b      	asrs	r3, r3, #1
 80217be:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80217c0:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 80217c4:	3302      	adds	r3, #2
 80217c6:	109b      	asrs	r3, r3, #2
 80217c8:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80217ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80217ce:	425b      	negs	r3, r3
 80217d0:	105b      	asrs	r3, r3, #1
 80217d2:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80217d4:	4b01      	ldr	r3, [pc, #4]	; (80217dc <SUBGRF_GetPacketStatus+0x74>)
 80217d6:	681b      	ldr	r3, [r3, #0]
 80217d8:	6123      	str	r3, [r4, #16]
            break;
 80217da:	e7ea      	b.n	80217b2 <SUBGRF_GetPacketStatus+0x4a>
 80217dc:	20001ca8 	.word	0x20001ca8

080217e0 <SUBGRF_WriteRegister>:
{
 80217e0:	b500      	push	{lr}
 80217e2:	b083      	sub	sp, #12
 80217e4:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80217e8:	2301      	movs	r3, #1
 80217ea:	f10d 0207 	add.w	r2, sp, #7
 80217ee:	4601      	mov	r1, r0
 80217f0:	4802      	ldr	r0, [pc, #8]	; (80217fc <SUBGRF_WriteRegister+0x1c>)
 80217f2:	f7ef fe4b 	bl	801148c <HAL_SUBGHZ_WriteRegisters>
}
 80217f6:	b003      	add	sp, #12
 80217f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80217fc:	20002764 	.word	0x20002764

08021800 <SUBGRF_SetRxBoosted>:
{
 8021800:	b510      	push	{r4, lr}
 8021802:	b082      	sub	sp, #8
 8021804:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8021806:	4b0c      	ldr	r3, [pc, #48]	; (8021838 <SUBGRF_SetRxBoosted+0x38>)
 8021808:	2205      	movs	r2, #5
 802180a:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 802180c:	2197      	movs	r1, #151	; 0x97
 802180e:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8021812:	f7ff ffe5 	bl	80217e0 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8021816:	f3c4 4307 	ubfx	r3, r4, #16, #8
 802181a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 802181e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8021822:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8021826:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 802182a:	2203      	movs	r2, #3
 802182c:	a901      	add	r1, sp, #4
 802182e:	2082      	movs	r0, #130	; 0x82
 8021830:	f7ff fdc0 	bl	80213b4 <SUBGRF_WriteCommand>
}
 8021834:	b002      	add	sp, #8
 8021836:	bd10      	pop	{r4, pc}
 8021838:	20001cae 	.word	0x20001cae

0802183c <SUBGRF_SetLoRaSymbNumTimeout>:
{
 802183c:	b500      	push	{lr}
 802183e:	b083      	sub	sp, #12
 8021840:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8021844:	2201      	movs	r2, #1
 8021846:	f10d 0107 	add.w	r1, sp, #7
 802184a:	20a0      	movs	r0, #160	; 0xa0
 802184c:	f7ff fdb2 	bl	80213b4 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8021850:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8021854:	2b3f      	cmp	r3, #63	; 0x3f
 8021856:	d90f      	bls.n	8021878 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8021858:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 802185a:	2200      	movs	r2, #0
        while( mant > 31 )
 802185c:	2b1f      	cmp	r3, #31
 802185e:	d903      	bls.n	8021868 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
            mant >>= 2;
 8021860:	089b      	lsrs	r3, r3, #2
            exp++;
 8021862:	1c51      	adds	r1, r2, #1
 8021864:	b2ca      	uxtb	r2, r1
 8021866:	e7f9      	b.n	802185c <SUBGRF_SetLoRaSymbNumTimeout+0x20>
        reg = exp + ( mant << 3 );
 8021868:	00d9      	lsls	r1, r3, #3
 802186a:	b2c9      	uxtb	r1, r1
 802186c:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 802186e:	b2c9      	uxtb	r1, r1
 8021870:	f240 7006 	movw	r0, #1798	; 0x706
 8021874:	f7ff ffb4 	bl	80217e0 <SUBGRF_WriteRegister>
}
 8021878:	b003      	add	sp, #12
 802187a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08021880 <SUBGRF_SetPacketType>:
{
 8021880:	b500      	push	{lr}
 8021882:	b083      	sub	sp, #12
 8021884:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8021888:	4b08      	ldr	r3, [pc, #32]	; (80218ac <SUBGRF_SetPacketType+0x2c>)
 802188a:	7018      	strb	r0, [r3, #0]
    if( packetType == PACKET_TYPE_GFSK )
 802188c:	b140      	cbz	r0, 80218a0 <SUBGRF_SetPacketType+0x20>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 802188e:	2201      	movs	r2, #1
 8021890:	f10d 0107 	add.w	r1, sp, #7
 8021894:	208a      	movs	r0, #138	; 0x8a
 8021896:	f7ff fd8d 	bl	80213b4 <SUBGRF_WriteCommand>
}
 802189a:	b003      	add	sp, #12
 802189c:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80218a0:	2100      	movs	r1, #0
 80218a2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80218a6:	f7ff ff9b 	bl	80217e0 <SUBGRF_WriteRegister>
 80218aa:	e7f0      	b.n	802188e <SUBGRF_SetPacketType+0xe>
 80218ac:	20001caf 	.word	0x20001caf

080218b0 <SUBGRF_SetModulationParams>:
{
 80218b0:	b510      	push	{r4, lr}
 80218b2:	b082      	sub	sp, #8
 80218b4:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80218b6:	4b3e      	ldr	r3, [pc, #248]	; (80219b0 <SUBGRF_SetModulationParams+0x100>)
 80218b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80218bc:	ab02      	add	r3, sp, #8
 80218be:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 80218c2:	7820      	ldrb	r0, [r4, #0]
 80218c4:	4b3b      	ldr	r3, [pc, #236]	; (80219b4 <SUBGRF_SetModulationParams+0x104>)
 80218c6:	781b      	ldrb	r3, [r3, #0]
 80218c8:	4298      	cmp	r0, r3
 80218ca:	d106      	bne.n	80218da <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 80218cc:	7823      	ldrb	r3, [r4, #0]
 80218ce:	2b03      	cmp	r3, #3
 80218d0:	d82c      	bhi.n	802192c <SUBGRF_SetModulationParams+0x7c>
 80218d2:	e8df f003 	tbb	[pc, r3]
 80218d6:	4205      	.short	0x4205
 80218d8:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80218da:	f7ff ffd1 	bl	8021880 <SUBGRF_SetPacketType>
 80218de:	e7f5      	b.n	80218cc <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80218e0:	6862      	ldr	r2, [r4, #4]
 80218e2:	4b35      	ldr	r3, [pc, #212]	; (80219b8 <SUBGRF_SetModulationParams+0x108>)
 80218e4:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80218e8:	0c1a      	lsrs	r2, r3, #16
 80218ea:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80218ee:	0a1a      	lsrs	r2, r3, #8
 80218f0:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80218f4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80218f8:	7b23      	ldrb	r3, [r4, #12]
 80218fa:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80218fe:	7b63      	ldrb	r3, [r4, #13]
 8021900:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8021904:	68a1      	ldr	r1, [r4, #8]
 8021906:	4a2d      	ldr	r2, [pc, #180]	; (80219bc <SUBGRF_SetModulationParams+0x10c>)
 8021908:	2300      	movs	r3, #0
 802190a:	0648      	lsls	r0, r1, #25
 802190c:	09c9      	lsrs	r1, r1, #7
 802190e:	f7e4 fe49 	bl	80065a4 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8021912:	0c03      	lsrs	r3, r0, #16
 8021914:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8021918:	0a03      	lsrs	r3, r0, #8
 802191a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 802191e:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8021922:	2208      	movs	r2, #8
 8021924:	4669      	mov	r1, sp
 8021926:	208b      	movs	r0, #139	; 0x8b
 8021928:	f7ff fd44 	bl	80213b4 <SUBGRF_WriteCommand>
}
 802192c:	b002      	add	sp, #8
 802192e:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8021930:	6922      	ldr	r2, [r4, #16]
 8021932:	4b21      	ldr	r3, [pc, #132]	; (80219b8 <SUBGRF_SetModulationParams+0x108>)
 8021934:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8021938:	0c1a      	lsrs	r2, r3, #16
 802193a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 802193e:	0a1a      	lsrs	r2, r3, #8
 8021940:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8021944:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8021948:	7d23      	ldrb	r3, [r4, #20]
 802194a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 802194e:	2204      	movs	r2, #4
 8021950:	4669      	mov	r1, sp
 8021952:	208b      	movs	r0, #139	; 0x8b
 8021954:	f7ff fd2e 	bl	80213b4 <SUBGRF_WriteCommand>
        break;
 8021958:	e7e8      	b.n	802192c <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 802195a:	7e23      	ldrb	r3, [r4, #24]
 802195c:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8021960:	7e63      	ldrb	r3, [r4, #25]
 8021962:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8021966:	7ea3      	ldrb	r3, [r4, #26]
 8021968:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 802196c:	7ee3      	ldrb	r3, [r4, #27]
 802196e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8021972:	2204      	movs	r2, #4
 8021974:	4669      	mov	r1, sp
 8021976:	208b      	movs	r0, #139	; 0x8b
 8021978:	f7ff fd1c 	bl	80213b4 <SUBGRF_WriteCommand>
        break;
 802197c:	e7d6      	b.n	802192c <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 802197e:	6862      	ldr	r2, [r4, #4]
 8021980:	4b0d      	ldr	r3, [pc, #52]	; (80219b8 <SUBGRF_SetModulationParams+0x108>)
 8021982:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8021986:	0c1a      	lsrs	r2, r3, #16
 8021988:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 802198c:	0a1a      	lsrs	r2, r3, #8
 802198e:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8021992:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8021996:	7b23      	ldrb	r3, [r4, #12]
 8021998:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 802199c:	7b63      	ldrb	r3, [r4, #13]
 802199e:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80219a2:	2205      	movs	r2, #5
 80219a4:	4669      	mov	r1, sp
 80219a6:	208b      	movs	r0, #139	; 0x8b
 80219a8:	f7ff fd04 	bl	80213b4 <SUBGRF_WriteCommand>
}
 80219ac:	e7be      	b.n	802192c <SUBGRF_SetModulationParams+0x7c>
 80219ae:	bf00      	nop
 80219b0:	08024c08 	.word	0x08024c08
 80219b4:	20001caf 	.word	0x20001caf
 80219b8:	3d090000 	.word	0x3d090000
 80219bc:	01e84800 	.word	0x01e84800

080219c0 <SUBGRF_ReadRegister>:
{
 80219c0:	b500      	push	{lr}
 80219c2:	b083      	sub	sp, #12
 80219c4:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80219c6:	2301      	movs	r3, #1
 80219c8:	f10d 0207 	add.w	r2, sp, #7
 80219cc:	4803      	ldr	r0, [pc, #12]	; (80219dc <SUBGRF_ReadRegister+0x1c>)
 80219ce:	f7ef fdad 	bl	801152c <HAL_SUBGHZ_ReadRegisters>
}
 80219d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80219d6:	b003      	add	sp, #12
 80219d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80219dc:	20002764 	.word	0x20002764

080219e0 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80219e0:	b510      	push	{r4, lr}
 80219e2:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80219e4:	f7e5 fa3e 	bl	8006e64 <RBI_IsDCDC>
 80219e8:	2801      	cmp	r0, #1
 80219ea:	d000      	beq.n	80219ee <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80219ec:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80219ee:	f640 1023 	movw	r0, #2339	; 0x923
 80219f2:	f7ff ffe5 	bl	80219c0 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 80219f6:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80219fa:	4321      	orrs	r1, r4
 80219fc:	f640 1023 	movw	r0, #2339	; 0x923
 8021a00:	f7ff feee 	bl	80217e0 <SUBGRF_WriteRegister>
}
 8021a04:	e7f2      	b.n	80219ec <Radio_SMPS_Set+0xc>
	...

08021a08 <SUBGRF_Init>:
{
 8021a08:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8021a0a:	b108      	cbz	r0, 8021a10 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8021a0c:	4a16      	ldr	r2, [pc, #88]	; (8021a68 <SUBGRF_Init+0x60>)
 8021a0e:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8021a10:	f7e5 fb02 	bl	8007018 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8021a14:	2002      	movs	r0, #2
 8021a16:	f7ff ffe3 	bl	80219e0 <Radio_SMPS_Set>
    ImageCalibrated = false;
 8021a1a:	2000      	movs	r0, #0
 8021a1c:	4b13      	ldr	r3, [pc, #76]	; (8021a6c <SUBGRF_Init+0x64>)
 8021a1e:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8021a20:	f7ff fcee 	bl	8021400 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8021a24:	f7e5 fa1c 	bl	8006e60 <RBI_IsTCXO>
 8021a28:	2801      	cmp	r0, #1
 8021a2a:	d00f      	beq.n	8021a4c <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8021a2c:	2120      	movs	r1, #32
 8021a2e:	f640 1011 	movw	r0, #2321	; 0x911
 8021a32:	f7ff fed5 	bl	80217e0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8021a36:	2120      	movs	r1, #32
 8021a38:	f640 1012 	movw	r0, #2322	; 0x912
 8021a3c:	f7ff fed0 	bl	80217e0 <SUBGRF_WriteRegister>
    RBI_Init();
 8021a40:	f7e5 f98a 	bl	8006d58 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8021a44:	4b0a      	ldr	r3, [pc, #40]	; (8021a70 <SUBGRF_Init+0x68>)
 8021a46:	2201      	movs	r2, #1
 8021a48:	701a      	strb	r2, [r3, #0]
}
 8021a4a:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8021a4c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8021a50:	f7ff fe22 	bl	8021698 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8021a54:	2100      	movs	r1, #0
 8021a56:	f640 1011 	movw	r0, #2321	; 0x911
 8021a5a:	f7ff fec1 	bl	80217e0 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8021a5e:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8021a62:	f7ff fd7c 	bl	802155e <SUBGRF_Calibrate>
 8021a66:	e7eb      	b.n	8021a40 <SUBGRF_Init+0x38>
 8021a68:	20001cb0 	.word	0x20001cb0
 8021a6c:	20001cac 	.word	0x20001cac
 8021a70:	20001cae 	.word	0x20001cae

08021a74 <SUBGRF_SetSleep>:
{
 8021a74:	b510      	push	{r4, lr}
 8021a76:	b082      	sub	sp, #8
 8021a78:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8021a7a:	2000      	movs	r0, #0
 8021a7c:	f7e5 f9ae 	bl	8006ddc <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8021a80:	2002      	movs	r0, #2
 8021a82:	f7ff ffad 	bl	80219e0 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8021a86:	f3c4 0080 	ubfx	r0, r4, #2, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8021a8a:	f3c4 0340 	ubfx	r3, r4, #1, #1
 8021a8e:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8021a90:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8021a94:	f004 0001 	and.w	r0, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8021a98:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8021a9a:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8021a9e:	2201      	movs	r2, #1
 8021aa0:	f10d 0107 	add.w	r1, sp, #7
 8021aa4:	2084      	movs	r0, #132	; 0x84
 8021aa6:	f7ff fc85 	bl	80213b4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8021aaa:	4b02      	ldr	r3, [pc, #8]	; (8021ab4 <SUBGRF_SetSleep+0x40>)
 8021aac:	2200      	movs	r2, #0
 8021aae:	701a      	strb	r2, [r3, #0]
}
 8021ab0:	b002      	add	sp, #8
 8021ab2:	bd10      	pop	{r4, pc}
 8021ab4:	20001cae 	.word	0x20001cae

08021ab8 <SUBGRF_SetWhiteningSeed>:
{
 8021ab8:	b510      	push	{r4, lr}
 8021aba:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8021abc:	f7ff fe32 	bl	8021724 <SUBGRF_GetPacketType>
 8021ac0:	b100      	cbz	r0, 8021ac4 <SUBGRF_SetWhiteningSeed+0xc>
}
 8021ac2:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8021ac4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8021ac8:	f7ff ff7a 	bl	80219c0 <SUBGRF_ReadRegister>
 8021acc:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8021ad0:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8021ad4:	4301      	orrs	r1, r0
 8021ad6:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8021ada:	f7ff fe81 	bl	80217e0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8021ade:	b2e1      	uxtb	r1, r4
 8021ae0:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8021ae4:	f7ff fe7c 	bl	80217e0 <SUBGRF_WriteRegister>
}
 8021ae8:	e7eb      	b.n	8021ac2 <SUBGRF_SetWhiteningSeed+0xa>

08021aea <SUBGRF_SetTxParams>:
{
 8021aea:	b530      	push	{r4, r5, lr}
 8021aec:	b083      	sub	sp, #12
 8021aee:	460c      	mov	r4, r1
 8021af0:	4615      	mov	r5, r2
    if( paSelect == RFO_LP )
 8021af2:	2801      	cmp	r0, #1
 8021af4:	d127      	bne.n	8021b46 <SUBGRF_SetTxParams+0x5c>
        if( power == 15 )
 8021af6:	290f      	cmp	r1, #15
 8021af8:	d00d      	beq.n	8021b16 <SUBGRF_SetTxParams+0x2c>
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8021afa:	2301      	movs	r3, #1
 8021afc:	461a      	mov	r2, r3
 8021afe:	2100      	movs	r1, #0
 8021b00:	2004      	movs	r0, #4
 8021b02:	f7ff fd99 	bl	8021638 <SUBGRF_SetPaConfig>
        if( power >= 14 )
 8021b06:	2c0d      	cmp	r4, #13
 8021b08:	dc0c      	bgt.n	8021b24 <SUBGRF_SetTxParams+0x3a>
        else if( power < -17 )
 8021b0a:	f114 0f11 	cmn.w	r4, #17
 8021b0e:	da0a      	bge.n	8021b26 <SUBGRF_SetTxParams+0x3c>
            power = -17;
 8021b10:	f06f 0410 	mvn.w	r4, #16
 8021b14:	e007      	b.n	8021b26 <SUBGRF_SetTxParams+0x3c>
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8021b16:	2301      	movs	r3, #1
 8021b18:	461a      	mov	r2, r3
 8021b1a:	2100      	movs	r1, #0
 8021b1c:	2006      	movs	r0, #6
 8021b1e:	f7ff fd8b 	bl	8021638 <SUBGRF_SetPaConfig>
 8021b22:	e7f0      	b.n	8021b06 <SUBGRF_SetTxParams+0x1c>
            power = 14;
 8021b24:	240e      	movs	r4, #14
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8021b26:	2118      	movs	r1, #24
 8021b28:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8021b2c:	f7ff fe58 	bl	80217e0 <SUBGRF_WriteRegister>
    buf[0] = power;
 8021b30:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 8021b34:	f88d 5005 	strb.w	r5, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8021b38:	2202      	movs	r2, #2
 8021b3a:	a901      	add	r1, sp, #4
 8021b3c:	208e      	movs	r0, #142	; 0x8e
 8021b3e:	f7ff fc39 	bl	80213b4 <SUBGRF_WriteCommand>
}
 8021b42:	b003      	add	sp, #12
 8021b44:	bd30      	pop	{r4, r5, pc}
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8021b46:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8021b4a:	f7ff ff39 	bl	80219c0 <SUBGRF_ReadRegister>
 8021b4e:	f040 011e 	orr.w	r1, r0, #30
 8021b52:	b2c9      	uxtb	r1, r1
 8021b54:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8021b58:	f7ff fe42 	bl	80217e0 <SUBGRF_WriteRegister>
        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8021b5c:	2301      	movs	r3, #1
 8021b5e:	2200      	movs	r2, #0
 8021b60:	2107      	movs	r1, #7
 8021b62:	2004      	movs	r0, #4
 8021b64:	f7ff fd68 	bl	8021638 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8021b68:	2c16      	cmp	r4, #22
 8021b6a:	dc05      	bgt.n	8021b78 <SUBGRF_SetTxParams+0x8e>
        else if( power < -9 )
 8021b6c:	f114 0f09 	cmn.w	r4, #9
 8021b70:	da03      	bge.n	8021b7a <SUBGRF_SetTxParams+0x90>
            power = -9;
 8021b72:	f06f 0408 	mvn.w	r4, #8
 8021b76:	e000      	b.n	8021b7a <SUBGRF_SetTxParams+0x90>
            power = 22;
 8021b78:	2416      	movs	r4, #22
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8021b7a:	2138      	movs	r1, #56	; 0x38
 8021b7c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8021b80:	f7ff fe2e 	bl	80217e0 <SUBGRF_WriteRegister>
 8021b84:	e7d4      	b.n	8021b30 <SUBGRF_SetTxParams+0x46>
	...

08021b88 <SUBGRF_GetRxBufferStatus>:
{
 8021b88:	b530      	push	{r4, r5, lr}
 8021b8a:	b083      	sub	sp, #12
 8021b8c:	4605      	mov	r5, r0
 8021b8e:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8021b90:	2202      	movs	r2, #2
 8021b92:	a901      	add	r1, sp, #4
 8021b94:	2013      	movs	r0, #19
 8021b96:	f7ff fc1d 	bl	80213d4 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8021b9a:	f7ff fdc3 	bl	8021724 <SUBGRF_GetPacketType>
 8021b9e:	2801      	cmp	r0, #1
 8021ba0:	d007      	beq.n	8021bb2 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8021ba2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8021ba6:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8021ba8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8021bac:	7023      	strb	r3, [r4, #0]
}
 8021bae:	b003      	add	sp, #12
 8021bb0:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8021bb2:	4b05      	ldr	r3, [pc, #20]	; (8021bc8 <SUBGRF_GetRxBufferStatus+0x40>)
 8021bb4:	781b      	ldrb	r3, [r3, #0]
 8021bb6:	b2db      	uxtb	r3, r3
 8021bb8:	2b01      	cmp	r3, #1
 8021bba:	d1f2      	bne.n	8021ba2 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8021bbc:	f240 7002 	movw	r0, #1794	; 0x702
 8021bc0:	f7ff fefe 	bl	80219c0 <SUBGRF_ReadRegister>
 8021bc4:	7028      	strb	r0, [r5, #0]
 8021bc6:	e7ef      	b.n	8021ba8 <SUBGRF_GetRxBufferStatus+0x20>
 8021bc8:	20001cad 	.word	0x20001cad

08021bcc <SUBGRF_WriteRegisters>:
{
 8021bcc:	b510      	push	{r4, lr}
 8021bce:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021bd0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8021bd4:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8021bd6:	460a      	mov	r2, r1
 8021bd8:	4601      	mov	r1, r0
 8021bda:	4803      	ldr	r0, [pc, #12]	; (8021be8 <SUBGRF_WriteRegisters+0x1c>)
 8021bdc:	f7ef fc56 	bl	801148c <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021be0:	f384 8810 	msr	PRIMASK, r4
}
 8021be4:	bd10      	pop	{r4, pc}
 8021be6:	bf00      	nop
 8021be8:	20002764 	.word	0x20002764

08021bec <SUBGRF_SetSyncWord>:
{
 8021bec:	b508      	push	{r3, lr}
 8021bee:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8021bf0:	2208      	movs	r2, #8
 8021bf2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8021bf6:	f7ff ffe9 	bl	8021bcc <SUBGRF_WriteRegisters>
}
 8021bfa:	2000      	movs	r0, #0
 8021bfc:	bd08      	pop	{r3, pc}

08021bfe <SUBGRF_SetCrcSeed>:
{
 8021bfe:	b500      	push	{lr}
 8021c00:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8021c02:	0a03      	lsrs	r3, r0, #8
 8021c04:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8021c08:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8021c0c:	f7ff fd8a 	bl	8021724 <SUBGRF_GetPacketType>
 8021c10:	b110      	cbz	r0, 8021c18 <SUBGRF_SetCrcSeed+0x1a>
}
 8021c12:	b003      	add	sp, #12
 8021c14:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8021c18:	2202      	movs	r2, #2
 8021c1a:	a901      	add	r1, sp, #4
 8021c1c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8021c20:	f7ff ffd4 	bl	8021bcc <SUBGRF_WriteRegisters>
}
 8021c24:	e7f5      	b.n	8021c12 <SUBGRF_SetCrcSeed+0x14>

08021c26 <SUBGRF_SetCrcPolynomial>:
{
 8021c26:	b500      	push	{lr}
 8021c28:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8021c2a:	0a03      	lsrs	r3, r0, #8
 8021c2c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8021c30:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8021c34:	f7ff fd76 	bl	8021724 <SUBGRF_GetPacketType>
 8021c38:	b110      	cbz	r0, 8021c40 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8021c3a:	b003      	add	sp, #12
 8021c3c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8021c40:	2202      	movs	r2, #2
 8021c42:	a901      	add	r1, sp, #4
 8021c44:	f240 60be 	movw	r0, #1726	; 0x6be
 8021c48:	f7ff ffc0 	bl	8021bcc <SUBGRF_WriteRegisters>
}
 8021c4c:	e7f5      	b.n	8021c3a <SUBGRF_SetCrcPolynomial+0x14>
	...

08021c50 <SUBGRF_SetPacketParams>:
{
 8021c50:	b510      	push	{r4, lr}
 8021c52:	b084      	sub	sp, #16
 8021c54:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8021c56:	ab01      	add	r3, sp, #4
 8021c58:	4a33      	ldr	r2, [pc, #204]	; (8021d28 <SUBGRF_SetPacketParams+0xd8>)
 8021c5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8021c5c:	c303      	stmia	r3!, {r0, r1}
 8021c5e:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8021c60:	7820      	ldrb	r0, [r4, #0]
 8021c62:	4b32      	ldr	r3, [pc, #200]	; (8021d2c <SUBGRF_SetPacketParams+0xdc>)
 8021c64:	781b      	ldrb	r3, [r3, #0]
 8021c66:	4298      	cmp	r0, r3
 8021c68:	d106      	bne.n	8021c78 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8021c6a:	7823      	ldrb	r3, [r4, #0]
 8021c6c:	2b03      	cmp	r3, #3
 8021c6e:	d82a      	bhi.n	8021cc6 <SUBGRF_SetPacketParams+0x76>
 8021c70:	e8df f003 	tbb	[pc, r3]
 8021c74:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8021c78:	f7ff fe02 	bl	8021880 <SUBGRF_SetPacketType>
 8021c7c:	e7f5      	b.n	8021c6a <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8021c7e:	7a63      	ldrb	r3, [r4, #9]
 8021c80:	2bf1      	cmp	r3, #241	; 0xf1
 8021c82:	d022      	beq.n	8021cca <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8021c84:	2bf2      	cmp	r3, #242	; 0xf2
 8021c86:	d02a      	beq.n	8021cde <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8021c88:	8862      	ldrh	r2, [r4, #2]
 8021c8a:	0a11      	lsrs	r1, r2, #8
 8021c8c:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8021c90:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8021c94:	7922      	ldrb	r2, [r4, #4]
 8021c96:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8021c9a:	7962      	ldrb	r2, [r4, #5]
 8021c9c:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8021ca0:	79a2      	ldrb	r2, [r4, #6]
 8021ca2:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8021ca6:	79e2      	ldrb	r2, [r4, #7]
 8021ca8:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8021cac:	7a22      	ldrb	r2, [r4, #8]
 8021cae:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8021cb2:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8021cb6:	7aa3      	ldrb	r3, [r4, #10]
 8021cb8:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8021cbc:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8021cbe:	a901      	add	r1, sp, #4
 8021cc0:	208c      	movs	r0, #140	; 0x8c
 8021cc2:	f7ff fb77 	bl	80213b4 <SUBGRF_WriteCommand>
}
 8021cc6:	b004      	add	sp, #16
 8021cc8:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8021cca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8021cce:	f7ff ff96 	bl	8021bfe <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8021cd2:	f248 0005 	movw	r0, #32773	; 0x8005
 8021cd6:	f7ff ffa6 	bl	8021c26 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8021cda:	2302      	movs	r3, #2
 8021cdc:	e7d4      	b.n	8021c88 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8021cde:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8021ce2:	f7ff ff8c 	bl	8021bfe <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8021ce6:	f241 0021 	movw	r0, #4129	; 0x1021
 8021cea:	f7ff ff9c 	bl	8021c26 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8021cee:	2306      	movs	r3, #6
 8021cf0:	e7ca      	b.n	8021c88 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8021cf2:	7b23      	ldrb	r3, [r4, #12]
 8021cf4:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8021cf8:	2201      	movs	r2, #1
        break;
 8021cfa:	e7e0      	b.n	8021cbe <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8021cfc:	89e3      	ldrh	r3, [r4, #14]
 8021cfe:	0a1a      	lsrs	r2, r3, #8
 8021d00:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8021d04:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8021d08:	7c23      	ldrb	r3, [r4, #16]
 8021d0a:	4a09      	ldr	r2, [pc, #36]	; (8021d30 <SUBGRF_SetPacketParams+0xe0>)
 8021d0c:	7013      	strb	r3, [r2, #0]
 8021d0e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8021d12:	7c63      	ldrb	r3, [r4, #17]
 8021d14:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8021d18:	7ca3      	ldrb	r3, [r4, #18]
 8021d1a:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8021d1e:	7ce3      	ldrb	r3, [r4, #19]
 8021d20:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8021d24:	2206      	movs	r2, #6
        break;
 8021d26:	e7ca      	b.n	8021cbe <SUBGRF_SetPacketParams+0x6e>
 8021d28:	08024c10 	.word	0x08024c10
 8021d2c:	20001caf 	.word	0x20001caf
 8021d30:	20001cad 	.word	0x20001cad

08021d34 <SUBGRF_ReadRegisters>:
{
 8021d34:	b510      	push	{r4, lr}
 8021d36:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021d38:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8021d3c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8021d3e:	460a      	mov	r2, r1
 8021d40:	4601      	mov	r1, r0
 8021d42:	4803      	ldr	r0, [pc, #12]	; (8021d50 <SUBGRF_ReadRegisters+0x1c>)
 8021d44:	f7ef fbf2 	bl	801152c <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021d48:	f384 8810 	msr	PRIMASK, r4
}
 8021d4c:	bd10      	pop	{r4, pc}
 8021d4e:	bf00      	nop
 8021d50:	20002764 	.word	0x20002764

08021d54 <SUBGRF_GetRandom>:
{
 8021d54:	b570      	push	{r4, r5, r6, lr}
 8021d56:	b082      	sub	sp, #8
    uint32_t number = 0;
 8021d58:	2600      	movs	r6, #0
 8021d5a:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8021d5c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8021d60:	f7ff fe2e 	bl	80219c0 <SUBGRF_ReadRegister>
 8021d64:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8021d66:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8021d6a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8021d6e:	f7ff fd37 	bl	80217e0 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8021d72:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8021d76:	f7ff fe23 	bl	80219c0 <SUBGRF_ReadRegister>
 8021d7a:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8021d7c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8021d80:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8021d84:	f7ff fd2c 	bl	80217e0 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8021d88:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8021d8c:	f7ff fb6c 	bl	8021468 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8021d90:	2204      	movs	r2, #4
 8021d92:	eb0d 0102 	add.w	r1, sp, r2
 8021d96:	f640 0019 	movw	r0, #2073	; 0x819
 8021d9a:	f7ff ffcb 	bl	8021d34 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8021d9e:	4630      	mov	r0, r6
 8021da0:	f7ff fb2e 	bl	8021400 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8021da4:	4629      	mov	r1, r5
 8021da6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8021daa:	f7ff fd19 	bl	80217e0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8021dae:	4621      	mov	r1, r4
 8021db0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8021db4:	f7ff fd14 	bl	80217e0 <SUBGRF_WriteRegister>
}
 8021db8:	9801      	ldr	r0, [sp, #4]
 8021dba:	b002      	add	sp, #8
 8021dbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08021dc0 <SUBGRF_WriteBuffer>:
{
 8021dc0:	b510      	push	{r4, lr}
 8021dc2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021dc4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8021dc8:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8021dca:	460a      	mov	r2, r1
 8021dcc:	4601      	mov	r1, r0
 8021dce:	4803      	ldr	r0, [pc, #12]	; (8021ddc <SUBGRF_WriteBuffer+0x1c>)
 8021dd0:	f7ef fd02 	bl	80117d8 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021dd4:	f384 8810 	msr	PRIMASK, r4
}
 8021dd8:	bd10      	pop	{r4, pc}
 8021dda:	bf00      	nop
 8021ddc:	20002764 	.word	0x20002764

08021de0 <SUBGRF_SetPayload>:
{
 8021de0:	b508      	push	{r3, lr}
 8021de2:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8021de4:	4601      	mov	r1, r0
 8021de6:	2000      	movs	r0, #0
 8021de8:	f7ff ffea 	bl	8021dc0 <SUBGRF_WriteBuffer>
}
 8021dec:	bd08      	pop	{r3, pc}

08021dee <SUBGRF_SendPayload>:
{
 8021dee:	b510      	push	{r4, lr}
 8021df0:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8021df2:	f7ff fff5 	bl	8021de0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8021df6:	4620      	mov	r0, r4
 8021df8:	f7ff fb1c 	bl	8021434 <SUBGRF_SetTx>
}
 8021dfc:	bd10      	pop	{r4, pc}
	...

08021e00 <SUBGRF_ReadBuffer>:
{
 8021e00:	b510      	push	{r4, lr}
 8021e02:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021e04:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8021e08:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8021e0a:	460a      	mov	r2, r1
 8021e0c:	4601      	mov	r1, r0
 8021e0e:	4803      	ldr	r0, [pc, #12]	; (8021e1c <SUBGRF_ReadBuffer+0x1c>)
 8021e10:	f7ef fd2c 	bl	801186c <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021e14:	f384 8810 	msr	PRIMASK, r4
}
 8021e18:	bd10      	pop	{r4, pc}
 8021e1a:	bf00      	nop
 8021e1c:	20002764 	.word	0x20002764

08021e20 <SUBGRF_GetPayload>:
{
 8021e20:	b570      	push	{r4, r5, r6, lr}
 8021e22:	b082      	sub	sp, #8
 8021e24:	4606      	mov	r6, r0
 8021e26:	460c      	mov	r4, r1
 8021e28:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8021e2a:	2300      	movs	r3, #0
 8021e2c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8021e30:	f10d 0107 	add.w	r1, sp, #7
 8021e34:	4620      	mov	r0, r4
 8021e36:	f7ff fea7 	bl	8021b88 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8021e3a:	7822      	ldrb	r2, [r4, #0]
 8021e3c:	42aa      	cmp	r2, r5
 8021e3e:	d902      	bls.n	8021e46 <SUBGRF_GetPayload+0x26>
        return 1;
 8021e40:	2001      	movs	r0, #1
}
 8021e42:	b002      	add	sp, #8
 8021e44:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8021e46:	4631      	mov	r1, r6
 8021e48:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8021e4c:	f7ff ffd8 	bl	8021e00 <SUBGRF_ReadBuffer>
    return 0;
 8021e50:	2000      	movs	r0, #0
 8021e52:	e7f6      	b.n	8021e42 <SUBGRF_GetPayload+0x22>

08021e54 <SUBGRF_SetSwitch>:
{
 8021e54:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8021e56:	2901      	cmp	r1, #1
 8021e58:	d003      	beq.n	8021e62 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8021e5a:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8021e5c:	f7e4 ffbe 	bl	8006ddc <RBI_ConfigRFSwitch>
}
 8021e60:	bd10      	pop	{r4, pc}
 8021e62:	4604      	mov	r4, r0
 8021e64:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8021e66:	2c01      	cmp	r4, #1
 8021e68:	d003      	beq.n	8021e72 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8021e6a:	2c02      	cmp	r4, #2
 8021e6c:	d1f6      	bne.n	8021e5c <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8021e6e:	2003      	movs	r0, #3
 8021e70:	e7f4      	b.n	8021e5c <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8021e72:	2004      	movs	r0, #4
 8021e74:	f7ff fdb4 	bl	80219e0 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8021e78:	2002      	movs	r0, #2
 8021e7a:	e7f6      	b.n	8021e6a <SUBGRF_SetSwitch+0x16>

08021e7c <SUBGRF_SetRfTxPower>:
{
 8021e7c:	b538      	push	{r3, r4, r5, lr}
 8021e7e:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8021e80:	f7e4 ffec 	bl	8006e5c <RBI_GetTxConfig>
    switch (TxConfig)
 8021e84:	b148      	cbz	r0, 8021e9a <SUBGRF_SetRfTxPower+0x1e>
 8021e86:	2802      	cmp	r0, #2
 8021e88:	d10d      	bne.n	8021ea6 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8021e8a:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8021e8c:	2202      	movs	r2, #2
 8021e8e:	4621      	mov	r1, r4
 8021e90:	4628      	mov	r0, r5
 8021e92:	f7ff fe2a 	bl	8021aea <SUBGRF_SetTxParams>
}
 8021e96:	4628      	mov	r0, r5
 8021e98:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8021e9a:	2c0f      	cmp	r4, #15
 8021e9c:	dc01      	bgt.n	8021ea2 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8021e9e:	2501      	movs	r5, #1
 8021ea0:	e7f4      	b.n	8021e8c <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8021ea2:	2502      	movs	r5, #2
 8021ea4:	e7f2      	b.n	8021e8c <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8021ea6:	2501      	movs	r5, #1
 8021ea8:	e7f0      	b.n	8021e8c <SUBGRF_SetRfTxPower+0x10>

08021eaa <SUBGRF_GetRadioWakeUpTime>:
}
 8021eaa:	2096      	movs	r0, #150	; 0x96
 8021eac:	4770      	bx	lr
	...

08021eb0 <HAL_SUBGHZ_TxCpltCallback>:
{
 8021eb0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8021eb2:	4b02      	ldr	r3, [pc, #8]	; (8021ebc <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8021eb4:	681b      	ldr	r3, [r3, #0]
 8021eb6:	2001      	movs	r0, #1
 8021eb8:	4798      	blx	r3
}
 8021eba:	bd08      	pop	{r3, pc}
 8021ebc:	20001cb0 	.word	0x20001cb0

08021ec0 <HAL_SUBGHZ_RxCpltCallback>:
{
 8021ec0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8021ec2:	4b02      	ldr	r3, [pc, #8]	; (8021ecc <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8021ec4:	681b      	ldr	r3, [r3, #0]
 8021ec6:	2002      	movs	r0, #2
 8021ec8:	4798      	blx	r3
}
 8021eca:	bd08      	pop	{r3, pc}
 8021ecc:	20001cb0 	.word	0x20001cb0

08021ed0 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8021ed0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8021ed2:	4b02      	ldr	r3, [pc, #8]	; (8021edc <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8021ed4:	681b      	ldr	r3, [r3, #0]
 8021ed6:	2040      	movs	r0, #64	; 0x40
 8021ed8:	4798      	blx	r3
}
 8021eda:	bd08      	pop	{r3, pc}
 8021edc:	20001cb0 	.word	0x20001cb0

08021ee0 <HAL_SUBGHZ_CADStatusCallback>:
{
 8021ee0:	b508      	push	{r3, lr}
    switch (cadstatus)
 8021ee2:	b111      	cbz	r1, 8021eea <HAL_SUBGHZ_CADStatusCallback+0xa>
 8021ee4:	2901      	cmp	r1, #1
 8021ee6:	d005      	beq.n	8021ef4 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8021ee8:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8021eea:	4b05      	ldr	r3, [pc, #20]	; (8021f00 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8021eec:	681b      	ldr	r3, [r3, #0]
 8021eee:	2080      	movs	r0, #128	; 0x80
 8021ef0:	4798      	blx	r3
            break;
 8021ef2:	e7f9      	b.n	8021ee8 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8021ef4:	4b02      	ldr	r3, [pc, #8]	; (8021f00 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8021ef6:	681b      	ldr	r3, [r3, #0]
 8021ef8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8021efc:	4798      	blx	r3
}
 8021efe:	e7f3      	b.n	8021ee8 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8021f00:	20001cb0 	.word	0x20001cb0

08021f04 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8021f04:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8021f06:	4b03      	ldr	r3, [pc, #12]	; (8021f14 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8021f08:	681b      	ldr	r3, [r3, #0]
 8021f0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8021f0e:	4798      	blx	r3
}
 8021f10:	bd08      	pop	{r3, pc}
 8021f12:	bf00      	nop
 8021f14:	20001cb0 	.word	0x20001cb0

08021f18 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8021f18:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8021f1a:	4b02      	ldr	r3, [pc, #8]	; (8021f24 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8021f1c:	681b      	ldr	r3, [r3, #0]
 8021f1e:	2020      	movs	r0, #32
 8021f20:	4798      	blx	r3
}
 8021f22:	bd08      	pop	{r3, pc}
 8021f24:	20001cb0 	.word	0x20001cb0

08021f28 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8021f28:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8021f2a:	4b02      	ldr	r3, [pc, #8]	; (8021f34 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8021f2c:	681b      	ldr	r3, [r3, #0]
 8021f2e:	2004      	movs	r0, #4
 8021f30:	4798      	blx	r3
}
 8021f32:	bd08      	pop	{r3, pc}
 8021f34:	20001cb0 	.word	0x20001cb0

08021f38 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8021f38:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8021f3a:	4b02      	ldr	r3, [pc, #8]	; (8021f44 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8021f3c:	681b      	ldr	r3, [r3, #0]
 8021f3e:	2008      	movs	r0, #8
 8021f40:	4798      	blx	r3
}
 8021f42:	bd08      	pop	{r3, pc}
 8021f44:	20001cb0 	.word	0x20001cb0

08021f48 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8021f48:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8021f4a:	4b02      	ldr	r3, [pc, #8]	; (8021f54 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8021f4c:	681b      	ldr	r3, [r3, #0]
 8021f4e:	2010      	movs	r0, #16
 8021f50:	4798      	blx	r3
}
 8021f52:	bd08      	pop	{r3, pc}
 8021f54:	20001cb0 	.word	0x20001cb0

08021f58 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8021f58:	b1a0      	cbz	r0, 8021f84 <SUBGRF_GetFskBandwidthRegValue+0x2c>
{
 8021f5a:	b410      	push	{r4}
 8021f5c:	4604      	mov	r4, r0
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8021f5e:	2300      	movs	r3, #0
 8021f60:	2b15      	cmp	r3, #21
 8021f62:	d80e      	bhi.n	8021f82 <SUBGRF_GetFskBandwidthRegValue+0x2a>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8021f64:	4619      	mov	r1, r3
 8021f66:	4a08      	ldr	r2, [pc, #32]	; (8021f88 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 8021f68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8021f6c:	42a2      	cmp	r2, r4
 8021f6e:	d802      	bhi.n	8021f76 <SUBGRF_GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8021f70:	3301      	adds	r3, #1
 8021f72:	b2db      	uxtb	r3, r3
 8021f74:	e7f4      	b.n	8021f60 <SUBGRF_GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
 8021f76:	4b04      	ldr	r3, [pc, #16]	; (8021f88 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 8021f78:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8021f7c:	7918      	ldrb	r0, [r3, #4]
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
}
 8021f7e:	bc10      	pop	{r4}
 8021f80:	4770      	bx	lr
    while( 1 );
 8021f82:	e7fe      	b.n	8021f82 <SUBGRF_GetFskBandwidthRegValue+0x2a>
        return( 0x1F );
 8021f84:	201f      	movs	r0, #31
}
 8021f86:	4770      	bx	lr
 8021f88:	08028a08 	.word	0x08028a08

08021f8c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8021f8c:	b570      	push	{r4, r5, r6, lr}
 8021f8e:	b082      	sub	sp, #8
 8021f90:	4604      	mov	r4, r0
 8021f92:	460d      	mov	r5, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8021f94:	4b1d      	ldr	r3, [pc, #116]	; (802200c <SUBGRF_GetCFO+0x80>)
 8021f96:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8021f98:	f640 0007 	movw	r0, #2055	; 0x807
 8021f9c:	f7ff fd10 	bl	80219c0 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8021fa0:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8021fa4:	aa02      	add	r2, sp, #8
 8021fa6:	4413      	add	r3, r2
 8021fa8:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8021fac:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8021fb0:	3b01      	subs	r3, #1
 8021fb2:	fa02 f003 	lsl.w	r0, r2, r3
 8021fb6:	4b16      	ldr	r3, [pc, #88]	; (8022010 <SUBGRF_GetCFO+0x84>)
 8021fb8:	fbb3 f3f0 	udiv	r3, r3, r0
  uint32_t cf_osr = cf_fs / bitRate;
 8021fbc:	fbb3 f0f4 	udiv	r0, r3, r4
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8021fc0:	2807      	cmp	r0, #7
 8021fc2:	d921      	bls.n	8022008 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8021fc4:	2401      	movs	r4, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8021fc6:	fb00 f004 	mul.w	r0, r0, r4
 8021fca:	2803      	cmp	r0, #3
 8021fcc:	d800      	bhi.n	8021fd0 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8021fce:	2404      	movs	r4, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8021fd0:	fb03 f404 	mul.w	r4, r3, r4
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8021fd4:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8021fd8:	f7ff fcf2 	bl	80219c0 <SUBGRF_ReadRegister>
 8021fdc:	0200      	lsls	r0, r0, #8
 8021fde:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8021fe2:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8021fe6:	f7ff fceb 	bl	80219c0 <SUBGRF_ReadRegister>
 8021fea:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8021fec:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8021ff0:	d003      	beq.n	8021ffa <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8021ff2:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8021ff6:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8021ffa:	0963      	lsrs	r3, r4, #5
 8021ffc:	fb03 f300 	mul.w	r3, r3, r0
 8022000:	11db      	asrs	r3, r3, #7
 8022002:	602b      	str	r3, [r5, #0]
}
 8022004:	b002      	add	sp, #8
 8022006:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8022008:	2402      	movs	r4, #2
 802200a:	e7dc      	b.n	8021fc6 <SUBGRF_GetCFO+0x3a>
 802200c:	0c0a0804 	.word	0x0c0a0804
 8022010:	01e84800 	.word	0x01e84800

08022014 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8022014:	f04f 30ff 	mov.w	r0, #4294967295
 8022018:	4770      	bx	lr

0802201a <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 802201a:	f04f 30ff 	mov.w	r0, #4294967295
 802201e:	4770      	bx	lr

08022020 <RFW_Init>:
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
#endif
}
 8022020:	f04f 30ff 	mov.w	r0, #4294967295
 8022024:	4770      	bx	lr

08022026 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8022026:	4770      	bx	lr

08022028 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 8022028:	2000      	movs	r0, #0
 802202a:	4770      	bx	lr

0802202c <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 802202c:	2000      	movs	r0, #0
 802202e:	4770      	bx	lr

08022030 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8022030:	4770      	bx	lr

08022032 <RFW_TransmitInit>:
    
    status= 0;
  }
#endif
  return status;
}
 8022032:	f04f 30ff 	mov.w	r0, #4294967295
 8022036:	4770      	bx	lr

08022038 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8022038:	f04f 30ff 	mov.w	r0, #4294967295
 802203c:	4770      	bx	lr

0802203e <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 802203e:	4770      	bx	lr

08022040 <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8022040:	4770      	bx	lr

08022042 <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8022042:	4770      	bx	lr

08022044 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8022044:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022046:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 802204a:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 802204c:	4b1b      	ldr	r3, [pc, #108]	; (80220bc <TRACE_AllocateBufer+0x78>)
 802204e:	8a5c      	ldrh	r4, [r3, #18]
 8022050:	8a1a      	ldrh	r2, [r3, #16]
 8022052:	4294      	cmp	r4, r2
 8022054:	d010      	beq.n	8022078 <TRACE_AllocateBufer+0x34>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8022056:	4294      	cmp	r4, r2
 8022058:	d91d      	bls.n	8022096 <TRACE_AllocateBufer+0x52>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 802205a:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 802205e:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8022060:	4283      	cmp	r3, r0
 8022062:	d81a      	bhi.n	802209a <TRACE_AllocateBufer+0x56>
 8022064:	4282      	cmp	r2, r0
 8022066:	d918      	bls.n	802209a <TRACE_AllocateBufer+0x56>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8022068:	4b14      	ldr	r3, [pc, #80]	; (80220bc <TRACE_AllocateBufer+0x78>)
 802206a:	2601      	movs	r6, #1
 802206c:	709e      	strb	r6, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 802206e:	801c      	strh	r4, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8022070:	2400      	movs	r4, #0
 8022072:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8022074:	4613      	mov	r3, r2
 8022076:	e010      	b.n	802209a <TRACE_AllocateBufer+0x56>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8022078:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 802207c:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 802207e:	4298      	cmp	r0, r3
 8022080:	d30b      	bcc.n	802209a <TRACE_AllocateBufer+0x56>
 8022082:	4282      	cmp	r2, r0
 8022084:	d909      	bls.n	802209a <TRACE_AllocateBufer+0x56>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8022086:	4b0d      	ldr	r3, [pc, #52]	; (80220bc <TRACE_AllocateBufer+0x78>)
 8022088:	2601      	movs	r6, #1
 802208a:	709e      	strb	r6, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 802208c:	801c      	strh	r4, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 802208e:	2400      	movs	r4, #0
 8022090:	825c      	strh	r4, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8022092:	4613      	mov	r3, r2
 8022094:	e001      	b.n	802209a <TRACE_AllocateBufer+0x56>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8022096:	1b13      	subs	r3, r2, r4
 8022098:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 802209a:	4283      	cmp	r3, r0
 802209c:	d90b      	bls.n	80220b6 <TRACE_AllocateBufer+0x72>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 802209e:	4a07      	ldr	r2, [pc, #28]	; (80220bc <TRACE_AllocateBufer+0x78>)
 80220a0:	8a53      	ldrh	r3, [r2, #18]
 80220a2:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80220a4:	4403      	add	r3, r0
 80220a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80220aa:	8253      	strh	r3, [r2, #18]
    ret = 0;
 80220ac:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80220ae:	f385 8810 	msr	PRIMASK, r5
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 80220b2:	bc70      	pop	{r4, r5, r6}
 80220b4:	4770      	bx	lr
  int16_t ret = -1;
 80220b6:	f04f 30ff 	mov.w	r0, #4294967295
 80220ba:	e7f8      	b.n	80220ae <TRACE_AllocateBufer+0x6a>
 80220bc:	200020b4 	.word	0x200020b4

080220c0 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80220c0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80220c4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80220c6:	4a03      	ldr	r2, [pc, #12]	; (80220d4 <TRACE_Lock+0x14>)
 80220c8:	8ad3      	ldrh	r3, [r2, #22]
 80220ca:	3301      	adds	r3, #1
 80220cc:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80220ce:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80220d2:	4770      	bx	lr
 80220d4:	200020b4 	.word	0x200020b4

080220d8 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80220d8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80220dc:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80220de:	4a03      	ldr	r2, [pc, #12]	; (80220ec <TRACE_UnLock+0x14>)
 80220e0:	8ad3      	ldrh	r3, [r2, #22]
 80220e2:	3b01      	subs	r3, #1
 80220e4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80220e6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80220ea:	4770      	bx	lr
 80220ec:	200020b4 	.word	0x200020b4

080220f0 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80220f0:	4b02      	ldr	r3, [pc, #8]	; (80220fc <TRACE_IsLocked+0xc>)
 80220f2:	8ad8      	ldrh	r0, [r3, #22]
}
 80220f4:	3800      	subs	r0, #0
 80220f6:	bf18      	it	ne
 80220f8:	2001      	movne	r0, #1
 80220fa:	4770      	bx	lr
 80220fc:	200020b4 	.word	0x200020b4

08022100 <UTIL_ADV_TRACE_Init>:
{
 8022100:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8022102:	2218      	movs	r2, #24
 8022104:	2100      	movs	r1, #0
 8022106:	4807      	ldr	r0, [pc, #28]	; (8022124 <UTIL_ADV_TRACE_Init+0x24>)
 8022108:	f000 f9a6 	bl	8022458 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 802210c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8022110:	2100      	movs	r1, #0
 8022112:	4805      	ldr	r0, [pc, #20]	; (8022128 <UTIL_ADV_TRACE_Init+0x28>)
 8022114:	f000 f9a0 	bl	8022458 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8022118:	4b04      	ldr	r3, [pc, #16]	; (802212c <UTIL_ADV_TRACE_Init+0x2c>)
 802211a:	681b      	ldr	r3, [r3, #0]
 802211c:	4804      	ldr	r0, [pc, #16]	; (8022130 <UTIL_ADV_TRACE_Init+0x30>)
 802211e:	4798      	blx	r3
}
 8022120:	bd08      	pop	{r3, pc}
 8022122:	bf00      	nop
 8022124:	200020b4 	.word	0x200020b4
 8022128:	20001cb4 	.word	0x20001cb4
 802212c:	08024e18 	.word	0x08024e18
 8022130:	080222e5 	.word	0x080222e5

08022134 <UTIL_ADV_TRACE_IsBufferEmpty>:
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8022134:	4b04      	ldr	r3, [pc, #16]	; (8022148 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>)
 8022136:	8a5a      	ldrh	r2, [r3, #18]
 8022138:	8a1b      	ldrh	r3, [r3, #16]
 802213a:	429a      	cmp	r2, r3
 802213c:	d001      	beq.n	8022142 <UTIL_ADV_TRACE_IsBufferEmpty+0xe>
  return 0;
 802213e:	2000      	movs	r0, #0
 8022140:	4770      	bx	lr
    return 1;
 8022142:	2001      	movs	r0, #1
}
 8022144:	4770      	bx	lr
 8022146:	bf00      	nop
 8022148:	200020b4 	.word	0x200020b4

0802214c <UTIL_ADV_TRACE_StartRxProcess>:
{
 802214c:	b508      	push	{r3, lr}
  return UTIL_TraceDriver.StartRx(UserCallback);
 802214e:	4b02      	ldr	r3, [pc, #8]	; (8022158 <UTIL_ADV_TRACE_StartRxProcess+0xc>)
 8022150:	689b      	ldr	r3, [r3, #8]
 8022152:	4798      	blx	r3
}
 8022154:	bd08      	pop	{r3, pc}
 8022156:	bf00      	nop
 8022158:	08024e18 	.word	0x08024e18

0802215c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 802215c:	4b01      	ldr	r3, [pc, #4]	; (8022164 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 802215e:	6058      	str	r0, [r3, #4]
}
 8022160:	4770      	bx	lr
 8022162:	bf00      	nop
 8022164:	200020b4 	.word	0x200020b4

08022168 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8022168:	4b01      	ldr	r3, [pc, #4]	; (8022170 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 802216a:	7218      	strb	r0, [r3, #8]
}
 802216c:	4770      	bx	lr
 802216e:	bf00      	nop
 8022170:	200020b4 	.word	0x200020b4

08022174 <UTIL_ADV_TRACE_GetVerboseLevel>:
}
 8022174:	4b01      	ldr	r3, [pc, #4]	; (802217c <UTIL_ADV_TRACE_GetVerboseLevel+0x8>)
 8022176:	7a18      	ldrb	r0, [r3, #8]
 8022178:	4770      	bx	lr
 802217a:	bf00      	nop
 802217c:	200020b4 	.word	0x200020b4

08022180 <TRACE_Send>:
{
 8022180:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022182:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8022186:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8022188:	f7ff ffb2 	bl	80220f0 <TRACE_IsLocked>
 802218c:	b118      	cbz	r0, 8022196 <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802218e:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8022192:	2000      	movs	r0, #0
}
 8022194:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8022196:	f7ff ff93 	bl	80220c0 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 802219a:	4b1d      	ldr	r3, [pc, #116]	; (8022210 <TRACE_Send+0x90>)
 802219c:	8a1a      	ldrh	r2, [r3, #16]
 802219e:	8a5b      	ldrh	r3, [r3, #18]
 80221a0:	429a      	cmp	r2, r3
 80221a2:	d02e      	beq.n	8022202 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80221a4:	491a      	ldr	r1, [pc, #104]	; (8022210 <TRACE_Send+0x90>)
 80221a6:	7889      	ldrb	r1, [r1, #2]
 80221a8:	2901      	cmp	r1, #1
 80221aa:	d017      	beq.n	80221dc <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80221ac:	4a18      	ldr	r2, [pc, #96]	; (8022210 <TRACE_Send+0x90>)
 80221ae:	7892      	ldrb	r2, [r2, #2]
 80221b0:	b932      	cbnz	r2, 80221c0 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80221b2:	4a17      	ldr	r2, [pc, #92]	; (8022210 <TRACE_Send+0x90>)
 80221b4:	8a12      	ldrh	r2, [r2, #16]
 80221b6:	4293      	cmp	r3, r2
 80221b8:	d91e      	bls.n	80221f8 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80221ba:	1a9b      	subs	r3, r3, r2
 80221bc:	4a14      	ldr	r2, [pc, #80]	; (8022210 <TRACE_Send+0x90>)
 80221be:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80221c0:	4e13      	ldr	r6, [pc, #76]	; (8022210 <TRACE_Send+0x90>)
 80221c2:	8a33      	ldrh	r3, [r6, #16]
 80221c4:	4d13      	ldr	r5, [pc, #76]	; (8022214 <TRACE_Send+0x94>)
 80221c6:	441d      	add	r5, r3
 80221c8:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80221cc:	f7e5 f886 	bl	80072dc <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80221d0:	4b11      	ldr	r3, [pc, #68]	; (8022218 <TRACE_Send+0x98>)
 80221d2:	68db      	ldr	r3, [r3, #12]
 80221d4:	8ab1      	ldrh	r1, [r6, #20]
 80221d6:	4628      	mov	r0, r5
 80221d8:	4798      	blx	r3
 80221da:	e7db      	b.n	8022194 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80221dc:	480c      	ldr	r0, [pc, #48]	; (8022210 <TRACE_Send+0x90>)
 80221de:	8801      	ldrh	r1, [r0, #0]
 80221e0:	1a8a      	subs	r2, r1, r2
 80221e2:	b292      	uxth	r2, r2
 80221e4:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80221e6:	2102      	movs	r1, #2
 80221e8:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80221ea:	2100      	movs	r1, #0
 80221ec:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80221ee:	2a00      	cmp	r2, #0
 80221f0:	d1dc      	bne.n	80221ac <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80221f2:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80221f4:	8201      	strh	r1, [r0, #16]
 80221f6:	e7d9      	b.n	80221ac <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80221f8:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80221fc:	4a04      	ldr	r2, [pc, #16]	; (8022210 <TRACE_Send+0x90>)
 80221fe:	8293      	strh	r3, [r2, #20]
 8022200:	e7de      	b.n	80221c0 <TRACE_Send+0x40>
      TRACE_UnLock();
 8022202:	f7ff ff69 	bl	80220d8 <TRACE_UnLock>
 8022206:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 802220a:	2000      	movs	r0, #0
}
 802220c:	e7c2      	b.n	8022194 <TRACE_Send+0x14>
 802220e:	bf00      	nop
 8022210:	200020b4 	.word	0x200020b4
 8022214:	20001cb4 	.word	0x20001cb4
 8022218:	08024e18 	.word	0x08024e18

0802221c <UTIL_ADV_TRACE_COND_FSend>:
{
 802221c:	b408      	push	{r3}
 802221e:	b530      	push	{r4, r5, lr}
 8022220:	b086      	sub	sp, #24
 8022222:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8022224:	2300      	movs	r3, #0
 8022226:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 802222a:	4b2b      	ldr	r3, [pc, #172]	; (80222d8 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 802222c:	7a1b      	ldrb	r3, [r3, #8]
 802222e:	4283      	cmp	r3, r0
 8022230:	d34c      	bcc.n	80222cc <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8022232:	4b29      	ldr	r3, [pc, #164]	; (80222d8 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8022234:	68db      	ldr	r3, [r3, #12]
 8022236:	ea31 0303 	bics.w	r3, r1, r3
 802223a:	d14a      	bne.n	80222d2 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 802223c:	4b26      	ldr	r3, [pc, #152]	; (80222d8 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 802223e:	685b      	ldr	r3, [r3, #4]
 8022240:	b123      	cbz	r3, 802224c <UTIL_ADV_TRACE_COND_FSend+0x30>
 8022242:	b11a      	cbz	r2, 802224c <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8022244:	f10d 0102 	add.w	r1, sp, #2
 8022248:	a801      	add	r0, sp, #4
 802224a:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 802224c:	ab0a      	add	r3, sp, #40	; 0x28
 802224e:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8022250:	4622      	mov	r2, r4
 8022252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8022256:	4821      	ldr	r0, [pc, #132]	; (80222dc <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8022258:	f000 fff2 	bl	8023240 <tiny_vsnprintf_like>
 802225c:	b285      	uxth	r5, r0
  TRACE_Lock();
 802225e:	f7ff ff2f 	bl	80220c0 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8022262:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8022266:	4428      	add	r0, r5
 8022268:	4669      	mov	r1, sp
 802226a:	b280      	uxth	r0, r0
 802226c:	f7ff feea 	bl	8022044 <TRACE_AllocateBufer>
 8022270:	f1b0 3fff 	cmp.w	r0, #4294967295
 8022274:	d025      	beq.n	80222c2 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8022276:	2300      	movs	r3, #0
 8022278:	e00c      	b.n	8022294 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 802227a:	f8bd 2000 	ldrh.w	r2, [sp]
 802227e:	a906      	add	r1, sp, #24
 8022280:	4419      	add	r1, r3
 8022282:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8022286:	4916      	ldr	r1, [pc, #88]	; (80222e0 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8022288:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 802228a:	3201      	adds	r2, #1
 802228c:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8022290:	3301      	adds	r3, #1
 8022292:	b29b      	uxth	r3, r3
 8022294:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8022298:	429a      	cmp	r2, r3
 802229a:	d8ee      	bhi.n	802227a <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 802229c:	f8bd 0000 	ldrh.w	r0, [sp]
 80222a0:	9b05      	ldr	r3, [sp, #20]
 80222a2:	4622      	mov	r2, r4
 80222a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80222a8:	4c0d      	ldr	r4, [pc, #52]	; (80222e0 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80222aa:	4420      	add	r0, r4
 80222ac:	f000 ffc8 	bl	8023240 <tiny_vsnprintf_like>
    TRACE_UnLock();
 80222b0:	f7ff ff12 	bl	80220d8 <TRACE_UnLock>
    return TRACE_Send();
 80222b4:	f7ff ff64 	bl	8022180 <TRACE_Send>
}
 80222b8:	b006      	add	sp, #24
 80222ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80222be:	b001      	add	sp, #4
 80222c0:	4770      	bx	lr
  TRACE_UnLock();
 80222c2:	f7ff ff09 	bl	80220d8 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80222c6:	f06f 0002 	mvn.w	r0, #2
 80222ca:	e7f5      	b.n	80222b8 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 80222cc:	f06f 0004 	mvn.w	r0, #4
 80222d0:	e7f2      	b.n	80222b8 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80222d2:	f06f 0005 	mvn.w	r0, #5
 80222d6:	e7ef      	b.n	80222b8 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 80222d8:	200020b4 	.word	0x200020b4
 80222dc:	200020cc 	.word	0x200020cc
 80222e0:	20001cb4 	.word	0x20001cb4

080222e4 <TRACE_TxCpltCallback>:
{
 80222e4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80222e6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80222ea:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 80222ec:	4b25      	ldr	r3, [pc, #148]	; (8022384 <TRACE_TxCpltCallback+0xa0>)
 80222ee:	789b      	ldrb	r3, [r3, #2]
 80222f0:	2b02      	cmp	r3, #2
 80222f2:	d016      	beq.n	8022322 <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 80222f4:	4a23      	ldr	r2, [pc, #140]	; (8022384 <TRACE_TxCpltCallback+0xa0>)
 80222f6:	8a13      	ldrh	r3, [r2, #16]
 80222f8:	8a90      	ldrh	r0, [r2, #20]
 80222fa:	4403      	add	r3, r0
 80222fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8022300:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8022302:	4b20      	ldr	r3, [pc, #128]	; (8022384 <TRACE_TxCpltCallback+0xa0>)
 8022304:	8a1a      	ldrh	r2, [r3, #16]
 8022306:	8a5b      	ldrh	r3, [r3, #18]
 8022308:	429a      	cmp	r2, r3
 802230a:	d003      	beq.n	8022314 <TRACE_TxCpltCallback+0x30>
 802230c:	481d      	ldr	r0, [pc, #116]	; (8022384 <TRACE_TxCpltCallback+0xa0>)
 802230e:	8ac0      	ldrh	r0, [r0, #22]
 8022310:	2801      	cmp	r0, #1
 8022312:	d00b      	beq.n	802232c <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022314:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8022318:	f7e4 ffe6 	bl	80072e8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 802231c:	f7ff fedc 	bl	80220d8 <TRACE_UnLock>
}
 8022320:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8022322:	4b18      	ldr	r3, [pc, #96]	; (8022384 <TRACE_TxCpltCallback+0xa0>)
 8022324:	2200      	movs	r2, #0
 8022326:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8022328:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 802232a:	e7ea      	b.n	8022302 <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 802232c:	4815      	ldr	r0, [pc, #84]	; (8022384 <TRACE_TxCpltCallback+0xa0>)
 802232e:	7880      	ldrb	r0, [r0, #2]
 8022330:	2801      	cmp	r0, #1
 8022332:	d014      	beq.n	802235e <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8022334:	4a13      	ldr	r2, [pc, #76]	; (8022384 <TRACE_TxCpltCallback+0xa0>)
 8022336:	7892      	ldrb	r2, [r2, #2]
 8022338:	b932      	cbnz	r2, 8022348 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 802233a:	4a12      	ldr	r2, [pc, #72]	; (8022384 <TRACE_TxCpltCallback+0xa0>)
 802233c:	8a12      	ldrh	r2, [r2, #16]
 802233e:	4293      	cmp	r3, r2
 8022340:	d91b      	bls.n	802237a <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8022342:	1a9b      	subs	r3, r3, r2
 8022344:	4a0f      	ldr	r2, [pc, #60]	; (8022384 <TRACE_TxCpltCallback+0xa0>)
 8022346:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8022348:	4b0e      	ldr	r3, [pc, #56]	; (8022384 <TRACE_TxCpltCallback+0xa0>)
 802234a:	8a1a      	ldrh	r2, [r3, #16]
 802234c:	480e      	ldr	r0, [pc, #56]	; (8022388 <TRACE_TxCpltCallback+0xa4>)
 802234e:	4410      	add	r0, r2
 8022350:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8022354:	4a0d      	ldr	r2, [pc, #52]	; (802238c <TRACE_TxCpltCallback+0xa8>)
 8022356:	68d2      	ldr	r2, [r2, #12]
 8022358:	8a99      	ldrh	r1, [r3, #20]
 802235a:	4790      	blx	r2
 802235c:	e7e0      	b.n	8022320 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 802235e:	4c09      	ldr	r4, [pc, #36]	; (8022384 <TRACE_TxCpltCallback+0xa0>)
 8022360:	8820      	ldrh	r0, [r4, #0]
 8022362:	1a82      	subs	r2, r0, r2
 8022364:	b292      	uxth	r2, r2
 8022366:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8022368:	2002      	movs	r0, #2
 802236a:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 802236c:	2000      	movs	r0, #0
 802236e:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8022370:	2a00      	cmp	r2, #0
 8022372:	d1df      	bne.n	8022334 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8022374:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8022376:	8220      	strh	r0, [r4, #16]
 8022378:	e7dc      	b.n	8022334 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 802237a:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 802237e:	4a01      	ldr	r2, [pc, #4]	; (8022384 <TRACE_TxCpltCallback+0xa0>)
 8022380:	8293      	strh	r3, [r2, #20]
 8022382:	e7e1      	b.n	8022348 <TRACE_TxCpltCallback+0x64>
 8022384:	200020b4 	.word	0x200020b4
 8022388:	20001cb4 	.word	0x20001cb4
 802238c:	08024e18 	.word	0x08024e18

08022390 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8022390:	2300      	movs	r3, #0
 8022392:	4a02      	ldr	r2, [pc, #8]	; (802239c <UTIL_LPM_Init+0xc>)
 8022394:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8022396:	4a02      	ldr	r2, [pc, #8]	; (80223a0 <UTIL_LPM_Init+0x10>)
 8022398:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 802239a:	4770      	bx	lr
 802239c:	200022d0 	.word	0x200022d0
 80223a0:	200022cc 	.word	0x200022cc

080223a4 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80223a4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80223a8:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80223aa:	b141      	cbz	r1, 80223be <UTIL_LPM_SetStopMode+0x1a>
 80223ac:	2901      	cmp	r1, #1
 80223ae:	d103      	bne.n	80223b8 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80223b0:	4906      	ldr	r1, [pc, #24]	; (80223cc <UTIL_LPM_SetStopMode+0x28>)
 80223b2:	680a      	ldr	r2, [r1, #0]
 80223b4:	4310      	orrs	r0, r2
 80223b6:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80223b8:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80223bc:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 80223be:	4903      	ldr	r1, [pc, #12]	; (80223cc <UTIL_LPM_SetStopMode+0x28>)
 80223c0:	680a      	ldr	r2, [r1, #0]
 80223c2:	ea22 0000 	bic.w	r0, r2, r0
 80223c6:	6008      	str	r0, [r1, #0]
      break;
 80223c8:	e7f6      	b.n	80223b8 <UTIL_LPM_SetStopMode+0x14>
 80223ca:	bf00      	nop
 80223cc:	200022d0 	.word	0x200022d0

080223d0 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80223d0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80223d4:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80223d6:	b141      	cbz	r1, 80223ea <UTIL_LPM_SetOffMode+0x1a>
 80223d8:	2901      	cmp	r1, #1
 80223da:	d103      	bne.n	80223e4 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80223dc:	4906      	ldr	r1, [pc, #24]	; (80223f8 <UTIL_LPM_SetOffMode+0x28>)
 80223de:	680a      	ldr	r2, [r1, #0]
 80223e0:	4310      	orrs	r0, r2
 80223e2:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80223e4:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80223e8:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 80223ea:	4903      	ldr	r1, [pc, #12]	; (80223f8 <UTIL_LPM_SetOffMode+0x28>)
 80223ec:	680a      	ldr	r2, [r1, #0]
 80223ee:	ea22 0000 	bic.w	r0, r2, r0
 80223f2:	6008      	str	r0, [r1, #0]
      break;
 80223f4:	e7f6      	b.n	80223e4 <UTIL_LPM_SetOffMode+0x14>
 80223f6:	bf00      	nop
 80223f8:	200022cc 	.word	0x200022cc

080223fc <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80223fc:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80223fe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8022402:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8022404:	4b0c      	ldr	r3, [pc, #48]	; (8022438 <UTIL_LPM_EnterLowPower+0x3c>)
 8022406:	681b      	ldr	r3, [r3, #0]
 8022408:	b13b      	cbz	r3, 802241a <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 802240a:	4d0c      	ldr	r5, [pc, #48]	; (802243c <UTIL_LPM_EnterLowPower+0x40>)
 802240c:	682b      	ldr	r3, [r5, #0]
 802240e:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8022410:	686b      	ldr	r3, [r5, #4]
 8022412:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022414:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8022418:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 802241a:	4b09      	ldr	r3, [pc, #36]	; (8022440 <UTIL_LPM_EnterLowPower+0x44>)
 802241c:	681b      	ldr	r3, [r3, #0]
 802241e:	b12b      	cbz	r3, 802242c <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8022420:	4d06      	ldr	r5, [pc, #24]	; (802243c <UTIL_LPM_EnterLowPower+0x40>)
 8022422:	68ab      	ldr	r3, [r5, #8]
 8022424:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8022426:	68eb      	ldr	r3, [r5, #12]
 8022428:	4798      	blx	r3
 802242a:	e7f3      	b.n	8022414 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 802242c:	4d03      	ldr	r5, [pc, #12]	; (802243c <UTIL_LPM_EnterLowPower+0x40>)
 802242e:	692b      	ldr	r3, [r5, #16]
 8022430:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8022432:	696b      	ldr	r3, [r5, #20]
 8022434:	4798      	blx	r3
 8022436:	e7ed      	b.n	8022414 <UTIL_LPM_EnterLowPower+0x18>
 8022438:	200022d0 	.word	0x200022d0
 802243c:	08024cc0 	.word	0x08024cc0
 8022440:	200022cc 	.word	0x200022cc

08022444 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8022444:	1e53      	subs	r3, r2, #1
 8022446:	b29b      	uxth	r3, r3
 8022448:	b12a      	cbz	r2, 8022456 <UTIL_MEM_cpy_8+0x12>
    {
        *dst8++ = *src8++;
 802244a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802244e:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8022452:	461a      	mov	r2, r3
 8022454:	e7f6      	b.n	8022444 <UTIL_MEM_cpy_8>
    }
}
 8022456:	4770      	bx	lr

08022458 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8022458:	1e53      	subs	r3, r2, #1
 802245a:	b29b      	uxth	r3, r3
 802245c:	b11a      	cbz	r2, 8022466 <UTIL_MEM_set_8+0xe>
  {
    *dst8++ = value;
 802245e:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8022462:	461a      	mov	r2, r3
 8022464:	e7f8      	b.n	8022458 <UTIL_MEM_set_8>
  }
}
 8022466:	4770      	bx	lr

08022468 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8022468:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802246a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 802246e:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8022470:	4a06      	ldr	r2, [pc, #24]	; (802248c <UTIL_SEQ_SetTask+0x24>)
 8022472:	6813      	ldr	r3, [r2, #0]
 8022474:	4303      	orrs	r3, r0
 8022476:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8022478:	4a05      	ldr	r2, [pc, #20]	; (8022490 <UTIL_SEQ_SetTask+0x28>)
 802247a:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 802247e:	4318      	orrs	r0, r3
 8022480:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022484:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8022488:	bc10      	pop	{r4}
 802248a:	4770      	bx	lr
 802248c:	20002370 	.word	0x20002370
 8022490:	20002360 	.word	0x20002360

08022494 <UTIL_SEQ_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022494:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8022498:	b672      	cpsid	i

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  EvtSet |= EvtId_bm;
 802249a:	4a03      	ldr	r2, [pc, #12]	; (80224a8 <UTIL_SEQ_SetEvt+0x14>)
 802249c:	6813      	ldr	r3, [r2, #0]
 802249e:	4303      	orrs	r3, r0
 80224a0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80224a2:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80224a6:	4770      	bx	lr
 80224a8:	200022d8 	.word	0x200022d8

080224ac <UTIL_SEQ_ClrEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80224ac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80224b0:	b672      	cpsid	i

void UTIL_SEQ_ClrEvt( UTIL_SEQ_bm_t EvtId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  EvtSet &= (~EvtId_bm);
 80224b2:	4a04      	ldr	r2, [pc, #16]	; (80224c4 <UTIL_SEQ_ClrEvt+0x18>)
 80224b4:	6813      	ldr	r3, [r2, #0]
 80224b6:	ea23 0300 	bic.w	r3, r3, r0
 80224ba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80224bc:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80224c0:	4770      	bx	lr
 80224c2:	bf00      	nop
 80224c4:	200022d8 	.word	0x200022d8

080224c8 <UTIL_SEQ_PreIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80224c8:	4770      	bx	lr

080224ca <UTIL_SEQ_PostIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80224ca:	4770      	bx	lr

080224cc <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80224cc:	0c03      	lsrs	r3, r0, #16
 80224ce:	041b      	lsls	r3, r3, #16
 80224d0:	b9b3      	cbnz	r3, 8022500 <SEQ_BitPosition+0x34>
 80224d2:	0400      	lsls	r0, r0, #16
 80224d4:	2310      	movs	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80224d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80224da:	d102      	bne.n	80224e2 <SEQ_BitPosition+0x16>
 80224dc:	3308      	adds	r3, #8
 80224de:	b2db      	uxtb	r3, r3
 80224e0:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80224e2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80224e6:	d102      	bne.n	80224ee <SEQ_BitPosition+0x22>
 80224e8:	3304      	adds	r3, #4
 80224ea:	b2db      	uxtb	r3, r3
 80224ec:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80224ee:	0f00      	lsrs	r0, r0, #28
 80224f0:	4a04      	ldr	r2, [pc, #16]	; (8022504 <SEQ_BitPosition+0x38>)
 80224f2:	5c10      	ldrb	r0, [r2, r0]
 80224f4:	4418      	add	r0, r3
 80224f6:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 80224f8:	f1c0 001f 	rsb	r0, r0, #31
}
 80224fc:	b2c0      	uxtb	r0, r0
 80224fe:	4770      	bx	lr
  uint8_t n = 0U;
 8022500:	2300      	movs	r3, #0
 8022502:	e7e8      	b.n	80224d6 <SEQ_BitPosition+0xa>
 8022504:	08028ab8 	.word	0x08028ab8

08022508 <UTIL_SEQ_Run>:
{
 8022508:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 802250a:	4b3b      	ldr	r3, [pc, #236]	; (80225f8 <UTIL_SEQ_Run+0xf0>)
 802250c:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 802250e:	4020      	ands	r0, r4
 8022510:	6018      	str	r0, [r3, #0]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8022512:	e012      	b.n	802253a <UTIL_SEQ_Run+0x32>
      counter++;
 8022514:	3301      	adds	r3, #1
 8022516:	e01f      	b.n	8022558 <UTIL_SEQ_Run+0x50>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8022518:	3b01      	subs	r3, #1
 802251a:	4938      	ldr	r1, [pc, #224]	; (80225fc <UTIL_SEQ_Run+0xf4>)
 802251c:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8022520:	4002      	ands	r2, r0
 8022522:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8022526:	2b00      	cmp	r3, #0
 8022528:	d1f6      	bne.n	8022518 <UTIL_SEQ_Run+0x10>
 802252a:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 802252e:	4b34      	ldr	r3, [pc, #208]	; (8022600 <UTIL_SEQ_Run+0xf8>)
 8022530:	681a      	ldr	r2, [r3, #0]
 8022532:	4b34      	ldr	r3, [pc, #208]	; (8022604 <UTIL_SEQ_Run+0xfc>)
 8022534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022538:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 802253a:	4b33      	ldr	r3, [pc, #204]	; (8022608 <UTIL_SEQ_Run+0x100>)
 802253c:	6819      	ldr	r1, [r3, #0]
 802253e:	4b33      	ldr	r3, [pc, #204]	; (802260c <UTIL_SEQ_Run+0x104>)
 8022540:	681b      	ldr	r3, [r3, #0]
 8022542:	400b      	ands	r3, r1
 8022544:	4a2c      	ldr	r2, [pc, #176]	; (80225f8 <UTIL_SEQ_Run+0xf0>)
 8022546:	6812      	ldr	r2, [r2, #0]
 8022548:	4213      	tst	r3, r2
 802254a:	d033      	beq.n	80225b4 <UTIL_SEQ_Run+0xac>
 802254c:	4b30      	ldr	r3, [pc, #192]	; (8022610 <UTIL_SEQ_Run+0x108>)
 802254e:	681b      	ldr	r3, [r3, #0]
 8022550:	4830      	ldr	r0, [pc, #192]	; (8022614 <UTIL_SEQ_Run+0x10c>)
 8022552:	6800      	ldr	r0, [r0, #0]
 8022554:	4003      	ands	r3, r0
 8022556:	d12d      	bne.n	80225b4 <UTIL_SEQ_Run+0xac>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8022558:	4828      	ldr	r0, [pc, #160]	; (80225fc <UTIL_SEQ_Run+0xf4>)
 802255a:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 802255e:	4008      	ands	r0, r1
 8022560:	4010      	ands	r0, r2
 8022562:	d0d7      	beq.n	8022514 <UTIL_SEQ_Run+0xc>
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8022564:	4a25      	ldr	r2, [pc, #148]	; (80225fc <UTIL_SEQ_Run+0xf4>)
 8022566:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802256a:	6852      	ldr	r2, [r2, #4]
 802256c:	4210      	tst	r0, r2
 802256e:	d105      	bne.n	802257c <UTIL_SEQ_Run+0x74>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8022570:	4a22      	ldr	r2, [pc, #136]	; (80225fc <UTIL_SEQ_Run+0xf4>)
 8022572:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8022576:	f04f 31ff 	mov.w	r1, #4294967295
 802257a:	6051      	str	r1, [r2, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 802257c:	4d1f      	ldr	r5, [pc, #124]	; (80225fc <UTIL_SEQ_Run+0xf4>)
 802257e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8022582:	686e      	ldr	r6, [r5, #4]
 8022584:	4030      	ands	r0, r6
 8022586:	f7ff ffa1 	bl	80224cc <SEQ_BitPosition>
 802258a:	4a1d      	ldr	r2, [pc, #116]	; (8022600 <UTIL_SEQ_Run+0xf8>)
 802258c:	6010      	str	r0, [r2, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 802258e:	2301      	movs	r3, #1
 8022590:	fa03 f000 	lsl.w	r0, r3, r0
 8022594:	ea26 0000 	bic.w	r0, r6, r0
 8022598:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802259a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 802259e:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 80225a0:	6812      	ldr	r2, [r2, #0]
 80225a2:	4093      	lsls	r3, r2
 80225a4:	43d8      	mvns	r0, r3
 80225a6:	4919      	ldr	r1, [pc, #100]	; (802260c <UTIL_SEQ_Run+0x104>)
 80225a8:	680a      	ldr	r2, [r1, #0]
 80225aa:	ea22 0303 	bic.w	r3, r2, r3
 80225ae:	600b      	str	r3, [r1, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80225b0:	2302      	movs	r3, #2
 80225b2:	e7b8      	b.n	8022526 <UTIL_SEQ_Run+0x1e>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80225b4:	4b12      	ldr	r3, [pc, #72]	; (8022600 <UTIL_SEQ_Run+0xf8>)
 80225b6:	f04f 32ff 	mov.w	r2, #4294967295
 80225ba:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80225bc:	f7ff ff84 	bl	80224c8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80225c0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80225c4:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 80225c6:	4b11      	ldr	r3, [pc, #68]	; (802260c <UTIL_SEQ_Run+0x104>)
 80225c8:	681b      	ldr	r3, [r3, #0]
 80225ca:	4a0f      	ldr	r2, [pc, #60]	; (8022608 <UTIL_SEQ_Run+0x100>)
 80225cc:	6812      	ldr	r2, [r2, #0]
 80225ce:	4013      	ands	r3, r2
 80225d0:	4a09      	ldr	r2, [pc, #36]	; (80225f8 <UTIL_SEQ_Run+0xf0>)
 80225d2:	6812      	ldr	r2, [r2, #0]
 80225d4:	4213      	tst	r3, r2
 80225d6:	d105      	bne.n	80225e4 <UTIL_SEQ_Run+0xdc>
 80225d8:	4b0d      	ldr	r3, [pc, #52]	; (8022610 <UTIL_SEQ_Run+0x108>)
 80225da:	681a      	ldr	r2, [r3, #0]
 80225dc:	4b0d      	ldr	r3, [pc, #52]	; (8022614 <UTIL_SEQ_Run+0x10c>)
 80225de:	681b      	ldr	r3, [r3, #0]
 80225e0:	421a      	tst	r2, r3
 80225e2:	d006      	beq.n	80225f2 <UTIL_SEQ_Run+0xea>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80225e4:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 80225e8:	f7ff ff6f 	bl	80224ca <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 80225ec:	4b02      	ldr	r3, [pc, #8]	; (80225f8 <UTIL_SEQ_Run+0xf0>)
 80225ee:	601c      	str	r4, [r3, #0]
}
 80225f0:	bd70      	pop	{r4, r5, r6, pc}
	UTIL_SEQ_Idle( );
 80225f2:	f7e4 fdf3 	bl	80071dc <UTIL_SEQ_Idle>
 80225f6:	e7f5      	b.n	80225e4 <UTIL_SEQ_Run+0xdc>
 80225f8:	20000204 	.word	0x20000204
 80225fc:	20002360 	.word	0x20002360
 8022600:	200022d4 	.word	0x200022d4
 8022604:	200022e0 	.word	0x200022e0
 8022608:	20000208 	.word	0x20000208
 802260c:	20002370 	.word	0x20002370
 8022610:	200022d8 	.word	0x200022d8
 8022614:	200022dc 	.word	0x200022dc

08022618 <UTIL_SEQ_EvtIdle>:
{
 8022618:	b508      	push	{r3, lr}
  UTIL_SEQ_Run(~TaskId_bm);
 802261a:	43c0      	mvns	r0, r0
 802261c:	f7ff ff74 	bl	8022508 <UTIL_SEQ_Run>
}
 8022620:	bd08      	pop	{r3, pc}
	...

08022624 <UTIL_SEQ_WaitEvt>:
{
 8022624:	b570      	push	{r4, r5, r6, lr}
  current_task_idx = CurrentTaskIdx;
 8022626:	4b0f      	ldr	r3, [pc, #60]	; (8022664 <UTIL_SEQ_WaitEvt+0x40>)
 8022628:	681e      	ldr	r6, [r3, #0]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 802262a:	f1b6 3fff 	cmp.w	r6, #4294967295
 802262e:	d00e      	beq.n	802264e <UTIL_SEQ_WaitEvt+0x2a>
    wait_task_idx = 1 << CurrentTaskIdx;
 8022630:	2401      	movs	r4, #1
 8022632:	40b4      	lsls	r4, r6
  event_waited_id_backup = EvtWaited;
 8022634:	4b0c      	ldr	r3, [pc, #48]	; (8022668 <UTIL_SEQ_WaitEvt+0x44>)
 8022636:	681d      	ldr	r5, [r3, #0]
  EvtWaited = EvtId_bm;
 8022638:	6018      	str	r0, [r3, #0]
  while ((EvtSet & EvtWaited) == 0U)
 802263a:	4b0c      	ldr	r3, [pc, #48]	; (802266c <UTIL_SEQ_WaitEvt+0x48>)
 802263c:	681b      	ldr	r3, [r3, #0]
 802263e:	4a0a      	ldr	r2, [pc, #40]	; (8022668 <UTIL_SEQ_WaitEvt+0x44>)
 8022640:	6811      	ldr	r1, [r2, #0]
 8022642:	420b      	tst	r3, r1
 8022644:	d105      	bne.n	8022652 <UTIL_SEQ_WaitEvt+0x2e>
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8022646:	4620      	mov	r0, r4
 8022648:	f7ff ffe6 	bl	8022618 <UTIL_SEQ_EvtIdle>
 802264c:	e7f5      	b.n	802263a <UTIL_SEQ_WaitEvt+0x16>
    wait_task_idx = 0;
 802264e:	2400      	movs	r4, #0
 8022650:	e7f0      	b.n	8022634 <UTIL_SEQ_WaitEvt+0x10>
  CurrentTaskIdx = current_task_idx;
 8022652:	4a04      	ldr	r2, [pc, #16]	; (8022664 <UTIL_SEQ_WaitEvt+0x40>)
 8022654:	6016      	str	r6, [r2, #0]
  EvtSet &= (~EvtWaited);
 8022656:	ea23 0101 	bic.w	r1, r3, r1
 802265a:	4b04      	ldr	r3, [pc, #16]	; (802266c <UTIL_SEQ_WaitEvt+0x48>)
 802265c:	6019      	str	r1, [r3, #0]
  EvtWaited = event_waited_id_backup;
 802265e:	4b02      	ldr	r3, [pc, #8]	; (8022668 <UTIL_SEQ_WaitEvt+0x44>)
 8022660:	601d      	str	r5, [r3, #0]
}
 8022662:	bd70      	pop	{r4, r5, r6, pc}
 8022664:	200022d4 	.word	0x200022d4
 8022668:	200022dc 	.word	0x200022dc
 802266c:	200022d8 	.word	0x200022d8

08022670 <UTIL_SEQ_RegTask>:
{
 8022670:	b538      	push	{r3, r4, r5, lr}
 8022672:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022674:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8022678:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 802267a:	f7ff ff27 	bl	80224cc <SEQ_BitPosition>
 802267e:	4b03      	ldr	r3, [pc, #12]	; (802268c <UTIL_SEQ_RegTask+0x1c>)
 8022680:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022684:	f385 8810 	msr	PRIMASK, r5
}
 8022688:	bd38      	pop	{r3, r4, r5, pc}
 802268a:	bf00      	nop
 802268c:	200022e0 	.word	0x200022e0

08022690 <CalendarDiv86400>:
  }
  return month;
}

static void CalendarDiv86400( uint32_t in, uint32_t* out, uint32_t* remainder )
{
 8022690:	b430      	push	{r4, r5}
#if 0
  *remainder = in % SECONDS_IN_1DAY;
  *out     = in / SECONDS_IN_1DAY;
#else
  uint32_t outTemp = 0;
  uint32_t divResult = DIV_APPROX_86400( in );
 8022692:	0c43      	lsrs	r3, r0, #17
 8022694:	eb03 4390 	add.w	r3, r3, r0, lsr #18
  uint32_t outTemp = 0;
 8022698:	2400      	movs	r4, #0

  while( divResult >=1 )
 802269a:	b13b      	cbz	r3, 80226ac <CalendarDiv86400+0x1c>
  {
    outTemp += divResult;
 802269c:	441c      	add	r4, r3
    in -= divResult * 86400;
 802269e:	4d09      	ldr	r5, [pc, #36]	; (80226c4 <CalendarDiv86400+0x34>)
 80226a0:	fb05 0013 	mls	r0, r5, r3, r0
    divResult= DIV_APPROX_86400( in );
 80226a4:	0c43      	lsrs	r3, r0, #17
 80226a6:	eb03 4390 	add.w	r3, r3, r0, lsr #18
 80226aa:	e7f6      	b.n	802269a <CalendarDiv86400+0xa>
  }
  if( in >= 86400 )
 80226ac:	4b06      	ldr	r3, [pc, #24]	; (80226c8 <CalendarDiv86400+0x38>)
 80226ae:	4298      	cmp	r0, r3
 80226b0:	d904      	bls.n	80226bc <CalendarDiv86400+0x2c>
  {
    outTemp += 1;
 80226b2:	3401      	adds	r4, #1
    in -= 86400;
 80226b4:	f5a0 30a8 	sub.w	r0, r0, #86016	; 0x15000
 80226b8:	f5a0 70c0 	sub.w	r0, r0, #384	; 0x180
  }

  *remainder = in;
 80226bc:	6010      	str	r0, [r2, #0]
  *out = outTemp;
 80226be:	600c      	str	r4, [r1, #0]
#endif
}
 80226c0:	bc30      	pop	{r4, r5}
 80226c2:	4770      	bx	lr
 80226c4:	00015180 	.word	0x00015180
 80226c8:	0001517f 	.word	0x0001517f

080226cc <CalendarDiv61>:

static uint32_t CalendarDiv61( uint32_t in )
{
 80226cc:	4602      	mov	r2, r0
#if 0
  return( in / 61 );
#else
  uint32_t outTemp = 0;
  uint32_t divResult = DIV_APPROX_61( in );
 80226ce:	4b0a      	ldr	r3, [pc, #40]	; (80226f8 <CalendarDiv61+0x2c>)
 80226d0:	fb03 f300 	mul.w	r3, r3, r0
 80226d4:	0d9b      	lsrs	r3, r3, #22
  uint32_t outTemp = 0;
 80226d6:	2000      	movs	r0, #0
  while( divResult >=1 )
 80226d8:	b153      	cbz	r3, 80226f0 <CalendarDiv61+0x24>
  {
    outTemp += divResult;
 80226da:	4418      	add	r0, r3
    in -= divResult * 61;
 80226dc:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 80226e0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80226e4:	1ad2      	subs	r2, r2, r3
    divResult = DIV_APPROX_61( in );
 80226e6:	4b04      	ldr	r3, [pc, #16]	; (80226f8 <CalendarDiv61+0x2c>)
 80226e8:	fb03 f302 	mul.w	r3, r3, r2
 80226ec:	0d9b      	lsrs	r3, r3, #22
 80226ee:	e7f3      	b.n	80226d8 <CalendarDiv61+0xc>
  }
  if( in >= 61 )
 80226f0:	2a3c      	cmp	r2, #60	; 0x3c
 80226f2:	d900      	bls.n	80226f6 <CalendarDiv61+0x2a>
  {
    outTemp += 1;
 80226f4:	3001      	adds	r0, #1
    in -= 61;
  }
  return outTemp;
#endif
}
 80226f6:	4770      	bx	lr
 80226f8:	00010c97 	.word	0x00010c97

080226fc <CalendarGetMonth>:
{
 80226fc:	b508      	push	{r3, lr}
  if( ( year % 4 ) == 0 )
 80226fe:	f011 0f03 	tst.w	r1, #3
 8022702:	d113      	bne.n	802272c <CalendarGetMonth+0x30>
    if( days < END_OF_FEBRUARY_LEAP )
 8022704:	283b      	cmp	r0, #59	; 0x3b
 8022706:	d907      	bls.n	8022718 <CalendarGetMonth+0x1c>
    else if( days < END_OF_JULY_LEAP )
 8022708:	28d4      	cmp	r0, #212	; 0xd4
 802270a:	d809      	bhi.n	8022720 <CalendarGetMonth+0x24>
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_LEAP ) * 2 ) + 2;
 802270c:	383c      	subs	r0, #60	; 0x3c
 802270e:	0040      	lsls	r0, r0, #1
 8022710:	f7ff ffdc 	bl	80226cc <CalendarDiv61>
 8022714:	3002      	adds	r0, #2
}
 8022716:	bd08      	pop	{r3, pc}
      month = CalendarDiv61( days * 2 );
 8022718:	0040      	lsls	r0, r0, #1
 802271a:	f7ff ffd7 	bl	80226cc <CalendarDiv61>
 802271e:	e7fa      	b.n	8022716 <CalendarGetMonth+0x1a>
      month = CalendarDiv61( ( days - END_OF_JULY_LEAP ) * 2 ) + 7;
 8022720:	38d5      	subs	r0, #213	; 0xd5
 8022722:	0040      	lsls	r0, r0, #1
 8022724:	f7ff ffd2 	bl	80226cc <CalendarDiv61>
 8022728:	3007      	adds	r0, #7
 802272a:	e7f4      	b.n	8022716 <CalendarGetMonth+0x1a>
    if( days < END_OF_FEBRUARY_NORM )
 802272c:	283a      	cmp	r0, #58	; 0x3a
 802272e:	d907      	bls.n	8022740 <CalendarGetMonth+0x44>
    else if( days < END_OF_JULY_NORM )
 8022730:	28d3      	cmp	r0, #211	; 0xd3
 8022732:	d809      	bhi.n	8022748 <CalendarGetMonth+0x4c>
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_NORM ) * 2 ) + 2;
 8022734:	383b      	subs	r0, #59	; 0x3b
 8022736:	0040      	lsls	r0, r0, #1
 8022738:	f7ff ffc8 	bl	80226cc <CalendarDiv61>
 802273c:	3002      	adds	r0, #2
 802273e:	e7ea      	b.n	8022716 <CalendarGetMonth+0x1a>
      month = CalendarDiv61( days * 2 );
 8022740:	0040      	lsls	r0, r0, #1
 8022742:	f7ff ffc3 	bl	80226cc <CalendarDiv61>
 8022746:	e7e6      	b.n	8022716 <CalendarGetMonth+0x1a>
      month = CalendarDiv61( ( days - END_OF_JULY_NORM ) * 2 ) + 7;
 8022748:	38d4      	subs	r0, #212	; 0xd4
 802274a:	0040      	lsls	r0, r0, #1
 802274c:	f7ff ffbe 	bl	80226cc <CalendarDiv61>
 8022750:	3007      	adds	r0, #7
  return month;
 8022752:	e7e0      	b.n	8022716 <CalendarGetMonth+0x1a>

08022754 <CalendarDiv60>:

static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder )
{
 8022754:	b410      	push	{r4}
#if 0
  *remainder = in % 60;
  *out     = in / 60;
#else
  uint32_t outTemp = 0;
  uint32_t divResult = DIV_APPROX_60( in );
 8022756:	f244 4344 	movw	r3, #17476	; 0x4444
 802275a:	fb03 f300 	mul.w	r3, r3, r0
 802275e:	0d1b      	lsrs	r3, r3, #20
  uint32_t outTemp = 0;
 8022760:	2400      	movs	r4, #0

  while( divResult >=1 )
 8022762:	b153      	cbz	r3, 802277a <CalendarDiv60+0x26>
  {
    outTemp += divResult;
 8022764:	441c      	add	r4, r3
    in -= divResult * 60;
 8022766:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 802276a:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    divResult = DIV_APPROX_60( in );
 802276e:	f244 4344 	movw	r3, #17476	; 0x4444
 8022772:	fb03 f300 	mul.w	r3, r3, r0
 8022776:	0d1b      	lsrs	r3, r3, #20
 8022778:	e7f3      	b.n	8022762 <CalendarDiv60+0xe>
  }
  if( in >= 60 )
 802277a:	283b      	cmp	r0, #59	; 0x3b
 802277c:	d901      	bls.n	8022782 <CalendarDiv60+0x2e>
  {
    outTemp += 1;
 802277e:	3401      	adds	r4, #1
    in -= 60;
 8022780:	383c      	subs	r0, #60	; 0x3c
  }
  *remainder = in;
 8022782:	6010      	str	r0, [r2, #0]
  *out = outTemp;
 8022784:	600c      	str	r4, [r1, #0]
#endif
}
 8022786:	bc10      	pop	{r4}
 8022788:	4770      	bx	lr

0802278a <SysTimeAdd>:
{
 802278a:	b082      	sub	sp, #8
 802278c:	b082      	sub	sp, #8
 802278e:	f10d 0c08 	add.w	ip, sp, #8
 8022792:	e90c 0006 	stmdb	ip, {r1, r2}
 8022796:	9303      	str	r3, [sp, #12]
  c.Seconds = a.Seconds + b.Seconds;
 8022798:	9a00      	ldr	r2, [sp, #0]
 802279a:	4413      	add	r3, r2
 802279c:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 802279e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80227a2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80227a6:	440a      	add	r2, r1
 80227a8:	b291      	uxth	r1, r2
 80227aa:	b212      	sxth	r2, r2
 80227ac:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 80227ae:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80227b2:	db04      	blt.n	80227be <SysTimeAdd+0x34>
    c.Seconds++;
 80227b4:	3301      	adds	r3, #1
 80227b6:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 80227b8:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80227bc:	8081      	strh	r1, [r0, #4]
}
 80227be:	b002      	add	sp, #8
 80227c0:	b002      	add	sp, #8
 80227c2:	4770      	bx	lr

080227c4 <SysTimeSub>:
{
 80227c4:	b082      	sub	sp, #8
 80227c6:	b082      	sub	sp, #8
 80227c8:	f10d 0c08 	add.w	ip, sp, #8
 80227cc:	e90c 0006 	stmdb	ip, {r1, r2}
 80227d0:	9303      	str	r3, [sp, #12]
  c.Seconds = a.Seconds - b.Seconds;
 80227d2:	9a00      	ldr	r2, [sp, #0]
 80227d4:	1ad3      	subs	r3, r2, r3
 80227d6:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80227d8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80227dc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80227e0:	1a52      	subs	r2, r2, r1
 80227e2:	b291      	uxth	r1, r2
 80227e4:	b212      	sxth	r2, r2
 80227e6:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 80227e8:	2a00      	cmp	r2, #0
 80227ea:	db02      	blt.n	80227f2 <SysTimeSub+0x2e>
}
 80227ec:	b002      	add	sp, #8
 80227ee:	b002      	add	sp, #8
 80227f0:	4770      	bx	lr
    c.Seconds--;
 80227f2:	3b01      	subs	r3, #1
 80227f4:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 80227f6:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80227fa:	8081      	strh	r1, [r0, #4]
  return c;
 80227fc:	e7f6      	b.n	80227ec <SysTimeSub+0x28>
	...

08022800 <SysTimeSet>:
{
 8022800:	b530      	push	{r4, r5, lr}
 8022802:	b089      	sub	sp, #36	; 0x24
 8022804:	ac02      	add	r4, sp, #8
 8022806:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 802280a:	2300      	movs	r3, #0
 802280c:	9304      	str	r3, [sp, #16]
 802280e:	f8ad 3014 	strh.w	r3, [sp, #20]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8022812:	4d0b      	ldr	r5, [pc, #44]	; (8022840 <SysTimeSet+0x40>)
 8022814:	692b      	ldr	r3, [r5, #16]
 8022816:	a805      	add	r0, sp, #20
 8022818:	4798      	blx	r3
 802281a:	4603      	mov	r3, r0
 802281c:	9004      	str	r0, [sp, #16]
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 802281e:	9a05      	ldr	r2, [sp, #20]
 8022820:	9200      	str	r2, [sp, #0]
 8022822:	e894 0006 	ldmia.w	r4, {r1, r2}
 8022826:	a806      	add	r0, sp, #24
 8022828:	f7ff ffcc 	bl	80227c4 <SysTimeSub>
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 802282c:	682b      	ldr	r3, [r5, #0]
 802282e:	9806      	ldr	r0, [sp, #24]
 8022830:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8022832:	68ab      	ldr	r3, [r5, #8]
 8022834:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8022838:	4798      	blx	r3
}
 802283a:	b009      	add	sp, #36	; 0x24
 802283c:	bd30      	pop	{r4, r5, pc}
 802283e:	bf00      	nop
 8022840:	08024dd8 	.word	0x08024dd8

08022844 <SysTimeGet>:
{
 8022844:	b530      	push	{r4, r5, lr}
 8022846:	b087      	sub	sp, #28
 8022848:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 802284a:	2300      	movs	r3, #0
 802284c:	9304      	str	r3, [sp, #16]
 802284e:	f8ad 3014 	strh.w	r3, [sp, #20]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8022852:	4d0b      	ldr	r5, [pc, #44]	; (8022880 <SysTimeGet+0x3c>)
 8022854:	692b      	ldr	r3, [r5, #16]
 8022856:	a805      	add	r0, sp, #20
 8022858:	4798      	blx	r3
 802285a:	9004      	str	r0, [sp, #16]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 802285c:	68eb      	ldr	r3, [r5, #12]
 802285e:	4798      	blx	r3
 8022860:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8022864:	686b      	ldr	r3, [r5, #4]
 8022866:	4798      	blx	r3
 8022868:	9002      	str	r0, [sp, #8]
  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 802286a:	9b05      	ldr	r3, [sp, #20]
 802286c:	9300      	str	r3, [sp, #0]
 802286e:	9b04      	ldr	r3, [sp, #16]
 8022870:	9a03      	ldr	r2, [sp, #12]
 8022872:	4601      	mov	r1, r0
 8022874:	4620      	mov	r0, r4
 8022876:	f7ff ff88 	bl	802278a <SysTimeAdd>
}
 802287a:	4620      	mov	r0, r4
 802287c:	b007      	add	sp, #28
 802287e:	bd30      	pop	{r4, r5, pc}
 8022880:	08024dd8 	.word	0x08024dd8

08022884 <SysTimeGetMcuTime>:
{
 8022884:	b530      	push	{r4, r5, lr}
 8022886:	b083      	sub	sp, #12
 8022888:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 802288a:	2300      	movs	r3, #0
 802288c:	9300      	str	r3, [sp, #0]
 802288e:	f8ad 3004 	strh.w	r3, [sp, #4]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8022892:	4b06      	ldr	r3, [pc, #24]	; (80228ac <SysTimeGetMcuTime+0x28>)
 8022894:	691b      	ldr	r3, [r3, #16]
 8022896:	466d      	mov	r5, sp
 8022898:	a801      	add	r0, sp, #4
 802289a:	4798      	blx	r3
 802289c:	9000      	str	r0, [sp, #0]
  return calendarTime;
 802289e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80228a2:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80228a6:	4620      	mov	r0, r4
 80228a8:	b003      	add	sp, #12
 80228aa:	bd30      	pop	{r4, r5, pc}
 80228ac:	08024dd8 	.word	0x08024dd8

080228b0 <SysTimeToMs>:
{
 80228b0:	b530      	push	{r4, r5, lr}
 80228b2:	b089      	sub	sp, #36	; 0x24
 80228b4:	ac02      	add	r4, sp, #8
 80228b6:	e884 0003 	stmia.w	r4, {r0, r1}
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80228ba:	4d0c      	ldr	r5, [pc, #48]	; (80228ec <SysTimeToMs+0x3c>)
 80228bc:	68eb      	ldr	r3, [r5, #12]
 80228be:	4798      	blx	r3
 80228c0:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80228c4:	686b      	ldr	r3, [r5, #4]
 80228c6:	4798      	blx	r3
 80228c8:	4603      	mov	r3, r0
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 80228ca:	9a07      	ldr	r2, [sp, #28]
 80228cc:	9200      	str	r2, [sp, #0]
 80228ce:	e894 0006 	ldmia.w	r4, {r1, r2}
 80228d2:	a804      	add	r0, sp, #16
 80228d4:	f7ff ff76 	bl	80227c4 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 80228d8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 80228dc:	9a04      	ldr	r2, [sp, #16]
 80228de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80228e2:	fb00 3002 	mla	r0, r0, r2, r3
 80228e6:	b009      	add	sp, #36	; 0x24
 80228e8:	bd30      	pop	{r4, r5, pc}
 80228ea:	bf00      	nop
 80228ec:	08024dd8 	.word	0x08024dd8

080228f0 <SysTimeFromMs>:
{
 80228f0:	b530      	push	{r4, r5, lr}
 80228f2:	b087      	sub	sp, #28
 80228f4:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 80228f6:	4b11      	ldr	r3, [pc, #68]	; (802293c <SysTimeFromMs+0x4c>)
 80228f8:	fba3 2301 	umull	r2, r3, r3, r1
 80228fc:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 80228fe:	9304      	str	r3, [sp, #16]
 8022900:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8022904:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022908:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 802290c:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8022910:	2300      	movs	r3, #0
 8022912:	f8ad 300e 	strh.w	r3, [sp, #14]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8022916:	4d0a      	ldr	r5, [pc, #40]	; (8022940 <SysTimeFromMs+0x50>)
 8022918:	68eb      	ldr	r3, [r5, #12]
 802291a:	4798      	blx	r3
 802291c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8022920:	686b      	ldr	r3, [r5, #4]
 8022922:	4798      	blx	r3
 8022924:	4603      	mov	r3, r0
  return SysTimeAdd( sysTime, DeltaTime );
 8022926:	9a03      	ldr	r2, [sp, #12]
 8022928:	9200      	str	r2, [sp, #0]
 802292a:	aa06      	add	r2, sp, #24
 802292c:	e912 0006 	ldmdb	r2, {r1, r2}
 8022930:	4620      	mov	r0, r4
 8022932:	f7ff ff2a 	bl	802278a <SysTimeAdd>
}
 8022936:	4620      	mov	r0, r4
 8022938:	b007      	add	sp, #28
 802293a:	bd30      	pop	{r4, r5, pc}
 802293c:	10624dd3 	.word	0x10624dd3
 8022940:	08024dd8 	.word	0x08024dd8

08022944 <SysTimeLocalTime>:
{
 8022944:	b570      	push	{r4, r5, r6, lr}
 8022946:	b08a      	sub	sp, #40	; 0x28
 8022948:	4604      	mov	r4, r0
 802294a:	460d      	mov	r5, r1
  uint32_t correctionMonth[4] =
 802294c:	4b30      	ldr	r3, [pc, #192]	; (8022a10 <SysTimeLocalTime+0xcc>)
 802294e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8022950:	ae0a      	add	r6, sp, #40	; 0x28
 8022952:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
  CalendarDiv86400( timestamp + CALC_REF_YEAR_TO_UNIX_REF_YEAR_COMPENSATION_IN_SECONDS, &days, &seconds );
 8022956:	aa05      	add	r2, sp, #20
 8022958:	a903      	add	r1, sp, #12
 802295a:	482e      	ldr	r0, [pc, #184]	; (8022a14 <SysTimeLocalTime+0xd0>)
 802295c:	4420      	add	r0, r4
 802295e:	f7ff fe97 	bl	8022690 <CalendarDiv86400>
  CalendarDiv60( seconds, &minutes, &divReminder );
 8022962:	aa01      	add	r2, sp, #4
 8022964:	a904      	add	r1, sp, #16
 8022966:	9805      	ldr	r0, [sp, #20]
 8022968:	f7ff fef4 	bl	8022754 <CalendarDiv60>
  localtime->tm_sec = ( uint8_t )divReminder;
 802296c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8022970:	602b      	str	r3, [r5, #0]
  CalendarDiv60( minutes, &divOut, &divReminder);
 8022972:	aa01      	add	r2, sp, #4
 8022974:	a902      	add	r1, sp, #8
 8022976:	9804      	ldr	r0, [sp, #16]
 8022978:	f7ff feec 	bl	8022754 <CalendarDiv60>
  localtime->tm_min = ( uint8_t )divReminder;
 802297c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8022980:	606b      	str	r3, [r5, #4]
  localtime->tm_hour = ( uint8_t )divOut;
 8022982:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8022986:	60ab      	str	r3, [r5, #8]
  localtime->tm_year = DIV_365_25( days );
 8022988:	9e03      	ldr	r6, [sp, #12]
 802298a:	4c23      	ldr	r4, [pc, #140]	; (8022a18 <SysTimeLocalTime+0xd4>)
 802298c:	f645 03de 	movw	r3, #22750	; 0x58de
 8022990:	fb04 3406 	mla	r4, r4, r6, r3
 8022994:	0e64      	lsrs	r4, r4, #25
  days-= DIVC_BY_4( ( TM_DAYS_IN_YEAR * 3 + TM_DAYS_IN_LEAP_YEAR ) * localtime->tm_year );
 8022996:	f240 53b5 	movw	r3, #1461	; 0x5b5
 802299a:	fb03 f304 	mul.w	r3, r3, r4
 802299e:	3303      	adds	r3, #3
 80229a0:	eba6 0693 	sub.w	r6, r6, r3, lsr #2
  localtime->tm_yday = days;
 80229a4:	61ee      	str	r6, [r5, #28]
  localtime->tm_mon = CalendarGetMonth( days, localtime->tm_year );
 80229a6:	4621      	mov	r1, r4
 80229a8:	4630      	mov	r0, r6
 80229aa:	f7ff fea7 	bl	80226fc <CalendarGetMonth>
 80229ae:	6128      	str	r0, [r5, #16]
  weekDays += DIVC_BY_4( ( localtime->tm_year * 5 ) );
 80229b0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80229b4:	3303      	adds	r3, #3
 80229b6:	109b      	asrs	r3, r3, #2
 80229b8:	3301      	adds	r3, #1
  weekDays += days;
 80229ba:	4433      	add	r3, r6
  localtime->tm_wday = MODULO_7( weekDays );
 80229bc:	4a17      	ldr	r2, [pc, #92]	; (8022a1c <SysTimeLocalTime+0xd8>)
 80229be:	fb03 2202 	mla	r2, r3, r2, r2
 80229c2:	0d52      	lsrs	r2, r2, #21
 80229c4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80229c8:	1a9b      	subs	r3, r3, r2
 80229ca:	61ab      	str	r3, [r5, #24]
        ( ( ( correctionMonth[localtime->tm_year % 4] >> ( ( localtime->tm_mon ) * 2 ) ) & 0x03 ) ) );
 80229cc:	4262      	negs	r2, r4
 80229ce:	f004 0303 	and.w	r3, r4, #3
 80229d2:	f002 0203 	and.w	r2, r2, #3
 80229d6:	bf58      	it	pl
 80229d8:	4253      	negpl	r3, r2
 80229da:	aa0a      	add	r2, sp, #40	; 0x28
 80229dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80229e0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80229e4:	0042      	lsls	r2, r0, #1
 80229e6:	40d3      	lsrs	r3, r2
 80229e8:	f003 0303 	and.w	r3, r3, #3
  days -= ( DIVC_BY_2( ( localtime->tm_mon ) * ( 30 + 31 ) ) -
 80229ec:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 80229f0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80229f4:	3001      	adds	r0, #1
 80229f6:	eba3 0360 	sub.w	r3, r3, r0, asr #1
 80229fa:	441e      	add	r6, r3
  localtime->tm_mday = days + 1;
 80229fc:	3601      	adds	r6, #1
 80229fe:	60ee      	str	r6, [r5, #12]
  localtime->tm_year += CALC_REF_YEAR;
 8022a00:	3444      	adds	r4, #68	; 0x44
 8022a02:	616c      	str	r4, [r5, #20]
  localtime->tm_isdst = -1;
 8022a04:	f04f 33ff 	mov.w	r3, #4294967295
 8022a08:	622b      	str	r3, [r5, #32]
}
 8022a0a:	b00a      	add	sp, #40	; 0x28
 8022a0c:	bd70      	pop	{r4, r5, r6, pc}
 8022a0e:	bf00      	nop
 8022a10:	08024c1c 	.word	0x08024c1c
 8022a14:	03c3b880 	.word	0x03c3b880
 8022a18:	000166db 	.word	0x000166db
 8022a1c:	00049249 	.word	0x00049249

08022a20 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8022a20:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8022a22:	4b03      	ldr	r3, [pc, #12]	; (8022a30 <UTIL_TIMER_Init+0x10>)
 8022a24:	2200      	movs	r2, #0
 8022a26:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8022a28:	4b02      	ldr	r3, [pc, #8]	; (8022a34 <UTIL_TIMER_Init+0x14>)
 8022a2a:	681b      	ldr	r3, [r3, #0]
 8022a2c:	4798      	blx	r3
}
 8022a2e:	bd08      	pop	{r3, pc}
 8022a30:	20002374 	.word	0x20002374
 8022a34:	08024dec 	.word	0x08024dec

08022a38 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8022a38:	b1a8      	cbz	r0, 8022a66 <UTIL_TIMER_Create+0x2e>
{
 8022a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a3c:	4617      	mov	r7, r2
 8022a3e:	461e      	mov	r6, r3
 8022a40:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8022a42:	b193      	cbz	r3, 8022a6a <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8022a44:	2500      	movs	r5, #0
 8022a46:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8022a48:	4b09      	ldr	r3, [pc, #36]	; (8022a70 <UTIL_TIMER_Create+0x38>)
 8022a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022a4c:	4608      	mov	r0, r1
 8022a4e:	4798      	blx	r3
 8022a50:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8022a52:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8022a54:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8022a56:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8022a58:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8022a5a:	9b06      	ldr	r3, [sp, #24]
 8022a5c:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8022a5e:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8022a60:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8022a62:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8022a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8022a66:	2001      	movs	r0, #1
}
 8022a68:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8022a6a:	2001      	movs	r0, #1
 8022a6c:	e7fa      	b.n	8022a64 <UTIL_TIMER_Create+0x2c>
 8022a6e:	bf00      	nop
 8022a70:	08024dec 	.word	0x08024dec

08022a74 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8022a74:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8022a76:	4c03      	ldr	r4, [pc, #12]	; (8022a84 <UTIL_TIMER_GetCurrentTime+0x10>)
 8022a78:	69e3      	ldr	r3, [r4, #28]
 8022a7a:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8022a7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022a7e:	4798      	blx	r3
}
 8022a80:	bd10      	pop	{r4, pc}
 8022a82:	bf00      	nop
 8022a84:	08024dec 	.word	0x08024dec

08022a88 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8022a88:	b570      	push	{r4, r5, r6, lr}
 8022a8a:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8022a8c:	4d05      	ldr	r5, [pc, #20]	; (8022aa4 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8022a8e:	69eb      	ldr	r3, [r5, #28]
 8022a90:	4798      	blx	r3
 8022a92:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8022a94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8022a96:	4630      	mov	r0, r6
 8022a98:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8022a9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8022a9c:	1a20      	subs	r0, r4, r0
 8022a9e:	4798      	blx	r3
}
 8022aa0:	bd70      	pop	{r4, r5, r6, pc}
 8022aa2:	bf00      	nop
 8022aa4:	08024dec 	.word	0x08024dec

08022aa8 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8022aa8:	4b05      	ldr	r3, [pc, #20]	; (8022ac0 <TimerExists+0x18>)
 8022aaa:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8022aac:	b11b      	cbz	r3, 8022ab6 <TimerExists+0xe>
  {
    if( cur == TimerObject )
 8022aae:	4283      	cmp	r3, r0
 8022ab0:	d003      	beq.n	8022aba <TimerExists+0x12>
    {
      return true;
    }
    cur = cur->Next;
 8022ab2:	695b      	ldr	r3, [r3, #20]
 8022ab4:	e7fa      	b.n	8022aac <TimerExists+0x4>
  }
  return false;
 8022ab6:	2000      	movs	r0, #0
 8022ab8:	4770      	bx	lr
      return true;
 8022aba:	2001      	movs	r0, #1
}
 8022abc:	4770      	bx	lr
 8022abe:	bf00      	nop
 8022ac0:	20002374 	.word	0x20002374

08022ac4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8022ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ac6:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8022ac8:	4e09      	ldr	r6, [pc, #36]	; (8022af0 <TimerSetTimeout+0x2c>)
 8022aca:	6a33      	ldr	r3, [r6, #32]
 8022acc:	4798      	blx	r3
 8022ace:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8022ad0:	2301      	movs	r3, #1
 8022ad2:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8022ad4:	6827      	ldr	r7, [r4, #0]
 8022ad6:	69b6      	ldr	r6, [r6, #24]
 8022ad8:	47b0      	blx	r6
 8022ada:	4428      	add	r0, r5
 8022adc:	4287      	cmp	r7, r0
 8022ade:	d202      	bcs.n	8022ae6 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8022ae0:	47b0      	blx	r6
 8022ae2:	4405      	add	r5, r0
 8022ae4:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8022ae6:	4b02      	ldr	r3, [pc, #8]	; (8022af0 <TimerSetTimeout+0x2c>)
 8022ae8:	689b      	ldr	r3, [r3, #8]
 8022aea:	6820      	ldr	r0, [r4, #0]
 8022aec:	4798      	blx	r3
}
 8022aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022af0:	08024dec 	.word	0x08024dec

08022af4 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8022af4:	b368      	cbz	r0, 8022b52 <UTIL_TIMER_Stop+0x5e>
{
 8022af6:	b510      	push	{r4, lr}
 8022af8:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022afa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8022afe:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8022b00:	4b15      	ldr	r3, [pc, #84]	; (8022b58 <UTIL_TIMER_Stop+0x64>)
 8022b02:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8022b04:	2301      	movs	r3, #1
 8022b06:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8022b08:	b1e1      	cbz	r1, 8022b44 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8022b0a:	2300      	movs	r3, #0
 8022b0c:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8022b0e:	4288      	cmp	r0, r1
 8022b10:	d006      	beq.n	8022b20 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8022b12:	460b      	mov	r3, r1
        while( cur != NULL )
 8022b14:	b1b3      	cbz	r3, 8022b44 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8022b16:	4293      	cmp	r3, r2
 8022b18:	d011      	beq.n	8022b3e <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8022b1a:	4619      	mov	r1, r3
            cur = cur->Next;
 8022b1c:	695b      	ldr	r3, [r3, #20]
 8022b1e:	e7f9      	b.n	8022b14 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8022b20:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8022b22:	6948      	ldr	r0, [r1, #20]
 8022b24:	b120      	cbz	r0, 8022b30 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8022b26:	4b0c      	ldr	r3, [pc, #48]	; (8022b58 <UTIL_TIMER_Stop+0x64>)
 8022b28:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8022b2a:	f7ff ffcb 	bl	8022ac4 <TimerSetTimeout>
 8022b2e:	e009      	b.n	8022b44 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8022b30:	4b0a      	ldr	r3, [pc, #40]	; (8022b5c <UTIL_TIMER_Stop+0x68>)
 8022b32:	68db      	ldr	r3, [r3, #12]
 8022b34:	4798      	blx	r3
            TimerListHead = NULL;
 8022b36:	4b08      	ldr	r3, [pc, #32]	; (8022b58 <UTIL_TIMER_Stop+0x64>)
 8022b38:	2200      	movs	r2, #0
 8022b3a:	601a      	str	r2, [r3, #0]
 8022b3c:	e002      	b.n	8022b44 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8022b3e:	695b      	ldr	r3, [r3, #20]
 8022b40:	b123      	cbz	r3, 8022b4c <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8022b42:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022b44:	f384 8810 	msr	PRIMASK, r4
}
 8022b48:	2000      	movs	r0, #0
}
 8022b4a:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8022b4c:	2300      	movs	r3, #0
 8022b4e:	614b      	str	r3, [r1, #20]
 8022b50:	e7f8      	b.n	8022b44 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8022b52:	2001      	movs	r0, #1
}
 8022b54:	4770      	bx	lr
 8022b56:	bf00      	nop
 8022b58:	20002374 	.word	0x20002374
 8022b5c:	08024dec 	.word	0x08024dec

08022b60 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8022b60:	4b0d      	ldr	r3, [pc, #52]	; (8022b98 <TimerInsertTimer+0x38>)
 8022b62:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8022b64:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8022b66:	6951      	ldr	r1, [r2, #20]
 8022b68:	b189      	cbz	r1, 8022b8e <TimerInsertTimer+0x2e>
{
 8022b6a:	b410      	push	{r4}
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8022b6c:	6804      	ldr	r4, [r0, #0]
 8022b6e:	6819      	ldr	r1, [r3, #0]
 8022b70:	428c      	cmp	r4, r1
 8022b72:	d908      	bls.n	8022b86 <TimerInsertTimer+0x26>
    {
        cur = next;
 8022b74:	461a      	mov	r2, r3
        next = next->Next;
 8022b76:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8022b78:	6951      	ldr	r1, [r2, #20]
 8022b7a:	2900      	cmp	r1, #0
 8022b7c:	d1f6      	bne.n	8022b6c <TimerInsertTimer+0xc>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 8022b7e:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8022b80:	2300      	movs	r3, #0
 8022b82:	6143      	str	r3, [r0, #20]
 8022b84:	e001      	b.n	8022b8a <TimerInsertTimer+0x2a>
        cur->Next = TimerObject;
 8022b86:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8022b88:	6143      	str	r3, [r0, #20]
}
 8022b8a:	bc10      	pop	{r4}
 8022b8c:	4770      	bx	lr
  cur->Next = TimerObject;
 8022b8e:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8022b90:	2300      	movs	r3, #0
 8022b92:	6143      	str	r3, [r0, #20]
 8022b94:	4770      	bx	lr
 8022b96:	bf00      	nop
 8022b98:	20002374 	.word	0x20002374

08022b9c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8022b9c:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8022b9e:	4b05      	ldr	r3, [pc, #20]	; (8022bb4 <TimerInsertNewHeadTimer+0x18>)
 8022ba0:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8022ba2:	b10b      	cbz	r3, 8022ba8 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8022ba4:	2200      	movs	r2, #0
 8022ba6:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8022ba8:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8022baa:	4b02      	ldr	r3, [pc, #8]	; (8022bb4 <TimerInsertNewHeadTimer+0x18>)
 8022bac:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8022bae:	f7ff ff89 	bl	8022ac4 <TimerSetTimeout>
}
 8022bb2:	bd08      	pop	{r3, pc}
 8022bb4:	20002374 	.word	0x20002374

08022bb8 <UTIL_TIMER_Start>:
{
 8022bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8022bba:	2800      	cmp	r0, #0
 8022bbc:	d036      	beq.n	8022c2c <UTIL_TIMER_Start+0x74>
 8022bbe:	4604      	mov	r4, r0
 8022bc0:	f7ff ff72 	bl	8022aa8 <TimerExists>
 8022bc4:	2800      	cmp	r0, #0
 8022bc6:	d134      	bne.n	8022c32 <UTIL_TIMER_Start+0x7a>
 8022bc8:	7a65      	ldrb	r5, [r4, #9]
 8022bca:	2d00      	cmp	r5, #0
 8022bcc:	d133      	bne.n	8022c36 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022bce:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8022bd2:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8022bd4:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8022bd6:	4b19      	ldr	r3, [pc, #100]	; (8022c3c <UTIL_TIMER_Start+0x84>)
 8022bd8:	6a1b      	ldr	r3, [r3, #32]
 8022bda:	4798      	blx	r3
    if( ticks < minValue )
 8022bdc:	4287      	cmp	r7, r0
 8022bde:	d300      	bcc.n	8022be2 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8022be0:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8022be2:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8022be4:	2300      	movs	r3, #0
 8022be6:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8022be8:	2201      	movs	r2, #1
 8022bea:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8022bec:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8022bee:	4b14      	ldr	r3, [pc, #80]	; (8022c40 <UTIL_TIMER_Start+0x88>)
 8022bf0:	681b      	ldr	r3, [r3, #0]
 8022bf2:	b183      	cbz	r3, 8022c16 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8022bf4:	4b11      	ldr	r3, [pc, #68]	; (8022c3c <UTIL_TIMER_Start+0x84>)
 8022bf6:	699b      	ldr	r3, [r3, #24]
 8022bf8:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8022bfa:	6823      	ldr	r3, [r4, #0]
 8022bfc:	4418      	add	r0, r3
 8022bfe:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8022c00:	4b0f      	ldr	r3, [pc, #60]	; (8022c40 <UTIL_TIMER_Start+0x88>)
 8022c02:	681b      	ldr	r3, [r3, #0]
 8022c04:	681b      	ldr	r3, [r3, #0]
 8022c06:	4298      	cmp	r0, r3
 8022c08:	d20c      	bcs.n	8022c24 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8022c0a:	4620      	mov	r0, r4
 8022c0c:	f7ff ffc6 	bl	8022b9c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022c10:	f386 8810 	msr	PRIMASK, r6
}
 8022c14:	e00b      	b.n	8022c2e <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8022c16:	4b09      	ldr	r3, [pc, #36]	; (8022c3c <UTIL_TIMER_Start+0x84>)
 8022c18:	691b      	ldr	r3, [r3, #16]
 8022c1a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8022c1c:	4620      	mov	r0, r4
 8022c1e:	f7ff ffbd 	bl	8022b9c <TimerInsertNewHeadTimer>
 8022c22:	e7f5      	b.n	8022c10 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8022c24:	4620      	mov	r0, r4
 8022c26:	f7ff ff9b 	bl	8022b60 <TimerInsertTimer>
 8022c2a:	e7f1      	b.n	8022c10 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8022c2c:	2501      	movs	r5, #1
}
 8022c2e:	4628      	mov	r0, r5
 8022c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8022c32:	2501      	movs	r5, #1
 8022c34:	e7fb      	b.n	8022c2e <UTIL_TIMER_Start+0x76>
 8022c36:	2501      	movs	r5, #1
 8022c38:	e7f9      	b.n	8022c2e <UTIL_TIMER_Start+0x76>
 8022c3a:	bf00      	nop
 8022c3c:	08024dec 	.word	0x08024dec
 8022c40:	20002374 	.word	0x20002374

08022c44 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8022c44:	b198      	cbz	r0, 8022c6e <UTIL_TIMER_SetPeriod+0x2a>
{
 8022c46:	b510      	push	{r4, lr}
 8022c48:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8022c4a:	4b0a      	ldr	r3, [pc, #40]	; (8022c74 <UTIL_TIMER_SetPeriod+0x30>)
 8022c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022c4e:	4608      	mov	r0, r1
 8022c50:	4798      	blx	r3
 8022c52:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8022c54:	4620      	mov	r0, r4
 8022c56:	f7ff ff27 	bl	8022aa8 <TimerExists>
 8022c5a:	b908      	cbnz	r0, 8022c60 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8022c5c:	2000      	movs	r0, #0
}
 8022c5e:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8022c60:	4620      	mov	r0, r4
 8022c62:	f7ff ff47 	bl	8022af4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8022c66:	4620      	mov	r0, r4
 8022c68:	f7ff ffa6 	bl	8022bb8 <UTIL_TIMER_Start>
 8022c6c:	e7f7      	b.n	8022c5e <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8022c6e:	2001      	movs	r0, #1
}
 8022c70:	4770      	bx	lr
 8022c72:	bf00      	nop
 8022c74:	08024dec 	.word	0x08024dec

08022c78 <UTIL_TIMER_IRQ_Handler>:
{
 8022c78:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022c7a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8022c7e:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8022c80:	4c1e      	ldr	r4, [pc, #120]	; (8022cfc <UTIL_TIMER_IRQ_Handler+0x84>)
 8022c82:	6963      	ldr	r3, [r4, #20]
 8022c84:	4798      	blx	r3
 8022c86:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8022c88:	6923      	ldr	r3, [r4, #16]
 8022c8a:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8022c8c:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8022c8e:	4b1c      	ldr	r3, [pc, #112]	; (8022d00 <UTIL_TIMER_IRQ_Handler+0x88>)
 8022c90:	681b      	ldr	r3, [r3, #0]
 8022c92:	b923      	cbnz	r3, 8022c9e <UTIL_TIMER_IRQ_Handler+0x26>
 8022c94:	e018      	b.n	8022cc8 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8022c96:	2200      	movs	r2, #0
 8022c98:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8022c9a:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8022c9c:	b1a3      	cbz	r3, 8022cc8 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8022c9e:	681a      	ldr	r2, [r3, #0]
 8022ca0:	42a2      	cmp	r2, r4
 8022ca2:	d9f8      	bls.n	8022c96 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8022ca4:	1a31      	subs	r1, r6, r0
 8022ca6:	440a      	add	r2, r1
 8022ca8:	601a      	str	r2, [r3, #0]
 8022caa:	e7f6      	b.n	8022c9a <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8022cac:	4b14      	ldr	r3, [pc, #80]	; (8022d00 <UTIL_TIMER_IRQ_Handler+0x88>)
 8022cae:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8022cb0:	6962      	ldr	r2, [r4, #20]
 8022cb2:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8022cb4:	2300      	movs	r3, #0
 8022cb6:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8022cb8:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8022cba:	68e3      	ldr	r3, [r4, #12]
 8022cbc:	6920      	ldr	r0, [r4, #16]
 8022cbe:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8022cc0:	8963      	ldrh	r3, [r4, #10]
 8022cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022cc6:	d012      	beq.n	8022cee <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8022cc8:	4b0d      	ldr	r3, [pc, #52]	; (8022d00 <UTIL_TIMER_IRQ_Handler+0x88>)
 8022cca:	681b      	ldr	r3, [r3, #0]
 8022ccc:	b13b      	cbz	r3, 8022cde <UTIL_TIMER_IRQ_Handler+0x66>
 8022cce:	681c      	ldr	r4, [r3, #0]
 8022cd0:	2c00      	cmp	r4, #0
 8022cd2:	d0eb      	beq.n	8022cac <UTIL_TIMER_IRQ_Handler+0x34>
 8022cd4:	4b09      	ldr	r3, [pc, #36]	; (8022cfc <UTIL_TIMER_IRQ_Handler+0x84>)
 8022cd6:	699b      	ldr	r3, [r3, #24]
 8022cd8:	4798      	blx	r3
 8022cda:	4284      	cmp	r4, r0
 8022cdc:	d3e6      	bcc.n	8022cac <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8022cde:	4b08      	ldr	r3, [pc, #32]	; (8022d00 <UTIL_TIMER_IRQ_Handler+0x88>)
 8022ce0:	6818      	ldr	r0, [r3, #0]
 8022ce2:	b108      	cbz	r0, 8022ce8 <UTIL_TIMER_IRQ_Handler+0x70>
 8022ce4:	7a03      	ldrb	r3, [r0, #8]
 8022ce6:	b133      	cbz	r3, 8022cf6 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022ce8:	f385 8810 	msr	PRIMASK, r5
}
 8022cec:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8022cee:	4620      	mov	r0, r4
 8022cf0:	f7ff ff62 	bl	8022bb8 <UTIL_TIMER_Start>
 8022cf4:	e7e8      	b.n	8022cc8 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8022cf6:	f7ff fee5 	bl	8022ac4 <TimerSetTimeout>
 8022cfa:	e7f5      	b.n	8022ce8 <UTIL_TIMER_IRQ_Handler+0x70>
 8022cfc:	08024dec 	.word	0x08024dec
 8022d00:	20002374 	.word	0x20002374

08022d04 <tiny_vfscanf>:
 * vfscanf
 */

static inline int
VFSCANF(const char *str, const char *fmt0, va_list ap)
{
 8022d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d08:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8022d0c:	4680      	mov	r8, r0
 8022d0e:	468b      	mov	fp, r1
 8022d10:	9205      	str	r2, [sp, #20]
  static short basefix[17] =
    { 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
#endif
    
   fp_p = str;
  fp_r = strlen(str);
 8022d12:	f7e2 ffcf 	bl	8005cb4 <strlen>

  nassigned = 0;
  nread = 0;
  base = 0;    /* XXX just to keep gcc happy */
 8022d16:	f04f 0e00 	mov.w	lr, #0
  nassigned = 0;
 8022d1a:	46f1      	mov	r9, lr
  for (;;) {
    c = *fmt++;
 8022d1c:	465d      	mov	r5, fp
 8022d1e:	f815 4b01 	ldrb.w	r4, [r5], #1
    if (c == 0)
 8022d22:	b144      	cbz	r4, 8022d36 <tiny_vfscanf+0x32>
          isspace(*fp_p))
        nread++, fp_r--, fp_p++;
      continue;
    }
#endif
    if (c != '%')
 8022d24:	2c25      	cmp	r4, #37	; 0x25
 8022d26:	d00b      	beq.n	8022d40 <tiny_vfscanf+0x3c>
     */
again:    c = *fmt++;
    switch (c) {
    case '%':
literal:
      if (fp_r <= 0 && __srefill(fp))
 8022d28:	2800      	cmp	r0, #0
 8022d2a:	f340 81db 	ble.w	80230e4 <tiny_vfscanf+0x3e0>
        goto input_failure;
      if (*fp_p != c)
 8022d2e:	f898 3000 	ldrb.w	r3, [r8]
 8022d32:	42a3      	cmp	r3, r4
 8022d34:	d043      	beq.n	8022dbe <tiny_vfscanf+0xba>
  }
input_failure:
  return (nassigned ? nassigned : -1);
match_failure:
  return (nassigned);
}
 8022d36:	4648      	mov	r0, r9
 8022d38:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
 8022d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    flags = 0;
 8022d40:	2200      	movs	r2, #0
    width = 0;
 8022d42:	4611      	mov	r1, r2
again:    c = *fmt++;
 8022d44:	46ab      	mov	fp, r5
 8022d46:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8022d4a:	461c      	mov	r4, r3
    switch (c) {
 8022d4c:	2b78      	cmp	r3, #120	; 0x78
 8022d4e:	d850      	bhi.n	8022df2 <tiny_vfscanf+0xee>
 8022d50:	2b44      	cmp	r3, #68	; 0x44
 8022d52:	d31f      	bcc.n	8022d94 <tiny_vfscanf+0x90>
 8022d54:	3b44      	subs	r3, #68	; 0x44
 8022d56:	2b34      	cmp	r3, #52	; 0x34
 8022d58:	d84b      	bhi.n	8022df2 <tiny_vfscanf+0xee>
 8022d5a:	e8df f003 	tbb	[pc, r3]
 8022d5e:	4a45      	.short	0x4a45
 8022d60:	4a4a4a4a 	.word	0x4a4a4a4a
 8022d64:	4a4a4a4a 	.word	0x4a4a4a4a
 8022d68:	4a4a4a4a 	.word	0x4a4a4a4a
 8022d6c:	4a4a4a4a 	.word	0x4a4a4a4a
 8022d70:	4a6c4a4a 	.word	0x4a6c4a4a
 8022d74:	4a4a4a4a 	.word	0x4a4a4a4a
 8022d78:	4a4a4a4a 	.word	0x4a4a4a4a
 8022d7c:	4a724a4a 	.word	0x4a724a4a
 8022d80:	4a354a4a 	.word	0x4a354a4a
 8022d84:	4a414a4a 	.word	0x4a414a4a
 8022d88:	4a4a4a4a 	.word	0x4a4a4a4a
 8022d8c:	664a4a4a 	.word	0x664a4a4a
 8022d90:	4a4a      	.short	0x4a4a
 8022d92:	6c          	.byte	0x6c
 8022d93:	00          	.byte	0x00
 8022d94:	2b25      	cmp	r3, #37	; 0x25
 8022d96:	d010      	beq.n	8022dba <tiny_vfscanf+0xb6>
 8022d98:	d90b      	bls.n	8022db2 <tiny_vfscanf+0xae>
 8022d9a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8022d9e:	b2ed      	uxtb	r5, r5
 8022da0:	2d09      	cmp	r5, #9
 8022da2:	d826      	bhi.n	8022df2 <tiny_vfscanf+0xee>
      width = width * 10 + c - '0';
 8022da4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8022da8:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8022dac:	3930      	subs	r1, #48	; 0x30
again:    c = *fmt++;
 8022dae:	465d      	mov	r5, fp
      goto again;
 8022db0:	e7c8      	b.n	8022d44 <tiny_vfscanf+0x40>
    switch (c) {
 8022db2:	b9f3      	cbnz	r3, 8022df2 <tiny_vfscanf+0xee>
 8022db4:	f04f 39ff 	mov.w	r9, #4294967295
 8022db8:	e7bd      	b.n	8022d36 <tiny_vfscanf+0x32>
 8022dba:	465d      	mov	r5, fp
 8022dbc:	e7b4      	b.n	8022d28 <tiny_vfscanf+0x24>
      fp_r--, fp_p++;
 8022dbe:	3801      	subs	r0, #1
 8022dc0:	f108 0801 	add.w	r8, r8, #1
      continue;
 8022dc4:	46ab      	mov	fp, r5
 8022dc6:	e7a9      	b.n	8022d1c <tiny_vfscanf+0x18>
      if (*fmt == 'h') {
 8022dc8:	f89b 3000 	ldrb.w	r3, [fp]
 8022dcc:	2b68      	cmp	r3, #104	; 0x68
 8022dce:	d003      	beq.n	8022dd8 <tiny_vfscanf+0xd4>
        flags |= SHORT;
 8022dd0:	f042 0204 	orr.w	r2, r2, #4
again:    c = *fmt++;
 8022dd4:	465d      	mov	r5, fp
      goto again;
 8022dd6:	e7b5      	b.n	8022d44 <tiny_vfscanf+0x40>
        fmt++;
 8022dd8:	3502      	adds	r5, #2
        flags |= SHORTSHORT;
 8022dda:	f042 0208 	orr.w	r2, r2, #8
 8022dde:	e7b1      	b.n	8022d44 <tiny_vfscanf+0x40>
      flags |= LONG;
 8022de0:	f042 0201 	orr.w	r2, r2, #1
again:    c = *fmt++;
 8022de4:	465d      	mov	r5, fp
      goto again;
 8022de6:	e7ad      	b.n	8022d44 <tiny_vfscanf+0x40>
      flags |= LONG;
 8022de8:	f042 0201 	orr.w	r2, r2, #1
      base = 10;
 8022dec:	f04f 0e0a 	mov.w	lr, #10
      c = CT_INT;
 8022df0:	2403      	movs	r4, #3
    if (fp_r <= 0 && __srefill(fp))
 8022df2:	2800      	cmp	r0, #0
 8022df4:	f340 8176 	ble.w	80230e4 <tiny_vfscanf+0x3e0>
    switch (c) {
 8022df8:	2c03      	cmp	r4, #3
 8022dfa:	d18f      	bne.n	8022d1c <tiny_vfscanf+0x18>
      if (--width > sizeof(buf) - 2)
 8022dfc:	3901      	subs	r1, #1
 8022dfe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8022e02:	d301      	bcc.n	8022e08 <tiny_vfscanf+0x104>
        width = sizeof(buf) - 2;
 8022e04:	f240 11ff 	movw	r1, #511	; 0x1ff
      width++;
 8022e08:	3101      	adds	r1, #1
      flags |= SIGNOK | NDIGITS;
 8022e0a:	f442 42a0 	orr.w	r2, r2, #20480	; 0x5000
      sign_minus = 0;
 8022e0e:	f04f 0a00 	mov.w	sl, #0
      value = 0;
 8022e12:	2300      	movs	r3, #0
 8022e14:	2400      	movs	r4, #0
      for (p = buf; width; width--) {
 8022e16:	f10d 0c1c 	add.w	ip, sp, #28
 8022e1a:	f8cd 9004 	str.w	r9, [sp, #4]
 8022e1e:	46d1      	mov	r9, sl
 8022e20:	f8cd b010 	str.w	fp, [sp, #16]
 8022e24:	469a      	mov	sl, r3
 8022e26:	46a3      	mov	fp, r4
 8022e28:	e07e      	b.n	8022f28 <tiny_vfscanf+0x224>
      flags |= UNSIGNED;
 8022e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      base = 10;
 8022e2e:	f04f 0e0a 	mov.w	lr, #10
      c = CT_INT;
 8022e32:	2403      	movs	r4, #3
      break;
 8022e34:	e7dd      	b.n	8022df2 <tiny_vfscanf+0xee>
      flags |= UNSIGNED;
 8022e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      base = 16;
 8022e3a:	f04f 0e10 	mov.w	lr, #16
      c = CT_INT;
 8022e3e:	2403      	movs	r4, #3
      break;
 8022e40:	e7d7      	b.n	8022df2 <tiny_vfscanf+0xee>
      base = 10;
 8022e42:	f04f 0e0a 	mov.w	lr, #10
      c = CT_INT;
 8022e46:	2403      	movs	r4, #3
 8022e48:	e7d3      	b.n	8022df2 <tiny_vfscanf+0xee>
          flags &= ~(SIGNOK | NDIGITS);
 8022e4a:	f422 42a0 	bic.w	r2, r2, #20480	; 0x5000
          value = value * base + c - '0';
 8022e4e:	fb0e f60b 	mul.w	r6, lr, fp
 8022e52:	4674      	mov	r4, lr
 8022e54:	17e5      	asrs	r5, r4, #31
 8022e56:	fb0a 6605 	mla	r6, sl, r5, r6
 8022e5a:	fbae 450a 	umull	r4, r5, lr, sl
 8022e5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8022e62:	462c      	mov	r4, r5
 8022e64:	4434      	add	r4, r6
 8022e66:	9403      	str	r4, [sp, #12]
 8022e68:	b2de      	uxtb	r6, r3
 8022e6a:	2700      	movs	r7, #0
 8022e6c:	9c02      	ldr	r4, [sp, #8]
 8022e6e:	1934      	adds	r4, r6, r4
 8022e70:	9d03      	ldr	r5, [sp, #12]
 8022e72:	eb47 0505 	adc.w	r5, r7, r5
 8022e76:	f1b4 0a30 	subs.w	sl, r4, #48	; 0x30
 8022e7a:	f145 3bff 	adc.w	fp, r5, #4294967295
          goto ok;
 8022e7e:	e04a      	b.n	8022f16 <tiny_vfscanf+0x212>
          if (base <= 10)
 8022e80:	f1be 0f0a 	cmp.w	lr, #10
 8022e84:	f340 8101 	ble.w	802308a <tiny_vfscanf+0x386>
          flags &= ~(SIGNOK | NDIGITS);
 8022e88:	f422 42a0 	bic.w	r2, r2, #20480	; 0x5000
          value = value * base + c - 'A' + 10;
 8022e8c:	fb0e f60b 	mul.w	r6, lr, fp
 8022e90:	4674      	mov	r4, lr
 8022e92:	17e5      	asrs	r5, r4, #31
 8022e94:	fb0a 6605 	mla	r6, sl, r5, r6
 8022e98:	fbae 450a 	umull	r4, r5, lr, sl
 8022e9c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8022ea0:	462c      	mov	r4, r5
 8022ea2:	4434      	add	r4, r6
 8022ea4:	9403      	str	r4, [sp, #12]
 8022ea6:	b2de      	uxtb	r6, r3
 8022ea8:	2700      	movs	r7, #0
 8022eaa:	9c02      	ldr	r4, [sp, #8]
 8022eac:	1934      	adds	r4, r6, r4
 8022eae:	9d03      	ldr	r5, [sp, #12]
 8022eb0:	eb47 0505 	adc.w	r5, r7, r5
 8022eb4:	f1b4 0a37 	subs.w	sl, r4, #55	; 0x37
 8022eb8:	f145 3bff 	adc.w	fp, r5, #4294967295
          goto ok;          
 8022ebc:	e02b      	b.n	8022f16 <tiny_vfscanf+0x212>
          if (base <= 10)
 8022ebe:	f1be 0f0a 	cmp.w	lr, #10
 8022ec2:	f340 80e9 	ble.w	8023098 <tiny_vfscanf+0x394>
          flags &= ~(SIGNOK | NDIGITS);
 8022ec6:	f422 42a0 	bic.w	r2, r2, #20480	; 0x5000
          value = value * base + c - 'a' + 10;
 8022eca:	fb0e f60b 	mul.w	r6, lr, fp
 8022ece:	4674      	mov	r4, lr
 8022ed0:	17e5      	asrs	r5, r4, #31
 8022ed2:	fb0a 6605 	mla	r6, sl, r5, r6
 8022ed6:	fbae 450a 	umull	r4, r5, lr, sl
 8022eda:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8022ede:	462c      	mov	r4, r5
 8022ee0:	4434      	add	r4, r6
 8022ee2:	9403      	str	r4, [sp, #12]
 8022ee4:	b2de      	uxtb	r6, r3
 8022ee6:	2700      	movs	r7, #0
 8022ee8:	9c02      	ldr	r4, [sp, #8]
 8022eea:	1934      	adds	r4, r6, r4
 8022eec:	9d03      	ldr	r5, [sp, #12]
 8022eee:	eb47 0505 	adc.w	r5, r7, r5
 8022ef2:	f1b4 0a57 	subs.w	sl, r4, #87	; 0x57
 8022ef6:	f145 3bff 	adc.w	fp, r5, #4294967295
          goto ok;
 8022efa:	e00c      	b.n	8022f16 <tiny_vfscanf+0x212>
          if (!(flags & HAVESIGN)) {
 8022efc:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8022f00:	d101      	bne.n	8022f06 <tiny_vfscanf+0x202>
            sign_minus = 1;
 8022f02:	f04f 0901 	mov.w	r9, #1
          if (flags & SIGNOK) {
 8022f06:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8022f0a:	f000 80cc 	beq.w	80230a6 <tiny_vfscanf+0x3a2>
            flags &= ~SIGNOK;
 8022f0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
            flags |= HAVESIGN;
 8022f12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
        *p++ = c;
 8022f16:	f80c 3b01 	strb.w	r3, [ip], #1
        if (--fp_r > 0)
 8022f1a:	3801      	subs	r0, #1
 8022f1c:	2800      	cmp	r0, #0
 8022f1e:	f340 8090 	ble.w	8023042 <tiny_vfscanf+0x33e>
          fp_p++;
 8022f22:	f108 0801 	add.w	r8, r8, #1
      for (p = buf; width; width--) {
 8022f26:	3901      	subs	r1, #1
 8022f28:	2900      	cmp	r1, #0
 8022f2a:	f000 8083 	beq.w	8023034 <tiny_vfscanf+0x330>
        c = *fp_p;
 8022f2e:	f898 3000 	ldrb.w	r3, [r8]
        switch (c) {
 8022f32:	f1a3 042b 	sub.w	r4, r3, #43	; 0x2b
 8022f36:	2c3b      	cmp	r4, #59	; 0x3b
 8022f38:	f200 808a 	bhi.w	8023050 <tiny_vfscanf+0x34c>
 8022f3c:	a501      	add	r5, pc, #4	; (adr r5, 8022f44 <tiny_vfscanf+0x240>)
 8022f3e:	f855 f024 	ldr.w	pc, [r5, r4, lsl #2]
 8022f42:	bf00      	nop
 8022f44:	08022f07 	.word	0x08022f07
 8022f48:	08023051 	.word	0x08023051
 8022f4c:	08022efd 	.word	0x08022efd
 8022f50:	08023051 	.word	0x08023051
 8022f54:	08023051 	.word	0x08023051
 8022f58:	08022e4b 	.word	0x08022e4b
 8022f5c:	08022e4b 	.word	0x08022e4b
 8022f60:	08022e4b 	.word	0x08022e4b
 8022f64:	08022e4b 	.word	0x08022e4b
 8022f68:	08022e4b 	.word	0x08022e4b
 8022f6c:	08022e4b 	.word	0x08022e4b
 8022f70:	08022e4b 	.word	0x08022e4b
 8022f74:	08022e4b 	.word	0x08022e4b
 8022f78:	08022e4b 	.word	0x08022e4b
 8022f7c:	08022e4b 	.word	0x08022e4b
 8022f80:	08023051 	.word	0x08023051
 8022f84:	08023051 	.word	0x08023051
 8022f88:	08023051 	.word	0x08023051
 8022f8c:	08023051 	.word	0x08023051
 8022f90:	08023051 	.word	0x08023051
 8022f94:	08023051 	.word	0x08023051
 8022f98:	08023051 	.word	0x08023051
 8022f9c:	08022e81 	.word	0x08022e81
 8022fa0:	08022e81 	.word	0x08022e81
 8022fa4:	08022e81 	.word	0x08022e81
 8022fa8:	08022e81 	.word	0x08022e81
 8022fac:	08022e81 	.word	0x08022e81
 8022fb0:	08022e81 	.word	0x08022e81
 8022fb4:	08023051 	.word	0x08023051
 8022fb8:	08023051 	.word	0x08023051
 8022fbc:	08023051 	.word	0x08023051
 8022fc0:	08023051 	.word	0x08023051
 8022fc4:	08023051 	.word	0x08023051
 8022fc8:	08023051 	.word	0x08023051
 8022fcc:	08023051 	.word	0x08023051
 8022fd0:	08023051 	.word	0x08023051
 8022fd4:	08023051 	.word	0x08023051
 8022fd8:	08023051 	.word	0x08023051
 8022fdc:	08023051 	.word	0x08023051
 8022fe0:	08023051 	.word	0x08023051
 8022fe4:	08023051 	.word	0x08023051
 8022fe8:	08023051 	.word	0x08023051
 8022fec:	08023051 	.word	0x08023051
 8022ff0:	08023051 	.word	0x08023051
 8022ff4:	08023051 	.word	0x08023051
 8022ff8:	08023051 	.word	0x08023051
 8022ffc:	08023051 	.word	0x08023051
 8023000:	08023051 	.word	0x08023051
 8023004:	08023051 	.word	0x08023051
 8023008:	08023051 	.word	0x08023051
 802300c:	08023051 	.word	0x08023051
 8023010:	08023051 	.word	0x08023051
 8023014:	08023051 	.word	0x08023051
 8023018:	08023051 	.word	0x08023051
 802301c:	08022ebf 	.word	0x08022ebf
 8023020:	08022ebf 	.word	0x08022ebf
 8023024:	08022ebf 	.word	0x08022ebf
 8023028:	08022ebf 	.word	0x08022ebf
 802302c:	08022ebf 	.word	0x08022ebf
 8023030:	08022ebf 	.word	0x08022ebf
 8023034:	4654      	mov	r4, sl
 8023036:	46ca      	mov	sl, r9
 8023038:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802303c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8023040:	e00c      	b.n	802305c <tiny_vfscanf+0x358>
 8023042:	4654      	mov	r4, sl
 8023044:	46ca      	mov	sl, r9
 8023046:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802304a:	f8dd b010 	ldr.w	fp, [sp, #16]
 802304e:	e005      	b.n	802305c <tiny_vfscanf+0x358>
 8023050:	4654      	mov	r4, sl
 8023052:	46ca      	mov	sl, r9
 8023054:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8023058:	f8dd b010 	ldr.w	fp, [sp, #16]
      if (flags & NDIGITS) {
 802305c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8023060:	f47f ae69 	bne.w	8022d36 <tiny_vfscanf+0x32>
        *p = '\0';
 8023064:	2300      	movs	r3, #0
 8023066:	f88c 3000 	strb.w	r3, [ip]
        if (sign_minus)
 802306a:	f1ba 0f00 	cmp.w	sl, #0
 802306e:	d001      	beq.n	8023074 <tiny_vfscanf+0x370>
          value = -value;
 8023070:	4263      	negs	r3, r4
 8023072:	461c      	mov	r4, r3
        if (flags & LONG)
 8023074:	f012 0f01 	tst.w	r2, #1
 8023078:	d01c      	beq.n	80230b4 <tiny_vfscanf+0x3b0>
          *va_arg(ap, long *) = value;
 802307a:	9b05      	ldr	r3, [sp, #20]
 802307c:	1d1a      	adds	r2, r3, #4
 802307e:	9205      	str	r2, [sp, #20]
 8023080:	681b      	ldr	r3, [r3, #0]
 8023082:	601c      	str	r4, [r3, #0]
        nassigned++;
 8023084:	f109 0901 	add.w	r9, r9, #1
      break;
 8023088:	e648      	b.n	8022d1c <tiny_vfscanf+0x18>
 802308a:	4654      	mov	r4, sl
 802308c:	46ca      	mov	sl, r9
 802308e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8023092:	f8dd b010 	ldr.w	fp, [sp, #16]
 8023096:	e7e1      	b.n	802305c <tiny_vfscanf+0x358>
 8023098:	4654      	mov	r4, sl
 802309a:	46ca      	mov	sl, r9
 802309c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80230a0:	f8dd b010 	ldr.w	fp, [sp, #16]
 80230a4:	e7da      	b.n	802305c <tiny_vfscanf+0x358>
 80230a6:	4654      	mov	r4, sl
 80230a8:	46ca      	mov	sl, r9
 80230aa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80230ae:	f8dd b010 	ldr.w	fp, [sp, #16]
 80230b2:	e7d3      	b.n	802305c <tiny_vfscanf+0x358>
        else if (flags & SHORT)
 80230b4:	f012 0f04 	tst.w	r2, #4
 80230b8:	d005      	beq.n	80230c6 <tiny_vfscanf+0x3c2>
          *va_arg(ap, short *) = value;
 80230ba:	9b05      	ldr	r3, [sp, #20]
 80230bc:	1d1a      	adds	r2, r3, #4
 80230be:	9205      	str	r2, [sp, #20]
 80230c0:	681b      	ldr	r3, [r3, #0]
 80230c2:	801c      	strh	r4, [r3, #0]
 80230c4:	e7de      	b.n	8023084 <tiny_vfscanf+0x380>
        else if (flags & SHORTSHORT)
 80230c6:	f012 0f08 	tst.w	r2, #8
 80230ca:	d005      	beq.n	80230d8 <tiny_vfscanf+0x3d4>
          *va_arg(ap, char *) = value;
 80230cc:	9b05      	ldr	r3, [sp, #20]
 80230ce:	1d1a      	adds	r2, r3, #4
 80230d0:	9205      	str	r2, [sp, #20]
 80230d2:	681b      	ldr	r3, [r3, #0]
 80230d4:	701c      	strb	r4, [r3, #0]
 80230d6:	e7d5      	b.n	8023084 <tiny_vfscanf+0x380>
          *va_arg(ap, int *) = value;
 80230d8:	9b05      	ldr	r3, [sp, #20]
 80230da:	1d1a      	adds	r2, r3, #4
 80230dc:	9205      	str	r2, [sp, #20]
 80230de:	681b      	ldr	r3, [r3, #0]
 80230e0:	601c      	str	r4, [r3, #0]
 80230e2:	e7cf      	b.n	8023084 <tiny_vfscanf+0x380>
  return (nassigned ? nassigned : -1);
 80230e4:	f1b9 0f00 	cmp.w	r9, #0
 80230e8:	f47f ae25 	bne.w	8022d36 <tiny_vfscanf+0x32>
 80230ec:	f04f 39ff 	mov.w	r9, #4294967295
 80230f0:	e621      	b.n	8022d36 <tiny_vfscanf+0x32>
 80230f2:	bf00      	nop

080230f4 <tiny_sscanf>:
}
#endif

int
tiny_sscanf(const char *str, const char *fmt, ...)
{
 80230f4:	b40e      	push	{r1, r2, r3}
 80230f6:	b500      	push	{lr}
 80230f8:	b082      	sub	sp, #8
 80230fa:	aa03      	add	r2, sp, #12
 80230fc:	f852 1b04 	ldr.w	r1, [r2], #4
  int ret;
  va_list ap;
  
  va_start(ap, fmt);
 8023100:	9201      	str	r2, [sp, #4]
  ret = tiny_vfscanf(str, fmt, ap);
 8023102:	f7ff fdff 	bl	8022d04 <tiny_vfscanf>
  va_end(ap);
  return (ret);
}
 8023106:	b002      	add	sp, #8
 8023108:	f85d eb04 	ldr.w	lr, [sp], #4
 802310c:	b003      	add	sp, #12
 802310e:	4770      	bx	lr

08023110 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8023110:	4601      	mov	r1, r0
  int i = 0;
 8023112:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8023114:	680a      	ldr	r2, [r1, #0]
 8023116:	7813      	ldrb	r3, [r2, #0]
 8023118:	3b30      	subs	r3, #48	; 0x30
 802311a:	b2db      	uxtb	r3, r3
 802311c:	2b09      	cmp	r3, #9
 802311e:	d808      	bhi.n	8023132 <ee_skip_atoi+0x22>
 8023120:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8023124:	1c53      	adds	r3, r2, #1
 8023126:	600b      	str	r3, [r1, #0]
 8023128:	7813      	ldrb	r3, [r2, #0]
 802312a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 802312e:	3830      	subs	r0, #48	; 0x30
 8023130:	e7f0      	b.n	8023114 <ee_skip_atoi+0x4>
  return i;
}
 8023132:	4770      	bx	lr

08023134 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8023134:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8023138:	b093      	sub	sp, #76	; 0x4c
 802313a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 802313c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 802313e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8023142:	d111      	bne.n	8023168 <ee_number+0x34>
  char *dig = lower_digits;
 8023144:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8023238 <ee_number+0x104>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8023148:	469c      	mov	ip, r3
 802314a:	3b02      	subs	r3, #2
 802314c:	2b22      	cmp	r3, #34	; 0x22
 802314e:	d871      	bhi.n	8023234 <ee_number+0x100>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8023150:	f015 0401 	ands.w	r4, r5, #1
 8023154:	d00b      	beq.n	802316e <ee_number+0x3a>
 8023156:	2730      	movs	r7, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8023158:	f015 0f02 	tst.w	r5, #2
 802315c:	d010      	beq.n	8023180 <ee_number+0x4c>
  {
    if (num < 0)
 802315e:	2a00      	cmp	r2, #0
 8023160:	db07      	blt.n	8023172 <ee_number+0x3e>
  sign = 0;
 8023162:	f04f 0e00 	mov.w	lr, #0
 8023166:	e00d      	b.n	8023184 <ee_number+0x50>
  if (type & UPPERCASE)  dig = upper_digits;
 8023168:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802323c <ee_number+0x108>
 802316c:	e7ec      	b.n	8023148 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 802316e:	2720      	movs	r7, #32
 8023170:	e7f2      	b.n	8023158 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8023172:	4252      	negs	r2, r2
      size--;
 8023174:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023176:	3b01      	subs	r3, #1
 8023178:	931a      	str	r3, [sp, #104]	; 0x68
      sign = '-';
 802317a:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
 802317e:	e001      	b.n	8023184 <ee_number+0x50>
  sign = 0;
 8023180:	f04f 0e00 	mov.w	lr, #0
  }
#endif
  
  i = 0;

  if (num == 0)
 8023184:	b9da      	cbnz	r2, 80231be <ee_number+0x8a>
    tmp[i++] = '0';
 8023186:	2330      	movs	r3, #48	; 0x30
 8023188:	f88d 3004 	strb.w	r3, [sp, #4]
 802318c:	2501      	movs	r5, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 802318e:	42b5      	cmp	r5, r6
 8023190:	dd00      	ble.n	8023194 <ee_number+0x60>
 8023192:	462e      	mov	r6, r5
  size -= precision;
 8023194:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023196:	1b9b      	subs	r3, r3, r6
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8023198:	b30c      	cbz	r4, 80231de <ee_number+0xaa>
  if (sign) ASSIGN_STR(sign);
 802319a:	f1be 0f00 	cmp.w	lr, #0
 802319e:	d003      	beq.n	80231a8 <ee_number+0x74>
 80231a0:	f800 eb01 	strb.w	lr, [r0], #1
 80231a4:	3901      	subs	r1, #1
 80231a6:	d007      	beq.n	80231b8 <ee_number+0x84>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 80231a8:	2b00      	cmp	r3, #0
 80231aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80231ae:	dd20      	ble.n	80231f2 <ee_number+0xbe>
 80231b0:	f800 7b01 	strb.w	r7, [r0], #1
 80231b4:	3901      	subs	r1, #1
 80231b6:	d1f7      	bne.n	80231a8 <ee_number+0x74>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 80231b8:	b013      	add	sp, #76	; 0x4c
 80231ba:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
  i = 0;
 80231be:	2500      	movs	r5, #0
    while (num != 0)
 80231c0:	2a00      	cmp	r2, #0
 80231c2:	d0e4      	beq.n	802318e <ee_number+0x5a>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80231c4:	fbb2 f3fc 	udiv	r3, r2, ip
 80231c8:	fb0c 2213 	mls	r2, ip, r3, r2
 80231cc:	f818 a002 	ldrb.w	sl, [r8, r2]
 80231d0:	aa12      	add	r2, sp, #72	; 0x48
 80231d2:	442a      	add	r2, r5
 80231d4:	f802 ac44 	strb.w	sl, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 80231d8:	461a      	mov	r2, r3
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80231da:	3501      	adds	r5, #1
 80231dc:	e7f0      	b.n	80231c0 <ee_number+0x8c>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80231de:	2b00      	cmp	r3, #0
 80231e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80231e4:	ddd9      	ble.n	802319a <ee_number+0x66>
 80231e6:	2220      	movs	r2, #32
 80231e8:	f800 2b01 	strb.w	r2, [r0], #1
 80231ec:	3901      	subs	r1, #1
 80231ee:	d1f6      	bne.n	80231de <ee_number+0xaa>
 80231f0:	e7e2      	b.n	80231b8 <ee_number+0x84>
  while (i < precision--) ASSIGN_STR('0');
 80231f2:	42ae      	cmp	r6, r5
 80231f4:	f106 36ff 	add.w	r6, r6, #4294967295
 80231f8:	dd05      	ble.n	8023206 <ee_number+0xd2>
 80231fa:	2230      	movs	r2, #48	; 0x30
 80231fc:	f800 2b01 	strb.w	r2, [r0], #1
 8023200:	3901      	subs	r1, #1
 8023202:	d1f6      	bne.n	80231f2 <ee_number+0xbe>
 8023204:	e7d8      	b.n	80231b8 <ee_number+0x84>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8023206:	2d00      	cmp	r5, #0
 8023208:	f105 35ff 	add.w	r5, r5, #4294967295
 802320c:	dd08      	ble.n	8023220 <ee_number+0xec>
 802320e:	aa12      	add	r2, sp, #72	; 0x48
 8023210:	442a      	add	r2, r5
 8023212:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8023216:	f800 2b01 	strb.w	r2, [r0], #1
 802321a:	3901      	subs	r1, #1
 802321c:	d1f3      	bne.n	8023206 <ee_number+0xd2>
 802321e:	e7cb      	b.n	80231b8 <ee_number+0x84>
  while (size-- > 0) ASSIGN_STR(' ');
 8023220:	2b00      	cmp	r3, #0
 8023222:	f103 33ff 	add.w	r3, r3, #4294967295
 8023226:	ddc7      	ble.n	80231b8 <ee_number+0x84>
 8023228:	2220      	movs	r2, #32
 802322a:	f800 2b01 	strb.w	r2, [r0], #1
 802322e:	3901      	subs	r1, #1
 8023230:	d1f6      	bne.n	8023220 <ee_number+0xec>
 8023232:	e7c1      	b.n	80231b8 <ee_number+0x84>
  if (base < 2 || base > 36) return 0;
 8023234:	2000      	movs	r0, #0
 8023236:	e7bf      	b.n	80231b8 <ee_number+0x84>
 8023238:	08028af0 	.word	0x08028af0
 802323c:	08028ac8 	.word	0x08028ac8

08023240 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8023240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023244:	b087      	sub	sp, #28
 8023246:	9205      	str	r2, [sp, #20]
 8023248:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 802324a:	1e0f      	subs	r7, r1, #0
 802324c:	f340 80b9 	ble.w	80233c2 <tiny_vsnprintf_like+0x182>
 8023250:	4606      	mov	r6, r0
  {
    return 0;
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8023252:	4604      	mov	r4, r0
 8023254:	e004      	b.n	8023260 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);
    
    if (*fmt != '%')
    {
      *str++ = *fmt;
 8023256:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 802325a:	9b05      	ldr	r3, [sp, #20]
 802325c:	3301      	adds	r3, #1
 802325e:	9305      	str	r3, [sp, #20]
 8023260:	9905      	ldr	r1, [sp, #20]
 8023262:	780a      	ldrb	r2, [r1, #0]
 8023264:	b922      	cbnz	r2, 8023270 <tiny_vsnprintf_like+0x30>
 8023266:	1ba3      	subs	r3, r4, r6
 8023268:	1e78      	subs	r0, r7, #1
 802326a:	4283      	cmp	r3, r0
 802326c:	f2c0 80a3 	blt.w	80233b6 <tiny_vsnprintf_like+0x176>
    CHECK_STR_SIZE(buf, str, size);
 8023270:	1ba3      	subs	r3, r4, r6
 8023272:	f107 38ff 	add.w	r8, r7, #4294967295
 8023276:	4543      	cmp	r3, r8
 8023278:	f280 809d 	bge.w	80233b6 <tiny_vsnprintf_like+0x176>
    if (*fmt != '%')
 802327c:	2a25      	cmp	r2, #37	; 0x25
 802327e:	d1ea      	bne.n	8023256 <tiny_vsnprintf_like+0x16>
                  
    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8023280:	1c4b      	adds	r3, r1, #1
 8023282:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8023284:	784b      	ldrb	r3, [r1, #1]
 8023286:	2b30      	cmp	r3, #48	; 0x30
 8023288:	d020      	beq.n	80232cc <tiny_vsnprintf_like+0x8c>
    flags = 0;
 802328a:	f04f 0900 	mov.w	r9, #0
    }
#endif
    
    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 802328e:	3b30      	subs	r3, #48	; 0x30
 8023290:	b2db      	uxtb	r3, r3
 8023292:	2b09      	cmp	r3, #9
 8023294:	d91d      	bls.n	80232d2 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8023296:	f04f 35ff 	mov.w	r5, #4294967295
#endif
    
    // Default base
    base = 10;

    switch (*fmt)
 802329a:	9b05      	ldr	r3, [sp, #20]
 802329c:	781a      	ldrb	r2, [r3, #0]
 802329e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 80232a2:	2b20      	cmp	r3, #32
 80232a4:	d868      	bhi.n	8023378 <tiny_vsnprintf_like+0x138>
 80232a6:	e8df f003 	tbb	[pc, r3]
 80232aa:	674b      	.short	0x674b
 80232ac:	67676767 	.word	0x67676767
 80232b0:	67676767 	.word	0x67676767
 80232b4:	67631b67 	.word	0x67631b67
 80232b8:	63676767 	.word	0x63676767
 80232bc:	67676767 	.word	0x67676767
 80232c0:	67676767 	.word	0x67676767
 80232c4:	19672967 	.word	0x19672967
 80232c8:	6767      	.short	0x6767
 80232ca:	7d          	.byte	0x7d
 80232cb:	00          	.byte	0x00
      flags |= ZEROPAD;
 80232cc:	f04f 0901 	mov.w	r9, #1
 80232d0:	e7dd      	b.n	802328e <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 80232d2:	a805      	add	r0, sp, #20
 80232d4:	f7ff ff1c 	bl	8023110 <ee_skip_atoi>
 80232d8:	4605      	mov	r5, r0
 80232da:	e7de      	b.n	802329a <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 80232dc:	230a      	movs	r3, #10
 80232de:	e032      	b.n	8023346 <tiny_vsnprintf_like+0x106>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 80232e0:	3d01      	subs	r5, #1
 80232e2:	2d00      	cmp	r5, #0
 80232e4:	dd03      	ble.n	80232ee <tiny_vsnprintf_like+0xae>
 80232e6:	2320      	movs	r3, #32
 80232e8:	f804 3b01 	strb.w	r3, [r4], #1
 80232ec:	e7f8      	b.n	80232e0 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 80232ee:	9b04      	ldr	r3, [sp, #16]
 80232f0:	1d1a      	adds	r2, r3, #4
 80232f2:	9204      	str	r2, [sp, #16]
 80232f4:	781b      	ldrb	r3, [r3, #0]
 80232f6:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 80232fa:	e7ae      	b.n	802325a <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 80232fc:	9b04      	ldr	r3, [sp, #16]
 80232fe:	1d1a      	adds	r2, r3, #4
 8023300:	9204      	str	r2, [sp, #16]
 8023302:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8023306:	f1b8 0f00 	cmp.w	r8, #0
 802330a:	d00a      	beq.n	8023322 <tiny_vsnprintf_like+0xe2>
#ifdef TINY_PRINTF
        len = strlen(s);
 802330c:	4640      	mov	r0, r8
 802330e:	f7e2 fcd1 	bl	8005cb4 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8023312:	1e6b      	subs	r3, r5, #1
 8023314:	4285      	cmp	r5, r0
 8023316:	dd07      	ble.n	8023328 <tiny_vsnprintf_like+0xe8>
 8023318:	2220      	movs	r2, #32
 802331a:	f804 2b01 	strb.w	r2, [r4], #1
 802331e:	461d      	mov	r5, r3
 8023320:	e7f7      	b.n	8023312 <tiny_vsnprintf_like+0xd2>
        if (!s) s = "<NULL>";
 8023322:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80233c8 <tiny_vsnprintf_like+0x188>
 8023326:	e7f1      	b.n	802330c <tiny_vsnprintf_like+0xcc>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8023328:	2200      	movs	r2, #0
 802332a:	e006      	b.n	802333a <tiny_vsnprintf_like+0xfa>
 802332c:	4643      	mov	r3, r8
 802332e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8023332:	f804 1b01 	strb.w	r1, [r4], #1
 8023336:	3201      	adds	r2, #1
 8023338:	4698      	mov	r8, r3
 802333a:	4282      	cmp	r2, r0
 802333c:	dbf6      	blt.n	802332c <tiny_vsnprintf_like+0xec>
 802333e:	e78c      	b.n	802325a <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 8023340:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8023344:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8023346:	f019 0f02 	tst.w	r9, #2
 802334a:	d02f      	beq.n	80233ac <tiny_vsnprintf_like+0x16c>
      num = va_arg(args, int);
 802334c:	9a04      	ldr	r2, [sp, #16]
 802334e:	1d11      	adds	r1, r2, #4
 8023350:	9104      	str	r1, [sp, #16]
 8023352:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8023354:	1ba1      	subs	r1, r4, r6
 8023356:	f8cd 9008 	str.w	r9, [sp, #8]
 802335a:	f04f 30ff 	mov.w	r0, #4294967295
 802335e:	9001      	str	r0, [sp, #4]
 8023360:	9500      	str	r5, [sp, #0]
 8023362:	eba8 0101 	sub.w	r1, r8, r1
 8023366:	4620      	mov	r0, r4
 8023368:	f7ff fee4 	bl	8023134 <ee_number>
 802336c:	4604      	mov	r4, r0
 802336e:	e774      	b.n	802325a <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8023370:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8023374:	230a      	movs	r3, #10
 8023376:	e7e6      	b.n	8023346 <tiny_vsnprintf_like+0x106>
        if (*fmt != '%') *str++ = '%';
 8023378:	2a25      	cmp	r2, #37	; 0x25
 802337a:	d002      	beq.n	8023382 <tiny_vsnprintf_like+0x142>
 802337c:	2325      	movs	r3, #37	; 0x25
 802337e:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8023382:	1ba3      	subs	r3, r4, r6
 8023384:	4598      	cmp	r8, r3
 8023386:	dd0f      	ble.n	80233a8 <tiny_vsnprintf_like+0x168>
        if (*fmt)
 8023388:	9b05      	ldr	r3, [sp, #20]
 802338a:	781a      	ldrb	r2, [r3, #0]
 802338c:	b13a      	cbz	r2, 802339e <tiny_vsnprintf_like+0x15e>
          *str++ = *fmt;
 802338e:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8023392:	1ba3      	subs	r3, r4, r6
 8023394:	4598      	cmp	r8, r3
 8023396:	f73f af60 	bgt.w	802325a <tiny_vsnprintf_like+0x1a>
    base = 10;
 802339a:	230a      	movs	r3, #10
    if (qualifier == 'l')
 802339c:	e7d3      	b.n	8023346 <tiny_vsnprintf_like+0x106>
          --fmt;
 802339e:	3b01      	subs	r3, #1
 80233a0:	9305      	str	r3, [sp, #20]
 80233a2:	e7f6      	b.n	8023392 <tiny_vsnprintf_like+0x152>
        base = 16;
 80233a4:	2310      	movs	r3, #16
 80233a6:	e7ce      	b.n	8023346 <tiny_vsnprintf_like+0x106>
    base = 10;
 80233a8:	230a      	movs	r3, #10
 80233aa:	e7cc      	b.n	8023346 <tiny_vsnprintf_like+0x106>
      num = va_arg(args, unsigned int);
 80233ac:	9a04      	ldr	r2, [sp, #16]
 80233ae:	1d11      	adds	r1, r2, #4
 80233b0:	9104      	str	r1, [sp, #16]
 80233b2:	6812      	ldr	r2, [r2, #0]
 80233b4:	e7ce      	b.n	8023354 <tiny_vsnprintf_like+0x114>
  }

  *str = '\0';
 80233b6:	2300      	movs	r3, #0
 80233b8:	7023      	strb	r3, [r4, #0]
  return str - buf;
 80233ba:	1ba0      	subs	r0, r4, r6
}
 80233bc:	b007      	add	sp, #28
 80233be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 80233c2:	2000      	movs	r0, #0
 80233c4:	e7fa      	b.n	80233bc <tiny_vsnprintf_like+0x17c>
 80233c6:	bf00      	nop
 80233c8:	08028b18 	.word	0x08028b18

080233cc <xor_block>:
 80233cc:	680a      	ldr	r2, [r1, #0]
 80233ce:	6803      	ldr	r3, [r0, #0]
 80233d0:	4053      	eors	r3, r2
 80233d2:	6003      	str	r3, [r0, #0]
 80233d4:	684a      	ldr	r2, [r1, #4]
 80233d6:	6843      	ldr	r3, [r0, #4]
 80233d8:	4053      	eors	r3, r2
 80233da:	6043      	str	r3, [r0, #4]
 80233dc:	688a      	ldr	r2, [r1, #8]
 80233de:	6883      	ldr	r3, [r0, #8]
 80233e0:	4053      	eors	r3, r2
 80233e2:	6083      	str	r3, [r0, #8]
 80233e4:	68ca      	ldr	r2, [r1, #12]
 80233e6:	68c3      	ldr	r3, [r0, #12]
 80233e8:	4053      	eors	r3, r2
 80233ea:	60c3      	str	r3, [r0, #12]
 80233ec:	4770      	bx	lr

080233ee <copy_and_key>:
 80233ee:	680b      	ldr	r3, [r1, #0]
 80233f0:	b510      	push	{r4, lr}
 80233f2:	6814      	ldr	r4, [r2, #0]
 80233f4:	4063      	eors	r3, r4
 80233f6:	6003      	str	r3, [r0, #0]
 80233f8:	6854      	ldr	r4, [r2, #4]
 80233fa:	684b      	ldr	r3, [r1, #4]
 80233fc:	4063      	eors	r3, r4
 80233fe:	6043      	str	r3, [r0, #4]
 8023400:	6894      	ldr	r4, [r2, #8]
 8023402:	688b      	ldr	r3, [r1, #8]
 8023404:	4063      	eors	r3, r4
 8023406:	6083      	str	r3, [r0, #8]
 8023408:	68cb      	ldr	r3, [r1, #12]
 802340a:	68d2      	ldr	r2, [r2, #12]
 802340c:	4053      	eors	r3, r2
 802340e:	60c3      	str	r3, [r0, #12]
 8023410:	bd10      	pop	{r4, pc}
	...

08023414 <Get_Secure_sigfox_key>:
 8023414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023416:	4b13      	ldr	r3, [pc, #76]	; (8023464 <Get_Secure_sigfox_key+0x50>)
 8023418:	b089      	sub	sp, #36	; 0x24
 802341a:	aa04      	add	r2, sp, #16
 802341c:	4604      	mov	r4, r0
 802341e:	f103 0710 	add.w	r7, r3, #16
 8023422:	4615      	mov	r5, r2
 8023424:	6818      	ldr	r0, [r3, #0]
 8023426:	6859      	ldr	r1, [r3, #4]
 8023428:	4616      	mov	r6, r2
 802342a:	c603      	stmia	r6!, {r0, r1}
 802342c:	3308      	adds	r3, #8
 802342e:	42bb      	cmp	r3, r7
 8023430:	4632      	mov	r2, r6
 8023432:	d1f7      	bne.n	8023424 <Get_Secure_sigfox_key+0x10>
 8023434:	466b      	mov	r3, sp
 8023436:	2210      	movs	r2, #16
 8023438:	2100      	movs	r1, #0
 802343a:	4618      	mov	r0, r3
 802343c:	f000 fd6c 	bl	8023f18 <memset>
 8023440:	462a      	mov	r2, r5
 8023442:	4603      	mov	r3, r0
 8023444:	4605      	mov	r5, r0
 8023446:	2100      	movs	r1, #0
 8023448:	f812 0b01 	ldrb.w	r0, [r2], #1
 802344c:	3101      	adds	r1, #1
 802344e:	43c0      	mvns	r0, r0
 8023450:	2910      	cmp	r1, #16
 8023452:	f805 0b01 	strb.w	r0, [r5], #1
 8023456:	d1f7      	bne.n	8023448 <Get_Secure_sigfox_key+0x34>
 8023458:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802345a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 802345e:	b009      	add	sp, #36	; 0x24
 8023460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023462:	bf00      	nop
 8023464:	08028b1f 	.word	0x08028b1f

08023468 <sigfox_aes_set_key.constprop.0>:
 8023468:	4b1f      	ldr	r3, [pc, #124]	; (80234e8 <sigfox_aes_set_key.constprop.0+0x80>)
 802346a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802346c:	461a      	mov	r2, r3
 802346e:	f100 0410 	add.w	r4, r0, #16
 8023472:	4619      	mov	r1, r3
 8023474:	42a0      	cmp	r0, r4
 8023476:	d131      	bne.n	80234dc <sigfox_aes_set_key.constprop.0+0x74>
 8023478:	220a      	movs	r2, #10
 802347a:	4f1c      	ldr	r7, [pc, #112]	; (80234ec <sigfox_aes_set_key.constprop.0+0x84>)
 802347c:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
 8023480:	2610      	movs	r6, #16
 8023482:	f04f 0c01 	mov.w	ip, #1
 8023486:	0732      	lsls	r2, r6, #28
 8023488:	7b1d      	ldrb	r5, [r3, #12]
 802348a:	7b5c      	ldrb	r4, [r3, #13]
 802348c:	7b98      	ldrb	r0, [r3, #14]
 802348e:	7bd9      	ldrb	r1, [r3, #15]
 8023490:	d111      	bne.n	80234b6 <sigfox_aes_set_key.constprop.0+0x4e>
 8023492:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8023496:	f817 e004 	ldrb.w	lr, [r7, r4]
 802349a:	5c3c      	ldrb	r4, [r7, r0]
 802349c:	5c78      	ldrb	r0, [r7, r1]
 802349e:	5d79      	ldrb	r1, [r7, r5]
 80234a0:	0055      	lsls	r5, r2, #1
 80234a2:	442a      	add	r2, r5
 80234a4:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80234a8:	ea8c 0e0e 	eor.w	lr, ip, lr
 80234ac:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 80234b0:	fa5f fc82 	uxtb.w	ip, r2
 80234b4:	4675      	mov	r5, lr
 80234b6:	781a      	ldrb	r2, [r3, #0]
 80234b8:	4055      	eors	r5, r2
 80234ba:	785a      	ldrb	r2, [r3, #1]
 80234bc:	741d      	strb	r5, [r3, #16]
 80234be:	4054      	eors	r4, r2
 80234c0:	789a      	ldrb	r2, [r3, #2]
 80234c2:	745c      	strb	r4, [r3, #17]
 80234c4:	4050      	eors	r0, r2
 80234c6:	78da      	ldrb	r2, [r3, #3]
 80234c8:	7498      	strb	r0, [r3, #18]
 80234ca:	3604      	adds	r6, #4
 80234cc:	4051      	eors	r1, r2
 80234ce:	2eb0      	cmp	r6, #176	; 0xb0
 80234d0:	74d9      	strb	r1, [r3, #19]
 80234d2:	f103 0304 	add.w	r3, r3, #4
 80234d6:	d1d6      	bne.n	8023486 <sigfox_aes_set_key.constprop.0+0x1e>
 80234d8:	2000      	movs	r0, #0
 80234da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80234dc:	f810 5b01 	ldrb.w	r5, [r0], #1
 80234e0:	f802 5b01 	strb.w	r5, [r2], #1
 80234e4:	e7c6      	b.n	8023474 <sigfox_aes_set_key.constprop.0+0xc>
 80234e6:	bf00      	nop
 80234e8:	20002378 	.word	0x20002378
 80234ec:	08029230 	.word	0x08029230

080234f0 <Get_decrypted_sf_data.constprop.0>:
 80234f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234f4:	b0ad      	sub	sp, #180	; 0xb4
 80234f6:	2400      	movs	r4, #0
 80234f8:	2210      	movs	r2, #16
 80234fa:	4621      	mov	r1, r4
 80234fc:	9000      	str	r0, [sp, #0]
 80234fe:	a80c      	add	r0, sp, #48	; 0x30
 8023500:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8023504:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8023508:	f000 fd06 	bl	8023f18 <memset>
 802350c:	a80c      	add	r0, sp, #48	; 0x30
 802350e:	f7ff ff81 	bl	8023414 <Get_Secure_sigfox_key>
 8023512:	2230      	movs	r2, #48	; 0x30
 8023514:	4621      	mov	r1, r4
 8023516:	a814      	add	r0, sp, #80	; 0x50
 8023518:	f000 fcfe 	bl	8023f18 <memset>
 802351c:	4a77      	ldr	r2, [pc, #476]	; (80236fc <Get_decrypted_sf_data.constprop.0+0x20c>)
 802351e:	6813      	ldr	r3, [r2, #0]
 8023520:	3301      	adds	r3, #1
 8023522:	2b01      	cmp	r3, #1
 8023524:	6013      	str	r3, [r2, #0]
 8023526:	d015      	beq.n	8023554 <Get_decrypted_sf_data.constprop.0+0x64>
 8023528:	2031      	movs	r0, #49	; 0x31
 802352a:	f000 fcd7 	bl	8023edc <malloc>
 802352e:	4604      	mov	r4, r0
 8023530:	2800      	cmp	r0, #0
 8023532:	d053      	beq.n	80235dc <Get_decrypted_sf_data.constprop.0+0xec>
 8023534:	2200      	movs	r2, #0
 8023536:	4e72      	ldr	r6, [pc, #456]	; (8023700 <Get_decrypted_sf_data.constprop.0+0x210>)
 8023538:	4f72      	ldr	r7, [pc, #456]	; (8023704 <Get_decrypted_sf_data.constprop.0+0x214>)
 802353a:	4611      	mov	r1, r2
 802353c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8023540:	b9db      	cbnz	r3, 802357a <Get_decrypted_sf_data.constprop.0+0x8a>
 8023542:	4621      	mov	r1, r4
 8023544:	a814      	add	r0, sp, #80	; 0x50
 8023546:	4615      	mov	r5, r2
 8023548:	f000 fcd8 	bl	8023efc <memcpy>
 802354c:	4620      	mov	r0, r4
 802354e:	f000 fccd 	bl	8023eec <free>
 8023552:	e22c      	b.n	80239ae <Get_decrypted_sf_data.constprop.0+0x4be>
 8023554:	4d6b      	ldr	r5, [pc, #428]	; (8023704 <Get_decrypted_sf_data.constprop.0+0x214>)
 8023556:	4e6c      	ldr	r6, [pc, #432]	; (8023708 <Get_decrypted_sf_data.constprop.0+0x218>)
 8023558:	486b      	ldr	r0, [pc, #428]	; (8023708 <Get_decrypted_sf_data.constprop.0+0x218>)
 802355a:	4621      	mov	r1, r4
 802355c:	f000 fdbc 	bl	80240d8 <strchr>
 8023560:	b140      	cbz	r0, 8023574 <Get_decrypted_sf_data.constprop.0+0x84>
 8023562:	1b80      	subs	r0, r0, r6
 8023564:	b200      	sxth	r0, r0
 8023566:	3401      	adds	r4, #1
 8023568:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 802356c:	f825 0b02 	strh.w	r0, [r5], #2
 8023570:	d1f2      	bne.n	8023558 <Get_decrypted_sf_data.constprop.0+0x68>
 8023572:	e7d9      	b.n	8023528 <Get_decrypted_sf_data.constprop.0+0x38>
 8023574:	f04f 30ff 	mov.w	r0, #4294967295
 8023578:	e7f5      	b.n	8023566 <Get_decrypted_sf_data.constprop.0+0x76>
 802357a:	2b3d      	cmp	r3, #61	; 0x3d
 802357c:	f000 820b 	beq.w	8023996 <Get_decrypted_sf_data.constprop.0+0x4a6>
 8023580:	2b20      	cmp	r3, #32
 8023582:	bf08      	it	eq
 8023584:	232d      	moveq	r3, #45	; 0x2d
 8023586:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
 802358a:	2b00      	cmp	r3, #0
 802358c:	dbd6      	blt.n	802353c <Get_decrypted_sf_data.constprop.0+0x4c>
 802358e:	f001 0503 	and.w	r5, r1, #3
 8023592:	2d02      	cmp	r5, #2
 8023594:	eb04 0002 	add.w	r0, r4, r2
 8023598:	d00f      	beq.n	80235ba <Get_decrypted_sf_data.constprop.0+0xca>
 802359a:	2d03      	cmp	r5, #3
 802359c:	d014      	beq.n	80235c8 <Get_decrypted_sf_data.constprop.0+0xd8>
 802359e:	2d01      	cmp	r5, #1
 80235a0:	d002      	beq.n	80235a8 <Get_decrypted_sf_data.constprop.0+0xb8>
 80235a2:	009b      	lsls	r3, r3, #2
 80235a4:	7003      	strb	r3, [r0, #0]
 80235a6:	e006      	b.n	80235b6 <Get_decrypted_sf_data.constprop.0+0xc6>
 80235a8:	7805      	ldrb	r5, [r0, #0]
 80235aa:	ea45 1523 	orr.w	r5, r5, r3, asr #4
 80235ae:	3201      	adds	r2, #1
 80235b0:	7005      	strb	r5, [r0, #0]
 80235b2:	011b      	lsls	r3, r3, #4
 80235b4:	54a3      	strb	r3, [r4, r2]
 80235b6:	3101      	adds	r1, #1
 80235b8:	e7c0      	b.n	802353c <Get_decrypted_sf_data.constprop.0+0x4c>
 80235ba:	7805      	ldrb	r5, [r0, #0]
 80235bc:	ea45 05a3 	orr.w	r5, r5, r3, asr #2
 80235c0:	3201      	adds	r2, #1
 80235c2:	7005      	strb	r5, [r0, #0]
 80235c4:	019b      	lsls	r3, r3, #6
 80235c6:	e7f5      	b.n	80235b4 <Get_decrypted_sf_data.constprop.0+0xc4>
 80235c8:	7805      	ldrb	r5, [r0, #0]
 80235ca:	3201      	adds	r2, #1
 80235cc:	432b      	orrs	r3, r5
 80235ce:	e7e9      	b.n	80235a4 <Get_decrypted_sf_data.constprop.0+0xb4>
 80235d0:	1c53      	adds	r3, r2, #1
 80235d2:	2100      	movs	r1, #0
 80235d4:	54e1      	strb	r1, [r4, r3]
 80235d6:	e7b4      	b.n	8023542 <Get_decrypted_sf_data.constprop.0+0x52>
 80235d8:	4613      	mov	r3, r2
 80235da:	e7fa      	b.n	80235d2 <Get_decrypted_sf_data.constprop.0+0xe2>
 80235dc:	4605      	mov	r5, r0
 80235de:	e1e6      	b.n	80239ae <Get_decrypted_sf_data.constprop.0+0x4be>
 80235e0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80235e4:	43c9      	mvns	r1, r1
 80235e6:	f804 1b01 	strb.w	r1, [r4], #1
 80235ea:	3301      	adds	r3, #1
 80235ec:	e1e8      	b.n	80239c0 <Get_decrypted_sf_data.constprop.0+0x4d0>
 80235ee:	4d47      	ldr	r5, [pc, #284]	; (802370c <Get_decrypted_sf_data.constprop.0+0x21c>)
 80235f0:	f895 20f0 	ldrb.w	r2, [r5, #240]	; 0xf0
 80235f4:	2a00      	cmp	r2, #0
 80235f6:	f000 81f8 	beq.w	80239ea <Get_decrypted_sf_data.constprop.0+0x4fa>
 80235fa:	683b      	ldr	r3, [r7, #0]
 80235fc:	9304      	str	r3, [sp, #16]
 80235fe:	687b      	ldr	r3, [r7, #4]
 8023600:	9305      	str	r3, [sp, #20]
 8023602:	68bb      	ldr	r3, [r7, #8]
 8023604:	9306      	str	r3, [sp, #24]
 8023606:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 802360a:	68fb      	ldr	r3, [r7, #12]
 802360c:	9307      	str	r3, [sp, #28]
 802360e:	4639      	mov	r1, r7
 8023610:	a810      	add	r0, sp, #64	; 0x40
 8023612:	f7ff feec 	bl	80233ee <copy_and_key>
 8023616:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 802361a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 802361e:	5ce3      	ldrb	r3, [r4, r3]
 8023620:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8023624:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8023628:	5ca2      	ldrb	r2, [r4, r2]
 802362a:	5ce3      	ldrb	r3, [r4, r3]
 802362c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 8023630:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8023634:	4e36      	ldr	r6, [pc, #216]	; (8023710 <Get_decrypted_sf_data.constprop.0+0x220>)
 8023636:	5ce3      	ldrb	r3, [r4, r3]
 8023638:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 802363c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8023640:	5ce3      	ldrb	r3, [r4, r3]
 8023642:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8023646:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
 802364a:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 802364e:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8023652:	5ce3      	ldrb	r3, [r4, r3]
 8023654:	5ca2      	ldrb	r2, [r4, r2]
 8023656:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
 802365a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 802365e:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 8023662:	5ca2      	ldrb	r2, [r4, r2]
 8023664:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
 8023668:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 802366c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8023670:	5ca2      	ldrb	r2, [r4, r2]
 8023672:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
 8023676:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
 802367a:	5ce3      	ldrb	r3, [r4, r3]
 802367c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
 8023680:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8023684:	5ca2      	ldrb	r2, [r4, r2]
 8023686:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
 802368a:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 802368e:	5ce3      	ldrb	r3, [r4, r3]
 8023690:	5ca2      	ldrb	r2, [r4, r2]
 8023692:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 8023696:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 802369a:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
 802369e:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 80236a2:	f895 10f0 	ldrb.w	r1, [r5, #240]	; 0xf0
 80236a6:	5ca2      	ldrb	r2, [r4, r2]
 80236a8:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 80236ac:	3901      	subs	r1, #1
 80236ae:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 80236b2:	5ce3      	ldrb	r3, [r4, r3]
 80236b4:	5ca2      	ldrb	r2, [r4, r2]
 80236b6:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 80236ba:	b2c9      	uxtb	r1, r1
 80236bc:	eb05 1301 	add.w	r3, r5, r1, lsl #4
 80236c0:	4d14      	ldr	r5, [pc, #80]	; (8023714 <Get_decrypted_sf_data.constprop.0+0x224>)
 80236c2:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
 80236c6:	9301      	str	r3, [sp, #4]
 80236c8:	4b10      	ldr	r3, [pc, #64]	; (802370c <Get_decrypted_sf_data.constprop.0+0x21c>)
 80236ca:	9a01      	ldr	r2, [sp, #4]
 80236cc:	4293      	cmp	r3, r2
 80236ce:	d123      	bne.n	8023718 <Get_decrypted_sf_data.constprop.0+0x228>
 80236d0:	461a      	mov	r2, r3
 80236d2:	9800      	ldr	r0, [sp, #0]
 80236d4:	a910      	add	r1, sp, #64	; 0x40
 80236d6:	f7ff fe8a 	bl	80233ee <copy_and_key>
 80236da:	9800      	ldr	r0, [sp, #0]
 80236dc:	a908      	add	r1, sp, #32
 80236de:	f7ff fe75 	bl	80233cc <xor_block>
 80236e2:	9b04      	ldr	r3, [sp, #16]
 80236e4:	9308      	str	r3, [sp, #32]
 80236e6:	9b05      	ldr	r3, [sp, #20]
 80236e8:	9309      	str	r3, [sp, #36]	; 0x24
 80236ea:	9b06      	ldr	r3, [sp, #24]
 80236ec:	930a      	str	r3, [sp, #40]	; 0x28
 80236ee:	9b07      	ldr	r3, [sp, #28]
 80236f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80236f2:	9b00      	ldr	r3, [sp, #0]
 80236f4:	3310      	adds	r3, #16
 80236f6:	3710      	adds	r7, #16
 80236f8:	9300      	str	r3, [sp, #0]
 80236fa:	e171      	b.n	80239e0 <Get_decrypted_sf_data.constprop.0+0x4f0>
 80236fc:	2000267c 	.word	0x2000267c
 8023700:	0803e500 	.word	0x0803e500
 8023704:	2000246a 	.word	0x2000246a
 8023708:	2000020c 	.word	0x2000020c
 802370c:	20002378 	.word	0x20002378
 8023710:	08028e30 	.word	0x08028e30
 8023714:	08029030 	.word	0x08029030
 8023718:	9901      	ldr	r1, [sp, #4]
 802371a:	a810      	add	r0, sp, #64	; 0x40
 802371c:	f7ff fe56 	bl	80233cc <xor_block>
 8023720:	e9dd 3010 	ldrd	r3, r0, [sp, #64]	; 0x40
 8023724:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8023728:	fa5f fa83 	uxtb.w	sl, r3
 802372c:	f3c3 2907 	ubfx	r9, r3, #8, #8
 8023730:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8023734:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023738:	f815 e00a 	ldrb.w	lr, [r5, sl]
 802373c:	f816 3009 	ldrb.w	r3, [r6, r9]
 8023740:	9202      	str	r2, [sp, #8]
 8023742:	4aac      	ldr	r2, [pc, #688]	; (80239f4 <Get_decrypted_sf_data.constprop.0+0x504>)
 8023744:	ea8e 0e03 	eor.w	lr, lr, r3
 8023748:	f812 3008 	ldrb.w	r3, [r2, r8]
 802374c:	ea8e 0e03 	eor.w	lr, lr, r3
 8023750:	4ba9      	ldr	r3, [pc, #676]	; (80239f8 <Get_decrypted_sf_data.constprop.0+0x508>)
 8023752:	f813 b00c 	ldrb.w	fp, [r3, ip]
 8023756:	ea8e 0e0b 	eor.w	lr, lr, fp
 802375a:	f813 b00a 	ldrb.w	fp, [r3, sl]
 802375e:	f814 e00e 	ldrb.w	lr, [r4, lr]
 8023762:	f88d e040 	strb.w	lr, [sp, #64]	; 0x40
 8023766:	f815 e009 	ldrb.w	lr, [r5, r9]
 802376a:	ea8b 0b0e 	eor.w	fp, fp, lr
 802376e:	f816 e008 	ldrb.w	lr, [r6, r8]
 8023772:	ea8b 0e0e 	eor.w	lr, fp, lr
 8023776:	f812 b00c 	ldrb.w	fp, [r2, ip]
 802377a:	ea8e 0e0b 	eor.w	lr, lr, fp
 802377e:	f812 b00a 	ldrb.w	fp, [r2, sl]
 8023782:	f814 e00e 	ldrb.w	lr, [r4, lr]
 8023786:	f88d e045 	strb.w	lr, [sp, #69]	; 0x45
 802378a:	f813 e009 	ldrb.w	lr, [r3, r9]
 802378e:	f812 9009 	ldrb.w	r9, [r2, r9]
 8023792:	ea8b 0b0e 	eor.w	fp, fp, lr
 8023796:	f815 e008 	ldrb.w	lr, [r5, r8]
 802379a:	ea8b 0e0e 	eor.w	lr, fp, lr
 802379e:	f816 b00c 	ldrb.w	fp, [r6, ip]
 80237a2:	ea8e 0e0b 	eor.w	lr, lr, fp
 80237a6:	f814 e00e 	ldrb.w	lr, [r4, lr]
 80237aa:	f88d e04a 	strb.w	lr, [sp, #74]	; 0x4a
 80237ae:	f816 e00a 	ldrb.w	lr, [r6, sl]
 80237b2:	ea8e 0e09 	eor.w	lr, lr, r9
 80237b6:	f813 9008 	ldrb.w	r9, [r3, r8]
 80237ba:	ea8e 0e09 	eor.w	lr, lr, r9
 80237be:	f815 900c 	ldrb.w	r9, [r5, ip]
 80237c2:	ea8e 0e09 	eor.w	lr, lr, r9
 80237c6:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80237ca:	fa5f f980 	uxtb.w	r9, r0
 80237ce:	f814 c00e 	ldrb.w	ip, [r4, lr]
 80237d2:	f815 a009 	ldrb.w	sl, [r5, r9]
 80237d6:	f88d c04f 	strb.w	ip, [sp, #79]	; 0x4f
 80237da:	f3c0 4e07 	ubfx	lr, r0, #16, #8
 80237de:	f816 c008 	ldrb.w	ip, [r6, r8]
 80237e2:	0e00      	lsrs	r0, r0, #24
 80237e4:	ea8a 0a0c 	eor.w	sl, sl, ip
 80237e8:	f812 c00e 	ldrb.w	ip, [r2, lr]
 80237ec:	ea8a 0c0c 	eor.w	ip, sl, ip
 80237f0:	f813 a000 	ldrb.w	sl, [r3, r0]
 80237f4:	ea8c 0c0a 	eor.w	ip, ip, sl
 80237f8:	f813 a009 	ldrb.w	sl, [r3, r9]
 80237fc:	f814 c00c 	ldrb.w	ip, [r4, ip]
 8023800:	f88d c044 	strb.w	ip, [sp, #68]	; 0x44
 8023804:	f815 c008 	ldrb.w	ip, [r5, r8]
 8023808:	ea8a 0a0c 	eor.w	sl, sl, ip
 802380c:	f816 c00e 	ldrb.w	ip, [r6, lr]
 8023810:	ea8a 0c0c 	eor.w	ip, sl, ip
 8023814:	f812 a000 	ldrb.w	sl, [r2, r0]
 8023818:	ea8c 0c0a 	eor.w	ip, ip, sl
 802381c:	f812 a009 	ldrb.w	sl, [r2, r9]
 8023820:	f814 c00c 	ldrb.w	ip, [r4, ip]
 8023824:	f88d c049 	strb.w	ip, [sp, #73]	; 0x49
 8023828:	f813 c008 	ldrb.w	ip, [r3, r8]
 802382c:	f812 8008 	ldrb.w	r8, [r2, r8]
 8023830:	ea8a 0a0c 	eor.w	sl, sl, ip
 8023834:	f815 c00e 	ldrb.w	ip, [r5, lr]
 8023838:	ea8a 0c0c 	eor.w	ip, sl, ip
 802383c:	f816 a000 	ldrb.w	sl, [r6, r0]
 8023840:	ea8c 0c0a 	eor.w	ip, ip, sl
 8023844:	f814 c00c 	ldrb.w	ip, [r4, ip]
 8023848:	f88d c04e 	strb.w	ip, [sp, #78]	; 0x4e
 802384c:	f816 c009 	ldrb.w	ip, [r6, r9]
 8023850:	ea8c 0c08 	eor.w	ip, ip, r8
 8023854:	f813 800e 	ldrb.w	r8, [r3, lr]
 8023858:	ea8c 0c08 	eor.w	ip, ip, r8
 802385c:	f815 8000 	ldrb.w	r8, [r5, r0]
 8023860:	ea8c 0c08 	eor.w	ip, ip, r8
 8023864:	f3c1 2e07 	ubfx	lr, r1, #8, #8
 8023868:	fa5f f881 	uxtb.w	r8, r1
 802386c:	f814 000c 	ldrb.w	r0, [r4, ip]
 8023870:	f815 9008 	ldrb.w	r9, [r5, r8]
 8023874:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
 8023878:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 802387c:	f816 000e 	ldrb.w	r0, [r6, lr]
 8023880:	0e09      	lsrs	r1, r1, #24
 8023882:	ea89 0900 	eor.w	r9, r9, r0
 8023886:	f812 000c 	ldrb.w	r0, [r2, ip]
 802388a:	ea89 0000 	eor.w	r0, r9, r0
 802388e:	f813 9001 	ldrb.w	r9, [r3, r1]
 8023892:	ea80 0009 	eor.w	r0, r0, r9
 8023896:	f813 9008 	ldrb.w	r9, [r3, r8]
 802389a:	5c20      	ldrb	r0, [r4, r0]
 802389c:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
 80238a0:	f815 000e 	ldrb.w	r0, [r5, lr]
 80238a4:	ea89 0900 	eor.w	r9, r9, r0
 80238a8:	f816 000c 	ldrb.w	r0, [r6, ip]
 80238ac:	ea89 0000 	eor.w	r0, r9, r0
 80238b0:	f812 9001 	ldrb.w	r9, [r2, r1]
 80238b4:	ea80 0009 	eor.w	r0, r0, r9
 80238b8:	5c20      	ldrb	r0, [r4, r0]
 80238ba:	f88d 004d 	strb.w	r0, [sp, #77]	; 0x4d
 80238be:	f813 000e 	ldrb.w	r0, [r3, lr]
 80238c2:	f812 9008 	ldrb.w	r9, [r2, r8]
 80238c6:	f812 e00e 	ldrb.w	lr, [r2, lr]
 80238ca:	ea89 0900 	eor.w	r9, r9, r0
 80238ce:	f815 000c 	ldrb.w	r0, [r5, ip]
 80238d2:	ea89 0000 	eor.w	r0, r9, r0
 80238d6:	f816 9001 	ldrb.w	r9, [r6, r1]
 80238da:	ea80 0009 	eor.w	r0, r0, r9
 80238de:	5c20      	ldrb	r0, [r4, r0]
 80238e0:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
 80238e4:	f816 0008 	ldrb.w	r0, [r6, r8]
 80238e8:	ea80 000e 	eor.w	r0, r0, lr
 80238ec:	f813 e00c 	ldrb.w	lr, [r3, ip]
 80238f0:	ea80 000e 	eor.w	r0, r0, lr
 80238f4:	f815 e001 	ldrb.w	lr, [r5, r1]
 80238f8:	ea80 000e 	eor.w	r0, r0, lr
 80238fc:	f89d e008 	ldrb.w	lr, [sp, #8]
 8023900:	5c21      	ldrb	r1, [r4, r0]
 8023902:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 8023906:	9902      	ldr	r1, [sp, #8]
 8023908:	f815 900e 	ldrb.w	r9, [r5, lr]
 802390c:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8023910:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8023914:	ea4f 6811 	mov.w	r8, r1, lsr #24
 8023918:	f816 100c 	ldrb.w	r1, [r6, ip]
 802391c:	ea89 0901 	eor.w	r9, r9, r1
 8023920:	5c11      	ldrb	r1, [r2, r0]
 8023922:	ea89 0101 	eor.w	r1, r9, r1
 8023926:	f813 9008 	ldrb.w	r9, [r3, r8]
 802392a:	ea81 0109 	eor.w	r1, r1, r9
 802392e:	f813 900e 	ldrb.w	r9, [r3, lr]
 8023932:	5c61      	ldrb	r1, [r4, r1]
 8023934:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 8023938:	f815 100c 	ldrb.w	r1, [r5, ip]
 802393c:	ea89 0901 	eor.w	r9, r9, r1
 8023940:	5c31      	ldrb	r1, [r6, r0]
 8023942:	ea89 0101 	eor.w	r1, r9, r1
 8023946:	f812 9008 	ldrb.w	r9, [r2, r8]
 802394a:	ea81 0109 	eor.w	r1, r1, r9
 802394e:	f812 900e 	ldrb.w	r9, [r2, lr]
 8023952:	5c61      	ldrb	r1, [r4, r1]
 8023954:	f88d 1041 	strb.w	r1, [sp, #65]	; 0x41
 8023958:	f813 100c 	ldrb.w	r1, [r3, ip]
 802395c:	ea89 0901 	eor.w	r9, r9, r1
 8023960:	5c29      	ldrb	r1, [r5, r0]
 8023962:	ea89 0101 	eor.w	r1, r9, r1
 8023966:	f816 9008 	ldrb.w	r9, [r6, r8]
 802396a:	ea81 0109 	eor.w	r1, r1, r9
 802396e:	5c61      	ldrb	r1, [r4, r1]
 8023970:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
 8023974:	f816 100e 	ldrb.w	r1, [r6, lr]
 8023978:	f812 200c 	ldrb.w	r2, [r2, ip]
 802397c:	4051      	eors	r1, r2
 802397e:	5c1a      	ldrb	r2, [r3, r0]
 8023980:	4051      	eors	r1, r2
 8023982:	f815 2008 	ldrb.w	r2, [r5, r8]
 8023986:	4051      	eors	r1, r2
 8023988:	5c63      	ldrb	r3, [r4, r1]
 802398a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 802398e:	9b01      	ldr	r3, [sp, #4]
 8023990:	3b10      	subs	r3, #16
 8023992:	9301      	str	r3, [sp, #4]
 8023994:	e698      	b.n	80236c8 <Get_decrypted_sf_data.constprop.0+0x1d8>
 8023996:	f001 0103 	and.w	r1, r1, #3
 802399a:	2902      	cmp	r1, #2
 802399c:	f43f ae18 	beq.w	80235d0 <Get_decrypted_sf_data.constprop.0+0xe0>
 80239a0:	2903      	cmp	r1, #3
 80239a2:	f43f ae19 	beq.w	80235d8 <Get_decrypted_sf_data.constprop.0+0xe8>
 80239a6:	4620      	mov	r0, r4
 80239a8:	f000 faa0 	bl	8023eec <free>
 80239ac:	2500      	movs	r5, #0
 80239ae:	2230      	movs	r2, #48	; 0x30
 80239b0:	2100      	movs	r1, #0
 80239b2:	a820      	add	r0, sp, #128	; 0x80
 80239b4:	f000 fab0 	bl	8023f18 <memset>
 80239b8:	ac20      	add	r4, sp, #128	; 0x80
 80239ba:	b2ea      	uxtb	r2, r5
 80239bc:	a814      	add	r0, sp, #80	; 0x50
 80239be:	2300      	movs	r3, #0
 80239c0:	429a      	cmp	r2, r3
 80239c2:	f73f ae0d 	bgt.w	80235e0 <Get_decrypted_sf_data.constprop.0+0xf0>
 80239c6:	a80c      	add	r0, sp, #48	; 0x30
 80239c8:	f7ff fd4e 	bl	8023468 <sigfox_aes_set_key.constprop.0>
 80239cc:	2210      	movs	r2, #16
 80239ce:	2100      	movs	r1, #0
 80239d0:	a80c      	add	r0, sp, #48	; 0x30
 80239d2:	f000 faa1 	bl	8023f18 <memset>
 80239d6:	9b00      	ldr	r3, [sp, #0]
 80239d8:	4c08      	ldr	r4, [pc, #32]	; (80239fc <Get_decrypted_sf_data.constprop.0+0x50c>)
 80239da:	3330      	adds	r3, #48	; 0x30
 80239dc:	9303      	str	r3, [sp, #12]
 80239de:	af20      	add	r7, sp, #128	; 0x80
 80239e0:	9b00      	ldr	r3, [sp, #0]
 80239e2:	9a03      	ldr	r2, [sp, #12]
 80239e4:	4293      	cmp	r3, r2
 80239e6:	f47f ae02 	bne.w	80235ee <Get_decrypted_sf_data.constprop.0+0xfe>
 80239ea:	2000      	movs	r0, #0
 80239ec:	b02d      	add	sp, #180	; 0xb4
 80239ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80239f2:	bf00      	nop
 80239f4:	08028f30 	.word	0x08028f30
 80239f8:	08028d30 	.word	0x08028d30
 80239fc:	08029130 	.word	0x08029130

08023a00 <Get_decrypted_sf_key.part.0>:
 8023a00:	b530      	push	{r4, r5, lr}
 8023a02:	b08d      	sub	sp, #52	; 0x34
 8023a04:	ad04      	add	r5, sp, #16
 8023a06:	4604      	mov	r4, r0
 8023a08:	2210      	movs	r2, #16
 8023a0a:	2100      	movs	r1, #0
 8023a0c:	4628      	mov	r0, r5
 8023a0e:	f000 fa83 	bl	8023f18 <memset>
 8023a12:	4668      	mov	r0, sp
 8023a14:	f7ff fd6c 	bl	80234f0 <Get_decrypted_sf_data.constprop.0>
 8023a18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8023a1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8023a20:	b00d      	add	sp, #52	; 0x34
 8023a22:	bd30      	pop	{r4, r5, pc}

08023a24 <sigfox_aes_cbc_encrypt.constprop.0>:
 8023a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a28:	b08b      	sub	sp, #44	; 0x2c
 8023a2a:	461e      	mov	r6, r3
 8023a2c:	4ccb      	ldr	r4, [pc, #812]	; (8023d5c <sigfox_aes_cbc_encrypt.constprop.0+0x338>)
 8023a2e:	eb00 1302 	add.w	r3, r0, r2, lsl #4
 8023a32:	4680      	mov	r8, r0
 8023a34:	f101 0710 	add.w	r7, r1, #16
 8023a38:	9305      	str	r3, [sp, #20]
 8023a3a:	9b05      	ldr	r3, [sp, #20]
 8023a3c:	4598      	cmp	r8, r3
 8023a3e:	d103      	bne.n	8023a48 <sigfox_aes_cbc_encrypt.constprop.0+0x24>
 8023a40:	2000      	movs	r0, #0
 8023a42:	b00b      	add	sp, #44	; 0x2c
 8023a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a48:	4641      	mov	r1, r8
 8023a4a:	4630      	mov	r0, r6
 8023a4c:	f7ff fcbe 	bl	80233cc <xor_block>
 8023a50:	4bc3      	ldr	r3, [pc, #780]	; (8023d60 <sigfox_aes_cbc_encrypt.constprop.0+0x33c>)
 8023a52:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8023a56:	2b00      	cmp	r3, #0
 8023a58:	f000 817d 	beq.w	8023d56 <sigfox_aes_cbc_encrypt.constprop.0+0x332>
 8023a5c:	4ac0      	ldr	r2, [pc, #768]	; (8023d60 <sigfox_aes_cbc_encrypt.constprop.0+0x33c>)
 8023a5e:	4dc1      	ldr	r5, [pc, #772]	; (8023d64 <sigfox_aes_cbc_encrypt.constprop.0+0x340>)
 8023a60:	4631      	mov	r1, r6
 8023a62:	a806      	add	r0, sp, #24
 8023a64:	f7ff fcc3 	bl	80233ee <copy_and_key>
 8023a68:	2301      	movs	r3, #1
 8023a6a:	9300      	str	r3, [sp, #0]
 8023a6c:	4bbc      	ldr	r3, [pc, #752]	; (8023d60 <sigfox_aes_cbc_encrypt.constprop.0+0x33c>)
 8023a6e:	9a00      	ldr	r2, [sp, #0]
 8023a70:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8023a74:	9204      	str	r2, [sp, #16]
 8023a76:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8023a7a:	9a00      	ldr	r2, [sp, #0]
 8023a7c:	4293      	cmp	r3, r2
 8023a7e:	d864      	bhi.n	8023b4a <sigfox_aes_cbc_encrypt.constprop.0+0x126>
 8023a80:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8023a84:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8023a88:	5ce3      	ldrb	r3, [r4, r3]
 8023a8a:	f88d 3018 	strb.w	r3, [sp, #24]
 8023a8e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8023a92:	5ca2      	ldrb	r2, [r4, r2]
 8023a94:	5ce3      	ldrb	r3, [r4, r3]
 8023a96:	f88d 301c 	strb.w	r3, [sp, #28]
 8023a9a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8023a9e:	5ce3      	ldrb	r3, [r4, r3]
 8023aa0:	f88d 3020 	strb.w	r3, [sp, #32]
 8023aa4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8023aa8:	5ce3      	ldrb	r3, [r4, r3]
 8023aaa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8023aae:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8023ab2:	f88d 2019 	strb.w	r2, [sp, #25]
 8023ab6:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8023aba:	5ce3      	ldrb	r3, [r4, r3]
 8023abc:	5ca2      	ldrb	r2, [r4, r2]
 8023abe:	f88d 201d 	strb.w	r2, [sp, #29]
 8023ac2:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8023ac6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8023aca:	5ca2      	ldrb	r2, [r4, r2]
 8023acc:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8023ad0:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
 8023ad4:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8023ad8:	5ca2      	ldrb	r2, [r4, r2]
 8023ada:	f88d 201a 	strb.w	r2, [sp, #26]
 8023ade:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8023ae2:	5ce3      	ldrb	r3, [r4, r3]
 8023ae4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8023ae8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8023aec:	5ca2      	ldrb	r2, [r4, r2]
 8023aee:	f88d 201e 	strb.w	r2, [sp, #30]
 8023af2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 8023af6:	5ce3      	ldrb	r3, [r4, r3]
 8023af8:	5ca2      	ldrb	r2, [r4, r2]
 8023afa:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 8023afe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8023b02:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 8023b06:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8023b0a:	5ce3      	ldrb	r3, [r4, r3]
 8023b0c:	5ca2      	ldrb	r2, [r4, r2]
 8023b0e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8023b12:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8023b16:	f88d 301b 	strb.w	r3, [sp, #27]
 8023b1a:	5ca2      	ldrb	r2, [r4, r2]
 8023b1c:	f88d 201f 	strb.w	r2, [sp, #31]
 8023b20:	a906      	add	r1, sp, #24
 8023b22:	9a04      	ldr	r2, [sp, #16]
 8023b24:	4630      	mov	r0, r6
 8023b26:	f7ff fc62 	bl	80233ee <copy_and_key>
 8023b2a:	6833      	ldr	r3, [r6, #0]
 8023b2c:	f847 3c10 	str.w	r3, [r7, #-16]
 8023b30:	6873      	ldr	r3, [r6, #4]
 8023b32:	f847 3c0c 	str.w	r3, [r7, #-12]
 8023b36:	68b3      	ldr	r3, [r6, #8]
 8023b38:	f847 3c08 	str.w	r3, [r7, #-8]
 8023b3c:	68f3      	ldr	r3, [r6, #12]
 8023b3e:	f847 3c04 	str.w	r3, [r7, #-4]
 8023b42:	f108 0810 	add.w	r8, r8, #16
 8023b46:	3710      	adds	r7, #16
 8023b48:	e777      	b.n	8023a3a <sigfox_aes_cbc_encrypt.constprop.0+0x16>
 8023b4a:	9b06      	ldr	r3, [sp, #24]
 8023b4c:	9301      	str	r3, [sp, #4]
 8023b4e:	9b07      	ldr	r3, [sp, #28]
 8023b50:	9302      	str	r3, [sp, #8]
 8023b52:	9b08      	ldr	r3, [sp, #32]
 8023b54:	9303      	str	r3, [sp, #12]
 8023b56:	9b02      	ldr	r3, [sp, #8]
 8023b58:	4a83      	ldr	r2, [pc, #524]	; (8023d68 <sigfox_aes_cbc_encrypt.constprop.0+0x344>)
 8023b5a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8023b5e:	f3c3 2e07 	ubfx	lr, r3, #8, #8
 8023b62:	9b03      	ldr	r3, [sp, #12]
 8023b64:	f812 a00e 	ldrb.w	sl, [r2, lr]
 8023b68:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8023b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b6e:	f814 900c 	ldrb.w	r9, [r4, ip]
 8023b72:	0e19      	lsrs	r1, r3, #24
 8023b74:	5c2b      	ldrb	r3, [r5, r0]
 8023b76:	f814 b001 	ldrb.w	fp, [r4, r1]
 8023b7a:	ea83 030a 	eor.w	r3, r3, sl
 8023b7e:	ea89 0303 	eor.w	r3, r9, r3
 8023b82:	f814 a000 	ldrb.w	sl, [r4, r0]
 8023b86:	ea8b 0303 	eor.w	r3, fp, r3
 8023b8a:	f88d 3018 	strb.w	r3, [sp, #24]
 8023b8e:	f815 300e 	ldrb.w	r3, [r5, lr]
 8023b92:	ea8b 0b0a 	eor.w	fp, fp, sl
 8023b96:	ea8b 0303 	eor.w	r3, fp, r3
 8023b9a:	f812 b00c 	ldrb.w	fp, [r2, ip]
 8023b9e:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8023ba2:	ea83 030b 	eor.w	r3, r3, fp
 8023ba6:	f88d 3019 	strb.w	r3, [sp, #25]
 8023baa:	f814 300e 	ldrb.w	r3, [r4, lr]
 8023bae:	ea8a 0a03 	eor.w	sl, sl, r3
 8023bb2:	ea89 0903 	eor.w	r9, r9, r3
 8023bb6:	5c13      	ldrb	r3, [r2, r0]
 8023bb8:	ea83 0909 	eor.w	r9, r3, r9
 8023bbc:	5c6b      	ldrb	r3, [r5, r1]
 8023bbe:	ea89 0903 	eor.w	r9, r9, r3
 8023bc2:	9b03      	ldr	r3, [sp, #12]
 8023bc4:	f88d 901b 	strb.w	r9, [sp, #27]
 8023bc8:	f3c3 2907 	ubfx	r9, r3, #8, #8
 8023bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bce:	ea8a 0a0c 	eor.w	sl, sl, ip
 8023bd2:	f3c3 4e07 	ubfx	lr, r3, #16, #8
 8023bd6:	f812 c001 	ldrb.w	ip, [r2, r1]
 8023bda:	9b01      	ldr	r3, [sp, #4]
 8023bdc:	ea8a 0a0c 	eor.w	sl, sl, ip
 8023be0:	0e18      	lsrs	r0, r3, #24
 8023be2:	f89d c008 	ldrb.w	ip, [sp, #8]
 8023be6:	5c23      	ldrb	r3, [r4, r0]
 8023be8:	f88d a01a 	strb.w	sl, [sp, #26]
 8023bec:	f814 a00e 	ldrb.w	sl, [r4, lr]
 8023bf0:	f815 100c 	ldrb.w	r1, [r5, ip]
 8023bf4:	f812 b009 	ldrb.w	fp, [r2, r9]
 8023bf8:	ea81 010b 	eor.w	r1, r1, fp
 8023bfc:	ea8a 0101 	eor.w	r1, sl, r1
 8023c00:	4059      	eors	r1, r3
 8023c02:	f88d 101c 	strb.w	r1, [sp, #28]
 8023c06:	f814 100c 	ldrb.w	r1, [r4, ip]
 8023c0a:	f815 b009 	ldrb.w	fp, [r5, r9]
 8023c0e:	404b      	eors	r3, r1
 8023c10:	ea8b 0303 	eor.w	r3, fp, r3
 8023c14:	f812 b00e 	ldrb.w	fp, [r2, lr]
 8023c18:	f815 e00e 	ldrb.w	lr, [r5, lr]
 8023c1c:	ea83 030b 	eor.w	r3, r3, fp
 8023c20:	f88d 301d 	strb.w	r3, [sp, #29]
 8023c24:	f814 3009 	ldrb.w	r3, [r4, r9]
 8023c28:	4059      	eors	r1, r3
 8023c2a:	ea8a 0a03 	eor.w	sl, sl, r3
 8023c2e:	f812 300c 	ldrb.w	r3, [r2, ip]
 8023c32:	f89d c00c 	ldrb.w	ip, [sp, #12]
 8023c36:	ea83 0a0a 	eor.w	sl, r3, sl
 8023c3a:	5c2b      	ldrb	r3, [r5, r0]
 8023c3c:	ea8a 0a03 	eor.w	sl, sl, r3
 8023c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c42:	f88d a01f 	strb.w	sl, [sp, #31]
 8023c46:	f3c3 2907 	ubfx	r9, r3, #8, #8
 8023c4a:	ea81 010e 	eor.w	r1, r1, lr
 8023c4e:	9b01      	ldr	r3, [sp, #4]
 8023c50:	f812 e000 	ldrb.w	lr, [r2, r0]
 8023c54:	f812 b009 	ldrb.w	fp, [r2, r9]
 8023c58:	ea81 010e 	eor.w	r1, r1, lr
 8023c5c:	f3c3 4e07 	ubfx	lr, r3, #16, #8
 8023c60:	9b02      	ldr	r3, [sp, #8]
 8023c62:	f88d 101e 	strb.w	r1, [sp, #30]
 8023c66:	0e18      	lsrs	r0, r3, #24
 8023c68:	f815 100c 	ldrb.w	r1, [r5, ip]
 8023c6c:	f814 a00e 	ldrb.w	sl, [r4, lr]
 8023c70:	5c23      	ldrb	r3, [r4, r0]
 8023c72:	ea81 010b 	eor.w	r1, r1, fp
 8023c76:	ea8a 0101 	eor.w	r1, sl, r1
 8023c7a:	4059      	eors	r1, r3
 8023c7c:	f88d 1020 	strb.w	r1, [sp, #32]
 8023c80:	f814 100c 	ldrb.w	r1, [r4, ip]
 8023c84:	f815 b009 	ldrb.w	fp, [r5, r9]
 8023c88:	404b      	eors	r3, r1
 8023c8a:	ea8b 0303 	eor.w	r3, fp, r3
 8023c8e:	f812 b00e 	ldrb.w	fp, [r2, lr]
 8023c92:	f815 e00e 	ldrb.w	lr, [r5, lr]
 8023c96:	ea83 030b 	eor.w	r3, r3, fp
 8023c9a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8023c9e:	f814 3009 	ldrb.w	r3, [r4, r9]
 8023ca2:	4059      	eors	r1, r3
 8023ca4:	ea81 010e 	eor.w	r1, r1, lr
 8023ca8:	f812 e000 	ldrb.w	lr, [r2, r0]
 8023cac:	ea8a 0a03 	eor.w	sl, sl, r3
 8023cb0:	f812 300c 	ldrb.w	r3, [r2, ip]
 8023cb4:	ea81 010e 	eor.w	r1, r1, lr
 8023cb8:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 8023cbc:	ea83 0a0a 	eor.w	sl, r3, sl
 8023cc0:	5c2b      	ldrb	r3, [r5, r0]
 8023cc2:	ea8a 0a03 	eor.w	sl, sl, r3
 8023cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023cc8:	f88d a023 	strb.w	sl, [sp, #35]	; 0x23
 8023ccc:	fa5f fc83 	uxtb.w	ip, r3
 8023cd0:	9b01      	ldr	r3, [sp, #4]
 8023cd2:	f815 000c 	ldrb.w	r0, [r5, ip]
 8023cd6:	f3c3 2e07 	ubfx	lr, r3, #8, #8
 8023cda:	9b02      	ldr	r3, [sp, #8]
 8023cdc:	f812 b00e 	ldrb.w	fp, [r2, lr]
 8023ce0:	f3c3 4907 	ubfx	r9, r3, #16, #8
 8023ce4:	9b03      	ldr	r3, [sp, #12]
 8023ce6:	f814 1009 	ldrb.w	r1, [r4, r9]
 8023cea:	ea4f 6a13 	mov.w	sl, r3, lsr #24
 8023cee:	ea80 000b 	eor.w	r0, r0, fp
 8023cf2:	f814 300a 	ldrb.w	r3, [r4, sl]
 8023cf6:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8023cfa:	4048      	eors	r0, r1
 8023cfc:	4058      	eors	r0, r3
 8023cfe:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
 8023d02:	f814 000c 	ldrb.w	r0, [r4, ip]
 8023d06:	4043      	eors	r3, r0
 8023d08:	ea8b 0303 	eor.w	r3, fp, r3
 8023d0c:	f812 b009 	ldrb.w	fp, [r2, r9]
 8023d10:	ea83 030b 	eor.w	r3, r3, fp
 8023d14:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8023d18:	f814 300e 	ldrb.w	r3, [r4, lr]
 8023d1c:	f815 e009 	ldrb.w	lr, [r5, r9]
 8023d20:	4058      	eors	r0, r3
 8023d22:	404b      	eors	r3, r1
 8023d24:	f812 100c 	ldrb.w	r1, [r2, ip]
 8023d28:	ea80 000e 	eor.w	r0, r0, lr
 8023d2c:	4059      	eors	r1, r3
 8023d2e:	f812 e00a 	ldrb.w	lr, [r2, sl]
 8023d32:	f815 300a 	ldrb.w	r3, [r5, sl]
 8023d36:	ea80 000e 	eor.w	r0, r0, lr
 8023d3a:	4059      	eors	r1, r3
 8023d3c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8023d40:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
 8023d44:	a806      	add	r0, sp, #24
 8023d46:	9904      	ldr	r1, [sp, #16]
 8023d48:	f7ff fb40 	bl	80233cc <xor_block>
 8023d4c:	9b00      	ldr	r3, [sp, #0]
 8023d4e:	3301      	adds	r3, #1
 8023d50:	b2db      	uxtb	r3, r3
 8023d52:	9300      	str	r3, [sp, #0]
 8023d54:	e68a      	b.n	8023a6c <sigfox_aes_cbc_encrypt.constprop.0+0x48>
 8023d56:	2001      	movs	r0, #1
 8023d58:	e673      	b.n	8023a42 <sigfox_aes_cbc_encrypt.constprop.0+0x1e>
 8023d5a:	bf00      	nop
 8023d5c:	08029230 	.word	0x08029230
 8023d60:	20002378 	.word	0x20002378
 8023d64:	08028b30 	.word	0x08028b30
 8023d68:	08028c30 	.word	0x08028c30

08023d6c <CREDENTIALS_aes_128_cbc_encrypt>:
 8023d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023d6e:	2300      	movs	r3, #0
 8023d70:	b089      	sub	sp, #36	; 0x24
 8023d72:	e9cd 3300 	strd	r3, r3, [sp]
 8023d76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8023d7a:	4606      	mov	r6, r0
 8023d7c:	460d      	mov	r5, r1
 8023d7e:	4617      	mov	r7, r2
 8023d80:	f7ea faf4 	bl	800e36c <SE_NVM_get_key_type>
 8023d84:	b1f8      	cbz	r0, 8023dc6 <CREDENTIALS_aes_128_cbc_encrypt+0x5a>
 8023d86:	2801      	cmp	r0, #1
 8023d88:	d10b      	bne.n	8023da2 <CREDENTIALS_aes_128_cbc_encrypt+0x36>
 8023d8a:	4b11      	ldr	r3, [pc, #68]	; (8023dd0 <CREDENTIALS_aes_128_cbc_encrypt+0x64>)
 8023d8c:	aa04      	add	r2, sp, #16
 8023d8e:	f103 0c10 	add.w	ip, r3, #16
 8023d92:	6818      	ldr	r0, [r3, #0]
 8023d94:	6859      	ldr	r1, [r3, #4]
 8023d96:	4614      	mov	r4, r2
 8023d98:	c403      	stmia	r4!, {r0, r1}
 8023d9a:	3308      	adds	r3, #8
 8023d9c:	4563      	cmp	r3, ip
 8023d9e:	4622      	mov	r2, r4
 8023da0:	d1f7      	bne.n	8023d92 <CREDENTIALS_aes_128_cbc_encrypt+0x26>
 8023da2:	a804      	add	r0, sp, #16
 8023da4:	f7ff fb60 	bl	8023468 <sigfox_aes_set_key.constprop.0>
 8023da8:	2210      	movs	r2, #16
 8023daa:	eb0d 0002 	add.w	r0, sp, r2
 8023dae:	2100      	movs	r1, #0
 8023db0:	f000 f8b2 	bl	8023f18 <memset>
 8023db4:	466b      	mov	r3, sp
 8023db6:	463a      	mov	r2, r7
 8023db8:	4631      	mov	r1, r6
 8023dba:	4628      	mov	r0, r5
 8023dbc:	f7ff fe32 	bl	8023a24 <sigfox_aes_cbc_encrypt.constprop.0>
 8023dc0:	2000      	movs	r0, #0
 8023dc2:	b009      	add	sp, #36	; 0x24
 8023dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023dc6:	a804      	add	r0, sp, #16
 8023dc8:	f7ff fe1a 	bl	8023a00 <Get_decrypted_sf_key.part.0>
 8023dcc:	e7e9      	b.n	8023da2 <CREDENTIALS_aes_128_cbc_encrypt+0x36>
 8023dce:	bf00      	nop
 8023dd0:	08024c2c 	.word	0x08024c2c

08023dd4 <CREDENTIALS_aes_128_cbc_encrypt_with_session_key>:
 8023dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023dd6:	460d      	mov	r5, r1
 8023dd8:	b085      	sub	sp, #20
 8023dda:	2400      	movs	r4, #0
 8023ddc:	4606      	mov	r6, r0
 8023dde:	4617      	mov	r7, r2
 8023de0:	4807      	ldr	r0, [pc, #28]	; (8023e00 <CREDENTIALS_aes_128_cbc_encrypt_with_session_key+0x2c>)
 8023de2:	e9cd 4400 	strd	r4, r4, [sp]
 8023de6:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8023dea:	f7ff fb3d 	bl	8023468 <sigfox_aes_set_key.constprop.0>
 8023dee:	466b      	mov	r3, sp
 8023df0:	463a      	mov	r2, r7
 8023df2:	4631      	mov	r1, r6
 8023df4:	4628      	mov	r0, r5
 8023df6:	f7ff fe15 	bl	8023a24 <sigfox_aes_cbc_encrypt.constprop.0>
 8023dfa:	4620      	mov	r0, r4
 8023dfc:	b005      	add	sp, #20
 8023dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023e00:	2000266a 	.word	0x2000266a

08023e04 <CREDENTIALS_wrap_session_key>:
 8023e04:	b570      	push	{r4, r5, r6, lr}
 8023e06:	b088      	sub	sp, #32
 8023e08:	2400      	movs	r4, #0
 8023e0a:	4605      	mov	r5, r0
 8023e0c:	a804      	add	r0, sp, #16
 8023e0e:	460e      	mov	r6, r1
 8023e10:	e9cd 4400 	strd	r4, r4, [sp]
 8023e14:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8023e18:	f7ff fdf2 	bl	8023a00 <Get_decrypted_sf_key.part.0>
 8023e1c:	a804      	add	r0, sp, #16
 8023e1e:	f7ff fb23 	bl	8023468 <sigfox_aes_set_key.constprop.0>
 8023e22:	2210      	movs	r2, #16
 8023e24:	4621      	mov	r1, r4
 8023e26:	eb0d 0002 	add.w	r0, sp, r2
 8023e2a:	f000 f875 	bl	8023f18 <memset>
 8023e2e:	4904      	ldr	r1, [pc, #16]	; (8023e40 <CREDENTIALS_wrap_session_key+0x3c>)
 8023e30:	466b      	mov	r3, sp
 8023e32:	4632      	mov	r2, r6
 8023e34:	4628      	mov	r0, r5
 8023e36:	f7ff fdf5 	bl	8023a24 <sigfox_aes_cbc_encrypt.constprop.0>
 8023e3a:	4620      	mov	r0, r4
 8023e3c:	b008      	add	sp, #32
 8023e3e:	bd70      	pop	{r4, r5, r6, pc}
 8023e40:	2000266a 	.word	0x2000266a

08023e44 <CREDENTIALS_get_version>:
 8023e44:	4800      	ldr	r0, [pc, #0]	; (8023e48 <CREDENTIALS_get_version+0x4>)
 8023e46:	4770      	bx	lr
 8023e48:	08029330 	.word	0x08029330

08023e4c <CREDENTIALS_get_dev_id>:
 8023e4c:	b510      	push	{r4, lr}
 8023e4e:	b08c      	sub	sp, #48	; 0x30
 8023e50:	4604      	mov	r4, r0
 8023e52:	4668      	mov	r0, sp
 8023e54:	f7ff fb4c 	bl	80234f0 <Get_decrypted_sf_data.constprop.0>
 8023e58:	9b00      	ldr	r3, [sp, #0]
 8023e5a:	6023      	str	r3, [r4, #0]
 8023e5c:	b00c      	add	sp, #48	; 0x30
 8023e5e:	bd10      	pop	{r4, pc}

08023e60 <CREDENTIALS_get_initial_pac>:
 8023e60:	b510      	push	{r4, lr}
 8023e62:	b08c      	sub	sp, #48	; 0x30
 8023e64:	4604      	mov	r4, r0
 8023e66:	4668      	mov	r0, sp
 8023e68:	f7ff fb42 	bl	80234f0 <Get_decrypted_sf_data.constprop.0>
 8023e6c:	ab01      	add	r3, sp, #4
 8023e6e:	cb03      	ldmia	r3!, {r0, r1}
 8023e70:	6020      	str	r0, [r4, #0]
 8023e72:	6061      	str	r1, [r4, #4]
 8023e74:	b00c      	add	sp, #48	; 0x30
 8023e76:	bd10      	pop	{r4, pc}

08023e78 <__aeabi_memclr>:
 8023e78:	2200      	movs	r2, #0
 8023e7a:	f000 b800 	b.w	8023e7e <__aeabi_memset>

08023e7e <__aeabi_memset>:
 8023e7e:	4613      	mov	r3, r2
 8023e80:	460a      	mov	r2, r1
 8023e82:	4619      	mov	r1, r3
 8023e84:	f000 b848 	b.w	8023f18 <memset>

08023e88 <__errno>:
 8023e88:	4b01      	ldr	r3, [pc, #4]	; (8023e90 <__errno+0x8>)
 8023e8a:	6818      	ldr	r0, [r3, #0]
 8023e8c:	4770      	bx	lr
 8023e8e:	bf00      	nop
 8023e90:	20000250 	.word	0x20000250

08023e94 <__libc_init_array>:
 8023e94:	b570      	push	{r4, r5, r6, lr}
 8023e96:	4d0d      	ldr	r5, [pc, #52]	; (8023ecc <__libc_init_array+0x38>)
 8023e98:	4c0d      	ldr	r4, [pc, #52]	; (8023ed0 <__libc_init_array+0x3c>)
 8023e9a:	1b64      	subs	r4, r4, r5
 8023e9c:	10a4      	asrs	r4, r4, #2
 8023e9e:	2600      	movs	r6, #0
 8023ea0:	42a6      	cmp	r6, r4
 8023ea2:	d109      	bne.n	8023eb8 <__libc_init_array+0x24>
 8023ea4:	4d0b      	ldr	r5, [pc, #44]	; (8023ed4 <__libc_init_array+0x40>)
 8023ea6:	4c0c      	ldr	r4, [pc, #48]	; (8023ed8 <__libc_init_array+0x44>)
 8023ea8:	f000 fcfe 	bl	80248a8 <_init>
 8023eac:	1b64      	subs	r4, r4, r5
 8023eae:	10a4      	asrs	r4, r4, #2
 8023eb0:	2600      	movs	r6, #0
 8023eb2:	42a6      	cmp	r6, r4
 8023eb4:	d105      	bne.n	8023ec2 <__libc_init_array+0x2e>
 8023eb6:	bd70      	pop	{r4, r5, r6, pc}
 8023eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8023ebc:	4798      	blx	r3
 8023ebe:	3601      	adds	r6, #1
 8023ec0:	e7ee      	b.n	8023ea0 <__libc_init_array+0xc>
 8023ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8023ec6:	4798      	blx	r3
 8023ec8:	3601      	adds	r6, #1
 8023eca:	e7f2      	b.n	8023eb2 <__libc_init_array+0x1e>
 8023ecc:	08029370 	.word	0x08029370
 8023ed0:	08029370 	.word	0x08029370
 8023ed4:	08029370 	.word	0x08029370
 8023ed8:	08029374 	.word	0x08029374

08023edc <malloc>:
 8023edc:	4b02      	ldr	r3, [pc, #8]	; (8023ee8 <malloc+0xc>)
 8023ede:	4601      	mov	r1, r0
 8023ee0:	6818      	ldr	r0, [r3, #0]
 8023ee2:	f000 b86f 	b.w	8023fc4 <_malloc_r>
 8023ee6:	bf00      	nop
 8023ee8:	20000250 	.word	0x20000250

08023eec <free>:
 8023eec:	4b02      	ldr	r3, [pc, #8]	; (8023ef8 <free+0xc>)
 8023eee:	4601      	mov	r1, r0
 8023ef0:	6818      	ldr	r0, [r3, #0]
 8023ef2:	f000 b819 	b.w	8023f28 <_free_r>
 8023ef6:	bf00      	nop
 8023ef8:	20000250 	.word	0x20000250

08023efc <memcpy>:
 8023efc:	440a      	add	r2, r1
 8023efe:	4291      	cmp	r1, r2
 8023f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8023f04:	d100      	bne.n	8023f08 <memcpy+0xc>
 8023f06:	4770      	bx	lr
 8023f08:	b510      	push	{r4, lr}
 8023f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023f12:	4291      	cmp	r1, r2
 8023f14:	d1f9      	bne.n	8023f0a <memcpy+0xe>
 8023f16:	bd10      	pop	{r4, pc}

08023f18 <memset>:
 8023f18:	4402      	add	r2, r0
 8023f1a:	4603      	mov	r3, r0
 8023f1c:	4293      	cmp	r3, r2
 8023f1e:	d100      	bne.n	8023f22 <memset+0xa>
 8023f20:	4770      	bx	lr
 8023f22:	f803 1b01 	strb.w	r1, [r3], #1
 8023f26:	e7f9      	b.n	8023f1c <memset+0x4>

08023f28 <_free_r>:
 8023f28:	b538      	push	{r3, r4, r5, lr}
 8023f2a:	4605      	mov	r5, r0
 8023f2c:	2900      	cmp	r1, #0
 8023f2e:	d045      	beq.n	8023fbc <_free_r+0x94>
 8023f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023f34:	1f0c      	subs	r4, r1, #4
 8023f36:	2b00      	cmp	r3, #0
 8023f38:	bfb8      	it	lt
 8023f3a:	18e4      	addlt	r4, r4, r3
 8023f3c:	f000 f8ec 	bl	8024118 <__malloc_lock>
 8023f40:	4a1f      	ldr	r2, [pc, #124]	; (8023fc0 <_free_r+0x98>)
 8023f42:	6813      	ldr	r3, [r2, #0]
 8023f44:	4610      	mov	r0, r2
 8023f46:	b933      	cbnz	r3, 8023f56 <_free_r+0x2e>
 8023f48:	6063      	str	r3, [r4, #4]
 8023f4a:	6014      	str	r4, [r2, #0]
 8023f4c:	4628      	mov	r0, r5
 8023f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023f52:	f000 b8e7 	b.w	8024124 <__malloc_unlock>
 8023f56:	42a3      	cmp	r3, r4
 8023f58:	d90b      	bls.n	8023f72 <_free_r+0x4a>
 8023f5a:	6821      	ldr	r1, [r4, #0]
 8023f5c:	1862      	adds	r2, r4, r1
 8023f5e:	4293      	cmp	r3, r2
 8023f60:	bf04      	itt	eq
 8023f62:	681a      	ldreq	r2, [r3, #0]
 8023f64:	685b      	ldreq	r3, [r3, #4]
 8023f66:	6063      	str	r3, [r4, #4]
 8023f68:	bf04      	itt	eq
 8023f6a:	1852      	addeq	r2, r2, r1
 8023f6c:	6022      	streq	r2, [r4, #0]
 8023f6e:	6004      	str	r4, [r0, #0]
 8023f70:	e7ec      	b.n	8023f4c <_free_r+0x24>
 8023f72:	461a      	mov	r2, r3
 8023f74:	685b      	ldr	r3, [r3, #4]
 8023f76:	b10b      	cbz	r3, 8023f7c <_free_r+0x54>
 8023f78:	42a3      	cmp	r3, r4
 8023f7a:	d9fa      	bls.n	8023f72 <_free_r+0x4a>
 8023f7c:	6811      	ldr	r1, [r2, #0]
 8023f7e:	1850      	adds	r0, r2, r1
 8023f80:	42a0      	cmp	r0, r4
 8023f82:	d10b      	bne.n	8023f9c <_free_r+0x74>
 8023f84:	6820      	ldr	r0, [r4, #0]
 8023f86:	4401      	add	r1, r0
 8023f88:	1850      	adds	r0, r2, r1
 8023f8a:	4283      	cmp	r3, r0
 8023f8c:	6011      	str	r1, [r2, #0]
 8023f8e:	d1dd      	bne.n	8023f4c <_free_r+0x24>
 8023f90:	6818      	ldr	r0, [r3, #0]
 8023f92:	685b      	ldr	r3, [r3, #4]
 8023f94:	6053      	str	r3, [r2, #4]
 8023f96:	4401      	add	r1, r0
 8023f98:	6011      	str	r1, [r2, #0]
 8023f9a:	e7d7      	b.n	8023f4c <_free_r+0x24>
 8023f9c:	d902      	bls.n	8023fa4 <_free_r+0x7c>
 8023f9e:	230c      	movs	r3, #12
 8023fa0:	602b      	str	r3, [r5, #0]
 8023fa2:	e7d3      	b.n	8023f4c <_free_r+0x24>
 8023fa4:	6820      	ldr	r0, [r4, #0]
 8023fa6:	1821      	adds	r1, r4, r0
 8023fa8:	428b      	cmp	r3, r1
 8023faa:	bf04      	itt	eq
 8023fac:	6819      	ldreq	r1, [r3, #0]
 8023fae:	685b      	ldreq	r3, [r3, #4]
 8023fb0:	6063      	str	r3, [r4, #4]
 8023fb2:	bf04      	itt	eq
 8023fb4:	1809      	addeq	r1, r1, r0
 8023fb6:	6021      	streq	r1, [r4, #0]
 8023fb8:	6054      	str	r4, [r2, #4]
 8023fba:	e7c7      	b.n	8023f4c <_free_r+0x24>
 8023fbc:	bd38      	pop	{r3, r4, r5, pc}
 8023fbe:	bf00      	nop
 8023fc0:	20002680 	.word	0x20002680

08023fc4 <_malloc_r>:
 8023fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023fc6:	1ccd      	adds	r5, r1, #3
 8023fc8:	f025 0503 	bic.w	r5, r5, #3
 8023fcc:	3508      	adds	r5, #8
 8023fce:	2d0c      	cmp	r5, #12
 8023fd0:	bf38      	it	cc
 8023fd2:	250c      	movcc	r5, #12
 8023fd4:	2d00      	cmp	r5, #0
 8023fd6:	4606      	mov	r6, r0
 8023fd8:	db01      	blt.n	8023fde <_malloc_r+0x1a>
 8023fda:	42a9      	cmp	r1, r5
 8023fdc:	d903      	bls.n	8023fe6 <_malloc_r+0x22>
 8023fde:	230c      	movs	r3, #12
 8023fe0:	6033      	str	r3, [r6, #0]
 8023fe2:	2000      	movs	r0, #0
 8023fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023fe6:	f000 f897 	bl	8024118 <__malloc_lock>
 8023fea:	4921      	ldr	r1, [pc, #132]	; (8024070 <_malloc_r+0xac>)
 8023fec:	680a      	ldr	r2, [r1, #0]
 8023fee:	4614      	mov	r4, r2
 8023ff0:	b99c      	cbnz	r4, 802401a <_malloc_r+0x56>
 8023ff2:	4f20      	ldr	r7, [pc, #128]	; (8024074 <_malloc_r+0xb0>)
 8023ff4:	683b      	ldr	r3, [r7, #0]
 8023ff6:	b923      	cbnz	r3, 8024002 <_malloc_r+0x3e>
 8023ff8:	4621      	mov	r1, r4
 8023ffa:	4630      	mov	r0, r6
 8023ffc:	f000 f83c 	bl	8024078 <_sbrk_r>
 8024000:	6038      	str	r0, [r7, #0]
 8024002:	4629      	mov	r1, r5
 8024004:	4630      	mov	r0, r6
 8024006:	f000 f837 	bl	8024078 <_sbrk_r>
 802400a:	1c43      	adds	r3, r0, #1
 802400c:	d123      	bne.n	8024056 <_malloc_r+0x92>
 802400e:	230c      	movs	r3, #12
 8024010:	6033      	str	r3, [r6, #0]
 8024012:	4630      	mov	r0, r6
 8024014:	f000 f886 	bl	8024124 <__malloc_unlock>
 8024018:	e7e3      	b.n	8023fe2 <_malloc_r+0x1e>
 802401a:	6823      	ldr	r3, [r4, #0]
 802401c:	1b5b      	subs	r3, r3, r5
 802401e:	d417      	bmi.n	8024050 <_malloc_r+0x8c>
 8024020:	2b0b      	cmp	r3, #11
 8024022:	d903      	bls.n	802402c <_malloc_r+0x68>
 8024024:	6023      	str	r3, [r4, #0]
 8024026:	441c      	add	r4, r3
 8024028:	6025      	str	r5, [r4, #0]
 802402a:	e004      	b.n	8024036 <_malloc_r+0x72>
 802402c:	6863      	ldr	r3, [r4, #4]
 802402e:	42a2      	cmp	r2, r4
 8024030:	bf0c      	ite	eq
 8024032:	600b      	streq	r3, [r1, #0]
 8024034:	6053      	strne	r3, [r2, #4]
 8024036:	4630      	mov	r0, r6
 8024038:	f000 f874 	bl	8024124 <__malloc_unlock>
 802403c:	f104 000b 	add.w	r0, r4, #11
 8024040:	1d23      	adds	r3, r4, #4
 8024042:	f020 0007 	bic.w	r0, r0, #7
 8024046:	1ac2      	subs	r2, r0, r3
 8024048:	d0cc      	beq.n	8023fe4 <_malloc_r+0x20>
 802404a:	1a1b      	subs	r3, r3, r0
 802404c:	50a3      	str	r3, [r4, r2]
 802404e:	e7c9      	b.n	8023fe4 <_malloc_r+0x20>
 8024050:	4622      	mov	r2, r4
 8024052:	6864      	ldr	r4, [r4, #4]
 8024054:	e7cc      	b.n	8023ff0 <_malloc_r+0x2c>
 8024056:	1cc4      	adds	r4, r0, #3
 8024058:	f024 0403 	bic.w	r4, r4, #3
 802405c:	42a0      	cmp	r0, r4
 802405e:	d0e3      	beq.n	8024028 <_malloc_r+0x64>
 8024060:	1a21      	subs	r1, r4, r0
 8024062:	4630      	mov	r0, r6
 8024064:	f000 f808 	bl	8024078 <_sbrk_r>
 8024068:	3001      	adds	r0, #1
 802406a:	d1dd      	bne.n	8024028 <_malloc_r+0x64>
 802406c:	e7cf      	b.n	802400e <_malloc_r+0x4a>
 802406e:	bf00      	nop
 8024070:	20002680 	.word	0x20002680
 8024074:	20002684 	.word	0x20002684

08024078 <_sbrk_r>:
 8024078:	b538      	push	{r3, r4, r5, lr}
 802407a:	4d06      	ldr	r5, [pc, #24]	; (8024094 <_sbrk_r+0x1c>)
 802407c:	2300      	movs	r3, #0
 802407e:	4604      	mov	r4, r0
 8024080:	4608      	mov	r0, r1
 8024082:	602b      	str	r3, [r5, #0]
 8024084:	f7e3 f966 	bl	8007354 <_sbrk>
 8024088:	1c43      	adds	r3, r0, #1
 802408a:	d102      	bne.n	8024092 <_sbrk_r+0x1a>
 802408c:	682b      	ldr	r3, [r5, #0]
 802408e:	b103      	cbz	r3, 8024092 <_sbrk_r+0x1a>
 8024090:	6023      	str	r3, [r4, #0]
 8024092:	bd38      	pop	{r3, r4, r5, pc}
 8024094:	20002944 	.word	0x20002944

08024098 <siprintf>:
 8024098:	b40e      	push	{r1, r2, r3}
 802409a:	b500      	push	{lr}
 802409c:	b09c      	sub	sp, #112	; 0x70
 802409e:	ab1d      	add	r3, sp, #116	; 0x74
 80240a0:	9002      	str	r0, [sp, #8]
 80240a2:	9006      	str	r0, [sp, #24]
 80240a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80240a8:	4809      	ldr	r0, [pc, #36]	; (80240d0 <siprintf+0x38>)
 80240aa:	9107      	str	r1, [sp, #28]
 80240ac:	9104      	str	r1, [sp, #16]
 80240ae:	4909      	ldr	r1, [pc, #36]	; (80240d4 <siprintf+0x3c>)
 80240b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80240b4:	9105      	str	r1, [sp, #20]
 80240b6:	6800      	ldr	r0, [r0, #0]
 80240b8:	9301      	str	r3, [sp, #4]
 80240ba:	a902      	add	r1, sp, #8
 80240bc:	f000 f894 	bl	80241e8 <_svfiprintf_r>
 80240c0:	9b02      	ldr	r3, [sp, #8]
 80240c2:	2200      	movs	r2, #0
 80240c4:	701a      	strb	r2, [r3, #0]
 80240c6:	b01c      	add	sp, #112	; 0x70
 80240c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80240cc:	b003      	add	sp, #12
 80240ce:	4770      	bx	lr
 80240d0:	20000250 	.word	0x20000250
 80240d4:	ffff0208 	.word	0xffff0208

080240d8 <strchr>:
 80240d8:	b2c9      	uxtb	r1, r1
 80240da:	4603      	mov	r3, r0
 80240dc:	4618      	mov	r0, r3
 80240de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80240e2:	b112      	cbz	r2, 80240ea <strchr+0x12>
 80240e4:	428a      	cmp	r2, r1
 80240e6:	d1f9      	bne.n	80240dc <strchr+0x4>
 80240e8:	4770      	bx	lr
 80240ea:	2900      	cmp	r1, #0
 80240ec:	bf18      	it	ne
 80240ee:	2000      	movne	r0, #0
 80240f0:	4770      	bx	lr

080240f2 <strncmp>:
 80240f2:	b510      	push	{r4, lr}
 80240f4:	b16a      	cbz	r2, 8024112 <strncmp+0x20>
 80240f6:	3901      	subs	r1, #1
 80240f8:	1884      	adds	r4, r0, r2
 80240fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80240fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8024102:	4293      	cmp	r3, r2
 8024104:	d103      	bne.n	802410e <strncmp+0x1c>
 8024106:	42a0      	cmp	r0, r4
 8024108:	d001      	beq.n	802410e <strncmp+0x1c>
 802410a:	2b00      	cmp	r3, #0
 802410c:	d1f5      	bne.n	80240fa <strncmp+0x8>
 802410e:	1a98      	subs	r0, r3, r2
 8024110:	bd10      	pop	{r4, pc}
 8024112:	4610      	mov	r0, r2
 8024114:	e7fc      	b.n	8024110 <strncmp+0x1e>
	...

08024118 <__malloc_lock>:
 8024118:	4801      	ldr	r0, [pc, #4]	; (8024120 <__malloc_lock+0x8>)
 802411a:	f000 baf9 	b.w	8024710 <__retarget_lock_acquire_recursive>
 802411e:	bf00      	nop
 8024120:	2000294c 	.word	0x2000294c

08024124 <__malloc_unlock>:
 8024124:	4801      	ldr	r0, [pc, #4]	; (802412c <__malloc_unlock+0x8>)
 8024126:	f000 baf4 	b.w	8024712 <__retarget_lock_release_recursive>
 802412a:	bf00      	nop
 802412c:	2000294c 	.word	0x2000294c

08024130 <__ssputs_r>:
 8024130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024134:	688e      	ldr	r6, [r1, #8]
 8024136:	429e      	cmp	r6, r3
 8024138:	4682      	mov	sl, r0
 802413a:	460c      	mov	r4, r1
 802413c:	4690      	mov	r8, r2
 802413e:	461f      	mov	r7, r3
 8024140:	d838      	bhi.n	80241b4 <__ssputs_r+0x84>
 8024142:	898a      	ldrh	r2, [r1, #12]
 8024144:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8024148:	d032      	beq.n	80241b0 <__ssputs_r+0x80>
 802414a:	6825      	ldr	r5, [r4, #0]
 802414c:	6909      	ldr	r1, [r1, #16]
 802414e:	eba5 0901 	sub.w	r9, r5, r1
 8024152:	6965      	ldr	r5, [r4, #20]
 8024154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024158:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802415c:	3301      	adds	r3, #1
 802415e:	444b      	add	r3, r9
 8024160:	106d      	asrs	r5, r5, #1
 8024162:	429d      	cmp	r5, r3
 8024164:	bf38      	it	cc
 8024166:	461d      	movcc	r5, r3
 8024168:	0553      	lsls	r3, r2, #21
 802416a:	d531      	bpl.n	80241d0 <__ssputs_r+0xa0>
 802416c:	4629      	mov	r1, r5
 802416e:	f7ff ff29 	bl	8023fc4 <_malloc_r>
 8024172:	4606      	mov	r6, r0
 8024174:	b950      	cbnz	r0, 802418c <__ssputs_r+0x5c>
 8024176:	230c      	movs	r3, #12
 8024178:	f8ca 3000 	str.w	r3, [sl]
 802417c:	89a3      	ldrh	r3, [r4, #12]
 802417e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024182:	81a3      	strh	r3, [r4, #12]
 8024184:	f04f 30ff 	mov.w	r0, #4294967295
 8024188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802418c:	6921      	ldr	r1, [r4, #16]
 802418e:	464a      	mov	r2, r9
 8024190:	f7ff feb4 	bl	8023efc <memcpy>
 8024194:	89a3      	ldrh	r3, [r4, #12]
 8024196:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802419a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802419e:	81a3      	strh	r3, [r4, #12]
 80241a0:	6126      	str	r6, [r4, #16]
 80241a2:	6165      	str	r5, [r4, #20]
 80241a4:	444e      	add	r6, r9
 80241a6:	eba5 0509 	sub.w	r5, r5, r9
 80241aa:	6026      	str	r6, [r4, #0]
 80241ac:	60a5      	str	r5, [r4, #8]
 80241ae:	463e      	mov	r6, r7
 80241b0:	42be      	cmp	r6, r7
 80241b2:	d900      	bls.n	80241b6 <__ssputs_r+0x86>
 80241b4:	463e      	mov	r6, r7
 80241b6:	4632      	mov	r2, r6
 80241b8:	6820      	ldr	r0, [r4, #0]
 80241ba:	4641      	mov	r1, r8
 80241bc:	f000 faaa 	bl	8024714 <memmove>
 80241c0:	68a3      	ldr	r3, [r4, #8]
 80241c2:	6822      	ldr	r2, [r4, #0]
 80241c4:	1b9b      	subs	r3, r3, r6
 80241c6:	4432      	add	r2, r6
 80241c8:	60a3      	str	r3, [r4, #8]
 80241ca:	6022      	str	r2, [r4, #0]
 80241cc:	2000      	movs	r0, #0
 80241ce:	e7db      	b.n	8024188 <__ssputs_r+0x58>
 80241d0:	462a      	mov	r2, r5
 80241d2:	f000 fab9 	bl	8024748 <_realloc_r>
 80241d6:	4606      	mov	r6, r0
 80241d8:	2800      	cmp	r0, #0
 80241da:	d1e1      	bne.n	80241a0 <__ssputs_r+0x70>
 80241dc:	6921      	ldr	r1, [r4, #16]
 80241de:	4650      	mov	r0, sl
 80241e0:	f7ff fea2 	bl	8023f28 <_free_r>
 80241e4:	e7c7      	b.n	8024176 <__ssputs_r+0x46>
	...

080241e8 <_svfiprintf_r>:
 80241e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241ec:	4698      	mov	r8, r3
 80241ee:	898b      	ldrh	r3, [r1, #12]
 80241f0:	061b      	lsls	r3, r3, #24
 80241f2:	b09d      	sub	sp, #116	; 0x74
 80241f4:	4607      	mov	r7, r0
 80241f6:	460d      	mov	r5, r1
 80241f8:	4614      	mov	r4, r2
 80241fa:	d50e      	bpl.n	802421a <_svfiprintf_r+0x32>
 80241fc:	690b      	ldr	r3, [r1, #16]
 80241fe:	b963      	cbnz	r3, 802421a <_svfiprintf_r+0x32>
 8024200:	2140      	movs	r1, #64	; 0x40
 8024202:	f7ff fedf 	bl	8023fc4 <_malloc_r>
 8024206:	6028      	str	r0, [r5, #0]
 8024208:	6128      	str	r0, [r5, #16]
 802420a:	b920      	cbnz	r0, 8024216 <_svfiprintf_r+0x2e>
 802420c:	230c      	movs	r3, #12
 802420e:	603b      	str	r3, [r7, #0]
 8024210:	f04f 30ff 	mov.w	r0, #4294967295
 8024214:	e0d1      	b.n	80243ba <_svfiprintf_r+0x1d2>
 8024216:	2340      	movs	r3, #64	; 0x40
 8024218:	616b      	str	r3, [r5, #20]
 802421a:	2300      	movs	r3, #0
 802421c:	9309      	str	r3, [sp, #36]	; 0x24
 802421e:	2320      	movs	r3, #32
 8024220:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024224:	f8cd 800c 	str.w	r8, [sp, #12]
 8024228:	2330      	movs	r3, #48	; 0x30
 802422a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80243d4 <_svfiprintf_r+0x1ec>
 802422e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024232:	f04f 0901 	mov.w	r9, #1
 8024236:	4623      	mov	r3, r4
 8024238:	469a      	mov	sl, r3
 802423a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802423e:	b10a      	cbz	r2, 8024244 <_svfiprintf_r+0x5c>
 8024240:	2a25      	cmp	r2, #37	; 0x25
 8024242:	d1f9      	bne.n	8024238 <_svfiprintf_r+0x50>
 8024244:	ebba 0b04 	subs.w	fp, sl, r4
 8024248:	d00b      	beq.n	8024262 <_svfiprintf_r+0x7a>
 802424a:	465b      	mov	r3, fp
 802424c:	4622      	mov	r2, r4
 802424e:	4629      	mov	r1, r5
 8024250:	4638      	mov	r0, r7
 8024252:	f7ff ff6d 	bl	8024130 <__ssputs_r>
 8024256:	3001      	adds	r0, #1
 8024258:	f000 80aa 	beq.w	80243b0 <_svfiprintf_r+0x1c8>
 802425c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802425e:	445a      	add	r2, fp
 8024260:	9209      	str	r2, [sp, #36]	; 0x24
 8024262:	f89a 3000 	ldrb.w	r3, [sl]
 8024266:	2b00      	cmp	r3, #0
 8024268:	f000 80a2 	beq.w	80243b0 <_svfiprintf_r+0x1c8>
 802426c:	2300      	movs	r3, #0
 802426e:	f04f 32ff 	mov.w	r2, #4294967295
 8024272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024276:	f10a 0a01 	add.w	sl, sl, #1
 802427a:	9304      	str	r3, [sp, #16]
 802427c:	9307      	str	r3, [sp, #28]
 802427e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024282:	931a      	str	r3, [sp, #104]	; 0x68
 8024284:	4654      	mov	r4, sl
 8024286:	2205      	movs	r2, #5
 8024288:	f814 1b01 	ldrb.w	r1, [r4], #1
 802428c:	4851      	ldr	r0, [pc, #324]	; (80243d4 <_svfiprintf_r+0x1ec>)
 802428e:	f7e1 fd1f 	bl	8005cd0 <memchr>
 8024292:	9a04      	ldr	r2, [sp, #16]
 8024294:	b9d8      	cbnz	r0, 80242ce <_svfiprintf_r+0xe6>
 8024296:	06d0      	lsls	r0, r2, #27
 8024298:	bf44      	itt	mi
 802429a:	2320      	movmi	r3, #32
 802429c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80242a0:	0711      	lsls	r1, r2, #28
 80242a2:	bf44      	itt	mi
 80242a4:	232b      	movmi	r3, #43	; 0x2b
 80242a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80242aa:	f89a 3000 	ldrb.w	r3, [sl]
 80242ae:	2b2a      	cmp	r3, #42	; 0x2a
 80242b0:	d015      	beq.n	80242de <_svfiprintf_r+0xf6>
 80242b2:	9a07      	ldr	r2, [sp, #28]
 80242b4:	4654      	mov	r4, sl
 80242b6:	2000      	movs	r0, #0
 80242b8:	f04f 0c0a 	mov.w	ip, #10
 80242bc:	4621      	mov	r1, r4
 80242be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80242c2:	3b30      	subs	r3, #48	; 0x30
 80242c4:	2b09      	cmp	r3, #9
 80242c6:	d94e      	bls.n	8024366 <_svfiprintf_r+0x17e>
 80242c8:	b1b0      	cbz	r0, 80242f8 <_svfiprintf_r+0x110>
 80242ca:	9207      	str	r2, [sp, #28]
 80242cc:	e014      	b.n	80242f8 <_svfiprintf_r+0x110>
 80242ce:	eba0 0308 	sub.w	r3, r0, r8
 80242d2:	fa09 f303 	lsl.w	r3, r9, r3
 80242d6:	4313      	orrs	r3, r2
 80242d8:	9304      	str	r3, [sp, #16]
 80242da:	46a2      	mov	sl, r4
 80242dc:	e7d2      	b.n	8024284 <_svfiprintf_r+0x9c>
 80242de:	9b03      	ldr	r3, [sp, #12]
 80242e0:	1d19      	adds	r1, r3, #4
 80242e2:	681b      	ldr	r3, [r3, #0]
 80242e4:	9103      	str	r1, [sp, #12]
 80242e6:	2b00      	cmp	r3, #0
 80242e8:	bfbb      	ittet	lt
 80242ea:	425b      	neglt	r3, r3
 80242ec:	f042 0202 	orrlt.w	r2, r2, #2
 80242f0:	9307      	strge	r3, [sp, #28]
 80242f2:	9307      	strlt	r3, [sp, #28]
 80242f4:	bfb8      	it	lt
 80242f6:	9204      	strlt	r2, [sp, #16]
 80242f8:	7823      	ldrb	r3, [r4, #0]
 80242fa:	2b2e      	cmp	r3, #46	; 0x2e
 80242fc:	d10c      	bne.n	8024318 <_svfiprintf_r+0x130>
 80242fe:	7863      	ldrb	r3, [r4, #1]
 8024300:	2b2a      	cmp	r3, #42	; 0x2a
 8024302:	d135      	bne.n	8024370 <_svfiprintf_r+0x188>
 8024304:	9b03      	ldr	r3, [sp, #12]
 8024306:	1d1a      	adds	r2, r3, #4
 8024308:	681b      	ldr	r3, [r3, #0]
 802430a:	9203      	str	r2, [sp, #12]
 802430c:	2b00      	cmp	r3, #0
 802430e:	bfb8      	it	lt
 8024310:	f04f 33ff 	movlt.w	r3, #4294967295
 8024314:	3402      	adds	r4, #2
 8024316:	9305      	str	r3, [sp, #20]
 8024318:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80243e4 <_svfiprintf_r+0x1fc>
 802431c:	7821      	ldrb	r1, [r4, #0]
 802431e:	2203      	movs	r2, #3
 8024320:	4650      	mov	r0, sl
 8024322:	f7e1 fcd5 	bl	8005cd0 <memchr>
 8024326:	b140      	cbz	r0, 802433a <_svfiprintf_r+0x152>
 8024328:	2340      	movs	r3, #64	; 0x40
 802432a:	eba0 000a 	sub.w	r0, r0, sl
 802432e:	fa03 f000 	lsl.w	r0, r3, r0
 8024332:	9b04      	ldr	r3, [sp, #16]
 8024334:	4303      	orrs	r3, r0
 8024336:	3401      	adds	r4, #1
 8024338:	9304      	str	r3, [sp, #16]
 802433a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802433e:	4826      	ldr	r0, [pc, #152]	; (80243d8 <_svfiprintf_r+0x1f0>)
 8024340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024344:	2206      	movs	r2, #6
 8024346:	f7e1 fcc3 	bl	8005cd0 <memchr>
 802434a:	2800      	cmp	r0, #0
 802434c:	d038      	beq.n	80243c0 <_svfiprintf_r+0x1d8>
 802434e:	4b23      	ldr	r3, [pc, #140]	; (80243dc <_svfiprintf_r+0x1f4>)
 8024350:	bb1b      	cbnz	r3, 802439a <_svfiprintf_r+0x1b2>
 8024352:	9b03      	ldr	r3, [sp, #12]
 8024354:	3307      	adds	r3, #7
 8024356:	f023 0307 	bic.w	r3, r3, #7
 802435a:	3308      	adds	r3, #8
 802435c:	9303      	str	r3, [sp, #12]
 802435e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024360:	4433      	add	r3, r6
 8024362:	9309      	str	r3, [sp, #36]	; 0x24
 8024364:	e767      	b.n	8024236 <_svfiprintf_r+0x4e>
 8024366:	fb0c 3202 	mla	r2, ip, r2, r3
 802436a:	460c      	mov	r4, r1
 802436c:	2001      	movs	r0, #1
 802436e:	e7a5      	b.n	80242bc <_svfiprintf_r+0xd4>
 8024370:	2300      	movs	r3, #0
 8024372:	3401      	adds	r4, #1
 8024374:	9305      	str	r3, [sp, #20]
 8024376:	4619      	mov	r1, r3
 8024378:	f04f 0c0a 	mov.w	ip, #10
 802437c:	4620      	mov	r0, r4
 802437e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024382:	3a30      	subs	r2, #48	; 0x30
 8024384:	2a09      	cmp	r2, #9
 8024386:	d903      	bls.n	8024390 <_svfiprintf_r+0x1a8>
 8024388:	2b00      	cmp	r3, #0
 802438a:	d0c5      	beq.n	8024318 <_svfiprintf_r+0x130>
 802438c:	9105      	str	r1, [sp, #20]
 802438e:	e7c3      	b.n	8024318 <_svfiprintf_r+0x130>
 8024390:	fb0c 2101 	mla	r1, ip, r1, r2
 8024394:	4604      	mov	r4, r0
 8024396:	2301      	movs	r3, #1
 8024398:	e7f0      	b.n	802437c <_svfiprintf_r+0x194>
 802439a:	ab03      	add	r3, sp, #12
 802439c:	9300      	str	r3, [sp, #0]
 802439e:	462a      	mov	r2, r5
 80243a0:	4b0f      	ldr	r3, [pc, #60]	; (80243e0 <_svfiprintf_r+0x1f8>)
 80243a2:	a904      	add	r1, sp, #16
 80243a4:	4638      	mov	r0, r7
 80243a6:	f3af 8000 	nop.w
 80243aa:	1c42      	adds	r2, r0, #1
 80243ac:	4606      	mov	r6, r0
 80243ae:	d1d6      	bne.n	802435e <_svfiprintf_r+0x176>
 80243b0:	89ab      	ldrh	r3, [r5, #12]
 80243b2:	065b      	lsls	r3, r3, #25
 80243b4:	f53f af2c 	bmi.w	8024210 <_svfiprintf_r+0x28>
 80243b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80243ba:	b01d      	add	sp, #116	; 0x74
 80243bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243c0:	ab03      	add	r3, sp, #12
 80243c2:	9300      	str	r3, [sp, #0]
 80243c4:	462a      	mov	r2, r5
 80243c6:	4b06      	ldr	r3, [pc, #24]	; (80243e0 <_svfiprintf_r+0x1f8>)
 80243c8:	a904      	add	r1, sp, #16
 80243ca:	4638      	mov	r0, r7
 80243cc:	f000 f87a 	bl	80244c4 <_printf_i>
 80243d0:	e7eb      	b.n	80243aa <_svfiprintf_r+0x1c2>
 80243d2:	bf00      	nop
 80243d4:	08029334 	.word	0x08029334
 80243d8:	0802933e 	.word	0x0802933e
 80243dc:	00000000 	.word	0x00000000
 80243e0:	08024131 	.word	0x08024131
 80243e4:	0802933a 	.word	0x0802933a

080243e8 <_printf_common>:
 80243e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80243ec:	4616      	mov	r6, r2
 80243ee:	4699      	mov	r9, r3
 80243f0:	688a      	ldr	r2, [r1, #8]
 80243f2:	690b      	ldr	r3, [r1, #16]
 80243f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80243f8:	4293      	cmp	r3, r2
 80243fa:	bfb8      	it	lt
 80243fc:	4613      	movlt	r3, r2
 80243fe:	6033      	str	r3, [r6, #0]
 8024400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024404:	4607      	mov	r7, r0
 8024406:	460c      	mov	r4, r1
 8024408:	b10a      	cbz	r2, 802440e <_printf_common+0x26>
 802440a:	3301      	adds	r3, #1
 802440c:	6033      	str	r3, [r6, #0]
 802440e:	6823      	ldr	r3, [r4, #0]
 8024410:	0699      	lsls	r1, r3, #26
 8024412:	bf42      	ittt	mi
 8024414:	6833      	ldrmi	r3, [r6, #0]
 8024416:	3302      	addmi	r3, #2
 8024418:	6033      	strmi	r3, [r6, #0]
 802441a:	6825      	ldr	r5, [r4, #0]
 802441c:	f015 0506 	ands.w	r5, r5, #6
 8024420:	d106      	bne.n	8024430 <_printf_common+0x48>
 8024422:	f104 0a19 	add.w	sl, r4, #25
 8024426:	68e3      	ldr	r3, [r4, #12]
 8024428:	6832      	ldr	r2, [r6, #0]
 802442a:	1a9b      	subs	r3, r3, r2
 802442c:	42ab      	cmp	r3, r5
 802442e:	dc26      	bgt.n	802447e <_printf_common+0x96>
 8024430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024434:	1e13      	subs	r3, r2, #0
 8024436:	6822      	ldr	r2, [r4, #0]
 8024438:	bf18      	it	ne
 802443a:	2301      	movne	r3, #1
 802443c:	0692      	lsls	r2, r2, #26
 802443e:	d42b      	bmi.n	8024498 <_printf_common+0xb0>
 8024440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024444:	4649      	mov	r1, r9
 8024446:	4638      	mov	r0, r7
 8024448:	47c0      	blx	r8
 802444a:	3001      	adds	r0, #1
 802444c:	d01e      	beq.n	802448c <_printf_common+0xa4>
 802444e:	6823      	ldr	r3, [r4, #0]
 8024450:	68e5      	ldr	r5, [r4, #12]
 8024452:	6832      	ldr	r2, [r6, #0]
 8024454:	f003 0306 	and.w	r3, r3, #6
 8024458:	2b04      	cmp	r3, #4
 802445a:	bf08      	it	eq
 802445c:	1aad      	subeq	r5, r5, r2
 802445e:	68a3      	ldr	r3, [r4, #8]
 8024460:	6922      	ldr	r2, [r4, #16]
 8024462:	bf0c      	ite	eq
 8024464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024468:	2500      	movne	r5, #0
 802446a:	4293      	cmp	r3, r2
 802446c:	bfc4      	itt	gt
 802446e:	1a9b      	subgt	r3, r3, r2
 8024470:	18ed      	addgt	r5, r5, r3
 8024472:	2600      	movs	r6, #0
 8024474:	341a      	adds	r4, #26
 8024476:	42b5      	cmp	r5, r6
 8024478:	d11a      	bne.n	80244b0 <_printf_common+0xc8>
 802447a:	2000      	movs	r0, #0
 802447c:	e008      	b.n	8024490 <_printf_common+0xa8>
 802447e:	2301      	movs	r3, #1
 8024480:	4652      	mov	r2, sl
 8024482:	4649      	mov	r1, r9
 8024484:	4638      	mov	r0, r7
 8024486:	47c0      	blx	r8
 8024488:	3001      	adds	r0, #1
 802448a:	d103      	bne.n	8024494 <_printf_common+0xac>
 802448c:	f04f 30ff 	mov.w	r0, #4294967295
 8024490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024494:	3501      	adds	r5, #1
 8024496:	e7c6      	b.n	8024426 <_printf_common+0x3e>
 8024498:	18e1      	adds	r1, r4, r3
 802449a:	1c5a      	adds	r2, r3, #1
 802449c:	2030      	movs	r0, #48	; 0x30
 802449e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80244a2:	4422      	add	r2, r4
 80244a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80244a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80244ac:	3302      	adds	r3, #2
 80244ae:	e7c7      	b.n	8024440 <_printf_common+0x58>
 80244b0:	2301      	movs	r3, #1
 80244b2:	4622      	mov	r2, r4
 80244b4:	4649      	mov	r1, r9
 80244b6:	4638      	mov	r0, r7
 80244b8:	47c0      	blx	r8
 80244ba:	3001      	adds	r0, #1
 80244bc:	d0e6      	beq.n	802448c <_printf_common+0xa4>
 80244be:	3601      	adds	r6, #1
 80244c0:	e7d9      	b.n	8024476 <_printf_common+0x8e>
	...

080244c4 <_printf_i>:
 80244c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80244c8:	460c      	mov	r4, r1
 80244ca:	4691      	mov	r9, r2
 80244cc:	7e27      	ldrb	r7, [r4, #24]
 80244ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80244d0:	2f78      	cmp	r7, #120	; 0x78
 80244d2:	4680      	mov	r8, r0
 80244d4:	469a      	mov	sl, r3
 80244d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80244da:	d807      	bhi.n	80244ec <_printf_i+0x28>
 80244dc:	2f62      	cmp	r7, #98	; 0x62
 80244de:	d80a      	bhi.n	80244f6 <_printf_i+0x32>
 80244e0:	2f00      	cmp	r7, #0
 80244e2:	f000 80d8 	beq.w	8024696 <_printf_i+0x1d2>
 80244e6:	2f58      	cmp	r7, #88	; 0x58
 80244e8:	f000 80a3 	beq.w	8024632 <_printf_i+0x16e>
 80244ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80244f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80244f4:	e03a      	b.n	802456c <_printf_i+0xa8>
 80244f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80244fa:	2b15      	cmp	r3, #21
 80244fc:	d8f6      	bhi.n	80244ec <_printf_i+0x28>
 80244fe:	a001      	add	r0, pc, #4	; (adr r0, 8024504 <_printf_i+0x40>)
 8024500:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8024504:	0802455d 	.word	0x0802455d
 8024508:	08024571 	.word	0x08024571
 802450c:	080244ed 	.word	0x080244ed
 8024510:	080244ed 	.word	0x080244ed
 8024514:	080244ed 	.word	0x080244ed
 8024518:	080244ed 	.word	0x080244ed
 802451c:	08024571 	.word	0x08024571
 8024520:	080244ed 	.word	0x080244ed
 8024524:	080244ed 	.word	0x080244ed
 8024528:	080244ed 	.word	0x080244ed
 802452c:	080244ed 	.word	0x080244ed
 8024530:	0802467d 	.word	0x0802467d
 8024534:	080245a1 	.word	0x080245a1
 8024538:	0802465f 	.word	0x0802465f
 802453c:	080244ed 	.word	0x080244ed
 8024540:	080244ed 	.word	0x080244ed
 8024544:	0802469f 	.word	0x0802469f
 8024548:	080244ed 	.word	0x080244ed
 802454c:	080245a1 	.word	0x080245a1
 8024550:	080244ed 	.word	0x080244ed
 8024554:	080244ed 	.word	0x080244ed
 8024558:	08024667 	.word	0x08024667
 802455c:	680b      	ldr	r3, [r1, #0]
 802455e:	1d1a      	adds	r2, r3, #4
 8024560:	681b      	ldr	r3, [r3, #0]
 8024562:	600a      	str	r2, [r1, #0]
 8024564:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8024568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802456c:	2301      	movs	r3, #1
 802456e:	e0a3      	b.n	80246b8 <_printf_i+0x1f4>
 8024570:	6825      	ldr	r5, [r4, #0]
 8024572:	6808      	ldr	r0, [r1, #0]
 8024574:	062e      	lsls	r6, r5, #24
 8024576:	f100 0304 	add.w	r3, r0, #4
 802457a:	d50a      	bpl.n	8024592 <_printf_i+0xce>
 802457c:	6805      	ldr	r5, [r0, #0]
 802457e:	600b      	str	r3, [r1, #0]
 8024580:	2d00      	cmp	r5, #0
 8024582:	da03      	bge.n	802458c <_printf_i+0xc8>
 8024584:	232d      	movs	r3, #45	; 0x2d
 8024586:	426d      	negs	r5, r5
 8024588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802458c:	485e      	ldr	r0, [pc, #376]	; (8024708 <_printf_i+0x244>)
 802458e:	230a      	movs	r3, #10
 8024590:	e019      	b.n	80245c6 <_printf_i+0x102>
 8024592:	f015 0f40 	tst.w	r5, #64	; 0x40
 8024596:	6805      	ldr	r5, [r0, #0]
 8024598:	600b      	str	r3, [r1, #0]
 802459a:	bf18      	it	ne
 802459c:	b22d      	sxthne	r5, r5
 802459e:	e7ef      	b.n	8024580 <_printf_i+0xbc>
 80245a0:	680b      	ldr	r3, [r1, #0]
 80245a2:	6825      	ldr	r5, [r4, #0]
 80245a4:	1d18      	adds	r0, r3, #4
 80245a6:	6008      	str	r0, [r1, #0]
 80245a8:	0628      	lsls	r0, r5, #24
 80245aa:	d501      	bpl.n	80245b0 <_printf_i+0xec>
 80245ac:	681d      	ldr	r5, [r3, #0]
 80245ae:	e002      	b.n	80245b6 <_printf_i+0xf2>
 80245b0:	0669      	lsls	r1, r5, #25
 80245b2:	d5fb      	bpl.n	80245ac <_printf_i+0xe8>
 80245b4:	881d      	ldrh	r5, [r3, #0]
 80245b6:	4854      	ldr	r0, [pc, #336]	; (8024708 <_printf_i+0x244>)
 80245b8:	2f6f      	cmp	r7, #111	; 0x6f
 80245ba:	bf0c      	ite	eq
 80245bc:	2308      	moveq	r3, #8
 80245be:	230a      	movne	r3, #10
 80245c0:	2100      	movs	r1, #0
 80245c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80245c6:	6866      	ldr	r6, [r4, #4]
 80245c8:	60a6      	str	r6, [r4, #8]
 80245ca:	2e00      	cmp	r6, #0
 80245cc:	bfa2      	ittt	ge
 80245ce:	6821      	ldrge	r1, [r4, #0]
 80245d0:	f021 0104 	bicge.w	r1, r1, #4
 80245d4:	6021      	strge	r1, [r4, #0]
 80245d6:	b90d      	cbnz	r5, 80245dc <_printf_i+0x118>
 80245d8:	2e00      	cmp	r6, #0
 80245da:	d04d      	beq.n	8024678 <_printf_i+0x1b4>
 80245dc:	4616      	mov	r6, r2
 80245de:	fbb5 f1f3 	udiv	r1, r5, r3
 80245e2:	fb03 5711 	mls	r7, r3, r1, r5
 80245e6:	5dc7      	ldrb	r7, [r0, r7]
 80245e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80245ec:	462f      	mov	r7, r5
 80245ee:	42bb      	cmp	r3, r7
 80245f0:	460d      	mov	r5, r1
 80245f2:	d9f4      	bls.n	80245de <_printf_i+0x11a>
 80245f4:	2b08      	cmp	r3, #8
 80245f6:	d10b      	bne.n	8024610 <_printf_i+0x14c>
 80245f8:	6823      	ldr	r3, [r4, #0]
 80245fa:	07df      	lsls	r7, r3, #31
 80245fc:	d508      	bpl.n	8024610 <_printf_i+0x14c>
 80245fe:	6923      	ldr	r3, [r4, #16]
 8024600:	6861      	ldr	r1, [r4, #4]
 8024602:	4299      	cmp	r1, r3
 8024604:	bfde      	ittt	le
 8024606:	2330      	movle	r3, #48	; 0x30
 8024608:	f806 3c01 	strble.w	r3, [r6, #-1]
 802460c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8024610:	1b92      	subs	r2, r2, r6
 8024612:	6122      	str	r2, [r4, #16]
 8024614:	f8cd a000 	str.w	sl, [sp]
 8024618:	464b      	mov	r3, r9
 802461a:	aa03      	add	r2, sp, #12
 802461c:	4621      	mov	r1, r4
 802461e:	4640      	mov	r0, r8
 8024620:	f7ff fee2 	bl	80243e8 <_printf_common>
 8024624:	3001      	adds	r0, #1
 8024626:	d14c      	bne.n	80246c2 <_printf_i+0x1fe>
 8024628:	f04f 30ff 	mov.w	r0, #4294967295
 802462c:	b004      	add	sp, #16
 802462e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024632:	4835      	ldr	r0, [pc, #212]	; (8024708 <_printf_i+0x244>)
 8024634:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8024638:	6823      	ldr	r3, [r4, #0]
 802463a:	680e      	ldr	r6, [r1, #0]
 802463c:	061f      	lsls	r7, r3, #24
 802463e:	f856 5b04 	ldr.w	r5, [r6], #4
 8024642:	600e      	str	r6, [r1, #0]
 8024644:	d514      	bpl.n	8024670 <_printf_i+0x1ac>
 8024646:	07d9      	lsls	r1, r3, #31
 8024648:	bf44      	itt	mi
 802464a:	f043 0320 	orrmi.w	r3, r3, #32
 802464e:	6023      	strmi	r3, [r4, #0]
 8024650:	b91d      	cbnz	r5, 802465a <_printf_i+0x196>
 8024652:	6823      	ldr	r3, [r4, #0]
 8024654:	f023 0320 	bic.w	r3, r3, #32
 8024658:	6023      	str	r3, [r4, #0]
 802465a:	2310      	movs	r3, #16
 802465c:	e7b0      	b.n	80245c0 <_printf_i+0xfc>
 802465e:	6823      	ldr	r3, [r4, #0]
 8024660:	f043 0320 	orr.w	r3, r3, #32
 8024664:	6023      	str	r3, [r4, #0]
 8024666:	2378      	movs	r3, #120	; 0x78
 8024668:	4828      	ldr	r0, [pc, #160]	; (802470c <_printf_i+0x248>)
 802466a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802466e:	e7e3      	b.n	8024638 <_printf_i+0x174>
 8024670:	065e      	lsls	r6, r3, #25
 8024672:	bf48      	it	mi
 8024674:	b2ad      	uxthmi	r5, r5
 8024676:	e7e6      	b.n	8024646 <_printf_i+0x182>
 8024678:	4616      	mov	r6, r2
 802467a:	e7bb      	b.n	80245f4 <_printf_i+0x130>
 802467c:	680b      	ldr	r3, [r1, #0]
 802467e:	6826      	ldr	r6, [r4, #0]
 8024680:	6960      	ldr	r0, [r4, #20]
 8024682:	1d1d      	adds	r5, r3, #4
 8024684:	600d      	str	r5, [r1, #0]
 8024686:	0635      	lsls	r5, r6, #24
 8024688:	681b      	ldr	r3, [r3, #0]
 802468a:	d501      	bpl.n	8024690 <_printf_i+0x1cc>
 802468c:	6018      	str	r0, [r3, #0]
 802468e:	e002      	b.n	8024696 <_printf_i+0x1d2>
 8024690:	0671      	lsls	r1, r6, #25
 8024692:	d5fb      	bpl.n	802468c <_printf_i+0x1c8>
 8024694:	8018      	strh	r0, [r3, #0]
 8024696:	2300      	movs	r3, #0
 8024698:	6123      	str	r3, [r4, #16]
 802469a:	4616      	mov	r6, r2
 802469c:	e7ba      	b.n	8024614 <_printf_i+0x150>
 802469e:	680b      	ldr	r3, [r1, #0]
 80246a0:	1d1a      	adds	r2, r3, #4
 80246a2:	600a      	str	r2, [r1, #0]
 80246a4:	681e      	ldr	r6, [r3, #0]
 80246a6:	6862      	ldr	r2, [r4, #4]
 80246a8:	2100      	movs	r1, #0
 80246aa:	4630      	mov	r0, r6
 80246ac:	f7e1 fb10 	bl	8005cd0 <memchr>
 80246b0:	b108      	cbz	r0, 80246b6 <_printf_i+0x1f2>
 80246b2:	1b80      	subs	r0, r0, r6
 80246b4:	6060      	str	r0, [r4, #4]
 80246b6:	6863      	ldr	r3, [r4, #4]
 80246b8:	6123      	str	r3, [r4, #16]
 80246ba:	2300      	movs	r3, #0
 80246bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80246c0:	e7a8      	b.n	8024614 <_printf_i+0x150>
 80246c2:	6923      	ldr	r3, [r4, #16]
 80246c4:	4632      	mov	r2, r6
 80246c6:	4649      	mov	r1, r9
 80246c8:	4640      	mov	r0, r8
 80246ca:	47d0      	blx	sl
 80246cc:	3001      	adds	r0, #1
 80246ce:	d0ab      	beq.n	8024628 <_printf_i+0x164>
 80246d0:	6823      	ldr	r3, [r4, #0]
 80246d2:	079b      	lsls	r3, r3, #30
 80246d4:	d413      	bmi.n	80246fe <_printf_i+0x23a>
 80246d6:	68e0      	ldr	r0, [r4, #12]
 80246d8:	9b03      	ldr	r3, [sp, #12]
 80246da:	4298      	cmp	r0, r3
 80246dc:	bfb8      	it	lt
 80246de:	4618      	movlt	r0, r3
 80246e0:	e7a4      	b.n	802462c <_printf_i+0x168>
 80246e2:	2301      	movs	r3, #1
 80246e4:	4632      	mov	r2, r6
 80246e6:	4649      	mov	r1, r9
 80246e8:	4640      	mov	r0, r8
 80246ea:	47d0      	blx	sl
 80246ec:	3001      	adds	r0, #1
 80246ee:	d09b      	beq.n	8024628 <_printf_i+0x164>
 80246f0:	3501      	adds	r5, #1
 80246f2:	68e3      	ldr	r3, [r4, #12]
 80246f4:	9903      	ldr	r1, [sp, #12]
 80246f6:	1a5b      	subs	r3, r3, r1
 80246f8:	42ab      	cmp	r3, r5
 80246fa:	dcf2      	bgt.n	80246e2 <_printf_i+0x21e>
 80246fc:	e7eb      	b.n	80246d6 <_printf_i+0x212>
 80246fe:	2500      	movs	r5, #0
 8024700:	f104 0619 	add.w	r6, r4, #25
 8024704:	e7f5      	b.n	80246f2 <_printf_i+0x22e>
 8024706:	bf00      	nop
 8024708:	08029345 	.word	0x08029345
 802470c:	08029356 	.word	0x08029356

08024710 <__retarget_lock_acquire_recursive>:
 8024710:	4770      	bx	lr

08024712 <__retarget_lock_release_recursive>:
 8024712:	4770      	bx	lr

08024714 <memmove>:
 8024714:	4288      	cmp	r0, r1
 8024716:	b510      	push	{r4, lr}
 8024718:	eb01 0402 	add.w	r4, r1, r2
 802471c:	d902      	bls.n	8024724 <memmove+0x10>
 802471e:	4284      	cmp	r4, r0
 8024720:	4623      	mov	r3, r4
 8024722:	d807      	bhi.n	8024734 <memmove+0x20>
 8024724:	1e43      	subs	r3, r0, #1
 8024726:	42a1      	cmp	r1, r4
 8024728:	d008      	beq.n	802473c <memmove+0x28>
 802472a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802472e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024732:	e7f8      	b.n	8024726 <memmove+0x12>
 8024734:	4402      	add	r2, r0
 8024736:	4601      	mov	r1, r0
 8024738:	428a      	cmp	r2, r1
 802473a:	d100      	bne.n	802473e <memmove+0x2a>
 802473c:	bd10      	pop	{r4, pc}
 802473e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8024746:	e7f7      	b.n	8024738 <memmove+0x24>

08024748 <_realloc_r>:
 8024748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802474a:	4607      	mov	r7, r0
 802474c:	4614      	mov	r4, r2
 802474e:	460e      	mov	r6, r1
 8024750:	b921      	cbnz	r1, 802475c <_realloc_r+0x14>
 8024752:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8024756:	4611      	mov	r1, r2
 8024758:	f7ff bc34 	b.w	8023fc4 <_malloc_r>
 802475c:	b922      	cbnz	r2, 8024768 <_realloc_r+0x20>
 802475e:	f7ff fbe3 	bl	8023f28 <_free_r>
 8024762:	4625      	mov	r5, r4
 8024764:	4628      	mov	r0, r5
 8024766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024768:	f000 f814 	bl	8024794 <_malloc_usable_size_r>
 802476c:	42a0      	cmp	r0, r4
 802476e:	d20f      	bcs.n	8024790 <_realloc_r+0x48>
 8024770:	4621      	mov	r1, r4
 8024772:	4638      	mov	r0, r7
 8024774:	f7ff fc26 	bl	8023fc4 <_malloc_r>
 8024778:	4605      	mov	r5, r0
 802477a:	2800      	cmp	r0, #0
 802477c:	d0f2      	beq.n	8024764 <_realloc_r+0x1c>
 802477e:	4631      	mov	r1, r6
 8024780:	4622      	mov	r2, r4
 8024782:	f7ff fbbb 	bl	8023efc <memcpy>
 8024786:	4631      	mov	r1, r6
 8024788:	4638      	mov	r0, r7
 802478a:	f7ff fbcd 	bl	8023f28 <_free_r>
 802478e:	e7e9      	b.n	8024764 <_realloc_r+0x1c>
 8024790:	4635      	mov	r5, r6
 8024792:	e7e7      	b.n	8024764 <_realloc_r+0x1c>

08024794 <_malloc_usable_size_r>:
 8024794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024798:	1f18      	subs	r0, r3, #4
 802479a:	2b00      	cmp	r3, #0
 802479c:	bfbc      	itt	lt
 802479e:	580b      	ldrlt	r3, [r1, r0]
 80247a0:	18c0      	addlt	r0, r0, r3
 80247a2:	4770      	bx	lr
 80247a4:	0000      	movs	r0, r0
	...

080247a8 <floor>:
 80247a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80247ac:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80247b0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80247b4:	2e13      	cmp	r6, #19
 80247b6:	4602      	mov	r2, r0
 80247b8:	460b      	mov	r3, r1
 80247ba:	4607      	mov	r7, r0
 80247bc:	460c      	mov	r4, r1
 80247be:	4605      	mov	r5, r0
 80247c0:	dc34      	bgt.n	802482c <floor+0x84>
 80247c2:	2e00      	cmp	r6, #0
 80247c4:	da15      	bge.n	80247f2 <floor+0x4a>
 80247c6:	a334      	add	r3, pc, #208	; (adr r3, 8024898 <floor+0xf0>)
 80247c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247cc:	f7e1 fb00 	bl	8005dd0 <__adddf3>
 80247d0:	2200      	movs	r2, #0
 80247d2:	2300      	movs	r3, #0
 80247d4:	f7e1 fd30 	bl	8006238 <__aeabi_dcmpgt>
 80247d8:	b140      	cbz	r0, 80247ec <floor+0x44>
 80247da:	2c00      	cmp	r4, #0
 80247dc:	da59      	bge.n	8024892 <floor+0xea>
 80247de:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80247e2:	ea57 0503 	orrs.w	r5, r7, r3
 80247e6:	d001      	beq.n	80247ec <floor+0x44>
 80247e8:	4c2d      	ldr	r4, [pc, #180]	; (80248a0 <floor+0xf8>)
 80247ea:	2500      	movs	r5, #0
 80247ec:	4623      	mov	r3, r4
 80247ee:	462f      	mov	r7, r5
 80247f0:	e025      	b.n	802483e <floor+0x96>
 80247f2:	4a2c      	ldr	r2, [pc, #176]	; (80248a4 <floor+0xfc>)
 80247f4:	fa42 f806 	asr.w	r8, r2, r6
 80247f8:	ea01 0208 	and.w	r2, r1, r8
 80247fc:	4302      	orrs	r2, r0
 80247fe:	d01e      	beq.n	802483e <floor+0x96>
 8024800:	a325      	add	r3, pc, #148	; (adr r3, 8024898 <floor+0xf0>)
 8024802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024806:	f7e1 fae3 	bl	8005dd0 <__adddf3>
 802480a:	2200      	movs	r2, #0
 802480c:	2300      	movs	r3, #0
 802480e:	f7e1 fd13 	bl	8006238 <__aeabi_dcmpgt>
 8024812:	2800      	cmp	r0, #0
 8024814:	d0ea      	beq.n	80247ec <floor+0x44>
 8024816:	2c00      	cmp	r4, #0
 8024818:	bfbe      	ittt	lt
 802481a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 802481e:	fa43 f606 	asrlt.w	r6, r3, r6
 8024822:	19a4      	addlt	r4, r4, r6
 8024824:	ea24 0408 	bic.w	r4, r4, r8
 8024828:	2500      	movs	r5, #0
 802482a:	e7df      	b.n	80247ec <floor+0x44>
 802482c:	2e33      	cmp	r6, #51	; 0x33
 802482e:	dd0a      	ble.n	8024846 <floor+0x9e>
 8024830:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024834:	d103      	bne.n	802483e <floor+0x96>
 8024836:	f7e1 facb 	bl	8005dd0 <__adddf3>
 802483a:	4607      	mov	r7, r0
 802483c:	460b      	mov	r3, r1
 802483e:	4638      	mov	r0, r7
 8024840:	4619      	mov	r1, r3
 8024842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024846:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 802484a:	f04f 32ff 	mov.w	r2, #4294967295
 802484e:	fa22 f808 	lsr.w	r8, r2, r8
 8024852:	ea18 0f00 	tst.w	r8, r0
 8024856:	d0f2      	beq.n	802483e <floor+0x96>
 8024858:	a30f      	add	r3, pc, #60	; (adr r3, 8024898 <floor+0xf0>)
 802485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802485e:	f7e1 fab7 	bl	8005dd0 <__adddf3>
 8024862:	2200      	movs	r2, #0
 8024864:	2300      	movs	r3, #0
 8024866:	f7e1 fce7 	bl	8006238 <__aeabi_dcmpgt>
 802486a:	2800      	cmp	r0, #0
 802486c:	d0be      	beq.n	80247ec <floor+0x44>
 802486e:	2c00      	cmp	r4, #0
 8024870:	da02      	bge.n	8024878 <floor+0xd0>
 8024872:	2e14      	cmp	r6, #20
 8024874:	d103      	bne.n	802487e <floor+0xd6>
 8024876:	3401      	adds	r4, #1
 8024878:	ea25 0508 	bic.w	r5, r5, r8
 802487c:	e7b6      	b.n	80247ec <floor+0x44>
 802487e:	2301      	movs	r3, #1
 8024880:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8024884:	fa03 f606 	lsl.w	r6, r3, r6
 8024888:	4435      	add	r5, r6
 802488a:	42bd      	cmp	r5, r7
 802488c:	bf38      	it	cc
 802488e:	18e4      	addcc	r4, r4, r3
 8024890:	e7f2      	b.n	8024878 <floor+0xd0>
 8024892:	2500      	movs	r5, #0
 8024894:	462c      	mov	r4, r5
 8024896:	e7a9      	b.n	80247ec <floor+0x44>
 8024898:	8800759c 	.word	0x8800759c
 802489c:	7e37e43c 	.word	0x7e37e43c
 80248a0:	bff00000 	.word	0xbff00000
 80248a4:	000fffff 	.word	0x000fffff

080248a8 <_init>:
 80248a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248aa:	bf00      	nop
 80248ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80248ae:	bc08      	pop	{r3}
 80248b0:	469e      	mov	lr, r3
 80248b2:	4770      	bx	lr

080248b4 <_fini>:
 80248b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248b6:	bf00      	nop
 80248b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80248ba:	bc08      	pop	{r3}
 80248bc:	469e      	mov	lr, r3
 80248be:	4770      	bx	lr
