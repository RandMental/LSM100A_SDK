
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08002000  08002000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a38  08002138  08002138  00002138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca0  08013b70  08013b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014810  08014810  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014810  08014810  00014810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014818  08014818  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014818  08014818  00014818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801481c  0801481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 00000000  0803e500  0803e500  000200d8  2**0
                  CONTENTS
  9 .data         000000d8  20000000  08014820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001980  200000d8  080148f8  000200d8  2**2
                  ALLOC
 11 RAM1_region   00000000  20001a58  20001a58  000200d8  2**0
                  CONTENTS
 12 RAM2_region   00000000  20008000  20008000  000200d8  2**0
                  CONTENTS
 13 ._user_heap_stack 00001200  20001a58  20001a58  00021a58  2**0
                  ALLOC
 14 .ARM.attributes 0000002a  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 15 .debug_info   0007930e  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000ccf7  00000000  00000000  00099410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    000233f3  00000000  00000000  000a6107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000029b0  00000000  00000000  000c9500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002b90  00000000  00000000  000cbeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002bc7b  00000000  00000000  000cea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00049ad2  00000000  00000000  000fa6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000dd650  00000000  00000000  0014418d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  002217dd  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000776c  00000000  00000000  00221830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08002138 <__do_global_dtors_aux>:
 8002138:	b510      	push	{r4, lr}
 800213a:	4c05      	ldr	r4, [pc, #20]	; (8002150 <__do_global_dtors_aux+0x18>)
 800213c:	7823      	ldrb	r3, [r4, #0]
 800213e:	b933      	cbnz	r3, 800214e <__do_global_dtors_aux+0x16>
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <__do_global_dtors_aux+0x1c>)
 8002142:	b113      	cbz	r3, 800214a <__do_global_dtors_aux+0x12>
 8002144:	4804      	ldr	r0, [pc, #16]	; (8002158 <__do_global_dtors_aux+0x20>)
 8002146:	f3af 8000 	nop.w
 800214a:	2301      	movs	r3, #1
 800214c:	7023      	strb	r3, [r4, #0]
 800214e:	bd10      	pop	{r4, pc}
 8002150:	200000d8 	.word	0x200000d8
 8002154:	00000000 	.word	0x00000000
 8002158:	08013b58 	.word	0x08013b58

0800215c <frame_dummy>:
 800215c:	b508      	push	{r3, lr}
 800215e:	4b03      	ldr	r3, [pc, #12]	; (800216c <frame_dummy+0x10>)
 8002160:	b11b      	cbz	r3, 800216a <frame_dummy+0xe>
 8002162:	4903      	ldr	r1, [pc, #12]	; (8002170 <frame_dummy+0x14>)
 8002164:	4803      	ldr	r0, [pc, #12]	; (8002174 <frame_dummy+0x18>)
 8002166:	f3af 8000 	nop.w
 800216a:	bd08      	pop	{r3, pc}
 800216c:	00000000 	.word	0x00000000
 8002170:	200000dc 	.word	0x200000dc
 8002174:	08013b58 	.word	0x08013b58

08002178 <strlen>:
 8002178:	4603      	mov	r3, r0
 800217a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800217e:	2a00      	cmp	r2, #0
 8002180:	d1fb      	bne.n	800217a <strlen+0x2>
 8002182:	1a18      	subs	r0, r3, r0
 8002184:	3801      	subs	r0, #1
 8002186:	4770      	bx	lr

08002188 <__aeabi_drsub>:
 8002188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800218c:	e002      	b.n	8002194 <__adddf3>
 800218e:	bf00      	nop

08002190 <__aeabi_dsub>:
 8002190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002194 <__adddf3>:
 8002194:	b530      	push	{r4, r5, lr}
 8002196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800219a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800219e:	ea94 0f05 	teq	r4, r5
 80021a2:	bf08      	it	eq
 80021a4:	ea90 0f02 	teqeq	r0, r2
 80021a8:	bf1f      	itttt	ne
 80021aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80021ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80021b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80021b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80021ba:	f000 80e2 	beq.w	8002382 <__adddf3+0x1ee>
 80021be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80021c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80021c6:	bfb8      	it	lt
 80021c8:	426d      	neglt	r5, r5
 80021ca:	dd0c      	ble.n	80021e6 <__adddf3+0x52>
 80021cc:	442c      	add	r4, r5
 80021ce:	ea80 0202 	eor.w	r2, r0, r2
 80021d2:	ea81 0303 	eor.w	r3, r1, r3
 80021d6:	ea82 0000 	eor.w	r0, r2, r0
 80021da:	ea83 0101 	eor.w	r1, r3, r1
 80021de:	ea80 0202 	eor.w	r2, r0, r2
 80021e2:	ea81 0303 	eor.w	r3, r1, r3
 80021e6:	2d36      	cmp	r5, #54	; 0x36
 80021e8:	bf88      	it	hi
 80021ea:	bd30      	pophi	{r4, r5, pc}
 80021ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80021f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80021f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80021f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80021fc:	d002      	beq.n	8002204 <__adddf3+0x70>
 80021fe:	4240      	negs	r0, r0
 8002200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800220c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002210:	d002      	beq.n	8002218 <__adddf3+0x84>
 8002212:	4252      	negs	r2, r2
 8002214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002218:	ea94 0f05 	teq	r4, r5
 800221c:	f000 80a7 	beq.w	800236e <__adddf3+0x1da>
 8002220:	f1a4 0401 	sub.w	r4, r4, #1
 8002224:	f1d5 0e20 	rsbs	lr, r5, #32
 8002228:	db0d      	blt.n	8002246 <__adddf3+0xb2>
 800222a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800222e:	fa22 f205 	lsr.w	r2, r2, r5
 8002232:	1880      	adds	r0, r0, r2
 8002234:	f141 0100 	adc.w	r1, r1, #0
 8002238:	fa03 f20e 	lsl.w	r2, r3, lr
 800223c:	1880      	adds	r0, r0, r2
 800223e:	fa43 f305 	asr.w	r3, r3, r5
 8002242:	4159      	adcs	r1, r3
 8002244:	e00e      	b.n	8002264 <__adddf3+0xd0>
 8002246:	f1a5 0520 	sub.w	r5, r5, #32
 800224a:	f10e 0e20 	add.w	lr, lr, #32
 800224e:	2a01      	cmp	r2, #1
 8002250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002254:	bf28      	it	cs
 8002256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800225a:	fa43 f305 	asr.w	r3, r3, r5
 800225e:	18c0      	adds	r0, r0, r3
 8002260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002268:	d507      	bpl.n	800227a <__adddf3+0xe6>
 800226a:	f04f 0e00 	mov.w	lr, #0
 800226e:	f1dc 0c00 	rsbs	ip, ip, #0
 8002272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002276:	eb6e 0101 	sbc.w	r1, lr, r1
 800227a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800227e:	d31b      	bcc.n	80022b8 <__adddf3+0x124>
 8002280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002284:	d30c      	bcc.n	80022a0 <__adddf3+0x10c>
 8002286:	0849      	lsrs	r1, r1, #1
 8002288:	ea5f 0030 	movs.w	r0, r0, rrx
 800228c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002290:	f104 0401 	add.w	r4, r4, #1
 8002294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800229c:	f080 809a 	bcs.w	80023d4 <__adddf3+0x240>
 80022a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80022a4:	bf08      	it	eq
 80022a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80022aa:	f150 0000 	adcs.w	r0, r0, #0
 80022ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80022b2:	ea41 0105 	orr.w	r1, r1, r5
 80022b6:	bd30      	pop	{r4, r5, pc}
 80022b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80022bc:	4140      	adcs	r0, r0
 80022be:	eb41 0101 	adc.w	r1, r1, r1
 80022c2:	3c01      	subs	r4, #1
 80022c4:	bf28      	it	cs
 80022c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80022ca:	d2e9      	bcs.n	80022a0 <__adddf3+0x10c>
 80022cc:	f091 0f00 	teq	r1, #0
 80022d0:	bf04      	itt	eq
 80022d2:	4601      	moveq	r1, r0
 80022d4:	2000      	moveq	r0, #0
 80022d6:	fab1 f381 	clz	r3, r1
 80022da:	bf08      	it	eq
 80022dc:	3320      	addeq	r3, #32
 80022de:	f1a3 030b 	sub.w	r3, r3, #11
 80022e2:	f1b3 0220 	subs.w	r2, r3, #32
 80022e6:	da0c      	bge.n	8002302 <__adddf3+0x16e>
 80022e8:	320c      	adds	r2, #12
 80022ea:	dd08      	ble.n	80022fe <__adddf3+0x16a>
 80022ec:	f102 0c14 	add.w	ip, r2, #20
 80022f0:	f1c2 020c 	rsb	r2, r2, #12
 80022f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80022f8:	fa21 f102 	lsr.w	r1, r1, r2
 80022fc:	e00c      	b.n	8002318 <__adddf3+0x184>
 80022fe:	f102 0214 	add.w	r2, r2, #20
 8002302:	bfd8      	it	le
 8002304:	f1c2 0c20 	rsble	ip, r2, #32
 8002308:	fa01 f102 	lsl.w	r1, r1, r2
 800230c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002310:	bfdc      	itt	le
 8002312:	ea41 010c 	orrle.w	r1, r1, ip
 8002316:	4090      	lslle	r0, r2
 8002318:	1ae4      	subs	r4, r4, r3
 800231a:	bfa2      	ittt	ge
 800231c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002320:	4329      	orrge	r1, r5
 8002322:	bd30      	popge	{r4, r5, pc}
 8002324:	ea6f 0404 	mvn.w	r4, r4
 8002328:	3c1f      	subs	r4, #31
 800232a:	da1c      	bge.n	8002366 <__adddf3+0x1d2>
 800232c:	340c      	adds	r4, #12
 800232e:	dc0e      	bgt.n	800234e <__adddf3+0x1ba>
 8002330:	f104 0414 	add.w	r4, r4, #20
 8002334:	f1c4 0220 	rsb	r2, r4, #32
 8002338:	fa20 f004 	lsr.w	r0, r0, r4
 800233c:	fa01 f302 	lsl.w	r3, r1, r2
 8002340:	ea40 0003 	orr.w	r0, r0, r3
 8002344:	fa21 f304 	lsr.w	r3, r1, r4
 8002348:	ea45 0103 	orr.w	r1, r5, r3
 800234c:	bd30      	pop	{r4, r5, pc}
 800234e:	f1c4 040c 	rsb	r4, r4, #12
 8002352:	f1c4 0220 	rsb	r2, r4, #32
 8002356:	fa20 f002 	lsr.w	r0, r0, r2
 800235a:	fa01 f304 	lsl.w	r3, r1, r4
 800235e:	ea40 0003 	orr.w	r0, r0, r3
 8002362:	4629      	mov	r1, r5
 8002364:	bd30      	pop	{r4, r5, pc}
 8002366:	fa21 f004 	lsr.w	r0, r1, r4
 800236a:	4629      	mov	r1, r5
 800236c:	bd30      	pop	{r4, r5, pc}
 800236e:	f094 0f00 	teq	r4, #0
 8002372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002376:	bf06      	itte	eq
 8002378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800237c:	3401      	addeq	r4, #1
 800237e:	3d01      	subne	r5, #1
 8002380:	e74e      	b.n	8002220 <__adddf3+0x8c>
 8002382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002386:	bf18      	it	ne
 8002388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800238c:	d029      	beq.n	80023e2 <__adddf3+0x24e>
 800238e:	ea94 0f05 	teq	r4, r5
 8002392:	bf08      	it	eq
 8002394:	ea90 0f02 	teqeq	r0, r2
 8002398:	d005      	beq.n	80023a6 <__adddf3+0x212>
 800239a:	ea54 0c00 	orrs.w	ip, r4, r0
 800239e:	bf04      	itt	eq
 80023a0:	4619      	moveq	r1, r3
 80023a2:	4610      	moveq	r0, r2
 80023a4:	bd30      	pop	{r4, r5, pc}
 80023a6:	ea91 0f03 	teq	r1, r3
 80023aa:	bf1e      	ittt	ne
 80023ac:	2100      	movne	r1, #0
 80023ae:	2000      	movne	r0, #0
 80023b0:	bd30      	popne	{r4, r5, pc}
 80023b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80023b6:	d105      	bne.n	80023c4 <__adddf3+0x230>
 80023b8:	0040      	lsls	r0, r0, #1
 80023ba:	4149      	adcs	r1, r1
 80023bc:	bf28      	it	cs
 80023be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80023c2:	bd30      	pop	{r4, r5, pc}
 80023c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80023c8:	bf3c      	itt	cc
 80023ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80023ce:	bd30      	popcc	{r4, r5, pc}
 80023d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80023d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80023d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80023dc:	f04f 0000 	mov.w	r0, #0
 80023e0:	bd30      	pop	{r4, r5, pc}
 80023e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80023e6:	bf1a      	itte	ne
 80023e8:	4619      	movne	r1, r3
 80023ea:	4610      	movne	r0, r2
 80023ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80023f0:	bf1c      	itt	ne
 80023f2:	460b      	movne	r3, r1
 80023f4:	4602      	movne	r2, r0
 80023f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80023fa:	bf06      	itte	eq
 80023fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002400:	ea91 0f03 	teqeq	r1, r3
 8002404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002408:	bd30      	pop	{r4, r5, pc}
 800240a:	bf00      	nop

0800240c <__aeabi_ui2d>:
 800240c:	f090 0f00 	teq	r0, #0
 8002410:	bf04      	itt	eq
 8002412:	2100      	moveq	r1, #0
 8002414:	4770      	bxeq	lr
 8002416:	b530      	push	{r4, r5, lr}
 8002418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800241c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002420:	f04f 0500 	mov.w	r5, #0
 8002424:	f04f 0100 	mov.w	r1, #0
 8002428:	e750      	b.n	80022cc <__adddf3+0x138>
 800242a:	bf00      	nop

0800242c <__aeabi_i2d>:
 800242c:	f090 0f00 	teq	r0, #0
 8002430:	bf04      	itt	eq
 8002432:	2100      	moveq	r1, #0
 8002434:	4770      	bxeq	lr
 8002436:	b530      	push	{r4, r5, lr}
 8002438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800243c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002444:	bf48      	it	mi
 8002446:	4240      	negmi	r0, r0
 8002448:	f04f 0100 	mov.w	r1, #0
 800244c:	e73e      	b.n	80022cc <__adddf3+0x138>
 800244e:	bf00      	nop

08002450 <__aeabi_f2d>:
 8002450:	0042      	lsls	r2, r0, #1
 8002452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002456:	ea4f 0131 	mov.w	r1, r1, rrx
 800245a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800245e:	bf1f      	itttt	ne
 8002460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800246c:	4770      	bxne	lr
 800246e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8002472:	bf08      	it	eq
 8002474:	4770      	bxeq	lr
 8002476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800247a:	bf04      	itt	eq
 800247c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8002480:	4770      	bxeq	lr
 8002482:	b530      	push	{r4, r5, lr}
 8002484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800248c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002490:	e71c      	b.n	80022cc <__adddf3+0x138>
 8002492:	bf00      	nop

08002494 <__aeabi_ul2d>:
 8002494:	ea50 0201 	orrs.w	r2, r0, r1
 8002498:	bf08      	it	eq
 800249a:	4770      	bxeq	lr
 800249c:	b530      	push	{r4, r5, lr}
 800249e:	f04f 0500 	mov.w	r5, #0
 80024a2:	e00a      	b.n	80024ba <__aeabi_l2d+0x16>

080024a4 <__aeabi_l2d>:
 80024a4:	ea50 0201 	orrs.w	r2, r0, r1
 80024a8:	bf08      	it	eq
 80024aa:	4770      	bxeq	lr
 80024ac:	b530      	push	{r4, r5, lr}
 80024ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80024b2:	d502      	bpl.n	80024ba <__aeabi_l2d+0x16>
 80024b4:	4240      	negs	r0, r0
 80024b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80024ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80024be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80024c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80024c6:	f43f aed8 	beq.w	800227a <__adddf3+0xe6>
 80024ca:	f04f 0203 	mov.w	r2, #3
 80024ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80024d2:	bf18      	it	ne
 80024d4:	3203      	addne	r2, #3
 80024d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80024da:	bf18      	it	ne
 80024dc:	3203      	addne	r2, #3
 80024de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80024e2:	f1c2 0320 	rsb	r3, r2, #32
 80024e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80024ea:	fa20 f002 	lsr.w	r0, r0, r2
 80024ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80024f2:	ea40 000e 	orr.w	r0, r0, lr
 80024f6:	fa21 f102 	lsr.w	r1, r1, r2
 80024fa:	4414      	add	r4, r2
 80024fc:	e6bd      	b.n	800227a <__adddf3+0xe6>
 80024fe:	bf00      	nop

08002500 <__gedf2>:
 8002500:	f04f 3cff 	mov.w	ip, #4294967295
 8002504:	e006      	b.n	8002514 <__cmpdf2+0x4>
 8002506:	bf00      	nop

08002508 <__ledf2>:
 8002508:	f04f 0c01 	mov.w	ip, #1
 800250c:	e002      	b.n	8002514 <__cmpdf2+0x4>
 800250e:	bf00      	nop

08002510 <__cmpdf2>:
 8002510:	f04f 0c01 	mov.w	ip, #1
 8002514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800251c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002524:	bf18      	it	ne
 8002526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800252a:	d01b      	beq.n	8002564 <__cmpdf2+0x54>
 800252c:	b001      	add	sp, #4
 800252e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002532:	bf0c      	ite	eq
 8002534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002538:	ea91 0f03 	teqne	r1, r3
 800253c:	bf02      	ittt	eq
 800253e:	ea90 0f02 	teqeq	r0, r2
 8002542:	2000      	moveq	r0, #0
 8002544:	4770      	bxeq	lr
 8002546:	f110 0f00 	cmn.w	r0, #0
 800254a:	ea91 0f03 	teq	r1, r3
 800254e:	bf58      	it	pl
 8002550:	4299      	cmppl	r1, r3
 8002552:	bf08      	it	eq
 8002554:	4290      	cmpeq	r0, r2
 8002556:	bf2c      	ite	cs
 8002558:	17d8      	asrcs	r0, r3, #31
 800255a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800255e:	f040 0001 	orr.w	r0, r0, #1
 8002562:	4770      	bx	lr
 8002564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800256c:	d102      	bne.n	8002574 <__cmpdf2+0x64>
 800256e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002572:	d107      	bne.n	8002584 <__cmpdf2+0x74>
 8002574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800257c:	d1d6      	bne.n	800252c <__cmpdf2+0x1c>
 800257e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002582:	d0d3      	beq.n	800252c <__cmpdf2+0x1c>
 8002584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop

0800258c <__aeabi_cdrcmple>:
 800258c:	4684      	mov	ip, r0
 800258e:	4610      	mov	r0, r2
 8002590:	4662      	mov	r2, ip
 8002592:	468c      	mov	ip, r1
 8002594:	4619      	mov	r1, r3
 8002596:	4663      	mov	r3, ip
 8002598:	e000      	b.n	800259c <__aeabi_cdcmpeq>
 800259a:	bf00      	nop

0800259c <__aeabi_cdcmpeq>:
 800259c:	b501      	push	{r0, lr}
 800259e:	f7ff ffb7 	bl	8002510 <__cmpdf2>
 80025a2:	2800      	cmp	r0, #0
 80025a4:	bf48      	it	mi
 80025a6:	f110 0f00 	cmnmi.w	r0, #0
 80025aa:	bd01      	pop	{r0, pc}

080025ac <__aeabi_dcmpeq>:
 80025ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80025b0:	f7ff fff4 	bl	800259c <__aeabi_cdcmpeq>
 80025b4:	bf0c      	ite	eq
 80025b6:	2001      	moveq	r0, #1
 80025b8:	2000      	movne	r0, #0
 80025ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80025be:	bf00      	nop

080025c0 <__aeabi_dcmplt>:
 80025c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80025c4:	f7ff ffea 	bl	800259c <__aeabi_cdcmpeq>
 80025c8:	bf34      	ite	cc
 80025ca:	2001      	movcc	r0, #1
 80025cc:	2000      	movcs	r0, #0
 80025ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80025d2:	bf00      	nop

080025d4 <__aeabi_dcmple>:
 80025d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80025d8:	f7ff ffe0 	bl	800259c <__aeabi_cdcmpeq>
 80025dc:	bf94      	ite	ls
 80025de:	2001      	movls	r0, #1
 80025e0:	2000      	movhi	r0, #0
 80025e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80025e6:	bf00      	nop

080025e8 <__aeabi_dcmpge>:
 80025e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80025ec:	f7ff ffce 	bl	800258c <__aeabi_cdrcmple>
 80025f0:	bf94      	ite	ls
 80025f2:	2001      	movls	r0, #1
 80025f4:	2000      	movhi	r0, #0
 80025f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80025fa:	bf00      	nop

080025fc <__aeabi_dcmpgt>:
 80025fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002600:	f7ff ffc4 	bl	800258c <__aeabi_cdrcmple>
 8002604:	bf34      	ite	cc
 8002606:	2001      	movcc	r0, #1
 8002608:	2000      	movcs	r0, #0
 800260a:	f85d fb08 	ldr.w	pc, [sp], #8
 800260e:	bf00      	nop

08002610 <__aeabi_d2iz>:
 8002610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8002618:	d215      	bcs.n	8002646 <__aeabi_d2iz+0x36>
 800261a:	d511      	bpl.n	8002640 <__aeabi_d2iz+0x30>
 800261c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8002620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002624:	d912      	bls.n	800264c <__aeabi_d2iz+0x3c>
 8002626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800262a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800262e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8002632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002636:	fa23 f002 	lsr.w	r0, r3, r2
 800263a:	bf18      	it	ne
 800263c:	4240      	negne	r0, r0
 800263e:	4770      	bx	lr
 8002640:	f04f 0000 	mov.w	r0, #0
 8002644:	4770      	bx	lr
 8002646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800264a:	d105      	bne.n	8002658 <__aeabi_d2iz+0x48>
 800264c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8002650:	bf08      	it	eq
 8002652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8002656:	4770      	bx	lr
 8002658:	f04f 0000 	mov.w	r0, #0
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop

08002660 <__aeabi_frsub>:
 8002660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8002664:	e002      	b.n	800266c <__addsf3>
 8002666:	bf00      	nop

08002668 <__aeabi_fsub>:
 8002668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800266c <__addsf3>:
 800266c:	0042      	lsls	r2, r0, #1
 800266e:	bf1f      	itttt	ne
 8002670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8002674:	ea92 0f03 	teqne	r2, r3
 8002678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800267c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002680:	d06a      	beq.n	8002758 <__addsf3+0xec>
 8002682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8002686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800268a:	bfc1      	itttt	gt
 800268c:	18d2      	addgt	r2, r2, r3
 800268e:	4041      	eorgt	r1, r0
 8002690:	4048      	eorgt	r0, r1
 8002692:	4041      	eorgt	r1, r0
 8002694:	bfb8      	it	lt
 8002696:	425b      	neglt	r3, r3
 8002698:	2b19      	cmp	r3, #25
 800269a:	bf88      	it	hi
 800269c:	4770      	bxhi	lr
 800269e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80026a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80026a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80026aa:	bf18      	it	ne
 80026ac:	4240      	negne	r0, r0
 80026ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80026b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80026b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80026ba:	bf18      	it	ne
 80026bc:	4249      	negne	r1, r1
 80026be:	ea92 0f03 	teq	r2, r3
 80026c2:	d03f      	beq.n	8002744 <__addsf3+0xd8>
 80026c4:	f1a2 0201 	sub.w	r2, r2, #1
 80026c8:	fa41 fc03 	asr.w	ip, r1, r3
 80026cc:	eb10 000c 	adds.w	r0, r0, ip
 80026d0:	f1c3 0320 	rsb	r3, r3, #32
 80026d4:	fa01 f103 	lsl.w	r1, r1, r3
 80026d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80026dc:	d502      	bpl.n	80026e4 <__addsf3+0x78>
 80026de:	4249      	negs	r1, r1
 80026e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80026e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80026e8:	d313      	bcc.n	8002712 <__addsf3+0xa6>
 80026ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80026ee:	d306      	bcc.n	80026fe <__addsf3+0x92>
 80026f0:	0840      	lsrs	r0, r0, #1
 80026f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80026f6:	f102 0201 	add.w	r2, r2, #1
 80026fa:	2afe      	cmp	r2, #254	; 0xfe
 80026fc:	d251      	bcs.n	80027a2 <__addsf3+0x136>
 80026fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8002702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8002706:	bf08      	it	eq
 8002708:	f020 0001 	biceq.w	r0, r0, #1
 800270c:	ea40 0003 	orr.w	r0, r0, r3
 8002710:	4770      	bx	lr
 8002712:	0049      	lsls	r1, r1, #1
 8002714:	eb40 0000 	adc.w	r0, r0, r0
 8002718:	3a01      	subs	r2, #1
 800271a:	bf28      	it	cs
 800271c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8002720:	d2ed      	bcs.n	80026fe <__addsf3+0x92>
 8002722:	fab0 fc80 	clz	ip, r0
 8002726:	f1ac 0c08 	sub.w	ip, ip, #8
 800272a:	ebb2 020c 	subs.w	r2, r2, ip
 800272e:	fa00 f00c 	lsl.w	r0, r0, ip
 8002732:	bfaa      	itet	ge
 8002734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8002738:	4252      	neglt	r2, r2
 800273a:	4318      	orrge	r0, r3
 800273c:	bfbc      	itt	lt
 800273e:	40d0      	lsrlt	r0, r2
 8002740:	4318      	orrlt	r0, r3
 8002742:	4770      	bx	lr
 8002744:	f092 0f00 	teq	r2, #0
 8002748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800274c:	bf06      	itte	eq
 800274e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8002752:	3201      	addeq	r2, #1
 8002754:	3b01      	subne	r3, #1
 8002756:	e7b5      	b.n	80026c4 <__addsf3+0x58>
 8002758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800275c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8002760:	bf18      	it	ne
 8002762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002766:	d021      	beq.n	80027ac <__addsf3+0x140>
 8002768:	ea92 0f03 	teq	r2, r3
 800276c:	d004      	beq.n	8002778 <__addsf3+0x10c>
 800276e:	f092 0f00 	teq	r2, #0
 8002772:	bf08      	it	eq
 8002774:	4608      	moveq	r0, r1
 8002776:	4770      	bx	lr
 8002778:	ea90 0f01 	teq	r0, r1
 800277c:	bf1c      	itt	ne
 800277e:	2000      	movne	r0, #0
 8002780:	4770      	bxne	lr
 8002782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8002786:	d104      	bne.n	8002792 <__addsf3+0x126>
 8002788:	0040      	lsls	r0, r0, #1
 800278a:	bf28      	it	cs
 800278c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8002790:	4770      	bx	lr
 8002792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8002796:	bf3c      	itt	cc
 8002798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800279c:	4770      	bxcc	lr
 800279e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80027a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80027a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80027aa:	4770      	bx	lr
 80027ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80027b0:	bf16      	itet	ne
 80027b2:	4608      	movne	r0, r1
 80027b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80027b8:	4601      	movne	r1, r0
 80027ba:	0242      	lsls	r2, r0, #9
 80027bc:	bf06      	itte	eq
 80027be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80027c2:	ea90 0f01 	teqeq	r0, r1
 80027c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80027ca:	4770      	bx	lr

080027cc <__aeabi_ui2f>:
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e004      	b.n	80027dc <__aeabi_i2f+0x8>
 80027d2:	bf00      	nop

080027d4 <__aeabi_i2f>:
 80027d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80027d8:	bf48      	it	mi
 80027da:	4240      	negmi	r0, r0
 80027dc:	ea5f 0c00 	movs.w	ip, r0
 80027e0:	bf08      	it	eq
 80027e2:	4770      	bxeq	lr
 80027e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80027e8:	4601      	mov	r1, r0
 80027ea:	f04f 0000 	mov.w	r0, #0
 80027ee:	e01c      	b.n	800282a <__aeabi_l2f+0x2a>

080027f0 <__aeabi_ul2f>:
 80027f0:	ea50 0201 	orrs.w	r2, r0, r1
 80027f4:	bf08      	it	eq
 80027f6:	4770      	bxeq	lr
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	e00a      	b.n	8002814 <__aeabi_l2f+0x14>
 80027fe:	bf00      	nop

08002800 <__aeabi_l2f>:
 8002800:	ea50 0201 	orrs.w	r2, r0, r1
 8002804:	bf08      	it	eq
 8002806:	4770      	bxeq	lr
 8002808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800280c:	d502      	bpl.n	8002814 <__aeabi_l2f+0x14>
 800280e:	4240      	negs	r0, r0
 8002810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002814:	ea5f 0c01 	movs.w	ip, r1
 8002818:	bf02      	ittt	eq
 800281a:	4684      	moveq	ip, r0
 800281c:	4601      	moveq	r1, r0
 800281e:	2000      	moveq	r0, #0
 8002820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8002824:	bf08      	it	eq
 8002826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800282a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800282e:	fabc f28c 	clz	r2, ip
 8002832:	3a08      	subs	r2, #8
 8002834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8002838:	db10      	blt.n	800285c <__aeabi_l2f+0x5c>
 800283a:	fa01 fc02 	lsl.w	ip, r1, r2
 800283e:	4463      	add	r3, ip
 8002840:	fa00 fc02 	lsl.w	ip, r0, r2
 8002844:	f1c2 0220 	rsb	r2, r2, #32
 8002848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800284c:	fa20 f202 	lsr.w	r2, r0, r2
 8002850:	eb43 0002 	adc.w	r0, r3, r2
 8002854:	bf08      	it	eq
 8002856:	f020 0001 	biceq.w	r0, r0, #1
 800285a:	4770      	bx	lr
 800285c:	f102 0220 	add.w	r2, r2, #32
 8002860:	fa01 fc02 	lsl.w	ip, r1, r2
 8002864:	f1c2 0220 	rsb	r2, r2, #32
 8002868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800286c:	fa21 f202 	lsr.w	r2, r1, r2
 8002870:	eb43 0002 	adc.w	r0, r3, r2
 8002874:	bf08      	it	eq
 8002876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800287a:	4770      	bx	lr

0800287c <__aeabi_fmul>:
 800287c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8002884:	bf1e      	ittt	ne
 8002886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800288a:	ea92 0f0c 	teqne	r2, ip
 800288e:	ea93 0f0c 	teqne	r3, ip
 8002892:	d06f      	beq.n	8002974 <__aeabi_fmul+0xf8>
 8002894:	441a      	add	r2, r3
 8002896:	ea80 0c01 	eor.w	ip, r0, r1
 800289a:	0240      	lsls	r0, r0, #9
 800289c:	bf18      	it	ne
 800289e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80028a2:	d01e      	beq.n	80028e2 <__aeabi_fmul+0x66>
 80028a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80028a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80028ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80028b0:	fba0 3101 	umull	r3, r1, r0, r1
 80028b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80028b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80028bc:	bf3e      	ittt	cc
 80028be:	0049      	lslcc	r1, r1, #1
 80028c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80028c4:	005b      	lslcc	r3, r3, #1
 80028c6:	ea40 0001 	orr.w	r0, r0, r1
 80028ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80028ce:	2afd      	cmp	r2, #253	; 0xfd
 80028d0:	d81d      	bhi.n	800290e <__aeabi_fmul+0x92>
 80028d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80028da:	bf08      	it	eq
 80028dc:	f020 0001 	biceq.w	r0, r0, #1
 80028e0:	4770      	bx	lr
 80028e2:	f090 0f00 	teq	r0, #0
 80028e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80028ea:	bf08      	it	eq
 80028ec:	0249      	lsleq	r1, r1, #9
 80028ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80028f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80028f6:	3a7f      	subs	r2, #127	; 0x7f
 80028f8:	bfc2      	ittt	gt
 80028fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80028fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8002902:	4770      	bxgt	lr
 8002904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	3a01      	subs	r2, #1
 800290e:	dc5d      	bgt.n	80029cc <__aeabi_fmul+0x150>
 8002910:	f112 0f19 	cmn.w	r2, #25
 8002914:	bfdc      	itt	le
 8002916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800291a:	4770      	bxle	lr
 800291c:	f1c2 0200 	rsb	r2, r2, #0
 8002920:	0041      	lsls	r1, r0, #1
 8002922:	fa21 f102 	lsr.w	r1, r1, r2
 8002926:	f1c2 0220 	rsb	r2, r2, #32
 800292a:	fa00 fc02 	lsl.w	ip, r0, r2
 800292e:	ea5f 0031 	movs.w	r0, r1, rrx
 8002932:	f140 0000 	adc.w	r0, r0, #0
 8002936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800293a:	bf08      	it	eq
 800293c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8002940:	4770      	bx	lr
 8002942:	f092 0f00 	teq	r2, #0
 8002946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800294a:	bf02      	ittt	eq
 800294c:	0040      	lsleq	r0, r0, #1
 800294e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8002952:	3a01      	subeq	r2, #1
 8002954:	d0f9      	beq.n	800294a <__aeabi_fmul+0xce>
 8002956:	ea40 000c 	orr.w	r0, r0, ip
 800295a:	f093 0f00 	teq	r3, #0
 800295e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8002962:	bf02      	ittt	eq
 8002964:	0049      	lsleq	r1, r1, #1
 8002966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800296a:	3b01      	subeq	r3, #1
 800296c:	d0f9      	beq.n	8002962 <__aeabi_fmul+0xe6>
 800296e:	ea41 010c 	orr.w	r1, r1, ip
 8002972:	e78f      	b.n	8002894 <__aeabi_fmul+0x18>
 8002974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8002978:	ea92 0f0c 	teq	r2, ip
 800297c:	bf18      	it	ne
 800297e:	ea93 0f0c 	teqne	r3, ip
 8002982:	d00a      	beq.n	800299a <__aeabi_fmul+0x11e>
 8002984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8002988:	bf18      	it	ne
 800298a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800298e:	d1d8      	bne.n	8002942 <__aeabi_fmul+0xc6>
 8002990:	ea80 0001 	eor.w	r0, r0, r1
 8002994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8002998:	4770      	bx	lr
 800299a:	f090 0f00 	teq	r0, #0
 800299e:	bf17      	itett	ne
 80029a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80029a4:	4608      	moveq	r0, r1
 80029a6:	f091 0f00 	teqne	r1, #0
 80029aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80029ae:	d014      	beq.n	80029da <__aeabi_fmul+0x15e>
 80029b0:	ea92 0f0c 	teq	r2, ip
 80029b4:	d101      	bne.n	80029ba <__aeabi_fmul+0x13e>
 80029b6:	0242      	lsls	r2, r0, #9
 80029b8:	d10f      	bne.n	80029da <__aeabi_fmul+0x15e>
 80029ba:	ea93 0f0c 	teq	r3, ip
 80029be:	d103      	bne.n	80029c8 <__aeabi_fmul+0x14c>
 80029c0:	024b      	lsls	r3, r1, #9
 80029c2:	bf18      	it	ne
 80029c4:	4608      	movne	r0, r1
 80029c6:	d108      	bne.n	80029da <__aeabi_fmul+0x15e>
 80029c8:	ea80 0001 	eor.w	r0, r0, r1
 80029cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80029d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80029d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80029d8:	4770      	bx	lr
 80029da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80029de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80029e2:	4770      	bx	lr

080029e4 <__aeabi_fdiv>:
 80029e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80029e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80029ec:	bf1e      	ittt	ne
 80029ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80029f2:	ea92 0f0c 	teqne	r2, ip
 80029f6:	ea93 0f0c 	teqne	r3, ip
 80029fa:	d069      	beq.n	8002ad0 <__aeabi_fdiv+0xec>
 80029fc:	eba2 0203 	sub.w	r2, r2, r3
 8002a00:	ea80 0c01 	eor.w	ip, r0, r1
 8002a04:	0249      	lsls	r1, r1, #9
 8002a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8002a0a:	d037      	beq.n	8002a7c <__aeabi_fdiv+0x98>
 8002a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8002a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8002a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8002a1c:	428b      	cmp	r3, r1
 8002a1e:	bf38      	it	cc
 8002a20:	005b      	lslcc	r3, r3, #1
 8002a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8002a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8002a2a:	428b      	cmp	r3, r1
 8002a2c:	bf24      	itt	cs
 8002a2e:	1a5b      	subcs	r3, r3, r1
 8002a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8002a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8002a38:	bf24      	itt	cs
 8002a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8002a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8002a46:	bf24      	itt	cs
 8002a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8002a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8002a54:	bf24      	itt	cs
 8002a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8002a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	bf18      	it	ne
 8002a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8002a66:	d1e0      	bne.n	8002a2a <__aeabi_fdiv+0x46>
 8002a68:	2afd      	cmp	r2, #253	; 0xfd
 8002a6a:	f63f af50 	bhi.w	800290e <__aeabi_fmul+0x92>
 8002a6e:	428b      	cmp	r3, r1
 8002a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8002a74:	bf08      	it	eq
 8002a76:	f020 0001 	biceq.w	r0, r0, #1
 8002a7a:	4770      	bx	lr
 8002a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8002a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8002a84:	327f      	adds	r2, #127	; 0x7f
 8002a86:	bfc2      	ittt	gt
 8002a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8002a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8002a90:	4770      	bxgt	lr
 8002a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	3a01      	subs	r2, #1
 8002a9c:	e737      	b.n	800290e <__aeabi_fmul+0x92>
 8002a9e:	f092 0f00 	teq	r2, #0
 8002aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8002aa6:	bf02      	ittt	eq
 8002aa8:	0040      	lsleq	r0, r0, #1
 8002aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8002aae:	3a01      	subeq	r2, #1
 8002ab0:	d0f9      	beq.n	8002aa6 <__aeabi_fdiv+0xc2>
 8002ab2:	ea40 000c 	orr.w	r0, r0, ip
 8002ab6:	f093 0f00 	teq	r3, #0
 8002aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8002abe:	bf02      	ittt	eq
 8002ac0:	0049      	lsleq	r1, r1, #1
 8002ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8002ac6:	3b01      	subeq	r3, #1
 8002ac8:	d0f9      	beq.n	8002abe <__aeabi_fdiv+0xda>
 8002aca:	ea41 010c 	orr.w	r1, r1, ip
 8002ace:	e795      	b.n	80029fc <__aeabi_fdiv+0x18>
 8002ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8002ad4:	ea92 0f0c 	teq	r2, ip
 8002ad8:	d108      	bne.n	8002aec <__aeabi_fdiv+0x108>
 8002ada:	0242      	lsls	r2, r0, #9
 8002adc:	f47f af7d 	bne.w	80029da <__aeabi_fmul+0x15e>
 8002ae0:	ea93 0f0c 	teq	r3, ip
 8002ae4:	f47f af70 	bne.w	80029c8 <__aeabi_fmul+0x14c>
 8002ae8:	4608      	mov	r0, r1
 8002aea:	e776      	b.n	80029da <__aeabi_fmul+0x15e>
 8002aec:	ea93 0f0c 	teq	r3, ip
 8002af0:	d104      	bne.n	8002afc <__aeabi_fdiv+0x118>
 8002af2:	024b      	lsls	r3, r1, #9
 8002af4:	f43f af4c 	beq.w	8002990 <__aeabi_fmul+0x114>
 8002af8:	4608      	mov	r0, r1
 8002afa:	e76e      	b.n	80029da <__aeabi_fmul+0x15e>
 8002afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8002b00:	bf18      	it	ne
 8002b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8002b06:	d1ca      	bne.n	8002a9e <__aeabi_fdiv+0xba>
 8002b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8002b0c:	f47f af5c 	bne.w	80029c8 <__aeabi_fmul+0x14c>
 8002b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8002b14:	f47f af3c 	bne.w	8002990 <__aeabi_fmul+0x114>
 8002b18:	e75f      	b.n	80029da <__aeabi_fmul+0x15e>
 8002b1a:	bf00      	nop

08002b1c <__gesf2>:
 8002b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8002b20:	e006      	b.n	8002b30 <__cmpsf2+0x4>
 8002b22:	bf00      	nop

08002b24 <__lesf2>:
 8002b24:	f04f 0c01 	mov.w	ip, #1
 8002b28:	e002      	b.n	8002b30 <__cmpsf2+0x4>
 8002b2a:	bf00      	nop

08002b2c <__cmpsf2>:
 8002b2c:	f04f 0c01 	mov.w	ip, #1
 8002b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002b34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8002b38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8002b3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8002b40:	bf18      	it	ne
 8002b42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002b46:	d011      	beq.n	8002b6c <__cmpsf2+0x40>
 8002b48:	b001      	add	sp, #4
 8002b4a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8002b4e:	bf18      	it	ne
 8002b50:	ea90 0f01 	teqne	r0, r1
 8002b54:	bf58      	it	pl
 8002b56:	ebb2 0003 	subspl.w	r0, r2, r3
 8002b5a:	bf88      	it	hi
 8002b5c:	17c8      	asrhi	r0, r1, #31
 8002b5e:	bf38      	it	cc
 8002b60:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8002b64:	bf18      	it	ne
 8002b66:	f040 0001 	orrne.w	r0, r0, #1
 8002b6a:	4770      	bx	lr
 8002b6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8002b70:	d102      	bne.n	8002b78 <__cmpsf2+0x4c>
 8002b72:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8002b76:	d105      	bne.n	8002b84 <__cmpsf2+0x58>
 8002b78:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8002b7c:	d1e4      	bne.n	8002b48 <__cmpsf2+0x1c>
 8002b7e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8002b82:	d0e1      	beq.n	8002b48 <__cmpsf2+0x1c>
 8002b84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop

08002b8c <__aeabi_cfrcmple>:
 8002b8c:	4684      	mov	ip, r0
 8002b8e:	4608      	mov	r0, r1
 8002b90:	4661      	mov	r1, ip
 8002b92:	e7ff      	b.n	8002b94 <__aeabi_cfcmpeq>

08002b94 <__aeabi_cfcmpeq>:
 8002b94:	b50f      	push	{r0, r1, r2, r3, lr}
 8002b96:	f7ff ffc9 	bl	8002b2c <__cmpsf2>
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	bf48      	it	mi
 8002b9e:	f110 0f00 	cmnmi.w	r0, #0
 8002ba2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08002ba4 <__aeabi_fcmpeq>:
 8002ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002ba8:	f7ff fff4 	bl	8002b94 <__aeabi_cfcmpeq>
 8002bac:	bf0c      	ite	eq
 8002bae:	2001      	moveq	r0, #1
 8002bb0:	2000      	movne	r0, #0
 8002bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8002bb6:	bf00      	nop

08002bb8 <__aeabi_fcmplt>:
 8002bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002bbc:	f7ff ffea 	bl	8002b94 <__aeabi_cfcmpeq>
 8002bc0:	bf34      	ite	cc
 8002bc2:	2001      	movcc	r0, #1
 8002bc4:	2000      	movcs	r0, #0
 8002bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8002bca:	bf00      	nop

08002bcc <__aeabi_fcmple>:
 8002bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002bd0:	f7ff ffe0 	bl	8002b94 <__aeabi_cfcmpeq>
 8002bd4:	bf94      	ite	ls
 8002bd6:	2001      	movls	r0, #1
 8002bd8:	2000      	movhi	r0, #0
 8002bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8002bde:	bf00      	nop

08002be0 <__aeabi_fcmpge>:
 8002be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002be4:	f7ff ffd2 	bl	8002b8c <__aeabi_cfrcmple>
 8002be8:	bf94      	ite	ls
 8002bea:	2001      	movls	r0, #1
 8002bec:	2000      	movhi	r0, #0
 8002bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8002bf2:	bf00      	nop

08002bf4 <__aeabi_fcmpgt>:
 8002bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002bf8:	f7ff ffc8 	bl	8002b8c <__aeabi_cfrcmple>
 8002bfc:	bf34      	ite	cc
 8002bfe:	2001      	movcc	r0, #1
 8002c00:	2000      	movcs	r0, #0
 8002c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8002c06:	bf00      	nop

08002c08 <__aeabi_f2uiz>:
 8002c08:	0042      	lsls	r2, r0, #1
 8002c0a:	d20e      	bcs.n	8002c2a <__aeabi_f2uiz+0x22>
 8002c0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8002c10:	d30b      	bcc.n	8002c2a <__aeabi_f2uiz+0x22>
 8002c12:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8002c16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8002c1a:	d409      	bmi.n	8002c30 <__aeabi_f2uiz+0x28>
 8002c1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8002c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c24:	fa23 f002 	lsr.w	r0, r3, r2
 8002c28:	4770      	bx	lr
 8002c2a:	f04f 0000 	mov.w	r0, #0
 8002c2e:	4770      	bx	lr
 8002c30:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8002c34:	d101      	bne.n	8002c3a <__aeabi_f2uiz+0x32>
 8002c36:	0242      	lsls	r2, r0, #9
 8002c38:	d102      	bne.n	8002c40 <__aeabi_f2uiz+0x38>
 8002c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3e:	4770      	bx	lr
 8002c40:	f04f 0000 	mov.w	r0, #0
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop

08002c48 <__aeabi_uldivmod>:
 8002c48:	b953      	cbnz	r3, 8002c60 <__aeabi_uldivmod+0x18>
 8002c4a:	b94a      	cbnz	r2, 8002c60 <__aeabi_uldivmod+0x18>
 8002c4c:	2900      	cmp	r1, #0
 8002c4e:	bf08      	it	eq
 8002c50:	2800      	cmpeq	r0, #0
 8002c52:	bf1c      	itt	ne
 8002c54:	f04f 31ff 	movne.w	r1, #4294967295
 8002c58:	f04f 30ff 	movne.w	r0, #4294967295
 8002c5c:	f000 b96c 	b.w	8002f38 <__aeabi_idiv0>
 8002c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8002c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8002c68:	f000 f806 	bl	8002c78 <__udivmoddi4>
 8002c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002c74:	b004      	add	sp, #16
 8002c76:	4770      	bx	lr

08002c78 <__udivmoddi4>:
 8002c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c7c:	9e08      	ldr	r6, [sp, #32]
 8002c7e:	460d      	mov	r5, r1
 8002c80:	4604      	mov	r4, r0
 8002c82:	468e      	mov	lr, r1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f040 8082 	bne.w	8002d8e <__udivmoddi4+0x116>
 8002c8a:	428a      	cmp	r2, r1
 8002c8c:	4617      	mov	r7, r2
 8002c8e:	d946      	bls.n	8002d1e <__udivmoddi4+0xa6>
 8002c90:	fab2 f282 	clz	r2, r2
 8002c94:	b14a      	cbz	r2, 8002caa <__udivmoddi4+0x32>
 8002c96:	f1c2 0120 	rsb	r1, r2, #32
 8002c9a:	fa05 f302 	lsl.w	r3, r5, r2
 8002c9e:	fa20 f101 	lsr.w	r1, r0, r1
 8002ca2:	4097      	lsls	r7, r2
 8002ca4:	ea41 0e03 	orr.w	lr, r1, r3
 8002ca8:	4094      	lsls	r4, r2
 8002caa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8002cae:	0c23      	lsrs	r3, r4, #16
 8002cb0:	fbbe fcf8 	udiv	ip, lr, r8
 8002cb4:	b2b9      	uxth	r1, r7
 8002cb6:	fb08 ee1c 	mls	lr, r8, ip, lr
 8002cba:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8002cbe:	fb0c f001 	mul.w	r0, ip, r1
 8002cc2:	4298      	cmp	r0, r3
 8002cc4:	d90a      	bls.n	8002cdc <__udivmoddi4+0x64>
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	f10c 35ff 	add.w	r5, ip, #4294967295
 8002ccc:	f080 8116 	bcs.w	8002efc <__udivmoddi4+0x284>
 8002cd0:	4298      	cmp	r0, r3
 8002cd2:	f240 8113 	bls.w	8002efc <__udivmoddi4+0x284>
 8002cd6:	f1ac 0c02 	sub.w	ip, ip, #2
 8002cda:	443b      	add	r3, r7
 8002cdc:	1a1b      	subs	r3, r3, r0
 8002cde:	b2a4      	uxth	r4, r4
 8002ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8002ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8002ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002cec:	fb00 f101 	mul.w	r1, r0, r1
 8002cf0:	42a1      	cmp	r1, r4
 8002cf2:	d909      	bls.n	8002d08 <__udivmoddi4+0x90>
 8002cf4:	193c      	adds	r4, r7, r4
 8002cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cfa:	f080 8101 	bcs.w	8002f00 <__udivmoddi4+0x288>
 8002cfe:	42a1      	cmp	r1, r4
 8002d00:	f240 80fe 	bls.w	8002f00 <__udivmoddi4+0x288>
 8002d04:	3802      	subs	r0, #2
 8002d06:	443c      	add	r4, r7
 8002d08:	1a64      	subs	r4, r4, r1
 8002d0a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8002d0e:	2100      	movs	r1, #0
 8002d10:	b11e      	cbz	r6, 8002d1a <__udivmoddi4+0xa2>
 8002d12:	40d4      	lsrs	r4, r2
 8002d14:	2300      	movs	r3, #0
 8002d16:	e9c6 4300 	strd	r4, r3, [r6]
 8002d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d1e:	b902      	cbnz	r2, 8002d22 <__udivmoddi4+0xaa>
 8002d20:	deff      	udf	#255	; 0xff
 8002d22:	fab2 f282 	clz	r2, r2
 8002d26:	2a00      	cmp	r2, #0
 8002d28:	d14f      	bne.n	8002dca <__udivmoddi4+0x152>
 8002d2a:	1bcb      	subs	r3, r1, r7
 8002d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8002d30:	fa1f f887 	uxth.w	r8, r7
 8002d34:	2101      	movs	r1, #1
 8002d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8002d3a:	0c25      	lsrs	r5, r4, #16
 8002d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8002d40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8002d44:	fb08 f30c 	mul.w	r3, r8, ip
 8002d48:	42ab      	cmp	r3, r5
 8002d4a:	d907      	bls.n	8002d5c <__udivmoddi4+0xe4>
 8002d4c:	197d      	adds	r5, r7, r5
 8002d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8002d52:	d202      	bcs.n	8002d5a <__udivmoddi4+0xe2>
 8002d54:	42ab      	cmp	r3, r5
 8002d56:	f200 80e7 	bhi.w	8002f28 <__udivmoddi4+0x2b0>
 8002d5a:	4684      	mov	ip, r0
 8002d5c:	1aed      	subs	r5, r5, r3
 8002d5e:	b2a3      	uxth	r3, r4
 8002d60:	fbb5 f0fe 	udiv	r0, r5, lr
 8002d64:	fb0e 5510 	mls	r5, lr, r0, r5
 8002d68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8002d6c:	fb08 f800 	mul.w	r8, r8, r0
 8002d70:	45a0      	cmp	r8, r4
 8002d72:	d907      	bls.n	8002d84 <__udivmoddi4+0x10c>
 8002d74:	193c      	adds	r4, r7, r4
 8002d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d7a:	d202      	bcs.n	8002d82 <__udivmoddi4+0x10a>
 8002d7c:	45a0      	cmp	r8, r4
 8002d7e:	f200 80d7 	bhi.w	8002f30 <__udivmoddi4+0x2b8>
 8002d82:	4618      	mov	r0, r3
 8002d84:	eba4 0408 	sub.w	r4, r4, r8
 8002d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8002d8c:	e7c0      	b.n	8002d10 <__udivmoddi4+0x98>
 8002d8e:	428b      	cmp	r3, r1
 8002d90:	d908      	bls.n	8002da4 <__udivmoddi4+0x12c>
 8002d92:	2e00      	cmp	r6, #0
 8002d94:	f000 80af 	beq.w	8002ef6 <__udivmoddi4+0x27e>
 8002d98:	2100      	movs	r1, #0
 8002d9a:	e9c6 0500 	strd	r0, r5, [r6]
 8002d9e:	4608      	mov	r0, r1
 8002da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002da4:	fab3 f183 	clz	r1, r3
 8002da8:	2900      	cmp	r1, #0
 8002daa:	d14b      	bne.n	8002e44 <__udivmoddi4+0x1cc>
 8002dac:	42ab      	cmp	r3, r5
 8002dae:	d302      	bcc.n	8002db6 <__udivmoddi4+0x13e>
 8002db0:	4282      	cmp	r2, r0
 8002db2:	f200 80b7 	bhi.w	8002f24 <__udivmoddi4+0x2ac>
 8002db6:	1a84      	subs	r4, r0, r2
 8002db8:	eb65 0303 	sbc.w	r3, r5, r3
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	469e      	mov	lr, r3
 8002dc0:	2e00      	cmp	r6, #0
 8002dc2:	d0aa      	beq.n	8002d1a <__udivmoddi4+0xa2>
 8002dc4:	e9c6 4e00 	strd	r4, lr, [r6]
 8002dc8:	e7a7      	b.n	8002d1a <__udivmoddi4+0xa2>
 8002dca:	f1c2 0c20 	rsb	ip, r2, #32
 8002dce:	fa01 f302 	lsl.w	r3, r1, r2
 8002dd2:	4097      	lsls	r7, r2
 8002dd4:	fa20 f00c 	lsr.w	r0, r0, ip
 8002dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8002ddc:	fa21 fc0c 	lsr.w	ip, r1, ip
 8002de0:	4318      	orrs	r0, r3
 8002de2:	fbbc f1fe 	udiv	r1, ip, lr
 8002de6:	0c05      	lsrs	r5, r0, #16
 8002de8:	fb0e cc11 	mls	ip, lr, r1, ip
 8002dec:	fa1f f887 	uxth.w	r8, r7
 8002df0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8002df4:	fb01 f308 	mul.w	r3, r1, r8
 8002df8:	42ab      	cmp	r3, r5
 8002dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8002dfe:	d909      	bls.n	8002e14 <__udivmoddi4+0x19c>
 8002e00:	197d      	adds	r5, r7, r5
 8002e02:	f101 3cff 	add.w	ip, r1, #4294967295
 8002e06:	f080 808b 	bcs.w	8002f20 <__udivmoddi4+0x2a8>
 8002e0a:	42ab      	cmp	r3, r5
 8002e0c:	f240 8088 	bls.w	8002f20 <__udivmoddi4+0x2a8>
 8002e10:	3902      	subs	r1, #2
 8002e12:	443d      	add	r5, r7
 8002e14:	1aeb      	subs	r3, r5, r3
 8002e16:	b285      	uxth	r5, r0
 8002e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8002e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8002e20:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8002e24:	fb00 f308 	mul.w	r3, r0, r8
 8002e28:	42ab      	cmp	r3, r5
 8002e2a:	d907      	bls.n	8002e3c <__udivmoddi4+0x1c4>
 8002e2c:	197d      	adds	r5, r7, r5
 8002e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8002e32:	d271      	bcs.n	8002f18 <__udivmoddi4+0x2a0>
 8002e34:	42ab      	cmp	r3, r5
 8002e36:	d96f      	bls.n	8002f18 <__udivmoddi4+0x2a0>
 8002e38:	3802      	subs	r0, #2
 8002e3a:	443d      	add	r5, r7
 8002e3c:	1aeb      	subs	r3, r5, r3
 8002e3e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8002e42:	e778      	b.n	8002d36 <__udivmoddi4+0xbe>
 8002e44:	f1c1 0c20 	rsb	ip, r1, #32
 8002e48:	408b      	lsls	r3, r1
 8002e4a:	fa22 f70c 	lsr.w	r7, r2, ip
 8002e4e:	431f      	orrs	r7, r3
 8002e50:	fa20 f40c 	lsr.w	r4, r0, ip
 8002e54:	fa05 f301 	lsl.w	r3, r5, r1
 8002e58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8002e5c:	fa25 f50c 	lsr.w	r5, r5, ip
 8002e60:	431c      	orrs	r4, r3
 8002e62:	0c23      	lsrs	r3, r4, #16
 8002e64:	fbb5 f9fe 	udiv	r9, r5, lr
 8002e68:	fa1f f887 	uxth.w	r8, r7
 8002e6c:	fb0e 5519 	mls	r5, lr, r9, r5
 8002e70:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8002e74:	fb09 fa08 	mul.w	sl, r9, r8
 8002e78:	45aa      	cmp	sl, r5
 8002e7a:	fa02 f201 	lsl.w	r2, r2, r1
 8002e7e:	fa00 f301 	lsl.w	r3, r0, r1
 8002e82:	d908      	bls.n	8002e96 <__udivmoddi4+0x21e>
 8002e84:	197d      	adds	r5, r7, r5
 8002e86:	f109 30ff 	add.w	r0, r9, #4294967295
 8002e8a:	d247      	bcs.n	8002f1c <__udivmoddi4+0x2a4>
 8002e8c:	45aa      	cmp	sl, r5
 8002e8e:	d945      	bls.n	8002f1c <__udivmoddi4+0x2a4>
 8002e90:	f1a9 0902 	sub.w	r9, r9, #2
 8002e94:	443d      	add	r5, r7
 8002e96:	eba5 050a 	sub.w	r5, r5, sl
 8002e9a:	b2a4      	uxth	r4, r4
 8002e9c:	fbb5 f0fe 	udiv	r0, r5, lr
 8002ea0:	fb0e 5510 	mls	r5, lr, r0, r5
 8002ea4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8002ea8:	fb00 f808 	mul.w	r8, r0, r8
 8002eac:	45a0      	cmp	r8, r4
 8002eae:	d907      	bls.n	8002ec0 <__udivmoddi4+0x248>
 8002eb0:	193c      	adds	r4, r7, r4
 8002eb2:	f100 35ff 	add.w	r5, r0, #4294967295
 8002eb6:	d22d      	bcs.n	8002f14 <__udivmoddi4+0x29c>
 8002eb8:	45a0      	cmp	r8, r4
 8002eba:	d92b      	bls.n	8002f14 <__udivmoddi4+0x29c>
 8002ebc:	3802      	subs	r0, #2
 8002ebe:	443c      	add	r4, r7
 8002ec0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8002ec4:	eba4 0408 	sub.w	r4, r4, r8
 8002ec8:	fba0 8902 	umull	r8, r9, r0, r2
 8002ecc:	454c      	cmp	r4, r9
 8002ece:	46c6      	mov	lr, r8
 8002ed0:	464d      	mov	r5, r9
 8002ed2:	d319      	bcc.n	8002f08 <__udivmoddi4+0x290>
 8002ed4:	d016      	beq.n	8002f04 <__udivmoddi4+0x28c>
 8002ed6:	b15e      	cbz	r6, 8002ef0 <__udivmoddi4+0x278>
 8002ed8:	ebb3 020e 	subs.w	r2, r3, lr
 8002edc:	eb64 0405 	sbc.w	r4, r4, r5
 8002ee0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8002ee4:	40ca      	lsrs	r2, r1
 8002ee6:	ea4c 0202 	orr.w	r2, ip, r2
 8002eea:	40cc      	lsrs	r4, r1
 8002eec:	e9c6 2400 	strd	r2, r4, [r6]
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ef6:	4631      	mov	r1, r6
 8002ef8:	4630      	mov	r0, r6
 8002efa:	e70e      	b.n	8002d1a <__udivmoddi4+0xa2>
 8002efc:	46ac      	mov	ip, r5
 8002efe:	e6ed      	b.n	8002cdc <__udivmoddi4+0x64>
 8002f00:	4618      	mov	r0, r3
 8002f02:	e701      	b.n	8002d08 <__udivmoddi4+0x90>
 8002f04:	4543      	cmp	r3, r8
 8002f06:	d2e6      	bcs.n	8002ed6 <__udivmoddi4+0x25e>
 8002f08:	ebb8 0e02 	subs.w	lr, r8, r2
 8002f0c:	eb69 0507 	sbc.w	r5, r9, r7
 8002f10:	3801      	subs	r0, #1
 8002f12:	e7e0      	b.n	8002ed6 <__udivmoddi4+0x25e>
 8002f14:	4628      	mov	r0, r5
 8002f16:	e7d3      	b.n	8002ec0 <__udivmoddi4+0x248>
 8002f18:	4660      	mov	r0, ip
 8002f1a:	e78f      	b.n	8002e3c <__udivmoddi4+0x1c4>
 8002f1c:	4681      	mov	r9, r0
 8002f1e:	e7ba      	b.n	8002e96 <__udivmoddi4+0x21e>
 8002f20:	4661      	mov	r1, ip
 8002f22:	e777      	b.n	8002e14 <__udivmoddi4+0x19c>
 8002f24:	4608      	mov	r0, r1
 8002f26:	e74b      	b.n	8002dc0 <__udivmoddi4+0x148>
 8002f28:	f1ac 0c02 	sub.w	ip, ip, #2
 8002f2c:	443d      	add	r5, r7
 8002f2e:	e715      	b.n	8002d5c <__udivmoddi4+0xe4>
 8002f30:	3802      	subs	r0, #2
 8002f32:	443c      	add	r4, r7
 8002f34:	e726      	b.n	8002d84 <__udivmoddi4+0x10c>
 8002f36:	bf00      	nop

08002f38 <__aeabi_idiv0>:
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop

08002f3c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002f3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8002f3e:	4813      	ldr	r0, [pc, #76]	; (8002f8c <MX_ADC_Init+0x50>)
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <MX_ADC_Init+0x54>)
 8002f42:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f48:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f4e:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f50:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f52:	2204      	movs	r2, #4
 8002f54:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002f56:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002f58:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002f5a:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002f60:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f64:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f66:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002f68:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f70:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8002f72:	2207      	movs	r2, #7
 8002f74:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8002f76:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8002f78:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002f7c:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002f7e:	f001 f905 	bl	800418c <HAL_ADC_Init>
 8002f82:	b900      	cbnz	r0, 8002f86 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002f84:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002f86:	f000 f8fe 	bl	8003186 <Error_Handler>
}
 8002f8a:	e7fb      	b.n	8002f84 <MX_ADC_Init+0x48>
 8002f8c:	20001820 	.word	0x20001820
 8002f90:	40012400 	.word	0x40012400

08002f94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8002f94:	6802      	ldr	r2, [r0, #0]
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <HAL_ADC_MspInit+0x28>)
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d000      	beq.n	8002f9e <HAL_ADC_MspInit+0xa>
 8002f9c:	4770      	bx	lr
{
 8002f9e:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002faa:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002fb4:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8002fb6:	b002      	add	sp, #8
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40012400 	.word	0x40012400

08002fc0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8002fc0:	6802      	ldr	r2, [r0, #0]
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_ADC_MspDeInit+0x18>)
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d000      	beq.n	8002fca <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8002fc8:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fce:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fd4:	6613      	str	r3, [r2, #96]	; 0x60
 8002fd6:	e7f7      	b.n	8002fc8 <HAL_ADC_MspDeInit+0x8>
 8002fd8:	40012400 	.word	0x40012400

08002fdc <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8002fdc:	b530      	push	{r4, r5, lr}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9301      	str	r3, [sp, #4]
 8002fe6:	9302      	str	r3, [sp, #8]
 8002fe8:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8002fea:	f7ff ffa7 	bl	8002f3c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8002fee:	4816      	ldr	r0, [pc, #88]	; (8003048 <ADC_ReadChannels+0x6c>)
 8002ff0:	f001 fcfe 	bl	80049f0 <HAL_ADCEx_Calibration_Start>
 8002ff4:	b9f8      	cbnz	r0, 8003036 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8002ff6:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002ffc:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ffe:	a901      	add	r1, sp, #4
 8003000:	4811      	ldr	r0, [pc, #68]	; (8003048 <ADC_ReadChannels+0x6c>)
 8003002:	f001 fa5b 	bl	80044bc <HAL_ADC_ConfigChannel>
 8003006:	b9c8      	cbnz	r0, 800303c <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8003008:	480f      	ldr	r0, [pc, #60]	; (8003048 <ADC_ReadChannels+0x6c>)
 800300a:	f001 fc01 	bl	8004810 <HAL_ADC_Start>
 800300e:	b9c0      	cbnz	r0, 8003042 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8003010:	4c0d      	ldr	r4, [pc, #52]	; (8003048 <ADC_ReadChannels+0x6c>)
 8003012:	f04f 31ff 	mov.w	r1, #4294967295
 8003016:	4620      	mov	r0, r4
 8003018:	f001 f9ee 	bl	80043f8 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 800301c:	4620      	mov	r0, r4
 800301e:	f001 fcc7 	bl	80049b0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8003022:	4620      	mov	r0, r4
 8003024:	f001 fa47 	bl	80044b6 <HAL_ADC_GetValue>
 8003028:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 800302a:	4620      	mov	r0, r4
 800302c:	f001 fc6c 	bl	8004908 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8003030:	4628      	mov	r0, r5
 8003032:	b005      	add	sp, #20
 8003034:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003036:	f000 f8a6 	bl	8003186 <Error_Handler>
 800303a:	e7dc      	b.n	8002ff6 <ADC_ReadChannels+0x1a>
    Error_Handler();
 800303c:	f000 f8a3 	bl	8003186 <Error_Handler>
 8003040:	e7e2      	b.n	8003008 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8003042:	f000 f8a0 	bl	8003186 <Error_Handler>
 8003046:	e7e3      	b.n	8003010 <ADC_ReadChannels+0x34>
 8003048:	20001820 	.word	0x20001820

0800304c <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 800304c:	4b01      	ldr	r3, [pc, #4]	; (8003054 <SYS_InitMeasurement+0x8>)
 800304e:	4a02      	ldr	r2, [pc, #8]	; (8003058 <SYS_InitMeasurement+0xc>)
 8003050:	601a      	str	r2, [r3, #0]
}
 8003052:	4770      	bx	lr
 8003054:	20001820 	.word	0x20001820
 8003058:	40012400 	.word	0x40012400

0800305c <SYS_GetBatteryLevel>:
{
 800305c:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800305e:	480d      	ldr	r0, [pc, #52]	; (8003094 <SYS_GetBatteryLevel+0x38>)
 8003060:	f7ff ffbc 	bl	8002fdc <ADC_ReadChannels>
  if (measuredLevel == 0)
 8003064:	b198      	cbz	r0, 800308e <SYS_GetBatteryLevel+0x32>
 8003066:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8003068:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <SYS_GetBatteryLevel+0x3c>)
 800306a:	8812      	ldrh	r2, [r2, #0]
 800306c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003070:	428a      	cmp	r2, r1
 8003072:	d007      	beq.n	8003084 <SYS_GetBatteryLevel+0x28>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8003074:	f640 40e4 	movw	r0, #3300	; 0xce4
 8003078:	fb00 f002 	mul.w	r0, r0, r2
 800307c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003080:	b280      	uxth	r0, r0
 8003082:	e005      	b.n	8003090 <SYS_GetBatteryLevel+0x34>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8003084:	4805      	ldr	r0, [pc, #20]	; (800309c <SYS_GetBatteryLevel+0x40>)
 8003086:	fbb0 f0f3 	udiv	r0, r0, r3
 800308a:	b280      	uxth	r0, r0
 800308c:	e000      	b.n	8003090 <SYS_GetBatteryLevel+0x34>
    batteryLevelmV = 0;
 800308e:	2000      	movs	r0, #0
}
 8003090:	bd08      	pop	{r3, pc}
 8003092:	bf00      	nop
 8003094:	b4002000 	.word	0xb4002000
 8003098:	1fff75aa 	.word	0x1fff75aa
 800309c:	004c08d8 	.word	0x004c08d8

080030a0 <SYS_GetTemperatureLevel>:
{
 80030a0:	b530      	push	{r4, r5, lr}
 80030a2:	b083      	sub	sp, #12
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80030a4:	f7ff ffda 	bl	800305c <SYS_GetBatteryLevel>
 80030a8:	4605      	mov	r5, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80030aa:	481f      	ldr	r0, [pc, #124]	; (8003128 <SYS_GetTemperatureLevel+0x88>)
 80030ac:	f7ff ff96 	bl	8002fdc <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80030b0:	4b1e      	ldr	r3, [pc, #120]	; (800312c <SYS_GetTemperatureLevel+0x8c>)
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	4a1e      	ldr	r2, [pc, #120]	; (8003130 <SYS_GetTemperatureLevel+0x90>)
 80030b6:	8812      	ldrh	r2, [r2, #0]
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d01a      	beq.n	80030f2 <SYS_GetTemperatureLevel+0x52>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80030bc:	fb00 f005 	mul.w	r0, r0, r5
 80030c0:	0880      	lsrs	r0, r0, #2
 80030c2:	4c1c      	ldr	r4, [pc, #112]	; (8003134 <SYS_GetTemperatureLevel+0x94>)
 80030c4:	fba4 1400 	umull	r1, r4, r4, r0
 80030c8:	ebc2 1054 	rsb	r0, r2, r4, lsr #5
 80030cc:	2464      	movs	r4, #100	; 0x64
 80030ce:	fb04 f400 	mul.w	r4, r4, r0
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	fb94 f4f3 	sdiv	r4, r4, r3
 80030d8:	341e      	adds	r4, #30
 80030da:	b224      	sxth	r4, r4
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 80030dc:	9400      	str	r4, [sp, #0]
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <SYS_GetTemperatureLevel+0x98>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	2100      	movs	r1, #0
 80030e4:	4610      	mov	r0, r2
 80030e6:	f00f feeb 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
  temperatureDegreeC <<= 8;
 80030ea:	0220      	lsls	r0, r4, #8
}
 80030ec:	b200      	sxth	r0, r0
 80030ee:	b003      	add	sp, #12
 80030f0:	bd30      	pop	{r4, r5, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 80030f2:	fb00 f005 	mul.w	r0, r0, r5
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <SYS_GetTemperatureLevel+0x9c>)
 80030f8:	fba3 2300 	umull	r2, r3, r3, r0
 80030fc:	1ac0      	subs	r0, r0, r3
 80030fe:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 8003102:	0ac0      	lsrs	r0, r0, #11
 8003104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003108:	fb03 f300 	mul.w	r3, r3, r0
 800310c:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8003110:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8003114:	480a      	ldr	r0, [pc, #40]	; (8003140 <SYS_GetTemperatureLevel+0xa0>)
 8003116:	fb80 2003 	smull	r2, r0, r0, r3
 800311a:	17dc      	asrs	r4, r3, #31
 800311c:	ebc4 24a0 	rsb	r4, r4, r0, asr #10
 8003120:	341e      	adds	r4, #30
 8003122:	b224      	sxth	r4, r4
 8003124:	e7da      	b.n	80030dc <SYS_GetTemperatureLevel+0x3c>
 8003126:	bf00      	nop
 8003128:	b0001000 	.word	0xb0001000
 800312c:	1fff75c8 	.word	0x1fff75c8
 8003130:	1fff75a8 	.word	0x1fff75a8
 8003134:	09ee009f 	.word	0x09ee009f
 8003138:	08013c18 	.word	0x08013c18
 800313c:	00100101 	.word	0x00100101
 8003140:	68db8bad 	.word	0x68db8bad

08003144 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003144:	b500      	push	{lr}
 8003146:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800314e:	f042 0204 	orr.w	r2, r2, #4
 8003152:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003154:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003156:	f002 0204 	and.w	r2, r2, #4
 800315a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800315c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800315e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003160:	f042 0201 	orr.w	r2, r2, #1
 8003164:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800316e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8003170:	2200      	movs	r2, #0
 8003172:	2102      	movs	r1, #2
 8003174:	200f      	movs	r0, #15
 8003176:	f001 fc9d 	bl	8004ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800317a:	200f      	movs	r0, #15
 800317c:	f001 fcce 	bl	8004b1c <HAL_NVIC_EnableIRQ>

}
 8003180:	b003      	add	sp, #12
 8003182:	f85d fb04 	ldr.w	pc, [sp], #4

08003186 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003186:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003188:	e7fe      	b.n	8003188 <Error_Handler+0x2>

0800318a <SystemClock_Config>:
{
 800318a:	b510      	push	{r4, lr}
 800318c:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800318e:	2248      	movs	r2, #72	; 0x48
 8003190:	2100      	movs	r1, #0
 8003192:	a808      	add	r0, sp, #32
 8003194:	f010 fc58 	bl	8013a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003198:	2400      	movs	r4, #0
 800319a:	9401      	str	r4, [sp, #4]
 800319c:	9402      	str	r4, [sp, #8]
 800319e:	9403      	str	r4, [sp, #12]
 80031a0:	9404      	str	r4, [sp, #16]
 80031a2:	9405      	str	r4, [sp, #20]
 80031a4:	9406      	str	r4, [sp, #24]
 80031a6:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 80031a8:	f002 f88a 	bl	80052c0 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80031ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80031b4:	f023 0318 	bic.w	r3, r3, #24
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80031bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031c0:	6813      	ldr	r3, [r2, #0]
 80031c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	6813      	ldr	r3, [r2, #0]
 80031ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80031d6:	2306      	movs	r3, #6
 80031d8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80031da:	2381      	movs	r3, #129	; 0x81
 80031dc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031e2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031e4:	2340      	movs	r3, #64	; 0x40
 80031e6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80031e8:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ea:	a808      	add	r0, sp, #32
 80031ec:	f002 fa00 	bl	80055f0 <HAL_RCC_OscConfig>
 80031f0:	b970      	cbnz	r0, 8003210 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80031f2:	234f      	movs	r3, #79	; 0x4f
 80031f4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80031f6:	2301      	movs	r3, #1
 80031f8:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031fa:	2100      	movs	r1, #0
 80031fc:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031fe:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003200:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8003202:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003204:	a801      	add	r0, sp, #4
 8003206:	f002 fd2f 	bl	8005c68 <HAL_RCC_ClockConfig>
 800320a:	b918      	cbnz	r0, 8003214 <SystemClock_Config+0x8a>
}
 800320c:	b01a      	add	sp, #104	; 0x68
 800320e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003210:	f7ff ffb9 	bl	8003186 <Error_Handler>
    Error_Handler();
 8003214:	f7ff ffb7 	bl	8003186 <Error_Handler>

08003218 <main>:
{
 8003218:	b508      	push	{r3, lr}
  HAL_Init();
 800321a:	f000 ff4f 	bl	80040bc <HAL_Init>
  SystemClock_Config();
 800321e:	f7ff ffb4 	bl	800318a <SystemClock_Config>
  MX_LoRaWAN_Init();
 8003222:	f000 fc85 	bl	8003b30 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 8003226:	f000 fc89 	bl	8003b3c <MX_LoRaWAN_Process>
  while (1)
 800322a:	e7fc      	b.n	8003226 <main+0xe>

0800322c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800322c:	b500      	push	{lr}
 800322e:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8003230:	222c      	movs	r2, #44	; 0x2c
 8003232:	2100      	movs	r1, #0
 8003234:	a801      	add	r0, sp, #4
 8003236:	f010 fc07 	bl	8013a48 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800323a:	4819      	ldr	r0, [pc, #100]	; (80032a0 <MX_RTC_Init+0x74>)
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <MX_RTC_Init+0x78>)
 800323e:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8003240:	231f      	movs	r3, #31
 8003242:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003244:	2300      	movs	r3, #0
 8003246:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003248:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800324a:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800324c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003250:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8003252:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8003254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003258:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800325a:	f003 f861 	bl	8006320 <HAL_RTC_Init>
 800325e:	b9a8      	cbnz	r0, 800328c <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8003260:	480f      	ldr	r0, [pc, #60]	; (80032a0 <MX_RTC_Init+0x74>)
 8003262:	f003 f997 	bl	8006594 <HAL_RTCEx_SetSSRU_IT>
 8003266:	b9a0      	cbnz	r0, 8003292 <MX_RTC_Init+0x66>
  {
    Error_Handler();
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8003268:	2200      	movs	r2, #0
 800326a:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800326c:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800326e:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8003270:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003274:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8003276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800327a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800327c:	a901      	add	r1, sp, #4
 800327e:	4808      	ldr	r0, [pc, #32]	; (80032a0 <MX_RTC_Init+0x74>)
 8003280:	f003 f8ac 	bl	80063dc <HAL_RTC_SetAlarm_IT>
 8003284:	b940      	cbnz	r0, 8003298 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003286:	b00d      	add	sp, #52	; 0x34
 8003288:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800328c:	f7ff ff7b 	bl	8003186 <Error_Handler>
 8003290:	e7e6      	b.n	8003260 <MX_RTC_Init+0x34>
    Error_Handler();
 8003292:	f7ff ff78 	bl	8003186 <Error_Handler>
 8003296:	e7e7      	b.n	8003268 <MX_RTC_Init+0x3c>
    Error_Handler();
 8003298:	f7ff ff75 	bl	8003186 <Error_Handler>
}
 800329c:	e7f3      	b.n	8003286 <MX_RTC_Init+0x5a>
 800329e:	bf00      	nop
 80032a0:	20001884 	.word	0x20001884
 80032a4:	40002800 	.word	0x40002800

080032a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80032a8:	b510      	push	{r4, lr}
 80032aa:	b090      	sub	sp, #64	; 0x40
 80032ac:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032ae:	2238      	movs	r2, #56	; 0x38
 80032b0:	2100      	movs	r1, #0
 80032b2:	a802      	add	r0, sp, #8
 80032b4:	f010 fbc8 	bl	8013a48 <memset>
  if(rtcHandle->Instance==RTC)
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <HAL_RTC_MspInit+0x7c>)
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80032c0:	b010      	add	sp, #64	; 0x40
 80032c2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80032c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032c8:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80032ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ce:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032d0:	a802      	add	r0, sp, #8
 80032d2:	f002 fe1d 	bl	8005f10 <HAL_RCCEx_PeriphCLKConfig>
 80032d6:	bb08      	cbnz	r0, 800331c <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80032d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032dc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80032e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80032e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032ee:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80032f8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80032fa:	2200      	movs	r2, #0
 80032fc:	4611      	mov	r1, r2
 80032fe:	2002      	movs	r0, #2
 8003300:	f001 fbd8 	bl	8004ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8003304:	2002      	movs	r0, #2
 8003306:	f001 fc09 	bl	8004b1c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800330a:	2200      	movs	r2, #0
 800330c:	4611      	mov	r1, r2
 800330e:	202a      	movs	r0, #42	; 0x2a
 8003310:	f001 fbd0 	bl	8004ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003314:	202a      	movs	r0, #42	; 0x2a
 8003316:	f001 fc01 	bl	8004b1c <HAL_NVIC_EnableIRQ>
}
 800331a:	e7d1      	b.n	80032c0 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 800331c:	f7ff ff33 	bl	8003186 <Error_Handler>
 8003320:	e7da      	b.n	80032d8 <HAL_RTC_MspInit+0x30>
 8003322:	bf00      	nop
 8003324:	40002800 	.word	0x40002800

08003328 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8003328:	4770      	bx	lr

0800332a <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800332a:	4770      	bx	lr

0800332c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 800332c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800332e:	f000 fedb 	bl	80040e8 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8003332:	2001      	movs	r0, #1
 8003334:	4b02      	ldr	r3, [pc, #8]	; (8003340 <PWR_EnterStopMode+0x14>)
 8003336:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800333a:	f002 f825 	bl	8005388 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800333e:	bd08      	pop	{r3, pc}
 8003340:	58000400 	.word	0x58000400

08003344 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8003344:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 8003346:	f000 fed7 	bl	80040f8 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800334a:	bd08      	pop	{r3, pc}

0800334c <PWR_ExitStopMode>:
{
 800334c:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 800334e:	f000 fed3 	bl	80040f8 <HAL_ResumeTick>
  vcom_Resume();
 8003352:	f000 fbc3 	bl	8003adc <vcom_Resume>
}
 8003356:	bd08      	pop	{r3, pc}

08003358 <PWR_EnterSleepMode>:
{
 8003358:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800335a:	f000 fec5 	bl	80040e8 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800335e:	2101      	movs	r1, #1
 8003360:	2000      	movs	r0, #0
 8003362:	f001 ffb5 	bl	80052d0 <HAL_PWR_EnterSLEEPMode>
}
 8003366:	bd08      	pop	{r3, pc}

08003368 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003368:	4770      	bx	lr

0800336a <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800336a:	e7fe      	b.n	800336a <NMI_Handler>

0800336c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800336c:	e7fe      	b.n	800336c <HardFault_Handler>

0800336e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800336e:	e7fe      	b.n	800336e <MemManage_Handler>

08003370 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003370:	e7fe      	b.n	8003370 <BusFault_Handler>

08003372 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003372:	e7fe      	b.n	8003372 <UsageFault_Handler>

08003374 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003374:	4770      	bx	lr

08003376 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003376:	4770      	bx	lr

08003378 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003378:	4770      	bx	lr

0800337a <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800337a:	4770      	bx	lr

0800337c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800337c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800337e:	4802      	ldr	r0, [pc, #8]	; (8003388 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8003380:	f003 f934 	bl	80065ec <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8003384:	bd08      	pop	{r3, pc}
 8003386:	bf00      	nop
 8003388:	20001884 	.word	0x20001884

0800338c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800338c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800338e:	2001      	movs	r0, #1
 8003390:	f001 ff88 	bl	80052a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003394:	bd08      	pop	{r3, pc}

08003396 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003396:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003398:	2002      	movs	r0, #2
 800339a:	f001 ff83 	bl	80052a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800339e:	bd08      	pop	{r3, pc}

080033a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80033a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80033a2:	4802      	ldr	r0, [pc, #8]	; (80033ac <DMA1_Channel5_IRQHandler+0xc>)
 80033a4:	f001 fdd0 	bl	8004f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80033a8:	bd08      	pop	{r3, pc}
 80033aa:	bf00      	nop
 80033ac:	20001958 	.word	0x20001958

080033b0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80033b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80033b2:	4802      	ldr	r0, [pc, #8]	; (80033bc <LPUART1_IRQHandler+0xc>)
 80033b4:	f003 fdda 	bl	8006f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80033b8:	bd08      	pop	{r3, pc}
 80033ba:	bf00      	nop
 80033bc:	200018c8 	.word	0x200018c8

080033c0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80033c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80033c2:	4802      	ldr	r0, [pc, #8]	; (80033cc <RTC_Alarm_IRQHandler+0xc>)
 80033c4:	f002 ff26 	bl	8006214 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80033c8:	bd08      	pop	{r3, pc}
 80033ca:	bf00      	nop
 80033cc:	20001884 	.word	0x20001884

080033d0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80033d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80033d2:	4802      	ldr	r0, [pc, #8]	; (80033dc <SUBGHZ_Radio_IRQHandler+0xc>)
 80033d4:	f003 fbb8 	bl	8006b48 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80033d8:	bd08      	pop	{r3, pc}
 80033da:	bf00      	nop
 80033dc:	200018bc 	.word	0x200018bc

080033e0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80033e0:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80033e2:	4805      	ldr	r0, [pc, #20]	; (80033f8 <MX_SUBGHZ_Init+0x18>)
 80033e4:	2308      	movs	r3, #8
 80033e6:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80033e8:	f003 f936 	bl	8006658 <HAL_SUBGHZ_Init>
 80033ec:	b900      	cbnz	r0, 80033f0 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80033ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80033f0:	f7ff fec9 	bl	8003186 <Error_Handler>
}
 80033f4:	e7fb      	b.n	80033ee <MX_SUBGHZ_Init+0xe>
 80033f6:	bf00      	nop
 80033f8:	200018bc 	.word	0x200018bc

080033fc <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80033fc:	b500      	push	{lr}
 80033fe:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8003400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003404:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800340c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003414:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8003416:	2200      	movs	r2, #0
 8003418:	4611      	mov	r1, r2
 800341a:	2032      	movs	r0, #50	; 0x32
 800341c:	f001 fb4a 	bl	8004ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8003420:	2032      	movs	r0, #50	; 0x32
 8003422:	f001 fb7b 	bl	8004b1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8003426:	b003      	add	sp, #12
 8003428:	f85d fb04 	ldr.w	pc, [sp], #4

0800342c <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 800342c:	b40c      	push	{r2, r3}
 800342e:	b500      	push	{lr}
 8003430:	b083      	sub	sp, #12
 8003432:	ab04      	add	r3, sp, #16
 8003434:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8003438:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800343a:	f010 fa1b 	bl	8013874 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800343e:	b003      	add	sp, #12
 8003440:	f85d eb04 	ldr.w	lr, [sp], #4
 8003444:	b002      	add	sp, #8
 8003446:	4770      	bx	lr

08003448 <TimestampNow>:
{
 8003448:	b530      	push	{r4, r5, lr}
 800344a:	b085      	sub	sp, #20
 800344c:	4604      	mov	r4, r0
 800344e:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8003450:	a802      	add	r0, sp, #8
 8003452:	f00f ff85 	bl	8013360 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8003456:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	9b02      	ldr	r3, [sp, #8]
 800345e:	4a05      	ldr	r2, [pc, #20]	; (8003474 <TimestampNow+0x2c>)
 8003460:	2110      	movs	r1, #16
 8003462:	4620      	mov	r0, r4
 8003464:	f7ff ffe2 	bl	800342c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8003468:	4620      	mov	r0, r4
 800346a:	f7fe fe85 	bl	8002178 <strlen>
 800346e:	8028      	strh	r0, [r5, #0]
}
 8003470:	b005      	add	sp, #20
 8003472:	bd30      	pop	{r4, r5, pc}
 8003474:	08013c3c 	.word	0x08013c3c

08003478 <SystemApp_Init>:
{
 8003478:	b508      	push	{r3, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800347a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800347e:	6893      	ldr	r3, [r2, #8]
 8003480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003484:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8003486:	f00f ffeb 	bl	8013460 <UTIL_TIMER_Init>
  DBG_Disable();
 800348a:	f000 f8c7 	bl	800361c <DBG_Disable>
  DBG_ProbesInit();
 800348e:	f000 f8cb 	bl	8003628 <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 8003492:	f00f fca1 	bl	8012dd8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8003496:	480a      	ldr	r0, [pc, #40]	; (80034c0 <SystemApp_Init+0x48>)
 8003498:	f00f fcb8 	bl	8012e0c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800349c:	2002      	movs	r0, #2
 800349e:	f00f fcbb 	bl	8012e18 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 80034a2:	f7ff fdd3 	bl	800304c <SYS_InitMeasurement>
  EnvSensors_Init();
 80034a6:	f000 f8df 	bl	8003668 <EnvSensors_Init>
  UTIL_LPM_Init();
 80034aa:	f00f fdc3 	bl	8013034 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80034ae:	2101      	movs	r1, #1
 80034b0:	4608      	mov	r0, r1
 80034b2:	f00f fddf 	bl	8013074 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80034b6:	2101      	movs	r1, #1
 80034b8:	4608      	mov	r0, r1
 80034ba:	f00f fdc5 	bl	8013048 <UTIL_LPM_SetStopMode>
}
 80034be:	bd08      	pop	{r3, pc}
 80034c0:	08003449 	.word	0x08003449

080034c4 <UTIL_SEQ_Idle>:
{
 80034c4:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80034c6:	f00f fdeb 	bl	80130a0 <UTIL_LPM_EnterLowPower>
}
 80034ca:	bd08      	pop	{r3, pc}

080034cc <GetBatteryLevel>:
{
 80034cc:	b510      	push	{r4, lr}
 80034ce:	b082      	sub	sp, #8
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80034d0:	f7ff fdc4 	bl	800305c <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80034d4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80034d8:	4298      	cmp	r0, r3
 80034da:	d80d      	bhi.n	80034f8 <GetBatteryLevel+0x2c>
  else if (batteryLevelmV < VDD_MIN)
 80034dc:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80034e0:	d315      	bcc.n	800350e <GetBatteryLevel+0x42>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80034e2:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80034e6:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80034ea:	0044      	lsls	r4, r0, #1
 80034ec:	4809      	ldr	r0, [pc, #36]	; (8003514 <GetBatteryLevel+0x48>)
 80034ee:	fba0 3404 	umull	r3, r4, r0, r4
 80034f2:	f3c4 14c7 	ubfx	r4, r4, #7, #8
 80034f6:	e000      	b.n	80034fa <GetBatteryLevel+0x2e>
    batteryLevel = LORAWAN_MAX_BAT;
 80034f8:	24fe      	movs	r4, #254	; 0xfe
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 80034fa:	9400      	str	r4, [sp, #0]
 80034fc:	4b06      	ldr	r3, [pc, #24]	; (8003518 <GetBatteryLevel+0x4c>)
 80034fe:	2201      	movs	r2, #1
 8003500:	2100      	movs	r1, #0
 8003502:	2002      	movs	r0, #2
 8003504:	f00f fcdc 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
}
 8003508:	4620      	mov	r0, r4
 800350a:	b002      	add	sp, #8
 800350c:	bd10      	pop	{r4, pc}
    batteryLevel = 0;
 800350e:	2400      	movs	r4, #0
 8003510:	e7f3      	b.n	80034fa <GetBatteryLevel+0x2e>
 8003512:	bf00      	nop
 8003514:	1b4e81b5 	.word	0x1b4e81b5
 8003518:	08013c48 	.word	0x08013c48

0800351c <GetTemperatureLevel>:
{
 800351c:	b508      	push	{r3, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 800351e:	f7ff fdbf 	bl	80030a0 <SYS_GetTemperatureLevel>
 8003522:	4603      	mov	r3, r0
 8003524:	2800      	cmp	r0, #0
 8003526:	db02      	blt.n	800352e <GetTemperatureLevel+0x12>
}
 8003528:	f3c3 200f 	ubfx	r0, r3, #8, #16
 800352c:	bd08      	pop	{r3, pc}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 800352e:	f100 03ff 	add.w	r3, r0, #255	; 0xff
 8003532:	e7f9      	b.n	8003528 <GetTemperatureLevel+0xc>

08003534 <GetUniqueId>:
{
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8003538:	4b16      	ldr	r3, [pc, #88]	; (8003594 <GetUniqueId+0x60>)
 800353a:	681b      	ldr	r3, [r3, #0]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800353c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003540:	d011      	beq.n	8003566 <GetUniqueId+0x32>
    id[7] = val & 0xFF;
 8003542:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8003544:	0a1a      	lsrs	r2, r3, #8
 8003546:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8003548:	0c1a      	lsrs	r2, r3, #16
 800354a:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 800354c:	0e1b      	lsrs	r3, r3, #24
 800354e:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8003550:	4b11      	ldr	r3, [pc, #68]	; (8003598 <GetUniqueId+0x64>)
 8003552:	681a      	ldr	r2, [r3, #0]
    id[3] = val & 0xFF;
 8003554:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 800355a:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 800355c:	0c1a      	lsrs	r2, r3, #16
 800355e:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8003560:	0e1b      	lsrs	r3, r3, #24
 8003562:	7003      	strb	r3, [r0, #0]
}
 8003564:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8003566:	f000 fdcf 	bl	8004108 <HAL_GetUIDw0>
 800356a:	4605      	mov	r5, r0
 800356c:	f000 fdd8 	bl	8004120 <HAL_GetUIDw2>
 8003570:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8003572:	f000 fdcf 	bl	8004114 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8003576:	0e2b      	lsrs	r3, r5, #24
 8003578:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 800357a:	0c2b      	lsrs	r3, r5, #16
 800357c:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 800357e:	0a2b      	lsrs	r3, r5, #8
 8003580:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8003582:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8003584:	0e03      	lsrs	r3, r0, #24
 8003586:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8003588:	0c03      	lsrs	r3, r0, #16
 800358a:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 800358c:	0a03      	lsrs	r3, r0, #8
 800358e:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8003590:	7020      	strb	r0, [r4, #0]
 8003592:	e7e7      	b.n	8003564 <GetUniqueId+0x30>
 8003594:	1fff7580 	.word	0x1fff7580
 8003598:	1fff7584 	.word	0x1fff7584

0800359c <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <GetDevAddr+0x24>)
 800359e:	6818      	ldr	r0, [r3, #0]
  if (val == 0xFFFFFFFF)
 80035a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80035a4:	d000      	beq.n	80035a8 <GetDevAddr+0xc>
}
 80035a6:	4770      	bx	lr
{
 80035a8:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80035aa:	f000 fdad 	bl	8004108 <HAL_GetUIDw0>
 80035ae:	4604      	mov	r4, r0
 80035b0:	f000 fdb0 	bl	8004114 <HAL_GetUIDw1>
 80035b4:	4044      	eors	r4, r0
 80035b6:	f000 fdb3 	bl	8004120 <HAL_GetUIDw2>
 80035ba:	4060      	eors	r0, r4
}
 80035bc:	bd10      	pop	{r4, pc}
 80035be:	bf00      	nop
 80035c0:	1fff7580 	.word	0x1fff7580

080035c4 <UTIL_ADV_TRACE_PreSendHook>:
{
 80035c4:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80035c6:	2101      	movs	r1, #1
 80035c8:	2002      	movs	r0, #2
 80035ca:	f00f fd3d 	bl	8013048 <UTIL_LPM_SetStopMode>
}
 80035ce:	bd08      	pop	{r3, pc}

080035d0 <UTIL_ADV_TRACE_PostSendHook>:
{
 80035d0:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80035d2:	2100      	movs	r1, #0
 80035d4:	2002      	movs	r0, #2
 80035d6:	f00f fd37 	bl	8013048 <UTIL_LPM_SetStopMode>
}
 80035da:	bd08      	pop	{r3, pc}

080035dc <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80035dc:	2000      	movs	r0, #0
 80035de:	4770      	bx	lr

080035e0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80035e0:	b508      	push	{r3, lr}
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 80035e2:	f000 f85f 	bl	80036a4 <TIMER_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 80035e6:	bd08      	pop	{r3, pc}

080035e8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80035e8:	b500      	push	{lr}
 80035ea:	b083      	sub	sp, #12
 80035ec:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80035ee:	9801      	ldr	r0, [sp, #4]
 80035f0:	f000 f936 	bl	8003860 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80035f4:	b003      	add	sp, #12
 80035f6:	f85d fb04 	ldr.w	pc, [sp], #4

080035fa <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 80035fa:	b508      	push	{r3, lr}
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 80035fc:	2801      	cmp	r0, #1
 80035fe:	d006      	beq.n	800360e <DBG_ConfigForLpm+0x14>
    HAL_DBGMCU_EnableDBGStopMode();
    HAL_DBGMCU_EnableDBGStandbyMode();
  }
  else
  {
    HAL_DBGMCU_DisableDBGSleepMode();
 8003600:	f000 fd9c 	bl	800413c <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8003604:	f000 fdaa 	bl	800415c <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8003608:	f000 fdb8 	bl	800417c <HAL_DBGMCU_DisableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 800360c:	bd08      	pop	{r3, pc}
    HAL_DBGMCU_EnableDBGSleepMode();
 800360e:	f000 fd8d 	bl	800412c <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8003612:	f000 fd9b 	bl	800414c <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8003616:	f000 fda9 	bl	800416c <HAL_DBGMCU_EnableDBGStandbyMode>
 800361a:	e7f7      	b.n	800360c <DBG_ConfigForLpm+0x12>

0800361c <DBG_Disable>:
{
 800361c:	b508      	push	{r3, lr}
  DBG_ConfigForLpm(0);
 800361e:	2000      	movs	r0, #0
 8003620:	f7ff ffeb 	bl	80035fa <DBG_ConfigForLpm>
}
 8003624:	bd08      	pop	{r3, pc}
	...

08003628 <DBG_ProbesInit>:
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003628:	4a03      	ldr	r2, [pc, #12]	; (8003638 <DBG_ProbesInit+0x10>)
 800362a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800362e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8003636:	4770      	bx	lr
 8003638:	58000800 	.word	0x58000800

0800363c <EnvSensors_Read>:
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <EnvSensors_Read+0x18>)
 800363e:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <EnvSensors_Read+0x1c>)
 8003642:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <EnvSensors_Read+0x20>)
 8003646:	6003      	str	r3, [r0, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <EnvSensors_Read+0x24>)
 800364a:	60c3      	str	r3, [r0, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <EnvSensors_Read+0x28>)
 800364e:	6103      	str	r3, [r0, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8003650:	2000      	movs	r0, #0
 8003652:	4770      	bx	lr
 8003654:	42480000 	.word	0x42480000
 8003658:	41900000 	.word	0x41900000
 800365c:	447a0000 	.word	0x447a0000
 8003660:	003e090d 	.word	0x003e090d
 8003664:	000503ab 	.word	0x000503ab

08003668 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
  /* USER CODE END EnvSensors_Init */
}
 8003668:	2000      	movs	r0, #0
 800366a:	4770      	bx	lr

0800366c <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800366c:	4b02      	ldr	r3, [pc, #8]	; (8003678 <TIMER_IF_SetTimerContext+0xc>)
 800366e:	6898      	ldr	r0, [r3, #8]
static inline uint32_t GetTimerTicks(void)
{
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8003670:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8003672:	4b02      	ldr	r3, [pc, #8]	; (800367c <TIMER_IF_SetTimerContext+0x10>)
 8003674:	6018      	str	r0, [r3, #0]
}
 8003676:	4770      	bx	lr
 8003678:	40002800 	.word	0x40002800
 800367c:	200000f8 	.word	0x200000f8

08003680 <TIMER_IF_GetTimerContext>:
}
 8003680:	4b01      	ldr	r3, [pc, #4]	; (8003688 <TIMER_IF_GetTimerContext+0x8>)
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	200000f8 	.word	0x200000f8

0800368c <TIMER_IF_GetTimerElapsedTime>:
 800368c:	4b03      	ldr	r3, [pc, #12]	; (800369c <TIMER_IF_GetTimerElapsedTime+0x10>)
 800368e:	689b      	ldr	r3, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8003690:	43db      	mvns	r3, r3
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8003692:	4a03      	ldr	r2, [pc, #12]	; (80036a0 <TIMER_IF_GetTimerElapsedTime+0x14>)
 8003694:	6810      	ldr	r0, [r2, #0]
}
 8003696:	1a18      	subs	r0, r3, r0
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40002800 	.word	0x40002800
 80036a0:	200000f8 	.word	0x200000f8

080036a4 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <TIMER_IF_GetTimerValue+0x14>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	b11b      	cbz	r3, 80036b2 <TIMER_IF_GetTimerValue+0xe>
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <TIMER_IF_GetTimerValue+0x18>)
 80036ac:	6898      	ldr	r0, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80036ae:	43c0      	mvns	r0, r0
 80036b0:	4770      	bx	lr
  uint32_t ret = 0;
 80036b2:	2000      	movs	r0, #0
}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	200000f4 	.word	0x200000f4
 80036bc:	40002800 	.word	0x40002800

080036c0 <TIMER_IF_GetMinimumTimeout>:
}
 80036c0:	2003      	movs	r0, #3
 80036c2:	4770      	bx	lr

080036c4 <TIMER_IF_Convert_ms2Tick>:
{
 80036c4:	b508      	push	{r3, lr}
 80036c6:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80036c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036cc:	2300      	movs	r3, #0
 80036ce:	0280      	lsls	r0, r0, #10
 80036d0:	0d89      	lsrs	r1, r1, #22
 80036d2:	f7ff fab9 	bl	8002c48 <__aeabi_uldivmod>
}
 80036d6:	bd08      	pop	{r3, pc}

080036d8 <TIMER_IF_Convert_Tick2ms>:
{
 80036d8:	b410      	push	{r4}
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80036da:	0142      	lsls	r2, r0, #5
 80036dc:	0ec3      	lsrs	r3, r0, #27
 80036de:	1a12      	subs	r2, r2, r0
 80036e0:	f163 0300 	sbc.w	r3, r3, #0
 80036e4:	0099      	lsls	r1, r3, #2
 80036e6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80036ea:	0094      	lsls	r4, r2, #2
 80036ec:	1822      	adds	r2, r4, r0
 80036ee:	f141 0300 	adc.w	r3, r1, #0
 80036f2:	00d8      	lsls	r0, r3, #3
 80036f4:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 80036f8:	00d1      	lsls	r1, r2, #3
 80036fa:	0a8a      	lsrs	r2, r1, #10
}
 80036fc:	ea42 5080 	orr.w	r0, r2, r0, lsl #22
 8003700:	bc10      	pop	{r4}
 8003702:	4770      	bx	lr

08003704 <TIMER_IF_StopTimer>:
{
 8003704:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003706:	4b07      	ldr	r3, [pc, #28]	; (8003724 <TIMER_IF_StopTimer+0x20>)
 8003708:	2201      	movs	r2, #1
 800370a:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800370c:	4c06      	ldr	r4, [pc, #24]	; (8003728 <TIMER_IF_StopTimer+0x24>)
 800370e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003712:	4620      	mov	r0, r4
 8003714:	f002 fd3e 	bl	8006194 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8003718:	f04f 33ff 	mov.w	r3, #4294967295
 800371c:	6323      	str	r3, [r4, #48]	; 0x30
}
 800371e:	2000      	movs	r0, #0
 8003720:	bd10      	pop	{r4, pc}
 8003722:	bf00      	nop
 8003724:	40002800 	.word	0x40002800
 8003728:	20001884 	.word	0x20001884

0800372c <TIMER_IF_BkUp_Write_MSBticks>:
{
 800372c:	b508      	push	{r3, lr}
 800372e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8003730:	2102      	movs	r1, #2
 8003732:	4802      	ldr	r0, [pc, #8]	; (800373c <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8003734:	f002 ff6f 	bl	8006616 <HAL_RTCEx_BKUPWrite>
}
 8003738:	bd08      	pop	{r3, pc}
 800373a:	bf00      	nop
 800373c:	20001884 	.word	0x20001884

08003740 <TIMER_IF_Init>:
{
 8003740:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8003742:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <TIMER_IF_Init+0x40>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	b10b      	cbz	r3, 800374c <TIMER_IF_Init+0xc>
}
 8003748:	2000      	movs	r0, #0
 800374a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800374c:	4c0d      	ldr	r4, [pc, #52]	; (8003784 <TIMER_IF_Init+0x44>)
 800374e:	f04f 35ff 	mov.w	r5, #4294967295
 8003752:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8003754:	f7ff fd6a 	bl	800322c <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8003758:	f7ff ffd4 	bl	8003704 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800375c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003760:	4620      	mov	r0, r4
 8003762:	f002 fd17 	bl	8006194 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8003766:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8003768:	4620      	mov	r0, r4
 800376a:	f002 fef3 	bl	8006554 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 800376e:	2000      	movs	r0, #0
 8003770:	f7ff ffdc 	bl	800372c <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8003774:	f7ff ff7a 	bl	800366c <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8003778:	4b01      	ldr	r3, [pc, #4]	; (8003780 <TIMER_IF_Init+0x40>)
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e7e3      	b.n	8003748 <TIMER_IF_Init+0x8>
 8003780:	200000f4 	.word	0x200000f4
 8003784:	20001884 	.word	0x20001884

08003788 <TIMER_IF_BkUp_Write_Seconds>:
{
 8003788:	b508      	push	{r3, lr}
 800378a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800378c:	2100      	movs	r1, #0
 800378e:	4802      	ldr	r0, [pc, #8]	; (8003798 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8003790:	f002 ff41 	bl	8006616 <HAL_RTCEx_BKUPWrite>
}
 8003794:	bd08      	pop	{r3, pc}
 8003796:	bf00      	nop
 8003798:	20001884 	.word	0x20001884

0800379c <TIMER_IF_BkUp_Write_SubSeconds>:
{
 800379c:	b508      	push	{r3, lr}
 800379e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80037a0:	2101      	movs	r1, #1
 80037a2:	4802      	ldr	r0, [pc, #8]	; (80037ac <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 80037a4:	f002 ff37 	bl	8006616 <HAL_RTCEx_BKUPWrite>
}
 80037a8:	bd08      	pop	{r3, pc}
 80037aa:	bf00      	nop
 80037ac:	20001884 	.word	0x20001884

080037b0 <TIMER_IF_StartTimer>:
{
 80037b0:	b510      	push	{r4, lr}
 80037b2:	b08c      	sub	sp, #48	; 0x30
 80037b4:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80037b6:	222c      	movs	r2, #44	; 0x2c
 80037b8:	2100      	movs	r1, #0
 80037ba:	a801      	add	r0, sp, #4
 80037bc:	f010 f944 	bl	8013a48 <memset>
  TIMER_IF_StopTimer();
 80037c0:	f7ff ffa0 	bl	8003704 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <TIMER_IF_StartTimer+0x48>)
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80037ca:	2300      	movs	r3, #0
 80037cc:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80037ce:	43e4      	mvns	r4, r4
 80037d0:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80037d2:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80037d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80037d8:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80037da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037de:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80037e0:	2201      	movs	r2, #1
 80037e2:	a901      	add	r1, sp, #4
 80037e4:	4805      	ldr	r0, [pc, #20]	; (80037fc <TIMER_IF_StartTimer+0x4c>)
 80037e6:	f002 fdf9 	bl	80063dc <HAL_RTC_SetAlarm_IT>
 80037ea:	b910      	cbnz	r0, 80037f2 <TIMER_IF_StartTimer+0x42>
}
 80037ec:	2000      	movs	r0, #0
 80037ee:	b00c      	add	sp, #48	; 0x30
 80037f0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80037f2:	f7ff fcc8 	bl	8003186 <Error_Handler>
 80037f6:	e7f9      	b.n	80037ec <TIMER_IF_StartTimer+0x3c>
 80037f8:	200000f8 	.word	0x200000f8
 80037fc:	20001884 	.word	0x20001884

08003800 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8003800:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8003802:	2102      	movs	r1, #2
 8003804:	4801      	ldr	r0, [pc, #4]	; (800380c <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8003806:	f002 ff0d 	bl	8006624 <HAL_RTCEx_BKUPRead>
}
 800380a:	bd08      	pop	{r3, pc}
 800380c:	20001884 	.word	0x20001884

08003810 <TIMER_IF_GetTime>:
{
 8003810:	b538      	push	{r3, r4, r5, lr}
 8003812:	4605      	mov	r5, r0
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <TIMER_IF_GetTime+0x2c>)
 8003816:	689c      	ldr	r4, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8003818:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800381a:	f7ff fff1 	bl	8003800 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800381e:	2200      	movs	r2, #0
 8003820:	1912      	adds	r2, r2, r4
 8003822:	f140 0300 	adc.w	r3, r0, #0
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8003826:	0a94      	lsrs	r4, r2, #10
 8003828:	ea44 5483 	orr.w	r4, r4, r3, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800382c:	f3c2 0009 	ubfx	r0, r2, #0, #10
 8003830:	f7ff ff52 	bl	80036d8 <TIMER_IF_Convert_Tick2ms>
 8003834:	8028      	strh	r0, [r5, #0]
}
 8003836:	4620      	mov	r0, r4
 8003838:	bd38      	pop	{r3, r4, r5, pc}
 800383a:	bf00      	nop
 800383c:	40002800 	.word	0x40002800

08003840 <TIMER_IF_BkUp_Read_Seconds>:
{
 8003840:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8003842:	2100      	movs	r1, #0
 8003844:	4801      	ldr	r0, [pc, #4]	; (800384c <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8003846:	f002 feed 	bl	8006624 <HAL_RTCEx_BKUPRead>
}
 800384a:	bd08      	pop	{r3, pc}
 800384c:	20001884 	.word	0x20001884

08003850 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8003850:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8003852:	2101      	movs	r1, #1
 8003854:	4801      	ldr	r0, [pc, #4]	; (800385c <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8003856:	f002 fee5 	bl	8006624 <HAL_RTCEx_BKUPRead>
}
 800385a:	bd08      	pop	{r3, pc}
 800385c:	20001884 	.word	0x20001884

08003860 <TIMER_IF_DelayMs>:
{
 8003860:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8003862:	f7ff ff2f 	bl	80036c4 <TIMER_IF_Convert_ms2Tick>
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <TIMER_IF_DelayMs+0x20>)
 8003868:	689a      	ldr	r2, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800386a:	43d2      	mvns	r2, r2
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <TIMER_IF_DelayMs+0x20>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	4283      	cmp	r3, r0
 8003876:	d201      	bcs.n	800387c <TIMER_IF_DelayMs+0x1c>
    __NOP();
 8003878:	bf00      	nop
 800387a:	e7f7      	b.n	800386c <TIMER_IF_DelayMs+0xc>
}
 800387c:	bd08      	pop	{r3, pc}
 800387e:	bf00      	nop
 8003880:	40002800 	.word	0x40002800

08003884 <HAL_RTC_AlarmAEventCallback>:
{
 8003884:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8003886:	f00f ff17 	bl	80136b8 <UTIL_TIMER_IRQ_Handler>
}
 800388a:	bd08      	pop	{r3, pc}

0800388c <HAL_RTCEx_SSRUEventCallback>:
{
 800388c:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800388e:	f7ff ffb7 	bl	8003800 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8003892:	3001      	adds	r0, #1
 8003894:	f7ff ff4a 	bl	800372c <TIMER_IF_BkUp_Write_MSBticks>
}
 8003898:	bd08      	pop	{r3, pc}
	...

0800389c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800389c:	b508      	push	{r3, lr}
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800389e:	4819      	ldr	r0, [pc, #100]	; (8003904 <MX_LPUART1_UART_Init+0x68>)
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <MX_LPUART1_UART_Init+0x6c>)
 80038a2:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 9600;
 80038a4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80038a8:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038aa:	2300      	movs	r3, #0
 80038ac:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80038ae:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80038b0:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80038b2:	220c      	movs	r2, #12
 80038b4:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038b6:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE; 	//AT_Cmd 1.8v Error  UART_ONE_BIT_SAMPLE_DISABLE   //UART_ONE_BIT_SAMPLE_DISABLE;       //YSJ 21.08.05
 80038b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038bc:	6202      	str	r2, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80038be:	6243      	str	r3, [r0, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038c0:	6283      	str	r3, [r0, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
 80038c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80038c6:	6643      	str	r3, [r0, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80038c8:	f004 f9b1 	bl	8007c2e <HAL_UART_Init>
 80038cc:	b970      	cbnz	r0, 80038ec <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038ce:	2100      	movs	r1, #0
 80038d0:	480c      	ldr	r0, [pc, #48]	; (8003904 <MX_LPUART1_UART_Init+0x68>)
 80038d2:	f004 fb5e 	bl	8007f92 <HAL_UARTEx_SetTxFifoThreshold>
 80038d6:	b960      	cbnz	r0, 80038f2 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038d8:	2100      	movs	r1, #0
 80038da:	480a      	ldr	r0, [pc, #40]	; (8003904 <MX_LPUART1_UART_Init+0x68>)
 80038dc:	f004 fb7e 	bl	8007fdc <HAL_UARTEx_SetRxFifoThreshold>
 80038e0:	b950      	cbnz	r0, 80038f8 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 80038e2:	4808      	ldr	r0, [pc, #32]	; (8003904 <MX_LPUART1_UART_Init+0x68>)
 80038e4:	f004 fb31 	bl	8007f4a <HAL_UARTEx_EnableFifoMode>
 80038e8:	b948      	cbnz	r0, 80038fe <MX_LPUART1_UART_Init+0x62>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80038ea:	bd08      	pop	{r3, pc}
    Error_Handler();
 80038ec:	f7ff fc4b 	bl	8003186 <Error_Handler>
 80038f0:	e7ed      	b.n	80038ce <MX_LPUART1_UART_Init+0x32>
    Error_Handler();
 80038f2:	f7ff fc48 	bl	8003186 <Error_Handler>
 80038f6:	e7ef      	b.n	80038d8 <MX_LPUART1_UART_Init+0x3c>
    Error_Handler();
 80038f8:	f7ff fc45 	bl	8003186 <Error_Handler>
 80038fc:	e7f1      	b.n	80038e2 <MX_LPUART1_UART_Init+0x46>
    Error_Handler();
 80038fe:	f7ff fc42 	bl	8003186 <Error_Handler>
}
 8003902:	e7f2      	b.n	80038ea <MX_LPUART1_UART_Init+0x4e>
 8003904:	200018c8 	.word	0x200018c8
 8003908:	40008000 	.word	0x40008000

0800390c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800390c:	b530      	push	{r4, r5, lr}
 800390e:	b097      	sub	sp, #92	; 0x5c
 8003910:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003912:	2100      	movs	r1, #0
 8003914:	9111      	str	r1, [sp, #68]	; 0x44
 8003916:	9112      	str	r1, [sp, #72]	; 0x48
 8003918:	9113      	str	r1, [sp, #76]	; 0x4c
 800391a:	9114      	str	r1, [sp, #80]	; 0x50
 800391c:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800391e:	2238      	movs	r2, #56	; 0x38
 8003920:	a803      	add	r0, sp, #12
 8003922:	f010 f891 	bl	8013a48 <memset>
  if(uartHandle->Instance==LPUART1)
 8003926:	6822      	ldr	r2, [r4, #0]
 8003928:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_UART_MspInit+0xc8>)
 800392a:	429a      	cmp	r2, r3
 800392c:	d001      	beq.n	8003932 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800392e:	b017      	add	sp, #92	; 0x5c
 8003930:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003932:	2320      	movs	r3, #32
 8003934:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;	//RCC_LPUART1CLKSOURCE_LSE;
 8003936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800393a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800393c:	a803      	add	r0, sp, #12
 800393e:	f002 fae7 	bl	8005f10 <HAL_RCCEx_PeriphCLKConfig>
 8003942:	2800      	cmp	r0, #0
 8003944:	d13f      	bne.n	80039c6 <HAL_UART_MspInit+0xba>
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800394c:	f042 0201 	orr.w	r2, r2, #1
 8003950:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003952:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003954:	f002 0201 	and.w	r2, r2, #1
 8003958:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800395a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800395c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800396c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 800396e:	230c      	movs	r3, #12
 8003970:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003972:	2302      	movs	r3, #2
 8003974:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003976:	2500      	movs	r5, #0
 8003978:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397a:	2303      	movs	r3, #3
 800397c:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800397e:	2308      	movs	r3, #8
 8003980:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003982:	a911      	add	r1, sp, #68	; 0x44
 8003984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003988:	f001 fb52 	bl	8005030 <HAL_GPIO_Init>
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 800398c:	4812      	ldr	r0, [pc, #72]	; (80039d8 <HAL_UART_MspInit+0xcc>)
 800398e:	4b13      	ldr	r3, [pc, #76]	; (80039dc <HAL_UART_MspInit+0xd0>)
 8003990:	6003      	str	r3, [r0, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003992:	2316      	movs	r3, #22
 8003994:	6043      	str	r3, [r0, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003996:	2310      	movs	r3, #16
 8003998:	6083      	str	r3, [r0, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800399a:	60c5      	str	r5, [r0, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	6103      	str	r3, [r0, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039a0:	6145      	str	r5, [r0, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039a2:	6185      	str	r5, [r0, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80039a4:	61c5      	str	r5, [r0, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039a6:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80039a8:	f001 f940 	bl	8004c2c <HAL_DMA_Init>
 80039ac:	b970      	cbnz	r0, 80039cc <HAL_UART_MspInit+0xc0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_UART_MspInit+0xcc>)
 80039b0:	67a3      	str	r3, [r4, #120]	; 0x78
 80039b2:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 80039b4:	2200      	movs	r2, #0
 80039b6:	2102      	movs	r1, #2
 80039b8:	2026      	movs	r0, #38	; 0x26
 80039ba:	f001 f87b 	bl	8004ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80039be:	2026      	movs	r0, #38	; 0x26
 80039c0:	f001 f8ac 	bl	8004b1c <HAL_NVIC_EnableIRQ>
}
 80039c4:	e7b3      	b.n	800392e <HAL_UART_MspInit+0x22>
      Error_Handler();
 80039c6:	f7ff fbde 	bl	8003186 <Error_Handler>
 80039ca:	e7bc      	b.n	8003946 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 80039cc:	f7ff fbdb 	bl	8003186 <Error_Handler>
 80039d0:	e7ed      	b.n	80039ae <HAL_UART_MspInit+0xa2>
 80039d2:	bf00      	nop
 80039d4:	40008000 	.word	0x40008000
 80039d8:	20001958 	.word	0x20001958
 80039dc:	40020058 	.word	0x40020058

080039e0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==LPUART1)
 80039e0:	6802      	ldr	r2, [r0, #0]
 80039e2:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <HAL_UART_MspDeInit+0x34>)
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d000      	beq.n	80039ea <HAL_UART_MspDeInit+0xa>
 80039e8:	4770      	bx	lr
{
 80039ea:	b510      	push	{r4, lr}
 80039ec:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 80039ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	65d3      	str	r3, [r2, #92]	; 0x5c

    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 80039fa:	210c      	movs	r1, #12
 80039fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a00:	f001 fbce 	bl	80051a0 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003a04:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003a06:	f001 f983 	bl	8004d10 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8003a0a:	2026      	movs	r0, #38	; 0x26
 8003a0c:	f001 f894 	bl	8004b38 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}
 8003a10:	bd10      	pop	{r4, pc}
 8003a12:	bf00      	nop
 8003a14:	40008000 	.word	0x40008000

08003a18 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003a18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <vcom_Init+0x20>)
 8003a1c:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8003a1e:	f7ff fb91 	bl	8003144 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8003a22:	f7ff ff3b 	bl	800389c <MX_LPUART1_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003a26:	4a05      	ldr	r2, [pc, #20]	; (8003a3c <vcom_Init+0x24>)
 8003a28:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_28);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003a34:	2000      	movs	r0, #0
 8003a36:	bd08      	pop	{r3, pc}
 8003a38:	20000100 	.word	0x20000100
 8003a3c:	58000800 	.word	0x58000800

08003a40 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003a40:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8003a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	63da      	str	r2, [r3, #60]	; 0x3c
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8003a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	63da      	str	r2, [r3, #60]	; 0x3c
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_LPUART1_FORCE_RESET();
  __HAL_RCC_LPUART1_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&hlpuart1);
 8003a56:	4804      	ldr	r0, [pc, #16]	; (8003a68 <vcom_DeInit+0x28>)
 8003a58:	f7ff ffc2 	bl	80039e0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003a5c:	200f      	movs	r0, #15
 8003a5e:	f001 f86b 	bl	8004b38 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003a62:	2000      	movs	r0, #0
 8003a64:	bd08      	pop	{r3, pc}
 8003a66:	bf00      	nop
 8003a68:	200018c8 	.word	0x200018c8

08003a6c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003a6c:	b508      	push	{r3, lr}
 8003a6e:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8003a70:	4601      	mov	r1, r0
 8003a72:	4802      	ldr	r0, [pc, #8]	; (8003a7c <vcom_Trace_DMA+0x10>)
 8003a74:	f003 f9a6 	bl	8006dc4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003a78:	2000      	movs	r0, #0
 8003a7a:	bd08      	pop	{r3, pc}
 8003a7c:	200018c8 	.word	0x200018c8

08003a80 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003a80:	b510      	push	{r4, lr}
 8003a82:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <vcom_ReceiveInit+0x50>)
 8003a86:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003a88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a8c:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection);
 8003a8e:	ab02      	add	r3, sp, #8
 8003a90:	e913 0006 	ldmdb	r3, {r1, r2}
 8003a94:	480f      	ldr	r0, [pc, #60]	; (8003ad4 <vcom_ReceiveInit+0x54>)
 8003a96:	f004 fa00 	bl	8007e9a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_BUSY) == SET);
 8003a9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <vcom_ReceiveInit+0x54>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003aa4:	d1f9      	bne.n	8003a9a <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_REACK) == RESET);
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8003aac:	d0fb      	beq.n	8003aa6 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_WUF);
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003ab4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&hlpuart1);
 8003ab6:	4c07      	ldr	r4, [pc, #28]	; (8003ad4 <vcom_ReceiveInit+0x54>)
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f004 fa2f 	bl	8007f1c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&hlpuart1, &charRx, 1);
 8003abe:	2201      	movs	r2, #1
 8003ac0:	4905      	ldr	r1, [pc, #20]	; (8003ad8 <vcom_ReceiveInit+0x58>)
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f004 f97a 	bl	8007dbc <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003ac8:	2000      	movs	r0, #0
 8003aca:	b002      	add	sp, #8
 8003acc:	bd10      	pop	{r4, pc}
 8003ace:	bf00      	nop
 8003ad0:	200000fc 	.word	0x200000fc
 8003ad4:	200018c8 	.word	0x200018c8
 8003ad8:	200019b8 	.word	0x200019b8

08003adc <vcom_Resume>:

void vcom_Resume(void)
{
 8003adc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003ade:	4804      	ldr	r0, [pc, #16]	; (8003af0 <vcom_Resume+0x14>)
 8003ae0:	f001 f8a4 	bl	8004c2c <HAL_DMA_Init>
 8003ae4:	b900      	cbnz	r0, 8003ae8 <vcom_Resume+0xc>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003ae6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003ae8:	f7ff fb4d 	bl	8003186 <Error_Handler>
}
 8003aec:	e7fb      	b.n	8003ae6 <vcom_Resume+0xa>
 8003aee:	bf00      	nop
 8003af0:	20001958 	.word	0x20001958

08003af4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *hlpuart1)
{
 8003af4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8003af6:	4b02      	ldr	r3, [pc, #8]	; (8003b00 <HAL_UART_TxCpltCallback+0xc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2000      	movs	r0, #0
 8003afc:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003afe:	bd08      	pop	{r3, pc}
 8003b00:	20000100 	.word	0x20000100

08003b04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hlpuart1)
{
 8003b04:	b510      	push	{r4, lr}
 8003b06:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == hlpuart1->ErrorCode))
 8003b08:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <HAL_UART_RxCpltCallback+0x24>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	b12b      	cbz	r3, 8003b1a <HAL_UART_RxCpltCallback+0x16>
 8003b0e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8003b12:	b912      	cbnz	r2, 8003b1a <HAL_UART_RxCpltCallback+0x16>
  {
    RxCpltCallback(&charRx, 1, 0);
 8003b14:	2101      	movs	r1, #1
 8003b16:	4805      	ldr	r0, [pc, #20]	; (8003b2c <HAL_UART_RxCpltCallback+0x28>)
 8003b18:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(hlpuart1, &charRx, 1);
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4903      	ldr	r1, [pc, #12]	; (8003b2c <HAL_UART_RxCpltCallback+0x28>)
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f004 f94c 	bl	8007dbc <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003b24:	bd10      	pop	{r4, pc}
 8003b26:	bf00      	nop
 8003b28:	200000fc 	.word	0x200000fc
 8003b2c:	200019b8 	.word	0x200019b8

08003b30 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8003b30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8003b32:	f7ff fca1 	bl	8003478 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8003b36:	f000 f975 	bl	8003e24 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8003b3a:	bd08      	pop	{r3, pc}

08003b3c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8003b3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8003b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b42:	f00f fb19 	bl	8013178 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8003b46:	bd08      	pop	{r3, pc}

08003b48 <OnTxTimerTestEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerTestEvent(void *context)
{
  //BSP_LED_Off(LED_GREEN) ;
}
 8003b48:	4770      	bx	lr

08003b4a <OnRxTimerTestEvent>:

static void OnRxTimerTestEvent(void *context)
{
  //BSP_LED_Off(LED_BLUE) ;
}
 8003b4a:	4770      	bx	lr

08003b4c <OnJoinTimerTestEvent>:

static void OnJoinTimerTestEvent(void *context)
{
  //BSP_LED_Toggle(LED_RED) ;
}
 8003b4c:	4770      	bx	lr
	...

08003b50 <OnTxData>:
/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d03c      	beq.n	8003bce <OnTxData+0x7e>
{
 8003b54:	b510      	push	{r4, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	4604      	mov	r4, r0
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 8003b5a:	7803      	ldrb	r3, [r0, #0]
 8003b5c:	b90b      	cbnz	r3, 8003b62 <OnTxData+0x12>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 8003b5e:	b004      	add	sp, #16
 8003b60:	bd10      	pop	{r4, pc}
      UTIL_TIMER_Start(&TxTestTimer);
 8003b62:	481b      	ldr	r0, [pc, #108]	; (8003bd0 <OnTxData+0x80>)
 8003b64:	f00f fd48 	bl	80135f8 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <OnTxData+0x84>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	2002      	movs	r0, #2
 8003b70:	f00f f9a6 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8003b74:	7b23      	ldrb	r3, [r4, #12]
 8003b76:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8003b7a:	f994 1014 	ldrsb.w	r1, [r4, #20]
 8003b7e:	9103      	str	r1, [sp, #12]
 8003b80:	9202      	str	r2, [sp, #8]
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	68a3      	ldr	r3, [r4, #8]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <OnTxData+0x88>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	2003      	movs	r0, #3
 8003b90:	f00f f996 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <OnTxData+0x8c>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	4611      	mov	r1, r2
 8003b9a:	2003      	movs	r0, #3
 8003b9c:	f00f f990 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8003ba0:	78a3      	ldrb	r3, [r4, #2]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d10c      	bne.n	8003bc0 <OnTxData+0x70>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8003ba6:	78e3      	ldrb	r3, [r4, #3]
 8003ba8:	b143      	cbz	r3, 8003bbc <OnTxData+0x6c>
 8003baa:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <OnTxData+0x90>)
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <OnTxData+0x94>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	2003      	movs	r0, #3
 8003bb6:	f00f f983 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
 8003bba:	e7d0      	b.n	8003b5e <OnTxData+0xe>
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <OnTxData+0x98>)
 8003bbe:	e7f5      	b.n	8003bac <OnTxData+0x5c>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <OnTxData+0x9c>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	2003      	movs	r0, #3
 8003bc8:	f00f f97a 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
}
 8003bcc:	e7c7      	b.n	8003b5e <OnTxData+0xe>
 8003bce:	4770      	bx	lr
 8003bd0:	20000228 	.word	0x20000228
 8003bd4:	08013cb0 	.word	0x08013cb0
 8003bd8:	08013ce4 	.word	0x08013ce4
 8003bdc:	08013d18 	.word	0x08013d18
 8003be0:	08013cac 	.word	0x08013cac
 8003be4:	08013d28 	.word	0x08013d28
 8003be8:	08013ca4 	.word	0x08013ca4
 8003bec:	08013d3c 	.word	0x08013d3c

08003bf0 <OnTxTimerEvent>:
{
 8003bf0:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimer), CFG_SEQ_Prio_0);
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	2002      	movs	r0, #2
 8003bf6:	f00f fa89 	bl	801310c <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8003bfa:	4802      	ldr	r0, [pc, #8]	; (8003c04 <OnTxTimerEvent+0x14>)
 8003bfc:	f00f fcfc 	bl	80135f8 <UTIL_TIMER_Start>
}
 8003c00:	bd08      	pop	{r3, pc}
 8003c02:	bf00      	nop
 8003c04:	20000240 	.word	0x20000240

08003c08 <OnMacProcessNotify>:
  }
  /* USER CODE END OnJoinRequest_1 */
}

static void OnMacProcessNotify(void)
{
 8003c08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	f00f fa7d 	bl	801310c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8003c12:	bd08      	pop	{r3, pc}

08003c14 <OnRxData>:
{
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	460c      	mov	r4, r1
  if ((appData != NULL) || (params != NULL))
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	b330      	cbz	r0, 8003c6c <OnRxData+0x58>
    UTIL_TIMER_Start(&RxTestTimer);
 8003c1e:	4820      	ldr	r0, [pc, #128]	; (8003ca0 <OnRxData+0x8c>)
 8003c20:	f00f fcea 	bl	80135f8 <UTIL_TIMER_Start>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8003c24:	4b1f      	ldr	r3, [pc, #124]	; (8003ca4 <OnRxData+0x90>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	4611      	mov	r1, r2
 8003c2a:	2002      	movs	r0, #2
 8003c2c:	f00f f948 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8003c30:	f994 200c 	ldrsb.w	r2, [r4, #12]
 8003c34:	782b      	ldrb	r3, [r5, #0]
 8003c36:	f994 1002 	ldrsb.w	r1, [r4, #2]
 8003c3a:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8003c3e:	f994 6004 	ldrsb.w	r6, [r4, #4]
 8003c42:	9605      	str	r6, [sp, #20]
 8003c44:	9004      	str	r0, [sp, #16]
 8003c46:	9103      	str	r1, [sp, #12]
 8003c48:	9302      	str	r3, [sp, #8]
 8003c4a:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <OnRxData+0x94>)
 8003c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	68a3      	ldr	r3, [r4, #8]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <OnRxData+0x98>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	2003      	movs	r0, #3
 8003c5e:	f00f f92f 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 8003c62:	782b      	ldrb	r3, [r5, #0]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d004      	beq.n	8003c72 <OnRxData+0x5e>
}
 8003c68:	b006      	add	sp, #24
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
  if ((appData != NULL) || (params != NULL))
 8003c6c:	2900      	cmp	r1, #0
 8003c6e:	d1d6      	bne.n	8003c1e <OnRxData+0xa>
  }
 8003c70:	e7fa      	b.n	8003c68 <OnRxData+0x54>
        if (appData->BufferSize == 1)
 8003c72:	786b      	ldrb	r3, [r5, #1]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d1f7      	bne.n	8003c68 <OnRxData+0x54>
          switch (appData->Buffer[0])
 8003c78:	686b      	ldr	r3, [r5, #4]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d007      	beq.n	8003c90 <OnRxData+0x7c>
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d009      	beq.n	8003c98 <OnRxData+0x84>
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ef      	bne.n	8003c68 <OnRxData+0x54>
              LmHandlerRequestClass(CLASS_A);
 8003c88:	2000      	movs	r0, #0
 8003c8a:	f004 fb8d 	bl	80083a8 <LmHandlerRequestClass>
              break;
 8003c8e:	e7eb      	b.n	8003c68 <OnRxData+0x54>
              LmHandlerRequestClass(CLASS_B);
 8003c90:	2001      	movs	r0, #1
 8003c92:	f004 fb89 	bl	80083a8 <LmHandlerRequestClass>
              break;
 8003c96:	e7e7      	b.n	8003c68 <OnRxData+0x54>
              LmHandlerRequestClass(CLASS_C);
 8003c98:	2002      	movs	r0, #2
 8003c9a:	f004 fb85 	bl	80083a8 <LmHandlerRequestClass>
}
 8003c9e:	e7e3      	b.n	8003c68 <OnRxData+0x54>
 8003ca0:	20000210 	.word	0x20000210
 8003ca4:	08013d4c 	.word	0x08013d4c
 8003ca8:	08013f08 	.word	0x08013f08
 8003cac:	08013d80 	.word	0x08013d80

08003cb0 <OnJoinRequest>:
  if (joinParams != NULL)
 8003cb0:	b328      	cbz	r0, 8003cfe <OnJoinRequest+0x4e>
{
 8003cb2:	b510      	push	{r4, lr}
 8003cb4:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8003cb6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8003cba:	b9cb      	cbnz	r3, 8003cf0 <OnJoinRequest+0x40>
      UTIL_TIMER_Stop(&JoinTestTimer);
 8003cbc:	4810      	ldr	r0, [pc, #64]	; (8003d00 <OnJoinRequest+0x50>)
 8003cbe:	f00f fc39 	bl	8013534 <UTIL_TIMER_Stop>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8003cc2:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <OnJoinRequest+0x54>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	2002      	movs	r0, #2
 8003cca:	f00f f8f9 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8003cce:	78a3      	ldrb	r3, [r4, #2]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d006      	beq.n	8003ce2 <OnJoinRequest+0x32>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <OnJoinRequest+0x58>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	4611      	mov	r1, r2
 8003cda:	2002      	movs	r0, #2
 8003cdc:	f00f f8f0 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
 8003ce0:	e00c      	b.n	8003cfc <OnJoinRequest+0x4c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <OnJoinRequest+0x5c>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	2002      	movs	r0, #2
 8003cea:	f00f f8e9 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
 8003cee:	e005      	b.n	8003cfc <OnJoinRequest+0x4c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8003cf0:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <OnJoinRequest+0x60>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	2002      	movs	r0, #2
 8003cf8:	f00f f8e2 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
}
 8003cfc:	bd10      	pop	{r4, pc}
 8003cfe:	4770      	bx	lr
 8003d00:	200001f8 	.word	0x200001f8
 8003d04:	08013dc8 	.word	0x08013dc8
 8003d08:	08013e00 	.word	0x08013e00
 8003d0c:	08013de0 	.word	0x08013de0
 8003d10:	08013e20 	.word	0x08013e20

08003d14 <SendTxData>:
{
 8003d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d16:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Time_t nextTxIn = 0;
 8003d18:	2700      	movs	r7, #0
 8003d1a:	9703      	str	r7, [sp, #12]
  EnvSensors_Read(&sensor_data);
 8003d1c:	a804      	add	r0, sp, #16
 8003d1e:	f7ff fc8d 	bl	800363c <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8003d22:	f7ff f9bd 	bl	80030a0 <SYS_GetTemperatureLevel>
 8003d26:	f340 260f 	sbfx	r6, r0, #8, #16
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8003d2a:	4937      	ldr	r1, [pc, #220]	; (8003e08 <SendTxData+0xf4>)
 8003d2c:	9804      	ldr	r0, [sp, #16]
 8003d2e:	f7fe fda5 	bl	800287c <__aeabi_fmul>
 8003d32:	4936      	ldr	r1, [pc, #216]	; (8003e0c <SendTxData+0xf8>)
 8003d34:	f7fe fe56 	bl	80029e4 <__aeabi_fdiv>
 8003d38:	f7fe ff66 	bl	8002c08 <__aeabi_f2uiz>
 8003d3c:	b285      	uxth	r5, r0
  AppData.Port = LORAWAN_USER_APP_PORT;
 8003d3e:	4c34      	ldr	r4, [pc, #208]	; (8003e10 <SendTxData+0xfc>)
 8003d40:	2302      	movs	r3, #2
 8003d42:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8003d44:	4931      	ldr	r1, [pc, #196]	; (8003e0c <SendTxData+0xf8>)
 8003d46:	9806      	ldr	r0, [sp, #24]
 8003d48:	f7fe fd98 	bl	800287c <__aeabi_fmul>
 8003d4c:	f7fe ff5c 	bl	8002c08 <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppTestStateOn;
 8003d50:	6863      	ldr	r3, [r4, #4]
 8003d52:	701f      	strb	r7, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8003d54:	6863      	ldr	r3, [r4, #4]
 8003d56:	0a2a      	lsrs	r2, r5, #8
 8003d58:	705a      	strb	r2, [r3, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8003d5a:	6863      	ldr	r3, [r4, #4]
 8003d5c:	709d      	strb	r5, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8003d5e:	6863      	ldr	r3, [r4, #4]
 8003d60:	70de      	strb	r6, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8003d62:	6863      	ldr	r3, [r4, #4]
 8003d64:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8003d68:	711a      	strb	r2, [r3, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8003d6a:	6863      	ldr	r3, [r4, #4]
 8003d6c:	7158      	strb	r0, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8003d6e:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <SendTxData+0x100>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d002      	beq.n	8003d7c <SendTxData+0x68>
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d000      	beq.n	8003d7c <SendTxData+0x68>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8003d7a:	b9ab      	cbnz	r3, 8003da8 <SendTxData+0x94>
    AppData.Buffer[i++] = 0;
 8003d7c:	4a24      	ldr	r2, [pc, #144]	; (8003e10 <SendTxData+0xfc>)
 8003d7e:	6851      	ldr	r1, [r2, #4]
 8003d80:	2300      	movs	r3, #0
 8003d82:	718b      	strb	r3, [r1, #6]
    AppData.Buffer[i++] = 0;
 8003d84:	6851      	ldr	r1, [r2, #4]
 8003d86:	71cb      	strb	r3, [r1, #7]
    AppData.Buffer[i++] = 0;
 8003d88:	6852      	ldr	r2, [r2, #4]
 8003d8a:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 8003d8c:	7253      	strb	r3, [r2, #9]
 8003d8e:	230a      	movs	r3, #10
  AppData.BufferSize = i;
 8003d90:	481f      	ldr	r0, [pc, #124]	; (8003e10 <SendTxData+0xfc>)
 8003d92:	7043      	strb	r3, [r0, #1]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8003d94:	2300      	movs	r3, #0
 8003d96:	aa03      	add	r2, sp, #12
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f004 fba5 	bl	80084e8 <LmHandlerSend>
 8003d9e:	b1f8      	cbz	r0, 8003de0 <SendTxData+0xcc>
  else if (nextTxIn > 0)
 8003da0:	9b03      	ldr	r3, [sp, #12]
 8003da2:	bb23      	cbnz	r3, 8003dee <SendTxData+0xda>
}
 8003da4:	b00b      	add	sp, #44	; 0x2c
 8003da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    latitude = sensor_data.latitude;
 8003da8:	9d07      	ldr	r5, [sp, #28]
    longitude = sensor_data.longitude;
 8003daa:	9c08      	ldr	r4, [sp, #32]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8003dac:	4e18      	ldr	r6, [pc, #96]	; (8003e10 <SendTxData+0xfc>)
 8003dae:	6877      	ldr	r7, [r6, #4]
 8003db0:	f7ff fb8c 	bl	80034cc <GetBatteryLevel>
 8003db4:	71b8      	strb	r0, [r7, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8003db6:	6873      	ldr	r3, [r6, #4]
 8003db8:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8003dbc:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8003dbe:	6873      	ldr	r3, [r6, #4]
 8003dc0:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8003dc4:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8003dc6:	725d      	strb	r5, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8003dc8:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8003dcc:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8003dce:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8003dd2:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8003dd4:	731c      	strb	r4, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	735a      	strb	r2, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8003dda:	739a      	strb	r2, [r3, #14]
 8003ddc:	230f      	movs	r3, #15
 8003dde:	e7d7      	b.n	8003d90 <SendTxData+0x7c>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8003de0:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <SendTxData+0x104>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	2100      	movs	r1, #0
 8003de6:	4610      	mov	r0, r2
 8003de8:	f00f f86a 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
 8003dec:	e7da      	b.n	8003da4 <SendTxData+0x90>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8003dee:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <SendTxData+0x108>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	099b      	lsrs	r3, r3, #6
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <SendTxData+0x10c>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4610      	mov	r0, r2
 8003e00:	f00f f85e 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
}
 8003e04:	e7ce      	b.n	8003da4 <SendTxData+0x90>
 8003e06:	bf00      	nop
 8003e08:	42c80000 	.word	0x42c80000
 8003e0c:	41200000 	.word	0x41200000
 8003e10:	20000000 	.word	0x20000000
 8003e14:	2000003c 	.word	0x2000003c
 8003e18:	08013e3c 	.word	0x08013e3c
 8003e1c:	10624dd3 	.word	0x10624dd3
 8003e20:	08013e4c 	.word	0x08013e4c

08003e24 <LoRaWAN_Init>:
{
 8003e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e28:	b085      	sub	sp, #20
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8003e2a:	2400      	movs	r4, #0
 8003e2c:	9402      	str	r4, [sp, #8]
 8003e2e:	2501      	movs	r5, #1
 8003e30:	9501      	str	r5, [sp, #4]
 8003e32:	9500      	str	r5, [sp, #0]
 8003e34:	4b38      	ldr	r3, [pc, #224]	; (8003f18 <LoRaWAN_Init+0xf4>)
 8003e36:	4622      	mov	r2, r4
 8003e38:	4621      	mov	r1, r4
 8003e3a:	2002      	movs	r0, #2
 8003e3c:	f00f f840 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8003e40:	9402      	str	r4, [sp, #8]
 8003e42:	2303      	movs	r3, #3
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	2602      	movs	r6, #2
 8003e48:	9600      	str	r6, [sp, #0]
 8003e4a:	4b34      	ldr	r3, [pc, #208]	; (8003f1c <LoRaWAN_Init+0xf8>)
 8003e4c:	4622      	mov	r2, r4
 8003e4e:	4621      	mov	r1, r4
 8003e50:	4630      	mov	r0, r6
 8003e52:	f00f f835 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8003e56:	9402      	str	r4, [sp, #8]
 8003e58:	9501      	str	r5, [sp, #4]
 8003e5a:	9500      	str	r5, [sp, #0]
 8003e5c:	4b30      	ldr	r3, [pc, #192]	; (8003f20 <LoRaWAN_Init+0xfc>)
 8003e5e:	4622      	mov	r2, r4
 8003e60:	4621      	mov	r1, r4
 8003e62:	4630      	mov	r0, r6
 8003e64:	f00f f82c 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxTestTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerTestEvent, NULL);
 8003e68:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8003f4c <LoRaWAN_Init+0x128>
 8003e6c:	9400      	str	r4, [sp, #0]
 8003e6e:	4b2d      	ldr	r3, [pc, #180]	; (8003f24 <LoRaWAN_Init+0x100>)
 8003e70:	4622      	mov	r2, r4
 8003e72:	f04f 31ff 	mov.w	r1, #4294967295
 8003e76:	4648      	mov	r0, r9
 8003e78:	f00f fafe 	bl	8013478 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxTestTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerTestEvent, NULL);
 8003e7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003f50 <LoRaWAN_Init+0x12c>
 8003e80:	9400      	str	r4, [sp, #0]
 8003e82:	4b29      	ldr	r3, [pc, #164]	; (8003f28 <LoRaWAN_Init+0x104>)
 8003e84:	4622      	mov	r2, r4
 8003e86:	f04f 31ff 	mov.w	r1, #4294967295
 8003e8a:	4640      	mov	r0, r8
 8003e8c:	f00f faf4 	bl	8013478 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinTestTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerTestEvent, NULL);
 8003e90:	4f26      	ldr	r7, [pc, #152]	; (8003f2c <LoRaWAN_Init+0x108>)
 8003e92:	9400      	str	r4, [sp, #0]
 8003e94:	4b26      	ldr	r3, [pc, #152]	; (8003f30 <LoRaWAN_Init+0x10c>)
 8003e96:	462a      	mov	r2, r5
 8003e98:	f04f 31ff 	mov.w	r1, #4294967295
 8003e9c:	4638      	mov	r0, r7
 8003e9e:	f00f faeb 	bl	8013478 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxTestTimer, 500);
 8003ea2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003ea6:	4648      	mov	r0, r9
 8003ea8:	f00f fbec 	bl	8013684 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxTestTimer, 500);
 8003eac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003eb0:	4640      	mov	r0, r8
 8003eb2:	f00f fbe7 	bl	8013684 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinTestTimer, 500);
 8003eb6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003eba:	4638      	mov	r0, r7
 8003ebc:	f00f fbe2 	bl	8013684 <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8003ec0:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <LoRaWAN_Init+0x110>)
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	f00f f9df 	bl	8013288 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimer), UTIL_SEQ_RFU, SendTxData);
 8003eca:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <LoRaWAN_Init+0x114>)
 8003ecc:	4621      	mov	r1, r4
 8003ece:	4630      	mov	r0, r6
 8003ed0:	f00f f9da 	bl	8013288 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8003ed4:	f000 f83e 	bl	8003f54 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 8003ed8:	4818      	ldr	r0, [pc, #96]	; (8003f3c <LoRaWAN_Init+0x118>)
 8003eda:	f004 fcd9 	bl	8008890 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8003ede:	4818      	ldr	r0, [pc, #96]	; (8003f40 <LoRaWAN_Init+0x11c>)
 8003ee0:	f004 f958 	bl	8008194 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinTestTimer);
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	f00f fb87 	bl	80135f8 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType);
 8003eea:	4630      	mov	r0, r6
 8003eec:	f004 fab0 	bl	8008450 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8003ef0:	4d14      	ldr	r5, [pc, #80]	; (8003f44 <LoRaWAN_Init+0x120>)
 8003ef2:	9400      	str	r4, [sp, #0]
 8003ef4:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <LoRaWAN_Init+0x124>)
 8003ef6:	4622      	mov	r2, r4
 8003ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8003efc:	4628      	mov	r0, r5
 8003efe:	f00f fabb 	bl	8013478 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8003f02:	f242 7110 	movw	r1, #10000	; 0x2710
 8003f06:	4628      	mov	r0, r5
 8003f08:	f00f fbbc 	bl	8013684 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	f00f fb73 	bl	80135f8 <UTIL_TIMER_Start>
}
 8003f12:	b005      	add	sp, #20
 8003f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f18:	08013e6c 	.word	0x08013e6c
 8003f1c:	08013e8c 	.word	0x08013e8c
 8003f20:	08013eac 	.word	0x08013eac
 8003f24:	08003b49 	.word	0x08003b49
 8003f28:	08003b4b 	.word	0x08003b4b
 8003f2c:	200001f8 	.word	0x200001f8
 8003f30:	08003b4d 	.word	0x08003b4d
 8003f34:	08008375 	.word	0x08008375
 8003f38:	08003d15 	.word	0x08003d15
 8003f3c:	20000008 	.word	0x20000008
 8003f40:	2000003c 	.word	0x2000003c
 8003f44:	20000240 	.word	0x20000240
 8003f48:	08003bf1 	.word	0x08003bf1
 8003f4c:	20000228 	.word	0x20000228
 8003f50:	20000210 	.word	0x20000210

08003f54 <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <LoraInfo_Init+0x14>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8003f5a:	60da      	str	r2, [r3, #12]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865) ;
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
 8003f5c:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8003f60:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8003f62:	2203      	movs	r2, #3
 8003f64:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8003f66:	4770      	bx	lr
 8003f68:	20000258 	.word	0x20000258

08003f6c <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8003f6c:	4800      	ldr	r0, [pc, #0]	; (8003f70 <LoraInfo_GetPtr+0x4>)
 8003f6e:	4770      	bx	lr
 8003f70:	20000258 	.word	0x20000258

08003f74 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8003f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f76:	b089      	sub	sp, #36	; 0x24
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
  /* should be calling BSP_RADIO_Init() but not supported by MX*/

  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003f78:	2400      	movs	r4, #0
 8003f7a:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f82:	f042 0204 	orr.w	r2, r2, #4
 8003f86:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f8a:	f002 0204 	and.w	r2, r2, #4
 8003f8e:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8003f90:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f94:	f042 0204 	orr.w	r2, r2, #4
 8003f98:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003fa2:	9b01      	ldr	r3, [sp, #4]
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL1_GPIO_CLK_ENABLE();
  RF_SW_CTRL2_GPIO_CLK_ENABLE();

  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003fa4:	2610      	movs	r6, #16
 8003fa6:	9603      	str	r6, [sp, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003fac:	9405      	str	r4, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003fb2:	4d0c      	ldr	r5, [pc, #48]	; (8003fe4 <RBI_Init+0x70>)
 8003fb4:	a903      	add	r1, sp, #12
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	f001 f83a 	bl	8005030 <HAL_GPIO_Init>
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003fbc:	2720      	movs	r7, #32
 8003fbe:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003fc0:	a903      	add	r1, sp, #12
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	f001 f834 	bl	8005030 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003fc8:	4622      	mov	r2, r4
 8003fca:	4639      	mov	r1, r7
 8003fcc:	4628      	mov	r0, r5
 8003fce:	f001 f963 	bl	8005298 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	4631      	mov	r1, r6
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	f001 f95e 	bl	8005298 <HAL_GPIO_WritePin>


  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8003fdc:	4620      	mov	r0, r4
 8003fde:	b009      	add	sp, #36	; 0x24
 8003fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	48000800 	.word	0x48000800

08003fe8 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8003fe8:	b510      	push	{r4, lr}
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
  switch (Config)
 8003fea:	2803      	cmp	r0, #3
 8003fec:	d80e      	bhi.n	800400c <RBI_ConfigRFSwitch+0x24>
 8003fee:	e8df f000 	tbb	[pc, r0]
 8003ff2:	0f02      	.short	0x0f02
 8003ff4:	271b      	.short	0x271b
  {
    case RBI_SWITCH_OFF:
    {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003ff6:	4c18      	ldr	r4, [pc, #96]	; (8004058 <RBI_ConfigRFSwitch+0x70>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2110      	movs	r1, #16
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f001 f94b 	bl	8005298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8004002:	2200      	movs	r2, #0
 8004004:	2120      	movs	r1, #32
 8004006:	4620      	mov	r0, r4
 8004008:	f001 f946 	bl	8005298 <HAL_GPIO_WritePin>
  }

  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800400c:	2000      	movs	r0, #0
 800400e:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8004010:	4c11      	ldr	r4, [pc, #68]	; (8004058 <RBI_ConfigRFSwitch+0x70>)
 8004012:	2201      	movs	r2, #1
 8004014:	2110      	movs	r1, #16
 8004016:	4620      	mov	r0, r4
 8004018:	f001 f93e 	bl	8005298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800401c:	2200      	movs	r2, #0
 800401e:	2120      	movs	r1, #32
 8004020:	4620      	mov	r0, r4
 8004022:	f001 f939 	bl	8005298 <HAL_GPIO_WritePin>
		break;
 8004026:	e7f1      	b.n	800400c <RBI_ConfigRFSwitch+0x24>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8004028:	4c0b      	ldr	r4, [pc, #44]	; (8004058 <RBI_ConfigRFSwitch+0x70>)
 800402a:	2201      	movs	r2, #1
 800402c:	2110      	movs	r1, #16
 800402e:	4620      	mov	r0, r4
 8004030:	f001 f932 	bl	8005298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8004034:	2201      	movs	r2, #1
 8004036:	2120      	movs	r1, #32
 8004038:	4620      	mov	r0, r4
 800403a:	f001 f92d 	bl	8005298 <HAL_GPIO_WritePin>
		break;
 800403e:	e7e5      	b.n	800400c <RBI_ConfigRFSwitch+0x24>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8004040:	4c05      	ldr	r4, [pc, #20]	; (8004058 <RBI_ConfigRFSwitch+0x70>)
 8004042:	2201      	movs	r2, #1
 8004044:	2110      	movs	r1, #16
 8004046:	4620      	mov	r0, r4
 8004048:	f001 f926 	bl	8005298 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800404c:	2201      	movs	r2, #1
 800404e:	2120      	movs	r1, #32
 8004050:	4620      	mov	r0, r4
 8004052:	f001 f921 	bl	8005298 <HAL_GPIO_WritePin>
		break;
 8004056:	e7d9      	b.n	800400c <RBI_ConfigRFSwitch+0x24>
 8004058:	48000800 	.word	0x48000800

0800405c <RBI_GetTxConfig>:
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800405c:	2001      	movs	r0, #1
 800405e:	4770      	bx	lr

08004060 <RBI_IsTCXO>:
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8004060:	2001      	movs	r0, #1
 8004062:	4770      	bx	lr

08004064 <RBI_IsDCDC>:
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8004064:	2001      	movs	r0, #1
 8004066:	4770      	bx	lr

08004068 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004068:	480d      	ldr	r0, [pc, #52]	; (80040a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800406a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800406c:	f000 f825 	bl	80040ba <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004070:	480c      	ldr	r0, [pc, #48]	; (80040a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004072:	490d      	ldr	r1, [pc, #52]	; (80040a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004074:	4a0d      	ldr	r2, [pc, #52]	; (80040ac <LoopForever+0xe>)
  movs r3, #0
 8004076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004078:	e002      	b.n	8004080 <LoopCopyDataInit>

0800407a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800407a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800407c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800407e:	3304      	adds	r3, #4

08004080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004084:	d3f9      	bcc.n	800407a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004086:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004088:	4c0a      	ldr	r4, [pc, #40]	; (80040b4 <LoopForever+0x16>)
  movs r3, #0
 800408a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800408c:	e001      	b.n	8004092 <LoopFillZerobss>

0800408e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800408e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004090:	3204      	adds	r2, #4

08004092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004094:	d3fb      	bcc.n	800408e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004096:	f00f fcb3 	bl	8013a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800409a:	f7ff f8bd 	bl	8003218 <main>

0800409e <LoopForever>:

LoopForever:
    b LoopForever
 800409e:	e7fe      	b.n	800409e <LoopForever>
  ldr   r0, =_estack
 80040a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80040a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040a8:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 80040ac:	08014820 	.word	0x08014820
  ldr r2, =_sbss
 80040b0:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 80040b4:	20001a58 	.word	0x20001a58

080040b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040b8:	e7fe      	b.n	80040b8 <ADC_IRQHandler>

080040ba <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80040ba:	4770      	bx	lr

080040bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040bc:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040be:	2003      	movs	r0, #3
 80040c0:	f000 fce6 	bl	8004a90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80040c4:	f001 fa84 	bl	80055d0 <HAL_RCC_GetHCLKFreq>
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_Init+0x28>)
 80040ca:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040cc:	200f      	movs	r0, #15
 80040ce:	f7ff fa85 	bl	80035dc <HAL_InitTick>
 80040d2:	b110      	cbz	r0, 80040da <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80040d4:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80040d6:	4620      	mov	r0, r4
 80040d8:	bd10      	pop	{r4, pc}
 80040da:	4604      	mov	r4, r0
    HAL_MspInit();
 80040dc:	f7ff f944 	bl	8003368 <HAL_MspInit>
 80040e0:	e7f9      	b.n	80040d6 <HAL_Init+0x1a>
 80040e2:	bf00      	nop
 80040e4:	2000004c 	.word	0x2000004c

080040e8 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80040e8:	4a02      	ldr	r2, [pc, #8]	; (80040f4 <HAL_SuspendTick+0xc>)
 80040ea:	6813      	ldr	r3, [r2, #0]
 80040ec:	f023 0302 	bic.w	r3, r3, #2
 80040f0:	6013      	str	r3, [r2, #0]
}
 80040f2:	4770      	bx	lr
 80040f4:	e000e010 	.word	0xe000e010

080040f8 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80040f8:	4a02      	ldr	r2, [pc, #8]	; (8004104 <HAL_ResumeTick+0xc>)
 80040fa:	6813      	ldr	r3, [r2, #0]
 80040fc:	f043 0302 	orr.w	r3, r3, #2
 8004100:	6013      	str	r3, [r2, #0]
}
 8004102:	4770      	bx	lr
 8004104:	e000e010 	.word	0xe000e010

08004108 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8004108:	4b01      	ldr	r3, [pc, #4]	; (8004110 <HAL_GetUIDw0+0x8>)
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	1fff7590 	.word	0x1fff7590

08004114 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8004114:	4b01      	ldr	r3, [pc, #4]	; (800411c <HAL_GetUIDw1+0x8>)
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	1fff7594 	.word	0x1fff7594

08004120 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8004120:	4b01      	ldr	r3, [pc, #4]	; (8004128 <HAL_GetUIDw2+0x8>)
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	1fff7598 	.word	0x1fff7598

0800412c <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800412c:	4a02      	ldr	r2, [pc, #8]	; (8004138 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800412e:	6853      	ldr	r3, [r2, #4]
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8004136:	4770      	bx	lr
 8004138:	e0042000 	.word	0xe0042000

0800413c <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800413c:	4a02      	ldr	r2, [pc, #8]	; (8004148 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 800413e:	6853      	ldr	r3, [r2, #4]
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8004146:	4770      	bx	lr
 8004148:	e0042000 	.word	0xe0042000

0800414c <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800414c:	4a02      	ldr	r2, [pc, #8]	; (8004158 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800414e:	6853      	ldr	r3, [r2, #4]
 8004150:	f043 0302 	orr.w	r3, r3, #2
 8004154:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8004156:	4770      	bx	lr
 8004158:	e0042000 	.word	0xe0042000

0800415c <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800415c:	4a02      	ldr	r2, [pc, #8]	; (8004168 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 800415e:	6853      	ldr	r3, [r2, #4]
 8004160:	f023 0302 	bic.w	r3, r3, #2
 8004164:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8004166:	4770      	bx	lr
 8004168:	e0042000 	.word	0xe0042000

0800416c <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800416c:	4a02      	ldr	r2, [pc, #8]	; (8004178 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 800416e:	6853      	ldr	r3, [r2, #4]
 8004170:	f043 0304 	orr.w	r3, r3, #4
 8004174:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8004176:	4770      	bx	lr
 8004178:	e0042000 	.word	0xe0042000

0800417c <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800417c:	4a02      	ldr	r2, [pc, #8]	; (8004188 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 800417e:	6853      	ldr	r3, [r2, #4]
 8004180:	f023 0304 	bic.w	r3, r3, #4
 8004184:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8004186:	4770      	bx	lr
 8004188:	e0042000 	.word	0xe0042000

0800418c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800418c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800418e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004190:	2300      	movs	r3, #0
 8004192:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8004194:	2800      	cmp	r0, #0
 8004196:	f000 8121 	beq.w	80043dc <HAL_ADC_Init+0x250>
 800419a:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800419c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800419e:	b1bb      	cbz	r3, 80041d0 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041a0:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041a2:	6893      	ldr	r3, [r2, #8]
 80041a4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80041a8:	d11f      	bne.n	80041ea <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 80041aa:	6893      	ldr	r3, [r2, #8]
 80041ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80041b0:	f023 0317 	bic.w	r3, r3, #23
 80041b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b8:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041ba:	4b89      	ldr	r3, [pc, #548]	; (80043e0 <HAL_ADC_Init+0x254>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	099b      	lsrs	r3, r3, #6
 80041c0:	4a88      	ldr	r2, [pc, #544]	; (80043e4 <HAL_ADC_Init+0x258>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	099b      	lsrs	r3, r3, #6
 80041c8:	3301      	adds	r3, #1
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80041ce:	e009      	b.n	80041e4 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 80041d0:	f7fe fee0 	bl	8002f94 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80041d4:	2300      	movs	r3, #0
 80041d6:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80041d8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80041dc:	e7e0      	b.n	80041a0 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80041de:	9b01      	ldr	r3, [sp, #4]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80041e4:	9b01      	ldr	r3, [sp, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f9      	bne.n	80041de <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041ea:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041ec:	6893      	ldr	r3, [r2, #8]
 80041ee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80041f2:	d109      	bne.n	8004208 <HAL_ADC_Init+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041f6:	f043 0310 	orr.w	r3, r3, #16
 80041fa:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004204:	2001      	movs	r0, #1
 8004206:	e000      	b.n	800420a <HAL_ADC_Init+0x7e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004208:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800420a:	6893      	ldr	r3, [r2, #8]
 800420c:	f013 0304 	ands.w	r3, r3, #4
 8004210:	d000      	beq.n	8004214 <HAL_ADC_Init+0x88>
 8004212:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004214:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004216:	f011 0f10 	tst.w	r1, #16
 800421a:	f040 80d8 	bne.w	80043ce <HAL_ADC_Init+0x242>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800421e:	2b00      	cmp	r3, #0
 8004220:	f040 80d5 	bne.w	80043ce <HAL_ADC_Init+0x242>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004224:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004226:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 800422a:	f041 0102 	orr.w	r1, r1, #2
 800422e:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004230:	6891      	ldr	r1, [r2, #8]
 8004232:	f011 0f01 	tst.w	r1, #1
 8004236:	d131      	bne.n	800429c <HAL_ADC_Init+0x110>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004238:	68d1      	ldr	r1, [r2, #12]
 800423a:	f021 0118 	bic.w	r1, r1, #24
 800423e:	68a5      	ldr	r5, [r4, #8]
 8004240:	4329      	orrs	r1, r5
 8004242:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004244:	6862      	ldr	r2, [r4, #4]
 8004246:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800424a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800424c:	4315      	orrs	r5, r2
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800424e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8004252:	2901      	cmp	r1, #1
 8004254:	d018      	beq.n	8004288 <HAL_ADC_Init+0xfc>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004256:	6821      	ldr	r1, [r4, #0]
 8004258:	690e      	ldr	r6, [r1, #16]
 800425a:	4a63      	ldr	r2, [pc, #396]	; (80043e8 <HAL_ADC_Init+0x25c>)
 800425c:	4032      	ands	r2, r6
 800425e:	432a      	orrs	r2, r5
 8004260:	610a      	str	r2, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004262:	6862      	ldr	r2, [r4, #4]
 8004264:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8004268:	d019      	beq.n	800429e <HAL_ADC_Init+0x112>
 800426a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800426e:	d016      	beq.n	800429e <HAL_ADC_Init+0x112>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004270:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004274:	d013      	beq.n	800429e <HAL_ADC_Init+0x112>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8004276:	4e5d      	ldr	r6, [pc, #372]	; (80043ec <HAL_ADC_Init+0x260>)
 8004278:	6831      	ldr	r1, [r6, #0]
 800427a:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 800427e:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8004282:	430a      	orrs	r2, r1
 8004284:	6032      	str	r2, [r6, #0]
 8004286:	e00a      	b.n	800429e <HAL_ADC_Init+0x112>
                     hadc->Init.Oversampling.Ratio         |
 8004288:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800428a:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 800428c:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800428e:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 8004290:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004292:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004294:	4315      	orrs	r5, r2
 8004296:	f045 0501 	orr.w	r5, r5, #1
 800429a:	e7dc      	b.n	8004256 <HAL_ADC_Init+0xca>
  uint32_t tmpCFGR2 = 0UL;
 800429c:	461d      	mov	r5, r3
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800429e:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80042a0:	7e62      	ldrb	r2, [r4, #25]
 80042a2:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80042a4:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80042a8:	7ea6      	ldrb	r6, [r4, #26]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80042aa:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80042ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80042b0:	b109      	cbz	r1, 80042b6 <HAL_ADC_Init+0x12a>
 80042b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80042b6:	430a      	orrs	r2, r1
                 hadc->Init.DataAlign                                           |
 80042b8:	68e1      	ldr	r1, [r4, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80042ba:	430a      	orrs	r2, r1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80042bc:	6921      	ldr	r1, [r4, #16]
 80042be:	2900      	cmp	r1, #0
 80042c0:	db47      	blt.n	8004352 <HAL_ADC_Init+0x1c6>
 80042c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 80042c6:	430a      	orrs	r2, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042c8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80042cc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042d0:	f894 1020 	ldrb.w	r1, [r4, #32]
 80042d4:	2901      	cmp	r1, #1
 80042d6:	d03f      	beq.n	8004358 <HAL_ADC_Init+0x1cc>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80042da:	b121      	cbz	r1, 80042e6 <HAL_ADC_Init+0x15a>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80042dc:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 80042e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80042e2:	4331      	orrs	r1, r6
 80042e4:	430a      	orrs	r2, r1
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80042e6:	6826      	ldr	r6, [r4, #0]
 80042e8:	68f1      	ldr	r1, [r6, #12]
 80042ea:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 80042ee:	f421 71f3 	bic.w	r1, r1, #486	; 0x1e6
 80042f2:	4311      	orrs	r1, r2
 80042f4:	60f1      	str	r1, [r6, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80042f6:	6826      	ldr	r6, [r4, #0]
 80042f8:	6937      	ldr	r7, [r6, #16]
 80042fa:	493d      	ldr	r1, [pc, #244]	; (80043f0 <HAL_ADC_Init+0x264>)
 80042fc:	4039      	ands	r1, r7
 80042fe:	430d      	orrs	r5, r1
 8004300:	6135      	str	r5, [r6, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004302:	6826      	ldr	r6, [r4, #0]
 8004304:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8004306:	6975      	ldr	r5, [r6, #20]
 8004308:	f025 0507 	bic.w	r5, r5, #7
 800430c:	4329      	orrs	r1, r5
 800430e:	6171      	str	r1, [r6, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004310:	6825      	ldr	r5, [r4, #0]
 8004312:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004314:	6969      	ldr	r1, [r5, #20]
 8004316:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800431a:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 800431e:	6169      	str	r1, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004320:	6921      	ldr	r1, [r4, #16]
 8004322:	bb31      	cbnz	r1, 8004372 <HAL_ADC_Init+0x1e6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004324:	6821      	ldr	r1, [r4, #0]
 8004326:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004328:	f063 030f 	orn	r3, r3, #15
 800432c:	628b      	str	r3, [r1, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	68d9      	ldr	r1, [r3, #12]
 8004332:	4b30      	ldr	r3, [pc, #192]	; (80043f4 <HAL_ADC_Init+0x268>)
 8004334:	400b      	ands	r3, r1
 8004336:	4293      	cmp	r3, r2
 8004338:	d040      	beq.n	80043bc <HAL_ADC_Init+0x230>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800433a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800433c:	f023 0312 	bic.w	r3, r3, #18
 8004340:	f043 0310 	orr.w	r3, r3, #16
 8004344:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004346:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800434e:	2001      	movs	r0, #1
 8004350:	e042      	b.n	80043d8 <HAL_ADC_Init+0x24c>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004352:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004356:	e7b6      	b.n	80042c6 <HAL_ADC_Init+0x13a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004358:	b916      	cbnz	r6, 8004360 <HAL_ADC_Init+0x1d4>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800435a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800435e:	e7bb      	b.n	80042d8 <HAL_ADC_Init+0x14c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004360:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004362:	f041 0120 	orr.w	r1, r1, #32
 8004366:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004368:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800436a:	f041 0101 	orr.w	r1, r1, #1
 800436e:	65e1      	str	r1, [r4, #92]	; 0x5c
 8004370:	e7b2      	b.n	80042d8 <HAL_ADC_Init+0x14c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004372:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004376:	d1da      	bne.n	800432e <HAL_ADC_Init+0x1a2>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8004378:	2b07      	cmp	r3, #7
 800437a:	d808      	bhi.n	800438e <HAL_ADC_Init+0x202>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800437c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800437e:	009d      	lsls	r5, r3, #2
 8004380:	40e9      	lsrs	r1, r5
 8004382:	f001 010f 	and.w	r1, r1, #15
 8004386:	290f      	cmp	r1, #15
 8004388:	d001      	beq.n	800438e <HAL_ADC_Init+0x202>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800438a:	3301      	adds	r3, #1
 800438c:	e7f4      	b.n	8004378 <HAL_ADC_Init+0x1ec>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800438e:	2b01      	cmp	r3, #1
 8004390:	d00e      	beq.n	80043b0 <HAL_ADC_Init+0x224>
        MODIFY_REG(hadc->Instance->CHSELR,
 8004392:	6825      	ldr	r5, [r4, #0]
 8004394:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004396:	69e3      	ldr	r3, [r4, #28]
 8004398:	3b01      	subs	r3, #1
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	f003 031c 	and.w	r3, r3, #28
 80043a0:	f06f 010f 	mvn.w	r1, #15
 80043a4:	fa01 f303 	lsl.w	r3, r1, r3
 80043a8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80043aa:	430b      	orrs	r3, r1
 80043ac:	62ab      	str	r3, [r5, #40]	; 0x28
 80043ae:	e7be      	b.n	800432e <HAL_ADC_Init+0x1a2>
        SET_BIT(hadc->Instance->CHSELR,
 80043b0:	6821      	ldr	r1, [r4, #0]
 80043b2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80043b4:	f063 030f 	orn	r3, r3, #15
 80043b8:	628b      	str	r3, [r1, #40]	; 0x28
 80043ba:	e7b8      	b.n	800432e <HAL_ADC_Init+0x1a2>
      ADC_CLEAR_ERRORCODE(hadc);
 80043bc:	2300      	movs	r3, #0
 80043be:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80043c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043c2:	f023 0303 	bic.w	r3, r3, #3
 80043c6:	f043 0301 	orr.w	r3, r3, #1
 80043ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80043cc:	e004      	b.n	80043d8 <HAL_ADC_Init+0x24c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043d0:	f043 0310 	orr.w	r3, r3, #16
 80043d4:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80043d6:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 80043d8:	b003      	add	sp, #12
 80043da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80043dc:	2001      	movs	r0, #1
 80043de:	e7fb      	b.n	80043d8 <HAL_ADC_Init+0x24c>
 80043e0:	2000004c 	.word	0x2000004c
 80043e4:	053e2d63 	.word	0x053e2d63
 80043e8:	1ffffc02 	.word	0x1ffffc02
 80043ec:	40012708 	.word	0x40012708
 80043f0:	dffffc02 	.word	0xdffffc02
 80043f4:	833fffe7 	.word	0x833fffe7

080043f8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fa:	4604      	mov	r4, r0
 80043fc:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80043fe:	6946      	ldr	r6, [r0, #20]
 8004400:	2e08      	cmp	r6, #8
 8004402:	d005      	beq.n	8004410 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004404:	6803      	ldr	r3, [r0, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f013 0f01 	tst.w	r3, #1
 800440c:	d11e      	bne.n	800444c <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800440e:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004410:	f7ff f8e6 	bl	80035e0 <HAL_GetTick>
 8004414:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4232      	tst	r2, r6
 800441c:	d11c      	bne.n	8004458 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004422:	d0f8      	beq.n	8004416 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004424:	f7ff f8dc 	bl	80035e0 <HAL_GetTick>
 8004428:	1bc3      	subs	r3, r0, r7
 800442a:	42ab      	cmp	r3, r5
 800442c:	d801      	bhi.n	8004432 <HAL_ADC_PollForConversion+0x3a>
 800442e:	2d00      	cmp	r5, #0
 8004430:	d1f1      	bne.n	8004416 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4233      	tst	r3, r6
 8004438:	d1ed      	bne.n	8004416 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800443a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800443c:	f043 0304 	orr.w	r3, r3, #4
 8004440:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8004442:	2300      	movs	r3, #0
 8004444:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8004448:	2003      	movs	r0, #3
 800444a:	e028      	b.n	800449e <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800444c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800444e:	f043 0320 	orr.w	r3, r3, #32
 8004452:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8004454:	2001      	movs	r0, #1
 8004456:	e022      	b.n	800449e <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004458:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800445a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445e:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004466:	d115      	bne.n	8004494 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004468:	7ea2      	ldrb	r2, [r4, #26]
 800446a:	b99a      	cbnz	r2, 8004494 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	f012 0f08 	tst.w	r2, #8
 8004472:	d00f      	beq.n	8004494 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	f012 0f04 	tst.w	r2, #4
 800447a:	d111      	bne.n	80044a0 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	f022 020c 	bic.w	r2, r2, #12
 8004482:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004484:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004486:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800448a:	f023 0301 	bic.w	r3, r3, #1
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004494:	7e20      	ldrb	r0, [r4, #24]
 8004496:	b960      	cbnz	r0, 80044b2 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	220c      	movs	r2, #12
 800449c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800449e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044a2:	f043 0320 	orr.w	r3, r3, #32
 80044a6:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	65e3      	str	r3, [r4, #92]	; 0x5c
 80044b0:	e7f0      	b.n	8004494 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 80044b2:	2000      	movs	r0, #0
 80044b4:	e7f3      	b.n	800449e <HAL_ADC_PollForConversion+0xa6>

080044b6 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80044b6:	6803      	ldr	r3, [r0, #0]
 80044b8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80044ba:	4770      	bx	lr

080044bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80044bc:	b470      	push	{r4, r5, r6}
 80044be:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80044c0:	2200      	movs	r2, #0
 80044c2:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80044c4:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80044c6:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80044ca:	2a01      	cmp	r2, #1
 80044cc:	f000 80ee 	beq.w	80046ac <HAL_ADC_ConfigChannel+0x1f0>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2201      	movs	r2, #1
 80044d4:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044d8:	6802      	ldr	r2, [r0, #0]
 80044da:	6890      	ldr	r0, [r2, #8]
 80044dc:	f010 0f04 	tst.w	r0, #4
 80044e0:	d00a      	beq.n	80044f8 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044e4:	f042 0220 	orr.w	r2, r2, #32
 80044e8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80044ea:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 80044f2:	b003      	add	sp, #12
 80044f4:	bc70      	pop	{r4, r5, r6}
 80044f6:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 80044f8:	6848      	ldr	r0, [r1, #4]
 80044fa:	2802      	cmp	r0, #2
 80044fc:	f000 8097 	beq.w	800462e <HAL_ADC_ConfigChannel+0x172>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004500:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004504:	d029      	beq.n	800455a <HAL_ADC_ConfigChannel+0x9e>
 8004506:	4d6a      	ldr	r5, [pc, #424]	; (80046b0 <HAL_ADC_ConfigChannel+0x1f4>)
 8004508:	42ac      	cmp	r4, r5
 800450a:	d026      	beq.n	800455a <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800450c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800450e:	f000 001f 	and.w	r0, r0, #31
 8004512:	250f      	movs	r5, #15
 8004514:	4085      	lsls	r5, r0
 8004516:	ea24 0505 	bic.w	r5, r4, r5
 800451a:	680c      	ldr	r4, [r1, #0]
 800451c:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8004520:	2e00      	cmp	r6, #0
 8004522:	d133      	bne.n	800458c <HAL_ADC_ConfigChannel+0xd0>
 8004524:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8004528:	fa04 f000 	lsl.w	r0, r4, r0
 800452c:	4328      	orrs	r0, r5
 800452e:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004530:	684c      	ldr	r4, [r1, #4]
 8004532:	08a0      	lsrs	r0, r4, #2
 8004534:	3001      	adds	r0, #1
 8004536:	69dd      	ldr	r5, [r3, #28]
 8004538:	42a8      	cmp	r0, r5
 800453a:	d814      	bhi.n	8004566 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800453c:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 800453e:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004540:	f004 041f 	and.w	r4, r4, #31
 8004544:	260f      	movs	r6, #15
 8004546:	40a6      	lsls	r6, r4
 8004548:	ea20 0006 	bic.w	r0, r0, r6
 800454c:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8004550:	fa05 f404 	lsl.w	r4, r5, r4
 8004554:	4304      	orrs	r4, r0
 8004556:	6294      	str	r4, [r2, #40]	; 0x28
}
 8004558:	e005      	b.n	8004566 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800455a:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800455c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800455e:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8004562:	4320      	orrs	r0, r4
 8004564:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004566:	681d      	ldr	r5, [r3, #0]
 8004568:	680e      	ldr	r6, [r1, #0]
 800456a:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 800456c:	696c      	ldr	r4, [r5, #20]
 800456e:	ea24 2406 	bic.w	r4, r4, r6, lsl #8
 8004572:	ea00 2206 	and.w	r2, r0, r6, lsl #8
 8004576:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 800457a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800457e:	4322      	orrs	r2, r4
 8004580:	616a      	str	r2, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004582:	680a      	ldr	r2, [r1, #0]
 8004584:	2a00      	cmp	r2, #0
 8004586:	db09      	blt.n	800459c <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004588:	2000      	movs	r0, #0
 800458a:	e7af      	b.n	80044ec <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458c:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004590:	b114      	cbz	r4, 8004598 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004592:	fab4 f484 	clz	r4, r4
 8004596:	e7c7      	b.n	8004528 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8004598:	2420      	movs	r4, #32
 800459a:	e7c5      	b.n	8004528 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800459c:	4945      	ldr	r1, [pc, #276]	; (80046b4 <HAL_ADC_ConfigChannel+0x1f8>)
 800459e:	6808      	ldr	r0, [r1, #0]
 80045a0:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045a4:	4c44      	ldr	r4, [pc, #272]	; (80046b8 <HAL_ADC_ConfigChannel+0x1fc>)
 80045a6:	42a2      	cmp	r2, r4
 80045a8:	d007      	beq.n	80045ba <HAL_ADC_ConfigChannel+0xfe>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045aa:	4c44      	ldr	r4, [pc, #272]	; (80046bc <HAL_ADC_ConfigChannel+0x200>)
 80045ac:	42a2      	cmp	r2, r4
 80045ae:	d024      	beq.n	80045fa <HAL_ADC_ConfigChannel+0x13e>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80045b0:	4c43      	ldr	r4, [pc, #268]	; (80046c0 <HAL_ADC_ConfigChannel+0x204>)
 80045b2:	42a2      	cmp	r2, r4
 80045b4:	d02e      	beq.n	8004614 <HAL_ADC_ConfigChannel+0x158>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045b6:	2000      	movs	r0, #0
 80045b8:	e798      	b.n	80044ec <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045ba:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80045be:	d1f4      	bne.n	80045aa <HAL_ADC_ConfigChannel+0xee>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045c0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80045c4:	483b      	ldr	r0, [pc, #236]	; (80046b4 <HAL_ADC_ConfigChannel+0x1f8>)
 80045c6:	6802      	ldr	r2, [r0, #0]
 80045c8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80045cc:	4311      	orrs	r1, r2
 80045ce:	6001      	str	r1, [r0, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045d0:	4a3c      	ldr	r2, [pc, #240]	; (80046c4 <HAL_ADC_ConfigChannel+0x208>)
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	0992      	lsrs	r2, r2, #6
 80045d6:	493c      	ldr	r1, [pc, #240]	; (80046c8 <HAL_ADC_ConfigChannel+0x20c>)
 80045d8:	fba1 1202 	umull	r1, r2, r1, r2
 80045dc:	0992      	lsrs	r2, r2, #6
 80045de:	3201      	adds	r2, #1
 80045e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80045e4:	0092      	lsls	r2, r2, #2
 80045e6:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80045e8:	e002      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x134>
            wait_loop_index--;
 80045ea:	9a01      	ldr	r2, [sp, #4]
 80045ec:	3a01      	subs	r2, #1
 80045ee:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80045f0:	9a01      	ldr	r2, [sp, #4]
 80045f2:	2a00      	cmp	r2, #0
 80045f4:	d1f9      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x12e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f6:	2000      	movs	r0, #0
 80045f8:	e778      	b.n	80044ec <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045fa:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80045fe:	d1d7      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0xf4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004600:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8004604:	482b      	ldr	r0, [pc, #172]	; (80046b4 <HAL_ADC_ConfigChannel+0x1f8>)
 8004606:	6802      	ldr	r2, [r0, #0]
 8004608:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800460c:	4311      	orrs	r1, r2
 800460e:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004610:	2000      	movs	r0, #0
}
 8004612:	e76b      	b.n	80044ec <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004614:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8004618:	d146      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x1ec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800461a:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800461e:	4825      	ldr	r0, [pc, #148]	; (80046b4 <HAL_ADC_ConfigChannel+0x1f8>)
 8004620:	6801      	ldr	r1, [r0, #0]
 8004622:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004626:	430a      	orrs	r2, r1
 8004628:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800462a:	2000      	movs	r0, #0
}
 800462c:	e75e      	b.n	80044ec <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800462e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004632:	d002      	beq.n	800463a <HAL_ADC_ConfigChannel+0x17e>
 8004634:	481e      	ldr	r0, [pc, #120]	; (80046b0 <HAL_ADC_ConfigChannel+0x1f4>)
 8004636:	4284      	cmp	r4, r0
 8004638:	d106      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x18c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800463a:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800463c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800463e:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8004642:	ea20 0004 	bic.w	r0, r0, r4
 8004646:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004648:	680a      	ldr	r2, [r1, #0]
 800464a:	2a00      	cmp	r2, #0
 800464c:	db01      	blt.n	8004652 <HAL_ADC_ConfigChannel+0x196>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800464e:	2000      	movs	r0, #0
 8004650:	e74c      	b.n	80044ec <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004652:	4918      	ldr	r1, [pc, #96]	; (80046b4 <HAL_ADC_ConfigChannel+0x1f8>)
 8004654:	6809      	ldr	r1, [r1, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004656:	4818      	ldr	r0, [pc, #96]	; (80046b8 <HAL_ADC_ConfigChannel+0x1fc>)
 8004658:	4282      	cmp	r2, r0
 800465a:	d007      	beq.n	800466c <HAL_ADC_ConfigChannel+0x1b0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800465c:	4817      	ldr	r0, [pc, #92]	; (80046bc <HAL_ADC_ConfigChannel+0x200>)
 800465e:	4282      	cmp	r2, r0
 8004660:	d00e      	beq.n	8004680 <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004662:	4817      	ldr	r0, [pc, #92]	; (80046c0 <HAL_ADC_ConfigChannel+0x204>)
 8004664:	4282      	cmp	r2, r0
 8004666:	d015      	beq.n	8004694 <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004668:	2000      	movs	r0, #0
 800466a:	e73f      	b.n	80044ec <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800466c:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004670:	4810      	ldr	r0, [pc, #64]	; (80046b4 <HAL_ADC_ConfigChannel+0x1f8>)
 8004672:	6802      	ldr	r2, [r0, #0]
 8004674:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004678:	4311      	orrs	r1, r2
 800467a:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800467c:	2000      	movs	r0, #0
}
 800467e:	e735      	b.n	80044ec <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004680:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004684:	480b      	ldr	r0, [pc, #44]	; (80046b4 <HAL_ADC_ConfigChannel+0x1f8>)
 8004686:	6801      	ldr	r1, [r0, #0]
 8004688:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800468c:	430a      	orrs	r2, r1
 800468e:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004690:	2000      	movs	r0, #0
}
 8004692:	e72b      	b.n	80044ec <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004694:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004698:	4806      	ldr	r0, [pc, #24]	; (80046b4 <HAL_ADC_ConfigChannel+0x1f8>)
 800469a:	6801      	ldr	r1, [r0, #0]
 800469c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80046a0:	430a      	orrs	r2, r1
 80046a2:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046a4:	2000      	movs	r0, #0
}
 80046a6:	e721      	b.n	80044ec <HAL_ADC_ConfigChannel+0x30>
 80046a8:	2000      	movs	r0, #0
 80046aa:	e71f      	b.n	80044ec <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80046ac:	2002      	movs	r0, #2
 80046ae:	e720      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x36>
 80046b0:	80000004 	.word	0x80000004
 80046b4:	40012708 	.word	0x40012708
 80046b8:	b0001000 	.word	0xb0001000
 80046bc:	b8004000 	.word	0xb8004000
 80046c0:	b4002000 	.word	0xb4002000
 80046c4:	2000004c 	.word	0x2000004c
 80046c8:	053e2d63 	.word	0x053e2d63

080046cc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80046cc:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80046ce:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	f012 0f04 	tst.w	r2, #4
 80046d6:	d02a      	beq.n	800472e <ADC_ConversionStop+0x62>
 80046d8:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	f012 0f02 	tst.w	r2, #2
 80046e0:	d107      	bne.n	80046f2 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046e8:	f022 0217 	bic.w	r2, r2, #23
 80046ec:	f042 0210 	orr.w	r2, r2, #16
 80046f0:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046f2:	f7fe ff75 	bl	80035e0 <HAL_GetTick>
 80046f6:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f013 0f04 	tst.w	r3, #4
 8004700:	d013      	beq.n	800472a <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004702:	f7fe ff6d 	bl	80035e0 <HAL_GetTick>
 8004706:	1b43      	subs	r3, r0, r5
 8004708:	2b02      	cmp	r3, #2
 800470a:	d9f5      	bls.n	80046f8 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f013 0f04 	tst.w	r3, #4
 8004714:	d0f0      	beq.n	80046f8 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004716:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004718:	f043 0310 	orr.w	r3, r3, #16
 800471c:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800471e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8004726:	2001      	movs	r0, #1
 8004728:	e002      	b.n	8004730 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800472a:	2000      	movs	r0, #0
 800472c:	e000      	b.n	8004730 <ADC_ConversionStop+0x64>
 800472e:	2000      	movs	r0, #0
}
 8004730:	bd38      	pop	{r3, r4, r5, pc}
	...

08004734 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004734:	b530      	push	{r4, r5, lr}
 8004736:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004738:	2300      	movs	r3, #0
 800473a:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800473c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	f012 0f01 	tst.w	r2, #1
 8004744:	d159      	bne.n	80047fa <ADC_Enable+0xc6>
 8004746:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004748:	6899      	ldr	r1, [r3, #8]
 800474a:	4a2d      	ldr	r2, [pc, #180]	; (8004800 <ADC_Enable+0xcc>)
 800474c:	4211      	tst	r1, r2
 800474e:	d11b      	bne.n	8004788 <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004756:	f022 0217 	bic.w	r2, r2, #23
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004760:	4b28      	ldr	r3, [pc, #160]	; (8004804 <ADC_Enable+0xd0>)
 8004762:	681b      	ldr	r3, [r3, #0]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004764:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004768:	d018      	beq.n	800479c <ADC_Enable+0x68>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800476a:	4b27      	ldr	r3, [pc, #156]	; (8004808 <ADC_Enable+0xd4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	099b      	lsrs	r3, r3, #6
 8004770:	4a26      	ldr	r2, [pc, #152]	; (800480c <ADC_Enable+0xd8>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	099b      	lsrs	r3, r3, #6
 8004778:	3301      	adds	r3, #1
 800477a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800477c:	9b01      	ldr	r3, [sp, #4]
 800477e:	b16b      	cbz	r3, 800479c <ADC_Enable+0x68>
      {
        wait_loop_index--;
 8004780:	9b01      	ldr	r3, [sp, #4]
 8004782:	3b01      	subs	r3, #1
 8004784:	9301      	str	r3, [sp, #4]
 8004786:	e7f9      	b.n	800477c <ADC_Enable+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004788:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800478a:	f043 0310 	orr.w	r3, r3, #16
 800478e:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004790:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8004798:	2001      	movs	r0, #1
 800479a:	e02f      	b.n	80047fc <ADC_Enable+0xc8>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800479c:	7e63      	ldrb	r3, [r4, #25]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <ADC_Enable+0x72>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047a2:	2000      	movs	r0, #0
 80047a4:	e02a      	b.n	80047fc <ADC_Enable+0xc8>
      tickstart = HAL_GetTick();
 80047a6:	f7fe ff1b 	bl	80035e0 <HAL_GetTick>
 80047aa:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	f012 0f01 	tst.w	r2, #1
 80047b4:	d11f      	bne.n	80047f6 <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	f012 0f01 	tst.w	r2, #1
 80047bc:	d107      	bne.n	80047ce <ADC_Enable+0x9a>
  MODIFY_REG(ADCx->CR,
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047c4:	f022 0217 	bic.w	r2, r2, #23
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047ce:	f7fe ff07 	bl	80035e0 <HAL_GetTick>
 80047d2:	1b40      	subs	r0, r0, r5
 80047d4:	2802      	cmp	r0, #2
 80047d6:	d9e9      	bls.n	80047ac <ADC_Enable+0x78>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f013 0f01 	tst.w	r3, #1
 80047e0:	d1e4      	bne.n	80047ac <ADC_Enable+0x78>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047e4:	f043 0310 	orr.w	r3, r3, #16
 80047e8:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80047f2:	2001      	movs	r0, #1
 80047f4:	e002      	b.n	80047fc <ADC_Enable+0xc8>
  return HAL_OK;
 80047f6:	2000      	movs	r0, #0
 80047f8:	e000      	b.n	80047fc <ADC_Enable+0xc8>
 80047fa:	2000      	movs	r0, #0
}
 80047fc:	b003      	add	sp, #12
 80047fe:	bd30      	pop	{r4, r5, pc}
 8004800:	80000017 	.word	0x80000017
 8004804:	40012708 	.word	0x40012708
 8004808:	2000004c 	.word	0x2000004c
 800480c:	053e2d63 	.word	0x053e2d63

08004810 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004810:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f013 0f04 	tst.w	r3, #4
 8004818:	d128      	bne.n	800486c <HAL_ADC_Start+0x5c>
{
 800481a:	b510      	push	{r4, lr}
 800481c:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800481e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8004822:	2b01      	cmp	r3, #1
 8004824:	d024      	beq.n	8004870 <HAL_ADC_Start+0x60>
 8004826:	2301      	movs	r3, #1
 8004828:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 800482c:	f7ff ff82 	bl	8004734 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004830:	b9c0      	cbnz	r0, 8004864 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8004832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004834:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004840:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8004842:	2300      	movs	r3, #0
 8004844:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	211c      	movs	r1, #28
 800484a:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 800484c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004850:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004852:	6893      	ldr	r3, [r2, #8]
 8004854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004858:	f023 0317 	bic.w	r3, r3, #23
 800485c:	f043 0304 	orr.w	r3, r3, #4
 8004860:	6093      	str	r3, [r2, #8]
}
 8004862:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8004864:	2300      	movs	r3, #0
 8004866:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800486a:	e7fa      	b.n	8004862 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 800486c:	2002      	movs	r0, #2
}
 800486e:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8004870:	2002      	movs	r0, #2
 8004872:	e7f6      	b.n	8004862 <HAL_ADC_Start+0x52>

08004874 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004878:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800487a:	6893      	ldr	r3, [r2, #8]
 800487c:	f013 0302 	ands.w	r3, r3, #2
 8004880:	d000      	beq.n	8004884 <ADC_Disable+0x10>
 8004882:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004884:	6891      	ldr	r1, [r2, #8]
 8004886:	f011 0f01 	tst.w	r1, #1
 800488a:	d039      	beq.n	8004900 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 800488c:	2b00      	cmp	r3, #0
 800488e:	d139      	bne.n	8004904 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004890:	6893      	ldr	r3, [r2, #8]
 8004892:	f003 0305 	and.w	r3, r3, #5
 8004896:	2b01      	cmp	r3, #1
 8004898:	d009      	beq.n	80048ae <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800489a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800489c:	f043 0310 	orr.w	r3, r3, #16
 80048a0:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 80048aa:	2001      	movs	r0, #1
 80048ac:	e029      	b.n	8004902 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80048ae:	6893      	ldr	r3, [r2, #8]
 80048b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048b4:	f023 0317 	bic.w	r3, r3, #23
 80048b8:	f043 0302 	orr.w	r3, r3, #2
 80048bc:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	2203      	movs	r2, #3
 80048c2:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048c4:	f7fe fe8c 	bl	80035e0 <HAL_GetTick>
 80048c8:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f013 0f01 	tst.w	r3, #1
 80048d2:	d013      	beq.n	80048fc <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048d4:	f7fe fe84 	bl	80035e0 <HAL_GetTick>
 80048d8:	1b40      	subs	r0, r0, r5
 80048da:	2802      	cmp	r0, #2
 80048dc:	d9f5      	bls.n	80048ca <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f013 0f01 	tst.w	r3, #1
 80048e6:	d0f0      	beq.n	80048ca <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048ea:	f043 0310 	orr.w	r3, r3, #16
 80048ee:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80048f8:	2001      	movs	r0, #1
 80048fa:	e002      	b.n	8004902 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048fc:	2000      	movs	r0, #0
 80048fe:	e000      	b.n	8004902 <ADC_Disable+0x8e>
 8004900:	2000      	movs	r0, #0
}
 8004902:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004904:	2000      	movs	r0, #0
 8004906:	e7fc      	b.n	8004902 <ADC_Disable+0x8e>

08004908 <HAL_ADC_DeInit>:
{
 8004908:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 800490a:	2800      	cmp	r0, #0
 800490c:	d04a      	beq.n	80049a4 <HAL_ADC_DeInit+0x9c>
 800490e:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004910:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004912:	f043 0302 	orr.w	r3, r3, #2
 8004916:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004918:	f7ff fed8 	bl	80046cc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800491c:	4606      	mov	r6, r0
 800491e:	2800      	cmp	r0, #0
 8004920:	d031      	beq.n	8004986 <HAL_ADC_DeInit+0x7e>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	6853      	ldr	r3, [r2, #4]
 8004926:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 800492a:	f023 0303 	bic.w	r3, r3, #3
 800492e:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	f240 329f 	movw	r2, #927	; 0x39f
 8004936:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004938:	6822      	ldr	r2, [r4, #0]
 800493a:	68d1      	ldr	r1, [r2, #12]
 800493c:	4b1a      	ldr	r3, [pc, #104]	; (80049a8 <HAL_ADC_DeInit+0xa0>)
 800493e:	400b      	ands	r3, r1
 8004940:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	6913      	ldr	r3, [r2, #16]
 8004946:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800494a:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800494c:	6822      	ldr	r2, [r4, #0]
 800494e:	6953      	ldr	r3, [r2, #20]
 8004950:	f023 0307 	bic.w	r3, r3, #7
 8004954:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	6a13      	ldr	r3, [r2, #32]
 800495a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800495e:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004964:	2500      	movs	r5, #0
 8004966:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8004968:	4a10      	ldr	r2, [pc, #64]	; (80049ac <HAL_ADC_DeInit+0xa4>)
 800496a:	6813      	ldr	r3, [r2, #0]
 800496c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004970:	6013      	str	r3, [r2, #0]
  HAL_ADC_MspDeInit(hadc);
 8004972:	4620      	mov	r0, r4
 8004974:	f7fe fb24 	bl	8002fc0 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004978:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 800497a:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 800497c:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 800497e:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8004982:	4630      	mov	r0, r6
 8004984:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8004986:	4620      	mov	r0, r4
 8004988:	f7ff ff74 	bl	8004874 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800498c:	4606      	mov	r6, r0
 800498e:	b908      	cbnz	r0, 8004994 <HAL_ADC_DeInit+0x8c>
      hadc->State = HAL_ADC_STATE_READY;
 8004990:	2301      	movs	r3, #1
 8004992:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8004994:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8004996:	6893      	ldr	r3, [r2, #8]
 8004998:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800499c:	f023 0317 	bic.w	r3, r3, #23
 80049a0:	6093      	str	r3, [r2, #8]
}
 80049a2:	e7be      	b.n	8004922 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 80049a4:	2601      	movs	r6, #1
 80049a6:	e7ec      	b.n	8004982 <HAL_ADC_DeInit+0x7a>
 80049a8:	833e0200 	.word	0x833e0200
 80049ac:	40012708 	.word	0x40012708

080049b0 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80049b0:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d019      	beq.n	80049ec <HAL_ADC_Stop+0x3c>
{
 80049b8:	b510      	push	{r4, lr}
 80049ba:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80049bc:	2301      	movs	r3, #1
 80049be:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80049c2:	f7ff fe83 	bl	80046cc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80049c6:	b118      	cbz	r0, 80049d0 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80049c8:	2300      	movs	r3, #0
 80049ca:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 80049ce:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80049d0:	4620      	mov	r0, r4
 80049d2:	f7ff ff4f 	bl	8004874 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80049d6:	2800      	cmp	r0, #0
 80049d8:	d1f6      	bne.n	80049c8 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80049da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80049ea:	e7ed      	b.n	80049c8 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80049ec:	2002      	movs	r0, #2
}
 80049ee:	4770      	bx	lr

080049f0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80049f0:	b530      	push	{r4, r5, lr}
 80049f2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	9301      	str	r3, [sp, #4]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80049f8:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d045      	beq.n	8004a8c <HAL_ADCEx_Calibration_Start+0x9c>
 8004a00:	4604      	mov	r4, r0
 8004a02:	2301      	movs	r3, #1
 8004a04:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004a08:	f7ff ff34 	bl	8004874 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a0c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	f012 0f01 	tst.w	r2, #1
 8004a14:	d008      	beq.n	8004a28 <HAL_ADCEx_Calibration_Start+0x38>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a18:	f043 0310 	orr.w	r3, r3, #16
 8004a1c:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8004a24:	b003      	add	sp, #12
 8004a26:	bd30      	pop	{r4, r5, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8004a28:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004a2a:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8004a2e:	f042 0202 	orr.w	r2, r2, #2
 8004a32:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004a34:	68dd      	ldr	r5, [r3, #12]
 8004a36:	f005 0503 	and.w	r5, r5, #3
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	f022 0203 	bic.w	r2, r2, #3
 8004a40:	60da      	str	r2, [r3, #12]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8004a42:	6821      	ldr	r1, [r4, #0]
 8004a44:	688b      	ldr	r3, [r1, #8]
 8004a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a4a:	608b      	str	r3, [r1, #8]
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a4c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004a4e:	6899      	ldr	r1, [r3, #8]
 8004a50:	2900      	cmp	r1, #0
 8004a52:	db09      	blt.n	8004a68 <HAL_ADCEx_Calibration_Start+0x78>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	432a      	orrs	r2, r5
 8004a58:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004a5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a5c:	f023 0303 	bic.w	r3, r3, #3
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a66:	e7da      	b.n	8004a1e <HAL_ADCEx_Calibration_Start+0x2e>
      wait_loop_index++;
 8004a68:	9b01      	ldr	r3, [sp, #4]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004a6e:	9b01      	ldr	r3, [sp, #4]
 8004a70:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004a74:	d3ea      	bcc.n	8004a4c <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8004a76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a78:	f023 0312 	bic.w	r3, r3, #18
 8004a7c:	f043 0310 	orr.w	r3, r3, #16
 8004a80:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 8004a82:	2300      	movs	r3, #0
 8004a84:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8004a88:	2001      	movs	r0, #1
 8004a8a:	e7cb      	b.n	8004a24 <HAL_ADCEx_Calibration_Start+0x34>
  __HAL_LOCK(hadc);
 8004a8c:	2002      	movs	r0, #2
 8004a8e:	e7c9      	b.n	8004a24 <HAL_ADCEx_Calibration_Start+0x34>

08004a90 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a90:	4a07      	ldr	r2, [pc, #28]	; (8004ab0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004a92:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a9c:	0200      	lsls	r0, r0, #8
 8004a9e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aa2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004aac:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004aae:	4770      	bx	lr
 8004ab0:	e000ed00 	.word	0xe000ed00

08004ab4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ab4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ab6:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <HAL_NVIC_SetPriority+0x60>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004abe:	f1c3 0407 	rsb	r4, r3, #7
 8004ac2:	2c04      	cmp	r4, #4
 8004ac4:	bf28      	it	cs
 8004ac6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ac8:	1d1d      	adds	r5, r3, #4
 8004aca:	2d06      	cmp	r5, #6
 8004acc:	d918      	bls.n	8004b00 <HAL_NVIC_SetPriority+0x4c>
 8004ace:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ad4:	fa05 f404 	lsl.w	r4, r5, r4
 8004ad8:	ea21 0104 	bic.w	r1, r1, r4
 8004adc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ade:	fa05 f303 	lsl.w	r3, r5, r3
 8004ae2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	db0b      	blt.n	8004b04 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aec:	0109      	lsls	r1, r1, #4
 8004aee:	b2c9      	uxtb	r1, r1
 8004af0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004af4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004af8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004afc:	bc30      	pop	{r4, r5}
 8004afe:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b00:	2300      	movs	r3, #0
 8004b02:	e7e5      	b.n	8004ad0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b04:	f000 000f 	and.w	r0, r0, #15
 8004b08:	0109      	lsls	r1, r1, #4
 8004b0a:	b2c9      	uxtb	r1, r1
 8004b0c:	4b02      	ldr	r3, [pc, #8]	; (8004b18 <HAL_NVIC_SetPriority+0x64>)
 8004b0e:	5419      	strb	r1, [r3, r0]
 8004b10:	e7f4      	b.n	8004afc <HAL_NVIC_SetPriority+0x48>
 8004b12:	bf00      	nop
 8004b14:	e000ed00 	.word	0xe000ed00
 8004b18:	e000ed14 	.word	0xe000ed14

08004b1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	db07      	blt.n	8004b30 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b20:	f000 021f 	and.w	r2, r0, #31
 8004b24:	0940      	lsrs	r0, r0, #5
 8004b26:	2301      	movs	r3, #1
 8004b28:	4093      	lsls	r3, r2
 8004b2a:	4a02      	ldr	r2, [pc, #8]	; (8004b34 <HAL_NVIC_EnableIRQ+0x18>)
 8004b2c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	e000e100 	.word	0xe000e100

08004b38 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	db0c      	blt.n	8004b56 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b3c:	f000 021f 	and.w	r2, r0, #31
 8004b40:	0940      	lsrs	r0, r0, #5
 8004b42:	2301      	movs	r3, #1
 8004b44:	4093      	lsls	r3, r2
 8004b46:	3020      	adds	r0, #32
 8004b48:	4a03      	ldr	r2, [pc, #12]	; (8004b58 <HAL_NVIC_DisableIRQ+0x20>)
 8004b4a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b52:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004b56:	4770      	bx	lr
 8004b58:	e000e100 	.word	0xe000e100

08004b5c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b5c:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b5e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8004b60:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8004b62:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b64:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8004b66:	b114      	cbz	r4, 8004b6e <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b68:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8004b6a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004b6c:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b6e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004b70:	f004 051c 	and.w	r5, r4, #28
 8004b74:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8004b76:	2401      	movs	r4, #1
 8004b78:	40ac      	lsls	r4, r5
 8004b7a:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b7c:	6804      	ldr	r4, [r0, #0]
 8004b7e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b80:	6883      	ldr	r3, [r0, #8]
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d005      	beq.n	8004b92 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004b86:	6803      	ldr	r3, [r0, #0]
 8004b88:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004b8a:	6803      	ldr	r3, [r0, #0]
 8004b8c:	60da      	str	r2, [r3, #12]
  }
}
 8004b8e:	bc70      	pop	{r4, r5, r6}
 8004b90:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8004b92:	6803      	ldr	r3, [r0, #0]
 8004b94:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004b96:	6803      	ldr	r3, [r0, #0]
 8004b98:	60d9      	str	r1, [r3, #12]
 8004b9a:	e7f8      	b.n	8004b8e <DMA_SetConfig+0x32>

08004b9c <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b9c:	6803      	ldr	r3, [r0, #0]
 8004b9e:	4a14      	ldr	r2, [pc, #80]	; (8004bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d816      	bhi.n	8004bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004ba4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004ba6:	f022 0203 	bic.w	r2, r2, #3
 8004baa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004bae:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8004bb2:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	3b08      	subs	r3, #8
 8004bb8:	4a0e      	ldr	r2, [pc, #56]	; (8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004bc0:	4a0d      	ldr	r2, [pc, #52]	; (8004bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8004bc2:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	2201      	movs	r2, #1
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004bd0:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004bd2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004bd4:	f022 0103 	bic.w	r1, r2, #3
 8004bd8:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8004bda:	440a      	add	r2, r1
 8004bdc:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	3b08      	subs	r3, #8
 8004be2:	4a04      	ldr	r2, [pc, #16]	; (8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004be4:	fba2 2303 	umull	r2, r3, r2, r3
 8004be8:	091b      	lsrs	r3, r3, #4
 8004bea:	3307      	adds	r3, #7
 8004bec:	e7e8      	b.n	8004bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8004bee:	bf00      	nop
 8004bf0:	40020407 	.word	0x40020407
 8004bf4:	cccccccd 	.word	0xcccccccd
 8004bf8:	40020880 	.word	0x40020880
 8004bfc:	4002081c 	.word	0x4002081c

08004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c00:	6843      	ldr	r3, [r0, #4]
 8004c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c06:	4a07      	ldr	r2, [pc, #28]	; (8004c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004c08:	441a      	add	r2, r3
 8004c0a:	0092      	lsls	r2, r2, #2
 8004c0c:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c0e:	4a06      	ldr	r2, [pc, #24]	; (8004c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8004c10:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004c12:	3b01      	subs	r3, #1
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	2201      	movs	r2, #1
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	1000823f 	.word	0x1000823f
 8004c28:	40020940 	.word	0x40020940

08004c2c <HAL_DMA_Init>:
  if (hdma == NULL)
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	d060      	beq.n	8004cf2 <HAL_DMA_Init+0xc6>
{
 8004c30:	b510      	push	{r4, lr}
 8004c32:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c34:	6802      	ldr	r2, [r0, #0]
 8004c36:	4b30      	ldr	r3, [pc, #192]	; (8004cf8 <HAL_DMA_Init+0xcc>)
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d842      	bhi.n	8004cc2 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c3c:	4b2f      	ldr	r3, [pc, #188]	; (8004cfc <HAL_DMA_Init+0xd0>)
 8004c3e:	4413      	add	r3, r2
 8004c40:	492f      	ldr	r1, [pc, #188]	; (8004d00 <HAL_DMA_Init+0xd4>)
 8004c42:	fba1 1303 	umull	r1, r3, r1, r3
 8004c46:	091b      	lsrs	r3, r3, #4
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004c4c:	4b2d      	ldr	r3, [pc, #180]	; (8004d04 <HAL_DMA_Init+0xd8>)
 8004c4e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c50:	2302      	movs	r3, #2
 8004c52:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004c56:	6813      	ldr	r3, [r2, #0]
 8004c58:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c60:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004c62:	6821      	ldr	r1, [r4, #0]
 8004c64:	680a      	ldr	r2, [r1, #0]
 8004c66:	68a3      	ldr	r3, [r4, #8]
 8004c68:	68e0      	ldr	r0, [r4, #12]
 8004c6a:	4303      	orrs	r3, r0
 8004c6c:	6920      	ldr	r0, [r4, #16]
 8004c6e:	4303      	orrs	r3, r0
 8004c70:	6960      	ldr	r0, [r4, #20]
 8004c72:	4303      	orrs	r3, r0
 8004c74:	69a0      	ldr	r0, [r4, #24]
 8004c76:	4303      	orrs	r3, r0
 8004c78:	69e0      	ldr	r0, [r4, #28]
 8004c7a:	4303      	orrs	r3, r0
 8004c7c:	6a20      	ldr	r0, [r4, #32]
 8004c7e:	4303      	orrs	r3, r0
 8004c80:	4313      	orrs	r3, r2
 8004c82:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c84:	4620      	mov	r0, r4
 8004c86:	f7ff ff89 	bl	8004b9c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c8a:	68a3      	ldr	r3, [r4, #8]
 8004c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c90:	d022      	beq.n	8004cd8 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c92:	6863      	ldr	r3, [r4, #4]
 8004c94:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c9c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004c9e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004ca0:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ca2:	6863      	ldr	r3, [r4, #4]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d919      	bls.n	8004cde <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004cae:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004cb0:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8004cbc:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8004cc0:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004cc2:	4b11      	ldr	r3, [pc, #68]	; (8004d08 <HAL_DMA_Init+0xdc>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	490e      	ldr	r1, [pc, #56]	; (8004d00 <HAL_DMA_Init+0xd4>)
 8004cc8:	fba1 1303 	umull	r1, r3, r1, r3
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004cd2:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <HAL_DMA_Init+0xe0>)
 8004cd4:	6403      	str	r3, [r0, #64]	; 0x40
 8004cd6:	e7bb      	b.n	8004c50 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	6063      	str	r3, [r4, #4]
 8004cdc:	e7d9      	b.n	8004c92 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f7ff ff8e 	bl	8004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ce4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cec:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004cee:	605a      	str	r2, [r3, #4]
 8004cf0:	e7df      	b.n	8004cb2 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8004cf2:	2001      	movs	r0, #1
}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40020407 	.word	0x40020407
 8004cfc:	bffdfff8 	.word	0xbffdfff8
 8004d00:	cccccccd 	.word	0xcccccccd
 8004d04:	40020000 	.word	0x40020000
 8004d08:	bffdfbf8 	.word	0xbffdfbf8
 8004d0c:	40020400 	.word	0x40020400

08004d10 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d04b      	beq.n	8004dac <HAL_DMA_DeInit+0x9c>
{
 8004d14:	b538      	push	{r3, r4, r5, lr}
 8004d16:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004d18:	6802      	ldr	r2, [r0, #0]
 8004d1a:	6813      	ldr	r3, [r2, #0]
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d22:	6802      	ldr	r2, [r0, #0]
 8004d24:	4b22      	ldr	r3, [pc, #136]	; (8004db0 <HAL_DMA_DeInit+0xa0>)
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d82c      	bhi.n	8004d84 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d2a:	4b22      	ldr	r3, [pc, #136]	; (8004db4 <HAL_DMA_DeInit+0xa4>)
 8004d2c:	4413      	add	r3, r2
 8004d2e:	4922      	ldr	r1, [pc, #136]	; (8004db8 <HAL_DMA_DeInit+0xa8>)
 8004d30:	fba1 1303 	umull	r1, r3, r1, r3
 8004d34:	091b      	lsrs	r3, r3, #4
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d3a:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <HAL_DMA_DeInit+0xac>)
 8004d3c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8004d3e:	2500      	movs	r5, #0
 8004d40:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004d44:	f003 021c 	and.w	r2, r3, #28
 8004d48:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	4093      	lsls	r3, r2
 8004d4e:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d50:	4620      	mov	r0, r4
 8004d52:	f7ff ff23 	bl	8004b9c <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8004d56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004d58:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d5a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004d5c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004d5e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d60:	6863      	ldr	r3, [r4, #4]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d918      	bls.n	8004d9a <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8004d68:	2000      	movs	r0, #0
 8004d6a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004d6c:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d6e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8004d70:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004d72:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004d74:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004d76:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d78:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8004d7a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8004d7e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004d84:	4b0e      	ldr	r3, [pc, #56]	; (8004dc0 <HAL_DMA_DeInit+0xb0>)
 8004d86:	4413      	add	r3, r2
 8004d88:	490b      	ldr	r1, [pc, #44]	; (8004db8 <HAL_DMA_DeInit+0xa8>)
 8004d8a:	fba1 1303 	umull	r1, r3, r1, r3
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_DMA_DeInit+0xb4>)
 8004d96:	6403      	str	r3, [r0, #64]	; 0x40
 8004d98:	e7d1      	b.n	8004d3e <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f7ff ff30 	bl	8004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004da0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004da2:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004da4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004da6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004da8:	605a      	str	r2, [r3, #4]
 8004daa:	e7dd      	b.n	8004d68 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8004dac:	2001      	movs	r0, #1
}
 8004dae:	4770      	bx	lr
 8004db0:	40020407 	.word	0x40020407
 8004db4:	bffdfff8 	.word	0xbffdfff8
 8004db8:	cccccccd 	.word	0xcccccccd
 8004dbc:	40020000 	.word	0x40020000
 8004dc0:	bffdfbf8 	.word	0xbffdfbf8
 8004dc4:	40020400 	.word	0x40020400

08004dc8 <HAL_DMA_Start_IT>:
{
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004dcc:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8004dd0:	2801      	cmp	r0, #1
 8004dd2:	d043      	beq.n	8004e5c <HAL_DMA_Start_IT+0x94>
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8004dda:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8004dde:	b2c0      	uxtb	r0, r0
 8004de0:	2801      	cmp	r0, #1
 8004de2:	d006      	beq.n	8004df2 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004de8:	2300      	movs	r3, #0
 8004dea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8004dee:	2001      	movs	r0, #1
}
 8004df0:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004df2:	2002      	movs	r0, #2
 8004df4:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004df8:	2000      	movs	r0, #0
 8004dfa:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004dfc:	6825      	ldr	r5, [r4, #0]
 8004dfe:	6828      	ldr	r0, [r5, #0]
 8004e00:	f020 0001 	bic.w	r0, r0, #1
 8004e04:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e06:	4620      	mov	r0, r4
 8004e08:	f7ff fea8 	bl	8004b5c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004e0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e0e:	b1d3      	cbz	r3, 8004e46 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e10:	6822      	ldr	r2, [r4, #0]
 8004e12:	6813      	ldr	r3, [r2, #0]
 8004e14:	f043 030e 	orr.w	r3, r3, #14
 8004e18:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e1a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004e22:	d003      	beq.n	8004e2c <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e2a:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8004e2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e2e:	b11b      	cbz	r3, 8004e38 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e36:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004e38:	6822      	ldr	r2, [r4, #0]
 8004e3a:	6813      	ldr	r3, [r2, #0]
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e42:	2000      	movs	r0, #0
 8004e44:	e7d4      	b.n	8004df0 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e46:	6822      	ldr	r2, [r4, #0]
 8004e48:	6813      	ldr	r3, [r2, #0]
 8004e4a:	f023 0304 	bic.w	r3, r3, #4
 8004e4e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e50:	6822      	ldr	r2, [r4, #0]
 8004e52:	6813      	ldr	r3, [r2, #0]
 8004e54:	f043 030a 	orr.w	r3, r3, #10
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	e7de      	b.n	8004e1a <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004e5c:	2002      	movs	r0, #2
 8004e5e:	e7c7      	b.n	8004df0 <HAL_DMA_Start_IT+0x28>

08004e60 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8004e60:	4603      	mov	r3, r0
 8004e62:	2800      	cmp	r0, #0
 8004e64:	d034      	beq.n	8004ed0 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004e66:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	2a02      	cmp	r2, #2
 8004e6e:	d006      	beq.n	8004e7e <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e70:	2204      	movs	r2, #4
 8004e72:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004e74:	2200      	movs	r2, #0
 8004e76:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8004e7a:	2001      	movs	r0, #1
 8004e7c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e7e:	6801      	ldr	r1, [r0, #0]
 8004e80:	680a      	ldr	r2, [r1, #0]
 8004e82:	f022 020e 	bic.w	r2, r2, #14
 8004e86:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e88:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004e8a:	680a      	ldr	r2, [r1, #0]
 8004e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e90:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8004e92:	6801      	ldr	r1, [r0, #0]
 8004e94:	680a      	ldr	r2, [r1, #0]
 8004e96:	f022 0201 	bic.w	r2, r2, #1
 8004e9a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004e9e:	f002 011c 	and.w	r1, r2, #28
 8004ea2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	408a      	lsls	r2, r1
 8004ea8:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004eaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004eae:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004eb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eb2:	b132      	cbz	r2, 8004ec2 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004eb4:	6811      	ldr	r1, [r2, #0]
 8004eb6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004eba:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ebc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ebe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004ec0:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004ec8:	2000      	movs	r0, #0
 8004eca:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8004ece:	4770      	bx	lr
    return HAL_ERROR;
 8004ed0:	2001      	movs	r0, #1
}
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_DMA_Abort_IT>:
{
 8004ed4:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ed6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d003      	beq.n	8004ee8 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ee0:	2304      	movs	r3, #4
 8004ee2:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004ee4:	2001      	movs	r0, #1
}
 8004ee6:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ee8:	6802      	ldr	r2, [r0, #0]
 8004eea:	6813      	ldr	r3, [r2, #0]
 8004eec:	f023 030e 	bic.w	r3, r3, #14
 8004ef0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004ef2:	6802      	ldr	r2, [r0, #0]
 8004ef4:	6813      	ldr	r3, [r2, #0]
 8004ef6:	f023 0301 	bic.w	r3, r3, #1
 8004efa:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004efc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004efe:	6813      	ldr	r3, [r2, #0]
 8004f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f04:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f06:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004f08:	f003 021c 	and.w	r2, r3, #28
 8004f0c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004f0e:	2301      	movs	r3, #1
 8004f10:	4093      	lsls	r3, r2
 8004f12:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f14:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004f16:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004f18:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004f1a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004f1c:	b133      	cbz	r3, 8004f2c <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f24:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f26:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004f28:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004f2a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004f32:	2300      	movs	r3, #0
 8004f34:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8004f38:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004f3a:	b113      	cbz	r3, 8004f42 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8004f3c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004f3e:	2000      	movs	r0, #0
 8004f40:	e7d1      	b.n	8004ee6 <HAL_DMA_Abort_IT+0x12>
 8004f42:	2000      	movs	r0, #0
 8004f44:	e7cf      	b.n	8004ee6 <HAL_DMA_Abort_IT+0x12>
	...

08004f48 <HAL_DMA_IRQHandler>:
{
 8004f48:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f4a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004f4c:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004f4e:	6804      	ldr	r4, [r0, #0]
 8004f50:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004f52:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004f54:	f003 031c 	and.w	r3, r3, #28
 8004f58:	2204      	movs	r2, #4
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	420a      	tst	r2, r1
 8004f5e:	d015      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x44>
 8004f60:	f015 0f04 	tst.w	r5, #4
 8004f64:	d012      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	f013 0f20 	tst.w	r3, #32
 8004f6c:	d103      	bne.n	8004f76 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	f023 0304 	bic.w	r3, r3, #4
 8004f74:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004f76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004f78:	f003 021c 	and.w	r2, r3, #28
 8004f7c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004f7e:	2304      	movs	r3, #4
 8004f80:	4093      	lsls	r3, r2
 8004f82:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004f84:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004f86:	b103      	cbz	r3, 8004f8a <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8004f88:	4798      	blx	r3
}
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	409a      	lsls	r2, r3
 8004f90:	420a      	tst	r2, r1
 8004f92:	d028      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x9e>
 8004f94:	f015 0f02 	tst.w	r5, #2
 8004f98:	d025      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	f013 0f20 	tst.w	r3, #32
 8004fa0:	d106      	bne.n	8004fb0 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	f023 030a 	bic.w	r3, r3, #10
 8004fa8:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8004faa:	2301      	movs	r3, #1
 8004fac:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004fb0:	6802      	ldr	r2, [r0, #0]
 8004fb2:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <HAL_DMA_IRQHandler+0xdc>)
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d90e      	bls.n	8004fd6 <HAL_DMA_IRQHandler+0x8e>
 8004fb8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004fba:	f003 021c 	and.w	r2, r3, #28
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	4093      	lsls	r3, r2
 8004fc2:	4a19      	ldr	r2, [pc, #100]	; (8005028 <HAL_DMA_IRQHandler+0xe0>)
 8004fc4:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8004fcc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0db      	beq.n	8004f8a <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8004fd2:	4798      	blx	r3
 8004fd4:	e7d9      	b.n	8004f8a <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004fd6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004fd8:	f003 021c 	and.w	r2, r3, #28
 8004fdc:	2302      	movs	r3, #2
 8004fde:	4093      	lsls	r3, r2
 8004fe0:	4a12      	ldr	r2, [pc, #72]	; (800502c <HAL_DMA_IRQHandler+0xe4>)
 8004fe2:	6053      	str	r3, [r2, #4]
 8004fe4:	e7ef      	b.n	8004fc6 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004fe6:	2208      	movs	r2, #8
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	420b      	tst	r3, r1
 8004fee:	d0cc      	beq.n	8004f8a <HAL_DMA_IRQHandler+0x42>
 8004ff0:	f015 0f08 	tst.w	r5, #8
 8004ff4:	d0c9      	beq.n	8004f8a <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	f023 030e 	bic.w	r3, r3, #14
 8004ffc:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ffe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005000:	f003 031c 	and.w	r3, r3, #28
 8005004:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005006:	2201      	movs	r2, #1
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800500e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8005010:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005014:	2300      	movs	r3, #0
 8005016:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800501a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0b4      	beq.n	8004f8a <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8005020:	4798      	blx	r3
  return;
 8005022:	e7b2      	b.n	8004f8a <HAL_DMA_IRQHandler+0x42>
 8005024:	40020080 	.word	0x40020080
 8005028:	40020400 	.word	0x40020400
 800502c:	40020000 	.word	0x40020000

08005030 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005030:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 8005032:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005034:	e05f      	b.n	80050f6 <HAL_GPIO_Init+0xc6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005036:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005038:	005f      	lsls	r7, r3, #1
 800503a:	2503      	movs	r5, #3
 800503c:	40bd      	lsls	r5, r7
 800503e:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005042:	68cd      	ldr	r5, [r1, #12]
 8005044:	40bd      	lsls	r5, r7
 8005046:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8005048:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800504a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800504c:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005050:	684d      	ldr	r5, [r1, #4]
 8005052:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8005056:	409c      	lsls	r4, r3
 8005058:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 800505a:	6044      	str	r4, [r0, #4]
 800505c:	e059      	b.n	8005112 <HAL_GPIO_Init+0xe2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800505e:	08dd      	lsrs	r5, r3, #3
 8005060:	3508      	adds	r5, #8
 8005062:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005066:	f003 0407 	and.w	r4, r3, #7
 800506a:	00a6      	lsls	r6, r4, #2
 800506c:	240f      	movs	r4, #15
 800506e:	40b4      	lsls	r4, r6
 8005070:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005074:	690c      	ldr	r4, [r1, #16]
 8005076:	40b4      	lsls	r4, r6
 8005078:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 800507a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800507e:	e05c      	b.n	800513a <HAL_GPIO_Init+0x10a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005080:	2402      	movs	r4, #2
 8005082:	e000      	b.n	8005086 <HAL_GPIO_Init+0x56>
 8005084:	2400      	movs	r4, #0
 8005086:	40b4      	lsls	r4, r6
 8005088:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800508a:	3502      	adds	r5, #2
 800508c:	4e41      	ldr	r6, [pc, #260]	; (8005194 <HAL_GPIO_Init+0x164>)
 800508e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005092:	4c41      	ldr	r4, [pc, #260]	; (8005198 <HAL_GPIO_Init+0x168>)
 8005094:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005098:	43d4      	mvns	r4, r2
 800509a:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800509e:	684f      	ldr	r7, [r1, #4]
 80050a0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80050a4:	d001      	beq.n	80050aa <HAL_GPIO_Init+0x7a>
        {
          temp |= iocurrent;
 80050a6:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80050aa:	4d3b      	ldr	r5, [pc, #236]	; (8005198 <HAL_GPIO_Init+0x168>)
 80050ac:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80050b0:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80050b4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050b8:	684f      	ldr	r7, [r1, #4]
 80050ba:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80050be:	d001      	beq.n	80050c4 <HAL_GPIO_Init+0x94>
        {
          temp |= iocurrent;
 80050c0:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80050c4:	4d34      	ldr	r5, [pc, #208]	; (8005198 <HAL_GPIO_Init+0x168>)
 80050c6:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050ca:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80050cc:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050d0:	684f      	ldr	r7, [r1, #4]
 80050d2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80050d6:	d001      	beq.n	80050dc <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 80050d8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80050dc:	4d2e      	ldr	r5, [pc, #184]	; (8005198 <HAL_GPIO_Init+0x168>)
 80050de:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80050e0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80050e2:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80050e4:	684e      	ldr	r6, [r1, #4]
 80050e6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80050ea:	d001      	beq.n	80050f0 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 80050ec:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80050f0:	4a29      	ldr	r2, [pc, #164]	; (8005198 <HAL_GPIO_Init+0x168>)
 80050f2:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 80050f4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050f6:	680a      	ldr	r2, [r1, #0]
 80050f8:	fa32 f403 	lsrs.w	r4, r2, r3
 80050fc:	d048      	beq.n	8005190 <HAL_GPIO_Init+0x160>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050fe:	2401      	movs	r4, #1
 8005100:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8005102:	4022      	ands	r2, r4
 8005104:	d0f6      	beq.n	80050f4 <HAL_GPIO_Init+0xc4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005106:	684d      	ldr	r5, [r1, #4]
 8005108:	f005 0503 	and.w	r5, r5, #3
 800510c:	3d01      	subs	r5, #1
 800510e:	2d01      	cmp	r5, #1
 8005110:	d991      	bls.n	8005036 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005112:	684c      	ldr	r4, [r1, #4]
 8005114:	f004 0403 	and.w	r4, r4, #3
 8005118:	2c03      	cmp	r4, #3
 800511a:	d009      	beq.n	8005130 <HAL_GPIO_Init+0x100>
        temp = GPIOx->PUPDR;
 800511c:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800511e:	005e      	lsls	r6, r3, #1
 8005120:	2403      	movs	r4, #3
 8005122:	40b4      	lsls	r4, r6
 8005124:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005128:	688c      	ldr	r4, [r1, #8]
 800512a:	40b4      	lsls	r4, r6
 800512c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800512e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005130:	684c      	ldr	r4, [r1, #4]
 8005132:	f004 0403 	and.w	r4, r4, #3
 8005136:	2c02      	cmp	r4, #2
 8005138:	d091      	beq.n	800505e <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 800513a:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800513c:	005e      	lsls	r6, r3, #1
 800513e:	2403      	movs	r4, #3
 8005140:	40b4      	lsls	r4, r6
 8005142:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005146:	684c      	ldr	r4, [r1, #4]
 8005148:	f004 0403 	and.w	r4, r4, #3
 800514c:	40b4      	lsls	r4, r6
 800514e:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8005150:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005152:	684c      	ldr	r4, [r1, #4]
 8005154:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8005158:	d0cc      	beq.n	80050f4 <HAL_GPIO_Init+0xc4>
        temp = SYSCFG->EXTICR[position >> 2u];
 800515a:	089d      	lsrs	r5, r3, #2
 800515c:	1cae      	adds	r6, r5, #2
 800515e:	4c0d      	ldr	r4, [pc, #52]	; (8005194 <HAL_GPIO_Init+0x164>)
 8005160:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005164:	f003 0403 	and.w	r4, r3, #3
 8005168:	00a6      	lsls	r6, r4, #2
 800516a:	2407      	movs	r4, #7
 800516c:	40b4      	lsls	r4, r6
 800516e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005172:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8005176:	d085      	beq.n	8005084 <HAL_GPIO_Init+0x54>
 8005178:	4c08      	ldr	r4, [pc, #32]	; (800519c <HAL_GPIO_Init+0x16c>)
 800517a:	42a0      	cmp	r0, r4
 800517c:	d006      	beq.n	800518c <HAL_GPIO_Init+0x15c>
 800517e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005182:	42a0      	cmp	r0, r4
 8005184:	f43f af7c 	beq.w	8005080 <HAL_GPIO_Init+0x50>
 8005188:	2407      	movs	r4, #7
 800518a:	e77c      	b.n	8005086 <HAL_GPIO_Init+0x56>
 800518c:	2401      	movs	r4, #1
 800518e:	e77a      	b.n	8005086 <HAL_GPIO_Init+0x56>
  }
}
 8005190:	bcf0      	pop	{r4, r5, r6, r7}
 8005192:	4770      	bx	lr
 8005194:	40010000 	.word	0x40010000
 8005198:	58000800 	.word	0x58000800
 800519c:	48000400 	.word	0x48000400

080051a0 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80051a0:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80051a2:	fa31 f203 	lsrs.w	r2, r1, r3
 80051a6:	d06f      	beq.n	8005288 <HAL_GPIO_DeInit+0xe8>
{
 80051a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051aa:	e02d      	b.n	8005208 <HAL_GPIO_DeInit+0x68>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80051ac:	2702      	movs	r7, #2
 80051ae:	e000      	b.n	80051b2 <HAL_GPIO_DeInit+0x12>
 80051b0:	2700      	movs	r7, #0
 80051b2:	fa07 f404 	lsl.w	r4, r7, r4
 80051b6:	42b4      	cmp	r4, r6
 80051b8:	d046      	beq.n	8005248 <HAL_GPIO_DeInit+0xa8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80051ba:	6805      	ldr	r5, [r0, #0]
 80051bc:	005c      	lsls	r4, r3, #1
 80051be:	2603      	movs	r6, #3
 80051c0:	fa06 f404 	lsl.w	r4, r6, r4
 80051c4:	4325      	orrs	r5, r4
 80051c6:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80051c8:	fa23 f506 	lsr.w	r5, r3, r6
 80051cc:	3508      	adds	r5, #8
 80051ce:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80051d2:	f003 0707 	and.w	r7, r3, #7
 80051d6:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 80051da:	270f      	movs	r7, #15
 80051dc:	fa07 f70c 	lsl.w	r7, r7, ip
 80051e0:	ea26 0607 	bic.w	r6, r6, r7
 80051e4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051e8:	6885      	ldr	r5, [r0, #8]
 80051ea:	ea25 0504 	bic.w	r5, r5, r4
 80051ee:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80051f0:	6845      	ldr	r5, [r0, #4]
 80051f2:	ea25 0202 	bic.w	r2, r5, r2
 80051f6:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051f8:	68c2      	ldr	r2, [r0, #12]
 80051fa:	ea22 0404 	bic.w	r4, r2, r4
 80051fe:	60c4      	str	r4, [r0, #12]
    }

    position++;
 8005200:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8005202:	fa31 f203 	lsrs.w	r2, r1, r3
 8005206:	d03e      	beq.n	8005286 <HAL_GPIO_DeInit+0xe6>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005208:	2201      	movs	r2, #1
 800520a:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800520c:	ea12 0e01 	ands.w	lr, r2, r1
 8005210:	d0f6      	beq.n	8005200 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8005212:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005216:	f10c 0502 	add.w	r5, ip, #2
 800521a:	4c1c      	ldr	r4, [pc, #112]	; (800528c <HAL_GPIO_DeInit+0xec>)
 800521c:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005220:	f003 0403 	and.w	r4, r3, #3
 8005224:	00a4      	lsls	r4, r4, #2
 8005226:	2507      	movs	r5, #7
 8005228:	40a5      	lsls	r5, r4
 800522a:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800522c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8005230:	d0be      	beq.n	80051b0 <HAL_GPIO_DeInit+0x10>
 8005232:	4f17      	ldr	r7, [pc, #92]	; (8005290 <HAL_GPIO_DeInit+0xf0>)
 8005234:	42b8      	cmp	r0, r7
 8005236:	d005      	beq.n	8005244 <HAL_GPIO_DeInit+0xa4>
 8005238:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800523c:	42b8      	cmp	r0, r7
 800523e:	d0b5      	beq.n	80051ac <HAL_GPIO_DeInit+0xc>
 8005240:	2707      	movs	r7, #7
 8005242:	e7b6      	b.n	80051b2 <HAL_GPIO_DeInit+0x12>
 8005244:	2701      	movs	r7, #1
 8005246:	e7b4      	b.n	80051b2 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8005248:	4c12      	ldr	r4, [pc, #72]	; (8005294 <HAL_GPIO_DeInit+0xf4>)
 800524a:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800524e:	ea26 060e 	bic.w	r6, r6, lr
 8005252:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005256:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 800525a:	ea26 060e 	bic.w	r6, r6, lr
 800525e:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8005262:	6826      	ldr	r6, [r4, #0]
 8005264:	ea26 060e 	bic.w	r6, r6, lr
 8005268:	6026      	str	r6, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800526a:	6866      	ldr	r6, [r4, #4]
 800526c:	ea26 060e 	bic.w	r6, r6, lr
 8005270:	6066      	str	r6, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005272:	4e06      	ldr	r6, [pc, #24]	; (800528c <HAL_GPIO_DeInit+0xec>)
 8005274:	f10c 0c02 	add.w	ip, ip, #2
 8005278:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 800527c:	ea24 0505 	bic.w	r5, r4, r5
 8005280:	f846 502c 	str.w	r5, [r6, ip, lsl #2]
 8005284:	e799      	b.n	80051ba <HAL_GPIO_DeInit+0x1a>
  }
}
 8005286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40010000 	.word	0x40010000
 8005290:	48000400 	.word	0x48000400
 8005294:	58000800 	.word	0x58000800

08005298 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005298:	b10a      	cbz	r2, 800529e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800529a:	6181      	str	r1, [r0, #24]
 800529c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800529e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80052a0:	4770      	bx	lr

080052a2 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80052a2:	4770      	bx	lr

080052a4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80052a4:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	4203      	tst	r3, r0
 80052ac:	d100      	bne.n	80052b0 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80052ae:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052b0:	4b02      	ldr	r3, [pc, #8]	; (80052bc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80052b2:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052b4:	f7ff fff5 	bl	80052a2 <HAL_GPIO_EXTI_Callback>
}
 80052b8:	e7f9      	b.n	80052ae <HAL_GPIO_EXTI_IRQHandler+0xa>
 80052ba:	bf00      	nop
 80052bc:	58000800 	.word	0x58000800

080052c0 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052c0:	4a02      	ldr	r2, [pc, #8]	; (80052cc <HAL_PWR_EnableBkUpAccess+0xc>)
 80052c2:	6813      	ldr	r3, [r2, #0]
 80052c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c8:	6013      	str	r3, [r2, #0]
}
 80052ca:	4770      	bx	lr
 80052cc:	58000400 	.word	0x58000400

080052d0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80052d0:	b510      	push	{r4, lr}
 80052d2:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80052d4:	b9a0      	cbnz	r0, 8005300 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80052d6:	4b0f      	ldr	r3, [pc, #60]	; (8005314 <HAL_PWR_EnterSLEEPMode+0x44>)
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f413 7f00 	tst.w	r3, #512	; 0x200
 80052de:	d10a      	bne.n	80052f6 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80052e0:	4a0d      	ldr	r2, [pc, #52]	; (8005318 <HAL_PWR_EnterSLEEPMode+0x48>)
 80052e2:	6913      	ldr	r3, [r2, #16]
 80052e4:	f023 0304 	bic.w	r3, r3, #4
 80052e8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80052ea:	2c01      	cmp	r4, #1
 80052ec:	d010      	beq.n	8005310 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80052ee:	bf40      	sev
    __WFE();
 80052f0:	bf20      	wfe
    __WFE();
 80052f2:	bf20      	wfe
  }
}
 80052f4:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80052f6:	f000 f821 	bl	800533c <HAL_PWREx_DisableLowPowerRunMode>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_PWR_EnterSLEEPMode+0x10>
 80052fe:	e7f9      	b.n	80052f4 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005300:	4b04      	ldr	r3, [pc, #16]	; (8005314 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005308:	d1ea      	bne.n	80052e0 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800530a:	f000 f80f 	bl	800532c <HAL_PWREx_EnableLowPowerRunMode>
 800530e:	e7e7      	b.n	80052e0 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8005310:	bf30      	wfi
 8005312:	e7ef      	b.n	80052f4 <HAL_PWR_EnterSLEEPMode+0x24>
 8005314:	58000400 	.word	0x58000400
 8005318:	e000ed00 	.word	0xe000ed00

0800531c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 800531c:	4b02      	ldr	r3, [pc, #8]	; (8005328 <HAL_PWREx_GetVoltageRange+0xc>)
 800531e:	6818      	ldr	r0, [r3, #0]
}
 8005320:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	58000400 	.word	0x58000400

0800532c <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800532c:	4a02      	ldr	r2, [pc, #8]	; (8005338 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005334:	6013      	str	r3, [r2, #0]
}
 8005336:	4770      	bx	lr
 8005338:	58000400 	.word	0x58000400

0800533c <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800533c:	4a0f      	ldr	r2, [pc, #60]	; (800537c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800533e:	6813      	ldr	r3, [r2, #0]
 8005340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005344:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005346:	4b0e      	ldr	r3, [pc, #56]	; (8005380 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	2332      	movs	r3, #50	; 0x32
 800534c:	fb03 f302 	mul.w	r3, r3, r2
 8005350:	4a0c      	ldr	r2, [pc, #48]	; (8005384 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005358:	4a08      	ldr	r2, [pc, #32]	; (800537c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800535a:	6952      	ldr	r2, [r2, #20]
 800535c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005360:	d002      	beq.n	8005368 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
 8005362:	b10b      	cbz	r3, 8005368 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
  {
    wait_loop_index--;
 8005364:	3b01      	subs	r3, #1
 8005366:	e7f7      	b.n	8005358 <HAL_PWREx_DisableLowPowerRunMode+0x1c>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005368:	4b04      	ldr	r3, [pc, #16]	; (800537c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005370:	d101      	bne.n	8005376 <HAL_PWREx_DisableLowPowerRunMode+0x3a>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8005372:	2000      	movs	r0, #0
 8005374:	4770      	bx	lr
    return HAL_TIMEOUT;
 8005376:	2003      	movs	r0, #3
}
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	58000400 	.word	0x58000400
 8005380:	2000004c 	.word	0x2000004c
 8005384:	431bde83 	.word	0x431bde83

08005388 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005388:	4a0c      	ldr	r2, [pc, #48]	; (80053bc <HAL_PWREx_EnterSTOP2Mode+0x34>)
 800538a:	6813      	ldr	r3, [r2, #0]
 800538c:	f023 0307 	bic.w	r3, r3, #7
 8005390:	f043 0302 	orr.w	r3, r3, #2
 8005394:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005396:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005398:	6913      	ldr	r3, [r2, #16]
 800539a:	f043 0304 	orr.w	r3, r3, #4
 800539e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80053a0:	2801      	cmp	r0, #1
 80053a2:	d008      	beq.n	80053b6 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80053a4:	bf40      	sev
    __WFE();
 80053a6:	bf20      	wfe
    __WFE();
 80053a8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80053aa:	4a05      	ldr	r2, [pc, #20]	; (80053c0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80053ac:	6913      	ldr	r3, [r2, #16]
 80053ae:	f023 0304 	bic.w	r3, r3, #4
 80053b2:	6113      	str	r3, [r2, #16]
}
 80053b4:	4770      	bx	lr
    __WFI();
 80053b6:	bf30      	wfi
 80053b8:	e7f7      	b.n	80053aa <HAL_PWREx_EnterSTOP2Mode+0x22>
 80053ba:	bf00      	nop
 80053bc:	58000400 	.word	0x58000400
 80053c0:	e000ed00 	.word	0xe000ed00

080053c4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80053c4:	b570      	push	{r4, r5, r6, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	4604      	mov	r4, r0
 80053ca:	460e      	mov	r6, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80053cc:	4b29      	ldr	r3, [pc, #164]	; (8005474 <RCC_SetFlashLatency+0xb0>)
 80053ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80053d2:	9006      	str	r0, [sp, #24]
 80053d4:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80053d8:	68d9      	ldr	r1, [r3, #12]
 80053da:	6898      	ldr	r0, [r3, #8]
 80053dc:	9004      	str	r0, [sp, #16]
 80053de:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80053e2:	ad01      	add	r5, sp, #4
 80053e4:	3310      	adds	r3, #16
 80053e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053ee:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80053f2:	d01b      	beq.n	800542c <RCC_SetFlashLatency+0x68>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80053f4:	2300      	movs	r3, #0
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d822      	bhi.n	8005440 <RCC_SetFlashLatency+0x7c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80053fa:	aa08      	add	r2, sp, #32
 80053fc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005400:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005404:	42a2      	cmp	r2, r4
 8005406:	d215      	bcs.n	8005434 <RCC_SetFlashLatency+0x70>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005408:	3301      	adds	r3, #1
 800540a:	e7f4      	b.n	80053f6 <RCC_SetFlashLatency+0x32>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800540c:	3301      	adds	r3, #1
 800540e:	2b02      	cmp	r3, #2
 8005410:	d80e      	bhi.n	8005430 <RCC_SetFlashLatency+0x6c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005412:	aa08      	add	r2, sp, #32
 8005414:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005418:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 800541c:	42a2      	cmp	r2, r4
 800541e:	d3f5      	bcc.n	800540c <RCC_SetFlashLatency+0x48>
        latency = FLASH_LATENCY_RANGE[index];
 8005420:	aa08      	add	r2, sp, #32
 8005422:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005426:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800542a:	e00a      	b.n	8005442 <RCC_SetFlashLatency+0x7e>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800542c:	2300      	movs	r3, #0
 800542e:	e7ee      	b.n	800540e <RCC_SetFlashLatency+0x4a>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005430:	2500      	movs	r5, #0
 8005432:	e006      	b.n	8005442 <RCC_SetFlashLatency+0x7e>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005434:	aa08      	add	r2, sp, #32
 8005436:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800543a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800543e:	e000      	b.n	8005442 <RCC_SetFlashLatency+0x7e>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005440:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005442:	4a0d      	ldr	r2, [pc, #52]	; (8005478 <RCC_SetFlashLatency+0xb4>)
 8005444:	6813      	ldr	r3, [r2, #0]
 8005446:	f023 0307 	bic.w	r3, r3, #7
 800544a:	432b      	orrs	r3, r5
 800544c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800544e:	f7fe f8c7 	bl	80035e0 <HAL_GetTick>
 8005452:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005454:	4b08      	ldr	r3, [pc, #32]	; (8005478 <RCC_SetFlashLatency+0xb4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	42ab      	cmp	r3, r5
 800545e:	d006      	beq.n	800546e <RCC_SetFlashLatency+0xaa>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005460:	f7fe f8be 	bl	80035e0 <HAL_GetTick>
 8005464:	1b00      	subs	r0, r0, r4
 8005466:	2802      	cmp	r0, #2
 8005468:	d9f4      	bls.n	8005454 <RCC_SetFlashLatency+0x90>
    {
      return HAL_TIMEOUT;
 800546a:	2003      	movs	r0, #3
 800546c:	e000      	b.n	8005470 <RCC_SetFlashLatency+0xac>
    }
  }
  return HAL_OK;
 800546e:	2000      	movs	r0, #0
}
 8005470:	b008      	add	sp, #32
 8005472:	bd70      	pop	{r4, r5, r6, pc}
 8005474:	08013b70 	.word	0x08013b70
 8005478:	58004000 	.word	0x58004000

0800547c <RCC_SetFlashLatencyFromMSIRange>:
{
 800547c:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800547e:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005482:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8005484:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	4a08      	ldr	r2, [pc, #32]	; (80054b8 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8005496:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800549a:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800549e:	f7ff ff3d 	bl	800531c <HAL_PWREx_GetVoltageRange>
 80054a2:	4601      	mov	r1, r0
 80054a4:	4805      	ldr	r0, [pc, #20]	; (80054bc <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80054a6:	fba0 3004 	umull	r3, r0, r0, r4
 80054aa:	0c80      	lsrs	r0, r0, #18
 80054ac:	f7ff ff8a 	bl	80053c4 <RCC_SetFlashLatency>
}
 80054b0:	bd10      	pop	{r4, pc}
 80054b2:	bf00      	nop
 80054b4:	08013f80 	.word	0x08013f80
 80054b8:	08013f20 	.word	0x08013f20
 80054bc:	431bde83 	.word	0x431bde83

080054c0 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80054c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c4:	689a      	ldr	r2, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80054cc:	f012 020c 	ands.w	r2, r2, #12
 80054d0:	d00a      	beq.n	80054e8 <HAL_RCC_GetSysClockFreq+0x28>
 80054d2:	2a0c      	cmp	r2, #12
 80054d4:	d006      	beq.n	80054e4 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054d6:	2a04      	cmp	r2, #4
 80054d8:	d047      	beq.n	800556a <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054da:	2a08      	cmp	r2, #8
 80054dc:	d03b      	beq.n	8005556 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80054de:	2100      	movs	r1, #0
  uint32_t sysclockfreq = 0U;
 80054e0:	4608      	mov	r0, r1
 80054e2:	e026      	b.n	8005532 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d1f6      	bne.n	80054d6 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80054e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f013 0308 	ands.w	r3, r3, #8
 80054f2:	d00d      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0x50>
 80054f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f013 0308 	ands.w	r3, r3, #8
 80054fe:	d124      	bne.n	800554a <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005504:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005508:	492e      	ldr	r1, [pc, #184]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x104>)
 800550a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800550e:	e00e      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005510:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005514:	6809      	ldr	r1, [r1, #0]
 8005516:	f011 0f08 	tst.w	r1, #8
 800551a:	d112      	bne.n	8005542 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800551c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005524:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005528:	4926      	ldr	r1, [pc, #152]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x104>)
 800552a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800552e:	b1d2      	cbz	r2, 8005566 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005530:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800553c:	2b0c      	cmp	r3, #12
 800553e:	d01a      	beq.n	8005576 <HAL_RCC_GetSysClockFreq+0xb6>
}
 8005540:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005546:	6809      	ldr	r1, [r1, #0]
 8005548:	e7ee      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x68>
 800554a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554e:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005550:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005554:	e7d8      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555a:	6819      	ldr	r1, [r3, #0]
 800555c:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
 8005560:	d106      	bne.n	8005570 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8005562:	4819      	ldr	r0, [pc, #100]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005564:	e7e5      	b.n	8005532 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8005566:	4608      	mov	r0, r1
 8005568:	e7e3      	b.n	8005532 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800556a:	2100      	movs	r1, #0
    sysclockfreq = HSI_VALUE;
 800556c:	4817      	ldr	r0, [pc, #92]	; (80055cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800556e:	e7e0      	b.n	8005532 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005570:	2100      	movs	r1, #0
      sysclockfreq = HSE_VALUE / 2U;
 8005572:	4816      	ldr	r0, [pc, #88]	; (80055cc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005574:	e7dd      	b.n	8005532 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005580:	2b02      	cmp	r3, #2
 8005582:	d009      	beq.n	8005598 <HAL_RCC_GetSysClockFreq+0xd8>
 8005584:	2b03      	cmp	r3, #3
 8005586:	d108      	bne.n	800559a <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005592:	d115      	bne.n	80055c0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005594:	490c      	ldr	r1, [pc, #48]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005596:	e000      	b.n	800559a <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8005598:	490c      	ldr	r1, [pc, #48]	; (80055cc <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800559a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800559e:	68d0      	ldr	r0, [r2, #12]
 80055a0:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80055a4:	fb00 f001 	mul.w	r0, r0, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80055a8:	68d3      	ldr	r3, [r2, #12]
 80055aa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80055ae:	3301      	adds	r3, #1
 80055b0:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80055b4:	68d3      	ldr	r3, [r2, #12]
 80055b6:	0f5b      	lsrs	r3, r3, #29
 80055b8:	3301      	adds	r3, #1
 80055ba:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80055be:	e7bf      	b.n	8005540 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80055c0:	4902      	ldr	r1, [pc, #8]	; (80055cc <HAL_RCC_GetSysClockFreq+0x10c>)
 80055c2:	e7ea      	b.n	800559a <HAL_RCC_GetSysClockFreq+0xda>
 80055c4:	08013f80 	.word	0x08013f80
 80055c8:	01e84800 	.word	0x01e84800
 80055cc:	00f42400 	.word	0x00f42400

080055d0 <HAL_RCC_GetHCLKFreq>:
{
 80055d0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80055d2:	f7ff ff75 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80055d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80055e0:	4a02      	ldr	r2, [pc, #8]	; (80055ec <HAL_RCC_GetHCLKFreq+0x1c>)
 80055e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80055e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80055ea:	bd08      	pop	{r3, pc}
 80055ec:	08013f20 	.word	0x08013f20

080055f0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80055f0:	2800      	cmp	r0, #0
 80055f2:	f000 8318 	beq.w	8005c26 <HAL_RCC_OscConfig+0x636>
{
 80055f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f8:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80055fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fe:	689d      	ldr	r5, [r3, #8]
 8005600:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005604:	68de      	ldr	r6, [r3, #12]
 8005606:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800560a:	6803      	ldr	r3, [r0, #0]
 800560c:	f013 0f20 	tst.w	r3, #32
 8005610:	f000 808f 	beq.w	8005732 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005614:	b1ed      	cbz	r5, 8005652 <HAL_RCC_OscConfig+0x62>
 8005616:	2d0c      	cmp	r5, #12
 8005618:	d019      	beq.n	800564e <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800561a:	6a23      	ldr	r3, [r4, #32]
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80bc 	beq.w	800579a <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005622:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005626:	6813      	ldr	r3, [r2, #0]
 8005628:	f043 0301 	orr.w	r3, r3, #1
 800562c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800562e:	f7fd ffd7 	bl	80035e0 <HAL_GetTick>
 8005632:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f013 0f02 	tst.w	r3, #2
 800563e:	d165      	bne.n	800570c <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005640:	f7fd ffce 	bl	80035e0 <HAL_GetTick>
 8005644:	1bc0      	subs	r0, r0, r7
 8005646:	2802      	cmp	r0, #2
 8005648:	d9f4      	bls.n	8005634 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 800564a:	2003      	movs	r0, #3
 800564c:	e2f8      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800564e:	2e01      	cmp	r6, #1
 8005650:	d1e3      	bne.n	800561a <HAL_RCC_OscConfig+0x2a>
 8005652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f013 0f02 	tst.w	r3, #2
 800565c:	d003      	beq.n	8005666 <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800565e:	6a23      	ldr	r3, [r4, #32]
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 82e2 	beq.w	8005c2a <HAL_RCC_OscConfig+0x63a>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005666:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f013 0f08 	tst.w	r3, #8
 8005672:	d029      	beq.n	80056c8 <HAL_RCC_OscConfig+0xd8>
 8005674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800567e:	4298      	cmp	r0, r3
 8005680:	d92a      	bls.n	80056d8 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005682:	f7ff fefb 	bl	800547c <RCC_SetFlashLatencyFromMSIRange>
 8005686:	2800      	cmp	r0, #0
 8005688:	f040 82d1 	bne.w	8005c2e <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800568c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	f042 0208 	orr.w	r2, r2, #8
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800569e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80056a0:	430a      	orrs	r2, r1
 80056a2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80056ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80056b0:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80056b2:	f7ff ff8d 	bl	80055d0 <HAL_RCC_GetHCLKFreq>
 80056b6:	4bbc      	ldr	r3, [pc, #752]	; (80059a8 <HAL_RCC_OscConfig+0x3b8>)
 80056b8:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80056ba:	4bbc      	ldr	r3, [pc, #752]	; (80059ac <HAL_RCC_OscConfig+0x3bc>)
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	f7fd ff8d 	bl	80035dc <HAL_InitTick>
        if (status != HAL_OK)
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d035      	beq.n	8005732 <HAL_RCC_OscConfig+0x142>
 80056c6:	e2bb      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d6:	e7d2      	b.n	800567e <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	f042 0208 	orr.w	r2, r2, #8
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80056ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80056ec:	430a      	orrs	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80056f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80056fc:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005700:	f7ff febc 	bl	800547c <RCC_SetFlashLatencyFromMSIRange>
 8005704:	2800      	cmp	r0, #0
 8005706:	d0d4      	beq.n	80056b2 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8005708:	2001      	movs	r0, #1
 800570a:	e299      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800570c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	f042 0208 	orr.w	r2, r2, #8
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800571e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005720:	430a      	orrs	r2, r1
 8005722:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005724:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800572c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005730:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f013 0f01 	tst.w	r3, #1
 8005738:	d051      	beq.n	80057de <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800573a:	2d08      	cmp	r5, #8
 800573c:	d045      	beq.n	80057ca <HAL_RCC_OscConfig+0x1da>
 800573e:	2d0c      	cmp	r5, #12
 8005740:	d041      	beq.n	80057c6 <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005742:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005746:	6813      	ldr	r3, [r2, #0]
 8005748:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800574c:	68a1      	ldr	r1, [r4, #8]
 800574e:	430b      	orrs	r3, r1
 8005750:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005752:	6863      	ldr	r3, [r4, #4]
 8005754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005758:	d063      	beq.n	8005822 <HAL_RCC_OscConfig+0x232>
 800575a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800575e:	d065      	beq.n	800582c <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800576a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005772:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005774:	6863      	ldr	r3, [r4, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d063      	beq.n	8005842 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 800577a:	f7fd ff31 	bl	80035e0 <HAL_GetTick>
 800577e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800578a:	d128      	bne.n	80057de <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800578c:	f7fd ff28 	bl	80035e0 <HAL_GetTick>
 8005790:	1bc0      	subs	r0, r0, r7
 8005792:	2864      	cmp	r0, #100	; 0x64
 8005794:	d9f4      	bls.n	8005780 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 8005796:	2003      	movs	r0, #3
 8005798:	e252      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800579a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800579e:	6813      	ldr	r3, [r2, #0]
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80057a6:	f7fd ff1b 	bl	80035e0 <HAL_GetTick>
 80057aa:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80057ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f013 0f02 	tst.w	r3, #2
 80057b6:	d0bc      	beq.n	8005732 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057b8:	f7fd ff12 	bl	80035e0 <HAL_GetTick>
 80057bc:	1bc0      	subs	r0, r0, r7
 80057be:	2802      	cmp	r0, #2
 80057c0:	d9f4      	bls.n	80057ac <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 80057c2:	2003      	movs	r0, #3
 80057c4:	e23c      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80057c6:	2e03      	cmp	r6, #3
 80057c8:	d1bb      	bne.n	8005742 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80057ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80057d4:	d003      	beq.n	80057de <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d6:	6863      	ldr	r3, [r4, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 822a 	beq.w	8005c32 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	f013 0f02 	tst.w	r3, #2
 80057e4:	d052      	beq.n	800588c <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80057e6:	2d04      	cmp	r5, #4
 80057e8:	d03d      	beq.n	8005866 <HAL_RCC_OscConfig+0x276>
 80057ea:	2d0c      	cmp	r5, #12
 80057ec:	d039      	beq.n	8005862 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057ee:	6923      	ldr	r3, [r4, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 8091 	beq.w	8005918 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80057f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057fa:	6813      	ldr	r3, [r2, #0]
 80057fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005800:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005802:	f7fd feed 	bl	80035e0 <HAL_GetTick>
 8005806:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005812:	d177      	bne.n	8005904 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005814:	f7fd fee4 	bl	80035e0 <HAL_GetTick>
 8005818:	1b80      	subs	r0, r0, r6
 800581a:	2802      	cmp	r0, #2
 800581c:	d9f4      	bls.n	8005808 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 800581e:	2003      	movs	r0, #3
 8005820:	e20e      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005822:	6813      	ldr	r3, [r2, #0]
 8005824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005828:	6013      	str	r3, [r2, #0]
}
 800582a:	e7a3      	b.n	8005774 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800582c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005836:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800583e:	601a      	str	r2, [r3, #0]
}
 8005840:	e798      	b.n	8005774 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8005842:	f7fd fecd 	bl	80035e0 <HAL_GetTick>
 8005846:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005852:	d0c4      	beq.n	80057de <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005854:	f7fd fec4 	bl	80035e0 <HAL_GetTick>
 8005858:	1bc0      	subs	r0, r0, r7
 800585a:	2864      	cmp	r0, #100	; 0x64
 800585c:	d9f4      	bls.n	8005848 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 800585e:	2003      	movs	r0, #3
 8005860:	e1ee      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005862:	2e02      	cmp	r6, #2
 8005864:	d1c3      	bne.n	80057ee <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005870:	d003      	beq.n	800587a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005872:	6923      	ldr	r3, [r4, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 81de 	beq.w	8005c36 <HAL_RCC_OscConfig+0x646>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800587a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800587c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005880:	6853      	ldr	r3, [r2, #4]
 8005882:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005886:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800588a:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	f013 0f08 	tst.w	r3, #8
 8005892:	f000 808d 	beq.w	80059b0 <HAL_RCC_OscConfig+0x3c0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005896:	69a3      	ldr	r3, [r4, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d06c      	beq.n	8005976 <HAL_RCC_OscConfig+0x386>
      uint32_t csr_temp = RCC->CSR;
 800589c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80058a4:	69e1      	ldr	r1, [r4, #28]
 80058a6:	f003 0210 	and.w	r2, r3, #16
 80058aa:	4291      	cmp	r1, r2
 80058ac:	d011      	beq.n	80058d2 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80058ae:	f003 0203 	and.w	r2, r3, #3
 80058b2:	2a02      	cmp	r2, #2
 80058b4:	f000 81c1 	beq.w	8005c3a <HAL_RCC_OscConfig+0x64a>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80058b8:	f013 0f01 	tst.w	r3, #1
 80058bc:	d142      	bne.n	8005944 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80058be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058c2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80058c6:	f023 0310 	bic.w	r3, r3, #16
 80058ca:	69e1      	ldr	r1, [r4, #28]
 80058cc:	430b      	orrs	r3, r1
 80058ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80058d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058d6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80058e2:	f7fd fe7d 	bl	80035e0 <HAL_GetTick>
 80058e6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80058e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058f0:	f013 0f02 	tst.w	r3, #2
 80058f4:	d15c      	bne.n	80059b0 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058f6:	f7fd fe73 	bl	80035e0 <HAL_GetTick>
 80058fa:	1b80      	subs	r0, r0, r6
 80058fc:	2811      	cmp	r0, #17
 80058fe:	d9f3      	bls.n	80058e8 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8005900:	2003      	movs	r0, #3
 8005902:	e19d      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005904:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800590a:	6853      	ldr	r3, [r2, #4]
 800590c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005910:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005914:	6053      	str	r3, [r2, #4]
}
 8005916:	e7b9      	b.n	800588c <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005918:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800591c:	6813      	ldr	r3, [r2, #0]
 800591e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005922:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005924:	f7fd fe5c 	bl	80035e0 <HAL_GetTick>
 8005928:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800592a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005934:	d0aa      	beq.n	800588c <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005936:	f7fd fe53 	bl	80035e0 <HAL_GetTick>
 800593a:	1b80      	subs	r0, r0, r6
 800593c:	2802      	cmp	r0, #2
 800593e:	d9f4      	bls.n	800592a <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8005940:	2003      	movs	r0, #3
 8005942:	e17d      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005944:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005948:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800594c:	f023 0301 	bic.w	r3, r3, #1
 8005950:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8005954:	f7fd fe44 	bl	80035e0 <HAL_GetTick>
 8005958:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800595a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005962:	f013 0f02 	tst.w	r3, #2
 8005966:	d0aa      	beq.n	80058be <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005968:	f7fd fe3a 	bl	80035e0 <HAL_GetTick>
 800596c:	1b80      	subs	r0, r0, r6
 800596e:	2811      	cmp	r0, #17
 8005970:	d9f3      	bls.n	800595a <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8005972:	2003      	movs	r0, #3
 8005974:	e164      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005976:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800597a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800597e:	f023 0301 	bic.w	r3, r3, #1
 8005982:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005986:	f7fd fe2b 	bl	80035e0 <HAL_GetTick>
 800598a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800598c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005994:	f013 0f02 	tst.w	r3, #2
 8005998:	d00a      	beq.n	80059b0 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800599a:	f7fd fe21 	bl	80035e0 <HAL_GetTick>
 800599e:	1b80      	subs	r0, r0, r6
 80059a0:	2811      	cmp	r0, #17
 80059a2:	d9f3      	bls.n	800598c <HAL_RCC_OscConfig+0x39c>
          return HAL_TIMEOUT;
 80059a4:	2003      	movs	r0, #3
 80059a6:	e14b      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
 80059a8:	2000004c 	.word	0x2000004c
 80059ac:	20000050 	.word	0x20000050
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	f013 0f04 	tst.w	r3, #4
 80059b6:	f000 80b1 	beq.w	8005b1c <HAL_RCC_OscConfig+0x52c>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80059ba:	4ba9      	ldr	r3, [pc, #676]	; (8005c60 <HAL_RCC_OscConfig+0x670>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80059c2:	d110      	bne.n	80059e6 <HAL_RCC_OscConfig+0x3f6>
      HAL_PWR_EnableBkUpAccess();
 80059c4:	f7ff fc7c 	bl	80052c0 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80059c8:	f7fd fe0a 	bl	80035e0 <HAL_GetTick>
 80059cc:	4606      	mov	r6, r0
 80059ce:	4ba4      	ldr	r3, [pc, #656]	; (8005c60 <HAL_RCC_OscConfig+0x670>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80059d6:	d106      	bne.n	80059e6 <HAL_RCC_OscConfig+0x3f6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d8:	f7fd fe02 	bl	80035e0 <HAL_GetTick>
 80059dc:	1b80      	subs	r0, r0, r6
 80059de:	2802      	cmp	r0, #2
 80059e0:	d9f5      	bls.n	80059ce <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 80059e2:	2003      	movs	r0, #3
 80059e4:	e12c      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059e6:	68e3      	ldr	r3, [r4, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d061      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x4c0>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80059ec:	2b85      	cmp	r3, #133	; 0x85
 80059ee:	d001      	beq.n	80059f4 <HAL_RCC_OscConfig+0x404>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80059f0:	2b05      	cmp	r3, #5
 80059f2:	d107      	bne.n	8005a04 <HAL_RCC_OscConfig+0x414>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80059f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059f8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80059fc:	f043 0304 	orr.w	r3, r3, #4
 8005a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005a04:	f7fd fdec 	bl	80035e0 <HAL_GetTick>
 8005a08:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a0e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a12:	f043 0301 	orr.w	r3, r3, #1
 8005a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a22:	f013 0f02 	tst.w	r3, #2
 8005a26:	d108      	bne.n	8005a3a <HAL_RCC_OscConfig+0x44a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a28:	f7fd fdda 	bl	80035e0 <HAL_GetTick>
 8005a2c:	1b80      	subs	r0, r0, r6
 8005a2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005a32:	4298      	cmp	r0, r3
 8005a34:	d9f1      	bls.n	8005a1a <HAL_RCC_OscConfig+0x42a>
          return HAL_TIMEOUT;
 8005a36:	2003      	movs	r0, #3
 8005a38:	e102      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005a3a:	68e3      	ldr	r3, [r4, #12]
 8005a3c:	2b81      	cmp	r3, #129	; 0x81
 8005a3e:	d001      	beq.n	8005a44 <HAL_RCC_OscConfig+0x454>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005a40:	2b85      	cmp	r3, #133	; 0x85
 8005a42:	d11a      	bne.n	8005a7a <HAL_RCC_OscConfig+0x48a>
        tickstart = HAL_GetTick();
 8005a44:	f7fd fdcc 	bl	80035e0 <HAL_GetTick>
 8005a48:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a4e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a62:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005a66:	d159      	bne.n	8005b1c <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a68:	f7fd fdba 	bl	80035e0 <HAL_GetTick>
 8005a6c:	1b80      	subs	r0, r0, r6
 8005a6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005a72:	4298      	cmp	r0, r3
 8005a74:	d9f1      	bls.n	8005a5a <HAL_RCC_OscConfig+0x46a>
            return HAL_TIMEOUT;
 8005a76:	2003      	movs	r0, #3
 8005a78:	e0e2      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
        tickstart = HAL_GetTick();
 8005a7a:	f7fd fdb1 	bl	80035e0 <HAL_GetTick>
 8005a7e:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a84:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a98:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005a9c:	d03e      	beq.n	8005b1c <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a9e:	f7fd fd9f 	bl	80035e0 <HAL_GetTick>
 8005aa2:	1b80      	subs	r0, r0, r6
 8005aa4:	f241 3388 	movw	r3, #5000	; 0x1388
 8005aa8:	4298      	cmp	r0, r3
 8005aaa:	d9f1      	bls.n	8005a90 <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 8005aac:	2003      	movs	r0, #3
 8005aae:	e0c7      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 8005ab0:	f7fd fd96 	bl	80035e0 <HAL_GetTick>
 8005ab4:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ace:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005ad2:	d008      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x4f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad4:	f7fd fd84 	bl	80035e0 <HAL_GetTick>
 8005ad8:	1b80      	subs	r0, r0, r6
 8005ada:	f241 3388 	movw	r3, #5000	; 0x1388
 8005ade:	4298      	cmp	r0, r3
 8005ae0:	d9f1      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x4d6>
          return HAL_TIMEOUT;
 8005ae2:	2003      	movs	r0, #3
 8005ae4:	e0ac      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 8005ae6:	f7fd fd7b 	bl	80035e0 <HAL_GetTick>
 8005aea:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005af0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005af4:	f023 0301 	bic.w	r3, r3, #1
 8005af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b04:	f013 0f02 	tst.w	r3, #2
 8005b08:	d008      	beq.n	8005b1c <HAL_RCC_OscConfig+0x52c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0a:	f7fd fd69 	bl	80035e0 <HAL_GetTick>
 8005b0e:	1b80      	subs	r0, r0, r6
 8005b10:	f241 3388 	movw	r3, #5000	; 0x1388
 8005b14:	4298      	cmp	r0, r3
 8005b16:	d9f1      	bls.n	8005afc <HAL_RCC_OscConfig+0x50c>
          return HAL_TIMEOUT;
 8005b18:	2003      	movs	r0, #3
 8005b1a:	e091      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 808d 	beq.w	8005c3e <HAL_RCC_OscConfig+0x64e>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b24:	2d0c      	cmp	r5, #12
 8005b26:	d062      	beq.n	8005bee <HAL_RCC_OscConfig+0x5fe>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d01f      	beq.n	8005b6c <HAL_RCC_OscConfig+0x57c>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005b36:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	f022 0203 	bic.w	r2, r2, #3
 8005b3e:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8005b46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b4a:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8005b4c:	f7fd fd48 	bl	80035e0 <HAL_GetTick>
 8005b50:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005b5c:	d073      	beq.n	8005c46 <HAL_RCC_OscConfig+0x656>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b5e:	f7fd fd3f 	bl	80035e0 <HAL_GetTick>
 8005b62:	1b00      	subs	r0, r0, r4
 8005b64:	280a      	cmp	r0, #10
 8005b66:	d9f4      	bls.n	8005b52 <HAL_RCC_OscConfig+0x562>
            return HAL_TIMEOUT;
 8005b68:	2003      	movs	r0, #3
 8005b6a:	e069      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b70:	6813      	ldr	r3, [r2, #0]
 8005b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b76:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005b78:	f7fd fd32 	bl	80035e0 <HAL_GetTick>
 8005b7c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005b88:	d12a      	bne.n	8005be0 <HAL_RCC_OscConfig+0x5f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b8e:	68d3      	ldr	r3, [r2, #12]
 8005b90:	4934      	ldr	r1, [pc, #208]	; (8005c64 <HAL_RCC_OscConfig+0x674>)
 8005b92:	4019      	ands	r1, r3
 8005b94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b96:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005b98:	4303      	orrs	r3, r0
 8005b9a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005b9c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005ba0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005ba2:	4303      	orrs	r3, r0
 8005ba4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005ba6:	4303      	orrs	r3, r0
 8005ba8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005baa:	4303      	orrs	r3, r0
 8005bac:	430b      	orrs	r3, r1
 8005bae:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005bb0:	6813      	ldr	r3, [r2, #0]
 8005bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bb6:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bb8:	68d3      	ldr	r3, [r2, #12]
 8005bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bbe:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8005bc0:	f7fd fd0e 	bl	80035e0 <HAL_GetTick>
 8005bc4:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005bd0:	d137      	bne.n	8005c42 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd2:	f7fd fd05 	bl	80035e0 <HAL_GetTick>
 8005bd6:	1b00      	subs	r0, r0, r4
 8005bd8:	280a      	cmp	r0, #10
 8005bda:	d9f4      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x5d6>
            return HAL_TIMEOUT;
 8005bdc:	2003      	movs	r0, #3
 8005bde:	e02f      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be0:	f7fd fcfe 	bl	80035e0 <HAL_GetTick>
 8005be4:	1b40      	subs	r0, r0, r5
 8005be6:	280a      	cmp	r0, #10
 8005be8:	d9c9      	bls.n	8005b7e <HAL_RCC_OscConfig+0x58e>
            return HAL_TIMEOUT;
 8005bea:	2003      	movs	r0, #3
 8005bec:	e028      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d02b      	beq.n	8005c4a <HAL_RCC_OscConfig+0x65a>
        pll_config = RCC->PLLCFGR;
 8005bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf6:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005bf8:	f003 0103 	and.w	r1, r3, #3
 8005bfc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005bfe:	4291      	cmp	r1, r2
 8005c00:	d125      	bne.n	8005c4e <HAL_RCC_OscConfig+0x65e>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005c02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c08:	428a      	cmp	r2, r1
 8005c0a:	d122      	bne.n	8005c52 <HAL_RCC_OscConfig+0x662>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005c0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005c12:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005c16:	d11e      	bne.n	8005c56 <HAL_RCC_OscConfig+0x666>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005c18:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8005c1c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d11b      	bne.n	8005c5a <HAL_RCC_OscConfig+0x66a>
  return HAL_OK;
 8005c22:	2000      	movs	r0, #0
 8005c24:	e00c      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
    return HAL_ERROR;
 8005c26:	2001      	movs	r0, #1
}
 8005c28:	4770      	bx	lr
        return HAL_ERROR;
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
            return HAL_ERROR;
 8005c2e:	2001      	movs	r0, #1
 8005c30:	e006      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8005c32:	2001      	movs	r0, #1
 8005c34:	e004      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8005c36:	2001      	movs	r0, #1
 8005c38:	e002      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8005c3a:	2001      	movs	r0, #1
 8005c3c:	e000      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
  return HAL_OK;
 8005c3e:	2000      	movs	r0, #0
}
 8005c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8005c42:	2000      	movs	r0, #0
 8005c44:	e7fc      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
 8005c46:	2000      	movs	r0, #0
 8005c48:	e7fa      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	e7f8      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8005c4e:	2001      	movs	r0, #1
 8005c50:	e7f6      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
 8005c52:	2001      	movs	r0, #1
 8005c54:	e7f4      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
 8005c56:	2001      	movs	r0, #1
 8005c58:	e7f2      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
 8005c5a:	2001      	movs	r0, #1
 8005c5c:	e7f0      	b.n	8005c40 <HAL_RCC_OscConfig+0x650>
 8005c5e:	bf00      	nop
 8005c60:	58000400 	.word	0x58000400
 8005c64:	11c1808c 	.word	0x11c1808c

08005c68 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	f000 8127 	beq.w	8005ebc <HAL_RCC_ClockConfig+0x254>
{
 8005c6e:	b570      	push	{r4, r5, r6, lr}
 8005c70:	460c      	mov	r4, r1
 8005c72:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c74:	4b93      	ldr	r3, [pc, #588]	; (8005ec4 <HAL_RCC_ClockConfig+0x25c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	428b      	cmp	r3, r1
 8005c7e:	d32d      	bcc.n	8005cdc <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	f013 0f02 	tst.w	r3, #2
 8005c86:	d13f      	bne.n	8005d08 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	f013 0f20 	tst.w	r3, #32
 8005c8e:	d153      	bne.n	8005d38 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c96:	d16a      	bne.n	8005d6e <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	f013 0f04 	tst.w	r3, #4
 8005c9e:	f040 8083 	bne.w	8005da8 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca2:	682b      	ldr	r3, [r5, #0]
 8005ca4:	f013 0f08 	tst.w	r3, #8
 8005ca8:	f040 8097 	bne.w	8005dda <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cac:	682b      	ldr	r3, [r5, #0]
 8005cae:	f013 0f01 	tst.w	r3, #1
 8005cb2:	f000 80de 	beq.w	8005e72 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cb6:	686b      	ldr	r3, [r5, #4]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	f000 80a8 	beq.w	8005e0e <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	f000 80ad 	beq.w	8005e1e <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f040 80b2 	bne.w	8005e2e <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	f012 0f02 	tst.w	r2, #2
 8005cd4:	f040 80b1 	bne.w	8005e3a <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8005cd8:	2001      	movs	r0, #1
 8005cda:	e0ee      	b.n	8005eba <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cdc:	4a79      	ldr	r2, [pc, #484]	; (8005ec4 <HAL_RCC_ClockConfig+0x25c>)
 8005cde:	6813      	ldr	r3, [r2, #0]
 8005ce0:	f023 0307 	bic.w	r3, r3, #7
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005ce8:	f7fd fc7a 	bl	80035e0 <HAL_GetTick>
 8005cec:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cee:	4b75      	ldr	r3, [pc, #468]	; (8005ec4 <HAL_RCC_ClockConfig+0x25c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	42a3      	cmp	r3, r4
 8005cf8:	d0c2      	beq.n	8005c80 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005cfa:	f7fd fc71 	bl	80035e0 <HAL_GetTick>
 8005cfe:	1b80      	subs	r0, r0, r6
 8005d00:	2802      	cmp	r0, #2
 8005d02:	d9f4      	bls.n	8005cee <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8005d04:	2003      	movs	r0, #3
 8005d06:	e0d8      	b.n	8005eba <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005d08:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d0e:	688a      	ldr	r2, [r1, #8]
 8005d10:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005d14:	4313      	orrs	r3, r2
 8005d16:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005d18:	f7fd fc62 	bl	80035e0 <HAL_GetTick>
 8005d1c:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005d28:	d1ae      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d2a:	f7fd fc59 	bl	80035e0 <HAL_GetTick>
 8005d2e:	1b80      	subs	r0, r0, r6
 8005d30:	2802      	cmp	r0, #2
 8005d32:	d9f4      	bls.n	8005d1e <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8005d34:	2003      	movs	r0, #3
 8005d36:	e0c0      	b.n	8005eba <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005d38:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d3e:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8005d42:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8005d4c:	f7fd fc48 	bl	80035e0 <HAL_GetTick>
 8005d50:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005d5a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005d5e:	d197      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d60:	f7fd fc3e 	bl	80035e0 <HAL_GetTick>
 8005d64:	1b80      	subs	r0, r0, r6
 8005d66:	2802      	cmp	r0, #2
 8005d68:	d9f3      	bls.n	8005d52 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8005d6a:	2003      	movs	r0, #3
 8005d6c:	e0a5      	b.n	8005eba <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005d6e:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005d70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d74:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8005d78:	f023 030f 	bic.w	r3, r3, #15
 8005d7c:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8005d80:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8005d84:	f7fd fc2c 	bl	80035e0 <HAL_GetTick>
 8005d88:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005d92:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005d96:	f47f af7f 	bne.w	8005c98 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d9a:	f7fd fc21 	bl	80035e0 <HAL_GetTick>
 8005d9e:	1b80      	subs	r0, r0, r6
 8005da0:	2802      	cmp	r0, #2
 8005da2:	d9f2      	bls.n	8005d8a <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8005da4:	2003      	movs	r0, #3
 8005da6:	e088      	b.n	8005eba <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005da8:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005daa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dae:	688a      	ldr	r2, [r1, #8]
 8005db0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005db4:	4313      	orrs	r3, r2
 8005db6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005db8:	f7fd fc12 	bl	80035e0 <HAL_GetTick>
 8005dbc:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005dc8:	f47f af6b 	bne.w	8005ca2 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005dcc:	f7fd fc08 	bl	80035e0 <HAL_GetTick>
 8005dd0:	1b80      	subs	r0, r0, r6
 8005dd2:	2802      	cmp	r0, #2
 8005dd4:	d9f3      	bls.n	8005dbe <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8005dd6:	2003      	movs	r0, #3
 8005dd8:	e06f      	b.n	8005eba <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005dda:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005de0:	6893      	ldr	r3, [r2, #8]
 8005de2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005de6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005dea:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005dec:	f7fd fbf8 	bl	80035e0 <HAL_GetTick>
 8005df0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005dfc:	f47f af56 	bne.w	8005cac <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e00:	f7fd fbee 	bl	80035e0 <HAL_GetTick>
 8005e04:	1b80      	subs	r0, r0, r6
 8005e06:	2802      	cmp	r0, #2
 8005e08:	d9f3      	bls.n	8005df2 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8005e0a:	2003      	movs	r0, #3
 8005e0c:	e055      	b.n	8005eba <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005e0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005e18:	d10f      	bne.n	8005e3a <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	e04d      	b.n	8005eba <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005e1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e22:	6812      	ldr	r2, [r2, #0]
 8005e24:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005e28:	d107      	bne.n	8005e3a <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8005e2a:	2001      	movs	r0, #1
 8005e2c:	e045      	b.n	8005eba <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005e38:	d042      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005e3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e3e:	688a      	ldr	r2, [r1, #8]
 8005e40:	f022 0203 	bic.w	r2, r2, #3
 8005e44:	4313      	orrs	r3, r2
 8005e46:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005e48:	f7fd fbca 	bl	80035e0 <HAL_GetTick>
 8005e4c:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e58:	686a      	ldr	r2, [r5, #4]
 8005e5a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005e5e:	d008      	beq.n	8005e72 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e60:	f7fd fbbe 	bl	80035e0 <HAL_GetTick>
 8005e64:	1b80      	subs	r0, r0, r6
 8005e66:	f241 3388 	movw	r3, #5000	; 0x1388
 8005e6a:	4298      	cmp	r0, r3
 8005e6c:	d9ef      	bls.n	8005e4e <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8005e6e:	2003      	movs	r0, #3
 8005e70:	e023      	b.n	8005eba <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e72:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <HAL_RCC_ClockConfig+0x25c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	42a3      	cmp	r3, r4
 8005e7c:	d915      	bls.n	8005eaa <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7e:	4a11      	ldr	r2, [pc, #68]	; (8005ec4 <HAL_RCC_ClockConfig+0x25c>)
 8005e80:	6813      	ldr	r3, [r2, #0]
 8005e82:	f023 0307 	bic.w	r3, r3, #7
 8005e86:	4323      	orrs	r3, r4
 8005e88:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005e8a:	f7fd fba9 	bl	80035e0 <HAL_GetTick>
 8005e8e:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e90:	4b0c      	ldr	r3, [pc, #48]	; (8005ec4 <HAL_RCC_ClockConfig+0x25c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	42a3      	cmp	r3, r4
 8005e9a:	d006      	beq.n	8005eaa <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e9c:	f7fd fba0 	bl	80035e0 <HAL_GetTick>
 8005ea0:	1b40      	subs	r0, r0, r5
 8005ea2:	2802      	cmp	r0, #2
 8005ea4:	d9f4      	bls.n	8005e90 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8005ea6:	2003      	movs	r0, #3
 8005ea8:	e007      	b.n	8005eba <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005eaa:	f7ff fb91 	bl	80055d0 <HAL_RCC_GetHCLKFreq>
 8005eae:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <HAL_RCC_ClockConfig+0x260>)
 8005eb0:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8005eb2:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <HAL_RCC_ClockConfig+0x264>)
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	f7fd fb91 	bl	80035dc <HAL_InitTick>
}
 8005eba:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005ebc:	2001      	movs	r0, #1
}
 8005ebe:	4770      	bx	lr
        return HAL_ERROR;
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	e7fa      	b.n	8005eba <HAL_RCC_ClockConfig+0x252>
 8005ec4:	58004000 	.word	0x58004000
 8005ec8:	2000004c 	.word	0x2000004c
 8005ecc:	20000050 	.word	0x20000050

08005ed0 <HAL_RCC_GetPCLK1Freq>:
{
 8005ed0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ed2:	f7ff fb7d 	bl	80055d0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005ee0:	4a02      	ldr	r2, [pc, #8]	; (8005eec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005ee6:	40d8      	lsrs	r0, r3
 8005ee8:	bd08      	pop	{r3, pc}
 8005eea:	bf00      	nop
 8005eec:	08013f60 	.word	0x08013f60

08005ef0 <HAL_RCC_GetPCLK2Freq>:
{
 8005ef0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005ef2:	f7ff fb6d 	bl	80055d0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005f00:	4a02      	ldr	r2, [pc, #8]	; (8005f0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005f06:	40d8      	lsrs	r0, r3
 8005f08:	bd08      	pop	{r3, pc}
 8005f0a:	bf00      	nop
 8005f0c:	08013f60 	.word	0x08013f60

08005f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f14:	6803      	ldr	r3, [r0, #0]
 8005f16:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005f1a:	f040 80d6 	bne.w	80060ca <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005f1e:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	f013 0f01 	tst.w	r3, #1
 8005f26:	d00a      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f28:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f2e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005f32:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8005f36:	b292      	uxth	r2, r2
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	f013 0f02 	tst.w	r3, #2
 8005f44:	d00a      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f46:	68a2      	ldr	r2, [r4, #8]
 8005f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f4c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005f50:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8005f54:	b292      	uxth	r2, r2
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	f013 0f20 	tst.w	r3, #32
 8005f62:	d009      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f64:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f6a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005f7e:	d00c      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f80:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f86:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005f8a:	0c02      	lsrs	r2, r0, #16
 8005f8c:	0412      	lsls	r2, r2, #16
 8005f8e:	ea23 0302 	bic.w	r3, r3, r2
 8005f92:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005fa0:	d00c      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fa2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005fa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fa8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005fac:	0c02      	lsrs	r2, r0, #16
 8005fae:	0412      	lsls	r2, r2, #16
 8005fb0:	ea23 0302 	bic.w	r3, r3, r2
 8005fb4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005fc2:	d00c      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005fc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005fce:	0c02      	lsrs	r2, r0, #16
 8005fd0:	0412      	lsls	r2, r2, #16
 8005fd2:	ea23 0302 	bic.w	r3, r3, r2
 8005fd6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005fe4:	d00f      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fe6:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005fe8:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005fec:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005ff0:	0919      	lsrs	r1, r3, #4
 8005ff2:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8005ff6:	ea22 0201 	bic.w	r2, r2, r1
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	f013 0f80 	tst.w	r3, #128	; 0x80
 800600c:	d00f      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800600e:	69a3      	ldr	r3, [r4, #24]
 8006010:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8006014:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006018:	0919      	lsrs	r1, r3, #4
 800601a:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800601e:	ea22 0201 	bic.w	r2, r2, r1
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006034:	d00f      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006036:	69e3      	ldr	r3, [r4, #28]
 8006038:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800603c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006040:	0919      	lsrs	r1, r3, #4
 8006042:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006046:	ea22 0201 	bic.w	r2, r2, r1
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	f013 0f10 	tst.w	r3, #16
 800605c:	d00d      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800605e:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006064:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006068:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006072:	68e3      	ldr	r3, [r4, #12]
 8006074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006078:	d07f      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006080:	d00f      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006082:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006084:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006088:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800608c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8006090:	4313      	orrs	r3, r2
 8006092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006096:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006098:	b91b      	cbnz	r3, 80060a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800609a:	68cb      	ldr	r3, [r1, #12]
 800609c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060a0:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80060a8:	d00d      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80060ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80060b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80060be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060c4:	d05e      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80060c6:	4628      	mov	r0, r5
 80060c8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 80060ca:	f7ff f8f9 	bl	80052c0 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80060ce:	f7fd fa87 	bl	80035e0 <HAL_GetTick>
 80060d2:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80060d4:	4b2e      	ldr	r3, [pc, #184]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80060dc:	d106      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060de:	f7fd fa7f 	bl	80035e0 <HAL_GetTick>
 80060e2:	1b40      	subs	r0, r0, r5
 80060e4:	2802      	cmp	r0, #2
 80060e6:	d9f5      	bls.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        ret = HAL_TIMEOUT;
 80060e8:	2503      	movs	r5, #3
 80060ea:	e000      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x1de>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80060ec:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 80060ee:	2d00      	cmp	r5, #0
 80060f0:	f47f af16 	bne.w	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80060f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006100:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006102:	429a      	cmp	r2, r3
 8006104:	d024      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x240>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800610e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006112:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006116:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800611a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800611e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006122:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006126:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800612a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800612e:	f012 0f02 	tst.w	r2, #2
 8006132:	d10f      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x244>
      if (ret == HAL_OK)
 8006134:	2d00      	cmp	r5, #0
 8006136:	f47f aef3 	bne.w	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800613a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800613c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006140:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006144:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006148:	4313      	orrs	r3, r2
 800614a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800614e:	e6e7      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8006150:	2200      	movs	r2, #0
 8006152:	e7ec      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x21e>
        tickstart = HAL_GetTick();
 8006154:	f7fd fa44 	bl	80035e0 <HAL_GetTick>
 8006158:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800615a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006162:	f013 0f02 	tst.w	r3, #2
 8006166:	d1e5      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x224>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006168:	f7fd fa3a 	bl	80035e0 <HAL_GetTick>
 800616c:	1b80      	subs	r0, r0, r6
 800616e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006172:	4298      	cmp	r0, r3
 8006174:	d9f1      	bls.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x24a>
            ret = HAL_TIMEOUT;
 8006176:	2503      	movs	r5, #3
 8006178:	e7dc      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x224>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800617a:	68cb      	ldr	r3, [r1, #12]
 800617c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006180:	60cb      	str	r3, [r1, #12]
 8006182:	e77a      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006184:	68cb      	ldr	r3, [r1, #12]
 8006186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800618a:	60cb      	str	r3, [r1, #12]
 800618c:	e79b      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800618e:	bf00      	nop
 8006190:	58000400 	.word	0x58000400

08006194 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006194:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006198:	2b01      	cmp	r3, #1
 800619a:	d036      	beq.n	800620a <HAL_RTC_DeactivateAlarm+0x76>
 800619c:	2301      	movs	r3, #1
 800619e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061a2:	2302      	movs	r3, #2
 80061a4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061a8:	4b19      	ldr	r3, [pc, #100]	; (8006210 <HAL_RTC_DeactivateAlarm+0x7c>)
 80061aa:	22ca      	movs	r2, #202	; 0xca
 80061ac:	625a      	str	r2, [r3, #36]	; 0x24
 80061ae:	2253      	movs	r2, #83	; 0x53
 80061b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80061b2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80061b6:	d019      	beq.n	80061ec <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80061b8:	4b15      	ldr	r3, [pc, #84]	; (8006210 <HAL_RTC_DeactivateAlarm+0x7c>)
 80061ba:	699a      	ldr	r2, [r3, #24]
 80061bc:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80061c0:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80061c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80061c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80061ca:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80061cc:	f022 0202 	bic.w	r2, r2, #2
 80061d0:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80061d2:	2202      	movs	r2, #2
 80061d4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061d6:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <HAL_RTC_DeactivateAlarm+0x7c>)
 80061d8:	22ff      	movs	r2, #255	; 0xff
 80061da:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80061dc:	2301      	movs	r3, #1
 80061de:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061e2:	2300      	movs	r3, #0
 80061e4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80061e8:	4618      	mov	r0, r3
 80061ea:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80061f2:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80061f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80061fa:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80061fc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80061fe:	f022 0201 	bic.w	r2, r2, #1
 8006202:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006204:	2201      	movs	r2, #1
 8006206:	65da      	str	r2, [r3, #92]	; 0x5c
 8006208:	e7e5      	b.n	80061d6 <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 800620a:	2002      	movs	r0, #2
}
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40002800 	.word	0x40002800

08006214 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006218:	4b0d      	ldr	r3, [pc, #52]	; (8006250 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800621a:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800621c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800621e:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006220:	f015 0f01 	tst.w	r5, #1
 8006224:	d106      	bne.n	8006234 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006226:	f015 0f02 	tst.w	r5, #2
 800622a:	d109      	bne.n	8006240 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800622c:	2301      	movs	r3, #1
 800622e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006232:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006234:	4b06      	ldr	r3, [pc, #24]	; (8006250 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006236:	2201      	movs	r2, #1
 8006238:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800623a:	f7fd fb23 	bl	8003884 <HAL_RTC_AlarmAEventCallback>
 800623e:	e7f2      	b.n	8006226 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006240:	4b03      	ldr	r3, [pc, #12]	; (8006250 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006242:	2202      	movs	r2, #2
 8006244:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006246:	4620      	mov	r0, r4
 8006248:	f000 f9e4 	bl	8006614 <HAL_RTCEx_AlarmBEventCallback>
 800624c:	e7ee      	b.n	800622c <HAL_RTC_AlarmIRQHandler+0x18>
 800624e:	bf00      	nop
 8006250:	40002800 	.word	0x40002800

08006254 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006254:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006256:	4a0b      	ldr	r2, [pc, #44]	; (8006284 <HAL_RTC_WaitForSynchro+0x30>)
 8006258:	68d3      	ldr	r3, [r2, #12]
 800625a:	f023 0320 	bic.w	r3, r3, #32
 800625e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006260:	f7fd f9be 	bl	80035e0 <HAL_GetTick>
 8006264:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006266:	4b07      	ldr	r3, [pc, #28]	; (8006284 <HAL_RTC_WaitForSynchro+0x30>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f013 0f20 	tst.w	r3, #32
 800626e:	d107      	bne.n	8006280 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006270:	f7fd f9b6 	bl	80035e0 <HAL_GetTick>
 8006274:	1b00      	subs	r0, r0, r4
 8006276:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800627a:	d9f4      	bls.n	8006266 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 800627c:	2003      	movs	r0, #3
 800627e:	e000      	b.n	8006282 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006280:	2000      	movs	r0, #0
}
 8006282:	bd10      	pop	{r4, pc}
 8006284:	40002800 	.word	0x40002800

08006288 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006288:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800628a:	4b11      	ldr	r3, [pc, #68]	; (80062d0 <RTC_EnterInitMode+0x48>)
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006292:	d002      	beq.n	800629a <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8006294:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8006296:	4620      	mov	r0, r4
 8006298:	bd70      	pop	{r4, r5, r6, pc}
 800629a:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800629c:	4a0c      	ldr	r2, [pc, #48]	; (80062d0 <RTC_EnterInitMode+0x48>)
 800629e:	68d3      	ldr	r3, [r2, #12]
 80062a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a4:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80062a6:	f7fd f99b 	bl	80035e0 <HAL_GetTick>
 80062aa:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80062ac:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80062ae:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <RTC_EnterInitMode+0x48>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80062b6:	d1ee      	bne.n	8006296 <RTC_EnterInitMode+0xe>
 80062b8:	2c03      	cmp	r4, #3
 80062ba:	d0ec      	beq.n	8006296 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80062bc:	f7fd f990 	bl	80035e0 <HAL_GetTick>
 80062c0:	1b43      	subs	r3, r0, r5
 80062c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062c6:	d9f2      	bls.n	80062ae <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062c8:	2403      	movs	r4, #3
 80062ca:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 80062ce:	e7ee      	b.n	80062ae <RTC_EnterInitMode+0x26>
 80062d0:	40002800 	.word	0x40002800

080062d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80062d4:	b510      	push	{r4, lr}
 80062d6:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80062d8:	4b10      	ldr	r3, [pc, #64]	; (800631c <RTC_ExitInitMode+0x48>)
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062e0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	f013 0f20 	tst.w	r3, #32
 80062e8:	d106      	bne.n	80062f8 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062ea:	f7ff ffb3 	bl	8006254 <HAL_RTC_WaitForSynchro>
 80062ee:	b198      	cbz	r0, 8006318 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062f0:	2003      	movs	r0, #3
 80062f2:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80062f6:	e00f      	b.n	8006318 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80062f8:	4a08      	ldr	r2, [pc, #32]	; (800631c <RTC_ExitInitMode+0x48>)
 80062fa:	6993      	ldr	r3, [r2, #24]
 80062fc:	f023 0320 	bic.w	r3, r3, #32
 8006300:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006302:	f7ff ffa7 	bl	8006254 <HAL_RTC_WaitForSynchro>
 8006306:	b110      	cbz	r0, 800630e <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006308:	2003      	movs	r0, #3
 800630a:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800630e:	4a03      	ldr	r2, [pc, #12]	; (800631c <RTC_ExitInitMode+0x48>)
 8006310:	6993      	ldr	r3, [r2, #24]
 8006312:	f043 0320 	orr.w	r3, r3, #32
 8006316:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8006318:	bd10      	pop	{r4, pc}
 800631a:	bf00      	nop
 800631c:	40002800 	.word	0x40002800

08006320 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8006320:	2800      	cmp	r0, #0
 8006322:	d04a      	beq.n	80063ba <HAL_RTC_Init+0x9a>
{
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006328:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800632c:	b19b      	cbz	r3, 8006356 <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800632e:	2302      	movs	r3, #2
 8006330:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006334:	4b22      	ldr	r3, [pc, #136]	; (80063c0 <HAL_RTC_Init+0xa0>)
 8006336:	22ca      	movs	r2, #202	; 0xca
 8006338:	625a      	str	r2, [r3, #36]	; 0x24
 800633a:	2253      	movs	r2, #83	; 0x53
 800633c:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800633e:	4620      	mov	r0, r4
 8006340:	f7ff ffa2 	bl	8006288 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8006344:	b160      	cbz	r0, 8006360 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006346:	4b1e      	ldr	r3, [pc, #120]	; (80063c0 <HAL_RTC_Init+0xa0>)
 8006348:	22ff      	movs	r2, #255	; 0xff
 800634a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800634c:	b910      	cbnz	r0, 8006354 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 800634e:	2301      	movs	r3, #1
 8006350:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006354:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8006356:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 800635a:	f7fc ffa5 	bl	80032a8 <HAL_RTC_MspInit>
 800635e:	e7e6      	b.n	800632e <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006360:	4b17      	ldr	r3, [pc, #92]	; (80063c0 <HAL_RTC_Init+0xa0>)
 8006362:	699a      	ldr	r2, [r3, #24]
 8006364:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8006368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800636c:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800636e:	6999      	ldr	r1, [r3, #24]
 8006370:	6862      	ldr	r2, [r4, #4]
 8006372:	6920      	ldr	r0, [r4, #16]
 8006374:	4302      	orrs	r2, r0
 8006376:	69a0      	ldr	r0, [r4, #24]
 8006378:	4302      	orrs	r2, r0
 800637a:	430a      	orrs	r2, r1
 800637c:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800637e:	68e2      	ldr	r2, [r4, #12]
 8006380:	68a1      	ldr	r1, [r4, #8]
 8006382:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006386:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800638e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006390:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006392:	4301      	orrs	r1, r0
 8006394:	430a      	orrs	r2, r1
 8006396:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 8006398:	4620      	mov	r0, r4
 800639a:	f7ff ff9b 	bl	80062d4 <RTC_ExitInitMode>
      if (status == HAL_OK)
 800639e:	2800      	cmp	r0, #0
 80063a0:	d1d1      	bne.n	8006346 <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 80063a2:	4907      	ldr	r1, [pc, #28]	; (80063c0 <HAL_RTC_Init+0xa0>)
 80063a4:	698b      	ldr	r3, [r1, #24]
 80063a6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80063aa:	6a22      	ldr	r2, [r4, #32]
 80063ac:	69e5      	ldr	r5, [r4, #28]
 80063ae:	432a      	orrs	r2, r5
 80063b0:	6965      	ldr	r5, [r4, #20]
 80063b2:	432a      	orrs	r2, r5
 80063b4:	4313      	orrs	r3, r2
 80063b6:	618b      	str	r3, [r1, #24]
 80063b8:	e7c5      	b.n	8006346 <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 80063ba:	2001      	movs	r0, #1
}
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40002800 	.word	0x40002800

080063c4 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80063c4:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 80063c6:	2809      	cmp	r0, #9
 80063c8:	d903      	bls.n	80063d2 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 80063ca:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 80063cc:	380a      	subs	r0, #10
 80063ce:	b2c0      	uxtb	r0, r0
 80063d0:	e7f9      	b.n	80063c6 <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80063d2:	011b      	lsls	r3, r3, #4
 80063d4:	b2db      	uxtb	r3, r3
}
 80063d6:	4318      	orrs	r0, r3
 80063d8:	4770      	bx	lr
	...

080063dc <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80063dc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	f000 80b0 	beq.w	8006546 <HAL_RTC_SetAlarm_IT+0x16a>
{
 80063e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ea:	4605      	mov	r5, r0
 80063ec:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80063ee:	2301      	movs	r3, #1
 80063f0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063f4:	2302      	movs	r3, #2
 80063f6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80063fa:	4b54      	ldr	r3, [pc, #336]	; (800654c <HAL_RTC_SetAlarm_IT+0x170>)
 80063fc:	68de      	ldr	r6, [r3, #12]
 80063fe:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8006402:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006406:	d043      	beq.n	8006490 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8006408:	bb12      	cbnz	r2, 8006450 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006410:	d101      	bne.n	8006416 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006412:	2300      	movs	r3, #0
 8006414:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006416:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800641a:	7820      	ldrb	r0, [r4, #0]
 800641c:	f7ff ffd2 	bl	80063c4 <RTC_ByteToBcd2>
 8006420:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006422:	7860      	ldrb	r0, [r4, #1]
 8006424:	f7ff ffce 	bl	80063c4 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006428:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800642c:	78a0      	ldrb	r0, [r4, #2]
 800642e:	f7ff ffc9 	bl	80063c4 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006432:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006434:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006436:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800643a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800643e:	f7ff ffc1 	bl	80063c4 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006442:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006446:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006448:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800644a:	ea48 0000 	orr.w	r0, r8, r0
 800644e:	e020      	b.n	8006492 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006450:	6948      	ldr	r0, [r1, #20]
 8006452:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8006456:	d009      	beq.n	800646c <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006458:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800645c:	d006      	beq.n	800646c <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800645e:	4b3b      	ldr	r3, [pc, #236]	; (800654c <HAL_RTC_SetAlarm_IT+0x170>)
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006466:	d101      	bne.n	800646c <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006468:	2300      	movs	r3, #0
 800646a:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800646c:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800646e:	7863      	ldrb	r3, [r4, #1]
 8006470:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006476:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006478:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800647a:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800647c:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006480:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006484:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006488:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800648a:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800648c:	4318      	orrs	r0, r3
 800648e:	e000      	b.n	8006492 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8006490:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006492:	4b2e      	ldr	r3, [pc, #184]	; (800654c <HAL_RTC_SetAlarm_IT+0x170>)
 8006494:	22ca      	movs	r2, #202	; 0xca
 8006496:	625a      	str	r2, [r3, #36]	; 0x24
 8006498:	2253      	movs	r2, #83	; 0x53
 800649a:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800649c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800649e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a2:	d02a      	beq.n	80064fa <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80064a4:	4b29      	ldr	r3, [pc, #164]	; (800654c <HAL_RTC_SetAlarm_IT+0x170>)
 80064a6:	699a      	ldr	r2, [r3, #24]
 80064a8:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80064ac:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80064ae:	2202      	movs	r2, #2
 80064b0:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80064b2:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80064b6:	d040      	beq.n	800653a <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80064b8:	4b24      	ldr	r3, [pc, #144]	; (800654c <HAL_RTC_SetAlarm_IT+0x170>)
 80064ba:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80064bc:	69a2      	ldr	r2, [r4, #24]
 80064be:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80064c0:	6862      	ldr	r2, [r4, #4]
 80064c2:	4b22      	ldr	r3, [pc, #136]	; (800654c <HAL_RTC_SetAlarm_IT+0x170>)
 80064c4:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80064c6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80064c8:	f042 0202 	orr.w	r2, r2, #2
 80064cc:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80064ce:	699a      	ldr	r2, [r3, #24]
 80064d0:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 80064d4:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80064d6:	4a1e      	ldr	r2, [pc, #120]	; (8006550 <HAL_RTC_SetAlarm_IT+0x174>)
 80064d8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80064dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064e4:	4b19      	ldr	r3, [pc, #100]	; (800654c <HAL_RTC_SetAlarm_IT+0x170>)
 80064e6:	22ff      	movs	r2, #255	; 0xff
 80064e8:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 80064f0:	2000      	movs	r0, #0
 80064f2:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 80064f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80064fa:	4b14      	ldr	r3, [pc, #80]	; (800654c <HAL_RTC_SetAlarm_IT+0x170>)
 80064fc:	699a      	ldr	r2, [r3, #24]
 80064fe:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006502:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006504:	2201      	movs	r2, #1
 8006506:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006508:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800650c:	d00f      	beq.n	800652e <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800650e:	4b0f      	ldr	r3, [pc, #60]	; (800654c <HAL_RTC_SetAlarm_IT+0x170>)
 8006510:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006512:	69a2      	ldr	r2, [r4, #24]
 8006514:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006516:	6862      	ldr	r2, [r4, #4]
 8006518:	4b0c      	ldr	r3, [pc, #48]	; (800654c <HAL_RTC_SetAlarm_IT+0x170>)
 800651a:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800651c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006524:	699a      	ldr	r2, [r3, #24]
 8006526:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 800652a:	619a      	str	r2, [r3, #24]
 800652c:	e7d3      	b.n	80064d6 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800652e:	69a3      	ldr	r3, [r4, #24]
 8006530:	69e2      	ldr	r2, [r4, #28]
 8006532:	4313      	orrs	r3, r2
 8006534:	4a05      	ldr	r2, [pc, #20]	; (800654c <HAL_RTC_SetAlarm_IT+0x170>)
 8006536:	6453      	str	r3, [r2, #68]	; 0x44
 8006538:	e7ed      	b.n	8006516 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800653a:	69a3      	ldr	r3, [r4, #24]
 800653c:	69e2      	ldr	r2, [r4, #28]
 800653e:	4313      	orrs	r3, r2
 8006540:	4a02      	ldr	r2, [pc, #8]	; (800654c <HAL_RTC_SetAlarm_IT+0x170>)
 8006542:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006544:	e7bc      	b.n	80064c0 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8006546:	2002      	movs	r0, #2
}
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40002800 	.word	0x40002800
 8006550:	58000800 	.word	0x58000800

08006554 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006554:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d017      	beq.n	800658c <HAL_RTCEx_EnableBypassShadow+0x38>
 800655c:	2101      	movs	r1, #1
 800655e:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006562:	2302      	movs	r3, #2
 8006564:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006568:	4b09      	ldr	r3, [pc, #36]	; (8006590 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 800656a:	22ca      	movs	r2, #202	; 0xca
 800656c:	625a      	str	r2, [r3, #36]	; 0x24
 800656e:	2253      	movs	r2, #83	; 0x53
 8006570:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006572:	699a      	ldr	r2, [r3, #24]
 8006574:	f042 0220 	orr.w	r2, r2, #32
 8006578:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800657a:	22ff      	movs	r2, #255	; 0xff
 800657c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800657e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006582:	2300      	movs	r3, #0
 8006584:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006588:	4618      	mov	r0, r3
 800658a:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800658c:	2002      	movs	r0, #2
}
 800658e:	4770      	bx	lr
 8006590:	40002800 	.word	0x40002800

08006594 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006594:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006598:	2b01      	cmp	r3, #1
 800659a:	d020      	beq.n	80065de <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 800659c:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 800659e:	2101      	movs	r1, #1
 80065a0:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065a4:	2302      	movs	r3, #2
 80065a6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065aa:	4b0e      	ldr	r3, [pc, #56]	; (80065e4 <HAL_RTCEx_SetSSRU_IT+0x50>)
 80065ac:	22ca      	movs	r2, #202	; 0xca
 80065ae:	625a      	str	r2, [r3, #36]	; 0x24
 80065b0:	2253      	movs	r2, #83	; 0x53
 80065b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065ba:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80065bc:	4c0a      	ldr	r4, [pc, #40]	; (80065e8 <HAL_RTCEx_SetSSRU_IT+0x54>)
 80065be:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80065c2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80065c6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065ca:	22ff      	movs	r2, #255	; 0xff
 80065cc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80065ce:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80065d2:	2300      	movs	r3, #0
 80065d4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80065d8:	4618      	mov	r0, r3
}
 80065da:	bc10      	pop	{r4}
 80065dc:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80065de:	2002      	movs	r0, #2
}
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	40002800 	.word	0x40002800
 80065e8:	58000800 	.word	0x58000800

080065ec <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80065ec:	b510      	push	{r4, lr}
 80065ee:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80065f0:	4b07      	ldr	r3, [pc, #28]	; (8006610 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80065f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80065f8:	d103      	bne.n	8006602 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80065fa:	2301      	movs	r3, #1
 80065fc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006600:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8006602:	4b03      	ldr	r3, [pc, #12]	; (8006610 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006604:	2240      	movs	r2, #64	; 0x40
 8006606:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006608:	f7fd f940 	bl	800388c <HAL_RTCEx_SSRUEventCallback>
 800660c:	e7f5      	b.n	80065fa <HAL_RTCEx_SSRUIRQHandler+0xe>
 800660e:	bf00      	nop
 8006610:	40002800 	.word	0x40002800

08006614 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006614:	4770      	bx	lr

08006616 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006616:	0089      	lsls	r1, r1, #2
 8006618:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800661c:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006620:	600a      	str	r2, [r1, #0]
}
 8006622:	4770      	bx	lr

08006624 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006624:	0089      	lsls	r1, r1, #2
 8006626:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800662a:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800662e:	6808      	ldr	r0, [r1, #0]
}
 8006630:	4770      	bx	lr
	...

08006634 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006634:	4b07      	ldr	r3, [pc, #28]	; (8006654 <SUBGHZSPI_Init+0x20>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800663c:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800663e:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8006642:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006644:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006648:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006650:	601a      	str	r2, [r3, #0]
}
 8006652:	4770      	bx	lr
 8006654:	58010000 	.word	0x58010000

08006658 <HAL_SUBGHZ_Init>:
{
 8006658:	b530      	push	{r4, r5, lr}
 800665a:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 800665c:	2800      	cmp	r0, #0
 800665e:	d04e      	beq.n	80066fe <HAL_SUBGHZ_Init+0xa6>
 8006660:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006662:	7983      	ldrb	r3, [r0, #6]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d03b      	beq.n	80066e0 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006668:	2302      	movs	r3, #2
 800666a:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800666c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006670:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006674:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800667c:	4b21      	ldr	r3, [pc, #132]	; (8006704 <HAL_SUBGHZ_Init+0xac>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006684:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006688:	2264      	movs	r2, #100	; 0x64
 800668a:	fb02 f303 	mul.w	r3, r2, r3
 800668e:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8006690:	9b01      	ldr	r3, [sp, #4]
 8006692:	b34b      	cbz	r3, 80066e8 <HAL_SUBGHZ_Init+0x90>
    count--;
 8006694:	9b01      	ldr	r3, [sp, #4]
 8006696:	3b01      	subs	r3, #1
 8006698:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800669a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800669e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066a2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80066a6:	d1f3      	bne.n	8006690 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 80066a8:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80066aa:	4b17      	ldr	r3, [pc, #92]	; (8006708 <HAL_SUBGHZ_Init+0xb0>)
 80066ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80066b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(EXTI->IMR2, ExtiLine);
 80066b8:	4914      	ldr	r1, [pc, #80]	; (800670c <HAL_SUBGHZ_Init+0xb4>)
 80066ba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80066be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066c2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066cc:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80066ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066d2:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 80066d4:	b15d      	cbz	r5, 80066ee <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80066d6:	2301      	movs	r3, #1
 80066d8:	71a3      	strb	r3, [r4, #6]
}
 80066da:	4628      	mov	r0, r5
 80066dc:	b003      	add	sp, #12
 80066de:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 80066e0:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80066e2:	f7fc fe8b 	bl	80033fc <HAL_SUBGHZ_MspInit>
 80066e6:	e7bf      	b.n	8006668 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80066e8:	2501      	movs	r5, #1
 80066ea:	60a5      	str	r5, [r4, #8]
      break;
 80066ec:	e7dd      	b.n	80066aa <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80066ee:	6820      	ldr	r0, [r4, #0]
 80066f0:	f7ff ffa0 	bl	8006634 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80066f4:	2301      	movs	r3, #1
 80066f6:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60a3      	str	r3, [r4, #8]
 80066fc:	e7eb      	b.n	80066d6 <HAL_SUBGHZ_Init+0x7e>
    return status;
 80066fe:	2501      	movs	r5, #1
 8006700:	e7eb      	b.n	80066da <HAL_SUBGHZ_Init+0x82>
 8006702:	bf00      	nop
 8006704:	2000004c 	.word	0x2000004c
 8006708:	58000400 	.word	0x58000400
 800670c:	58000800 	.word	0x58000800

08006710 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006710:	b082      	sub	sp, #8
 8006712:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006714:	4b1a      	ldr	r3, [pc, #104]	; (8006780 <SUBGHZSPI_Transmit+0x70>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800671c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006720:	2064      	movs	r0, #100	; 0x64
 8006722:	fb00 f303 	mul.w	r3, r0, r3
 8006726:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006728:	9b01      	ldr	r3, [sp, #4]
 800672a:	b14b      	cbz	r3, 8006740 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800672c:	9b01      	ldr	r3, [sp, #4]
 800672e:	3b01      	subs	r3, #1
 8006730:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006732:	4b14      	ldr	r3, [pc, #80]	; (8006784 <SUBGHZSPI_Transmit+0x74>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f013 0f02 	tst.w	r3, #2
 800673a:	d0f5      	beq.n	8006728 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800673c:	2000      	movs	r0, #0
 800673e:	e001      	b.n	8006744 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006740:	2001      	movs	r0, #1
 8006742:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006744:	4b10      	ldr	r3, [pc, #64]	; (8006788 <SUBGHZSPI_Transmit+0x78>)
 8006746:	7019      	strb	r1, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006748:	4b0d      	ldr	r3, [pc, #52]	; (8006780 <SUBGHZSPI_Transmit+0x70>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006750:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006754:	2164      	movs	r1, #100	; 0x64
 8006756:	fb01 f303 	mul.w	r3, r1, r3
 800675a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800675c:	9b01      	ldr	r3, [sp, #4]
 800675e:	b143      	cbz	r3, 8006772 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006760:	9b01      	ldr	r3, [sp, #4]
 8006762:	3b01      	subs	r3, #1
 8006764:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006766:	4b07      	ldr	r3, [pc, #28]	; (8006784 <SUBGHZSPI_Transmit+0x74>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f013 0f01 	tst.w	r3, #1
 800676e:	d0f5      	beq.n	800675c <SUBGHZSPI_Transmit+0x4c>
 8006770:	e001      	b.n	8006776 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006772:	2001      	movs	r0, #1
 8006774:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006776:	4b03      	ldr	r3, [pc, #12]	; (8006784 <SUBGHZSPI_Transmit+0x74>)
 8006778:	68db      	ldr	r3, [r3, #12]

  return status;
}
 800677a:	b002      	add	sp, #8
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	2000004c 	.word	0x2000004c
 8006784:	58010000 	.word	0x58010000
 8006788:	5801000c 	.word	0x5801000c

0800678c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800678c:	b410      	push	{r4}
 800678e:	b083      	sub	sp, #12
 8006790:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006792:	4b1c      	ldr	r3, [pc, #112]	; (8006804 <SUBGHZSPI_Receive+0x78>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800679a:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800679e:	2064      	movs	r0, #100	; 0x64
 80067a0:	fb00 f303 	mul.w	r3, r0, r3
 80067a4:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80067a6:	9b01      	ldr	r3, [sp, #4]
 80067a8:	b14b      	cbz	r3, 80067be <SUBGHZSPI_Receive+0x32>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80067aa:	9b01      	ldr	r3, [sp, #4]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80067b0:	4b15      	ldr	r3, [pc, #84]	; (8006808 <SUBGHZSPI_Receive+0x7c>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f013 0f02 	tst.w	r3, #2
 80067b8:	d0f5      	beq.n	80067a6 <SUBGHZSPI_Receive+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 80067ba:	2000      	movs	r0, #0
 80067bc:	e001      	b.n	80067c2 <SUBGHZSPI_Receive+0x36>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80067be:	2001      	movs	r0, #1
 80067c0:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80067c2:	4b12      	ldr	r3, [pc, #72]	; (800680c <SUBGHZSPI_Receive+0x80>)
 80067c4:	24ff      	movs	r4, #255	; 0xff
 80067c6:	701c      	strb	r4, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80067c8:	4b0e      	ldr	r3, [pc, #56]	; (8006804 <SUBGHZSPI_Receive+0x78>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80067d0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80067d4:	2464      	movs	r4, #100	; 0x64
 80067d6:	fb04 f303 	mul.w	r3, r4, r3
 80067da:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80067dc:	9b01      	ldr	r3, [sp, #4]
 80067de:	b143      	cbz	r3, 80067f2 <SUBGHZSPI_Receive+0x66>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80067e0:	9b01      	ldr	r3, [sp, #4]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80067e6:	4b08      	ldr	r3, [pc, #32]	; (8006808 <SUBGHZSPI_Receive+0x7c>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f013 0f01 	tst.w	r3, #1
 80067ee:	d0f5      	beq.n	80067dc <SUBGHZSPI_Receive+0x50>
 80067f0:	e001      	b.n	80067f6 <SUBGHZSPI_Receive+0x6a>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80067f2:	2001      	movs	r0, #1
 80067f4:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80067f6:	4b04      	ldr	r3, [pc, #16]	; (8006808 <SUBGHZSPI_Receive+0x7c>)
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	700b      	strb	r3, [r1, #0]

  return status;
}
 80067fc:	b003      	add	sp, #12
 80067fe:	bc10      	pop	{r4}
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	2000004c 	.word	0x2000004c
 8006808:	58010000 	.word	0x58010000
 800680c:	5801000c 	.word	0x5801000c

08006810 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006810:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006812:	4b13      	ldr	r3, [pc, #76]	; (8006860 <SUBGHZ_WaitOnBusy+0x50>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800681a:	f3c3 434b 	ubfx	r3, r3, #17, #12
 800681e:	2264      	movs	r2, #100	; 0x64
 8006820:	fb02 f303 	mul.w	r3, r2, r3
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	e006      	b.n	8006836 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006828:	2302      	movs	r3, #2
 800682a:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 800682c:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 800682e:	b002      	add	sp, #8
 8006830:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006832:	4213      	tst	r3, r2
 8006834:	d012      	beq.n	800685c <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006836:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <SUBGHZ_WaitOnBusy+0x54>)
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	f013 0304 	ands.w	r3, r3, #4
 800683e:	d000      	beq.n	8006842 <SUBGHZ_WaitOnBusy+0x32>
 8006840:	2301      	movs	r3, #1
    if (count == 0U)
 8006842:	9a01      	ldr	r2, [sp, #4]
 8006844:	2a00      	cmp	r2, #0
 8006846:	d0ef      	beq.n	8006828 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8006848:	9a01      	ldr	r2, [sp, #4]
 800684a:	3a01      	subs	r2, #1
 800684c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800684e:	4a05      	ldr	r2, [pc, #20]	; (8006864 <SUBGHZ_WaitOnBusy+0x54>)
 8006850:	6952      	ldr	r2, [r2, #20]
 8006852:	f012 0202 	ands.w	r2, r2, #2
 8006856:	d0ec      	beq.n	8006832 <SUBGHZ_WaitOnBusy+0x22>
 8006858:	2201      	movs	r2, #1
 800685a:	e7ea      	b.n	8006832 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 800685c:	2000      	movs	r0, #0
 800685e:	e7e6      	b.n	800682e <SUBGHZ_WaitOnBusy+0x1e>
 8006860:	2000004c 	.word	0x2000004c
 8006864:	58000400 	.word	0x58000400

08006868 <SUBGHZ_CheckDeviceReady>:
{
 8006868:	b500      	push	{lr}
 800686a:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800686c:	7903      	ldrb	r3, [r0, #4]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d004      	beq.n	800687c <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006872:	f7ff ffcd 	bl	8006810 <SUBGHZ_WaitOnBusy>
}
 8006876:	b003      	add	sp, #12
 8006878:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 800687c:	4b0d      	ldr	r3, [pc, #52]	; (80068b4 <SUBGHZ_CheckDeviceReady+0x4c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006884:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8006888:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800688a:	4a0b      	ldr	r2, [pc, #44]	; (80068b8 <SUBGHZ_CheckDeviceReady+0x50>)
 800688c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006890:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8006898:	9b01      	ldr	r3, [sp, #4]
 800689a:	3b01      	subs	r3, #1
 800689c:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 800689e:	9b01      	ldr	r3, [sp, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1f9      	bne.n	8006898 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80068a4:	4a04      	ldr	r2, [pc, #16]	; (80068b8 <SUBGHZ_CheckDeviceReady+0x50>)
 80068a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80068aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80068b2:	e7de      	b.n	8006872 <SUBGHZ_CheckDeviceReady+0xa>
 80068b4:	2000004c 	.word	0x2000004c
 80068b8:	58000400 	.word	0x58000400

080068bc <HAL_SUBGHZ_WriteRegisters>:
{
 80068bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c0:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80068c2:	7980      	ldrb	r0, [r0, #6]
 80068c4:	fa5f f880 	uxtb.w	r8, r0
 80068c8:	f1b8 0f01 	cmp.w	r8, #1
 80068cc:	d13e      	bne.n	800694c <HAL_SUBGHZ_WriteRegisters+0x90>
 80068ce:	460c      	mov	r4, r1
 80068d0:	4617      	mov	r7, r2
 80068d2:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80068d4:	796b      	ldrb	r3, [r5, #5]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d03b      	beq.n	8006952 <HAL_SUBGHZ_WriteRegisters+0x96>
 80068da:	2301      	movs	r3, #1
 80068dc:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80068de:	2302      	movs	r3, #2
 80068e0:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80068e2:	4628      	mov	r0, r5
 80068e4:	f7ff ffc0 	bl	8006868 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80068e8:	4a1b      	ldr	r2, [pc, #108]	; (8006958 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80068ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80068ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80068f6:	210d      	movs	r1, #13
 80068f8:	4628      	mov	r0, r5
 80068fa:	f7ff ff09 	bl	8006710 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80068fe:	0a21      	lsrs	r1, r4, #8
 8006900:	4628      	mov	r0, r5
 8006902:	f7ff ff05 	bl	8006710 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006906:	b2e1      	uxtb	r1, r4
 8006908:	4628      	mov	r0, r5
 800690a:	f7ff ff01 	bl	8006710 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800690e:	2400      	movs	r4, #0
 8006910:	e005      	b.n	800691e <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006912:	5d39      	ldrb	r1, [r7, r4]
 8006914:	4628      	mov	r0, r5
 8006916:	f7ff fefb 	bl	8006710 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800691a:	3401      	adds	r4, #1
 800691c:	b2a4      	uxth	r4, r4
 800691e:	42b4      	cmp	r4, r6
 8006920:	d3f7      	bcc.n	8006912 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006922:	4a0d      	ldr	r2, [pc, #52]	; (8006958 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006924:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006930:	4628      	mov	r0, r5
 8006932:	f7ff ff6d 	bl	8006810 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006936:	68ab      	ldr	r3, [r5, #8]
 8006938:	b90b      	cbnz	r3, 800693e <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 800693a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800693e:	2301      	movs	r3, #1
 8006940:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006942:	2300      	movs	r3, #0
 8006944:	716b      	strb	r3, [r5, #5]
}
 8006946:	4640      	mov	r0, r8
 8006948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800694c:	f04f 0802 	mov.w	r8, #2
 8006950:	e7f9      	b.n	8006946 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8006952:	f04f 0802 	mov.w	r8, #2
 8006956:	e7f6      	b.n	8006946 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8006958:	58000400 	.word	0x58000400

0800695c <HAL_SUBGHZ_ReadRegisters>:
{
 800695c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006960:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006962:	7980      	ldrb	r0, [r0, #6]
 8006964:	fa5f f880 	uxtb.w	r8, r0
 8006968:	f1b8 0f01 	cmp.w	r8, #1
 800696c:	d141      	bne.n	80069f2 <HAL_SUBGHZ_ReadRegisters+0x96>
 800696e:	460c      	mov	r4, r1
 8006970:	4615      	mov	r5, r2
 8006972:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006974:	7973      	ldrb	r3, [r6, #5]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d03e      	beq.n	80069f8 <HAL_SUBGHZ_ReadRegisters+0x9c>
 800697a:	2301      	movs	r3, #1
 800697c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800697e:	4630      	mov	r0, r6
 8006980:	f7ff ff72 	bl	8006868 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006984:	4a1e      	ldr	r2, [pc, #120]	; (8006a00 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006986:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800698a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800698e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006992:	211d      	movs	r1, #29
 8006994:	4630      	mov	r0, r6
 8006996:	f7ff febb 	bl	8006710 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800699a:	0a21      	lsrs	r1, r4, #8
 800699c:	4630      	mov	r0, r6
 800699e:	f7ff feb7 	bl	8006710 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80069a2:	b2e1      	uxtb	r1, r4
 80069a4:	4630      	mov	r0, r6
 80069a6:	f7ff feb3 	bl	8006710 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80069aa:	2100      	movs	r1, #0
 80069ac:	4630      	mov	r0, r6
 80069ae:	f7ff feaf 	bl	8006710 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80069b2:	2400      	movs	r4, #0
 80069b4:	e006      	b.n	80069c4 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80069b6:	4629      	mov	r1, r5
 80069b8:	4630      	mov	r0, r6
 80069ba:	f7ff fee7 	bl	800678c <SUBGHZSPI_Receive>
      pData++;
 80069be:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80069c0:	3401      	adds	r4, #1
 80069c2:	b2a4      	uxth	r4, r4
 80069c4:	42bc      	cmp	r4, r7
 80069c6:	d3f6      	bcc.n	80069b6 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80069c8:	4a0d      	ldr	r2, [pc, #52]	; (8006a00 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80069ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80069ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80069d6:	4630      	mov	r0, r6
 80069d8:	f7ff ff1a 	bl	8006810 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80069dc:	68b3      	ldr	r3, [r6, #8]
 80069de:	b90b      	cbnz	r3, 80069e4 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 80069e0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80069e4:	2301      	movs	r3, #1
 80069e6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80069e8:	2300      	movs	r3, #0
 80069ea:	7173      	strb	r3, [r6, #5]
}
 80069ec:	4640      	mov	r0, r8
 80069ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80069f2:	f04f 0802 	mov.w	r8, #2
 80069f6:	e7f9      	b.n	80069ec <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 80069f8:	f04f 0802 	mov.w	r8, #2
 80069fc:	e7f6      	b.n	80069ec <HAL_SUBGHZ_ReadRegisters+0x90>
 80069fe:	bf00      	nop
 8006a00:	58000400 	.word	0x58000400

08006a04 <HAL_SUBGHZ_ExecSetCmd>:
{
 8006a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a08:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006a0a:	7980      	ldrb	r0, [r0, #6]
 8006a0c:	fa5f f980 	uxtb.w	r9, r0
 8006a10:	f1b9 0f01 	cmp.w	r9, #1
 8006a14:	d143      	bne.n	8006a9e <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8006a16:	4688      	mov	r8, r1
 8006a18:	4617      	mov	r7, r2
 8006a1a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006a1c:	796b      	ldrb	r3, [r5, #5]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d040      	beq.n	8006aa4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8006a22:	2301      	movs	r3, #1
 8006a24:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006a26:	4628      	mov	r0, r5
 8006a28:	f7ff ff1e 	bl	8006868 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006a2c:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8006a30:	d005      	beq.n	8006a3e <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8006a32:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8006a36:	d002      	beq.n	8006a3e <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	712b      	strb	r3, [r5, #4]
 8006a3c:	e001      	b.n	8006a42 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006a42:	4a1a      	ldr	r2, [pc, #104]	; (8006aac <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006a44:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006a48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006a50:	4641      	mov	r1, r8
 8006a52:	4628      	mov	r0, r5
 8006a54:	f7ff fe5c 	bl	8006710 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006a58:	2400      	movs	r4, #0
 8006a5a:	e005      	b.n	8006a68 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006a5c:	5d39      	ldrb	r1, [r7, r4]
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f7ff fe56 	bl	8006710 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006a64:	3401      	adds	r4, #1
 8006a66:	b2a4      	uxth	r4, r4
 8006a68:	42b4      	cmp	r4, r6
 8006a6a:	d3f7      	bcc.n	8006a5c <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006a6c:	4a0f      	ldr	r2, [pc, #60]	; (8006aac <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006a6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8006a7a:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8006a7e:	d10a      	bne.n	8006a96 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006a80:	68ab      	ldr	r3, [r5, #8]
 8006a82:	b90b      	cbnz	r3, 8006a88 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8006a84:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	716b      	strb	r3, [r5, #5]
}
 8006a90:	4648      	mov	r0, r9
 8006a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006a96:	4628      	mov	r0, r5
 8006a98:	f7ff feba 	bl	8006810 <SUBGHZ_WaitOnBusy>
 8006a9c:	e7f0      	b.n	8006a80 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8006a9e:	f04f 0902 	mov.w	r9, #2
 8006aa2:	e7f5      	b.n	8006a90 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8006aa4:	f04f 0902 	mov.w	r9, #2
 8006aa8:	e7f2      	b.n	8006a90 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8006aaa:	bf00      	nop
 8006aac:	58000400 	.word	0x58000400

08006ab0 <HAL_SUBGHZ_ExecGetCmd>:
{
 8006ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ab6:	7980      	ldrb	r0, [r0, #6]
 8006ab8:	fa5f f880 	uxtb.w	r8, r0
 8006abc:	f1b8 0f01 	cmp.w	r8, #1
 8006ac0:	d139      	bne.n	8006b36 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	4615      	mov	r5, r2
 8006ac6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006ac8:	7973      	ldrb	r3, [r6, #5]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d036      	beq.n	8006b3c <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f7ff fec8 	bl	8006868 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ad8:	4a1a      	ldr	r2, [pc, #104]	; (8006b44 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006ada:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ade:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4630      	mov	r0, r6
 8006aea:	f7ff fe11 	bl	8006710 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006aee:	2100      	movs	r1, #0
 8006af0:	4630      	mov	r0, r6
 8006af2:	f7ff fe0d 	bl	8006710 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006af6:	2400      	movs	r4, #0
 8006af8:	e006      	b.n	8006b08 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006afa:	4629      	mov	r1, r5
 8006afc:	4630      	mov	r0, r6
 8006afe:	f7ff fe45 	bl	800678c <SUBGHZSPI_Receive>
      pData++;
 8006b02:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006b04:	3401      	adds	r4, #1
 8006b06:	b2a4      	uxth	r4, r4
 8006b08:	42bc      	cmp	r4, r7
 8006b0a:	d3f6      	bcc.n	8006afa <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006b0c:	4a0d      	ldr	r2, [pc, #52]	; (8006b44 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006b0e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f7ff fe78 	bl	8006810 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006b20:	68b3      	ldr	r3, [r6, #8]
 8006b22:	b90b      	cbnz	r3, 8006b28 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8006b24:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	7173      	strb	r3, [r6, #5]
}
 8006b30:	4640      	mov	r0, r8
 8006b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006b36:	f04f 0802 	mov.w	r8, #2
 8006b3a:	e7f9      	b.n	8006b30 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8006b3c:	f04f 0802 	mov.w	r8, #2
 8006b40:	e7f6      	b.n	8006b30 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8006b42:	bf00      	nop
 8006b44:	58000400 	.word	0x58000400

08006b48 <HAL_SUBGHZ_IRQHandler>:
{
 8006b48:	b530      	push	{r4, r5, lr}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	4605      	mov	r5, r0
  uint8_t tmpisr[2] = {0};
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8006b54:	2302      	movs	r3, #2
 8006b56:	aa01      	add	r2, sp, #4
 8006b58:	2112      	movs	r1, #18
 8006b5a:	f7ff ffa9 	bl	8006ab0 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8006b5e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8) | tmpisr[1];
 8006b62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006b66:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006b6a:	f013 0f01 	tst.w	r3, #1
 8006b6e:	d126      	bne.n	8006bbe <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006b70:	f014 0f02 	tst.w	r4, #2
 8006b74:	d127      	bne.n	8006bc6 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006b76:	f014 0f04 	tst.w	r4, #4
 8006b7a:	d128      	bne.n	8006bce <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006b7c:	f014 0f08 	tst.w	r4, #8
 8006b80:	d129      	bne.n	8006bd6 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006b82:	f014 0f10 	tst.w	r4, #16
 8006b86:	d12a      	bne.n	8006bde <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006b88:	f014 0f20 	tst.w	r4, #32
 8006b8c:	d12b      	bne.n	8006be6 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006b8e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8006b92:	d12c      	bne.n	8006bee <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006b94:	f014 0f80 	tst.w	r4, #128	; 0x80
 8006b98:	d006      	beq.n	8006ba8 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006b9a:	f414 7f80 	tst.w	r4, #256	; 0x100
 8006b9e:	d02a      	beq.n	8006bf6 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f00c f808 	bl	8012bb8 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006ba8:	f414 7f00 	tst.w	r4, #512	; 0x200
 8006bac:	d128      	bne.n	8006c00 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8006bae:	2302      	movs	r3, #2
 8006bb0:	aa01      	add	r2, sp, #4
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f7ff ff25 	bl	8006a04 <HAL_SUBGHZ_ExecSetCmd>
}
 8006bba:	b003      	add	sp, #12
 8006bbc:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	f00b ffe2 	bl	8012b88 <HAL_SUBGHZ_TxCpltCallback>
 8006bc4:	e7d4      	b.n	8006b70 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f00b ffe6 	bl	8012b98 <HAL_SUBGHZ_RxCpltCallback>
 8006bcc:	e7d3      	b.n	8006b76 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f00c f816 	bl	8012c00 <HAL_SUBGHZ_PreambleDetectedCallback>
 8006bd4:	e7d2      	b.n	8006b7c <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f00c f81a 	bl	8012c10 <HAL_SUBGHZ_SyncWordValidCallback>
 8006bdc:	e7d1      	b.n	8006b82 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006bde:	4628      	mov	r0, r5
 8006be0:	f00c f81e 	bl	8012c20 <HAL_SUBGHZ_HeaderValidCallback>
 8006be4:	e7d0      	b.n	8006b88 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006be6:	4628      	mov	r0, r5
 8006be8:	f00c f802 	bl	8012bf0 <HAL_SUBGHZ_HeaderErrorCallback>
 8006bec:	e7cf      	b.n	8006b8e <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f00b ffda 	bl	8012ba8 <HAL_SUBGHZ_CRCErrorCallback>
 8006bf4:	e7ce      	b.n	8006b94 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f00b ffdd 	bl	8012bb8 <HAL_SUBGHZ_CADStatusCallback>
 8006bfe:	e7d3      	b.n	8006ba8 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006c00:	4628      	mov	r0, r5
 8006c02:	f00b ffeb 	bl	8012bdc <HAL_SUBGHZ_RxTxTimeoutCallback>
 8006c06:	e7d2      	b.n	8006bae <HAL_SUBGHZ_IRQHandler+0x66>

08006c08 <HAL_SUBGHZ_WriteBuffer>:
{
 8006c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006c0e:	7980      	ldrb	r0, [r0, #6]
 8006c10:	fa5f f880 	uxtb.w	r8, r0
 8006c14:	f1b8 0f01 	cmp.w	r8, #1
 8006c18:	d138      	bne.n	8006c8c <HAL_SUBGHZ_WriteBuffer+0x84>
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	4617      	mov	r7, r2
 8006c1e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006c20:	796b      	ldrb	r3, [r5, #5]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d035      	beq.n	8006c92 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8006c26:	2301      	movs	r3, #1
 8006c28:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f7ff fe1c 	bl	8006868 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c30:	4a19      	ldr	r2, [pc, #100]	; (8006c98 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8006c32:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006c36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006c3e:	210e      	movs	r1, #14
 8006c40:	4628      	mov	r0, r5
 8006c42:	f7ff fd65 	bl	8006710 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006c46:	4621      	mov	r1, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f7ff fd61 	bl	8006710 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006c4e:	2400      	movs	r4, #0
 8006c50:	e005      	b.n	8006c5e <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006c52:	5d39      	ldrb	r1, [r7, r4]
 8006c54:	4628      	mov	r0, r5
 8006c56:	f7ff fd5b 	bl	8006710 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006c5a:	3401      	adds	r4, #1
 8006c5c:	b2a4      	uxth	r4, r4
 8006c5e:	42b4      	cmp	r4, r6
 8006c60:	d3f7      	bcc.n	8006c52 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c62:	4a0d      	ldr	r2, [pc, #52]	; (8006c98 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8006c64:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006c70:	4628      	mov	r0, r5
 8006c72:	f7ff fdcd 	bl	8006810 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006c76:	68ab      	ldr	r3, [r5, #8]
 8006c78:	b90b      	cbnz	r3, 8006c7e <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8006c7a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006c82:	2300      	movs	r3, #0
 8006c84:	716b      	strb	r3, [r5, #5]
}
 8006c86:	4640      	mov	r0, r8
 8006c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006c8c:	f04f 0802 	mov.w	r8, #2
 8006c90:	e7f9      	b.n	8006c86 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8006c92:	f04f 0802 	mov.w	r8, #2
 8006c96:	e7f6      	b.n	8006c86 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8006c98:	58000400 	.word	0x58000400

08006c9c <HAL_SUBGHZ_ReadBuffer>:
{
 8006c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ca2:	7980      	ldrb	r0, [r0, #6]
 8006ca4:	fa5f f880 	uxtb.w	r8, r0
 8006ca8:	f1b8 0f01 	cmp.w	r8, #1
 8006cac:	d13d      	bne.n	8006d2a <HAL_SUBGHZ_ReadBuffer+0x8e>
 8006cae:	460c      	mov	r4, r1
 8006cb0:	4615      	mov	r5, r2
 8006cb2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006cb4:	7973      	ldrb	r3, [r6, #5]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d03a      	beq.n	8006d30 <HAL_SUBGHZ_ReadBuffer+0x94>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f7ff fdd2 	bl	8006868 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006cc4:	4a1c      	ldr	r2, [pc, #112]	; (8006d38 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8006cc6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006cca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006cd2:	211e      	movs	r1, #30
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f7ff fd1b 	bl	8006710 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006cda:	4621      	mov	r1, r4
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f7ff fd17 	bl	8006710 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f7ff fd13 	bl	8006710 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006cea:	2400      	movs	r4, #0
 8006cec:	e006      	b.n	8006cfc <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006cee:	4629      	mov	r1, r5
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f7ff fd4b 	bl	800678c <SUBGHZSPI_Receive>
      pData++;
 8006cf6:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006cf8:	3401      	adds	r4, #1
 8006cfa:	b2a4      	uxth	r4, r4
 8006cfc:	42bc      	cmp	r4, r7
 8006cfe:	d3f6      	bcc.n	8006cee <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d00:	4a0d      	ldr	r2, [pc, #52]	; (8006d38 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8006d02:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f7ff fd7e 	bl	8006810 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d14:	68b3      	ldr	r3, [r6, #8]
 8006d16:	b90b      	cbnz	r3, 8006d1c <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8006d18:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006d20:	2300      	movs	r3, #0
 8006d22:	7173      	strb	r3, [r6, #5]
}
 8006d24:	4640      	mov	r0, r8
 8006d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006d2a:	f04f 0802 	mov.w	r8, #2
 8006d2e:	e7f9      	b.n	8006d24 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8006d30:	f04f 0802 	mov.w	r8, #2
 8006d34:	e7f6      	b.n	8006d24 <HAL_SUBGHZ_ReadBuffer+0x88>
 8006d36:	bf00      	nop
 8006d38:	58000400 	.word	0x58000400

08006d3c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006d3c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	e852 3f00 	ldrex	r3, [r2]
 8006d42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	e842 3100 	strex	r1, r3, [r2]
 8006d4a:	2900      	cmp	r1, #0
 8006d4c:	d1f6      	bne.n	8006d3c <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006d4e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	f102 0308 	add.w	r3, r2, #8
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	3208      	adds	r2, #8
 8006d5e:	e842 3100 	strex	r1, r3, [r2]
 8006d62:	2900      	cmp	r1, #0
 8006d64:	d1f3      	bne.n	8006d4e <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d66:	2320      	movs	r3, #32
 8006d68:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8006d6c:	4770      	bx	lr

08006d6e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d6e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	e852 3f00 	ldrex	r3, [r2]
 8006d74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d78:	e842 3100 	strex	r1, r3, [r2]
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	d1f6      	bne.n	8006d6e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d80:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d82:	f102 0308 	add.w	r3, r2, #8
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d8e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	3208      	adds	r2, #8
 8006d94:	e842 3100 	strex	r1, r3, [r2]
 8006d98:	2900      	cmp	r1, #0
 8006d9a:	d1f1      	bne.n	8006d80 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d9c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d006      	beq.n	8006db0 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006da2:	2320      	movs	r3, #32
 8006da4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da8:	2300      	movs	r3, #0
 8006daa:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dac:	6703      	str	r3, [r0, #112]	; 0x70
}
 8006dae:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	e852 3f00 	ldrex	r3, [r2]
 8006db6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	e842 3100 	strex	r1, r3, [r2]
 8006dbe:	2900      	cmp	r1, #0
 8006dc0:	d1f6      	bne.n	8006db0 <UART_EndRxTransfer+0x42>
 8006dc2:	e7ee      	b.n	8006da2 <UART_EndRxTransfer+0x34>

08006dc4 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8006dc4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	d14c      	bne.n	8006e66 <HAL_UART_Transmit_DMA+0xa2>
{
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8006dd0:	2900      	cmp	r1, #0
 8006dd2:	d04a      	beq.n	8006e6a <HAL_UART_Transmit_DMA+0xa6>
 8006dd4:	2a00      	cmp	r2, #0
 8006dd6:	d04a      	beq.n	8006e6e <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8006dd8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d048      	beq.n	8006e72 <HAL_UART_Transmit_DMA+0xae>
 8006de0:	2301      	movs	r3, #1
 8006de2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8006de6:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006de8:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8006dec:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df0:	2300      	movs	r3, #0
 8006df2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006df6:	2321      	movs	r3, #33	; 0x21
 8006df8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8006dfc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006dfe:	b1f3      	cbz	r3, 8006e3e <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006e00:	491d      	ldr	r1, [pc, #116]	; (8006e78 <HAL_UART_Transmit_DMA+0xb4>)
 8006e02:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006e04:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006e06:	491d      	ldr	r1, [pc, #116]	; (8006e7c <HAL_UART_Transmit_DMA+0xb8>)
 8006e08:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006e0a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006e0c:	491c      	ldr	r1, [pc, #112]	; (8006e80 <HAL_UART_Transmit_DMA+0xbc>)
 8006e0e:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8006e10:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006e12:	2100      	movs	r1, #0
 8006e14:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006e16:	6801      	ldr	r1, [r0, #0]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	f101 0228 	add.w	r2, r1, #40	; 0x28
 8006e1e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006e20:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8006e22:	f7fd ffd1 	bl	8004dc8 <HAL_DMA_Start_IT>
 8006e26:	b150      	cbz	r0, 8006e3e <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e28:	2310      	movs	r3, #16
 8006e2a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8006e34:	2320      	movs	r3, #32
 8006e36:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	e012      	b.n	8006e64 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	2240      	movs	r2, #64	; 0x40
 8006e42:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8006e44:	2300      	movs	r3, #0
 8006e46:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e4a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	f102 0308 	add.w	r3, r2, #8
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	3208      	adds	r2, #8
 8006e5a:	e842 3100 	strex	r1, r3, [r2]
 8006e5e:	2900      	cmp	r1, #0
 8006e60:	d1f3      	bne.n	8006e4a <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8006e62:	2000      	movs	r0, #0
}
 8006e64:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006e66:	2002      	movs	r0, #2
}
 8006e68:	4770      	bx	lr
      return HAL_ERROR;
 8006e6a:	2001      	movs	r0, #1
 8006e6c:	e7fa      	b.n	8006e64 <HAL_UART_Transmit_DMA+0xa0>
 8006e6e:	2001      	movs	r0, #1
 8006e70:	e7f8      	b.n	8006e64 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8006e72:	2002      	movs	r0, #2
 8006e74:	e7f6      	b.n	8006e64 <HAL_UART_Transmit_DMA+0xa0>
 8006e76:	bf00      	nop
 8006e78:	08006e85 	.word	0x08006e85
 8006e7c:	08006ef3 	.word	0x08006ef3
 8006e80:	08006eff 	.word	0x08006eff

08006e84 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e84:	b508      	push	{r3, lr}
 8006e86:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e88:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f013 0f20 	tst.w	r3, #32
 8006e92:	d118      	bne.n	8006ec6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e9a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	f102 0308 	add.w	r3, r2, #8
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	3208      	adds	r2, #8
 8006eaa:	e842 3100 	strex	r1, r3, [r2]
 8006eae:	2900      	cmp	r1, #0
 8006eb0:	d1f3      	bne.n	8006e9a <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eb2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	e852 3f00 	ldrex	r3, [r2]
 8006eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	e842 3100 	strex	r1, r3, [r2]
 8006ec0:	2900      	cmp	r1, #0
 8006ec2:	d1f6      	bne.n	8006eb2 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ec4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8006ec6:	f7fc fe15 	bl	8003af4 <HAL_UART_TxCpltCallback>
}
 8006eca:	e7fb      	b.n	8006ec4 <UART_DMATransmitCplt+0x40>

08006ecc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ecc:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ece:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	e852 3f00 	ldrex	r3, [r2]
 8006ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	e842 3100 	strex	r1, r3, [r2]
 8006edc:	2900      	cmp	r1, #0
 8006ede:	d1f6      	bne.n	8006ece <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ee0:	2320      	movs	r3, #32
 8006ee2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006eea:	f7fc fe03 	bl	8003af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eee:	bd08      	pop	{r3, pc}

08006ef0 <HAL_UART_TxHalfCpltCallback>:
}
 8006ef0:	4770      	bx	lr

08006ef2 <UART_DMATxHalfCplt>:
{
 8006ef2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8006ef4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006ef6:	f7ff fffb 	bl	8006ef0 <HAL_UART_TxHalfCpltCallback>
}
 8006efa:	bd08      	pop	{r3, pc}

08006efc <HAL_UART_ErrorCallback>:
}
 8006efc:	4770      	bx	lr

08006efe <UART_DMAError>:
{
 8006efe:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f00:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006f02:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006f06:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f12:	d001      	beq.n	8006f18 <UART_DMAError+0x1a>
 8006f14:	2a21      	cmp	r2, #33	; 0x21
 8006f16:	d010      	beq.n	8006f3a <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f20:	d001      	beq.n	8006f26 <UART_DMAError+0x28>
 8006f22:	2d22      	cmp	r5, #34	; 0x22
 8006f24:	d010      	beq.n	8006f48 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f26:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006f2a:	f043 0310 	orr.w	r3, r3, #16
 8006f2e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8006f32:	4620      	mov	r0, r4
 8006f34:	f7ff ffe2 	bl	8006efc <HAL_UART_ErrorCallback>
}
 8006f38:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006f40:	4620      	mov	r0, r4
 8006f42:	f7ff fefb 	bl	8006d3c <UART_EndTxTransfer>
 8006f46:	e7e7      	b.n	8006f18 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f7ff ff0d 	bl	8006d6e <UART_EndRxTransfer>
 8006f54:	e7e7      	b.n	8006f26 <UART_DMAError+0x28>

08006f56 <UART_DMAAbortOnError>:
{
 8006f56:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f58:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006f60:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8006f64:	f7ff ffca 	bl	8006efc <HAL_UART_ErrorCallback>
}
 8006f68:	bd08      	pop	{r3, pc}

08006f6a <HAL_UARTEx_RxEventCallback>:
}
 8006f6a:	4770      	bx	lr

08006f6c <HAL_UART_IRQHandler>:
{
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f70:	6801      	ldr	r1, [r0, #0]
 8006f72:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f74:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f76:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f78:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8006f7c:	401a      	ands	r2, r3
 8006f7e:	d108      	bne.n	8006f92 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f80:	f013 0f20 	tst.w	r3, #32
 8006f84:	d005      	beq.n	8006f92 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f86:	f010 0f20 	tst.w	r0, #32
 8006f8a:	d134      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f8c:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8006f90:	d131      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8006f92:	b12a      	cbz	r2, 8006fa0 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f94:	4abd      	ldr	r2, [pc, #756]	; (800728c <HAL_UART_IRQHandler+0x320>)
 8006f96:	402a      	ands	r2, r5
 8006f98:	d133      	bne.n	8007002 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f9a:	4ebd      	ldr	r6, [pc, #756]	; (8007290 <HAL_UART_IRQHandler+0x324>)
 8006f9c:	4230      	tst	r0, r6
 8006f9e:	d130      	bne.n	8007002 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006fa2:	2a01      	cmp	r2, #1
 8006fa4:	f000 80c3 	beq.w	800712e <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fa8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006fac:	d003      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x4a>
 8006fae:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8006fb2:	f040 8155 	bne.w	8007260 <HAL_UART_IRQHandler+0x2f4>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006fb6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006fba:	d007      	beq.n	8006fcc <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006fbc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006fc0:	f040 8155 	bne.w	800726e <HAL_UART_IRQHandler+0x302>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006fc4:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8006fc8:	f040 8151 	bne.w	800726e <HAL_UART_IRQHandler+0x302>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fcc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006fd0:	d003      	beq.n	8006fda <HAL_UART_IRQHandler+0x6e>
 8006fd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fd6:	f040 8151 	bne.w	800727c <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006fda:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006fde:	d003      	beq.n	8006fe8 <HAL_UART_IRQHandler+0x7c>
 8006fe0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006fe4:	f040 814e 	bne.w	8007284 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006fe8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006fec:	d002      	beq.n	8006ff4 <HAL_UART_IRQHandler+0x88>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f2c0 8152 	blt.w	8007298 <HAL_UART_IRQHandler+0x32c>
}
 8006ff4:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8006ff6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0fb      	beq.n	8006ff4 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	4798      	blx	r3
      return;
 8007000:	e7f8      	b.n	8006ff4 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007002:	f013 0f01 	tst.w	r3, #1
 8007006:	d009      	beq.n	800701c <HAL_UART_IRQHandler+0xb0>
 8007008:	f410 7f80 	tst.w	r0, #256	; 0x100
 800700c:	d006      	beq.n	800701c <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800700e:	2601      	movs	r6, #1
 8007010:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007012:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007016:	4331      	orrs	r1, r6
 8007018:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800701c:	f013 0f02 	tst.w	r3, #2
 8007020:	d00b      	beq.n	800703a <HAL_UART_IRQHandler+0xce>
 8007022:	f015 0f01 	tst.w	r5, #1
 8007026:	d008      	beq.n	800703a <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007028:	6821      	ldr	r1, [r4, #0]
 800702a:	2602      	movs	r6, #2
 800702c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800702e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007032:	f041 0104 	orr.w	r1, r1, #4
 8007036:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800703a:	f013 0f04 	tst.w	r3, #4
 800703e:	d00b      	beq.n	8007058 <HAL_UART_IRQHandler+0xec>
 8007040:	f015 0f01 	tst.w	r5, #1
 8007044:	d008      	beq.n	8007058 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007046:	6821      	ldr	r1, [r4, #0]
 8007048:	2604      	movs	r6, #4
 800704a:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800704c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007050:	f041 0102 	orr.w	r1, r1, #2
 8007054:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007058:	f013 0f08 	tst.w	r3, #8
 800705c:	d00b      	beq.n	8007076 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800705e:	f010 0f20 	tst.w	r0, #32
 8007062:	d100      	bne.n	8007066 <HAL_UART_IRQHandler+0xfa>
 8007064:	b13a      	cbz	r2, 8007076 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007066:	6822      	ldr	r2, [r4, #0]
 8007068:	2108      	movs	r1, #8
 800706a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800706c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007070:	430a      	orrs	r2, r1
 8007072:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007076:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800707a:	d00c      	beq.n	8007096 <HAL_UART_IRQHandler+0x12a>
 800707c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8007080:	d009      	beq.n	8007096 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007082:	6822      	ldr	r2, [r4, #0]
 8007084:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007088:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800708a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800708e:	f042 0220 	orr.w	r2, r2, #32
 8007092:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007096:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800709a:	2a00      	cmp	r2, #0
 800709c:	d0aa      	beq.n	8006ff4 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800709e:	f013 0f20 	tst.w	r3, #32
 80070a2:	d009      	beq.n	80070b8 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070a4:	f010 0f20 	tst.w	r0, #32
 80070a8:	d102      	bne.n	80070b0 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070aa:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80070ae:	d003      	beq.n	80070b8 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 80070b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80070b2:	b10b      	cbz	r3, 80070b8 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 80070b4:	4620      	mov	r0, r4
 80070b6:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80070b8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80070c4:	d102      	bne.n	80070cc <HAL_UART_IRQHandler+0x160>
 80070c6:	f012 0f28 	tst.w	r2, #40	; 0x28
 80070ca:	d029      	beq.n	8007120 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 80070cc:	4620      	mov	r0, r4
 80070ce:	f7ff fe4e 	bl	8006d6e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80070da:	d01d      	beq.n	8007118 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070dc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070de:	f102 0308 	add.w	r3, r2, #8
 80070e2:	e853 3f00 	ldrex	r3, [r3]
 80070e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	3208      	adds	r2, #8
 80070ec:	e842 3100 	strex	r1, r3, [r2]
 80070f0:	2900      	cmp	r1, #0
 80070f2:	d1f3      	bne.n	80070dc <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 80070f4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80070f6:	b15b      	cbz	r3, 8007110 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070f8:	4a66      	ldr	r2, [pc, #408]	; (8007294 <HAL_UART_IRQHandler+0x328>)
 80070fa:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070fc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80070fe:	f7fd fee9 	bl	8004ed4 <HAL_DMA_Abort_IT>
 8007102:	2800      	cmp	r0, #0
 8007104:	f43f af76 	beq.w	8006ff4 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007108:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800710a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800710c:	4798      	blx	r3
 800710e:	e771      	b.n	8006ff4 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8007110:	4620      	mov	r0, r4
 8007112:	f7ff fef3 	bl	8006efc <HAL_UART_ErrorCallback>
 8007116:	e76d      	b.n	8006ff4 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8007118:	4620      	mov	r0, r4
 800711a:	f7ff feef 	bl	8006efc <HAL_UART_ErrorCallback>
 800711e:	e769      	b.n	8006ff4 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8007120:	4620      	mov	r0, r4
 8007122:	f7ff feeb 	bl	8006efc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007126:	2300      	movs	r3, #0
 8007128:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 800712c:	e762      	b.n	8006ff4 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800712e:	f013 0f10 	tst.w	r3, #16
 8007132:	f43f af39 	beq.w	8006fa8 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007136:	f010 0f10 	tst.w	r0, #16
 800713a:	f43f af35 	beq.w	8006fa8 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800713e:	2310      	movs	r3, #16
 8007140:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f013 0f40 	tst.w	r3, #64	; 0x40
 800714a:	d04f      	beq.n	80071ec <HAL_UART_IRQHandler+0x280>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800714c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800714e:	6813      	ldr	r3, [r2, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8007154:	2b00      	cmp	r3, #0
 8007156:	f43f af4d 	beq.w	8006ff4 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800715a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800715e:	4299      	cmp	r1, r3
 8007160:	f67f af48 	bls.w	8006ff4 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8007164:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007168:	6813      	ldr	r3, [r2, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f013 0f20 	tst.w	r3, #32
 8007170:	d131      	bne.n	80071d6 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007172:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	e852 3f00 	ldrex	r3, [r2]
 8007178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	e842 3100 	strex	r1, r3, [r2]
 8007180:	2900      	cmp	r1, #0
 8007182:	d1f6      	bne.n	8007172 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007184:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007186:	f102 0308 	add.w	r3, r2, #8
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	3208      	adds	r2, #8
 8007194:	e842 3100 	strex	r1, r3, [r2]
 8007198:	2900      	cmp	r1, #0
 800719a:	d1f3      	bne.n	8007184 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800719c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	f102 0308 	add.w	r3, r2, #8
 80071a2:	e853 3f00 	ldrex	r3, [r3]
 80071a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071aa:	3208      	adds	r2, #8
 80071ac:	e842 3100 	strex	r1, r3, [r2]
 80071b0:	2900      	cmp	r1, #0
 80071b2:	d1f3      	bne.n	800719c <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 80071b4:	2320      	movs	r3, #32
 80071b6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ba:	2300      	movs	r3, #0
 80071bc:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071be:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	e852 3f00 	ldrex	r3, [r2]
 80071c4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c8:	e842 3100 	strex	r1, r3, [r2]
 80071cc:	2900      	cmp	r1, #0
 80071ce:	d1f6      	bne.n	80071be <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071d0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80071d2:	f7fd fe45 	bl	8004e60 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071d6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80071da:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80071de:	b29b      	uxth	r3, r3
 80071e0:	1ac9      	subs	r1, r1, r3
 80071e2:	b289      	uxth	r1, r1
 80071e4:	4620      	mov	r0, r4
 80071e6:	f7ff fec0 	bl	8006f6a <HAL_UARTEx_RxEventCallback>
      return;
 80071ea:	e703      	b.n	8006ff4 <HAL_UART_IRQHandler+0x88>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071ec:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80071f0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	1ac9      	subs	r1, r1, r3
 80071f8:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 80071fa:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80071fe:	b29b      	uxth	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	f43f aef7 	beq.w	8006ff4 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8007206:	2900      	cmp	r1, #0
 8007208:	f43f aef4 	beq.w	8006ff4 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800720c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	e852 3f00 	ldrex	r3, [r2]
 8007212:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	e842 3000 	strex	r0, r3, [r2]
 800721a:	2800      	cmp	r0, #0
 800721c:	d1f6      	bne.n	800720c <HAL_UART_IRQHandler+0x2a0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800721e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007220:	f102 0308 	add.w	r3, r2, #8
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800722c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	3208      	adds	r2, #8
 8007232:	e842 3000 	strex	r0, r3, [r2]
 8007236:	2800      	cmp	r0, #0
 8007238:	d1f1      	bne.n	800721e <HAL_UART_IRQHandler+0x2b2>
        huart->RxState = HAL_UART_STATE_READY;
 800723a:	2320      	movs	r3, #32
 800723c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007240:	2300      	movs	r3, #0
 8007242:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8007244:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007246:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	e852 3f00 	ldrex	r3, [r2]
 800724c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	e842 3000 	strex	r0, r3, [r2]
 8007254:	2800      	cmp	r0, #0
 8007256:	d1f6      	bne.n	8007246 <HAL_UART_IRQHandler+0x2da>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007258:	4620      	mov	r0, r4
 800725a:	f7ff fe86 	bl	8006f6a <HAL_UARTEx_RxEventCallback>
      return;
 800725e:	e6c9      	b.n	8006ff4 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007260:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007264:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8007266:	4620      	mov	r0, r4
 8007268:	f000 fe14 	bl	8007e94 <HAL_UARTEx_WakeupCallback>
    return;
 800726c:	e6c2      	b.n	8006ff4 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 800726e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007270:	2b00      	cmp	r3, #0
 8007272:	f43f aebf 	beq.w	8006ff4 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8007276:	4620      	mov	r0, r4
 8007278:	4798      	blx	r3
    return;
 800727a:	e6bb      	b.n	8006ff4 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 800727c:	4620      	mov	r0, r4
 800727e:	f7ff fe25 	bl	8006ecc <UART_EndTransmit_IT>
    return;
 8007282:	e6b7      	b.n	8006ff4 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007284:	4620      	mov	r0, r4
 8007286:	f000 fe07 	bl	8007e98 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800728a:	e6b3      	b.n	8006ff4 <HAL_UART_IRQHandler+0x88>
 800728c:	10000001 	.word	0x10000001
 8007290:	04000120 	.word	0x04000120
 8007294:	08006f57 	.word	0x08006f57
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007298:	4620      	mov	r0, r4
 800729a:	f000 fdfc 	bl	8007e96 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800729e:	e6a9      	b.n	8006ff4 <HAL_UART_IRQHandler+0x88>

080072a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80072a0:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80072a2:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072a6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80072aa:	2a22      	cmp	r2, #34	; 0x22
 80072ac:	d005      	beq.n	80072ba <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072ae:	6802      	ldr	r2, [r0, #0]
 80072b0:	6993      	ldr	r3, [r2, #24]
 80072b2:	f043 0308 	orr.w	r3, r3, #8
 80072b6:	6193      	str	r3, [r2, #24]
  }
}
 80072b8:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072ba:	6802      	ldr	r2, [r0, #0]
 80072bc:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80072c2:	400b      	ands	r3, r1
 80072c4:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80072c6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80072c8:	3301      	adds	r3, #1
 80072ca:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80072cc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80072da:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e9      	bne.n	80072b8 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072e4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	e852 3f00 	ldrex	r3, [r2]
 80072ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	e842 3100 	strex	r1, r3, [r2]
 80072f2:	2900      	cmp	r1, #0
 80072f4:	d1f6      	bne.n	80072e4 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f8:	f102 0308 	add.w	r3, r2, #8
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	3208      	adds	r2, #8
 8007306:	e842 3100 	strex	r1, r3, [r2]
 800730a:	2900      	cmp	r1, #0
 800730c:	d1f3      	bne.n	80072f6 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800730e:	2320      	movs	r3, #32
 8007310:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8007314:	2300      	movs	r3, #0
 8007316:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007318:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800731a:	2b01      	cmp	r3, #1
 800731c:	d116      	bne.n	800734c <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800731e:	2300      	movs	r3, #0
 8007320:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007322:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	e852 3f00 	ldrex	r3, [r2]
 8007328:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	e842 3100 	strex	r1, r3, [r2]
 8007330:	2900      	cmp	r1, #0
 8007332:	d1f6      	bne.n	8007322 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007334:	6803      	ldr	r3, [r0, #0]
 8007336:	69da      	ldr	r2, [r3, #28]
 8007338:	f012 0f10 	tst.w	r2, #16
 800733c:	d001      	beq.n	8007342 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800733e:	2210      	movs	r2, #16
 8007340:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007342:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8007346:	f7ff fe10 	bl	8006f6a <HAL_UARTEx_RxEventCallback>
 800734a:	e7b5      	b.n	80072b8 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800734c:	f7fc fbda 	bl	8003b04 <HAL_UART_RxCpltCallback>
 8007350:	e7b2      	b.n	80072b8 <UART_RxISR_8BIT+0x18>

08007352 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007352:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007354:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007358:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800735c:	2b22      	cmp	r3, #34	; 0x22
 800735e:	d005      	beq.n	800736c <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007360:	6802      	ldr	r2, [r0, #0]
 8007362:	6993      	ldr	r3, [r2, #24]
 8007364:	f043 0308 	orr.w	r3, r3, #8
 8007368:	6193      	str	r3, [r2, #24]
  }
}
 800736a:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800736c:	6803      	ldr	r3, [r0, #0]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007370:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8007372:	4013      	ands	r3, r2
 8007374:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8007376:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007378:	3302      	adds	r3, #2
 800737a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800737c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007380:	b29b      	uxth	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	b29b      	uxth	r3, r3
 8007386:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800738a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1ea      	bne.n	800736a <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007394:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	e852 3f00 	ldrex	r3, [r2]
 800739a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739e:	e842 3100 	strex	r1, r3, [r2]
 80073a2:	2900      	cmp	r1, #0
 80073a4:	d1f6      	bne.n	8007394 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	f102 0308 	add.w	r3, r2, #8
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	3208      	adds	r2, #8
 80073b6:	e842 3100 	strex	r1, r3, [r2]
 80073ba:	2900      	cmp	r1, #0
 80073bc:	d1f3      	bne.n	80073a6 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80073be:	2320      	movs	r3, #32
 80073c0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 80073c4:	2300      	movs	r3, #0
 80073c6:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d116      	bne.n	80073fc <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ce:	2300      	movs	r3, #0
 80073d0:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	e852 3f00 	ldrex	r3, [r2]
 80073d8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	e842 3100 	strex	r1, r3, [r2]
 80073e0:	2900      	cmp	r1, #0
 80073e2:	d1f6      	bne.n	80073d2 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073e4:	6803      	ldr	r3, [r0, #0]
 80073e6:	69da      	ldr	r2, [r3, #28]
 80073e8:	f012 0f10 	tst.w	r2, #16
 80073ec:	d001      	beq.n	80073f2 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073ee:	2210      	movs	r2, #16
 80073f0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073f2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80073f6:	f7ff fdb8 	bl	8006f6a <HAL_UARTEx_RxEventCallback>
 80073fa:	e7b6      	b.n	800736a <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80073fc:	f7fc fb82 	bl	8003b04 <HAL_UART_RxCpltCallback>
 8007400:	e7b3      	b.n	800736a <UART_RxISR_16BIT+0x18>
	...

08007404 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8007408:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800740c:	6803      	ldr	r3, [r0, #0]
 800740e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007410:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007414:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007418:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800741c:	2a22      	cmp	r2, #34	; 0x22
 800741e:	d005      	beq.n	800742c <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007420:	699a      	ldr	r2, [r3, #24]
 8007422:	f042 0208 	orr.w	r2, r2, #8
 8007426:	619a      	str	r2, [r3, #24]
  }
}
 8007428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800742c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800742e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007432:	e008      	b.n	8007446 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007434:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007438:	2b00      	cmp	r3, #0
 800743a:	d14c      	bne.n	80074d6 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 800743c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d04e      	beq.n	80074e4 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007446:	2f00      	cmp	r7, #0
 8007448:	f000 8087 	beq.w	800755a <UART_RxISR_8BIT_FIFOEN+0x156>
 800744c:	f015 0f20 	tst.w	r5, #32
 8007450:	f000 8083 	beq.w	800755a <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007458:	b2f3      	uxtb	r3, r6
 800745a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800745c:	400b      	ands	r3, r1
 800745e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007460:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007462:	3301      	adds	r3, #1
 8007464:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007466:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800746a:	b29b      	uxth	r3, r3
 800746c:	3b01      	subs	r3, #1
 800746e:	b29b      	uxth	r3, r3
 8007470:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007478:	f015 0f07 	tst.w	r5, #7
 800747c:	d0de      	beq.n	800743c <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800747e:	f015 0f01 	tst.w	r5, #1
 8007482:	d009      	beq.n	8007498 <UART_RxISR_8BIT_FIFOEN+0x94>
 8007484:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007488:	d006      	beq.n	8007498 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800748a:	2201      	movs	r2, #1
 800748c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800748e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007498:	f015 0f02 	tst.w	r5, #2
 800749c:	d00b      	beq.n	80074b6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800749e:	f018 0f01 	tst.w	r8, #1
 80074a2:	d008      	beq.n	80074b6 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	2202      	movs	r2, #2
 80074a8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074aa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80074ae:	f043 0304 	orr.w	r3, r3, #4
 80074b2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074b6:	f015 0f04 	tst.w	r5, #4
 80074ba:	d0bb      	beq.n	8007434 <UART_RxISR_8BIT_FIFOEN+0x30>
 80074bc:	f018 0f01 	tst.w	r8, #1
 80074c0:	d0b8      	beq.n	8007434 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	2204      	movs	r2, #4
 80074c6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074c8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80074cc:	f043 0302 	orr.w	r3, r3, #2
 80074d0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80074d4:	e7ae      	b.n	8007434 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80074d6:	4620      	mov	r0, r4
 80074d8:	f7ff fd10 	bl	8006efc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074dc:	2300      	movs	r3, #0
 80074de:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80074e2:	e7ab      	b.n	800743c <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074e4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	e852 3f00 	ldrex	r3, [r2]
 80074ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ee:	e842 3100 	strex	r1, r3, [r2]
 80074f2:	2900      	cmp	r1, #0
 80074f4:	d1f6      	bne.n	80074e4 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074f6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f8:	f102 0308 	add.w	r3, r2, #8
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007504:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	3208      	adds	r2, #8
 800750a:	e842 3100 	strex	r1, r3, [r2]
 800750e:	2900      	cmp	r1, #0
 8007510:	d1f1      	bne.n	80074f6 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8007512:	2320      	movs	r3, #32
 8007514:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8007518:	2300      	movs	r3, #0
 800751a:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800751c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800751e:	2b01      	cmp	r3, #1
 8007520:	d003      	beq.n	800752a <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 8007522:	4620      	mov	r0, r4
 8007524:	f7fc faee 	bl	8003b04 <HAL_UART_RxCpltCallback>
 8007528:	e78d      	b.n	8007446 <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752a:	2300      	movs	r3, #0
 800752c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800752e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	e852 3f00 	ldrex	r3, [r2]
 8007534:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	e842 3100 	strex	r1, r3, [r2]
 800753c:	2900      	cmp	r1, #0
 800753e:	d1f6      	bne.n	800752e <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	69da      	ldr	r2, [r3, #28]
 8007544:	f012 0f10 	tst.w	r2, #16
 8007548:	d001      	beq.n	800754e <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800754a:	2210      	movs	r2, #16
 800754c:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800754e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007552:	4620      	mov	r0, r4
 8007554:	f7ff fd09 	bl	8006f6a <HAL_UARTEx_RxEventCallback>
 8007558:	e775      	b.n	8007446 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800755a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800755e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007560:	2b00      	cmp	r3, #0
 8007562:	f43f af61 	beq.w	8007428 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007566:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800756a:	429a      	cmp	r2, r3
 800756c:	f67f af5c 	bls.w	8007428 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007570:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	f102 0308 	add.w	r3, r2, #8
 8007576:	e853 3f00 	ldrex	r3, [r3]
 800757a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	3208      	adds	r2, #8
 8007580:	e842 3100 	strex	r1, r3, [r2]
 8007584:	2900      	cmp	r1, #0
 8007586:	d1f3      	bne.n	8007570 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8007588:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 800758a:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800758c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	e852 3f00 	ldrex	r3, [r2]
 8007592:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	e842 3100 	strex	r1, r3, [r2]
 800759a:	2900      	cmp	r1, #0
 800759c:	d1f6      	bne.n	800758c <UART_RxISR_8BIT_FIFOEN+0x188>
 800759e:	e743      	b.n	8007428 <UART_RxISR_8BIT_FIFOEN+0x24>
 80075a0:	080072a1 	.word	0x080072a1

080075a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80075a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80075a8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80075ac:	6803      	ldr	r3, [r0, #0]
 80075ae:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80075b0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80075b4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075b8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80075bc:	2a22      	cmp	r2, #34	; 0x22
 80075be:	d005      	beq.n	80075cc <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075c0:	699a      	ldr	r2, [r3, #24]
 80075c2:	f042 0208 	orr.w	r2, r2, #8
 80075c6:	619a      	str	r2, [r3, #24]
  }
}
 80075c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075cc:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80075ce:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80075d2:	e008      	b.n	80075e6 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d14b      	bne.n	8007674 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80075dc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d04d      	beq.n	8007682 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80075e6:	2f00      	cmp	r7, #0
 80075e8:	f000 8086 	beq.w	80076f8 <UART_RxISR_16BIT_FIFOEN+0x154>
 80075ec:	f015 0f20 	tst.w	r5, #32
 80075f0:	f000 8082 	beq.w	80076f8 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075f8:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80075fa:	4033      	ands	r3, r6
 80075fc:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80075fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007600:	3302      	adds	r3, #2
 8007602:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007604:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	b29b      	uxth	r3, r3
 800760e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007616:	f015 0f07 	tst.w	r5, #7
 800761a:	d0df      	beq.n	80075dc <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800761c:	f015 0f01 	tst.w	r5, #1
 8007620:	d009      	beq.n	8007636 <UART_RxISR_16BIT_FIFOEN+0x92>
 8007622:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007626:	d006      	beq.n	8007636 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007628:	2201      	movs	r2, #1
 800762a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800762c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007630:	4313      	orrs	r3, r2
 8007632:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007636:	f015 0f02 	tst.w	r5, #2
 800763a:	d00b      	beq.n	8007654 <UART_RxISR_16BIT_FIFOEN+0xb0>
 800763c:	f018 0f01 	tst.w	r8, #1
 8007640:	d008      	beq.n	8007654 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	2202      	movs	r2, #2
 8007646:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007648:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800764c:	f043 0304 	orr.w	r3, r3, #4
 8007650:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007654:	f015 0f04 	tst.w	r5, #4
 8007658:	d0bc      	beq.n	80075d4 <UART_RxISR_16BIT_FIFOEN+0x30>
 800765a:	f018 0f01 	tst.w	r8, #1
 800765e:	d0b9      	beq.n	80075d4 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	2204      	movs	r2, #4
 8007664:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007666:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800766a:	f043 0302 	orr.w	r3, r3, #2
 800766e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007672:	e7af      	b.n	80075d4 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007674:	4620      	mov	r0, r4
 8007676:	f7ff fc41 	bl	8006efc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800767a:	2300      	movs	r3, #0
 800767c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007680:	e7ac      	b.n	80075dc <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007682:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	e852 3f00 	ldrex	r3, [r2]
 8007688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	e842 3100 	strex	r1, r3, [r2]
 8007690:	2900      	cmp	r1, #0
 8007692:	d1f6      	bne.n	8007682 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007694:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	f102 0308 	add.w	r3, r2, #8
 800769a:	e853 3f00 	ldrex	r3, [r3]
 800769e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076a2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a6:	3208      	adds	r2, #8
 80076a8:	e842 3100 	strex	r1, r3, [r2]
 80076ac:	2900      	cmp	r1, #0
 80076ae:	d1f1      	bne.n	8007694 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80076b0:	2320      	movs	r3, #32
 80076b2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d003      	beq.n	80076c8 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 80076c0:	4620      	mov	r0, r4
 80076c2:	f7fc fa1f 	bl	8003b04 <HAL_UART_RxCpltCallback>
 80076c6:	e78e      	b.n	80075e6 <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c8:	2300      	movs	r3, #0
 80076ca:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076cc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	e852 3f00 	ldrex	r3, [r2]
 80076d2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	e842 3100 	strex	r1, r3, [r2]
 80076da:	2900      	cmp	r1, #0
 80076dc:	d1f6      	bne.n	80076cc <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	69da      	ldr	r2, [r3, #28]
 80076e2:	f012 0f10 	tst.w	r2, #16
 80076e6:	d001      	beq.n	80076ec <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076e8:	2210      	movs	r2, #16
 80076ea:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076ec:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80076f0:	4620      	mov	r0, r4
 80076f2:	f7ff fc3a 	bl	8006f6a <HAL_UARTEx_RxEventCallback>
 80076f6:	e776      	b.n	80075e6 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80076f8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80076fc:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f43f af62 	beq.w	80075c8 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007704:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007708:	429a      	cmp	r2, r3
 800770a:	f67f af5d 	bls.w	80075c8 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800770e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	f102 0308 	add.w	r3, r2, #8
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	3208      	adds	r2, #8
 800771e:	e842 3100 	strex	r1, r3, [r2]
 8007722:	2900      	cmp	r1, #0
 8007724:	d1f3      	bne.n	800770e <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 8007726:	4b06      	ldr	r3, [pc, #24]	; (8007740 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8007728:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800772a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	e852 3f00 	ldrex	r3, [r2]
 8007730:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	e842 3100 	strex	r1, r3, [r2]
 8007738:	2900      	cmp	r1, #0
 800773a:	d1f6      	bne.n	800772a <UART_RxISR_16BIT_FIFOEN+0x186>
 800773c:	e744      	b.n	80075c8 <UART_RxISR_16BIT_FIFOEN+0x24>
 800773e:	bf00      	nop
 8007740:	08007353 	.word	0x08007353

08007744 <UART_SetConfig>:
{
 8007744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007748:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800774a:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800774c:	6883      	ldr	r3, [r0, #8]
 800774e:	6902      	ldr	r2, [r0, #16]
 8007750:	4313      	orrs	r3, r2
 8007752:	6942      	ldr	r2, [r0, #20]
 8007754:	4313      	orrs	r3, r2
 8007756:	69c2      	ldr	r2, [r0, #28]
 8007758:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800775a:	6808      	ldr	r0, [r1, #0]
 800775c:	4aa1      	ldr	r2, [pc, #644]	; (80079e4 <UART_SetConfig+0x2a0>)
 800775e:	4002      	ands	r2, r0
 8007760:	4313      	orrs	r3, r2
 8007762:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007764:	6822      	ldr	r2, [r4, #0]
 8007766:	6853      	ldr	r3, [r2, #4]
 8007768:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800776c:	68e1      	ldr	r1, [r4, #12]
 800776e:	430b      	orrs	r3, r1
 8007770:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007772:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007774:	6822      	ldr	r2, [r4, #0]
 8007776:	4b9c      	ldr	r3, [pc, #624]	; (80079e8 <UART_SetConfig+0x2a4>)
 8007778:	429a      	cmp	r2, r3
 800777a:	d001      	beq.n	8007780 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 800777c:	6a23      	ldr	r3, [r4, #32]
 800777e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007780:	6893      	ldr	r3, [r2, #8]
 8007782:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007786:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800778a:	430b      	orrs	r3, r1
 800778c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800778e:	6822      	ldr	r2, [r4, #0]
 8007790:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007792:	f023 030f 	bic.w	r3, r3, #15
 8007796:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007798:	430b      	orrs	r3, r1
 800779a:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800779c:	6822      	ldr	r2, [r4, #0]
 800779e:	4b93      	ldr	r3, [pc, #588]	; (80079ec <UART_SetConfig+0x2a8>)
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d01c      	beq.n	80077de <UART_SetConfig+0x9a>
 80077a4:	4b92      	ldr	r3, [pc, #584]	; (80079f0 <UART_SetConfig+0x2ac>)
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d031      	beq.n	800780e <UART_SetConfig+0xca>
 80077aa:	4b8f      	ldr	r3, [pc, #572]	; (80079e8 <UART_SetConfig+0x2a4>)
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d04b      	beq.n	8007848 <UART_SetConfig+0x104>
 80077b0:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80077b2:	498d      	ldr	r1, [pc, #564]	; (80079e8 <UART_SetConfig+0x2a4>)
 80077b4:	428a      	cmp	r2, r1
 80077b6:	d068      	beq.n	800788a <UART_SetConfig+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077b8:	69e0      	ldr	r0, [r4, #28]
 80077ba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80077be:	f000 80a7 	beq.w	8007910 <UART_SetConfig+0x1cc>
    switch (clocksource)
 80077c2:	2b08      	cmp	r3, #8
 80077c4:	f200 8122 	bhi.w	8007a0c <UART_SetConfig+0x2c8>
 80077c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80077cc:	00f800d5 	.word	0x00f800d5
 80077d0:	012000d3 	.word	0x012000d3
 80077d4:	012000fb 	.word	0x012000fb
 80077d8:	01200120 	.word	0x01200120
 80077dc:	00fe      	.short	0x00fe
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80077de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e6:	f003 0303 	and.w	r3, r3, #3
 80077ea:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80077ee:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d809      	bhi.n	800780a <UART_SetConfig+0xc6>
 80077f6:	e8df f003 	tbb	[pc, r3]
 80077fa:	0402      	.short	0x0402
 80077fc:	063c      	.short	0x063c
 80077fe:	2301      	movs	r3, #1
 8007800:	e7d7      	b.n	80077b2 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007802:	2304      	movs	r3, #4
 8007804:	e7d5      	b.n	80077b2 <UART_SetConfig+0x6e>
 8007806:	2308      	movs	r3, #8
 8007808:	e7d3      	b.n	80077b2 <UART_SetConfig+0x6e>
 800780a:	2310      	movs	r3, #16
 800780c:	e7d1      	b.n	80077b2 <UART_SetConfig+0x6e>
 800780e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007816:	f003 030c 	and.w	r3, r3, #12
 800781a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800781e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8007822:	2b0c      	cmp	r3, #12
 8007824:	d80e      	bhi.n	8007844 <UART_SetConfig+0x100>
 8007826:	e8df f003 	tbb	[pc, r3]
 800782a:	0d07      	.short	0x0d07
 800782c:	0d090d0d 	.word	0x0d090d0d
 8007830:	0d260d0d 	.word	0x0d260d0d
 8007834:	0d0d      	.short	0x0d0d
 8007836:	0b          	.byte	0x0b
 8007837:	00          	.byte	0x00
 8007838:	2300      	movs	r3, #0
 800783a:	e7ba      	b.n	80077b2 <UART_SetConfig+0x6e>
 800783c:	2304      	movs	r3, #4
 800783e:	e7b8      	b.n	80077b2 <UART_SetConfig+0x6e>
 8007840:	2308      	movs	r3, #8
 8007842:	e7b6      	b.n	80077b2 <UART_SetConfig+0x6e>
 8007844:	2310      	movs	r3, #16
 8007846:	e7b4      	b.n	80077b2 <UART_SetConfig+0x6e>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800784c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007850:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007858:	d00f      	beq.n	800787a <UART_SetConfig+0x136>
 800785a:	d805      	bhi.n	8007868 <UART_SetConfig+0x124>
 800785c:	b17b      	cbz	r3, 800787e <UART_SetConfig+0x13a>
 800785e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007862:	d10e      	bne.n	8007882 <UART_SetConfig+0x13e>
 8007864:	2304      	movs	r3, #4
 8007866:	e7a4      	b.n	80077b2 <UART_SetConfig+0x6e>
 8007868:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800786c:	d10b      	bne.n	8007886 <UART_SetConfig+0x142>
 800786e:	2308      	movs	r3, #8
 8007870:	e79f      	b.n	80077b2 <UART_SetConfig+0x6e>
 8007872:	2302      	movs	r3, #2
 8007874:	e79d      	b.n	80077b2 <UART_SetConfig+0x6e>
 8007876:	2302      	movs	r3, #2
 8007878:	e79b      	b.n	80077b2 <UART_SetConfig+0x6e>
 800787a:	2302      	movs	r3, #2
 800787c:	e799      	b.n	80077b2 <UART_SetConfig+0x6e>
 800787e:	2300      	movs	r3, #0
 8007880:	e797      	b.n	80077b2 <UART_SetConfig+0x6e>
 8007882:	2310      	movs	r3, #16
 8007884:	e795      	b.n	80077b2 <UART_SetConfig+0x6e>
 8007886:	2310      	movs	r3, #16
 8007888:	e793      	b.n	80077b2 <UART_SetConfig+0x6e>
    switch (clocksource)
 800788a:	2b08      	cmp	r3, #8
 800788c:	f200 809f 	bhi.w	80079ce <UART_SetConfig+0x28a>
 8007890:	e8df f003 	tbb	[pc, r3]
 8007894:	9d3c9d08 	.word	0x9d3c9d08
 8007898:	9d9d9d39 	.word	0x9d9d9d39
 800789c:	05          	.byte	0x05
 800789d:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 800789e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80078a2:	e004      	b.n	80078ae <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80078a4:	f7fe fb14 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80078a8:	2800      	cmp	r0, #0
 80078aa:	f000 8092 	beq.w	80079d2 <UART_SetConfig+0x28e>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80078b0:	4b50      	ldr	r3, [pc, #320]	; (80079f4 <UART_SetConfig+0x2b0>)
 80078b2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80078b6:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078ba:	6865      	ldr	r5, [r4, #4]
 80078bc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80078c0:	4299      	cmp	r1, r3
 80078c2:	f200 8088 	bhi.w	80079d6 <UART_SetConfig+0x292>
 80078c6:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80078ca:	f200 8086 	bhi.w	80079da <UART_SetConfig+0x296>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ce:	f04f 0800 	mov.w	r8, #0
 80078d2:	b292      	uxth	r2, r2
 80078d4:	2300      	movs	r3, #0
 80078d6:	4641      	mov	r1, r8
 80078d8:	f7fb f9b6 	bl	8002c48 <__aeabi_uldivmod>
 80078dc:	020f      	lsls	r7, r1, #8
 80078de:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80078e2:	0206      	lsls	r6, r0, #8
 80078e4:	0868      	lsrs	r0, r5, #1
 80078e6:	462a      	mov	r2, r5
 80078e8:	4643      	mov	r3, r8
 80078ea:	1830      	adds	r0, r6, r0
 80078ec:	f147 0100 	adc.w	r1, r7, #0
 80078f0:	f7fb f9aa 	bl	8002c48 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078f4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80078f8:	4b3f      	ldr	r3, [pc, #252]	; (80079f8 <UART_SetConfig+0x2b4>)
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d86f      	bhi.n	80079de <UART_SetConfig+0x29a>
          huart->Instance->BRR = usartdiv;
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	60d8      	str	r0, [r3, #12]
 8007902:	4640      	mov	r0, r8
 8007904:	e050      	b.n	80079a8 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetSysClockFreq();
 8007906:	f7fd fddb 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
        break;
 800790a:	e7cd      	b.n	80078a8 <UART_SetConfig+0x164>
        pclk = (uint32_t) HSI_VALUE;
 800790c:	483b      	ldr	r0, [pc, #236]	; (80079fc <UART_SetConfig+0x2b8>)
 800790e:	e7ce      	b.n	80078ae <UART_SetConfig+0x16a>
    switch (clocksource)
 8007910:	2b08      	cmp	r3, #8
 8007912:	d875      	bhi.n	8007a00 <UART_SetConfig+0x2bc>
 8007914:	e8df f003 	tbb	[pc, r3]
 8007918:	74052707 	.word	0x74052707
 800791c:	7474742a 	.word	0x7474742a
 8007920:	0b          	.byte	0x0b
 8007921:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007922:	4836      	ldr	r0, [pc, #216]	; (80079fc <UART_SetConfig+0x2b8>)
 8007924:	e003      	b.n	800792e <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007926:	f7fe fad3 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800792a:	2800      	cmp	r0, #0
 800792c:	d06a      	beq.n	8007a04 <UART_SetConfig+0x2c0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800792e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007930:	4b30      	ldr	r3, [pc, #192]	; (80079f4 <UART_SetConfig+0x2b0>)
 8007932:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007936:	fbb0 f0f3 	udiv	r0, r0, r3
 800793a:	6862      	ldr	r2, [r4, #4]
 800793c:	0853      	lsrs	r3, r2, #1
 800793e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8007942:	fbb0 f0f2 	udiv	r0, r0, r2
 8007946:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007948:	f1a0 0210 	sub.w	r2, r0, #16
 800794c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007950:	429a      	cmp	r2, r3
 8007952:	d859      	bhi.n	8007a08 <UART_SetConfig+0x2c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007954:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007958:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800795c:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	60d8      	str	r0, [r3, #12]
 8007962:	2000      	movs	r0, #0
 8007964:	e020      	b.n	80079a8 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007966:	f7fe fac3 	bl	8005ef0 <HAL_RCC_GetPCLK2Freq>
        break;
 800796a:	e7de      	b.n	800792a <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetSysClockFreq();
 800796c:	f7fd fda8 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
        break;
 8007970:	e7db      	b.n	800792a <UART_SetConfig+0x1e6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007972:	4822      	ldr	r0, [pc, #136]	; (80079fc <UART_SetConfig+0x2b8>)
 8007974:	e003      	b.n	800797e <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007976:	f7fe faab 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800797a:	2800      	cmp	r0, #0
 800797c:	d048      	beq.n	8007a10 <UART_SetConfig+0x2cc>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800797e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007980:	4b1c      	ldr	r3, [pc, #112]	; (80079f4 <UART_SetConfig+0x2b0>)
 8007982:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007986:	fbb0 f0f3 	udiv	r0, r0, r3
 800798a:	6863      	ldr	r3, [r4, #4]
 800798c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007990:	fbb0 f0f3 	udiv	r0, r0, r3
 8007994:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007996:	f1a0 0210 	sub.w	r2, r0, #16
 800799a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800799e:	429a      	cmp	r2, r3
 80079a0:	d838      	bhi.n	8007a14 <UART_SetConfig+0x2d0>
        huart->Instance->BRR = usartdiv;
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	60d8      	str	r0, [r3, #12]
 80079a6:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80079a8:	2301      	movs	r3, #1
 80079aa:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80079ae:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 80079b6:	6763      	str	r3, [r4, #116]	; 0x74
}
 80079b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80079bc:	f7fe fa98 	bl	8005ef0 <HAL_RCC_GetPCLK2Freq>
        break;
 80079c0:	e7db      	b.n	800797a <UART_SetConfig+0x236>
        pclk = HAL_RCC_GetSysClockFreq();
 80079c2:	f7fd fd7d 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
        break;
 80079c6:	e7d8      	b.n	800797a <UART_SetConfig+0x236>
        pclk = (uint32_t) LSE_VALUE;
 80079c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80079cc:	e7d7      	b.n	800797e <UART_SetConfig+0x23a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80079ce:	2001      	movs	r0, #1
 80079d0:	e7ea      	b.n	80079a8 <UART_SetConfig+0x264>
 80079d2:	2000      	movs	r0, #0
 80079d4:	e7e8      	b.n	80079a8 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 80079d6:	2001      	movs	r0, #1
 80079d8:	e7e6      	b.n	80079a8 <UART_SetConfig+0x264>
 80079da:	2001      	movs	r0, #1
 80079dc:	e7e4      	b.n	80079a8 <UART_SetConfig+0x264>
          ret = HAL_ERROR;
 80079de:	2001      	movs	r0, #1
 80079e0:	e7e2      	b.n	80079a8 <UART_SetConfig+0x264>
 80079e2:	bf00      	nop
 80079e4:	cfff69f3 	.word	0xcfff69f3
 80079e8:	40008000 	.word	0x40008000
 80079ec:	40013800 	.word	0x40013800
 80079f0:	40004400 	.word	0x40004400
 80079f4:	08013fc0 	.word	0x08013fc0
 80079f8:	000ffcff 	.word	0x000ffcff
 80079fc:	00f42400 	.word	0x00f42400
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a00:	2001      	movs	r0, #1
 8007a02:	e7d1      	b.n	80079a8 <UART_SetConfig+0x264>
 8007a04:	2000      	movs	r0, #0
 8007a06:	e7cf      	b.n	80079a8 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8007a08:	2001      	movs	r0, #1
 8007a0a:	e7cd      	b.n	80079a8 <UART_SetConfig+0x264>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a0c:	2001      	movs	r0, #1
 8007a0e:	e7cb      	b.n	80079a8 <UART_SetConfig+0x264>
 8007a10:	2000      	movs	r0, #0
 8007a12:	e7c9      	b.n	80079a8 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8007a14:	2001      	movs	r0, #1
 8007a16:	e7c7      	b.n	80079a8 <UART_SetConfig+0x264>

08007a18 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a18:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007a1a:	f013 0f01 	tst.w	r3, #1
 8007a1e:	d006      	beq.n	8007a2e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a20:	6802      	ldr	r2, [r0, #0]
 8007a22:	6853      	ldr	r3, [r2, #4]
 8007a24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a28:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007a2a:	430b      	orrs	r3, r1
 8007a2c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007a30:	f013 0f02 	tst.w	r3, #2
 8007a34:	d006      	beq.n	8007a44 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a36:	6802      	ldr	r2, [r0, #0]
 8007a38:	6853      	ldr	r3, [r2, #4]
 8007a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a3e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007a40:	430b      	orrs	r3, r1
 8007a42:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007a46:	f013 0f04 	tst.w	r3, #4
 8007a4a:	d006      	beq.n	8007a5a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a4c:	6802      	ldr	r2, [r0, #0]
 8007a4e:	6853      	ldr	r3, [r2, #4]
 8007a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a54:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007a56:	430b      	orrs	r3, r1
 8007a58:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007a5c:	f013 0f08 	tst.w	r3, #8
 8007a60:	d006      	beq.n	8007a70 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a62:	6802      	ldr	r2, [r0, #0]
 8007a64:	6853      	ldr	r3, [r2, #4]
 8007a66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a6a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007a72:	f013 0f10 	tst.w	r3, #16
 8007a76:	d006      	beq.n	8007a86 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a78:	6802      	ldr	r2, [r0, #0]
 8007a7a:	6893      	ldr	r3, [r2, #8]
 8007a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a80:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007a82:	430b      	orrs	r3, r1
 8007a84:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007a88:	f013 0f20 	tst.w	r3, #32
 8007a8c:	d006      	beq.n	8007a9c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a8e:	6802      	ldr	r2, [r0, #0]
 8007a90:	6893      	ldr	r3, [r2, #8]
 8007a92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a96:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007a9e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007aa2:	d00a      	beq.n	8007aba <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007aa4:	6802      	ldr	r2, [r0, #0]
 8007aa6:	6853      	ldr	r3, [r2, #4]
 8007aa8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007aac:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007aae:	430b      	orrs	r3, r1
 8007ab0:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ab2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007ab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ab8:	d00b      	beq.n	8007ad2 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007aba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007abc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ac0:	d006      	beq.n	8007ad0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ac2:	6802      	ldr	r2, [r0, #0]
 8007ac4:	6853      	ldr	r3, [r2, #4]
 8007ac6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007aca:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007acc:	430b      	orrs	r3, r1
 8007ace:	6053      	str	r3, [r2, #4]
}
 8007ad0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ad2:	6802      	ldr	r2, [r0, #0]
 8007ad4:	6853      	ldr	r3, [r2, #4]
 8007ad6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007ada:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007adc:	430b      	orrs	r3, r1
 8007ade:	6053      	str	r3, [r2, #4]
 8007ae0:	e7eb      	b.n	8007aba <UART_AdvFeatureConfig+0xa2>

08007ae2 <UART_WaitOnFlagUntilTimeout>:
{
 8007ae2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	460f      	mov	r7, r1
 8007aea:	4616      	mov	r6, r2
 8007aec:	4699      	mov	r9, r3
 8007aee:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007af2:	682c      	ldr	r4, [r5, #0]
 8007af4:	69e4      	ldr	r4, [r4, #28]
 8007af6:	ea37 0304 	bics.w	r3, r7, r4
 8007afa:	bf0c      	ite	eq
 8007afc:	2401      	moveq	r4, #1
 8007afe:	2400      	movne	r4, #0
 8007b00:	42b4      	cmp	r4, r6
 8007b02:	d157      	bne.n	8007bb4 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8007b04:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007b08:	d0f3      	beq.n	8007af2 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b0a:	f7fb fd69 	bl	80035e0 <HAL_GetTick>
 8007b0e:	eba0 0009 	sub.w	r0, r0, r9
 8007b12:	4540      	cmp	r0, r8
 8007b14:	d82f      	bhi.n	8007b76 <UART_WaitOnFlagUntilTimeout+0x94>
 8007b16:	f1b8 0f00 	cmp.w	r8, #0
 8007b1a:	d02c      	beq.n	8007b76 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	f012 0f04 	tst.w	r2, #4
 8007b24:	d0e5      	beq.n	8007af2 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b26:	69da      	ldr	r2, [r3, #28]
 8007b28:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007b2c:	d0e1      	beq.n	8007af2 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b32:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b34:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	e852 3f00 	ldrex	r3, [r2]
 8007b3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	e842 3100 	strex	r1, r3, [r2]
 8007b42:	2900      	cmp	r1, #0
 8007b44:	d1f6      	bne.n	8007b34 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b46:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b48:	f102 0308 	add.w	r3, r2, #8
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b54:	3208      	adds	r2, #8
 8007b56:	e842 3100 	strex	r1, r3, [r2]
 8007b5a:	2900      	cmp	r1, #0
 8007b5c:	d1f3      	bne.n	8007b46 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8007b5e:	2320      	movs	r3, #32
 8007b60:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007b64:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b68:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8007b72:	2003      	movs	r0, #3
 8007b74:	e01f      	b.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b76:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b78:	e852 3f00 	ldrex	r3, [r2]
 8007b7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	e842 3100 	strex	r1, r3, [r2]
 8007b84:	2900      	cmp	r1, #0
 8007b86:	d1f6      	bne.n	8007b76 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b88:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	f102 0308 	add.w	r3, r2, #8
 8007b8e:	e853 3f00 	ldrex	r3, [r3]
 8007b92:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b96:	3208      	adds	r2, #8
 8007b98:	e842 3100 	strex	r1, r3, [r2]
 8007b9c:	2900      	cmp	r1, #0
 8007b9e:	d1f3      	bne.n	8007b88 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8007ba0:	2320      	movs	r3, #32
 8007ba2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007ba6:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8007baa:	2300      	movs	r3, #0
 8007bac:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8007bb0:	2003      	movs	r0, #3
 8007bb2:	e000      	b.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8007bb4:	2000      	movs	r0, #0
}
 8007bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007bba <UART_CheckIdleState>:
{
 8007bba:	b530      	push	{r4, r5, lr}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8007bc6:	f7fb fd0b 	bl	80035e0 <HAL_GetTick>
 8007bca:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f013 0f08 	tst.w	r3, #8
 8007bd4:	d10f      	bne.n	8007bf6 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f013 0f04 	tst.w	r3, #4
 8007bde:	d118      	bne.n	8007c12 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8007be0:	2320      	movs	r3, #32
 8007be2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007be6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bea:	2000      	movs	r0, #0
 8007bec:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8007bee:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007bf2:	b003      	add	sp, #12
 8007bf4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bf6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c04:	4620      	mov	r0, r4
 8007c06:	f7ff ff6c 	bl	8007ae2 <UART_WaitOnFlagUntilTimeout>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d0e3      	beq.n	8007bd6 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8007c0e:	2003      	movs	r0, #3
 8007c10:	e7ef      	b.n	8007bf2 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	462b      	mov	r3, r5
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c20:	4620      	mov	r0, r4
 8007c22:	f7ff ff5e 	bl	8007ae2 <UART_WaitOnFlagUntilTimeout>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d0da      	beq.n	8007be0 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8007c2a:	2003      	movs	r0, #3
 8007c2c:	e7e1      	b.n	8007bf2 <UART_CheckIdleState+0x38>

08007c2e <HAL_UART_Init>:
  if (huart == NULL)
 8007c2e:	b378      	cbz	r0, 8007c90 <HAL_UART_Init+0x62>
{
 8007c30:	b510      	push	{r4, lr}
 8007c32:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007c34:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007c38:	b30b      	cbz	r3, 8007c7e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007c3a:	2324      	movs	r3, #36	; 0x24
 8007c3c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007c40:	6822      	ldr	r2, [r4, #0]
 8007c42:	6813      	ldr	r3, [r2, #0]
 8007c44:	f023 0301 	bic.w	r3, r3, #1
 8007c48:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f7ff fd7a 	bl	8007744 <UART_SetConfig>
 8007c50:	2801      	cmp	r0, #1
 8007c52:	d013      	beq.n	8007c7c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c56:	b9bb      	cbnz	r3, 8007c88 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c58:	6822      	ldr	r2, [r4, #0]
 8007c5a:	6853      	ldr	r3, [r2, #4]
 8007c5c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007c60:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c62:	6822      	ldr	r2, [r4, #0]
 8007c64:	6893      	ldr	r3, [r2, #8]
 8007c66:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007c6a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007c6c:	6822      	ldr	r2, [r4, #0]
 8007c6e:	6813      	ldr	r3, [r2, #0]
 8007c70:	f043 0301 	orr.w	r3, r3, #1
 8007c74:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007c76:	4620      	mov	r0, r4
 8007c78:	f7ff ff9f 	bl	8007bba <UART_CheckIdleState>
}
 8007c7c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007c7e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8007c82:	f7fb fe43 	bl	800390c <HAL_UART_MspInit>
 8007c86:	e7d8      	b.n	8007c3a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f7ff fec5 	bl	8007a18 <UART_AdvFeatureConfig>
 8007c8e:	e7e3      	b.n	8007c58 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8007c90:	2001      	movs	r0, #1
}
 8007c92:	4770      	bx	lr

08007c94 <UART_Start_Receive_IT>:
{
 8007c94:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8007c96:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007c98:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007c9c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8007ca4:	6883      	ldr	r3, [r0, #8]
 8007ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007caa:	d006      	beq.n	8007cba <UART_Start_Receive_IT+0x26>
 8007cac:	b9a3      	cbnz	r3, 8007cd8 <UART_Start_Receive_IT+0x44>
 8007cae:	6903      	ldr	r3, [r0, #16]
 8007cb0:	b973      	cbnz	r3, 8007cd0 <UART_Start_Receive_IT+0x3c>
 8007cb2:	23ff      	movs	r3, #255	; 0xff
 8007cb4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007cb8:	e014      	b.n	8007ce4 <UART_Start_Receive_IT+0x50>
 8007cba:	6903      	ldr	r3, [r0, #16]
 8007cbc:	b923      	cbnz	r3, 8007cc8 <UART_Start_Receive_IT+0x34>
 8007cbe:	f240 13ff 	movw	r3, #511	; 0x1ff
 8007cc2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007cc6:	e00d      	b.n	8007ce4 <UART_Start_Receive_IT+0x50>
 8007cc8:	23ff      	movs	r3, #255	; 0xff
 8007cca:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007cce:	e009      	b.n	8007ce4 <UART_Start_Receive_IT+0x50>
 8007cd0:	237f      	movs	r3, #127	; 0x7f
 8007cd2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007cd6:	e005      	b.n	8007ce4 <UART_Start_Receive_IT+0x50>
 8007cd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cdc:	d02d      	beq.n	8007d3a <UART_Start_Receive_IT+0xa6>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cea:	2322      	movs	r3, #34	; 0x22
 8007cec:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf0:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	f101 0308 	add.w	r3, r1, #8
 8007cf6:	e853 3f00 	ldrex	r3, [r3]
 8007cfa:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	3108      	adds	r1, #8
 8007d00:	e841 3400 	strex	r4, r3, [r1]
 8007d04:	2c00      	cmp	r4, #0
 8007d06:	d1f3      	bne.n	8007cf0 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007d08:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d0e:	d01e      	beq.n	8007d4e <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d10:	6883      	ldr	r3, [r0, #8]
 8007d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d16:	d043      	beq.n	8007da0 <UART_Start_Receive_IT+0x10c>
      huart->RxISR = UART_RxISR_8BIT;
 8007d18:	4b24      	ldr	r3, [pc, #144]	; (8007dac <UART_Start_Receive_IT+0x118>)
 8007d1a:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d22:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d24:	e852 3f00 	ldrex	r3, [r2]
 8007d28:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2c:	e842 3100 	strex	r1, r3, [r2]
 8007d30:	2900      	cmp	r1, #0
 8007d32:	d1f6      	bne.n	8007d22 <UART_Start_Receive_IT+0x8e>
}
 8007d34:	2000      	movs	r0, #0
 8007d36:	bc10      	pop	{r4}
 8007d38:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8007d3a:	6903      	ldr	r3, [r0, #16]
 8007d3c:	b91b      	cbnz	r3, 8007d46 <UART_Start_Receive_IT+0xb2>
 8007d3e:	237f      	movs	r3, #127	; 0x7f
 8007d40:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007d44:	e7ce      	b.n	8007ce4 <UART_Start_Receive_IT+0x50>
 8007d46:	233f      	movs	r3, #63	; 0x3f
 8007d48:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007d4c:	e7ca      	b.n	8007ce4 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007d4e:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d8dc      	bhi.n	8007d10 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d56:	6883      	ldr	r3, [r0, #8]
 8007d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d5c:	d01a      	beq.n	8007d94 <UART_Start_Receive_IT+0x100>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007d5e:	4b14      	ldr	r3, [pc, #80]	; (8007db0 <UART_Start_Receive_IT+0x11c>)
 8007d60:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8007d62:	2300      	movs	r3, #0
 8007d64:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d68:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	e852 3f00 	ldrex	r3, [r2]
 8007d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d72:	e842 3100 	strex	r1, r3, [r2]
 8007d76:	2900      	cmp	r1, #0
 8007d78:	d1f6      	bne.n	8007d68 <UART_Start_Receive_IT+0xd4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d7a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7c:	f102 0308 	add.w	r3, r2, #8
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d88:	3208      	adds	r2, #8
 8007d8a:	e842 3100 	strex	r1, r3, [r2]
 8007d8e:	2900      	cmp	r1, #0
 8007d90:	d1f3      	bne.n	8007d7a <UART_Start_Receive_IT+0xe6>
 8007d92:	e7cf      	b.n	8007d34 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d94:	6903      	ldr	r3, [r0, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1e1      	bne.n	8007d5e <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007d9a:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <UART_Start_Receive_IT+0x120>)
 8007d9c:	6703      	str	r3, [r0, #112]	; 0x70
 8007d9e:	e7e0      	b.n	8007d62 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007da0:	6903      	ldr	r3, [r0, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1b8      	bne.n	8007d18 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8007da6:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <UART_Start_Receive_IT+0x124>)
 8007da8:	6703      	str	r3, [r0, #112]	; 0x70
 8007daa:	e7b7      	b.n	8007d1c <UART_Start_Receive_IT+0x88>
 8007dac:	080072a1 	.word	0x080072a1
 8007db0:	08007405 	.word	0x08007405
 8007db4:	080075a5 	.word	0x080075a5
 8007db8:	08007353 	.word	0x08007353

08007dbc <HAL_UART_Receive_IT>:
{
 8007dbc:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dbe:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007dc2:	2b20      	cmp	r3, #32
 8007dc4:	d11e      	bne.n	8007e04 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8007dc6:	b1f9      	cbz	r1, 8007e08 <HAL_UART_Receive_IT+0x4c>
 8007dc8:	b302      	cbz	r2, 8007e0c <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8007dca:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d01e      	beq.n	8007e10 <HAL_UART_Receive_IT+0x54>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ddc:	6803      	ldr	r3, [r0, #0]
 8007dde:	4c0d      	ldr	r4, [pc, #52]	; (8007e14 <HAL_UART_Receive_IT+0x58>)
 8007de0:	42a3      	cmp	r3, r4
 8007de2:	d00c      	beq.n	8007dfe <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007dea:	d008      	beq.n	8007dfe <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dec:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dee:	e854 3f00 	ldrex	r3, [r4]
 8007df2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	e844 3500 	strex	r5, r3, [r4]
 8007dfa:	2d00      	cmp	r5, #0
 8007dfc:	d1f6      	bne.n	8007dec <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 8007dfe:	f7ff ff49 	bl	8007c94 <UART_Start_Receive_IT>
 8007e02:	e000      	b.n	8007e06 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8007e04:	2002      	movs	r0, #2
}
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007e08:	2001      	movs	r0, #1
 8007e0a:	e7fc      	b.n	8007e06 <HAL_UART_Receive_IT+0x4a>
 8007e0c:	2001      	movs	r0, #1
 8007e0e:	e7fa      	b.n	8007e06 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8007e10:	2002      	movs	r0, #2
 8007e12:	e7f8      	b.n	8007e06 <HAL_UART_Receive_IT+0x4a>
 8007e14:	40008000 	.word	0x40008000

08007e18 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007e18:	b082      	sub	sp, #8
 8007e1a:	ab02      	add	r3, sp, #8
 8007e1c:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007e20:	6802      	ldr	r2, [r0, #0]
 8007e22:	6853      	ldr	r3, [r2, #4]
 8007e24:	f023 0310 	bic.w	r3, r3, #16
 8007e28:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007e30:	6802      	ldr	r2, [r0, #0]
 8007e32:	6853      	ldr	r3, [r2, #4]
 8007e34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e38:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8007e3c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007e40:	6053      	str	r3, [r2, #4]
}
 8007e42:	b002      	add	sp, #8
 8007e44:	4770      	bx	lr
	...

08007e48 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e48:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007e4a:	b92b      	cbnz	r3, 8007e58 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e52:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8007e56:	4770      	bx	lr
{
 8007e58:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e5a:	6803      	ldr	r3, [r0, #0]
 8007e5c:	689a      	ldr	r2, [r3, #8]
 8007e5e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e62:	6899      	ldr	r1, [r3, #8]
 8007e64:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e66:	4d09      	ldr	r5, [pc, #36]	; (8007e8c <UARTEx_SetNbDataToProcess+0x44>)
 8007e68:	5c6b      	ldrb	r3, [r5, r1]
 8007e6a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e6c:	4c08      	ldr	r4, [pc, #32]	; (8007e90 <UARTEx_SetNbDataToProcess+0x48>)
 8007e6e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e70:	fb93 f3f1 	sdiv	r3, r3, r1
 8007e74:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e78:	5cab      	ldrb	r3, [r5, r2]
 8007e7a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e7c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e82:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8007e86:	bc30      	pop	{r4, r5}
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	08013fe0 	.word	0x08013fe0
 8007e90:	08013fd8 	.word	0x08013fd8

08007e94 <HAL_UARTEx_WakeupCallback>:
}
 8007e94:	4770      	bx	lr

08007e96 <HAL_UARTEx_RxFifoFullCallback>:
}
 8007e96:	4770      	bx	lr

08007e98 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8007e98:	4770      	bx	lr

08007e9a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8007e9a:	b510      	push	{r4, lr}
 8007e9c:	b084      	sub	sp, #16
 8007e9e:	ab04      	add	r3, sp, #16
 8007ea0:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8007ea4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d035      	beq.n	8007f18 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8007eac:	4604      	mov	r4, r0
 8007eae:	2301      	movs	r3, #1
 8007eb0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007eb4:	2324      	movs	r3, #36	; 0x24
 8007eb6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007eba:	6802      	ldr	r2, [r0, #0]
 8007ebc:	6813      	ldr	r3, [r2, #0]
 8007ebe:	f023 0301 	bic.w	r3, r3, #1
 8007ec2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007ec4:	6801      	ldr	r1, [r0, #0]
 8007ec6:	688b      	ldr	r3, [r1, #8]
 8007ec8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007ecc:	9a02      	ldr	r2, [sp, #8]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007ed2:	b1aa      	cbz	r2, 8007f00 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8007ed4:	6822      	ldr	r2, [r4, #0]
 8007ed6:	6813      	ldr	r3, [r2, #0]
 8007ed8:	f043 0301 	orr.w	r3, r3, #1
 8007edc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8007ede:	f7fb fb7f 	bl	80035e0 <HAL_GetTick>
 8007ee2:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ee4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8007ee8:	9200      	str	r2, [sp, #0]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f7ff fdf6 	bl	8007ae2 <UART_WaitOnFlagUntilTimeout>
 8007ef6:	b948      	cbnz	r0, 8007f0c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8007ef8:	2320      	movs	r3, #32
 8007efa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8007efe:	e006      	b.n	8007f0e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007f00:	ab04      	add	r3, sp, #16
 8007f02:	e913 0006 	ldmdb	r3, {r1, r2}
 8007f06:	f7ff ff87 	bl	8007e18 <UARTEx_Wakeup_AddressConfig>
 8007f0a:	e7e3      	b.n	8007ed4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8007f0c:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8007f14:	b004      	add	sp, #16
 8007f16:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8007f18:	2002      	movs	r0, #2
 8007f1a:	e7fb      	b.n	8007f14 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08007f1c <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8007f1c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d010      	beq.n	8007f46 <HAL_UARTEx_EnableStopMode+0x2a>
 8007f24:	2301      	movs	r3, #1
 8007f26:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007f2a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2c:	e852 3f00 	ldrex	r3, [r2]
 8007f30:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f34:	e842 3100 	strex	r1, r3, [r2]
 8007f38:	2900      	cmp	r1, #0
 8007f3a:	d1f6      	bne.n	8007f2a <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8007f42:	4618      	mov	r0, r3
 8007f44:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007f46:	2002      	movs	r0, #2
}
 8007f48:	4770      	bx	lr

08007f4a <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8007f4a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d01d      	beq.n	8007f8e <HAL_UARTEx_EnableFifoMode+0x44>
{
 8007f52:	b510      	push	{r4, lr}
 8007f54:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8007f56:	2301      	movs	r3, #1
 8007f58:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007f5c:	2324      	movs	r3, #36	; 0x24
 8007f5e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f62:	6802      	ldr	r2, [r0, #0]
 8007f64:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007f66:	6811      	ldr	r1, [r2, #0]
 8007f68:	f021 0101 	bic.w	r1, r1, #1
 8007f6c:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007f72:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007f76:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f78:	6802      	ldr	r2, [r0, #0]
 8007f7a:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8007f7c:	f7ff ff64 	bl	8007e48 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8007f80:	2320      	movs	r3, #32
 8007f82:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007f86:	2000      	movs	r0, #0
 8007f88:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007f8c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8007f8e:	2002      	movs	r0, #2
}
 8007f90:	4770      	bx	lr

08007f92 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007f92:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007f94:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d01d      	beq.n	8007fd8 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007fa4:	2324      	movs	r3, #36	; 0x24
 8007fa6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007faa:	6803      	ldr	r3, [r0, #0]
 8007fac:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	f022 0201 	bic.w	r2, r2, #1
 8007fb4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fb6:	6802      	ldr	r2, [r0, #0]
 8007fb8:	6893      	ldr	r3, [r2, #8]
 8007fba:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8007fbe:	4319      	orrs	r1, r3
 8007fc0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007fc2:	f7ff ff41 	bl	8007e48 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007fca:	2320      	movs	r3, #32
 8007fcc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007fd8:	2002      	movs	r0, #2
 8007fda:	e7fc      	b.n	8007fd6 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08007fdc <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007fdc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007fde:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d01d      	beq.n	8008022 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007fee:	2324      	movs	r3, #36	; 0x24
 8007ff0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ff4:	6803      	ldr	r3, [r0, #0]
 8007ff6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	f022 0201 	bic.w	r2, r2, #1
 8007ffe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008000:	6802      	ldr	r2, [r0, #0]
 8008002:	6893      	ldr	r3, [r2, #8]
 8008004:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8008008:	4319      	orrs	r1, r3
 800800a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800800c:	f7ff ff1c 	bl	8007e48 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008014:	2320      	movs	r3, #32
 8008016:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800801a:	2000      	movs	r0, #0
 800801c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008020:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008022:	2002      	movs	r0, #2
 8008024:	e7fc      	b.n	8008020 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08008028 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 8008028:	2804      	cmp	r0, #4
 800802a:	d807      	bhi.n	800803c <LmHandlerPackageIsInitialized+0x14>
{
 800802c:	b508      	push	{r3, lr}
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800802e:	4b05      	ldr	r3, [pc, #20]	; (8008044 <LmHandlerPackageIsInitialized+0x1c>)
 8008030:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	b11b      	cbz	r3, 8008040 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8008038:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 800803a:	bd08      	pop	{r3, pc}
        return false;
 800803c:	2000      	movs	r0, #0
}
 800803e:	4770      	bx	lr
        return false;
 8008040:	2000      	movs	r0, #0
 8008042:	e7fa      	b.n	800803a <LmHandlerPackageIsInitialized+0x12>
 8008044:	20000360 	.word	0x20000360

08008048 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8008048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804a:	4605      	mov	r5, r0
 800804c:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800804e:	2400      	movs	r4, #0
 8008050:	e018      	b.n	8008084 <LmHandlerPackagesNotify+0x3c>
                    }
                    break;
                }
                case PACKAGE_MCPS_INDICATION:
                {
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8008052:	69da      	ldr	r2, [r3, #28]
 8008054:	b1a2      	cbz	r2, 8008080 <LmHandlerPackagesNotify+0x38>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8008056:	781a      	ldrb	r2, [r3, #0]
 8008058:	78fb      	ldrb	r3, [r7, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800805a:	429a      	cmp	r2, r3
 800805c:	d005      	beq.n	800806a <LmHandlerPackagesNotify+0x22>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800805e:	b97c      	cbnz	r4, 8008080 <LmHandlerPackagesNotify+0x38>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8008060:	4b13      	ldr	r3, [pc, #76]	; (80080b0 <LmHandlerPackagesNotify+0x68>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	4798      	blx	r3
 8008068:	b150      	cbz	r0, 8008080 <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800806a:	4b11      	ldr	r3, [pc, #68]	; (80080b0 <LmHandlerPackagesNotify+0x68>)
 800806c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	4638      	mov	r0, r7
 8008074:	4798      	blx	r3
 8008076:	e003      	b.n	8008080 <LmHandlerPackagesNotify+0x38>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	b10b      	cbz	r3, 8008080 <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800807c:	4638      	mov	r0, r7
 800807e:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008080:	3401      	adds	r4, #1
 8008082:	b264      	sxtb	r4, r4
 8008084:	2c04      	cmp	r4, #4
 8008086:	dc11      	bgt.n	80080ac <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8008088:	4626      	mov	r6, r4
 800808a:	4b09      	ldr	r3, [pc, #36]	; (80080b0 <LmHandlerPackagesNotify+0x68>)
 800808c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d0f5      	beq.n	8008080 <LmHandlerPackagesNotify+0x38>
            switch( notifyType )
 8008094:	2d01      	cmp	r5, #1
 8008096:	d0dc      	beq.n	8008052 <LmHandlerPackagesNotify+0xa>
 8008098:	2d02      	cmp	r5, #2
 800809a:	d0ed      	beq.n	8008078 <LmHandlerPackagesNotify+0x30>
 800809c:	2d00      	cmp	r5, #0
 800809e:	d1ef      	bne.n	8008080 <LmHandlerPackagesNotify+0x38>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d0ec      	beq.n	8008080 <LmHandlerPackagesNotify+0x38>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 80080a6:	4638      	mov	r0, r7
 80080a8:	4798      	blx	r3
 80080aa:	e7e9      	b.n	8008080 <LmHandlerPackagesNotify+0x38>
                    break;
                }
            }
        }
    }
}
 80080ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20000360 	.word	0x20000360

080080b4 <McpsConfirm>:
{
 80080b4:	b510      	push	{r4, lr}
 80080b6:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 80080b8:	480c      	ldr	r0, [pc, #48]	; (80080ec <McpsConfirm+0x38>)
 80080ba:	2301      	movs	r3, #1
 80080bc:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 80080be:	7863      	ldrb	r3, [r4, #1]
 80080c0:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 80080c2:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80080c6:	7103      	strb	r3, [r0, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 80080c8:	68e3      	ldr	r3, [r4, #12]
 80080ca:	6083      	str	r3, [r0, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 80080cc:	f994 3003 	ldrsb.w	r3, [r4, #3]
 80080d0:	7503      	strb	r3, [r0, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 80080d2:	6923      	ldr	r3, [r4, #16]
 80080d4:	7543      	strb	r3, [r0, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 80080d6:	7923      	ldrb	r3, [r4, #4]
 80080d8:	70c3      	strb	r3, [r0, #3]
    LmHandlerCallbacks->OnTxData( &TxParams );
 80080da:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <McpsConfirm+0x3c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 80080e2:	4621      	mov	r1, r4
 80080e4:	2000      	movs	r0, #0
 80080e6:	f7ff ffaf 	bl	8008048 <LmHandlerPackagesNotify>
}
 80080ea:	bd10      	pop	{r4, pc}
 80080ec:	200003a8 	.word	0x200003a8
 80080f0:	2000035c 	.word	0x2000035c

080080f4 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 80080f4:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80080f6:	2400      	movs	r4, #0
 80080f8:	e001      	b.n	80080fe <LmHandlerPackagesProcess+0xa>
 80080fa:	3401      	adds	r4, #1
 80080fc:	b264      	sxtb	r4, r4
 80080fe:	2c04      	cmp	r4, #4
 8008100:	dc12      	bgt.n	8008128 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8008102:	4b0a      	ldr	r3, [pc, #40]	; (800812c <LmHandlerPackagesProcess+0x38>)
 8008104:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d0f6      	beq.n	80080fa <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800810c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800810e:	2b00      	cmp	r3, #0
 8008110:	d0f3      	beq.n	80080fa <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8008112:	b2e0      	uxtb	r0, r4
 8008114:	f7ff ff88 	bl	8008028 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8008118:	2800      	cmp	r0, #0
 800811a:	d0ee      	beq.n	80080fa <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 800811c:	4b03      	ldr	r3, [pc, #12]	; (800812c <LmHandlerPackagesProcess+0x38>)
 800811e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	4798      	blx	r3
 8008126:	e7e8      	b.n	80080fa <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8008128:	bd38      	pop	{r3, r4, r5, pc}
 800812a:	bf00      	nop
 800812c:	20000360 	.word	0x20000360

08008130 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 8008130:	b500      	push	{lr}
 8008132:	b083      	sub	sp, #12
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8008134:	4b05      	ldr	r3, [pc, #20]	; (800814c <DisplayClassUpdate+0x1c>)
 8008136:	5c1b      	ldrb	r3, [r3, r0]
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	4b05      	ldr	r3, [pc, #20]	; (8008150 <DisplayClassUpdate+0x20>)
 800813c:	2200      	movs	r2, #0
 800813e:	4611      	mov	r1, r2
 8008140:	2002      	movs	r0, #2
 8008142:	f00a febd 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
}
 8008146:	b003      	add	sp, #12
 8008148:	f85d fb04 	ldr.w	pc, [sp], #4
 800814c:	08014004 	.word	0x08014004
 8008150:	08013fe8 	.word	0x08013fe8

08008154 <LmHandlerSetSystemMaxRxError>:
{
 8008154:	b500      	push	{lr}
 8008156:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8008158:	2322      	movs	r3, #34	; 0x22
 800815a:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800815e:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008160:	a801      	add	r0, sp, #4
 8008162:	f003 fa8b 	bl	800b67c <LoRaMacMibSetRequestConfirm>
 8008166:	b910      	cbnz	r0, 800816e <LmHandlerSetSystemMaxRxError+0x1a>
}
 8008168:	b00b      	add	sp, #44	; 0x2c
 800816a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800816e:	f04f 30ff 	mov.w	r0, #4294967295
 8008172:	e7f9      	b.n	8008168 <LmHandlerSetSystemMaxRxError+0x14>

08008174 <LmHandlerDeviceTimeReq>:
{
 8008174:	b500      	push	{lr}
 8008176:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8008178:	230a      	movs	r3, #10
 800817a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800817e:	a801      	add	r0, sp, #4
 8008180:	f003 fcf4 	bl	800bb6c <LoRaMacMlmeRequest>
    if( status == LORAMAC_STATUS_OK )
 8008184:	b910      	cbnz	r0, 800818c <LmHandlerDeviceTimeReq+0x18>
}
 8008186:	b007      	add	sp, #28
 8008188:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800818c:	f04f 30ff 	mov.w	r0, #4294967295
 8008190:	e7f9      	b.n	8008186 <LmHandlerDeviceTimeReq+0x12>
	...

08008194 <LmHandlerConfigure>:
{
 8008194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008196:	b095      	sub	sp, #84	; 0x54
 8008198:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800819a:	4c6a      	ldr	r4, [pc, #424]	; (8008344 <LmHandlerConfigure+0x1b0>)
 800819c:	2210      	movs	r2, #16
 800819e:	4620      	mov	r0, r4
 80081a0:	f00a ffa2 	bl	80130e8 <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 80081a4:	f7fb fee2 	bl	8003f6c <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 80081a8:	7822      	ldrb	r2, [r4, #0]
 80081aa:	2301      	movs	r3, #1
 80081ac:	4093      	lsls	r3, r2
 80081ae:	6841      	ldr	r1, [r0, #4]
 80081b0:	420b      	tst	r3, r1
 80081b2:	f000 80b6 	beq.w	8008322 <LmHandlerConfigure+0x18e>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 80081b6:	4964      	ldr	r1, [pc, #400]	; (8008348 <LmHandlerConfigure+0x1b4>)
 80081b8:	4864      	ldr	r0, [pc, #400]	; (800834c <LmHandlerConfigure+0x1b8>)
 80081ba:	f002 ff0f 	bl	800afdc <LoRaMacInitialization>
 80081be:	2800      	cmp	r0, #0
 80081c0:	f040 80bc 	bne.w	800833c <LmHandlerConfigure+0x1a8>
    nbNvmData = NvmDataMgmtRestore( );
 80081c4:	f004 fecd 	bl	800cf62 <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 80081c8:	2800      	cmp	r0, #0
 80081ca:	f000 80b3 	beq.w	8008334 <LmHandlerConfigure+0x1a0>
        CtxRestoreDone = true;
 80081ce:	4b60      	ldr	r3, [pc, #384]	; (8008350 <LmHandlerConfigure+0x1bc>)
 80081d0:	2201      	movs	r2, #1
 80081d2:	701a      	strb	r2, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 80081d4:	2502      	movs	r5, #2
 80081d6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 80081da:	a80b      	add	r0, sp, #44	; 0x2c
 80081dc:	f003 f936 	bl	800b44c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 80081e0:	4c5c      	ldr	r4, [pc, #368]	; (8008354 <LmHandlerConfigure+0x1c0>)
 80081e2:	2208      	movs	r2, #8
 80081e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081e6:	4620      	mov	r0, r4
 80081e8:	f008 fce1 	bl	8010bae <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 80081ec:	2303      	movs	r3, #3
 80081ee:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 80081f2:	a80b      	add	r0, sp, #44	; 0x2c
 80081f4:	f003 f92a 	bl	800b44c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 80081f8:	2208      	movs	r2, #8
 80081fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081fc:	18a0      	adds	r0, r4, r2
 80081fe:	f008 fcd6 	bl	8010bae <memcpy1>
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8008202:	4b55      	ldr	r3, [pc, #340]	; (8008358 <LmHandlerConfigure+0x1c4>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	4798      	blx	r3
 800820a:	6160      	str	r0, [r4, #20]
    mibReq.Type = MIB_DEV_ADDR;
 800820c:	2306      	movs	r3, #6
 800820e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8008212:	900c      	str	r0, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 8008214:	a80b      	add	r0, sp, #44	; 0x2c
 8008216:	f003 fa31 	bl	800b67c <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "-------------------------------------\r\n");
 800821a:	4b50      	ldr	r3, [pc, #320]	; (800835c <LmHandlerConfigure+0x1c8>)
 800821c:	2200      	movs	r2, #0
 800821e:	4611      	mov	r1, r2
 8008220:	4628      	mov	r0, r5
 8008222:	f00a fe4d 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, ">> DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8008226:	7823      	ldrb	r3, [r4, #0]
 8008228:	7862      	ldrb	r2, [r4, #1]
 800822a:	78a1      	ldrb	r1, [r4, #2]
 800822c:	78e0      	ldrb	r0, [r4, #3]
 800822e:	7926      	ldrb	r6, [r4, #4]
 8008230:	7967      	ldrb	r7, [r4, #5]
 8008232:	f894 c006 	ldrb.w	ip, [r4, #6]
 8008236:	f894 e007 	ldrb.w	lr, [r4, #7]
 800823a:	f8cd e01c 	str.w	lr, [sp, #28]
 800823e:	f8cd c018 	str.w	ip, [sp, #24]
 8008242:	9705      	str	r7, [sp, #20]
 8008244:	9604      	str	r6, [sp, #16]
 8008246:	9003      	str	r0, [sp, #12]
 8008248:	9102      	str	r1, [sp, #8]
 800824a:	9201      	str	r2, [sp, #4]
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	4b44      	ldr	r3, [pc, #272]	; (8008360 <LmHandlerConfigure+0x1cc>)
 8008250:	2200      	movs	r2, #0
 8008252:	4611      	mov	r1, r2
 8008254:	4628      	mov	r0, r5
 8008256:	f00a fe33 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, ">> AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800825a:	7a23      	ldrb	r3, [r4, #8]
 800825c:	7a62      	ldrb	r2, [r4, #9]
 800825e:	7aa1      	ldrb	r1, [r4, #10]
 8008260:	7ae0      	ldrb	r0, [r4, #11]
 8008262:	7b26      	ldrb	r6, [r4, #12]
 8008264:	7b67      	ldrb	r7, [r4, #13]
 8008266:	f894 c00e 	ldrb.w	ip, [r4, #14]
 800826a:	f894 e00f 	ldrb.w	lr, [r4, #15]
 800826e:	f8cd e01c 	str.w	lr, [sp, #28]
 8008272:	f8cd c018 	str.w	ip, [sp, #24]
 8008276:	9705      	str	r7, [sp, #20]
 8008278:	9604      	str	r6, [sp, #16]
 800827a:	9003      	str	r0, [sp, #12]
 800827c:	9102      	str	r1, [sp, #8]
 800827e:	9201      	str	r2, [sp, #4]
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	4b38      	ldr	r3, [pc, #224]	; (8008364 <LmHandlerConfigure+0x1d0>)
 8008284:	2200      	movs	r2, #0
 8008286:	4611      	mov	r1, r2
 8008288:	4628      	mov	r0, r5
 800828a:	f00a fe19 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, ">> DevAddr: %02X:%02X:%02X:%02X\r\n",
 800828e:	7de3      	ldrb	r3, [r4, #23]
 8008290:	7da2      	ldrb	r2, [r4, #22]
 8008292:	7d61      	ldrb	r1, [r4, #21]
 8008294:	7d20      	ldrb	r0, [r4, #20]
 8008296:	9003      	str	r0, [sp, #12]
 8008298:	9102      	str	r1, [sp, #8]
 800829a:	9201      	str	r2, [sp, #4]
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	4b32      	ldr	r3, [pc, #200]	; (8008368 <LmHandlerConfigure+0x1d4>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	4611      	mov	r1, r2
 80082a4:	4628      	mov	r0, r5
 80082a6:	f00a fe0b 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 80082aa:	270f      	movs	r7, #15
 80082ac:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 80082b0:	2301      	movs	r3, #1
 80082b2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 80082b6:	a80b      	add	r0, sp, #44	; 0x2c
 80082b8:	f003 f9e0 	bl	800b67c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 80082bc:	2305      	movs	r3, #5
 80082be:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80082c2:	2400      	movs	r4, #0
 80082c4:	940c      	str	r4, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 80082c6:	a80b      	add	r0, sp, #44	; 0x2c
 80082c8:	f003 f9d8 	bl	800b67c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 80082cc:	2310      	movs	r3, #16
 80082ce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 80082d2:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 80082d6:	a80b      	add	r0, sp, #44	; 0x2c
 80082d8:	f003 f9d0 	bl	800b67c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 80082dc:	2304      	movs	r3, #4
 80082de:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80082e2:	4e18      	ldr	r6, [pc, #96]	; (8008344 <LmHandlerConfigure+0x1b0>)
 80082e4:	78b3      	ldrb	r3, [r6, #2]
 80082e6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 80082ea:	a80b      	add	r0, sp, #44	; 0x2c
 80082ec:	f003 f9c6 	bl	800b67c <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80082f0:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 80082f4:	a909      	add	r1, sp, #36	; 0x24
 80082f6:	7830      	ldrb	r0, [r6, #0]
 80082f8:	f004 fe43 	bl	800cf82 <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 80082fc:	1b00      	subs	r0, r0, r4
 80082fe:	bf18      	it	ne
 8008300:	2001      	movne	r0, #1
 8008302:	7170      	strb	r0, [r6, #5]
    LmHandlerSetSystemMaxRxError( 20 );
 8008304:	2014      	movs	r0, #20
 8008306:	f7ff ff25 	bl	8008154 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800830a:	7970      	ldrb	r0, [r6, #5]
 800830c:	f003 fdbe 	bl	800be8c <LoRaMacTestSetDutyCycleOn>
	MW_LOG(TS_OFF, VLEVEL_M, "-------------------------------------\r\n\r\n");
 8008310:	4b16      	ldr	r3, [pc, #88]	; (800836c <LmHandlerConfigure+0x1d8>)
 8008312:	4622      	mov	r2, r4
 8008314:	4621      	mov	r1, r4
 8008316:	4628      	mov	r0, r5
 8008318:	f00a fdd2 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
    return LORAMAC_HANDLER_SUCCESS;
 800831c:	4620      	mov	r0, r4
}
 800831e:	b015      	add	sp, #84	; 0x54
 8008320:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8008322:	4b13      	ldr	r3, [pc, #76]	; (8008370 <LmHandlerConfigure+0x1dc>)
 8008324:	2201      	movs	r2, #1
 8008326:	2100      	movs	r1, #0
 8008328:	4608      	mov	r0, r1
 800832a:	f00a fdc9 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
        return LORAMAC_HANDLER_ERROR;
 800832e:	f04f 30ff 	mov.w	r0, #4294967295
 8008332:	e7f4      	b.n	800831e <LmHandlerConfigure+0x18a>
        CtxRestoreDone = false;
 8008334:	4b06      	ldr	r3, [pc, #24]	; (8008350 <LmHandlerConfigure+0x1bc>)
 8008336:	2200      	movs	r2, #0
 8008338:	701a      	strb	r2, [r3, #0]
 800833a:	e74b      	b.n	80081d4 <LmHandlerConfigure+0x40>
            return LORAMAC_HANDLER_ERROR;
 800833c:	f04f 30ff 	mov.w	r0, #4294967295
 8008340:	e7ed      	b.n	800831e <LmHandlerConfigure+0x18a>
 8008342:	bf00      	nop
 8008344:	20000374 	.word	0x20000374
 8008348:	20000384 	.word	0x20000384
 800834c:	20000398 	.word	0x20000398
 8008350:	2000035a 	.word	0x2000035a
 8008354:	20000054 	.word	0x20000054
 8008358:	2000035c 	.word	0x2000035c
 800835c:	08014054 	.word	0x08014054
 8008360:	0801407c 	.word	0x0801407c
 8008364:	080140b4 	.word	0x080140b4
 8008368:	080140ec 	.word	0x080140ec
 800836c:	08014110 	.word	0x08014110
 8008370:	08014008 	.word	0x08014008

08008374 <LmHandlerProcess>:
{
 8008374:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 8008376:	f002 fdfd 	bl	800af74 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800837a:	f7ff febb 	bl	80080f4 <LmHandlerPackagesProcess>
    NvmDataMgmtStore( );
 800837e:	f004 fdee 	bl	800cf5e <NvmDataMgmtStore>
}
 8008382:	bd08      	pop	{r3, pc}

08008384 <LmHandlerJoinStatus>:
{
 8008384:	b500      	push	{lr}
 8008386:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008388:	2301      	movs	r3, #1
 800838a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800838e:	a801      	add	r0, sp, #4
 8008390:	f003 f85c 	bl	800b44c <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8008394:	b920      	cbnz	r0, 80083a0 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008396:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800839a:	b110      	cbz	r0, 80083a2 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 800839c:	2001      	movs	r0, #1
 800839e:	e000      	b.n	80083a2 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 80083a0:	2000      	movs	r0, #0
}
 80083a2:	b00b      	add	sp, #44	; 0x2c
 80083a4:	f85d fb04 	ldr.w	pc, [sp], #4

080083a8 <LmHandlerRequestClass>:
{
 80083a8:	b510      	push	{r4, lr}
 80083aa:	b08a      	sub	sp, #40	; 0x28
 80083ac:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 80083ae:	2300      	movs	r3, #0
 80083b0:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80083b4:	a801      	add	r0, sp, #4
 80083b6:	f003 f849 	bl	800b44c <LoRaMacMibGetRequestConfirm>
 80083ba:	bb88      	cbnz	r0, 8008420 <LmHandlerRequestClass+0x78>
    currentClass = mibReq.Param.Class;
 80083bc:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 80083c0:	42a3      	cmp	r3, r4
 80083c2:	d030      	beq.n	8008426 <LmHandlerRequestClass+0x7e>
        switch( newClass )
 80083c4:	2c01      	cmp	r4, #1
 80083c6:	d030      	beq.n	800842a <LmHandlerRequestClass+0x82>
 80083c8:	2c02      	cmp	r4, #2
 80083ca:	d017      	beq.n	80083fc <LmHandlerRequestClass+0x54>
 80083cc:	b114      	cbz	r4, 80083d4 <LmHandlerRequestClass+0x2c>
 80083ce:	2000      	movs	r0, #0
}
 80083d0:	b00a      	add	sp, #40	; 0x28
 80083d2:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 80083d4:	b90b      	cbnz	r3, 80083da <LmHandlerRequestClass+0x32>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80083d6:	2000      	movs	r0, #0
 80083d8:	e7fa      	b.n	80083d0 <LmHandlerRequestClass+0x28>
                    mibReq.Param.Class = newClass;
 80083da:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80083de:	a801      	add	r0, sp, #4
 80083e0:	f003 f94c 	bl	800b67c <LoRaMacMibSetRequestConfirm>
 80083e4:	bb20      	cbnz	r0, 8008430 <LmHandlerRequestClass+0x88>
                        DisplayClassUpdate(newClass);
 80083e6:	4620      	mov	r0, r4
 80083e8:	f7ff fea2 	bl	8008130 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80083ec:	4b17      	ldr	r3, [pc, #92]	; (800844c <LmHandlerRequestClass+0xa4>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f2:	b303      	cbz	r3, 8008436 <LmHandlerRequestClass+0x8e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80083f4:	4620      	mov	r0, r4
 80083f6:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80083f8:	2000      	movs	r0, #0
 80083fa:	e7e9      	b.n	80083d0 <LmHandlerRequestClass+0x28>
                if( currentClass != CLASS_A )
 80083fc:	b9eb      	cbnz	r3, 800843a <LmHandlerRequestClass+0x92>
                    mibReq.Param.Class = newClass;
 80083fe:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8008402:	a801      	add	r0, sp, #4
 8008404:	f003 f93a 	bl	800b67c <LoRaMacMibSetRequestConfirm>
 8008408:	b9d0      	cbnz	r0, 8008440 <LmHandlerRequestClass+0x98>
                        DisplayClassUpdate(newClass);
 800840a:	4620      	mov	r0, r4
 800840c:	f7ff fe90 	bl	8008130 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8008410:	4b0e      	ldr	r3, [pc, #56]	; (800844c <LmHandlerRequestClass+0xa4>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008416:	b1b3      	cbz	r3, 8008446 <LmHandlerRequestClass+0x9e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8008418:	4620      	mov	r0, r4
 800841a:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800841c:	2000      	movs	r0, #0
 800841e:	e7d7      	b.n	80083d0 <LmHandlerRequestClass+0x28>
        return LORAMAC_HANDLER_ERROR;
 8008420:	f04f 30ff 	mov.w	r0, #4294967295
 8008424:	e7d4      	b.n	80083d0 <LmHandlerRequestClass+0x28>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008426:	2000      	movs	r0, #0
 8008428:	e7d2      	b.n	80083d0 <LmHandlerRequestClass+0x28>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800842a:	f04f 30ff 	mov.w	r0, #4294967295
 800842e:	e7cf      	b.n	80083d0 <LmHandlerRequestClass+0x28>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8008430:	f04f 30ff 	mov.w	r0, #4294967295
 8008434:	e7cc      	b.n	80083d0 <LmHandlerRequestClass+0x28>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008436:	2000      	movs	r0, #0
 8008438:	e7ca      	b.n	80083d0 <LmHandlerRequestClass+0x28>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800843a:	f04f 30ff 	mov.w	r0, #4294967295
 800843e:	e7c7      	b.n	80083d0 <LmHandlerRequestClass+0x28>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8008440:	f04f 30ff 	mov.w	r0, #4294967295
 8008444:	e7c4      	b.n	80083d0 <LmHandlerRequestClass+0x28>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008446:	2000      	movs	r0, #0
 8008448:	e7c2      	b.n	80083d0 <LmHandlerRequestClass+0x28>
 800844a:	bf00      	nop
 800844c:	2000035c 	.word	0x2000035c

08008450 <LmHandlerJoin>:
{
 8008450:	b500      	push	{lr}
 8008452:	b08f      	sub	sp, #60	; 0x3c
    if ( mode == ACTIVATION_TYPE_OTAA )
 8008454:	2802      	cmp	r0, #2
 8008456:	d023      	beq.n	80084a0 <LmHandlerJoin+0x50>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8008458:	4b1e      	ldr	r3, [pc, #120]	; (80084d4 <LmHandlerJoin+0x84>)
 800845a:	2201      	movs	r2, #1
 800845c:	709a      	strb	r2, [r3, #2]
		mlmeReq.Type = MLME_JOIN;
 800845e:	f88d 2000 	strb.w	r2, [sp]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8008462:	4a1d      	ldr	r2, [pc, #116]	; (80084d8 <LmHandlerJoin+0x88>)
 8008464:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8008468:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800846a:	2200      	movs	r2, #0
 800846c:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800846e:	4b1b      	ldr	r3, [pc, #108]	; (80084dc <LmHandlerJoin+0x8c>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	b32b      	cbz	r3, 80084c0 <LmHandlerJoin+0x70>
        LoRaMacStart();
 8008474:	f002 ff7c 	bl	800b370 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008478:	2301      	movs	r3, #1
 800847a:	f88d 3014 	strb.w	r3, [sp, #20]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800847e:	f88d 3018 	strb.w	r3, [sp, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8008482:	a805      	add	r0, sp, #20
 8008484:	f003 f8fa 	bl	800b67c <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8008488:	4b15      	ldr	r3, [pc, #84]	; (80084e0 <LmHandlerJoin+0x90>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	4811      	ldr	r0, [pc, #68]	; (80084d4 <LmHandlerJoin+0x84>)
 8008490:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008492:	4b11      	ldr	r3, [pc, #68]	; (80084d8 <LmHandlerJoin+0x88>)
 8008494:	7858      	ldrb	r0, [r3, #1]
 8008496:	f7ff ff87 	bl	80083a8 <LmHandlerRequestClass>
}
 800849a:	b00f      	add	sp, #60	; 0x3c
 800849c:	f85d fb04 	ldr.w	pc, [sp], #4
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 80084a0:	4b0c      	ldr	r3, [pc, #48]	; (80084d4 <LmHandlerJoin+0x84>)
 80084a2:	2202      	movs	r2, #2
 80084a4:	709a      	strb	r2, [r3, #2]
        LoRaMacStart();
 80084a6:	f002 ff63 	bl	800b370 <LoRaMacStart>
        mlmeReq.Type = MLME_JOIN;
 80084aa:	2301      	movs	r3, #1
 80084ac:	f88d 3000 	strb.w	r3, [sp]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80084b0:	4b09      	ldr	r3, [pc, #36]	; (80084d8 <LmHandlerJoin+0x88>)
 80084b2:	78db      	ldrb	r3, [r3, #3]
 80084b4:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMlmeRequest( &mlmeReq );
 80084b8:	4668      	mov	r0, sp
 80084ba:	f003 fb57 	bl	800bb6c <LoRaMacMlmeRequest>
 80084be:	e7ec      	b.n	800849a <LmHandlerJoin+0x4a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80084c0:	2327      	movs	r3, #39	; 0x27
 80084c2:	f88d 3014 	strb.w	r3, [sp, #20]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80084c6:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <LmHandlerJoin+0x94>)
 80084c8:	9306      	str	r3, [sp, #24]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80084ca:	a805      	add	r0, sp, #20
 80084cc:	f003 f8d6 	bl	800b67c <LoRaMacMibSetRequestConfirm>
 80084d0:	e7d0      	b.n	8008474 <LmHandlerJoin+0x24>
 80084d2:	bf00      	nop
 80084d4:	2000006c 	.word	0x2000006c
 80084d8:	20000374 	.word	0x20000374
 80084dc:	2000035a 	.word	0x2000035a
 80084e0:	2000035c 	.word	0x2000035c
 80084e4:	01000300 	.word	0x01000300

080084e8 <LmHandlerSend>:
{
 80084e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ea:	b087      	sub	sp, #28
 80084ec:	4604      	mov	r4, r0
 80084ee:	460e      	mov	r6, r1
 80084f0:	4615      	mov	r5, r2
 80084f2:	461f      	mov	r7, r3
    if (LoRaMacIsBusy() == true)
 80084f4:	f002 fd2c 	bl	800af50 <LoRaMacIsBusy>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d16c      	bne.n	80085d6 <LmHandlerSend+0xee>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80084fc:	f7ff ff42 	bl	8008384 <LmHandlerJoinStatus>
 8008500:	2801      	cmp	r0, #1
 8008502:	d13d      	bne.n	8008580 <LmHandlerSend+0x98>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8008504:	4b39      	ldr	r3, [pc, #228]	; (80085ec <LmHandlerSend+0x104>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	4798      	blx	r3
 800850c:	b138      	cbz	r0, 800851e <LmHandlerSend+0x36>
 800850e:	7823      	ldrb	r3, [r4, #0]
 8008510:	4a36      	ldr	r2, [pc, #216]	; (80085ec <LmHandlerSend+0x104>)
 8008512:	6812      	ldr	r2, [r2, #0]
 8008514:	7812      	ldrb	r2, [r2, #0]
 8008516:	4293      	cmp	r3, r2
 8008518:	d001      	beq.n	800851e <LmHandlerSend+0x36>
 800851a:	2b00      	cmp	r3, #0
 800851c:	d15e      	bne.n	80085dc <LmHandlerSend+0xf4>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800851e:	4b34      	ldr	r3, [pc, #208]	; (80085f0 <LmHandlerSend+0x108>)
 8008520:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8008524:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8008528:	4669      	mov	r1, sp
 800852a:	7860      	ldrb	r0, [r4, #1]
 800852c:	f002 ff28 	bl	800b380 <LoRaMacQueryTxPossible>
 8008530:	b368      	cbz	r0, 800858e <LmHandlerSend+0xa6>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8008532:	2200      	movs	r2, #0
 8008534:	4b2f      	ldr	r3, [pc, #188]	; (80085f4 <LmHandlerSend+0x10c>)
 8008536:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8008538:	f88d 2004 	strb.w	r2, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800853c:	9203      	str	r2, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800853e:	f8ad 2010 	strh.w	r2, [sp, #16]
    TxParams.AppData = *appData;
 8008542:	4a2c      	ldr	r2, [pc, #176]	; (80085f4 <LmHandlerSend+0x10c>)
 8008544:	f102 060c 	add.w	r6, r2, #12
 8008548:	e894 0003 	ldmia.w	r4, {r0, r1}
 800854c:	e886 0003 	stmia.w	r6, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8008550:	4b27      	ldr	r3, [pc, #156]	; (80085f0 <LmHandlerSend+0x108>)
 8008552:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8008556:	7113      	strb	r3, [r2, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8008558:	4639      	mov	r1, r7
 800855a:	a801      	add	r0, sp, #4
 800855c:	f003 fbdc 	bl	800bd18 <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 8008560:	b10d      	cbz	r5, 8008566 <LmHandlerSend+0x7e>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8008562:	9b05      	ldr	r3, [sp, #20]
 8008564:	602b      	str	r3, [r5, #0]
    switch (status)
 8008566:	2811      	cmp	r0, #17
 8008568:	d832      	bhi.n	80085d0 <LmHandlerSend+0xe8>
 800856a:	e8df f000 	tbb	[pc, r0]
 800856e:	3a26      	.short	0x3a26
 8008570:	31313131 	.word	0x31313131
 8008574:	31312831 	.word	0x31312831
 8008578:	31312e31 	.word	0x31312e31
 800857c:	2b3a3a3a 	.word	0x2b3a3a3a
        LmHandlerJoin(JoinParams.Mode);
 8008580:	4b1d      	ldr	r3, [pc, #116]	; (80085f8 <LmHandlerSend+0x110>)
 8008582:	7898      	ldrb	r0, [r3, #2]
 8008584:	f7ff ff64 	bl	8008450 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008588:	f06f 0002 	mvn.w	r0, #2
 800858c:	e02b      	b.n	80085e6 <LmHandlerSend+0xfe>
        TxParams.MsgType = isTxConfirmed;
 800858e:	4b19      	ldr	r3, [pc, #100]	; (80085f4 <LmHandlerSend+0x10c>)
 8008590:	709e      	strb	r6, [r3, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8008592:	7823      	ldrb	r3, [r4, #0]
 8008594:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8008598:	7863      	ldrb	r3, [r4, #1]
 800859a:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800859e:	6863      	ldr	r3, [r4, #4]
 80085a0:	9303      	str	r3, [sp, #12]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 80085a2:	b91e      	cbnz	r6, 80085ac <LmHandlerSend+0xc4>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 80085a4:	2300      	movs	r3, #0
 80085a6:	f88d 3004 	strb.w	r3, [sp, #4]
 80085aa:	e7ca      	b.n	8008542 <LmHandlerSend+0x5a>
            mcpsReq.Type = MCPS_CONFIRMED;
 80085ac:	2301      	movs	r3, #1
 80085ae:	f88d 3004 	strb.w	r3, [sp, #4]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 80085b2:	2308      	movs	r3, #8
 80085b4:	f88d 3013 	strb.w	r3, [sp, #19]
 80085b8:	e7c3      	b.n	8008542 <LmHandlerSend+0x5a>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80085ba:	2000      	movs	r0, #0
 80085bc:	e013      	b.n	80085e6 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80085be:	f06f 0002 	mvn.w	r0, #2
            break;
 80085c2:	e010      	b.n	80085e6 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80085c4:	f06f 0004 	mvn.w	r0, #4
            break;
 80085c8:	e00d      	b.n	80085e6 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80085ca:	f06f 0005 	mvn.w	r0, #5
            break;
 80085ce:	e00a      	b.n	80085e6 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80085d0:	f04f 30ff 	mov.w	r0, #4294967295
            break;
 80085d4:	e007      	b.n	80085e6 <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80085d6:	f06f 0001 	mvn.w	r0, #1
 80085da:	e004      	b.n	80085e6 <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 80085dc:	f06f 0003 	mvn.w	r0, #3
 80085e0:	e001      	b.n	80085e6 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 80085e2:	f06f 0001 	mvn.w	r0, #1
}
 80085e6:	b007      	add	sp, #28
 80085e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ea:	bf00      	nop
 80085ec:	20000360 	.word	0x20000360
 80085f0:	20000374 	.word	0x20000374
 80085f4:	200003a8 	.word	0x200003a8
 80085f8:	2000006c 	.word	0x2000006c

080085fc <MlmeIndication>:
{
 80085fc:	b510      	push	{r4, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8008602:	4b18      	ldr	r3, [pc, #96]	; (8008664 <MlmeIndication+0x68>)
 8008604:	2200      	movs	r2, #0
 8008606:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8008608:	7842      	ldrb	r2, [r0, #1]
 800860a:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800860c:	f9b1 0000 	ldrsh.w	r0, [r1]
 8008610:	70d8      	strb	r0, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 8008612:	f991 0002 	ldrsb.w	r0, [r1, #2]
 8008616:	7118      	strb	r0, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 8008618:	f991 1003 	ldrsb.w	r1, [r1, #3]
 800861c:	7319      	strb	r1, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800861e:	2a0e      	cmp	r2, #14
 8008620:	d007      	beq.n	8008632 <MlmeIndication+0x36>
        LmHandlerCallbacks->OnRxData(-1, NULL, &RxParams );
 8008622:	4b11      	ldr	r3, [pc, #68]	; (8008668 <MlmeIndication+0x6c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	4a0e      	ldr	r2, [pc, #56]	; (8008664 <MlmeIndication+0x68>)
 800862a:	2100      	movs	r1, #0
 800862c:	f04f 30ff 	mov.w	r0, #4294967295
 8008630:	4798      	blx	r3
    switch( mlmeIndication->MlmeIndication )
 8008632:	7823      	ldrb	r3, [r4, #0]
 8008634:	2b07      	cmp	r3, #7
 8008636:	d001      	beq.n	800863c <MlmeIndication+0x40>
}
 8008638:	b002      	add	sp, #8
 800863a:	bd10      	pop	{r4, pc}
            LmHandlerAppData_t appData =
 800863c:	2300      	movs	r3, #0
 800863e:	f88d 3000 	strb.w	r3, [sp]
 8008642:	f88d 3001 	strb.w	r3, [sp, #1]
 8008646:	9301      	str	r3, [sp, #4]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 8008648:	4b08      	ldr	r3, [pc, #32]	; (800866c <MlmeIndication+0x70>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	4798      	blx	r3
 8008650:	2800      	cmp	r0, #0
 8008652:	d1f1      	bne.n	8008638 <MlmeIndication+0x3c>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 8008654:	2301      	movs	r3, #1
 8008656:	2200      	movs	r2, #0
 8008658:	4611      	mov	r1, r2
 800865a:	4668      	mov	r0, sp
 800865c:	f7ff ff44 	bl	80084e8 <LmHandlerSend>
}
 8008660:	e7ea      	b.n	8008638 <MlmeIndication+0x3c>
 8008662:	bf00      	nop
 8008664:	2000007c 	.word	0x2000007c
 8008668:	2000035c 	.word	0x2000035c
 800866c:	20000360 	.word	0x20000360

08008670 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 8008670:	b170      	cbz	r0, 8008690 <LmHandlerGetCurrentClass+0x20>
{
 8008672:	b510      	push	{r4, lr}
 8008674:	b08a      	sub	sp, #40	; 0x28
 8008676:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8008678:	2300      	movs	r3, #0
 800867a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800867e:	a801      	add	r0, sp, #4
 8008680:	f002 fee4 	bl	800b44c <LoRaMacMibGetRequestConfirm>
 8008684:	b938      	cbnz	r0, 8008696 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8008686:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800868a:	7023      	strb	r3, [r4, #0]
}
 800868c:	b00a      	add	sp, #40	; 0x28
 800868e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008690:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008694:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008696:	f04f 30ff 	mov.w	r0, #4294967295
 800869a:	e7f7      	b.n	800868c <LmHandlerGetCurrentClass+0x1c>

0800869c <McpsIndication>:
{
 800869c:	b510      	push	{r4, lr}
 800869e:	b086      	sub	sp, #24
    DeviceClass_t deviceClass = CLASS_A;
 80086a0:	2300      	movs	r3, #0
 80086a2:	f88d 300f 	strb.w	r3, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 80086a6:	4a2f      	ldr	r2, [pc, #188]	; (8008764 <McpsIndication+0xc8>)
 80086a8:	2301      	movs	r3, #1
 80086aa:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 80086ac:	7843      	ldrb	r3, [r0, #1]
 80086ae:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d132      	bne.n	800871a <McpsIndication+0x7e>
 80086b4:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 80086b6:	f990 2004 	ldrsb.w	r2, [r0, #4]
 80086ba:	4b2a      	ldr	r3, [pc, #168]	; (8008764 <McpsIndication+0xc8>)
 80086bc:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 80086be:	f9b1 2000 	ldrsh.w	r2, [r1]
 80086c2:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 80086c4:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80086c8:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 80086ca:	f991 2003 	ldrsb.w	r2, [r1, #3]
 80086ce:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80086d0:	6902      	ldr	r2, [r0, #16]
 80086d2:	609a      	str	r2, [r3, #8]
    appData.Port = mcpsIndication->Port;
 80086d4:	78c3      	ldrb	r3, [r0, #3]
 80086d6:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 80086da:	7b03      	ldrb	r3, [r0, #12]
 80086dc:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 80086e0:	6883      	ldr	r3, [r0, #8]
 80086e2:	9305      	str	r3, [sp, #20]
	if(mcpsIndication->McpsIndication == MCPS_UNCONFIRMED)
 80086e4:	7803      	ldrb	r3, [r0, #0]
 80086e6:	b9d3      	cbnz	r3, 800871e <McpsIndication+0x82>
    	LmHandlerCallbacks->OnRxData(0, &appData, &RxParams );
 80086e8:	4b1f      	ldr	r3, [pc, #124]	; (8008768 <McpsIndication+0xcc>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	4a1d      	ldr	r2, [pc, #116]	; (8008764 <McpsIndication+0xc8>)
 80086f0:	a904      	add	r1, sp, #16
 80086f2:	2000      	movs	r0, #0
 80086f4:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 80086f6:	4b1c      	ldr	r3, [pc, #112]	; (8008768 <McpsIndication+0xcc>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fc:	b113      	cbz	r3, 8008704 <McpsIndication+0x68>
 80086fe:	7e22      	ldrb	r2, [r4, #24]
 8008700:	b102      	cbz	r2, 8008704 <McpsIndication+0x68>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8008702:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8008704:	4621      	mov	r1, r4
 8008706:	2001      	movs	r0, #1
 8008708:	f7ff fc9e 	bl	8008048 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass(&deviceClass);
 800870c:	f10d 000f 	add.w	r0, sp, #15
 8008710:	f7ff ffae 	bl	8008670 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8008714:	7963      	ldrb	r3, [r4, #5]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d014      	beq.n	8008744 <McpsIndication+0xa8>
}
 800871a:	b006      	add	sp, #24
 800871c:	bd10      	pop	{r4, pc}
	else if(mcpsIndication->McpsIndication == MCPS_CONFIRMED)
 800871e:	2b01      	cmp	r3, #1
 8008720:	d008      	beq.n	8008734 <McpsIndication+0x98>
		LmHandlerCallbacks->OnRxData(-1, &appData, &RxParams );
 8008722:	4b11      	ldr	r3, [pc, #68]	; (8008768 <McpsIndication+0xcc>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	4a0e      	ldr	r2, [pc, #56]	; (8008764 <McpsIndication+0xc8>)
 800872a:	a904      	add	r1, sp, #16
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	4798      	blx	r3
 8008732:	e7e0      	b.n	80086f6 <McpsIndication+0x5a>
		LmHandlerCallbacks->OnRxData(1, &appData, &RxParams );
 8008734:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <McpsIndication+0xcc>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873a:	4a0a      	ldr	r2, [pc, #40]	; (8008764 <McpsIndication+0xc8>)
 800873c:	a904      	add	r1, sp, #16
 800873e:	2001      	movs	r0, #1
 8008740:	4798      	blx	r3
 8008742:	e7d8      	b.n	80086f6 <McpsIndication+0x5a>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8008744:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1e6      	bne.n	800871a <McpsIndication+0x7e>
        LmHandlerAppData_t appData =
 800874c:	2100      	movs	r1, #0
 800874e:	f88d 1004 	strb.w	r1, [sp, #4]
 8008752:	f88d 1005 	strb.w	r1, [sp, #5]
 8008756:	9102      	str	r1, [sp, #8]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8008758:	2301      	movs	r3, #1
 800875a:	460a      	mov	r2, r1
 800875c:	a801      	add	r0, sp, #4
 800875e:	f7ff fec3 	bl	80084e8 <LmHandlerSend>
 8008762:	e7da      	b.n	800871a <McpsIndication+0x7e>
 8008764:	2000007c 	.word	0x2000007c
 8008768:	2000035c 	.word	0x2000035c

0800876c <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 800876c:	b180      	cbz	r0, 8008790 <LmHandlerGetTxDatarate+0x24>
{
 800876e:	b510      	push	{r4, lr}
 8008770:	b08a      	sub	sp, #40	; 0x28
 8008772:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8008774:	231f      	movs	r3, #31
 8008776:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800877a:	a801      	add	r0, sp, #4
 800877c:	f002 fe66 	bl	800b44c <LoRaMacMibGetRequestConfirm>
 8008780:	b948      	cbnz	r0, 8008796 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8008782:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8008786:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8008788:	4a04      	ldr	r2, [pc, #16]	; (800879c <LmHandlerGetTxDatarate+0x30>)
 800878a:	70d3      	strb	r3, [r2, #3]
}
 800878c:	b00a      	add	sp, #40	; 0x28
 800878e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008790:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008794:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008796:	f04f 30ff 	mov.w	r0, #4294967295
 800879a:	e7f7      	b.n	800878c <LmHandlerGetTxDatarate+0x20>
 800879c:	20000374 	.word	0x20000374

080087a0 <MlmeConfirm>:
{
 80087a0:	b510      	push	{r4, lr}
 80087a2:	b08a      	sub	sp, #40	; 0x28
 80087a4:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 80087a6:	481d      	ldr	r0, [pc, #116]	; (800881c <MlmeConfirm+0x7c>)
 80087a8:	2300      	movs	r3, #0
 80087aa:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 80087ac:	7863      	ldrb	r3, [r4, #1]
 80087ae:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 80087b0:	4b1b      	ldr	r3, [pc, #108]	; (8008820 <MlmeConfirm+0x80>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 80087b8:	4621      	mov	r1, r4
 80087ba:	2002      	movs	r0, #2
 80087bc:	f7ff fc44 	bl	8008048 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 80087c0:	7823      	ldrb	r3, [r4, #0]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d003      	beq.n	80087ce <MlmeConfirm+0x2e>
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d020      	beq.n	800880c <MlmeConfirm+0x6c>
}
 80087ca:	b00a      	add	sp, #40	; 0x28
 80087cc:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 80087ce:	2306      	movs	r3, #6
 80087d0:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80087d4:	a801      	add	r0, sp, #4
 80087d6:	f002 fe39 	bl	800b44c <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80087da:	9a02      	ldr	r2, [sp, #8]
 80087dc:	4b11      	ldr	r3, [pc, #68]	; (8008824 <MlmeConfirm+0x84>)
 80087de:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80087e0:	4811      	ldr	r0, [pc, #68]	; (8008828 <MlmeConfirm+0x88>)
 80087e2:	f7ff ffc3 	bl	800876c <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80087e6:	7863      	ldrb	r3, [r4, #1]
 80087e8:	b143      	cbz	r3, 80087fc <MlmeConfirm+0x5c>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80087ea:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <MlmeConfirm+0x88>)
 80087ec:	22ff      	movs	r2, #255	; 0xff
 80087ee:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80087f0:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <MlmeConfirm+0x80>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	480c      	ldr	r0, [pc, #48]	; (8008828 <MlmeConfirm+0x88>)
 80087f8:	4798      	blx	r3
        break;
 80087fa:	e7e6      	b.n	80087ca <MlmeConfirm+0x2a>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80087fc:	4b0a      	ldr	r3, [pc, #40]	; (8008828 <MlmeConfirm+0x88>)
 80087fe:	2200      	movs	r2, #0
 8008800:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008802:	4b0a      	ldr	r3, [pc, #40]	; (800882c <MlmeConfirm+0x8c>)
 8008804:	7858      	ldrb	r0, [r3, #1]
 8008806:	f7ff fdcf 	bl	80083a8 <LmHandlerRequestClass>
 800880a:	e7f1      	b.n	80087f0 <MlmeConfirm+0x50>
            RxParams.LinkCheck = true;
 800880c:	4b08      	ldr	r3, [pc, #32]	; (8008830 <MlmeConfirm+0x90>)
 800880e:	2201      	movs	r2, #1
 8008810:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8008812:	7a22      	ldrb	r2, [r4, #8]
 8008814:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8008816:	7a62      	ldrb	r2, [r4, #9]
 8008818:	73da      	strb	r2, [r3, #15]
}
 800881a:	e7d6      	b.n	80087ca <MlmeConfirm+0x2a>
 800881c:	200003a8 	.word	0x200003a8
 8008820:	2000035c 	.word	0x2000035c
 8008824:	20000054 	.word	0x20000054
 8008828:	2000006c 	.word	0x2000006c
 800882c:	20000374 	.word	0x20000374
 8008830:	2000007c 	.word	0x2000007c

08008834 <LmHandlerPackageRegister>:
    switch( id )
 8008834:	b9e0      	cbnz	r0, 8008870 <LmHandlerPackageRegister+0x3c>
{
 8008836:	b538      	push	{r3, r4, r5, lr}
 8008838:	460c      	mov	r4, r1
 800883a:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 800883c:	f000 fa20 	bl	8008c80 <LmhpCompliancePackageFactory>
    if( package != NULL )
 8008840:	b198      	cbz	r0, 800886a <LmHandlerPackageRegister+0x36>
        LmHandlerPackages[id] = package;
 8008842:	4a0d      	ldr	r2, [pc, #52]	; (8008878 <LmHandlerPackageRegister+0x44>)
 8008844:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8008848:	4a0c      	ldr	r2, [pc, #48]	; (800887c <LmHandlerPackageRegister+0x48>)
 800884a:	6242      	str	r2, [r0, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800884c:	4a0c      	ldr	r2, [pc, #48]	; (8008880 <LmHandlerPackageRegister+0x4c>)
 800884e:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8008850:	4a0c      	ldr	r2, [pc, #48]	; (8008884 <LmHandlerPackageRegister+0x50>)
 8008852:	62c2      	str	r2, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8008854:	4a0c      	ldr	r2, [pc, #48]	; (8008888 <LmHandlerPackageRegister+0x54>)
 8008856:	6812      	ldr	r2, [r2, #0]
 8008858:	6912      	ldr	r2, [r2, #16]
 800885a:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800885c:	6843      	ldr	r3, [r0, #4]
 800885e:	22f2      	movs	r2, #242	; 0xf2
 8008860:	490a      	ldr	r1, [pc, #40]	; (800888c <LmHandlerPackageRegister+0x58>)
 8008862:	4620      	mov	r0, r4
 8008864:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8008866:	2000      	movs	r0, #0
}
 8008868:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 800886a:	f04f 30ff 	mov.w	r0, #4294967295
 800886e:	e7fb      	b.n	8008868 <LmHandlerPackageRegister+0x34>
 8008870:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	20000360 	.word	0x20000360
 800887c:	08008451 	.word	0x08008451
 8008880:	080084e9 	.word	0x080084e9
 8008884:	08008175 	.word	0x08008175
 8008888:	2000035c 	.word	0x2000035c
 800888c:	20000268 	.word	0x20000268

08008890 <LmHandlerInit>:
{
 8008890:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 8008892:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <LmHandlerInit+0x40>)
 8008894:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8008896:	4b0f      	ldr	r3, [pc, #60]	; (80088d4 <LmHandlerInit+0x44>)
 8008898:	4a0f      	ldr	r2, [pc, #60]	; (80088d8 <LmHandlerInit+0x48>)
 800889a:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800889c:	4a0f      	ldr	r2, [pc, #60]	; (80088dc <LmHandlerInit+0x4c>)
 800889e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80088a0:	4a0f      	ldr	r2, [pc, #60]	; (80088e0 <LmHandlerInit+0x50>)
 80088a2:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80088a4:	4a0f      	ldr	r2, [pc, #60]	; (80088e4 <LmHandlerInit+0x54>)
 80088a6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 80088a8:	6802      	ldr	r2, [r0, #0]
 80088aa:	4b0f      	ldr	r3, [pc, #60]	; (80088e8 <LmHandlerInit+0x58>)
 80088ac:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 80088ae:	6842      	ldr	r2, [r0, #4]
 80088b0:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 80088b2:	6882      	ldr	r2, [r0, #8]
 80088b4:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 80088b6:	4a0d      	ldr	r2, [pc, #52]	; (80088ec <LmHandlerInit+0x5c>)
 80088b8:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 80088ba:	6902      	ldr	r2, [r0, #16]
 80088bc:	611a      	str	r2, [r3, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80088be:	490c      	ldr	r1, [pc, #48]	; (80088f0 <LmHandlerInit+0x60>)
 80088c0:	2000      	movs	r0, #0
 80088c2:	f7ff ffb7 	bl	8008834 <LmHandlerPackageRegister>
 80088c6:	b900      	cbnz	r0, 80088ca <LmHandlerInit+0x3a>
}
 80088c8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 80088ca:	f04f 30ff 	mov.w	r0, #4294967295
 80088ce:	e7fb      	b.n	80088c8 <LmHandlerInit+0x38>
 80088d0:	2000035c 	.word	0x2000035c
 80088d4:	20000398 	.word	0x20000398
 80088d8:	080080b5 	.word	0x080080b5
 80088dc:	0800869d 	.word	0x0800869d
 80088e0:	080087a1 	.word	0x080087a1
 80088e4:	080085fd 	.word	0x080085fd
 80088e8:	20000384 	.word	0x20000384
 80088ec:	0800cf5d 	.word	0x0800cf5d
 80088f0:	20000070 	.word	0x20000070

080088f4 <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80088f4:	4603      	mov	r3, r0
 80088f6:	b140      	cbz	r0, 800890a <LmhpComplianceInit+0x16>
 80088f8:	b139      	cbz	r1, 800890a <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 80088fa:	4807      	ldr	r0, [pc, #28]	; (8008918 <LmhpComplianceInit+0x24>)
 80088fc:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80088fe:	4b07      	ldr	r3, [pc, #28]	; (800891c <LmhpComplianceInit+0x28>)
 8008900:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8008902:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 8008904:	2201      	movs	r2, #1
 8008906:	701a      	strb	r2, [r3, #0]
 8008908:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	4a02      	ldr	r2, [pc, #8]	; (8008918 <LmhpComplianceInit+0x24>)
 800890e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8008910:	4a02      	ldr	r2, [pc, #8]	; (800891c <LmhpComplianceInit+0x28>)
 8008912:	7013      	strb	r3, [r2, #0]
    }
}
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	200003ec 	.word	0x200003ec
 800891c:	200003c0 	.word	0x200003c0

08008920 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8008920:	4b01      	ldr	r3, [pc, #4]	; (8008928 <LmhpComplianceIsInitialized+0x8>)
 8008922:	7818      	ldrb	r0, [r3, #0]
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	200003c0 	.word	0x200003c0

0800892c <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 800892c:	4b02      	ldr	r3, [pc, #8]	; (8008938 <LmhpComplianceIsRunning+0xc>)
 800892e:	7818      	ldrb	r0, [r3, #0]
 8008930:	b100      	cbz	r0, 8008934 <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 8008932:	7858      	ldrb	r0, [r3, #1]
}
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	200003c0 	.word	0x200003c0

0800893c <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
    if (ComplianceTestState.Initialized == false)
 800893c:	4b08      	ldr	r3, [pc, #32]	; (8008960 <LmhpComplianceOnMcpsConfirm+0x24>)
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	b12b      	cbz	r3, 800894e <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8008942:	4b07      	ldr	r3, [pc, #28]	; (8008960 <LmhpComplianceOnMcpsConfirm+0x24>)
 8008944:	785b      	ldrb	r3, [r3, #1]
 8008946:	b113      	cbz	r3, 800894e <LmhpComplianceOnMcpsConfirm+0x12>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8008948:	7803      	ldrb	r3, [r0, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800894a:	2b01      	cmp	r3, #1
 800894c:	d000      	beq.n	8008950 <LmhpComplianceOnMcpsConfirm+0x14>
        (mcpsConfirm->AckReceived != 0))
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 800894e:	4770      	bx	lr
        (mcpsConfirm->AckReceived != 0))
 8008950:	7903      	ldrb	r3, [r0, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0fb      	beq.n	800894e <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 8008956:	4a02      	ldr	r2, [pc, #8]	; (8008960 <LmhpComplianceOnMcpsConfirm+0x24>)
 8008958:	8993      	ldrh	r3, [r2, #12]
 800895a:	3301      	adds	r3, #1
 800895c:	8193      	strh	r3, [r2, #12]
 800895e:	e7f6      	b.n	800894e <LmhpComplianceOnMcpsConfirm+0x12>
 8008960:	200003c0 	.word	0x200003c0

08008964 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 8008964:	4b08      	ldr	r3, [pc, #32]	; (8008988 <LmhpComplianceOnMlmeConfirm+0x24>)
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	b12b      	cbz	r3, 8008976 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800896a:	4b07      	ldr	r3, [pc, #28]	; (8008988 <LmhpComplianceOnMlmeConfirm+0x24>)
 800896c:	785b      	ldrb	r3, [r3, #1]
 800896e:	b113      	cbz	r3, 8008976 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8008970:	7803      	ldrb	r3, [r0, #0]
 8008972:	2b04      	cmp	r3, #4
 8008974:	d000      	beq.n	8008978 <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 8008976:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 8008978:	4b03      	ldr	r3, [pc, #12]	; (8008988 <LmhpComplianceOnMlmeConfirm+0x24>)
 800897a:	2201      	movs	r2, #1
 800897c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800897e:	7a02      	ldrb	r2, [r0, #8]
 8008980:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8008982:	7a42      	ldrb	r2, [r0, #9]
 8008984:	741a      	strb	r2, [r3, #16]
 8008986:	e7f6      	b.n	8008976 <LmhpComplianceOnMlmeConfirm+0x12>
 8008988:	200003c0 	.word	0x200003c0

0800898c <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 800898c:	4770      	bx	lr
	...

08008990 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 8008990:	4b23      	ldr	r3, [pc, #140]	; (8008a20 <LmhpComplianceTxProcess+0x90>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d03e      	beq.n	8008a16 <LmhpComplianceTxProcess+0x86>
    if( ComplianceTestState.IsRunning == false )
 8008998:	4b21      	ldr	r3, [pc, #132]	; (8008a20 <LmhpComplianceTxProcess+0x90>)
 800899a:	785b      	ldrb	r3, [r3, #1]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d03d      	beq.n	8008a1c <LmhpComplianceTxProcess+0x8c>
{
 80089a0:	b530      	push	{r4, r5, lr}
 80089a2:	b083      	sub	sp, #12
    if( ComplianceTestState.LinkCheck == true )
 80089a4:	4b1e      	ldr	r3, [pc, #120]	; (8008a20 <LmhpComplianceTxProcess+0x90>)
 80089a6:	7b9b      	ldrb	r3, [r3, #14]
 80089a8:	b313      	cbz	r3, 80089f0 <LmhpComplianceTxProcess+0x60>
        ComplianceTestState.LinkCheck = false;
 80089aa:	4b1d      	ldr	r3, [pc, #116]	; (8008a20 <LmhpComplianceTxProcess+0x90>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 80089b0:	2203      	movs	r2, #3
 80089b2:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	2105      	movs	r1, #5
 80089b8:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 80089ba:	7bd9      	ldrb	r1, [r3, #15]
 80089bc:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 80089be:	7c19      	ldrb	r1, [r3, #16]
 80089c0:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 80089c2:	2201      	movs	r2, #1
 80089c4:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 80089c6:	23e0      	movs	r3, #224	; 0xe0
 80089c8:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 80089cc:	4c14      	ldr	r4, [pc, #80]	; (8008a20 <LmhpComplianceTxProcess+0x90>)
 80089ce:	79a3      	ldrb	r3, [r4, #6]
    LmHandlerAppData_t appData =
 80089d0:	f88d 3001 	strb.w	r3, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 80089d4:	68a3      	ldr	r3, [r4, #8]
    LmHandlerAppData_t appData =
 80089d6:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 80089d8:	4812      	ldr	r0, [pc, #72]	; (8008a24 <LmhpComplianceTxProcess+0x94>)
 80089da:	f00a fe0d 	bl	80135f8 <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 80089de:	4b12      	ldr	r3, [pc, #72]	; (8008a28 <LmhpComplianceTxProcess+0x98>)
 80089e0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80089e2:	2301      	movs	r3, #1
 80089e4:	2200      	movs	r2, #0
 80089e6:	78e1      	ldrb	r1, [r4, #3]
 80089e8:	4668      	mov	r0, sp
 80089ea:	47a8      	blx	r5
}
 80089ec:	b003      	add	sp, #12
 80089ee:	bd30      	pop	{r4, r5, pc}
        switch( ComplianceTestState.State )
 80089f0:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <LmhpComplianceTxProcess+0x90>)
 80089f2:	789b      	ldrb	r3, [r3, #2]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d005      	beq.n	8008a04 <LmhpComplianceTxProcess+0x74>
 80089f8:	2b04      	cmp	r3, #4
 80089fa:	d1e4      	bne.n	80089c6 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.State = 1;
 80089fc:	4b08      	ldr	r3, [pc, #32]	; (8008a20 <LmhpComplianceTxProcess+0x90>)
 80089fe:	2201      	movs	r2, #1
 8008a00:	709a      	strb	r2, [r3, #2]
            break;
 8008a02:	e7e0      	b.n	80089c6 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.DataBufferSize = 2;
 8008a04:	4b06      	ldr	r3, [pc, #24]	; (8008a20 <LmhpComplianceTxProcess+0x90>)
 8008a06:	2202      	movs	r2, #2
 8008a08:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8008a0a:	899a      	ldrh	r2, [r3, #12]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	0a11      	lsrs	r1, r2, #8
 8008a10:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8008a12:	705a      	strb	r2, [r3, #1]
            break;
 8008a14:	e7d7      	b.n	80089c6 <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 8008a16:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1a:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 8008a1c:	2000      	movs	r0, #0
}
 8008a1e:	4770      	bx	lr
 8008a20:	200003c0 	.word	0x200003c0
 8008a24:	200003d4 	.word	0x200003d4
 8008a28:	2000008c 	.word	0x2000008c

08008a2c <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8008a2c:	4b8d      	ldr	r3, [pc, #564]	; (8008c64 <LmhpComplianceOnMcpsIndication+0x238>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 8116 	beq.w	8008c62 <LmhpComplianceOnMcpsIndication+0x236>
    if( mcpsIndication->RxData == false )
 8008a36:	7b43      	ldrb	r3, [r0, #13]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 8112 	beq.w	8008c62 <LmhpComplianceOnMcpsIndication+0x236>
    if ((ComplianceTestState.IsRunning == true) &&
 8008a3e:	4b89      	ldr	r3, [pc, #548]	; (8008c64 <LmhpComplianceOnMcpsIndication+0x238>)
 8008a40:	785b      	ldrb	r3, [r3, #1]
 8008a42:	b12b      	cbz	r3, 8008a50 <LmhpComplianceOnMcpsIndication+0x24>
        (mcpsIndication->AckReceived == 0))
 8008a44:	7b82      	ldrb	r2, [r0, #14]
    if ((ComplianceTestState.IsRunning == true) &&
 8008a46:	b91a      	cbnz	r2, 8008a50 <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 8008a48:	4986      	ldr	r1, [pc, #536]	; (8008c64 <LmhpComplianceOnMcpsIndication+0x238>)
 8008a4a:	898a      	ldrh	r2, [r1, #12]
 8008a4c:	3201      	adds	r2, #1
 8008a4e:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8008a50:	78c2      	ldrb	r2, [r0, #3]
 8008a52:	2ae0      	cmp	r2, #224	; 0xe0
 8008a54:	f040 8105 	bne.w	8008c62 <LmhpComplianceOnMcpsIndication+0x236>
{
 8008a58:	b510      	push	{r4, lr}
 8008a5a:	b08c      	sub	sp, #48	; 0x30
    if( ComplianceTestState.IsRunning == false )
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d140      	bne.n	8008ae2 <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8008a60:	7b03      	ldrb	r3, [r0, #12]
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	d001      	beq.n	8008a6a <LmhpComplianceOnMcpsIndication+0x3e>
}
 8008a66:	b00c      	add	sp, #48	; 0x30
 8008a68:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8008a6a:	6883      	ldr	r3, [r0, #8]
 8008a6c:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8008a6e:	2a01      	cmp	r2, #1
 8008a70:	d1f9      	bne.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8008a72:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8008a74:	2a01      	cmp	r2, #1
 8008a76:	d1f6      	bne.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8008a78:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8008a7a:	2a01      	cmp	r2, #1
 8008a7c:	d1f3      	bne.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8008a7e:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d1f0      	bne.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8008a84:	4b77      	ldr	r3, [pc, #476]	; (8008c64 <LmhpComplianceOnMcpsIndication+0x238>)
 8008a86:	2400      	movs	r4, #0
 8008a88:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 8008a8a:	22e0      	movs	r2, #224	; 0xe0
 8008a8c:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8008a8e:	2202      	movs	r2, #2
 8008a90:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8008a92:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8008a94:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8008a96:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8008a98:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8008a9e:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 8008aa0:	2304      	movs	r3, #4
 8008aa2:	f88d 300c 	strb.w	r3, [sp, #12]
            mibReq.Param.AdrEnable = true;
 8008aa6:	f88d 2010 	strb.w	r2, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008aaa:	a803      	add	r0, sp, #12
 8008aac:	f002 fde6 	bl	800b67c <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f003 f9eb 	bl	800be8c <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8008ab6:	4b6c      	ldr	r3, [pc, #432]	; (8008c68 <LmhpComplianceOnMcpsIndication+0x23c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	b103      	cbz	r3, 8008ac0 <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 8008abe:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8008ac0:	4c6a      	ldr	r4, [pc, #424]	; (8008c6c <LmhpComplianceOnMcpsIndication+0x240>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	9200      	str	r2, [sp, #0]
 8008ac6:	4b6a      	ldr	r3, [pc, #424]	; (8008c70 <LmhpComplianceOnMcpsIndication+0x244>)
 8008ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8008acc:	4620      	mov	r0, r4
 8008ace:	f00a fcd3 	bl	8013478 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8008ad2:	f241 3188 	movw	r1, #5000	; 0x1388
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f00a fdd4 	bl	8013684 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8008adc:	f7ff ff58 	bl	8008990 <LmhpComplianceTxProcess>
 8008ae0:	e7c1      	b.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8008ae2:	6882      	ldr	r2, [r0, #8]
 8008ae4:	7813      	ldrb	r3, [r2, #0]
 8008ae6:	495f      	ldr	r1, [pc, #380]	; (8008c64 <LmhpComplianceOnMcpsIndication+0x238>)
 8008ae8:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 8008aea:	2b0a      	cmp	r3, #10
 8008aec:	d8bb      	bhi.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
 8008aee:	e8df f003 	tbb	[pc, r3]
 8008af2:	2206      	.short	0x2206
 8008af4:	47312b26 	.word	0x47312b26
 8008af8:	a49d6d4e 	.word	0xa49d6d4e
 8008afc:	ae          	.byte	0xae
 8008afd:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 8008afe:	485b      	ldr	r0, [pc, #364]	; (8008c6c <LmhpComplianceOnMcpsIndication+0x240>)
 8008b00:	f00a fd18 	bl	8013534 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8008b04:	4b57      	ldr	r3, [pc, #348]	; (8008c64 <LmhpComplianceOnMcpsIndication+0x238>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8008b0a:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8008b0c:	2304      	movs	r3, #4
 8008b0e:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008b12:	4c55      	ldr	r4, [pc, #340]	; (8008c68 <LmhpComplianceOnMcpsIndication+0x23c>)
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008b1c:	a803      	add	r0, sp, #12
 8008b1e:	f002 fdad 	bl	800b67c <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	7858      	ldrb	r0, [r3, #1]
 8008b26:	f003 f9b1 	bl	800be8c <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d099      	beq.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
                    LmhpComplianceParams->StartPeripherals( );
 8008b32:	4798      	blx	r3
            break;
 8008b34:	e797      	b.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = 2;
 8008b36:	4b4b      	ldr	r3, [pc, #300]	; (8008c64 <LmhpComplianceOnMcpsIndication+0x238>)
 8008b38:	2202      	movs	r2, #2
 8008b3a:	719a      	strb	r2, [r3, #6]
            break;
 8008b3c:	e793      	b.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = true;
 8008b3e:	4b49      	ldr	r3, [pc, #292]	; (8008c64 <LmhpComplianceOnMcpsIndication+0x238>)
 8008b40:	2201      	movs	r2, #1
 8008b42:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8008b44:	709a      	strb	r2, [r3, #2]
            break;
 8008b46:	e78e      	b.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8008b48:	4b46      	ldr	r3, [pc, #280]	; (8008c64 <LmhpComplianceOnMcpsIndication+0x238>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8008b4e:	2201      	movs	r2, #1
 8008b50:	709a      	strb	r2, [r3, #2]
            break;
 8008b52:	e788      	b.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8008b54:	7b01      	ldrb	r1, [r0, #12]
 8008b56:	4b43      	ldr	r3, [pc, #268]	; (8008c64 <LmhpComplianceOnMcpsIndication+0x238>)
 8008b58:	7199      	strb	r1, [r3, #6]
            ComplianceTestState.DataBuffer[0] = 4;
 8008b5a:	689c      	ldr	r4, [r3, #8]
 8008b5c:	2304      	movs	r3, #4
 8008b5e:	7023      	strb	r3, [r4, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8008b60:	2301      	movs	r3, #1
 8008b62:	e005      	b.n	8008b70 <LmhpComplianceOnMcpsIndication+0x144>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8008b64:	6882      	ldr	r2, [r0, #8]
 8008b66:	5cd2      	ldrb	r2, [r2, r3]
 8008b68:	3201      	adds	r2, #1
 8008b6a:	54e2      	strb	r2, [r4, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	4a3c      	ldr	r2, [pc, #240]	; (8008c64 <LmhpComplianceOnMcpsIndication+0x238>)
 8008b72:	7952      	ldrb	r2, [r2, #5]
 8008b74:	428a      	cmp	r2, r1
 8008b76:	bf28      	it	cs
 8008b78:	460a      	movcs	r2, r1
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d8f2      	bhi.n	8008b64 <LmhpComplianceOnMcpsIndication+0x138>
 8008b7e:	e772      	b.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_LINK_CHECK;
 8008b80:	2304      	movs	r3, #4
 8008b82:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8008b86:	a803      	add	r0, sp, #12
 8008b88:	f002 fff0 	bl	800bb6c <LoRaMacMlmeRequest>
            break;
 8008b8c:	e76b      	b.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
                TimerStop(&ComplianceTxNextPacketTimer);
 8008b8e:	4837      	ldr	r0, [pc, #220]	; (8008c6c <LmhpComplianceOnMcpsIndication+0x240>)
 8008b90:	f00a fcd0 	bl	8013534 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8008b94:	4b33      	ldr	r3, [pc, #204]	; (8008c64 <LmhpComplianceOnMcpsIndication+0x238>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8008b9a:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8008b9c:	2304      	movs	r3, #4
 8008b9e:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008ba2:	4c31      	ldr	r4, [pc, #196]	; (8008c68 <LmhpComplianceOnMcpsIndication+0x23c>)
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008bac:	a803      	add	r0, sp, #12
 8008bae:	f002 fd65 	bl	800b67c <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	7858      	ldrb	r0, [r3, #1]
 8008bb6:	f003 f969 	bl	800be8c <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	b103      	cbz	r3, 8008bc2 <LmhpComplianceOnMcpsIndication+0x196>
                    LmhpComplianceParams->StartPeripherals( );
 8008bc0:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8008bc2:	4b2c      	ldr	r3, [pc, #176]	; (8008c74 <LmhpComplianceOnMcpsIndication+0x248>)
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc6:	2002      	movs	r0, #2
 8008bc8:	4798      	blx	r3
            break;
 8008bca:	e74c      	b.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
                if( mcpsIndication->BufferSize == 3 )
 8008bcc:	7b03      	ldrb	r3, [r0, #12]
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d008      	beq.n	8008be4 <LmhpComplianceOnMcpsIndication+0x1b8>
                else if( mcpsIndication->BufferSize == 7 )
 8008bd2:	2b07      	cmp	r3, #7
 8008bd4:	d010      	beq.n	8008bf8 <LmhpComplianceOnMcpsIndication+0x1cc>
                LoRaMacMlmeRequest( &mlmeReq );
 8008bd6:	a803      	add	r0, sp, #12
 8008bd8:	f002 ffc8 	bl	800bb6c <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8008bdc:	4b21      	ldr	r3, [pc, #132]	; (8008c64 <LmhpComplianceOnMcpsIndication+0x238>)
 8008bde:	2201      	movs	r2, #1
 8008be0:	709a      	strb	r2, [r3, #2]
            break;
 8008be2:	e740      	b.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_TXCW;
 8008be4:	2305      	movs	r3, #5
 8008be6:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8008bea:	7851      	ldrb	r1, [r2, #1]
 8008bec:	7893      	ldrb	r3, [r2, #2]
 8008bee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008bf2:	f8ad 3010 	strh.w	r3, [sp, #16]
 8008bf6:	e7ee      	b.n	8008bd6 <LmhpComplianceOnMcpsIndication+0x1aa>
                    mlmeReq.Type = MLME_TXCW_1;
 8008bf8:	2306      	movs	r3, #6
 8008bfa:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8008bfe:	7851      	ldrb	r1, [r2, #1]
 8008c00:	7893      	ldrb	r3, [r2, #2]
 8008c02:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008c06:	f8ad 3010 	strh.w	r3, [sp, #16]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8008c0a:	78d1      	ldrb	r1, [r2, #3]
 8008c0c:	7913      	ldrb	r3, [r2, #4]
 8008c0e:	021b      	lsls	r3, r3, #8
 8008c10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c14:	7952      	ldrb	r2, [r2, #5]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	2264      	movs	r2, #100	; 0x64
 8008c1a:	fb02 f303 	mul.w	r3, r2, r3
 8008c1e:	9305      	str	r3, [sp, #20]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8008c20:	6883      	ldr	r3, [r0, #8]
 8008c22:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8008c26:	f88d 3018 	strb.w	r3, [sp, #24]
 8008c2a:	e7d4      	b.n	8008bd6 <LmhpComplianceOnMcpsIndication+0x1aa>
                mlmeReq.Type = MLME_DEVICE_TIME;
 8008c2c:	230a      	movs	r3, #10
 8008c2e:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8008c32:	a803      	add	r0, sp, #12
 8008c34:	f002 ff9a 	bl	800bb6c <LoRaMacMlmeRequest>
            break;
 8008c38:	e715      	b.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
                mibReq.Type = MIB_DEVICE_CLASS;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8008c40:	7853      	ldrb	r3, [r2, #1]
 8008c42:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008c46:	a803      	add	r0, sp, #12
 8008c48:	f002 fd18 	bl	800b67c <LoRaMacMibSetRequestConfirm>
            break;
 8008c4c:	e70b      	b.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8008c4e:	230d      	movs	r3, #13
 8008c50:	f88d 300c 	strb.w	r3, [sp, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8008c54:	7853      	ldrb	r3, [r2, #1]
 8008c56:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 8008c5a:	a803      	add	r0, sp, #12
 8008c5c:	f002 ff86 	bl	800bb6c <LoRaMacMlmeRequest>
            break;
 8008c60:	e701      	b.n	8008a66 <LmhpComplianceOnMcpsIndication+0x3a>
 8008c62:	4770      	bx	lr
 8008c64:	200003c0 	.word	0x200003c0
 8008c68:	200003ec 	.word	0x200003ec
 8008c6c:	200003d4 	.word	0x200003d4
 8008c70:	08008c79 	.word	0x08008c79
 8008c74:	2000008c 	.word	0x2000008c

08008c78 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8008c78:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 8008c7a:	f7ff fe89 	bl	8008990 <LmhpComplianceTxProcess>
}
 8008c7e:	bd08      	pop	{r3, pc}

08008c80 <LmhpCompliancePackageFactory>:
}
 8008c80:	4800      	ldr	r0, [pc, #0]	; (8008c84 <LmhpCompliancePackageFactory+0x4>)
 8008c82:	4770      	bx	lr
 8008c84:	2000008c 	.word	0x2000008c

08008c88 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 8008c88:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8008c8a:	4a06      	ldr	r2, [pc, #24]	; (8008ca4 <OnRadioRxError+0x1c>)
 8008c8c:	7813      	ldrb	r3, [r2, #0]
 8008c8e:	f043 0302 	orr.w	r3, r3, #2
 8008c92:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008c94:	4b04      	ldr	r3, [pc, #16]	; (8008ca8 <OnRadioRxError+0x20>)
 8008c96:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008c9a:	b113      	cbz	r3, 8008ca2 <OnRadioRxError+0x1a>
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	b103      	cbz	r3, 8008ca2 <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008ca0:	4798      	blx	r3
    }
}
 8008ca2:	bd08      	pop	{r3, pc}
 8008ca4:	200003f0 	.word	0x200003f0
 8008ca8:	200003f4 	.word	0x200003f4

08008cac <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008cac:	4b07      	ldr	r3, [pc, #28]	; (8008ccc <UpdateRxSlotIdleState+0x20>)
 8008cae:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d004      	beq.n	8008cc0 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8008cb6:	4b06      	ldr	r3, [pc, #24]	; (8008cd0 <UpdateRxSlotIdleState+0x24>)
 8008cb8:	2206      	movs	r2, #6
 8008cba:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 8008cbe:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008cc0:	4b03      	ldr	r3, [pc, #12]	; (8008cd0 <UpdateRxSlotIdleState+0x24>)
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	200008fc 	.word	0x200008fc
 8008cd0:	200003f4 	.word	0x200003f4

08008cd4 <LoRaMacEnableRequests>:
}


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8008cd4:	4b01      	ldr	r3, [pc, #4]	; (8008cdc <LoRaMacEnableRequests+0x8>)
 8008cd6:	f883 0482 	strb.w	r0, [r3, #1154]	; 0x482
}
 8008cda:	4770      	bx	lr
 8008cdc:	200003f4 	.word	0x200003f4

08008ce0 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8008ce0:	b530      	push	{r4, r5, lr}
 8008ce2:	b089      	sub	sp, #36	; 0x24
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8008ce4:	4b22      	ldr	r3, [pc, #136]	; (8008d70 <LoRaMacHandleIndicationEvents+0x90>)
 8008ce6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008cea:	f013 0f08 	tst.w	r3, #8
 8008cee:	d00e      	beq.n	8008d0e <LoRaMacHandleIndicationEvents+0x2e>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8008cf0:	481f      	ldr	r0, [pc, #124]	; (8008d70 <LoRaMacHandleIndicationEvents+0x90>)
 8008cf2:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8008cf6:	f36f 03c3 	bfc	r3, #3, #1
 8008cfa:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8008cfe:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8008d08:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 8008d0c:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8008d0e:	4b18      	ldr	r3, [pc, #96]	; (8008d70 <LoRaMacHandleIndicationEvents+0x90>)
 8008d10:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008d14:	f013 0f10 	tst.w	r3, #16
 8008d18:	d013      	beq.n	8008d42 <LoRaMacHandleIndicationEvents+0x62>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8008d1a:	2307      	movs	r3, #7
 8008d1c:	f88d 3004 	strb.w	r3, [sp, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008d20:	2500      	movs	r5, #0
 8008d22:	f88d 5005 	strb.w	r5, [sp, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 8008d26:	4c12      	ldr	r4, [pc, #72]	; (8008d70 <LoRaMacHandleIndicationEvents+0x90>)
 8008d28:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	f204 417c 	addw	r1, r4, #1148	; 0x47c
 8008d32:	a801      	add	r0, sp, #4
 8008d34:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8008d36:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8008d3a:	f365 1304 	bfi	r3, r5, #4, #1
 8008d3e:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008d42:	4b0b      	ldr	r3, [pc, #44]	; (8008d70 <LoRaMacHandleIndicationEvents+0x90>)
 8008d44:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008d48:	f013 0f02 	tst.w	r3, #2
 8008d4c:	d00e      	beq.n	8008d6c <LoRaMacHandleIndicationEvents+0x8c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8008d4e:	4808      	ldr	r0, [pc, #32]	; (8008d70 <LoRaMacHandleIndicationEvents+0x90>)
 8008d50:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8008d54:	f36f 0341 	bfc	r3, #1, #1
 8008d58:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8008d5c:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8008d66:	f200 401c 	addw	r0, r0, #1052	; 0x41c
 8008d6a:	4798      	blx	r3
    }
}
 8008d6c:	b009      	add	sp, #36	; 0x24
 8008d6e:	bd30      	pop	{r4, r5, pc}
 8008d70:	200003f4 	.word	0x200003f4

08008d74 <LoRaMacCheckForRxAbort>:
}

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008d74:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <LoRaMacCheckForRxAbort+0x18>)
 8008d76:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008d7a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008d7e:	d004      	beq.n	8008d8a <LoRaMacCheckForRxAbort+0x16>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008d80:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8008d84:	4a01      	ldr	r2, [pc, #4]	; (8008d8c <LoRaMacCheckForRxAbort+0x18>)
 8008d86:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8008d8a:	4770      	bx	lr
 8008d8c:	200003f4 	.word	0x200003f4

08008d90 <SetMlmeScheduleUplinkIndication>:
    return false;
}

static void SetMlmeScheduleUplinkIndication( void )
{
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008d90:	4a03      	ldr	r2, [pc, #12]	; (8008da0 <SetMlmeScheduleUplinkIndication+0x10>)
 8008d92:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008d96:	f043 0310 	orr.w	r3, r3, #16
 8008d9a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8008d9e:	4770      	bx	lr
 8008da0:	200003f4 	.word	0x200003f4

08008da4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8008da4:	4b06      	ldr	r3, [pc, #24]	; (8008dc0 <CalculateBackOff+0x1c>)
 8008da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da8:	b94b      	cbnz	r3, 8008dbe <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8008daa:	4905      	ldr	r1, [pc, #20]	; (8008dc0 <CalculateBackOff+0x1c>)
 8008dac:	f8b1 2102 	ldrh.w	r2, [r1, #258]	; 0x102
 8008db0:	4b04      	ldr	r3, [pc, #16]	; (8008dc4 <CalculateBackOff+0x20>)
 8008db2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8008db6:	3a01      	subs	r2, #1
 8008db8:	fb03 f302 	mul.w	r3, r3, r2
 8008dbc:	630b      	str	r3, [r1, #48]	; 0x30
    }
}
 8008dbe:	4770      	bx	lr
 8008dc0:	200008fc 	.word	0x200008fc
 8008dc4:	200003f4 	.word	0x200003f4

08008dc8 <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8008dc8:	b510      	push	{r4, lr}
 8008dca:	4604      	mov	r4, r0
 8008dcc:	4608      	mov	r0, r1
 8008dce:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008dd0:	4b06      	ldr	r3, [pc, #24]	; (8008dec <SetTxContinuousWave1+0x24>)
 8008dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	b249      	sxtb	r1, r1
 8008dd8:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008dda:	4a05      	ldr	r2, [pc, #20]	; (8008df0 <SetTxContinuousWave1+0x28>)
 8008ddc:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8008de0:	f043 0302 	orr.w	r3, r3, #2
 8008de4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8008de8:	2000      	movs	r0, #0
 8008dea:	bd10      	pop	{r4, pc}
 8008dec:	08014674 	.word	0x08014674
 8008df0:	200003f4 	.word	0x200003f4

08008df4 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
    return &Nvm;
}
 8008df4:	4800      	ldr	r0, [pc, #0]	; (8008df8 <GetNvmData+0x4>)
 8008df6:	4770      	bx	lr
 8008df8:	200008fc 	.word	0x200008fc

08008dfc <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	b1f8      	cbz	r0, 8008e40 <DetermineFrameType+0x44>
 8008e00:	b301      	cbz	r1, 8008e44 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8008e02:	7b03      	ldrb	r3, [r0, #12]
 8008e04:	f013 030f 	ands.w	r3, r3, #15
 8008e08:	d005      	beq.n	8008e16 <DetermineFrameType+0x1a>
 8008e0a:	f890 0020 	ldrb.w	r0, [r0, #32]
 8008e0e:	b110      	cbz	r0, 8008e16 <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8008e10:	2000      	movs	r0, #0
 8008e12:	7008      	strb	r0, [r1, #0]
 8008e14:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8008e16:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8008e1a:	b910      	cbnz	r0, 8008e22 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	700b      	strb	r3, [r1, #0]
 8008e20:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8008e22:	b92b      	cbnz	r3, 8008e30 <DetermineFrameType+0x34>
 8008e24:	f892 0020 	ldrb.w	r0, [r2, #32]
 8008e28:	b910      	cbnz	r0, 8008e30 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	700b      	strb	r3, [r1, #0]
 8008e2e:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8008e30:	b953      	cbnz	r3, 8008e48 <DetermineFrameType+0x4c>
 8008e32:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008e36:	b14a      	cbz	r2, 8008e4c <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8008e38:	2203      	movs	r2, #3
 8008e3a:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8008e3c:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8008e3e:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008e40:	2003      	movs	r0, #3
 8008e42:	4770      	bx	lr
 8008e44:	2003      	movs	r0, #3
 8008e46:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8008e48:	2017      	movs	r0, #23
 8008e4a:	4770      	bx	lr
 8008e4c:	2017      	movs	r0, #23
}
 8008e4e:	4770      	bx	lr

08008e50 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8008e50:	4b0f      	ldr	r3, [pc, #60]	; (8008e90 <CheckRetransUnconfirmedUplink+0x40>)
 8008e52:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8008e56:	4b0f      	ldr	r3, [pc, #60]	; (8008e94 <CheckRetransUnconfirmedUplink+0x44>)
 8008e58:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d20f      	bcs.n	8008e80 <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008e60:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <CheckRetransUnconfirmedUplink+0x40>)
 8008e62:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008e66:	f013 0f02 	tst.w	r3, #2
 8008e6a:	d00b      	beq.n	8008e84 <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8008e6c:	4b09      	ldr	r3, [pc, #36]	; (8008e94 <CheckRetransUnconfirmedUplink+0x44>)
 8008e6e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008e72:	b14b      	cbz	r3, 8008e88 <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8008e74:	4b06      	ldr	r3, [pc, #24]	; (8008e90 <CheckRetransUnconfirmedUplink+0x40>)
 8008e76:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8008e7a:	b13b      	cbz	r3, 8008e8c <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	4770      	bx	lr
        return true;
 8008e80:	2001      	movs	r0, #1
 8008e82:	4770      	bx	lr
    return false;
 8008e84:	2000      	movs	r0, #0
 8008e86:	4770      	bx	lr
            return true;
 8008e88:	2001      	movs	r0, #1
 8008e8a:	4770      	bx	lr
                return true;
 8008e8c:	2001      	movs	r0, #1
}
 8008e8e:	4770      	bx	lr
 8008e90:	200003f4 	.word	0x200003f4
 8008e94:	200008fc 	.word	0x200008fc

08008e98 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8008e98:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <CheckRetransConfirmedUplink+0x2c>)
 8008e9a:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8008e9e:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d209      	bcs.n	8008eba <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008ea6:	4b07      	ldr	r3, [pc, #28]	; (8008ec4 <CheckRetransConfirmedUplink+0x2c>)
 8008ea8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008eac:	f013 0f02 	tst.w	r3, #2
 8008eb0:	d005      	beq.n	8008ebe <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008eb2:	4b04      	ldr	r3, [pc, #16]	; (8008ec4 <CheckRetransConfirmedUplink+0x2c>)
 8008eb4:	f893 043c 	ldrb.w	r0, [r3, #1084]	; 0x43c
 8008eb8:	4770      	bx	lr
        return true;
 8008eba:	2001      	movs	r0, #1
 8008ebc:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 8008ebe:	2000      	movs	r0, #0
}
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	200003f4 	.word	0x200003f4

08008ec8 <StopRetransmission>:

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008ec8:	4b11      	ldr	r3, [pc, #68]	; (8008f10 <StopRetransmission+0x48>)
 8008eca:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008ece:	f013 0f02 	tst.w	r3, #2
 8008ed2:	d004      	beq.n	8008ede <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8008ed4:	4b0e      	ldr	r3, [pc, #56]	; (8008f10 <StopRetransmission+0x48>)
 8008ed6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d907      	bls.n	8008eee <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8008ede:	4b0d      	ldr	r3, [pc, #52]	; (8008f14 <StopRetransmission+0x4c>)
 8008ee0:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8008ee4:	b11b      	cbz	r3, 8008eee <StopRetransmission+0x26>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8008ee6:	4a0b      	ldr	r2, [pc, #44]	; (8008f14 <StopRetransmission+0x4c>)
 8008ee8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008eea:	3301      	adds	r3, #1
 8008eec:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8008eee:	4b08      	ldr	r3, [pc, #32]	; (8008f10 <StopRetransmission+0x48>)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8008ef6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 8008efa:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008efe:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008f02:	f022 0202 	bic.w	r2, r2, #2
 8008f06:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8008f0a:	2001      	movs	r0, #1
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	200003f4 	.word	0x200003f4
 8008f14:	200008fc 	.word	0x200008fc

08008f18 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8008f18:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008f1a:	4b04      	ldr	r3, [pc, #16]	; (8008f2c <CallNvmDataChangeCallback+0x14>)
 8008f1c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008f20:	b113      	cbz	r3, 8008f28 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8008f22:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008f24:	b103      	cbz	r3, 8008f28 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8008f26:	4798      	blx	r3
    }
}
 8008f28:	bd08      	pop	{r3, pc}
 8008f2a:	bf00      	nop
 8008f2c:	200003f4 	.word	0x200003f4

08008f30 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8008f30:	4b04      	ldr	r3, [pc, #16]	; (8008f44 <IsRequestPending+0x14>)
 8008f32:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
 8008f36:	f010 0005 	ands.w	r0, r0, #5
 8008f3a:	d100      	bne.n	8008f3e <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8008f3c:	4770      	bx	lr
        return 1;
 8008f3e:	2001      	movs	r0, #1
 8008f40:	e7fc      	b.n	8008f3c <IsRequestPending+0xc>
 8008f42:	bf00      	nop
 8008f44:	200003f4 	.word	0x200003f4

08008f48 <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8008f48:	4a13      	ldr	r2, [pc, #76]	; (8008f98 <AckTimeoutRetriesProcess+0x50>)
 8008f4a:	f892 3412 	ldrb.w	r3, [r2, #1042]	; 0x412
 8008f4e:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d207      	bcs.n	8008f66 <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 8008f56:	3301      	adds	r3, #1
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	4a0f      	ldr	r2, [pc, #60]	; (8008f98 <AckTimeoutRetriesProcess+0x50>)
 8008f5c:	f882 3412 	strb.w	r3, [r2, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8008f60:	f013 0f01 	tst.w	r3, #1
 8008f64:	d100      	bne.n	8008f68 <AckTimeoutRetriesProcess+0x20>
 8008f66:	4770      	bx	lr
{
 8008f68:	b510      	push	{r4, lr}
 8008f6a:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8008f6c:	2322      	movs	r3, #34	; 0x22
 8008f6e:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008f72:	4c0a      	ldr	r4, [pc, #40]	; (8008f9c <AckTimeoutRetriesProcess+0x54>)
 8008f74:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8008f78:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008f7c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
 8008f80:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008f84:	a902      	add	r1, sp, #8
 8008f86:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008f8a:	f003 fffa 	bl	800cf82 <RegionGetPhyParam>
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8008f8e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 8008f92:	b004      	add	sp, #16
 8008f94:	bd10      	pop	{r4, pc}
 8008f96:	bf00      	nop
 8008f98:	200003f4 	.word	0x200003f4
 8008f9c:	200008fc 	.word	0x200008fc

08008fa0 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8008fa0:	b500      	push	{lr}
 8008fa2:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008fa4:	4b0c      	ldr	r3, [pc, #48]	; (8008fd8 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 8008fa6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8008faa:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8008fae:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008fb2:	220d      	movs	r2, #13
 8008fb4:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008fb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008fbc:	b113      	cbz	r3, 8008fc4 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008fbe:	230e      	movs	r3, #14
 8008fc0:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008fc4:	a902      	add	r1, sp, #8
 8008fc6:	4b04      	ldr	r3, [pc, #16]	; (8008fd8 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 8008fc8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008fcc:	f003 ffd9 	bl	800cf82 <RegionGetPhyParam>
}
 8008fd0:	b2c0      	uxtb	r0, r0
 8008fd2:	b005      	add	sp, #20
 8008fd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fd8:	200008fc 	.word	0x200008fc

08008fdc <ValidatePayloadLength>:
{
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4605      	mov	r5, r0
 8008fe0:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008fe2:	4608      	mov	r0, r1
 8008fe4:	f7ff ffdc 	bl	8008fa0 <GetMaxAppPayloadWithoutFOptsLength>
 8008fe8:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8008fea:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d303      	bcc.n	8008ff8 <ValidatePayloadLength+0x1c>
 8008ff0:	2aff      	cmp	r2, #255	; 0xff
 8008ff2:	d903      	bls.n	8008ffc <ValidatePayloadLength+0x20>
    return false;
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	e000      	b.n	8008ffa <ValidatePayloadLength+0x1e>
 8008ff8:	2000      	movs	r0, #0
}
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8008ffc:	2001      	movs	r0, #1
 8008ffe:	e7fc      	b.n	8008ffa <ValidatePayloadLength+0x1e>

08009000 <ProcessRadioTxDone>:
{
 8009000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009002:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009004:	4b39      	ldr	r3, [pc, #228]	; (80090ec <ProcessRadioTxDone+0xec>)
 8009006:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800900a:	2b02      	cmp	r3, #2
 800900c:	d002      	beq.n	8009014 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800900e:	4b38      	ldr	r3, [pc, #224]	; (80090f0 <ProcessRadioTxDone+0xf0>)
 8009010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009012:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8009014:	4c37      	ldr	r4, [pc, #220]	; (80090f4 <ProcessRadioTxDone+0xf4>)
 8009016:	f504 7560 	add.w	r5, r4, #896	; 0x380
 800901a:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 800901e:	4628      	mov	r0, r5
 8009020:	f00a fb30 	bl	8013684 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8009024:	4628      	mov	r0, r5
 8009026:	f00a fae7 	bl	80135f8 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800902a:	f504 7566 	add.w	r5, r4, #920	; 0x398
 800902e:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8009032:	4628      	mov	r0, r5
 8009034:	f00a fb26 	bl	8013684 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8009038:	4628      	mov	r0, r5
 800903a:	f00a fadd 	bl	80135f8 <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800903e:	4b2b      	ldr	r3, [pc, #172]	; (80090ec <ProcessRadioTxDone+0xec>)
 8009040:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009044:	2b02      	cmp	r3, #2
 8009046:	d002      	beq.n	800904e <ProcessRadioTxDone+0x4e>
 8009048:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 800904c:	b1a3      	cbz	r3, 8009078 <ProcessRadioTxDone+0x78>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800904e:	2316      	movs	r3, #22
 8009050:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009054:	a90a      	add	r1, sp, #40	; 0x28
 8009056:	4b25      	ldr	r3, [pc, #148]	; (80090ec <ProcessRadioTxDone+0xec>)
 8009058:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800905c:	f003 ff91 	bl	800cf82 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009060:	4c24      	ldr	r4, [pc, #144]	; (80090f4 <ProcessRadioTxDone+0xf4>)
 8009062:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8009066:	f504 747e 	add.w	r4, r4, #1016	; 0x3f8
 800906a:	4401      	add	r1, r0
 800906c:	4620      	mov	r0, r4
 800906e:	f00a fb09 	bl	8013684 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8009072:	4620      	mov	r0, r4
 8009074:	f00a fac0 	bl	80135f8 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8009078:	4b1f      	ldr	r3, [pc, #124]	; (80090f8 <ProcessRadioTxDone+0xf8>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4c1b      	ldr	r4, [pc, #108]	; (80090ec <ProcessRadioTxDone+0xec>)
 800907e:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8009080:	4f1c      	ldr	r7, [pc, #112]	; (80090f4 <ProcessRadioTxDone+0xf4>)
 8009082:	f897 2415 	ldrb.w	r2, [r7, #1045]	; 0x415
 8009086:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800908a:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800908c:	ae0c      	add	r6, sp, #48	; 0x30
 800908e:	4630      	mov	r0, r6
 8009090:	f00a f986 	bl	80133a0 <SysTimeGetMcuTime>
 8009094:	ad02      	add	r5, sp, #8
 8009096:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80090a0:	e896 0006 	ldmia.w	r6, {r1, r2}
 80090a4:	4628      	mov	r0, r5
 80090a6:	f00a f91c 	bl	80132e2 <SysTimeSub>
 80090aa:	ab07      	add	r3, sp, #28
 80090ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80090b0:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80090b4:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80090b8:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 80090ba:	2301      	movs	r3, #1
 80090bc:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80090c0:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 80090c4:	b90b      	cbnz	r3, 80090ca <ProcessRadioTxDone+0xca>
        txDone.Joined  = false;
 80090c6:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80090ca:	a904      	add	r1, sp, #16
 80090cc:	4b07      	ldr	r3, [pc, #28]	; (80090ec <ProcessRadioTxDone+0xec>)
 80090ce:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80090d2:	f003 ff74 	bl	800cfbe <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 80090d6:	4b07      	ldr	r3, [pc, #28]	; (80090f4 <ProcessRadioTxDone+0xf4>)
 80090d8:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80090dc:	b91b      	cbnz	r3, 80090e6 <ProcessRadioTxDone+0xe6>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <ProcessRadioTxDone+0xf4>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 80090e6:	b00f      	add	sp, #60	; 0x3c
 80090e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ea:	bf00      	nop
 80090ec:	200008fc 	.word	0x200008fc
 80090f0:	08014674 	.word	0x08014674
 80090f4:	200003f4 	.word	0x200003f4
 80090f8:	200019bc 	.word	0x200019bc

080090fc <OnAckTimeoutTimerEvent>:
{
 80090fc:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 80090fe:	4c10      	ldr	r4, [pc, #64]	; (8009140 <OnAckTimeoutTimerEvent+0x44>)
 8009100:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 8009104:	f00a fa16 	bl	8013534 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8009108:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 800910c:	b113      	cbz	r3, 8009114 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 800910e:	2201      	movs	r2, #1
 8009110:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009114:	4b0b      	ldr	r3, [pc, #44]	; (8009144 <OnAckTimeoutTimerEvent+0x48>)
 8009116:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800911a:	2b02      	cmp	r3, #2
 800911c:	d007      	beq.n	800912e <OnAckTimeoutTimerEvent+0x32>
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800911e:	4b08      	ldr	r3, [pc, #32]	; (8009140 <OnAckTimeoutTimerEvent+0x44>)
 8009120:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009124:	b113      	cbz	r3, 800912c <OnAckTimeoutTimerEvent+0x30>
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	b103      	cbz	r3, 800912c <OnAckTimeoutTimerEvent+0x30>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800912a:	4798      	blx	r3
}
 800912c:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 800912e:	4a04      	ldr	r2, [pc, #16]	; (8009140 <OnAckTimeoutTimerEvent+0x44>)
 8009130:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009134:	f043 0320 	orr.w	r3, r3, #32
 8009138:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800913c:	e7ef      	b.n	800911e <OnAckTimeoutTimerEvent+0x22>
 800913e:	bf00      	nop
 8009140:	200003f4 	.word	0x200003f4
 8009144:	200008fc 	.word	0x200008fc

08009148 <PrepareRxDoneAbort>:
{
 8009148:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800914a:	4b0c      	ldr	r3, [pc, #48]	; (800917c <PrepareRxDoneAbort+0x34>)
 800914c:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8009150:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009154:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8009158:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800915c:	b94b      	cbnz	r3, 8009172 <PrepareRxDoneAbort+0x2a>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800915e:	4a07      	ldr	r2, [pc, #28]	; (800917c <PrepareRxDoneAbort+0x34>)
 8009160:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009164:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 8009168:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 800916c:	f7ff fd9e 	bl	8008cac <UpdateRxSlotIdleState>
}
 8009170:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 8009172:	2000      	movs	r0, #0
 8009174:	f7ff ffc2 	bl	80090fc <OnAckTimeoutTimerEvent>
 8009178:	e7f1      	b.n	800915e <PrepareRxDoneAbort+0x16>
 800917a:	bf00      	nop
 800917c:	200003f4 	.word	0x200003f4

08009180 <LoRaMacCheckForBeaconAcquisition>:
{
 8009180:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009182:	200c      	movs	r0, #12
 8009184:	f003 f98c 	bl	800c4a0 <LoRaMacConfirmQueueIsCmdActive>
 8009188:	b188      	cbz	r0, 80091ae <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800918a:	4b0b      	ldr	r3, [pc, #44]	; (80091b8 <LoRaMacCheckForBeaconAcquisition+0x38>)
 800918c:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009190:	f010 0f01 	tst.w	r0, #1
 8009194:	d10d      	bne.n	80091b2 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009196:	f010 0004 	ands.w	r0, r0, #4
 800919a:	d009      	beq.n	80091b0 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800919c:	461a      	mov	r2, r3
 800919e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80091a2:	f023 0302 	bic.w	r3, r3, #2
 80091a6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80091aa:	2001      	movs	r0, #1
 80091ac:	e000      	b.n	80091b0 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 80091ae:	2000      	movs	r0, #0
}
 80091b0:	bd08      	pop	{r3, pc}
    return 0x00;
 80091b2:	2000      	movs	r0, #0
 80091b4:	e7fc      	b.n	80091b0 <LoRaMacCheckForBeaconAcquisition+0x30>
 80091b6:	bf00      	nop
 80091b8:	200003f4 	.word	0x200003f4

080091bc <GetFCntDown>:
{
 80091bc:	b570      	push	{r4, r5, r6, lr}
 80091be:	9c05      	ldr	r4, [sp, #20]
 80091c0:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80091c2:	b1fa      	cbz	r2, 8009204 <GetFCntDown+0x48>
 80091c4:	4616      	mov	r6, r2
 80091c6:	b1fc      	cbz	r4, 8009208 <GetFCntDown+0x4c>
 80091c8:	b305      	cbz	r5, 800920c <GetFCntDown+0x50>
    switch( addrID )
 80091ca:	b188      	cbz	r0, 80091f0 <GetFCntDown+0x34>
 80091cc:	2801      	cmp	r0, #1
 80091ce:	d11f      	bne.n	8009210 <GetFCntDown+0x54>
            if( lrWanVersion.Fields.Minor == 1 )
 80091d0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80091d4:	2a01      	cmp	r2, #1
 80091d6:	d002      	beq.n	80091de <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 80091d8:	2303      	movs	r3, #3
 80091da:	7023      	strb	r3, [r4, #0]
 80091dc:	e00a      	b.n	80091f4 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80091de:	b121      	cbz	r1, 80091ea <GetFCntDown+0x2e>
 80091e0:	2903      	cmp	r1, #3
 80091e2:	d002      	beq.n	80091ea <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 80091e4:	2301      	movs	r3, #1
 80091e6:	7023      	strb	r3, [r4, #0]
 80091e8:	e004      	b.n	80091f4 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 80091ea:	2302      	movs	r3, #2
 80091ec:	7023      	strb	r3, [r4, #0]
 80091ee:	e001      	b.n	80091f4 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 80091f0:	2304      	movs	r3, #4
 80091f2:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 80091f4:	462b      	mov	r3, r5
 80091f6:	89f2      	ldrh	r2, [r6, #14]
 80091f8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80091fc:	7820      	ldrb	r0, [r4, #0]
 80091fe:	f003 fb71 	bl	800c8e4 <LoRaMacCryptoGetFCntDown>
}
 8009202:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009204:	200a      	movs	r0, #10
 8009206:	e7fc      	b.n	8009202 <GetFCntDown+0x46>
 8009208:	200a      	movs	r0, #10
 800920a:	e7fa      	b.n	8009202 <GetFCntDown+0x46>
 800920c:	200a      	movs	r0, #10
 800920e:	e7f8      	b.n	8009202 <GetFCntDown+0x46>
    switch( addrID )
 8009210:	2005      	movs	r0, #5
 8009212:	e7f6      	b.n	8009202 <GetFCntDown+0x46>

08009214 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8009214:	2801      	cmp	r0, #1
 8009216:	d900      	bls.n	800921a <RemoveMacCommands+0x6>
 8009218:	4770      	bx	lr
{
 800921a:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800921c:	2a01      	cmp	r2, #1
 800921e:	d105      	bne.n	800922c <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8009220:	f011 0f20 	tst.w	r1, #32
 8009224:	d004      	beq.n	8009230 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8009226:	f002 ffd7 	bl	800c1d8 <LoRaMacCommandsRemoveStickyAnsCmds>
 800922a:	e001      	b.n	8009230 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800922c:	f002 ffd4 	bl	800c1d8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8009230:	bd08      	pop	{r3, pc}
	...

08009234 <ProcessMacCommands>:
{
 8009234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009238:	b08f      	sub	sp, #60	; 0x3c
 800923a:	4605      	mov	r5, r0
 800923c:	460c      	mov	r4, r1
 800923e:	4616      	mov	r6, r2
 8009240:	4698      	mov	r8, r3
    uint8_t status = 0;
 8009242:	2700      	movs	r7, #0
 8009244:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009248:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 800924c:	42b4      	cmp	r4, r6
 800924e:	f080 82b8 	bcs.w	80097c2 <ProcessMacCommands+0x58e>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8009252:	5d28      	ldrb	r0, [r5, r4]
 8009254:	f003 f828 	bl	800c2a8 <LoRaMacCommandsGetCmdSize>
 8009258:	4420      	add	r0, r4
 800925a:	42b0      	cmp	r0, r6
 800925c:	f300 82b1 	bgt.w	80097c2 <ProcessMacCommands+0x58e>
        switch( payload[macIndex++] )
 8009260:	f104 0901 	add.w	r9, r4, #1
 8009264:	fa5f f989 	uxtb.w	r9, r9
 8009268:	5d29      	ldrb	r1, [r5, r4]
 800926a:	3902      	subs	r1, #2
 800926c:	2911      	cmp	r1, #17
 800926e:	f200 82a8 	bhi.w	80097c2 <ProcessMacCommands+0x58e>
 8009272:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009276:	0012      	.short	0x0012
 8009278:	00920029 	.word	0x00920029
 800927c:	00ed00a6 	.word	0x00ed00a6
 8009280:	013c0105 	.word	0x013c0105
 8009284:	01ab0155 	.word	0x01ab0155
 8009288:	02a602a6 	.word	0x02a602a6
 800928c:	02a601db 	.word	0x02a601db
 8009290:	023202a6 	.word	0x023202a6
 8009294:	02690249 	.word	0x02690249
 8009298:	0285      	.short	0x0285
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800929a:	2004      	movs	r0, #4
 800929c:	f003 f900 	bl	800c4a0 <LoRaMacConfirmQueueIsCmdActive>
 80092a0:	b908      	cbnz	r0, 80092a6 <ProcessMacCommands+0x72>
        switch( payload[macIndex++] )
 80092a2:	464c      	mov	r4, r9
 80092a4:	e7d2      	b.n	800924c <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80092a6:	2104      	movs	r1, #4
 80092a8:	2000      	movs	r0, #0
 80092aa:	f003 f8ad 	bl	800c408 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80092ae:	1ca3      	adds	r3, r4, #2
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	f815 1009 	ldrb.w	r1, [r5, r9]
 80092b6:	4ac1      	ldr	r2, [pc, #772]	; (80095bc <ProcessMacCommands+0x388>)
 80092b8:	f882 1454 	strb.w	r1, [r2, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80092bc:	3403      	adds	r4, #3
 80092be:	b2e4      	uxtb	r4, r4
 80092c0:	5ceb      	ldrb	r3, [r5, r3]
 80092c2:	f882 3455 	strb.w	r3, [r2, #1109]	; 0x455
 80092c6:	e7c1      	b.n	800924c <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 80092c8:	2300      	movs	r3, #0
 80092ca:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 80092ce:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 80092d2:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 80092d6:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 80092da:	b10f      	cbz	r7, 80092e0 <ProcessMacCommands+0xac>
                break;
 80092dc:	464c      	mov	r4, r9
 80092de:	e7b5      	b.n	800924c <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80092e0:	f109 33ff 	add.w	r3, r9, #4294967295
 80092e4:	442b      	add	r3, r5
 80092e6:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80092e8:	eba6 0309 	sub.w	r3, r6, r9
 80092ec:	3301      	adds	r3, #1
 80092ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80092f2:	48b3      	ldr	r0, [pc, #716]	; (80095c0 <ProcessMacCommands+0x38c>)
 80092f4:	f890 30fe 	ldrb.w	r3, [r0, #254]	; 0xfe
 80092f8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80092fc:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8009300:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8009304:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
 8009308:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800930c:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
 8009310:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009314:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8009318:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800931c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8009320:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8009322:	ab05      	add	r3, sp, #20
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	ab03      	add	r3, sp, #12
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	f10d 030b 	add.w	r3, sp, #11
 800932e:	f10d 020a 	add.w	r2, sp, #10
 8009332:	a907      	add	r1, sp, #28
 8009334:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8009338:	f003 fee6 	bl	800d108 <RegionLinkAdrReq>
 800933c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 8009340:	f000 0007 	and.w	r0, r0, #7
 8009344:	2807      	cmp	r0, #7
 8009346:	d001      	beq.n	800934c <ProcessMacCommands+0x118>
{
 8009348:	2400      	movs	r4, #0
 800934a:	e015      	b.n	8009378 <ProcessMacCommands+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800934c:	4b9c      	ldr	r3, [pc, #624]	; (80095c0 <ProcessMacCommands+0x38c>)
 800934e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8009352:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8009356:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800935a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800935e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8009362:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8009366:	e7ef      	b.n	8009348 <ProcessMacCommands+0x114>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8009368:	2201      	movs	r2, #1
 800936a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800936e:	2003      	movs	r0, #3
 8009370:	f002 fed2 	bl	800c118 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8009374:	3401      	adds	r4, #1
 8009376:	b2e4      	uxtb	r4, r4
 8009378:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800937c:	4b91      	ldr	r3, [pc, #580]	; (80095c4 <ProcessMacCommands+0x390>)
 800937e:	fba3 1302 	umull	r1, r3, r3, r2
 8009382:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 8009386:	d3ef      	bcc.n	8009368 <ProcessMacCommands+0x134>
                    macIndex += linkAdrNbBytesParsed - 1;
 8009388:	4491      	add	r9, r2
 800938a:	fa5f f989 	uxtb.w	r9, r9
 800938e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009392:	fa5f f989 	uxtb.w	r9, r9
                    adrBlockFound = true;
 8009396:	2701      	movs	r7, #1
 8009398:	e7a0      	b.n	80092dc <ProcessMacCommands+0xa8>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800939a:	3402      	adds	r4, #2
 800939c:	b2e4      	uxtb	r4, r4
 800939e:	f815 3009 	ldrb.w	r3, [r5, r9]
 80093a2:	f003 030f 	and.w	r3, r3, #15
 80093a6:	4986      	ldr	r1, [pc, #536]	; (80095c0 <ProcessMacCommands+0x38c>)
 80093a8:	f881 30ff 	strb.w	r3, [r1, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80093ac:	2201      	movs	r2, #1
 80093ae:	fa02 f303 	lsl.w	r3, r2, r3
 80093b2:	f8a1 3102 	strh.w	r3, [r1, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80093b6:	2200      	movs	r2, #0
 80093b8:	a90b      	add	r1, sp, #44	; 0x2c
 80093ba:	2004      	movs	r0, #4
 80093bc:	f002 feac 	bl	800c118 <LoRaMacCommandsAddCmd>
                break;
 80093c0:	e744      	b.n	800924c <ProcessMacCommands+0x18>
                status = 0x07;
 80093c2:	2307      	movs	r3, #7
 80093c4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80093c8:	f815 3009 	ldrb.w	r3, [r5, r9]
 80093cc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80093d0:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80093d4:	f915 3009 	ldrsb.w	r3, [r5, r9]
 80093d8:	f003 030f 	and.w	r3, r3, #15
 80093dc:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 80093e0:	1ca3      	adds	r3, r4, #2
 80093e2:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80093e4:	1ce1      	adds	r1, r4, #3
 80093e6:	b2c9      	uxtb	r1, r1
 80093e8:	5ceb      	ldrb	r3, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80093ea:	1d22      	adds	r2, r4, #4
 80093ec:	b2d2      	uxtb	r2, r2
 80093ee:	5c69      	ldrb	r1, [r5, r1]
 80093f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80093f4:	3405      	adds	r4, #5
 80093f6:	b2e4      	uxtb	r4, r4
 80093f8:	5caa      	ldrb	r2, [r5, r2]
 80093fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                rxParamSetupReq.Frequency *= 100;
 80093fe:	2264      	movs	r2, #100	; 0x64
 8009400:	fb02 f303 	mul.w	r3, r2, r3
 8009404:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8009406:	a907      	add	r1, sp, #28
 8009408:	4b6d      	ldr	r3, [pc, #436]	; (80095c0 <ProcessMacCommands+0x38c>)
 800940a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800940e:	f003 fe9c 	bl	800d14a <RegionRxParamSetupReq>
 8009412:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 8009416:	f000 0307 	and.w	r3, r0, #7
 800941a:	2b07      	cmp	r3, #7
 800941c:	d009      	beq.n	8009432 <ProcessMacCommands+0x1fe>
                macCmdPayload[0] = status;
 800941e:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8009422:	2201      	movs	r2, #1
 8009424:	a90b      	add	r1, sp, #44	; 0x2c
 8009426:	2005      	movs	r0, #5
 8009428:	f002 fe76 	bl	800c118 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 800942c:	f7ff fcb0 	bl	8008d90 <SetMlmeScheduleUplinkIndication>
                break;
 8009430:	e70c      	b.n	800924c <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8009432:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8009436:	4b62      	ldr	r3, [pc, #392]	; (80095c0 <ProcessMacCommands+0x38c>)
 8009438:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800943c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8009440:	9a08      	ldr	r2, [sp, #32]
 8009442:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8009444:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8009446:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800944a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800944e:	e7e6      	b.n	800941e <ProcessMacCommands+0x1ea>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8009450:	4b5a      	ldr	r3, [pc, #360]	; (80095bc <ProcessMacCommands+0x388>)
 8009452:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009456:	b17b      	cbz	r3, 8009478 <ProcessMacCommands+0x244>
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	b17b      	cbz	r3, 800947c <ProcessMacCommands+0x248>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800945c:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800945e:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8009462:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 8009466:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800946a:	2202      	movs	r2, #2
 800946c:	a90b      	add	r1, sp, #44	; 0x2c
 800946e:	2006      	movs	r0, #6
 8009470:	f002 fe52 	bl	800c118 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8009474:	464c      	mov	r4, r9
                break;
 8009476:	e6e9      	b.n	800924c <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8009478:	20ff      	movs	r0, #255	; 0xff
 800947a:	e7f0      	b.n	800945e <ProcessMacCommands+0x22a>
 800947c:	20ff      	movs	r0, #255	; 0xff
 800947e:	e7ee      	b.n	800945e <ProcessMacCommands+0x22a>
                status = 0x03;
 8009480:	2303      	movs	r3, #3
 8009482:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 8009486:	1ca3      	adds	r3, r4, #2
 8009488:	b2db      	uxtb	r3, r3
 800948a:	f915 2009 	ldrsb.w	r2, [r5, r9]
 800948e:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 8009492:	aa07      	add	r2, sp, #28
 8009494:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8009496:	1ce2      	adds	r2, r4, #3
 8009498:	b2d2      	uxtb	r2, r2
 800949a:	5ceb      	ldrb	r3, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800949c:	1d21      	adds	r1, r4, #4
 800949e:	b2c9      	uxtb	r1, r1
 80094a0:	5caa      	ldrb	r2, [r5, r2]
 80094a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80094a6:	1d62      	adds	r2, r4, #5
 80094a8:	b2d2      	uxtb	r2, r2
 80094aa:	5c69      	ldrb	r1, [r5, r1]
 80094ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                chParam.Frequency *= 100;
 80094b0:	2164      	movs	r1, #100	; 0x64
 80094b2:	fb01 f303 	mul.w	r3, r1, r3
 80094b6:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 80094bc:	3406      	adds	r4, #6
 80094be:	b2e4      	uxtb	r4, r4
 80094c0:	56ab      	ldrsb	r3, [r5, r2]
 80094c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80094c6:	a905      	add	r1, sp, #20
 80094c8:	4b3d      	ldr	r3, [pc, #244]	; (80095c0 <ProcessMacCommands+0x38c>)
 80094ca:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80094ce:	f003 fe50 	bl	800d172 <RegionNewChannelReq>
 80094d2:	b2c3      	uxtb	r3, r0
 80094d4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80094d8:	2800      	cmp	r0, #0
 80094da:	f6ff aeb7 	blt.w	800924c <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 80094de:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80094e2:	2201      	movs	r2, #1
 80094e4:	a90b      	add	r1, sp, #44	; 0x2c
 80094e6:	2007      	movs	r0, #7
 80094e8:	f002 fe16 	bl	800c118 <LoRaMacCommandsAddCmd>
                break;
 80094ec:	e6ae      	b.n	800924c <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80094ee:	3402      	adds	r4, #2
 80094f0:	b2e4      	uxtb	r4, r4
 80094f2:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 80094f6:	f013 020f 	ands.w	r2, r3, #15
 80094fa:	d100      	bne.n	80094fe <ProcessMacCommands+0x2ca>
                    delay++;
 80094fc:	3201      	adds	r2, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80094fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009502:	fb03 f302 	mul.w	r3, r3, r2
 8009506:	4a2e      	ldr	r2, [pc, #184]	; (80095c0 <ProcessMacCommands+0x38c>)
 8009508:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800950a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800950e:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8009510:	2200      	movs	r2, #0
 8009512:	a90b      	add	r1, sp, #44	; 0x2c
 8009514:	2008      	movs	r0, #8
 8009516:	f002 fdff 	bl	800c118 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 800951a:	f7ff fc39 	bl	8008d90 <SetMlmeScheduleUplinkIndication>
                break;
 800951e:	e695      	b.n	800924c <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 8009520:	3402      	adds	r4, #2
 8009522:	b2e4      	uxtb	r4, r4
 8009524:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 8009528:	2200      	movs	r2, #0
 800952a:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800952e:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009532:	f013 0f20 	tst.w	r3, #32
 8009536:	d002      	beq.n	800953e <ProcessMacCommands+0x30a>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8009538:	2201      	movs	r2, #1
 800953a:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800953e:	f013 0f10 	tst.w	r3, #16
 8009542:	d002      	beq.n	800954a <ProcessMacCommands+0x316>
                    txParamSetupReq.UplinkDwellTime = 1;
 8009544:	2201      	movs	r2, #1
 8009546:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800954a:	f003 030f 	and.w	r3, r3, #15
 800954e:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8009552:	a903      	add	r1, sp, #12
 8009554:	4b1a      	ldr	r3, [pc, #104]	; (80095c0 <ProcessMacCommands+0x38c>)
 8009556:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800955a:	f003 fe1e 	bl	800d19a <RegionTxParamSetupReq>
 800955e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009562:	f43f ae73 	beq.w	800924c <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8009566:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800956a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80095c0 <ProcessMacCommands+0x38c>
 800956e:	f889 a074 	strb.w	sl, [r9, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8009572:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009576:	f889 3075 	strb.w	r3, [r9, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800957a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800957e:	4a12      	ldr	r2, [pc, #72]	; (80095c8 <ProcessMacCommands+0x394>)
 8009580:	5cd0      	ldrb	r0, [r2, r3]
 8009582:	f7f9 f923 	bl	80027cc <__aeabi_ui2f>
 8009586:	f8c9 0078 	str.w	r0, [r9, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800958a:	2302      	movs	r3, #2
 800958c:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009590:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009594:	a907      	add	r1, sp, #28
 8009596:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 800959a:	f003 fcf2 	bl	800cf82 <RegionGetPhyParam>
 800959e:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80095a0:	b240      	sxtb	r0, r0
 80095a2:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 80095a6:	4298      	cmp	r0, r3
 80095a8:	bfb8      	it	lt
 80095aa:	4618      	movlt	r0, r3
 80095ac:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80095b0:	2200      	movs	r2, #0
 80095b2:	a90b      	add	r1, sp, #44	; 0x2c
 80095b4:	2009      	movs	r0, #9
 80095b6:	f002 fdaf 	bl	800c118 <LoRaMacCommandsAddCmd>
                break;
 80095ba:	e647      	b.n	800924c <ProcessMacCommands+0x18>
 80095bc:	200003f4 	.word	0x200003f4
 80095c0:	200008fc 	.word	0x200008fc
 80095c4:	cccccccd 	.word	0xcccccccd
 80095c8:	0801417c 	.word	0x0801417c
                status = 0x03;
 80095cc:	2303      	movs	r3, #3
 80095ce:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 80095d2:	1ca3      	adds	r3, r4, #2
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	f815 2009 	ldrb.w	r2, [r5, r9]
 80095da:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80095de:	1ce1      	adds	r1, r4, #3
 80095e0:	b2c9      	uxtb	r1, r1
 80095e2:	5ceb      	ldrb	r3, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80095e4:	1d22      	adds	r2, r4, #4
 80095e6:	b2d2      	uxtb	r2, r2
 80095e8:	5c69      	ldrb	r1, [r5, r1]
 80095ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80095ee:	3405      	adds	r4, #5
 80095f0:	b2e4      	uxtb	r4, r4
 80095f2:	5caa      	ldrb	r2, [r5, r2]
 80095f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                dlChannelReq.Rx1Frequency *= 100;
 80095f8:	2264      	movs	r2, #100	; 0x64
 80095fa:	fb02 f303 	mul.w	r3, r2, r3
 80095fe:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8009600:	a907      	add	r1, sp, #28
 8009602:	4b71      	ldr	r3, [pc, #452]	; (80097c8 <ProcessMacCommands+0x594>)
 8009604:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009608:	f003 fddb 	bl	800d1c2 <RegionDlChannelReq>
 800960c:	b2c3      	uxtb	r3, r0
 800960e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8009612:	2800      	cmp	r0, #0
 8009614:	f6ff ae1a 	blt.w	800924c <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 8009618:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800961c:	2201      	movs	r2, #1
 800961e:	a90b      	add	r1, sp, #44	; 0x2c
 8009620:	200a      	movs	r0, #10
 8009622:	f002 fd79 	bl	800c118 <LoRaMacCommandsAddCmd>
                    SetMlmeScheduleUplinkIndication( );
 8009626:	f7ff fbb3 	bl	8008d90 <SetMlmeScheduleUplinkIndication>
                break;
 800962a:	e60f      	b.n	800924c <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800962c:	200a      	movs	r0, #10
 800962e:	f002 ff37 	bl	800c4a0 <LoRaMacConfirmQueueIsCmdActive>
 8009632:	b908      	cbnz	r0, 8009638 <ProcessMacCommands+0x404>
        switch( payload[macIndex++] )
 8009634:	464c      	mov	r4, r9
 8009636:	e609      	b.n	800924c <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8009638:	210a      	movs	r1, #10
 800963a:	2000      	movs	r0, #0
 800963c:	f002 fee4 	bl	800c408 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8009640:	2300      	movs	r3, #0
 8009642:	f8ad 3012 	strh.w	r3, [sp, #18]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8009646:	1ca1      	adds	r1, r4, #2
 8009648:	b2c9      	uxtb	r1, r1
 800964a:	f815 3009 	ldrb.w	r3, [r5, r9]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800964e:	1ce2      	adds	r2, r4, #3
 8009650:	b2d2      	uxtb	r2, r2
 8009652:	5c69      	ldrb	r1, [r5, r1]
 8009654:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009658:	1d21      	adds	r1, r4, #4
 800965a:	b2c9      	uxtb	r1, r1
 800965c:	5caa      	ldrb	r2, [r5, r2]
 800965e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009662:	1d62      	adds	r2, r4, #5
 8009664:	b2d2      	uxtb	r2, r2
 8009666:	5c69      	ldrb	r1, [r5, r1]
 8009668:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800966c:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800966e:	3406      	adds	r4, #6
 8009670:	b2e4      	uxtb	r4, r4
 8009672:	5ca9      	ldrb	r1, [r5, r2]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8009674:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009678:	fb02 f201 	mul.w	r2, r2, r1
 800967c:	0a12      	lsrs	r2, r2, #8
 800967e:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8009682:	f10d 0914 	add.w	r9, sp, #20
 8009686:	9904      	ldr	r1, [sp, #16]
 8009688:	4618      	mov	r0, r3
 800968a:	e889 0003 	stmia.w	r9, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800968e:	4a4f      	ldr	r2, [pc, #316]	; (80097cc <ProcessMacCommands+0x598>)
 8009690:	441a      	add	r2, r3
 8009692:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8009694:	f10d 0b1c 	add.w	fp, sp, #28
 8009698:	4658      	mov	r0, fp
 800969a:	f009 fe61 	bl	8013360 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800969e:	f8df a130 	ldr.w	sl, [pc, #304]	; 80097d0 <ProcessMacCommands+0x59c>
 80096a2:	f8da 333c 	ldr.w	r3, [sl, #828]	; 0x33c
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	f8da 3338 	ldr.w	r3, [sl, #824]	; 0x338
 80096ac:	e899 0006 	ldmia.w	r9, {r1, r2}
 80096b0:	a80c      	add	r0, sp, #48	; 0x30
 80096b2:	f009 fe16 	bl	80132e2 <SysTimeSub>
 80096b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096bc:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80096c0:	4648      	mov	r0, r9
 80096c2:	f009 fdf1 	bl	80132a8 <SysTimeAdd>
                    SysTimeSet( sysTime );
 80096c6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80096ca:	f009 fe27 	bl	801331c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80096ce:	f002 fc8c 	bl	800bfea <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80096d2:	2301      	movs	r3, #1
 80096d4:	f88a 3434 	strb.w	r3, [sl, #1076]	; 0x434
 80096d8:	e5b8      	b.n	800924c <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80096da:	200d      	movs	r0, #13
 80096dc:	f002 fee0 	bl	800c4a0 <LoRaMacConfirmQueueIsCmdActive>
 80096e0:	b908      	cbnz	r0, 80096e6 <ProcessMacCommands+0x4b2>
        switch( payload[macIndex++] )
 80096e2:	464c      	mov	r4, r9
 80096e4:	e5b2      	b.n	800924c <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80096e6:	210d      	movs	r1, #13
 80096e8:	2000      	movs	r0, #0
 80096ea:	f002 fe8d 	bl	800c408 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80096ee:	4b38      	ldr	r3, [pc, #224]	; (80097d0 <ProcessMacCommands+0x59c>)
 80096f0:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80096f4:	3b04      	subs	r3, #4
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d801      	bhi.n	8009700 <ProcessMacCommands+0x4cc>
        switch( payload[macIndex++] )
 80096fc:	464c      	mov	r4, r9
 80096fe:	e5a5      	b.n	800924c <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 8009700:	f002 fc6f 	bl	800bfe2 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8009704:	464c      	mov	r4, r9
 8009706:	e5a1      	b.n	800924c <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 8009708:	1ca2      	adds	r2, r4, #2
 800970a:	b2d2      	uxtb	r2, r2
 800970c:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009710:	1ce1      	adds	r1, r4, #3
 8009712:	b2c9      	uxtb	r1, r1
 8009714:	5caa      	ldrb	r2, [r5, r2]
 8009716:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800971a:	1d22      	adds	r2, r4, #4
 800971c:	b2d2      	uxtb	r2, r2
 800971e:	5c69      	ldrb	r1, [r5, r1]
 8009720:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8009724:	3405      	adds	r4, #5
 8009726:	b2e4      	uxtb	r4, r4
 8009728:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800972a:	2164      	movs	r1, #100	; 0x64
 800972c:	fb01 f103 	mul.w	r1, r1, r3
 8009730:	f000 000f 	and.w	r0, r0, #15
 8009734:	f002 fc56 	bl	800bfe4 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8009738:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800973c:	2201      	movs	r2, #1
 800973e:	a90b      	add	r1, sp, #44	; 0x2c
 8009740:	2011      	movs	r0, #17
 8009742:	f002 fce9 	bl	800c118 <LoRaMacCommandsAddCmd>
                break;
 8009746:	e581      	b.n	800924c <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8009748:	200e      	movs	r0, #14
 800974a:	f002 fea9 	bl	800c4a0 <LoRaMacConfirmQueueIsCmdActive>
 800974e:	b908      	cbnz	r0, 8009754 <ProcessMacCommands+0x520>
        switch( payload[macIndex++] )
 8009750:	464c      	mov	r4, r9
 8009752:	e57b      	b.n	800924c <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8009754:	210e      	movs	r1, #14
 8009756:	2000      	movs	r0, #0
 8009758:	f002 fe56 	bl	800c408 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800975c:	1ca2      	adds	r2, r4, #2
 800975e:	b2d2      	uxtb	r2, r2
 8009760:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8009764:	1ce3      	adds	r3, r4, #3
 8009766:	b2db      	uxtb	r3, r3
 8009768:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800976c:	3404      	adds	r4, #4
 800976e:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8009770:	4a18      	ldr	r2, [pc, #96]	; (80097d4 <ProcessMacCommands+0x5a0>)
 8009772:	6812      	ldr	r2, [r2, #0]
 8009774:	5ce9      	ldrb	r1, [r5, r3]
 8009776:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 800977a:	f002 fc35 	bl	800bfe8 <LoRaMacClassBBeaconTimingAns>
 800977e:	e565      	b.n	800924c <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 8009780:	1ca1      	adds	r1, r4, #2
 8009782:	b2c9      	uxtb	r1, r1
 8009784:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009788:	1ce2      	adds	r2, r4, #3
 800978a:	b2d2      	uxtb	r2, r2
 800978c:	5c68      	ldrb	r0, [r5, r1]
 800978e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009792:	3404      	adds	r4, #4
 8009794:	b2e4      	uxtb	r4, r4
 8009796:	5ca8      	ldrb	r0, [r5, r2]
 8009798:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800979c:	2064      	movs	r0, #100	; 0x64
 800979e:	fb00 f003 	mul.w	r0, r0, r3
 80097a2:	f002 fc23 	bl	800bfec <LoRaMacClassBBeaconFreqReq>
 80097a6:	b140      	cbz	r0, 80097ba <ProcessMacCommands+0x586>
                        macCmdPayload[0] = 1;
 80097a8:	2301      	movs	r3, #1
 80097aa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80097ae:	2201      	movs	r2, #1
 80097b0:	a90b      	add	r1, sp, #44	; 0x2c
 80097b2:	2013      	movs	r0, #19
 80097b4:	f002 fcb0 	bl	800c118 <LoRaMacCommandsAddCmd>
                break;
 80097b8:	e548      	b.n	800924c <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80097c0:	e7f5      	b.n	80097ae <ProcessMacCommands+0x57a>
}
 80097c2:	b00f      	add	sp, #60	; 0x3c
 80097c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c8:	200008fc 	.word	0x200008fc
 80097cc:	12d53d80 	.word	0x12d53d80
 80097d0:	200003f4 	.word	0x200003f4
 80097d4:	200019c0 	.word	0x200019c0

080097d8 <ProcessRadioRxDone>:
{
 80097d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097dc:	b0a3      	sub	sp, #140	; 0x8c
    uint8_t *payload = RxDoneParams.Payload;
 80097de:	4bbd      	ldr	r3, [pc, #756]	; (8009ad4 <ProcessRadioRxDone+0x2fc>)
 80097e0:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 80097e2:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80097e4:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 80097e8:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 80097ec:	2300      	movs	r3, #0
 80097ee:	9306      	str	r3, [sp, #24]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80097f0:	4ab9      	ldr	r2, [pc, #740]	; (8009ad8 <ProcessRadioRxDone+0x300>)
 80097f2:	f8d2 80cc 	ldr.w	r8, [r2, #204]	; 0xcc
    MacCtx.McpsConfirm.AckReceived = false;
 80097f6:	4cb9      	ldr	r4, [pc, #740]	; (8009adc <ProcessRadioRxDone+0x304>)
 80097f8:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 80097fc:	f8a4 947c 	strh.w	r9, [r4, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 8009800:	f884 747e 	strb.w	r7, [r4, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8009804:	f894 2480 	ldrb.w	r2, [r4, #1152]	; 0x480
 8009808:	f884 247f 	strb.w	r2, [r4, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800980c:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 8009810:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8009814:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 8009818:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800981c:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 8009820:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 8009824:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8009828:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800982c:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 8009830:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009834:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    Radio.Sleep( );
 8009838:	4ba9      	ldr	r3, [pc, #676]	; (8009ae0 <ProcessRadioRxDone+0x308>)
 800983a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983c:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800983e:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8009842:	f009 fe77 	bl	8013534 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8009846:	4629      	mov	r1, r5
 8009848:	4630      	mov	r0, r6
 800984a:	f002 fbb7 	bl	800bfbc <LoRaMacClassBRxBeacon>
 800984e:	b998      	cbnz	r0, 8009878 <ProcessRadioRxDone+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009850:	4ba1      	ldr	r3, [pc, #644]	; (8009ad8 <ProcessRadioRxDone+0x300>)
 8009852:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009856:	2b01      	cmp	r3, #1
 8009858:	d013      	beq.n	8009882 <ProcessRadioRxDone+0xaa>
    macHdr.Value = payload[pktHeaderLen++];
 800985a:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800985c:	0963      	lsrs	r3, r4, #5
 800985e:	3b01      	subs	r3, #1
 8009860:	2b06      	cmp	r3, #6
 8009862:	f200 827c 	bhi.w	8009d5e <ProcessRadioRxDone+0x586>
 8009866:	e8df f013 	tbh	[pc, r3, lsl #1]
 800986a:	0029      	.short	0x0029
 800986c:	00a7027a 	.word	0x00a7027a
 8009870:	00a3027a 	.word	0x00a3027a
 8009874:	0254027a 	.word	0x0254027a
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8009878:	f8a4 9472 	strh.w	r9, [r4, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800987c:	f884 7474 	strb.w	r7, [r4, #1140]	; 0x474
        return;
 8009880:	e282      	b.n	8009d88 <ProcessRadioRxDone+0x5b0>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009882:	f002 fb9f 	bl	800bfc4 <LoRaMacClassBIsPingExpected>
 8009886:	b150      	cbz	r0, 800989e <ProcessRadioRxDone+0xc6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009888:	2000      	movs	r0, #0
 800988a:	f002 fb90 	bl	800bfae <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800988e:	2000      	movs	r0, #0
 8009890:	f002 fb92 	bl	800bfb8 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8009894:	4b91      	ldr	r3, [pc, #580]	; (8009adc <ProcessRadioRxDone+0x304>)
 8009896:	2204      	movs	r2, #4
 8009898:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800989c:	e7dd      	b.n	800985a <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800989e:	f002 fb93 	bl	800bfc8 <LoRaMacClassBIsMulticastExpected>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d0d9      	beq.n	800985a <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80098a6:	2000      	movs	r0, #0
 80098a8:	f002 fb82 	bl	800bfb0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80098ac:	2000      	movs	r0, #0
 80098ae:	f002 fb84 	bl	800bfba <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80098b2:	4b8a      	ldr	r3, [pc, #552]	; (8009adc <ProcessRadioRxDone+0x304>)
 80098b4:	2205      	movs	r2, #5
 80098b6:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 80098ba:	e7ce      	b.n	800985a <ProcessRadioRxDone+0x82>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80098bc:	2d10      	cmp	r5, #16
 80098be:	d95a      	bls.n	8009976 <ProcessRadioRxDone+0x19e>
            macMsgJoinAccept.Buffer = payload;
 80098c0:	9607      	str	r6, [sp, #28]
            macMsgJoinAccept.BufSize = size;
 80098c2:	b2ed      	uxtb	r5, r5
 80098c4:	f88d 5020 	strb.w	r5, [sp, #32]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80098c8:	4b83      	ldr	r3, [pc, #524]	; (8009ad8 <ProcessRadioRxDone+0x300>)
 80098ca:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d158      	bne.n	8009984 <ProcessRadioRxDone+0x1ac>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 80098d2:	f007 f93b 	bl	8010b4c <SecureElementGetJoinEui>
 80098d6:	4601      	mov	r1, r0
 80098d8:	aa07      	add	r2, sp, #28
 80098da:	20ff      	movs	r0, #255	; 0xff
 80098dc:	f003 f976 	bl	800cbcc <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d15b      	bne.n	800999c <ProcessRadioRxDone+0x1c4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80098e4:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80098e8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 80098ec:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80098f0:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 80098f4:	4b78      	ldr	r3, [pc, #480]	; (8009ad8 <ProcessRadioRxDone+0x300>)
 80098f6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80098fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80098fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009900:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8009904:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8009908:	f3c2 1102 	ubfx	r1, r2, #4, #3
 800990c:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009910:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8009914:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009918:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800991c:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8009920:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8009922:	b90a      	cbnz	r2, 8009928 <ProcessRadioRxDone+0x150>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8009924:	2201      	movs	r2, #1
 8009926:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8009928:	4c6b      	ldr	r4, [pc, #428]	; (8009ad8 <ProcessRadioRxDone+0x300>)
 800992a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800992c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009930:	fb03 f302 	mul.w	r3, r3, r2
 8009934:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8009936:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800993a:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800993c:	2300      	movs	r3, #0
 800993e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8009942:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8009946:	9320      	str	r3, [sp, #128]	; 0x80
                applyCFList.Size = size - 17;
 8009948:	3d11      	subs	r5, #17
 800994a:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800994e:	a920      	add	r1, sp, #128	; 0x80
 8009950:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009954:	f003 fb6e 	bl	800d034 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8009958:	2302      	movs	r3, #2
 800995a:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800995e:	2001      	movs	r0, #1
 8009960:	f002 fd9e 	bl	800c4a0 <LoRaMacConfirmQueueIsCmdActive>
 8009964:	b9a8      	cbnz	r0, 8009992 <ProcessRadioRxDone+0x1ba>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8009966:	4a5d      	ldr	r2, [pc, #372]	; (8009adc <ProcessRadioRxDone+0x304>)
 8009968:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800996c:	f043 0308 	orr.w	r3, r3, #8
 8009970:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8009974:	e1e7      	b.n	8009d46 <ProcessRadioRxDone+0x56e>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009976:	4b59      	ldr	r3, [pc, #356]	; (8009adc <ProcessRadioRxDone+0x304>)
 8009978:	2201      	movs	r2, #1
 800997a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800997e:	f7ff fbe3 	bl	8009148 <PrepareRxDoneAbort>
                return;
 8009982:	e201      	b.n	8009d88 <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009984:	4b55      	ldr	r3, [pc, #340]	; (8009adc <ProcessRadioRxDone+0x304>)
 8009986:	2201      	movs	r2, #1
 8009988:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800998c:	f7ff fbdc 	bl	8009148 <PrepareRxDoneAbort>
                return;
 8009990:	e1fa      	b.n	8009d88 <ProcessRadioRxDone+0x5b0>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8009992:	2101      	movs	r1, #1
 8009994:	2000      	movs	r0, #0
 8009996:	f002 fd37 	bl	800c408 <LoRaMacConfirmQueueSetStatus>
 800999a:	e7e4      	b.n	8009966 <ProcessRadioRxDone+0x18e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800999c:	2001      	movs	r0, #1
 800999e:	f002 fd7f 	bl	800c4a0 <LoRaMacConfirmQueueIsCmdActive>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	d0df      	beq.n	8009966 <ProcessRadioRxDone+0x18e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80099a6:	2101      	movs	r1, #1
 80099a8:	2007      	movs	r0, #7
 80099aa:	f002 fd2d 	bl	800c408 <LoRaMacConfirmQueueSetStatus>
 80099ae:	e7da      	b.n	8009966 <ProcessRadioRxDone+0x18e>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80099b0:	4b4a      	ldr	r3, [pc, #296]	; (8009adc <ProcessRadioRxDone+0x304>)
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80099b8:	4b47      	ldr	r3, [pc, #284]	; (8009ad8 <ProcessRadioRxDone+0x300>)
 80099ba:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80099be:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80099c2:	4a46      	ldr	r2, [pc, #280]	; (8009adc <ProcessRadioRxDone+0x304>)
 80099c4:	f992 2420 	ldrsb.w	r2, [r2, #1056]	; 0x420
 80099c8:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80099cc:	220d      	movs	r2, #13
 80099ce:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80099d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099d6:	b113      	cbz	r3, 80099de <ProcessRadioRxDone+0x206>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80099d8:	230e      	movs	r3, #14
 80099da:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80099de:	a91e      	add	r1, sp, #120	; 0x78
 80099e0:	4b3d      	ldr	r3, [pc, #244]	; (8009ad8 <ProcessRadioRxDone+0x300>)
 80099e2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80099e6:	f003 facc 	bl	800cf82 <RegionGetPhyParam>
 80099ea:	901d      	str	r0, [sp, #116]	; 0x74
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80099ec:	f1a5 030d 	sub.w	r3, r5, #13
 80099f0:	b21b      	sxth	r3, r3
 80099f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80099f6:	b200      	sxth	r0, r0
 80099f8:	4283      	cmp	r3, r0
 80099fa:	dc01      	bgt.n	8009a00 <ProcessRadioRxDone+0x228>
 80099fc:	2d0b      	cmp	r5, #11
 80099fe:	d806      	bhi.n	8009a0e <ProcessRadioRxDone+0x236>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009a00:	4b36      	ldr	r3, [pc, #216]	; (8009adc <ProcessRadioRxDone+0x304>)
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009a08:	f7ff fb9e 	bl	8009148 <PrepareRxDoneAbort>
                return;
 8009a0c:	e1bc      	b.n	8009d88 <ProcessRadioRxDone+0x5b0>
            macMsgData.Buffer = payload;
 8009a0e:	9611      	str	r6, [sp, #68]	; 0x44
            macMsgData.BufSize = size;
 8009a10:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8009a14:	4b33      	ldr	r3, [pc, #204]	; (8009ae4 <ProcessRadioRxDone+0x30c>)
 8009a16:	931a      	str	r3, [sp, #104]	; 0x68
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8009a18:	23ff      	movs	r3, #255	; 0xff
 8009a1a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009a1e:	a811      	add	r0, sp, #68	; 0x44
 8009a20:	f003 f998 	bl	800cd54 <LoRaMacParserData>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d146      	bne.n	8009ab6 <ProcessRadioRxDone+0x2de>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8009a28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a2a:	4b2c      	ldr	r3, [pc, #176]	; (8009adc <ProcessRadioRxDone+0x304>)
 8009a2c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8009a30:	f10d 0116 	add.w	r1, sp, #22
 8009a34:	a811      	add	r0, sp, #68	; 0x44
 8009a36:	f7ff f9e1 	bl	8008dfc <DetermineFrameType>
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d141      	bne.n	8009ac4 <ProcessRadioRxDone+0x2ec>
            downLinkCounter = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	9306      	str	r3, [sp, #24]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d04e      	beq.n	8009ae8 <ProcessRadioRxDone+0x310>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8009a4a:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8009a4c:	2d01      	cmp	r5, #1
 8009a4e:	d108      	bne.n	8009a62 <ProcessRadioRxDone+0x28a>
 8009a50:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009a54:	2b03      	cmp	r3, #3
 8009a56:	d174      	bne.n	8009b42 <ProcessRadioRxDone+0x36a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8009a58:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8009a5c:	f013 0f60 	tst.w	r3, #96	; 0x60
 8009a60:	d16f      	bne.n	8009b42 <ProcessRadioRxDone+0x36a>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8009a62:	2315      	movs	r3, #21
 8009a64:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009a68:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8009ad8 <ProcessRadioRxDone+0x300>
 8009a6c:	a91e      	add	r1, sp, #120	; 0x78
 8009a6e:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 8009a72:	f003 fa86 	bl	800cf82 <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 8009a76:	ab06      	add	r3, sp, #24
 8009a78:	9302      	str	r3, [sp, #8]
 8009a7a:	f10d 0317 	add.w	r3, sp, #23
 8009a7e:	9301      	str	r3, [sp, #4]
 8009a80:	b280      	uxth	r0, r0
 8009a82:	9000      	str	r0, [sp, #0]
 8009a84:	f8d9 310c 	ldr.w	r3, [r9, #268]	; 0x10c
 8009a88:	aa11      	add	r2, sp, #68	; 0x44
 8009a8a:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f7ff fb94 	bl	80091bc <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d075      	beq.n	8009b84 <ProcessRadioRxDone+0x3ac>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8009a98:	2807      	cmp	r0, #7
 8009a9a:	d059      	beq.n	8009b50 <ProcessRadioRxDone+0x378>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8009a9c:	2808      	cmp	r0, #8
 8009a9e:	d06c      	beq.n	8009b7a <ProcessRadioRxDone+0x3a2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009aa0:	4b0e      	ldr	r3, [pc, #56]	; (8009adc <ProcessRadioRxDone+0x304>)
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009aa8:	4b0c      	ldr	r3, [pc, #48]	; (8009adc <ProcessRadioRxDone+0x304>)
 8009aaa:	9a06      	ldr	r2, [sp, #24]
 8009aac:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 8009ab0:	f7ff fb4a 	bl	8009148 <PrepareRxDoneAbort>
                return;
 8009ab4:	e168      	b.n	8009d88 <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009ab6:	4b09      	ldr	r3, [pc, #36]	; (8009adc <ProcessRadioRxDone+0x304>)
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009abe:	f7ff fb43 	bl	8009148 <PrepareRxDoneAbort>
                return;
 8009ac2:	e161      	b.n	8009d88 <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009ac4:	4b05      	ldr	r3, [pc, #20]	; (8009adc <ProcessRadioRxDone+0x304>)
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009acc:	f7ff fb3c 	bl	8009148 <PrepareRxDoneAbort>
                return;
 8009ad0:	e15a      	b.n	8009d88 <ProcessRadioRxDone+0x5b0>
 8009ad2:	bf00      	nop
 8009ad4:	200019c0 	.word	0x200019c0
 8009ad8:	200008fc 	.word	0x200008fc
 8009adc:	200003f4 	.word	0x200003f4
 8009ae0:	08014674 	.word	0x08014674
 8009ae4:	2000062c 	.word	0x2000062c
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009ae8:	4618      	mov	r0, r3
 8009aea:	49ab      	ldr	r1, [pc, #684]	; (8009d98 <ProcessRadioRxDone+0x5c0>)
 8009aec:	222c      	movs	r2, #44	; 0x2c
 8009aee:	fb02 1203 	mla	r2, r2, r3, r1
 8009af2:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8009af6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009af8:	428a      	cmp	r2, r1
 8009afa:	d002      	beq.n	8009b02 <ProcessRadioRxDone+0x32a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009afc:	3301      	adds	r3, #1
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	e7a1      	b.n	8009a46 <ProcessRadioRxDone+0x26e>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8009b02:	4ea5      	ldr	r6, [pc, #660]	; (8009d98 <ProcessRadioRxDone+0x5c0>)
 8009b04:	212c      	movs	r1, #44	; 0x2c
 8009b06:	fb01 6103 	mla	r1, r1, r3, r6
 8009b0a:	f891 10d2 	ldrb.w	r1, [r1, #210]	; 0xd2
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009b0e:	2900      	cmp	r1, #0
 8009b10:	d0f4      	beq.n	8009afc <ProcessRadioRxDone+0x324>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8009b12:	4633      	mov	r3, r6
 8009b14:	212c      	movs	r1, #44	; 0x2c
 8009b16:	fb01 6000 	mla	r0, r1, r0, r6
 8009b1a:	f890 60d3 	ldrb.w	r6, [r0, #211]	; 0xd3
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8009b1e:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 8009b22:	6809      	ldr	r1, [r1, #0]
 8009b24:	9106      	str	r1, [sp, #24]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009b26:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d002      	beq.n	8009b34 <ProcessRadioRxDone+0x35c>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8009b2e:	4690      	mov	r8, r2
                    multicast = 1;
 8009b30:	2501      	movs	r5, #1
 8009b32:	e78b      	b.n	8009a4c <ProcessRadioRxDone+0x274>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009b34:	4b99      	ldr	r3, [pc, #612]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009b36:	2103      	movs	r1, #3
 8009b38:	f883 147f 	strb.w	r1, [r3, #1151]	; 0x47f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8009b3c:	4690      	mov	r8, r2
                    multicast = 1;
 8009b3e:	2501      	movs	r5, #1
 8009b40:	e784      	b.n	8009a4c <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009b42:	4b96      	ldr	r3, [pc, #600]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009b4a:	f7ff fafd 	bl	8009148 <PrepareRxDoneAbort>
                return;
 8009b4e:	e11b      	b.n	8009d88 <ProcessRadioRxDone+0x5b0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8009b50:	4b92      	ldr	r3, [pc, #584]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009b52:	2208      	movs	r2, #8
 8009b54:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8009b58:	f899 310e 	ldrb.w	r3, [r9, #270]	; 0x10e
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1a3      	bne.n	8009aa8 <ProcessRadioRxDone+0x2d0>
 8009b60:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8009b64:	2ca0      	cmp	r4, #160	; 0xa0
 8009b66:	d19f      	bne.n	8009aa8 <ProcessRadioRxDone+0x2d0>
 8009b68:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
 8009b6c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d19a      	bne.n	8009aa8 <ProcessRadioRxDone+0x2d0>
                        Nvm.MacGroup1.SrvAckRequested = true;
 8009b72:	2201      	movs	r2, #1
 8009b74:	f889 203a 	strb.w	r2, [r9, #58]	; 0x3a
 8009b78:	e796      	b.n	8009aa8 <ProcessRadioRxDone+0x2d0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8009b7a:	4b88      	ldr	r3, [pc, #544]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009b7c:	220a      	movs	r2, #10
 8009b7e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8009b82:	e791      	b.n	8009aa8 <ProcessRadioRxDone+0x2d0>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8009b84:	ab11      	add	r3, sp, #68	; 0x44
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	9b06      	ldr	r3, [sp, #24]
 8009b8a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8009b8e:	4641      	mov	r1, r8
 8009b90:	4630      	mov	r0, r6
 8009b92:	f002 ff6f 	bl	800ca74 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009b96:	2800      	cmp	r0, #0
 8009b98:	d13a      	bne.n	8009c10 <ProcessRadioRxDone+0x438>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009b9a:	4b80      	ldr	r3, [pc, #512]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	f883 141d 	strb.w	r1, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 8009ba2:	f883 541e 	strb.w	r5, [r3, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8009ba6:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8009baa:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8009bae:	f883 0421 	strb.w	r0, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 8009bb2:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 8009bb6:	f883 1428 	strb.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009bba:	9806      	ldr	r0, [sp, #24]
 8009bbc:	f8c3 042c 	str.w	r0, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009bc0:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8009bc4:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009bc8:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009bcc:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009bd0:	f893 047f 	ldrb.w	r0, [r3, #1151]	; 0x47f
 8009bd4:	2801      	cmp	r0, #1
 8009bd6:	d929      	bls.n	8009c2c <ProcessRadioRxDone+0x454>
            if( multicast == 1 )
 8009bd8:	2d01      	cmp	r5, #1
 8009bda:	d02a      	beq.n	8009c32 <ProcessRadioRxDone+0x45a>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8009bdc:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8009be0:	2ca0      	cmp	r4, #160	; 0xa0
 8009be2:	d02b      	beq.n	8009c3c <ProcessRadioRxDone+0x464>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8009be4:	2300      	movs	r3, #0
 8009be6:	4a6c      	ldr	r2, [pc, #432]	; (8009d98 <ProcessRadioRxDone+0x5c0>)
 8009be8:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009bec:	4a6b      	ldr	r2, [pc, #428]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009bee:	f882 341c 	strb.w	r3, [r2, #1052]	; 0x41c
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8009bf2:	4b6a      	ldr	r3, [pc, #424]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009bf4:	f893 2438 	ldrb.w	r2, [r3, #1080]	; 0x438
 8009bf8:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8009bfc:	f7ff fb0a 	bl	8009214 <RemoveMacCommands>
            switch( fType )
 8009c00:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	d87d      	bhi.n	8009d04 <ProcessRadioRxDone+0x52c>
 8009c08:	e8df f003 	tbb	[pc, r3]
 8009c0c:	6c5c4a27 	.word	0x6c5c4a27
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8009c10:	2802      	cmp	r0, #2
 8009c12:	d006      	beq.n	8009c22 <ProcessRadioRxDone+0x44a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8009c14:	4b61      	ldr	r3, [pc, #388]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009c16:	220c      	movs	r2, #12
 8009c18:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009c1c:	f7ff fa94 	bl	8009148 <PrepareRxDoneAbort>
                return;
 8009c20:	e0b2      	b.n	8009d88 <ProcessRadioRxDone+0x5b0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8009c22:	4b5e      	ldr	r3, [pc, #376]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009c24:	220b      	movs	r2, #11
 8009c26:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8009c2a:	e7f7      	b.n	8009c1c <ProcessRadioRxDone+0x444>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8009c2c:	4b5a      	ldr	r3, [pc, #360]	; (8009d98 <ProcessRadioRxDone+0x5c0>)
 8009c2e:	6299      	str	r1, [r3, #40]	; 0x28
 8009c30:	e7d2      	b.n	8009bd8 <ProcessRadioRxDone+0x400>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8009c32:	4b5a      	ldr	r3, [pc, #360]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009c34:	2202      	movs	r2, #2
 8009c36:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8009c3a:	e7da      	b.n	8009bf2 <ProcessRadioRxDone+0x41a>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8009c3c:	4b56      	ldr	r3, [pc, #344]	; (8009d98 <ProcessRadioRxDone+0x5c0>)
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009c44:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8009c48:	b913      	cbnz	r3, 8009c50 <ProcessRadioRxDone+0x478>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8009c4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c4c:	4b52      	ldr	r3, [pc, #328]	; (8009d98 <ProcessRadioRxDone+0x5c0>)
 8009c4e:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009c50:	4b52      	ldr	r3, [pc, #328]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8009c58:	e7cb      	b.n	8009bf2 <ProcessRadioRxDone+0x41a>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009c5a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8009c5e:	4c4f      	ldr	r4, [pc, #316]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009c60:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	463b      	mov	r3, r7
 8009c68:	f002 020f 	and.w	r2, r2, #15
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	a815      	add	r0, sp, #84	; 0x54
 8009c70:	f7ff fae0 	bl	8009234 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009c74:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8009c78:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009c7c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009c7e:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009c82:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8009c86:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009c90:	4a42      	ldr	r2, [pc, #264]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009c92:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009c96:	f043 0302 	orr.w	r3, r3, #2
 8009c9a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8009c9e:	e052      	b.n	8009d46 <ProcessRadioRxDone+0x56e>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009ca0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8009ca4:	4c3d      	ldr	r4, [pc, #244]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009ca6:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	463b      	mov	r3, r7
 8009cae:	f002 020f 	and.w	r2, r2, #15
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	a815      	add	r0, sp, #84	; 0x54
 8009cb6:	f7ff fabd 	bl	8009234 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009cba:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8009cbe:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8009cc2:	e7e5      	b.n	8009c90 <ProcessRadioRxDone+0x4b8>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8009cc4:	4c35      	ldr	r4, [pc, #212]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009cc6:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	463b      	mov	r3, r7
 8009cce:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	981a      	ldr	r0, [sp, #104]	; 0x68
 8009cd6:	f7ff faad 	bl	8009234 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009cda:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8009cde:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8009ce2:	e7d5      	b.n	8009c90 <ProcessRadioRxDone+0x4b8>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009ce4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8009ce8:	4b2c      	ldr	r3, [pc, #176]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009cea:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009cee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009cf0:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009cf4:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8009cf8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8009d02:	e7c5      	b.n	8009c90 <ProcessRadioRxDone+0x4b8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009d04:	4b25      	ldr	r3, [pc, #148]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 8009d0c:	f7ff fa1c 	bl	8009148 <PrepareRxDoneAbort>
                    break;
 8009d10:	e7be      	b.n	8009c90 <ProcessRadioRxDone+0x4b8>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8009d12:	1e6a      	subs	r2, r5, #1
 8009d14:	4c21      	ldr	r4, [pc, #132]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009d16:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8009d1a:	b292      	uxth	r2, r2
 8009d1c:	1c71      	adds	r1, r6, #1
 8009d1e:	4638      	mov	r0, r7
 8009d20:	f006 ff45 	bl	8010bae <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009d24:	2303      	movs	r3, #3
 8009d26:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8009d30:	f8c4 7424 	str.w	r7, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8009d34:	3d01      	subs	r5, #1
 8009d36:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009d3a:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8009d3e:	f043 0302 	orr.w	r3, r3, #2
 8009d42:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    if( MacCtx.NodeAckRequested == true )
 8009d46:	4b15      	ldr	r3, [pc, #84]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009d48:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8009d4c:	b173      	cbz	r3, 8009d6c <ProcessRadioRxDone+0x594>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009d4e:	4b13      	ldr	r3, [pc, #76]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009d50:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8009d54:	b17b      	cbz	r3, 8009d76 <ProcessRadioRxDone+0x59e>
            OnAckTimeoutTimerEvent( NULL );
 8009d56:	2000      	movs	r0, #0
 8009d58:	f7ff f9d0 	bl	80090fc <OnAckTimeoutTimerEvent>
 8009d5c:	e00b      	b.n	8009d76 <ProcessRadioRxDone+0x59e>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009d5e:	4b0f      	ldr	r3, [pc, #60]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 8009d66:	f7ff f9ef 	bl	8009148 <PrepareRxDoneAbort>
            break;
 8009d6a:	e7ec      	b.n	8009d46 <ProcessRadioRxDone+0x56e>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009d6c:	4b0a      	ldr	r3, [pc, #40]	; (8009d98 <ProcessRadioRxDone+0x5c0>)
 8009d6e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d00b      	beq.n	8009d8e <ProcessRadioRxDone+0x5b6>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009d76:	4a09      	ldr	r2, [pc, #36]	; (8009d9c <ProcessRadioRxDone+0x5c4>)
 8009d78:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009d7c:	f043 0320 	orr.w	r3, r3, #32
 8009d80:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8009d84:	f7fe ff92 	bl	8008cac <UpdateRxSlotIdleState>
}
 8009d88:	b023      	add	sp, #140	; 0x8c
 8009d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            OnAckTimeoutTimerEvent( NULL );
 8009d8e:	2000      	movs	r0, #0
 8009d90:	f7ff f9b4 	bl	80090fc <OnAckTimeoutTimerEvent>
 8009d94:	e7ef      	b.n	8009d76 <ProcessRadioRxDone+0x59e>
 8009d96:	bf00      	nop
 8009d98:	200008fc 	.word	0x200008fc
 8009d9c:	200003f4 	.word	0x200003f4

08009da0 <ProcessRadioTxTimeout>:
{
 8009da0:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009da2:	4b0f      	ldr	r3, [pc, #60]	; (8009de0 <ProcessRadioTxTimeout+0x40>)
 8009da4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d002      	beq.n	8009db2 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8009dac:	4b0d      	ldr	r3, [pc, #52]	; (8009de4 <ProcessRadioTxTimeout+0x44>)
 8009dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db0:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8009db2:	f7fe ff7b 	bl	8008cac <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8009db6:	4c0c      	ldr	r4, [pc, #48]	; (8009de8 <ProcessRadioTxTimeout+0x48>)
 8009db8:	2002      	movs	r0, #2
 8009dba:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009dbe:	f002 fb51 	bl	800c464 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8009dc2:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8009dc6:	b113      	cbz	r3, 8009dce <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009dce:	4a06      	ldr	r2, [pc, #24]	; (8009de8 <ProcessRadioTxTimeout+0x48>)
 8009dd0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009dd4:	f043 0320 	orr.w	r3, r3, #32
 8009dd8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8009ddc:	bd10      	pop	{r4, pc}
 8009dde:	bf00      	nop
 8009de0:	200008fc 	.word	0x200008fc
 8009de4:	08014674 	.word	0x08014674
 8009de8:	200003f4 	.word	0x200003f4

08009dec <CheckForClassBCollision>:
{
 8009dec:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009dee:	f002 f8e7 	bl	800bfc0 <LoRaMacClassBIsBeaconExpected>
 8009df2:	b978      	cbnz	r0, 8009e14 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009df4:	4b09      	ldr	r3, [pc, #36]	; (8009e1c <CheckForClassBCollision+0x30>)
 8009df6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d001      	beq.n	8009e02 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8009dfe:	2000      	movs	r0, #0
}
 8009e00:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009e02:	f002 f8df 	bl	800bfc4 <LoRaMacClassBIsPingExpected>
 8009e06:	b938      	cbnz	r0, 8009e18 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009e08:	f002 f8de 	bl	800bfc8 <LoRaMacClassBIsMulticastExpected>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d0f7      	beq.n	8009e00 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009e10:	200f      	movs	r0, #15
 8009e12:	e7f5      	b.n	8009e00 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8009e14:	200e      	movs	r0, #14
 8009e16:	e7f3      	b.n	8009e00 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009e18:	200f      	movs	r0, #15
 8009e1a:	e7f1      	b.n	8009e00 <CheckForClassBCollision+0x14>
 8009e1c:	200008fc 	.word	0x200008fc

08009e20 <HandleRadioRxErrorTimeout>:
{
 8009e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e22:	4605      	mov	r5, r0
 8009e24:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009e26:	4b37      	ldr	r3, [pc, #220]	; (8009f04 <HandleRadioRxErrorTimeout+0xe4>)
 8009e28:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d002      	beq.n	8009e36 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8009e30:	4b35      	ldr	r3, [pc, #212]	; (8009f08 <HandleRadioRxErrorTimeout+0xe8>)
 8009e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e34:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009e36:	f002 f8c3 	bl	800bfc0 <LoRaMacClassBIsBeaconExpected>
 8009e3a:	4606      	mov	r6, r0
 8009e3c:	bb00      	cbnz	r0, 8009e80 <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009e3e:	4b31      	ldr	r3, [pc, #196]	; (8009f04 <HandleRadioRxErrorTimeout+0xe4>)
 8009e40:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d022      	beq.n	8009e8e <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 8009e48:	b9be      	cbnz	r6, 8009e7a <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009e4a:	4b30      	ldr	r3, [pc, #192]	; (8009f0c <HandleRadioRxErrorTimeout+0xec>)
 8009e4c:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d13f      	bne.n	8009ed4 <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 8009e54:	4b2d      	ldr	r3, [pc, #180]	; (8009f0c <HandleRadioRxErrorTimeout+0xec>)
 8009e56:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8009e5a:	b113      	cbz	r3, 8009e62 <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8009e5c:	4b2b      	ldr	r3, [pc, #172]	; (8009f0c <HandleRadioRxErrorTimeout+0xec>)
 8009e5e:	f883 5439 	strb.w	r5, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8009e62:	4628      	mov	r0, r5
 8009e64:	f002 fafe 	bl	800c464 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8009e68:	4b26      	ldr	r3, [pc, #152]	; (8009f04 <HandleRadioRxErrorTimeout+0xe4>)
 8009e6a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009e6c:	f009 fb2c 	bl	80134c8 <UTIL_TIMER_GetElapsedTime>
 8009e70:	4b26      	ldr	r3, [pc, #152]	; (8009f0c <HandleRadioRxErrorTimeout+0xec>)
 8009e72:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8009e76:	4298      	cmp	r0, r3
 8009e78:	d220      	bcs.n	8009ebc <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 8009e7a:	f7fe ff17 	bl	8008cac <UpdateRxSlotIdleState>
}
 8009e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8009e80:	2002      	movs	r0, #2
 8009e82:	f002 f893 	bl	800bfac <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8009e86:	2000      	movs	r0, #0
 8009e88:	f002 f895 	bl	800bfb6 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8009e8c:	e7d7      	b.n	8009e3e <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009e8e:	f002 f899 	bl	800bfc4 <LoRaMacClassBIsPingExpected>
 8009e92:	4607      	mov	r7, r0
 8009e94:	b950      	cbnz	r0, 8009eac <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009e96:	f002 f897 	bl	800bfc8 <LoRaMacClassBIsMulticastExpected>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d0d4      	beq.n	8009e48 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	f002 f886 	bl	800bfb0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	f002 f888 	bl	800bfba <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8009eaa:	e7e6      	b.n	8009e7a <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009eac:	2000      	movs	r0, #0
 8009eae:	f002 f87e 	bl	800bfae <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	f002 f880 	bl	800bfb8 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8009eb8:	463e      	mov	r6, r7
 8009eba:	e7ec      	b.n	8009e96 <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8009ebc:	4c13      	ldr	r4, [pc, #76]	; (8009f0c <HandleRadioRxErrorTimeout+0xec>)
 8009ebe:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8009ec2:	f009 fb37 	bl	8013534 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8009ec6:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8009eca:	f043 0320 	orr.w	r3, r3, #32
 8009ece:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
 8009ed2:	e7d2      	b.n	8009e7a <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 8009ed4:	4b0d      	ldr	r3, [pc, #52]	; (8009f0c <HandleRadioRxErrorTimeout+0xec>)
 8009ed6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8009eda:	b113      	cbz	r3, 8009ee2 <HandleRadioRxErrorTimeout+0xc2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8009edc:	4b0b      	ldr	r3, [pc, #44]	; (8009f0c <HandleRadioRxErrorTimeout+0xec>)
 8009ede:	f883 4439 	strb.w	r4, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f002 fabe 	bl	800c464 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009ee8:	4b06      	ldr	r3, [pc, #24]	; (8009f04 <HandleRadioRxErrorTimeout+0xe4>)
 8009eea:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d0c3      	beq.n	8009e7a <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8009ef2:	4a06      	ldr	r2, [pc, #24]	; (8009f0c <HandleRadioRxErrorTimeout+0xec>)
 8009ef4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009ef8:	f043 0320 	orr.w	r3, r3, #32
 8009efc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8009f00:	e7bb      	b.n	8009e7a <HandleRadioRxErrorTimeout+0x5a>
 8009f02:	bf00      	nop
 8009f04:	200008fc 	.word	0x200008fc
 8009f08:	08014674 	.word	0x08014674
 8009f0c:	200003f4 	.word	0x200003f4

08009f10 <ProcessRadioRxError>:
{
 8009f10:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8009f12:	2106      	movs	r1, #6
 8009f14:	2005      	movs	r0, #5
 8009f16:	f7ff ff83 	bl	8009e20 <HandleRadioRxErrorTimeout>
}
 8009f1a:	bd08      	pop	{r3, pc}

08009f1c <ProcessRadioRxTimeout>:
{
 8009f1c:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8009f1e:	2104      	movs	r1, #4
 8009f20:	2003      	movs	r0, #3
 8009f22:	f7ff ff7d 	bl	8009e20 <HandleRadioRxErrorTimeout>
}
 8009f26:	bd08      	pop	{r3, pc}

08009f28 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f28:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009f2c:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8009f2e:	4a14      	ldr	r2, [pc, #80]	; (8009f80 <LoRaMacHandleIrqEvents+0x58>)
 8009f30:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8009f32:	2000      	movs	r0, #0
 8009f34:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f36:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8009f3a:	b303      	cbz	r3, 8009f7e <LoRaMacHandleIrqEvents+0x56>
{
 8009f3c:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 8009f3e:	b2dc      	uxtb	r4, r3
 8009f40:	f013 0f10 	tst.w	r3, #16
 8009f44:	d10c      	bne.n	8009f60 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 8009f46:	f014 0f08 	tst.w	r4, #8
 8009f4a:	d10c      	bne.n	8009f66 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8009f4c:	f014 0f04 	tst.w	r4, #4
 8009f50:	d10c      	bne.n	8009f6c <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 8009f52:	f014 0f02 	tst.w	r4, #2
 8009f56:	d10c      	bne.n	8009f72 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 8009f58:	f014 0f01 	tst.w	r4, #1
 8009f5c:	d10c      	bne.n	8009f78 <LoRaMacHandleIrqEvents+0x50>
}
 8009f5e:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 8009f60:	f7ff f84e 	bl	8009000 <ProcessRadioTxDone>
 8009f64:	e7ef      	b.n	8009f46 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 8009f66:	f7ff fc37 	bl	80097d8 <ProcessRadioRxDone>
 8009f6a:	e7ef      	b.n	8009f4c <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 8009f6c:	f7ff ff18 	bl	8009da0 <ProcessRadioTxTimeout>
 8009f70:	e7ef      	b.n	8009f52 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 8009f72:	f7ff ffcd 	bl	8009f10 <ProcessRadioRxError>
 8009f76:	e7ef      	b.n	8009f58 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 8009f78:	f7ff ffd0 	bl	8009f1c <ProcessRadioRxTimeout>
}
 8009f7c:	e7ef      	b.n	8009f5e <LoRaMacHandleIrqEvents+0x36>
 8009f7e:	4770      	bx	lr
 8009f80:	200003f0 	.word	0x200003f0

08009f84 <LoRaMacHandleMlmeRequest>:
{
 8009f84:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009f86:	4b16      	ldr	r3, [pc, #88]	; (8009fe0 <LoRaMacHandleMlmeRequest+0x5c>)
 8009f88:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009f8c:	f013 0f04 	tst.w	r3, #4
 8009f90:	d100      	bne.n	8009f94 <LoRaMacHandleMlmeRequest+0x10>
}
 8009f92:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009f94:	2001      	movs	r0, #1
 8009f96:	f002 fa83 	bl	800c4a0 <LoRaMacConfirmQueueIsCmdActive>
 8009f9a:	b178      	cbz	r0, 8009fbc <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009f9c:	2001      	movs	r0, #1
 8009f9e:	f002 fa49 	bl	800c434 <LoRaMacConfirmQueueGetStatus>
 8009fa2:	b918      	cbnz	r0, 8009fac <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8009fa4:	4b0e      	ldr	r3, [pc, #56]	; (8009fe0 <LoRaMacHandleMlmeRequest+0x5c>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009fac:	4a0c      	ldr	r2, [pc, #48]	; (8009fe0 <LoRaMacHandleMlmeRequest+0x5c>)
 8009fae:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009fb2:	f023 0302 	bic.w	r3, r3, #2
 8009fb6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8009fba:	e7ea      	b.n	8009f92 <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8009fbc:	2005      	movs	r0, #5
 8009fbe:	f002 fa6f 	bl	800c4a0 <LoRaMacConfirmQueueIsCmdActive>
 8009fc2:	b138      	cbz	r0, 8009fd4 <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009fc4:	4a06      	ldr	r2, [pc, #24]	; (8009fe0 <LoRaMacHandleMlmeRequest+0x5c>)
 8009fc6:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009fca:	f023 0302 	bic.w	r3, r3, #2
 8009fce:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8009fd2:	e7de      	b.n	8009f92 <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8009fd4:	2006      	movs	r0, #6
 8009fd6:	f002 fa63 	bl	800c4a0 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d0d9      	beq.n	8009f92 <LoRaMacHandleMlmeRequest+0xe>
 8009fde:	e7f1      	b.n	8009fc4 <LoRaMacHandleMlmeRequest+0x40>
 8009fe0:	200003f4 	.word	0x200003f4

08009fe4 <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 8009fe4:	4b14      	ldr	r3, [pc, #80]	; (800a038 <AckTimeoutRetriesFinalize+0x54>)
 8009fe6:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8009fea:	b12b      	cbz	r3, 8009ff8 <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009fec:	4b12      	ldr	r3, [pc, #72]	; (800a038 <AckTimeoutRetriesFinalize+0x54>)
 8009fee:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8009ff2:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8009ff6:	4770      	bx	lr
{
 8009ff8:	b500      	push	{lr}
 8009ffa:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800a002:	4b0e      	ldr	r3, [pc, #56]	; (800a03c <AckTimeoutRetriesFinalize+0x58>)
 800a004:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800a008:	9201      	str	r2, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800a00a:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 800a00e:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a010:	a901      	add	r1, sp, #4
 800a012:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a016:	f002 ffe5 	bl	800cfe4 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800a01a:	4b07      	ldr	r3, [pc, #28]	; (800a038 <AckTimeoutRetriesFinalize+0x54>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 800a022:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800a026:	4b04      	ldr	r3, [pc, #16]	; (800a038 <AckTimeoutRetriesFinalize+0x54>)
 800a028:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800a02c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 800a030:	b005      	add	sp, #20
 800a032:	f85d fb04 	ldr.w	pc, [sp], #4
 800a036:	bf00      	nop
 800a038:	200003f4 	.word	0x200003f4
 800a03c:	200008fc 	.word	0x200008fc

0800a040 <SerializeTxFrame>:
{
 800a040:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800a042:	4b0f      	ldr	r3, [pc, #60]	; (800a080 <SerializeTxFrame+0x40>)
 800a044:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a048:	b11b      	cbz	r3, 800a052 <SerializeTxFrame+0x12>
 800a04a:	2b04      	cmp	r3, #4
 800a04c:	d00a      	beq.n	800a064 <SerializeTxFrame+0x24>
 800a04e:	2003      	movs	r0, #3
}
 800a050:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800a052:	480c      	ldr	r0, [pc, #48]	; (800a084 <SerializeTxFrame+0x44>)
 800a054:	f002 fedd 	bl	800ce12 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800a058:	b968      	cbnz	r0, 800a076 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800a05a:	4b09      	ldr	r3, [pc, #36]	; (800a080 <SerializeTxFrame+0x40>)
 800a05c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a060:	801a      	strh	r2, [r3, #0]
            break;
 800a062:	e7f5      	b.n	800a050 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800a064:	4807      	ldr	r0, [pc, #28]	; (800a084 <SerializeTxFrame+0x44>)
 800a066:	f002 ff0a 	bl	800ce7e <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800a06a:	b930      	cbnz	r0, 800a07a <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800a06c:	4b04      	ldr	r3, [pc, #16]	; (800a080 <SerializeTxFrame+0x40>)
 800a06e:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a072:	801a      	strh	r2, [r3, #0]
            break;
 800a074:	e7ec      	b.n	800a050 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a076:	2011      	movs	r0, #17
 800a078:	e7ea      	b.n	800a050 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a07a:	2011      	movs	r0, #17
 800a07c:	e7e8      	b.n	800a050 <SerializeTxFrame+0x10>
 800a07e:	bf00      	nop
 800a080:	200003f4 	.word	0x200003f4
 800a084:	200004fc 	.word	0x200004fc

0800a088 <ComputeRxWindowParameters>:
{
 800a088:	b570      	push	{r4, r5, r6, lr}
 800a08a:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a08c:	4c1d      	ldr	r4, [pc, #116]	; (800a104 <ComputeRxWindowParameters+0x7c>)
 800a08e:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800a092:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 800a096:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800a09a:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 800a09e:	4630      	mov	r0, r6
 800a0a0:	f003 f8e4 	bl	800d26c <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a0a4:	4d18      	ldr	r5, [pc, #96]	; (800a108 <ComputeRxWindowParameters+0x80>)
 800a0a6:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a0ae:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800a0b2:	b241      	sxtb	r1, r0
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f002 ffe4 	bl	800d082 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a0ba:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a0c2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800a0c6:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 800a0ca:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a0ce:	f002 ffd8 	bl	800d082 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800a0d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a0d4:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800a0d8:	440b      	add	r3, r1
 800a0da:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800a0de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a0e0:	f8d5 23d8 	ldr.w	r2, [r5, #984]	; 0x3d8
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a0ea:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 800a0ee:	b93b      	cbnz	r3, 800a100 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800a0f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0f2:	4419      	add	r1, r3
 800a0f4:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800a0f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a0fa:	440a      	add	r2, r1
 800a0fc:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800a100:	b002      	add	sp, #8
 800a102:	bd70      	pop	{r4, r5, r6, pc}
 800a104:	200008fc 	.word	0x200008fc
 800a108:	200003f4 	.word	0x200003f4

0800a10c <VerifyTxFrame>:
{
 800a10c:	b510      	push	{r4, lr}
 800a10e:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a114:	4b0d      	ldr	r3, [pc, #52]	; (800a14c <VerifyTxFrame+0x40>)
 800a116:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 800a11a:	b914      	cbnz	r4, 800a122 <VerifyTxFrame+0x16>
}
 800a11c:	4620      	mov	r0, r4
 800a11e:	b002      	add	sp, #8
 800a120:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a122:	a801      	add	r0, sp, #4
 800a124:	f002 f86c 	bl	800c200 <LoRaMacCommandsGetSizeSerializedCmds>
 800a128:	4604      	mov	r4, r0
 800a12a:	b968      	cbnz	r0, 800a148 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800a12c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a130:	4b06      	ldr	r3, [pc, #24]	; (800a14c <VerifyTxFrame+0x40>)
 800a132:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800a136:	4b06      	ldr	r3, [pc, #24]	; (800a150 <VerifyTxFrame+0x44>)
 800a138:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800a13c:	f7fe ff4e 	bl	8008fdc <ValidatePayloadLength>
 800a140:	2800      	cmp	r0, #0
 800a142:	d1eb      	bne.n	800a11c <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800a144:	2408      	movs	r4, #8
 800a146:	e7e9      	b.n	800a11c <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a148:	2413      	movs	r4, #19
 800a14a:	e7e7      	b.n	800a11c <VerifyTxFrame+0x10>
 800a14c:	200008fc 	.word	0x200008fc
 800a150:	200003f4 	.word	0x200003f4

0800a154 <SecureFrame>:
{
 800a154:	b530      	push	{r4, r5, lr}
 800a156:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800a158:	2300      	movs	r3, #0
 800a15a:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800a15c:	4b1a      	ldr	r3, [pc, #104]	; (800a1c8 <SecureFrame+0x74>)
 800a15e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a162:	b133      	cbz	r3, 800a172 <SecureFrame+0x1e>
 800a164:	4605      	mov	r5, r0
 800a166:	460c      	mov	r4, r1
 800a168:	2b04      	cmp	r3, #4
 800a16a:	d00b      	beq.n	800a184 <SecureFrame+0x30>
 800a16c:	2003      	movs	r0, #3
}
 800a16e:	b003      	add	sp, #12
 800a170:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800a172:	4816      	ldr	r0, [pc, #88]	; (800a1cc <SecureFrame+0x78>)
 800a174:	f002 fc0e 	bl	800c994 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800a178:	bb00      	cbnz	r0, 800a1bc <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800a17a:	4b13      	ldr	r3, [pc, #76]	; (800a1c8 <SecureFrame+0x74>)
 800a17c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a180:	801a      	strh	r2, [r3, #0]
            break;
 800a182:	e7f4      	b.n	800a16e <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a184:	a801      	add	r0, sp, #4
 800a186:	f002 fba1 	bl	800c8cc <LoRaMacCryptoGetFCntUp>
 800a18a:	b9c8      	cbnz	r0, 800a1c0 <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800a18c:	4b0e      	ldr	r3, [pc, #56]	; (800a1c8 <SecureFrame+0x74>)
 800a18e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800a192:	b923      	cbnz	r3, 800a19e <SecureFrame+0x4a>
 800a194:	4b0c      	ldr	r3, [pc, #48]	; (800a1c8 <SecureFrame+0x74>)
 800a196:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d902      	bls.n	800a1a4 <SecureFrame+0x50>
                fCntUp -= 1;
 800a19e:	9b01      	ldr	r3, [sp, #4]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800a1a4:	4b09      	ldr	r3, [pc, #36]	; (800a1cc <SecureFrame+0x78>)
 800a1a6:	4622      	mov	r2, r4
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	9801      	ldr	r0, [sp, #4]
 800a1ac:	f002 fc1e 	bl	800c9ec <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800a1b0:	b940      	cbnz	r0, 800a1c4 <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800a1b2:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <SecureFrame+0x74>)
 800a1b4:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a1b8:	801a      	strh	r2, [r3, #0]
            break;
 800a1ba:	e7d8      	b.n	800a16e <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a1bc:	2011      	movs	r0, #17
 800a1be:	e7d6      	b.n	800a16e <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800a1c0:	2012      	movs	r0, #18
 800a1c2:	e7d4      	b.n	800a16e <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a1c4:	2011      	movs	r0, #17
 800a1c6:	e7d2      	b.n	800a16e <SecureFrame+0x1a>
 800a1c8:	200003f4 	.word	0x200003f4
 800a1cc:	200004fc 	.word	0x200004fc

0800a1d0 <SendFrameOnChannel>:
{
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800a1dc:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a1e0:	4d33      	ldr	r5, [pc, #204]	; (800a2b0 <SendFrameOnChannel+0xe0>)
 800a1e2:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800a1e6:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a1ea:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800a1ee:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800a1f2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800a1f4:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a1f6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800a1f8:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800a1fa:	4c2e      	ldr	r4, [pc, #184]	; (800a2b4 <SendFrameOnChannel+0xe4>)
 800a1fc:	8823      	ldrh	r3, [r4, #0]
 800a1fe:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800a202:	f504 6383 	add.w	r3, r4, #1048	; 0x418
 800a206:	f10d 0207 	add.w	r2, sp, #7
 800a20a:	a902      	add	r1, sp, #8
 800a20c:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800a210:	f002 ff64 	bl	800d0dc <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a21a:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800a21e:	f884 343a 	strb.w	r3, [r4, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 800a222:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a226:	f884 343b 	strb.w	r3, [r4, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 800a22a:	f8c4 6448 	str.w	r6, [r4, #1096]	; 0x448
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800a22e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
 800a232:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800a236:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800a23a:	f001 fec7 	bl	800bfcc <LoRaMacClassBIsBeaconModeActive>
 800a23e:	bb58      	cbnz	r0, 800a298 <SendFrameOnChannel+0xc8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a240:	4b1b      	ldr	r3, [pc, #108]	; (800a2b0 <SendFrameOnChannel+0xe0>)
 800a242:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800a246:	2b01      	cmp	r3, #1
 800a248:	d02e      	beq.n	800a2a8 <SendFrameOnChannel+0xd8>
    LoRaMacClassBHaltBeaconing( );
 800a24a:	f001 fec2 	bl	800bfd2 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800a24e:	4b18      	ldr	r3, [pc, #96]	; (800a2b0 <SendFrameOnChannel+0xe0>)
 800a250:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800a254:	4b17      	ldr	r3, [pc, #92]	; (800a2b4 <SendFrameOnChannel+0xe4>)
 800a256:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
 800a25a:	b2c0      	uxtb	r0, r0
 800a25c:	f7ff ff7a 	bl	800a154 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800a260:	4604      	mov	r4, r0
 800a262:	b9b0      	cbnz	r0, 800a292 <SendFrameOnChannel+0xc2>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800a264:	4b13      	ldr	r3, [pc, #76]	; (800a2b4 <SendFrameOnChannel+0xe4>)
 800a266:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800a26a:	f042 0202 	orr.w	r2, r2, #2
 800a26e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800a272:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a276:	b92b      	cbnz	r3, 800a284 <SendFrameOnChannel+0xb4>
        MacCtx.ChannelsNbTransCounter++;
 800a278:	4a0e      	ldr	r2, [pc, #56]	; (800a2b4 <SendFrameOnChannel+0xe4>)
 800a27a:	f892 3410 	ldrb.w	r3, [r2, #1040]	; 0x410
 800a27e:	3301      	adds	r3, #1
 800a280:	f882 3410 	strb.w	r3, [r2, #1040]	; 0x410
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800a284:	4b0c      	ldr	r3, [pc, #48]	; (800a2b8 <SendFrameOnChannel+0xe8>)
 800a286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a288:	480a      	ldr	r0, [pc, #40]	; (800a2b4 <SendFrameOnChannel+0xe4>)
 800a28a:	f830 1b02 	ldrh.w	r1, [r0], #2
 800a28e:	b2c9      	uxtb	r1, r1
 800a290:	4798      	blx	r3
}
 800a292:	4620      	mov	r0, r4
 800a294:	b006      	add	sp, #24
 800a296:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800a298:	f8d4 0418 	ldr.w	r0, [r4, #1048]	; 0x418
 800a29c:	f001 fea8 	bl	800bff0 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d0cd      	beq.n	800a240 <SendFrameOnChannel+0x70>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800a2a4:	2410      	movs	r4, #16
 800a2a6:	e7f4      	b.n	800a292 <SendFrameOnChannel+0xc2>
        LoRaMacClassBStopRxSlots( );
 800a2a8:	f001 fea4 	bl	800bff4 <LoRaMacClassBStopRxSlots>
 800a2ac:	e7cd      	b.n	800a24a <SendFrameOnChannel+0x7a>
 800a2ae:	bf00      	nop
 800a2b0:	200008fc 	.word	0x200008fc
 800a2b4:	200003f4 	.word	0x200003f4
 800a2b8:	08014674 	.word	0x08014674

0800a2bc <ScheduleTx>:
{
 800a2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c0:	b08c      	sub	sp, #48	; 0x30
 800a2c2:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800a2c4:	f7ff fd92 	bl	8009dec <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	b118      	cbz	r0, 800a2d4 <ScheduleTx+0x18>
}
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	b00c      	add	sp, #48	; 0x30
 800a2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800a2d4:	f7fe fd66 	bl	8008da4 <CalculateBackOff>
    status = SerializeTxFrame( );
 800a2d8:	f7ff feb2 	bl	800a040 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800a2dc:	4604      	mov	r4, r0
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d1f4      	bne.n	800a2cc <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800a2e2:	4e36      	ldr	r6, [pc, #216]	; (800a3bc <ScheduleTx+0x100>)
 800a2e4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800a2e6:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a2e8:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800a2ec:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800a2f0:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
 800a2f4:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800a2f8:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800a2fc:	4640      	mov	r0, r8
 800a2fe:	f009 f84f 	bl	80133a0 <SysTimeGetMcuTime>
 800a302:	af02      	add	r7, sp, #8
 800a304:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
 800a30e:	e898 0006 	ldmia.w	r8, {r1, r2}
 800a312:	4638      	mov	r0, r7
 800a314:	f008 ffe5 	bl	80132e2 <SysTimeSub>
 800a318:	ab07      	add	r3, sp, #28
 800a31a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a31e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800a322:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800a324:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800a326:	2300      	movs	r3, #0
 800a328:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800a32c:	2301      	movs	r3, #1
 800a32e:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800a332:	4b23      	ldr	r3, [pc, #140]	; (800a3c0 <ScheduleTx+0x104>)
 800a334:	881b      	ldrh	r3, [r3, #0]
 800a336:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a33a:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 800a33e:	b92b      	cbnz	r3, 800a34c <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800a340:	2301      	movs	r3, #1
 800a342:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800a346:	2300      	movs	r3, #0
 800a348:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800a34c:	4a1c      	ldr	r2, [pc, #112]	; (800a3c0 <ScheduleTx+0x104>)
 800a34e:	481b      	ldr	r0, [pc, #108]	; (800a3bc <ScheduleTx+0x100>)
 800a350:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	f202 4384 	addw	r3, r2, #1156	; 0x484
 800a35a:	f202 4215 	addw	r2, r2, #1045	; 0x415
 800a35e:	a904      	add	r1, sp, #16
 800a360:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800a364:	f002 ff56 	bl	800d214 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800a368:	b1b0      	cbz	r0, 800a398 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800a36a:	280b      	cmp	r0, #11
 800a36c:	d122      	bne.n	800a3b4 <ScheduleTx+0xf8>
 800a36e:	b31d      	cbz	r5, 800a3b8 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800a370:	4b13      	ldr	r3, [pc, #76]	; (800a3c0 <ScheduleTx+0x104>)
 800a372:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
 800a376:	2900      	cmp	r1, #0
 800a378:	d0a8      	beq.n	800a2cc <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800a37a:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800a37e:	f042 0220 	orr.w	r2, r2, #32
 800a382:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800a386:	f503 755a 	add.w	r5, r3, #872	; 0x368
 800a38a:	4628      	mov	r0, r5
 800a38c:	f009 f97a 	bl	8013684 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800a390:	4628      	mov	r0, r5
 800a392:	f009 f931 	bl	80135f8 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800a396:	e799      	b.n	800a2cc <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800a398:	f7ff fe76 	bl	800a088 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800a39c:	f7ff feb6 	bl	800a10c <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d192      	bne.n	800a2cc <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800a3a6:	4b06      	ldr	r3, [pc, #24]	; (800a3c0 <ScheduleTx+0x104>)
 800a3a8:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 800a3ac:	f7ff ff10 	bl	800a1d0 <SendFrameOnChannel>
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	e78b      	b.n	800a2cc <ScheduleTx+0x10>
            return status;
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	e789      	b.n	800a2cc <ScheduleTx+0x10>
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	e787      	b.n	800a2cc <ScheduleTx+0x10>
 800a3bc:	200008fc 	.word	0x200008fc
 800a3c0:	200003f4 	.word	0x200003f4

0800a3c4 <OnTxDelayedTimerEvent>:
{
 800a3c4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800a3c6:	4c11      	ldr	r4, [pc, #68]	; (800a40c <OnTxDelayedTimerEvent+0x48>)
 800a3c8:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a3cc:	f009 f8b2 	bl	8013534 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a3d0:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800a3d4:	f023 0320 	bic.w	r3, r3, #32
 800a3d8:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 800a3dc:	2001      	movs	r0, #1
 800a3de:	f7ff ff6d 	bl	800a2bc <ScheduleTx>
 800a3e2:	b108      	cbz	r0, 800a3e8 <OnTxDelayedTimerEvent+0x24>
 800a3e4:	280b      	cmp	r0, #11
 800a3e6:	d100      	bne.n	800a3ea <OnTxDelayedTimerEvent+0x26>
}
 800a3e8:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a3ea:	4b09      	ldr	r3, [pc, #36]	; (800a410 <OnTxDelayedTimerEvent+0x4c>)
 800a3ec:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800a3f0:	f884 243a 	strb.w	r2, [r4, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800a3f4:	f894 2412 	ldrb.w	r2, [r4, #1042]	; 0x412
 800a3f8:	f884 243d 	strb.w	r2, [r4, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800a3fc:	2009      	movs	r0, #9
 800a3fe:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800a402:	f002 f82f 	bl	800c464 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800a406:	f7fe fd5f 	bl	8008ec8 <StopRetransmission>
}
 800a40a:	e7ed      	b.n	800a3e8 <OnTxDelayedTimerEvent+0x24>
 800a40c:	200003f4 	.word	0x200003f4
 800a410:	200008fc 	.word	0x200008fc

0800a414 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a414:	4b23      	ldr	r3, [pc, #140]	; (800a4a4 <LoRaMacHandleMcpsRequest+0x90>)
 800a416:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800a41a:	f013 0f01 	tst.w	r3, #1
 800a41e:	d040      	beq.n	800a4a2 <LoRaMacHandleMcpsRequest+0x8e>
{
 800a420:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800a422:	4b20      	ldr	r3, [pc, #128]	; (800a4a4 <LoRaMacHandleMcpsRequest+0x90>)
 800a424:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800a428:	b12b      	cbz	r3, 800a436 <LoRaMacHandleMcpsRequest+0x22>
 800a42a:	2b03      	cmp	r3, #3
 800a42c:	d003      	beq.n	800a436 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d007      	beq.n	800a442 <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 800a432:	2400      	movs	r4, #0
 800a434:	e003      	b.n	800a43e <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800a436:	f7fe fd0b 	bl	8008e50 <CheckRetransUnconfirmedUplink>
 800a43a:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 800a43c:	b9a4      	cbnz	r4, 800a468 <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 800a43e:	b31c      	cbz	r4, 800a488 <LoRaMacHandleMcpsRequest+0x74>
}
 800a440:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 800a442:	4b18      	ldr	r3, [pc, #96]	; (800a4a4 <LoRaMacHandleMcpsRequest+0x90>)
 800a444:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800a448:	b1e3      	cbz	r3, 800a484 <LoRaMacHandleMcpsRequest+0x70>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800a44a:	f7fe fd25 	bl	8008e98 <CheckRetransConfirmedUplink>
 800a44e:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800a450:	4b15      	ldr	r3, [pc, #84]	; (800a4a8 <LoRaMacHandleMcpsRequest+0x94>)
 800a452:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1f0      	bne.n	800a43c <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 800a45a:	b910      	cbnz	r0, 800a462 <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 800a45c:	f7fe fd74 	bl	8008f48 <AckTimeoutRetriesProcess>
 800a460:	e7ec      	b.n	800a43c <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 800a462:	f7ff fdbf 	bl	8009fe4 <AckTimeoutRetriesFinalize>
 800a466:	e7e9      	b.n	800a43c <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 800a468:	4c0e      	ldr	r4, [pc, #56]	; (800a4a4 <LoRaMacHandleMcpsRequest+0x90>)
 800a46a:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a46e:	f009 f861 	bl	8013534 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a472:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800a476:	f023 0320 	bic.w	r3, r3, #32
 800a47a:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800a47e:	f7fe fd23 	bl	8008ec8 <StopRetransmission>
 800a482:	e7dd      	b.n	800a440 <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 800a484:	2401      	movs	r4, #1
 800a486:	e7da      	b.n	800a43e <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a488:	4b06      	ldr	r3, [pc, #24]	; (800a4a4 <LoRaMacHandleMcpsRequest+0x90>)
 800a48a:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800a48e:	f36f 1245 	bfc	r2, #5, #1
 800a492:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800a496:	2000      	movs	r0, #0
 800a498:	f883 0413 	strb.w	r0, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800a49c:	f7ff ff92 	bl	800a3c4 <OnTxDelayedTimerEvent>
}
 800a4a0:	e7ce      	b.n	800a440 <LoRaMacHandleMcpsRequest+0x2c>
 800a4a2:	4770      	bx	lr
 800a4a4:	200003f4 	.word	0x200003f4
 800a4a8:	200008fc 	.word	0x200008fc

0800a4ac <LoRaMacHandleRequestEvents>:
{
 800a4ac:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a4ae:	4b22      	ldr	r3, [pc, #136]	; (800a538 <LoRaMacHandleRequestEvents+0x8c>)
 800a4b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a4b4:	bb7b      	cbnz	r3, 800a516 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a4b6:	4b20      	ldr	r3, [pc, #128]	; (800a538 <LoRaMacHandleRequestEvents+0x8c>)
 800a4b8:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
 800a4bc:	f014 0501 	ands.w	r5, r4, #1
 800a4c0:	d005      	beq.n	800a4ce <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800a4c2:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800a4c6:	f36f 0200 	bfc	r2, #0, #1
 800a4ca:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a4ce:	4b1a      	ldr	r3, [pc, #104]	; (800a538 <LoRaMacHandleRequestEvents+0x8c>)
 800a4d0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800a4d4:	f013 0f04 	tst.w	r3, #4
 800a4d8:	d006      	beq.n	800a4e8 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a4da:	4b17      	ldr	r3, [pc, #92]	; (800a538 <LoRaMacHandleRequestEvents+0x8c>)
 800a4dc:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800a4e0:	f36f 0282 	bfc	r2, #2, #1
 800a4e4:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a4e8:	2001      	movs	r0, #1
 800a4ea:	f7fe fbf3 	bl	8008cd4 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800a4ee:	b135      	cbz	r5, 800a4fe <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800a4f0:	4811      	ldr	r0, [pc, #68]	; (800a538 <LoRaMacHandleRequestEvents+0x8c>)
 800a4f2:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f500 6087 	add.w	r0, r0, #1080	; 0x438
 800a4fc:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800a4fe:	f014 0f04 	tst.w	r4, #4
 800a502:	d109      	bne.n	800a518 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800a504:	f001 fd66 	bl	800bfd4 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800a508:	4b0b      	ldr	r3, [pc, #44]	; (800a538 <LoRaMacHandleRequestEvents+0x8c>)
 800a50a:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800a50e:	f36f 1245 	bfc	r2, #5, #1
 800a512:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
}
 800a516:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800a518:	4808      	ldr	r0, [pc, #32]	; (800a53c <LoRaMacHandleRequestEvents+0x90>)
 800a51a:	f001 ffcd 	bl	800c4b8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800a51e:	f001 fffd 	bl	800c51c <LoRaMacConfirmQueueGetCnt>
 800a522:	2800      	cmp	r0, #0
 800a524:	d0ee      	beq.n	800a504 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a526:	4a04      	ldr	r2, [pc, #16]	; (800a538 <LoRaMacHandleRequestEvents+0x8c>)
 800a528:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800a52c:	f043 0304 	orr.w	r3, r3, #4
 800a530:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800a534:	e7e6      	b.n	800a504 <LoRaMacHandleRequestEvents+0x58>
 800a536:	bf00      	nop
 800a538:	200003f4 	.word	0x200003f4
 800a53c:	20000840 	.word	0x20000840

0800a540 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a540:	4b0a      	ldr	r3, [pc, #40]	; (800a56c <LoRaMacHandleScheduleUplinkEvent+0x2c>)
 800a542:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a546:	b103      	cbz	r3, 800a54a <LoRaMacHandleScheduleUplinkEvent+0xa>
 800a548:	4770      	bx	lr
{
 800a54a:	b500      	push	{lr}
 800a54c:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 800a54e:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800a552:	f10d 0007 	add.w	r0, sp, #7
 800a556:	f001 fe91 	bl	800c27c <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800a55a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a55e:	b913      	cbnz	r3, 800a566 <LoRaMacHandleScheduleUplinkEvent+0x26>
}
 800a560:	b003      	add	sp, #12
 800a562:	f85d fb04 	ldr.w	pc, [sp], #4
            SetMlmeScheduleUplinkIndication( );
 800a566:	f7fe fc13 	bl	8008d90 <SetMlmeScheduleUplinkIndication>
}
 800a56a:	e7f9      	b.n	800a560 <LoRaMacHandleScheduleUplinkEvent+0x20>
 800a56c:	200003f4 	.word	0x200003f4

0800a570 <LoRaMacHandleNvm>:
{
 800a570:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800a572:	4b30      	ldr	r3, [pc, #192]	; (800a634 <LoRaMacHandleNvm+0xc4>)
 800a574:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a578:	b103      	cbz	r3, 800a57c <LoRaMacHandleNvm+0xc>
}
 800a57a:	bd38      	pop	{r3, r4, r5, pc}
 800a57c:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800a57e:	2124      	movs	r1, #36	; 0x24
 800a580:	f006 fb34 	bl	8010bec <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800a584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a586:	4283      	cmp	r3, r0
 800a588:	d052      	beq.n	800a630 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800a58a:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800a58c:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800a58e:	2114      	movs	r1, #20
 800a590:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a594:	f006 fb2a 	bl	8010bec <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800a598:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a59a:	4283      	cmp	r3, r0
 800a59c:	d002      	beq.n	800a5a4 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800a59e:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800a5a0:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800a5a4:	21d4      	movs	r1, #212	; 0xd4
 800a5a6:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800a5aa:	f006 fb1f 	bl	8010bec <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800a5ae:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800a5b2:	4283      	cmp	r3, r0
 800a5b4:	d003      	beq.n	800a5be <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800a5b6:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800a5ba:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800a5be:	21bc      	movs	r1, #188	; 0xbc
 800a5c0:	f504 708c 	add.w	r0, r4, #280	; 0x118
 800a5c4:	f006 fb12 	bl	8010bec <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800a5c8:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800a5cc:	4283      	cmp	r3, r0
 800a5ce:	d003      	beq.n	800a5d8 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 800a5d0:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800a5d4:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800a5d8:	21a0      	movs	r1, #160	; 0xa0
 800a5da:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
 800a5de:	f006 fb05 	bl	8010bec <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800a5e2:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 800a5e6:	4283      	cmp	r3, r0
 800a5e8:	d003      	beq.n	800a5f2 <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800a5ea:	f8c4 0278 	str.w	r0, [r4, #632]	; 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800a5ee:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800a5f2:	f44f 715e 	mov.w	r1, #888	; 0x378
 800a5f6:	f504 701f 	add.w	r0, r4, #636	; 0x27c
 800a5fa:	f006 faf7 	bl	8010bec <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800a5fe:	f8d4 35f4 	ldr.w	r3, [r4, #1524]	; 0x5f4
 800a602:	4283      	cmp	r3, r0
 800a604:	d003      	beq.n	800a60e <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 800a606:	f8c4 05f4 	str.w	r0, [r4, #1524]	; 0x5f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800a60a:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800a60e:	2114      	movs	r1, #20
 800a610:	f504 60bf 	add.w	r0, r4, #1528	; 0x5f8
 800a614:	f006 faea 	bl	8010bec <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800a618:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 800a61c:	4283      	cmp	r3, r0
 800a61e:	d003      	beq.n	800a628 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 800a620:	f8c4 060c 	str.w	r0, [r4, #1548]	; 0x60c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800a624:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800a628:	4628      	mov	r0, r5
 800a62a:	f7fe fc75 	bl	8008f18 <CallNvmDataChangeCallback>
 800a62e:	e7a4      	b.n	800a57a <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800a630:	2500      	movs	r5, #0
 800a632:	e7ac      	b.n	800a58e <LoRaMacHandleNvm+0x1e>
 800a634:	200003f4 	.word	0x200003f4

0800a638 <RestoreNvmData>:
    if( nvm == NULL )
 800a638:	2800      	cmp	r0, #0
 800a63a:	d07a      	beq.n	800a732 <RestoreNvmData+0xfa>
{
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	4604      	mov	r4, r0
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800a640:	4b3d      	ldr	r3, [pc, #244]	; (800a738 <RestoreNvmData+0x100>)
 800a642:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a646:	2b01      	cmp	r3, #1
 800a648:	d001      	beq.n	800a64e <RestoreNvmData+0x16>
        return LORAMAC_STATUS_BUSY;
 800a64a:	2001      	movs	r0, #1
}
 800a64c:	bd70      	pop	{r4, r5, r6, pc}
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 800a64e:	2124      	movs	r1, #36	; 0x24
 800a650:	f006 facc 	bl	8010bec <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 800a654:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a656:	4283      	cmp	r3, r0
 800a658:	d032      	beq.n	800a6c0 <RestoreNvmData+0x88>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 800a65a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800a65e:	2114      	movs	r1, #20
 800a660:	4628      	mov	r0, r5
 800a662:	f006 fac3 	bl	8010bec <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 800a666:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a668:	4283      	cmp	r3, r0
 800a66a:	d02f      	beq.n	800a6cc <RestoreNvmData+0x94>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 800a66c:	f104 0540 	add.w	r5, r4, #64	; 0x40
 800a670:	21d4      	movs	r1, #212	; 0xd4
 800a672:	4628      	mov	r0, r5
 800a674:	f006 faba 	bl	8010bec <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 800a678:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800a67c:	4283      	cmp	r3, r0
 800a67e:	d02b      	beq.n	800a6d8 <RestoreNvmData+0xa0>
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 800a680:	f504 758c 	add.w	r5, r4, #280	; 0x118
 800a684:	21bc      	movs	r1, #188	; 0xbc
 800a686:	4628      	mov	r0, r5
 800a688:	f006 fab0 	bl	8010bec <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 800a68c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800a690:	4283      	cmp	r3, r0
 800a692:	d03b      	beq.n	800a70c <RestoreNvmData+0xd4>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 800a694:	f504 75ec 	add.w	r5, r4, #472	; 0x1d8
 800a698:	21a0      	movs	r1, #160	; 0xa0
 800a69a:	4628      	mov	r0, r5
 800a69c:	f006 faa6 	bl	8010bec <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 800a6a0:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 800a6a4:	4283      	cmp	r3, r0
 800a6a6:	d037      	beq.n	800a718 <RestoreNvmData+0xe0>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 800a6a8:	f504 65bf 	add.w	r5, r4, #1528	; 0x5f8
 800a6ac:	2114      	movs	r1, #20
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f006 fa9c 	bl	8010bec <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 800a6b4:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 800a6b8:	4283      	cmp	r3, r0
 800a6ba:	d033      	beq.n	800a724 <RestoreNvmData+0xec>
    return LORAMAC_STATUS_OK;
 800a6bc:	2000      	movs	r0, #0
 800a6be:	e7c5      	b.n	800a64c <RestoreNvmData+0x14>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 800a6c0:	2228      	movs	r2, #40	; 0x28
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	481d      	ldr	r0, [pc, #116]	; (800a73c <RestoreNvmData+0x104>)
 800a6c6:	f006 fa72 	bl	8010bae <memcpy1>
 800a6ca:	e7c6      	b.n	800a65a <RestoreNvmData+0x22>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 800a6cc:	2218      	movs	r2, #24
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	481b      	ldr	r0, [pc, #108]	; (800a740 <RestoreNvmData+0x108>)
 800a6d2:	f006 fa6c 	bl	8010bae <memcpy1>
 800a6d6:	e7c9      	b.n	800a66c <RestoreNvmData+0x34>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 800a6d8:	4e18      	ldr	r6, [pc, #96]	; (800a73c <RestoreNvmData+0x104>)
 800a6da:	22d8      	movs	r2, #216	; 0xd8
 800a6dc:	4629      	mov	r1, r5
 800a6de:	f106 0040 	add.w	r0, r6, #64	; 0x40
 800a6e2:	f006 fa64 	bl	8010bae <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800a6e6:	4b14      	ldr	r3, [pc, #80]	; (800a738 <RestoreNvmData+0x100>)
 800a6e8:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800a6ec:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800a6f0:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 800a6f2:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a6f6:	f896 2075 	ldrb.w	r2, [r6, #117]	; 0x75
 800a6fa:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 800a6fe:	2201      	movs	r2, #1
 800a700:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a704:	2202      	movs	r2, #2
 800a706:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 800a70a:	e7b9      	b.n	800a680 <RestoreNvmData+0x48>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 800a70c:	22c0      	movs	r2, #192	; 0xc0
 800a70e:	4629      	mov	r1, r5
 800a710:	480c      	ldr	r0, [pc, #48]	; (800a744 <RestoreNvmData+0x10c>)
 800a712:	f006 fa4c 	bl	8010bae <memcpy1>
 800a716:	e7bd      	b.n	800a694 <RestoreNvmData+0x5c>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 800a718:	22a4      	movs	r2, #164	; 0xa4
 800a71a:	4629      	mov	r1, r5
 800a71c:	480a      	ldr	r0, [pc, #40]	; (800a748 <RestoreNvmData+0x110>)
 800a71e:	f006 fa46 	bl	8010bae <memcpy1>
 800a722:	e7c1      	b.n	800a6a8 <RestoreNvmData+0x70>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 800a724:	2218      	movs	r2, #24
 800a726:	4629      	mov	r1, r5
 800a728:	4808      	ldr	r0, [pc, #32]	; (800a74c <RestoreNvmData+0x114>)
 800a72a:	f006 fa40 	bl	8010bae <memcpy1>
    return LORAMAC_STATUS_OK;
 800a72e:	2000      	movs	r0, #0
 800a730:	e78c      	b.n	800a64c <RestoreNvmData+0x14>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a732:	2003      	movs	r0, #3
}
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	200003f4 	.word	0x200003f4
 800a73c:	200008fc 	.word	0x200008fc
 800a740:	20000924 	.word	0x20000924
 800a744:	20000a14 	.word	0x20000a14
 800a748:	20000ad4 	.word	0x20000ad4
 800a74c:	20000ef4 	.word	0x20000ef4

0800a750 <OpenContinuousRxCWindow>:
{
 800a750:	b570      	push	{r4, r5, r6, lr}
 800a752:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800a754:	4c12      	ldr	r4, [pc, #72]	; (800a7a0 <OpenContinuousRxCWindow+0x50>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a756:	4d13      	ldr	r5, [pc, #76]	; (800a7a4 <OpenContinuousRxCWindow+0x54>)
 800a758:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 800a75c:	9600      	str	r6, [sp, #0]
 800a75e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a760:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800a764:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800a768:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a76c:	f002 fc89 	bl	800d082 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a770:	2302      	movs	r3, #2
 800a772:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800a776:	2301      	movs	r3, #1
 800a778:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800a77c:	f505 6284 	add.w	r2, r5, #1056	; 0x420
 800a780:	4631      	mov	r1, r6
 800a782:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a786:	f002 fc94 	bl	800d0b2 <RegionRxConfig>
 800a78a:	b138      	cbz	r0, 800a79c <OpenContinuousRxCWindow+0x4c>
        Radio.Rx( 0 ); // Continuous mode
 800a78c:	4b06      	ldr	r3, [pc, #24]	; (800a7a8 <OpenContinuousRxCWindow+0x58>)
 800a78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a790:	2000      	movs	r0, #0
 800a792:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800a794:	f895 23f3 	ldrb.w	r2, [r5, #1011]	; 0x3f3
 800a798:	f885 2480 	strb.w	r2, [r5, #1152]	; 0x480
}
 800a79c:	b002      	add	sp, #8
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
 800a7a0:	200008fc 	.word	0x200008fc
 800a7a4:	200003f4 	.word	0x200003f4
 800a7a8:	08014674 	.word	0x08014674

0800a7ac <RxWindowSetup>:
{
 800a7ac:	b510      	push	{r4, lr}
 800a7ae:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800a7b0:	f008 fec0 	bl	8013534 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800a7b4:	4b0a      	ldr	r3, [pc, #40]	; (800a7e0 <RxWindowSetup+0x34>)
 800a7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b8:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800a7ba:	4a0a      	ldr	r2, [pc, #40]	; (800a7e4 <RxWindowSetup+0x38>)
 800a7bc:	4621      	mov	r1, r4
 800a7be:	4b0a      	ldr	r3, [pc, #40]	; (800a7e8 <RxWindowSetup+0x3c>)
 800a7c0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a7c4:	f002 fc75 	bl	800d0b2 <RegionRxConfig>
 800a7c8:	b140      	cbz	r0, 800a7dc <RxWindowSetup+0x30>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800a7ca:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <RxWindowSetup+0x34>)
 800a7cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ce:	4a06      	ldr	r2, [pc, #24]	; (800a7e8 <RxWindowSetup+0x3c>)
 800a7d0:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800a7d2:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800a7d4:	7ce2      	ldrb	r2, [r4, #19]
 800a7d6:	4b05      	ldr	r3, [pc, #20]	; (800a7ec <RxWindowSetup+0x40>)
 800a7d8:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800a7dc:	bd10      	pop	{r4, pc}
 800a7de:	bf00      	nop
 800a7e0:	08014674 	.word	0x08014674
 800a7e4:	20000814 	.word	0x20000814
 800a7e8:	200008fc 	.word	0x200008fc
 800a7ec:	200003f4 	.word	0x200003f4

0800a7f0 <OnRxWindow2TimerEvent>:
{
 800a7f0:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800a7f2:	4b11      	ldr	r3, [pc, #68]	; (800a838 <OnRxWindow2TimerEvent+0x48>)
 800a7f4:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800a7f8:	b903      	cbnz	r3, 800a7fc <OnRxWindow2TimerEvent+0xc>
}
 800a7fa:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800a7fc:	480e      	ldr	r0, [pc, #56]	; (800a838 <OnRxWindow2TimerEvent+0x48>)
 800a7fe:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 800a802:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800a806:	4b0d      	ldr	r3, [pc, #52]	; (800a83c <OnRxWindow2TimerEvent+0x4c>)
 800a808:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a80a:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a80e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a812:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800a816:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a81a:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800a81e:	2300      	movs	r3, #0
 800a820:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800a824:	2301      	movs	r3, #1
 800a826:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800a82a:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 800a82e:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800a832:	f7ff ffbb 	bl	800a7ac <RxWindowSetup>
 800a836:	e7e0      	b.n	800a7fa <OnRxWindow2TimerEvent+0xa>
 800a838:	200003f4 	.word	0x200003f4
 800a83c:	200008fc 	.word	0x200008fc

0800a840 <OnRxWindow1TimerEvent>:
{
 800a840:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800a842:	480f      	ldr	r0, [pc, #60]	; (800a880 <OnRxWindow1TimerEvent+0x40>)
 800a844:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 800a848:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800a84c:	4b0d      	ldr	r3, [pc, #52]	; (800a884 <OnRxWindow1TimerEvent+0x44>)
 800a84e:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 800a852:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a856:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a85a:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800a85e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a862:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800a866:	2300      	movs	r3, #0
 800a868:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800a86c:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800a870:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800a874:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800a878:	f7ff ff98 	bl	800a7ac <RxWindowSetup>
}
 800a87c:	bd08      	pop	{r3, pc}
 800a87e:	bf00      	nop
 800a880:	200003f4 	.word	0x200003f4
 800a884:	200008fc 	.word	0x200008fc

0800a888 <OnRadioRxTimeout>:
{
 800a888:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800a88a:	4a09      	ldr	r2, [pc, #36]	; (800a8b0 <OnRadioRxTimeout+0x28>)
 800a88c:	7813      	ldrb	r3, [r2, #0]
 800a88e:	f043 0301 	orr.w	r3, r3, #1
 800a892:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a894:	4b07      	ldr	r3, [pc, #28]	; (800a8b4 <OnRadioRxTimeout+0x2c>)
 800a896:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800a89a:	b113      	cbz	r3, 800a8a2 <OnRadioRxTimeout+0x1a>
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	b103      	cbz	r3, 800a8a2 <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a8a0:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800a8a2:	4b05      	ldr	r3, [pc, #20]	; (800a8b8 <OnRadioRxTimeout+0x30>)
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	2002      	movs	r0, #2
 800a8aa:	f008 fb09 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
}
 800a8ae:	bd08      	pop	{r3, pc}
 800a8b0:	200003f0 	.word	0x200003f0
 800a8b4:	200003f4 	.word	0x200003f4
 800a8b8:	0801413c 	.word	0x0801413c

0800a8bc <OnRadioTxTimeout>:
{
 800a8bc:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800a8be:	4a09      	ldr	r2, [pc, #36]	; (800a8e4 <OnRadioTxTimeout+0x28>)
 800a8c0:	7813      	ldrb	r3, [r2, #0]
 800a8c2:	f043 0304 	orr.w	r3, r3, #4
 800a8c6:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a8c8:	4b07      	ldr	r3, [pc, #28]	; (800a8e8 <OnRadioTxTimeout+0x2c>)
 800a8ca:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800a8ce:	b113      	cbz	r3, 800a8d6 <OnRadioTxTimeout+0x1a>
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	b103      	cbz	r3, 800a8d6 <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a8d4:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800a8d6:	4b05      	ldr	r3, [pc, #20]	; (800a8ec <OnRadioTxTimeout+0x30>)
 800a8d8:	2201      	movs	r2, #1
 800a8da:	2100      	movs	r1, #0
 800a8dc:	2002      	movs	r0, #2
 800a8de:	f008 faef 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
}
 800a8e2:	bd08      	pop	{r3, pc}
 800a8e4:	200003f0 	.word	0x200003f0
 800a8e8:	200003f4 	.word	0x200003f4
 800a8ec:	0801414c 	.word	0x0801414c

0800a8f0 <OnRadioRxDone>:
{
 800a8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f4:	4680      	mov	r8, r0
 800a8f6:	460f      	mov	r7, r1
 800a8f8:	4616      	mov	r6, r2
 800a8fa:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800a8fc:	f008 fdda 	bl	80134b4 <UTIL_TIMER_GetCurrentTime>
 800a900:	4c0d      	ldr	r4, [pc, #52]	; (800a938 <OnRadioRxDone+0x48>)
 800a902:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800a904:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800a908:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800a90a:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800a90c:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800a90e:	4a0b      	ldr	r2, [pc, #44]	; (800a93c <OnRadioRxDone+0x4c>)
 800a910:	7813      	ldrb	r3, [r2, #0]
 800a912:	f043 0308 	orr.w	r3, r3, #8
 800a916:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a918:	4b09      	ldr	r3, [pc, #36]	; (800a940 <OnRadioRxDone+0x50>)
 800a91a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800a91e:	b113      	cbz	r3, 800a926 <OnRadioRxDone+0x36>
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	b103      	cbz	r3, 800a926 <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a924:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800a926:	4b07      	ldr	r3, [pc, #28]	; (800a944 <OnRadioRxDone+0x54>)
 800a928:	2201      	movs	r2, #1
 800a92a:	2100      	movs	r1, #0
 800a92c:	2002      	movs	r0, #2
 800a92e:	f008 fac7 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
}
 800a932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a936:	bf00      	nop
 800a938:	200019c0 	.word	0x200019c0
 800a93c:	200003f0 	.word	0x200003f0
 800a940:	200003f4 	.word	0x200003f4
 800a944:	0801415c 	.word	0x0801415c

0800a948 <OnRadioTxDone>:
{
 800a948:	b530      	push	{r4, r5, lr}
 800a94a:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800a94c:	f008 fdb2 	bl	80134b4 <UTIL_TIMER_GetCurrentTime>
 800a950:	4b0f      	ldr	r3, [pc, #60]	; (800a990 <OnRadioTxDone+0x48>)
 800a952:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800a954:	4d0f      	ldr	r5, [pc, #60]	; (800a994 <OnRadioTxDone+0x4c>)
 800a956:	466c      	mov	r4, sp
 800a958:	4620      	mov	r0, r4
 800a95a:	f008 fd01 	bl	8013360 <SysTimeGet>
 800a95e:	f505 734e 	add.w	r3, r5, #824	; 0x338
 800a962:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a966:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800a96a:	4a0b      	ldr	r2, [pc, #44]	; (800a998 <OnRadioTxDone+0x50>)
 800a96c:	7813      	ldrb	r3, [r2, #0]
 800a96e:	f043 0310 	orr.w	r3, r3, #16
 800a972:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a974:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800a978:	b113      	cbz	r3, 800a980 <OnRadioTxDone+0x38>
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	b103      	cbz	r3, 800a980 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a97e:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800a980:	4b06      	ldr	r3, [pc, #24]	; (800a99c <OnRadioTxDone+0x54>)
 800a982:	2201      	movs	r2, #1
 800a984:	2100      	movs	r1, #0
 800a986:	2002      	movs	r0, #2
 800a988:	f008 fa9a 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
}
 800a98c:	b003      	add	sp, #12
 800a98e:	bd30      	pop	{r4, r5, pc}
 800a990:	200019bc 	.word	0x200019bc
 800a994:	200003f4 	.word	0x200003f4
 800a998:	200003f0 	.word	0x200003f0
 800a99c:	0801416c 	.word	0x0801416c

0800a9a0 <ResetMacParameters>:
{
 800a9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a4:	b08e      	sub	sp, #56	; 0x38
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800a9a6:	4c4d      	ldr	r4, [pc, #308]	; (800aadc <ResetMacParameters+0x13c>)
 800a9a8:	2600      	movs	r6, #0
 800a9aa:	f884 6110 	strb.w	r6, [r4, #272]	; 0x110
    Nvm.MacGroup1.AdrAckCounter = 0;
 800a9ae:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800a9b0:	4d4b      	ldr	r5, [pc, #300]	; (800aae0 <ResetMacParameters+0x140>)
 800a9b2:	f885 6410 	strb.w	r6, [r5, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800a9b6:	f04f 0801 	mov.w	r8, #1
 800a9ba:	f885 8411 	strb.w	r8, [r5, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a9be:	f885 8412 	strb.w	r8, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800a9c2:	f885 6413 	strb.w	r6, [r5, #1043]	; 0x413
    Nvm.MacGroup2.MaxDCycle = 0;
 800a9c6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800a9ca:	f8a4 8102 	strh.w	r8, [r4, #258]	; 0x102
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a9ce:	f994 30c4 	ldrsb.w	r3, [r4, #196]	; 0xc4
 800a9d2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a9d6:	f994 30c5 	ldrsb.w	r3, [r4, #197]	; 0xc5
 800a9da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800a9de:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 800a9e2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a9e6:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800a9ea:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800a9ee:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800a9f2:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a9f6:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800a9fa:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800a9fe:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800aa02:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800aa06:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 800aa0a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800aa0e:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 800aa12:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800aa16:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800aa1a:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800aa1c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800aa20:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 800aa22:	f885 6414 	strb.w	r6, [r5, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800aa26:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800aa2a:	f88d 800c 	strb.w	r8, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800aa2e:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 800aa32:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800aa34:	f504 731f 	add.w	r3, r4, #636	; 0x27c
 800aa38:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800aa3a:	a901      	add	r1, sp, #4
 800aa3c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800aa40:	f002 fad0 	bl	800cfe4 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800aa44:	f885 6415 	strb.w	r6, [r5, #1045]	; 0x415
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800aa48:	f885 63cc 	strb.w	r6, [r5, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800aa4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa4e:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aa52:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800aa56:	f885 33dc 	strb.w	r3, [r5, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800aa5a:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800aa5e:	f885 33dd 	strb.w	r3, [r5, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800aa62:	f885 63de 	strb.w	r6, [r5, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800aa66:	f885 83df 	strb.w	r8, [r5, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800aa6a:	f505 7478 	add.w	r4, r5, #992	; 0x3e0
 800aa6e:	f505 7773 	add.w	r7, r5, #972	; 0x3cc
 800aa72:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800aa74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800aa7a:	f885 83f2 	strb.w	r8, [r5, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800aa7e:	2302      	movs	r3, #2
 800aa80:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 800aa84:	960c      	str	r6, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800aa86:	960d      	str	r6, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 800aa88:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800aa8c:	b11b      	cbz	r3, 800aa96 <ResetMacParameters+0xf6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800aa8e:	685a      	ldr	r2, [r3, #4]
 800aa90:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800aa96:	4b12      	ldr	r3, [pc, #72]	; (800aae0 <ResetMacParameters+0x140>)
 800aa98:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 800aa9c:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800aa9e:	f203 421c 	addw	r2, r3, #1052	; 0x41c
 800aaa2:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800aaa4:	f203 424c 	addw	r2, r3, #1100	; 0x44c
 800aaa8:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800aaaa:	f203 4381 	addw	r3, r3, #1153	; 0x481
 800aaae:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800aab0:	4a0a      	ldr	r2, [pc, #40]	; (800aadc <ResetMacParameters+0x13c>)
 800aab2:	f102 03cc 	add.w	r3, r2, #204	; 0xcc
 800aab6:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800aab8:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800aabc:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800aabe:	f102 0344 	add.w	r3, r2, #68	; 0x44
 800aac2:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800aac4:	f102 03d0 	add.w	r3, r2, #208	; 0xd0
 800aac8:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800aaca:	f502 62bf 	add.w	r2, r2, #1528	; 0x5f8
 800aace:	a90c      	add	r1, sp, #48	; 0x30
 800aad0:	a804      	add	r0, sp, #16
 800aad2:	f001 fa6a 	bl	800bfaa <LoRaMacClassBInit>
}
 800aad6:	b00e      	add	sp, #56	; 0x38
 800aad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aadc:	200008fc 	.word	0x200008fc
 800aae0:	200003f4 	.word	0x200003f4

0800aae4 <SwitchClass>:
{
 800aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae6:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800aae8:	4b3d      	ldr	r3, [pc, #244]	; (800abe0 <SwitchClass+0xfc>)
 800aaea:	f893 50fc 	ldrb.w	r5, [r3, #252]	; 0xfc
 800aaee:	2d01      	cmp	r5, #1
 800aaf0:	d062      	beq.n	800abb8 <SwitchClass+0xd4>
 800aaf2:	2d02      	cmp	r5, #2
 800aaf4:	d068      	beq.n	800abc8 <SwitchClass+0xe4>
 800aaf6:	b10d      	cbz	r5, 800aafc <SwitchClass+0x18>
 800aaf8:	2003      	movs	r0, #3
}
 800aafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 800aafc:	b928      	cbnz	r0, 800ab0a <SwitchClass+0x26>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800aafe:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800ab02:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800ab04:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ab06:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 800ab0a:	2c01      	cmp	r4, #1
 800ab0c:	d01f      	beq.n	800ab4e <SwitchClass+0x6a>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab0e:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 800ab10:	2c02      	cmp	r4, #2
 800ab12:	d1f2      	bne.n	800aafa <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ab14:	4b32      	ldr	r3, [pc, #200]	; (800abe0 <SwitchClass+0xfc>)
 800ab16:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ab1a:	4f32      	ldr	r7, [pc, #200]	; (800abe4 <SwitchClass+0x100>)
 800ab1c:	f507 7478 	add.w	r4, r7, #992	; 0x3e0
 800ab20:	f507 7673 	add.w	r6, r7, #972	; 0x3cc
 800ab24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ab26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab28:	6833      	ldr	r3, [r6, #0]
 800ab2a:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ab32:	2300      	movs	r3, #0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	dd13      	ble.n	800ab60 <SwitchClass+0x7c>
                MacCtx.NodeAckRequested = false;
 800ab38:	4b2a      	ldr	r3, [pc, #168]	; (800abe4 <SwitchClass+0x100>)
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                Radio.Sleep( );
 800ab40:	4b29      	ldr	r3, [pc, #164]	; (800abe8 <SwitchClass+0x104>)
 800ab42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab44:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800ab46:	f7ff fe03 	bl	800a750 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	e7d5      	b.n	800aafa <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f001 fa41 	bl	800bfd6 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d1db      	bne.n	800ab10 <SwitchClass+0x2c>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ab58:	4b21      	ldr	r3, [pc, #132]	; (800abe0 <SwitchClass+0xfc>)
 800ab5a:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 800ab5e:	e7d7      	b.n	800ab10 <SwitchClass+0x2c>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ab60:	4618      	mov	r0, r3
 800ab62:	491f      	ldr	r1, [pc, #124]	; (800abe0 <SwitchClass+0xfc>)
 800ab64:	222c      	movs	r2, #44	; 0x2c
 800ab66:	fb02 1203 	mla	r2, r2, r3, r1
 800ab6a:	f892 20d2 	ldrb.w	r2, [r2, #210]	; 0xd2
 800ab6e:	b912      	cbnz	r2, 800ab76 <SwitchClass+0x92>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ab70:	3301      	adds	r3, #1
 800ab72:	b25b      	sxtb	r3, r3
 800ab74:	e7de      	b.n	800ab34 <SwitchClass+0x50>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800ab76:	460a      	mov	r2, r1
 800ab78:	232c      	movs	r3, #44	; 0x2c
 800ab7a:	fb03 1000 	mla	r0, r3, r0, r1
 800ab7e:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
 800ab82:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800ab84:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
 800ab88:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ab8c:	4b15      	ldr	r3, [pc, #84]	; (800abe4 <SwitchClass+0x100>)
 800ab8e:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 800ab92:	f883 03e0 	strb.w	r0, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ab96:	f8c3 13e4 	str.w	r1, [r3, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ab9a:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 800ab9e:	f883 13f0 	strb.w	r1, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800aba2:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800aba6:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800abaa:	2203      	movs	r2, #3
 800abac:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800abb0:	2201      	movs	r2, #1
 800abb2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800abb6:	e7bf      	b.n	800ab38 <SwitchClass+0x54>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800abb8:	f001 fa0d 	bl	800bfd6 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d19c      	bne.n	800aafa <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800abc0:	4b07      	ldr	r3, [pc, #28]	; (800abe0 <SwitchClass+0xfc>)
 800abc2:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 800abc6:	e798      	b.n	800aafa <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800abc8:	b938      	cbnz	r0, 800abda <SwitchClass+0xf6>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800abca:	4b05      	ldr	r3, [pc, #20]	; (800abe0 <SwitchClass+0xfc>)
 800abcc:	f883 00fc 	strb.w	r0, [r3, #252]	; 0xfc
                Radio.Sleep( );
 800abd0:	4b05      	ldr	r3, [pc, #20]	; (800abe8 <SwitchClass+0x104>)
 800abd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd4:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800abd6:	4620      	mov	r0, r4
 800abd8:	e78f      	b.n	800aafa <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800abda:	2003      	movs	r0, #3
 800abdc:	e78d      	b.n	800aafa <SwitchClass+0x16>
 800abde:	bf00      	nop
 800abe0:	200008fc 	.word	0x200008fc
 800abe4:	200003f4 	.word	0x200003f4
 800abe8:	08014674 	.word	0x08014674

0800abec <SendReJoinReq>:
{
 800abec:	b570      	push	{r4, r5, r6, lr}
    switch( joinReqType )
 800abee:	28ff      	cmp	r0, #255	; 0xff
 800abf0:	d003      	beq.n	800abfa <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800abf2:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800abf4:	f7ff fb62 	bl	800a2bc <ScheduleTx>
}
 800abf8:	bd70      	pop	{r4, r5, r6, pc}
 800abfa:	f04f 0600 	mov.w	r6, #0
            SwitchClass( CLASS_A );
 800abfe:	2000      	movs	r0, #0
 800ac00:	f7ff ff70 	bl	800aae4 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800ac04:	4d0f      	ldr	r5, [pc, #60]	; (800ac44 <SendReJoinReq+0x58>)
 800ac06:	2400      	movs	r4, #0
 800ac08:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800ac0c:	1cab      	adds	r3, r5, #2
 800ac0e:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ac12:	23ff      	movs	r3, #255	; 0xff
 800ac14:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800ac18:	f364 1647 	bfi	r6, r4, #5, #3
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800ac1c:	f885 610d 	strb.w	r6, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800ac20:	f005 ff94 	bl	8010b4c <SecureElementGetJoinEui>
 800ac24:	4601      	mov	r1, r0
 800ac26:	2208      	movs	r2, #8
 800ac28:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800ac2c:	f005 ffbf 	bl	8010bae <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800ac30:	f005 ff76 	bl	8010b20 <SecureElementGetDevEui>
 800ac34:	4601      	mov	r1, r0
 800ac36:	2208      	movs	r2, #8
 800ac38:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800ac3c:	f005 ffb7 	bl	8010bae <memcpy1>
            allowDelayedTx = false;
 800ac40:	4620      	mov	r0, r4
            break;
 800ac42:	e7d7      	b.n	800abf4 <SendReJoinReq+0x8>
 800ac44:	200003f4 	.word	0x200003f4

0800ac48 <SetTxContinuousWave>:
{
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 800ac4c:	4c10      	ldr	r4, [pc, #64]	; (800ac90 <SetTxContinuousWave+0x48>)
 800ac4e:	f894 3415 	ldrb.w	r3, [r4, #1045]	; 0x415
 800ac52:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ac56:	4b0f      	ldr	r3, [pc, #60]	; (800ac94 <SetTxContinuousWave+0x4c>)
 800ac58:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800ac5c:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ac60:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800ac64:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800ac68:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800ac6a:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800ac6c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ac6e:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 800ac70:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800ac74:	4669      	mov	r1, sp
 800ac76:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ac7a:	f002 fae4 	bl	800d246 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800ac7e:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800ac82:	f043 0302 	orr.w	r3, r3, #2
 800ac86:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
}
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	b004      	add	sp, #16
 800ac8e:	bd10      	pop	{r4, pc}
 800ac90:	200003f4 	.word	0x200003f4
 800ac94:	200008fc 	.word	0x200008fc

0800ac98 <PrepareFrame>:
{
 800ac98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac9c:	b083      	sub	sp, #12
 800ac9e:	4605      	mov	r5, r0
 800aca0:	460e      	mov	r6, r1
 800aca2:	4617      	mov	r7, r2
 800aca4:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800aca8:	4959      	ldr	r1, [pc, #356]	; (800ae10 <PrepareFrame+0x178>)
 800acaa:	2200      	movs	r2, #0
 800acac:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800acae:	f881 2414 	strb.w	r2, [r1, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800acb2:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800acb4:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800acb6:	4698      	mov	r8, r3
 800acb8:	b1cb      	cbz	r3, 800acee <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800acba:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800ae10 <PrepareFrame+0x178>
 800acbe:	4622      	mov	r2, r4
 800acc0:	4641      	mov	r1, r8
 800acc2:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800acc6:	f005 ff72 	bl	8010bae <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800acca:	b2e0      	uxtb	r0, r4
 800accc:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800acd0:	782b      	ldrb	r3, [r5, #0]
 800acd2:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800acd6:	782b      	ldrb	r3, [r5, #0]
 800acd8:	095b      	lsrs	r3, r3, #5
 800acda:	2b04      	cmp	r3, #4
 800acdc:	d009      	beq.n	800acf2 <PrepareFrame+0x5a>
 800acde:	2b07      	cmp	r3, #7
 800ace0:	d078      	beq.n	800add4 <PrepareFrame+0x13c>
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d009      	beq.n	800acfa <PrepareFrame+0x62>
 800ace6:	2002      	movs	r0, #2
}
 800ace8:	b003      	add	sp, #12
 800acea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800acee:	4614      	mov	r4, r2
 800acf0:	e7e3      	b.n	800acba <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800acf2:	4b47      	ldr	r3, [pc, #284]	; (800ae10 <PrepareFrame+0x178>)
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800acfa:	4b45      	ldr	r3, [pc, #276]	; (800ae10 <PrepareFrame+0x178>)
 800acfc:	2204      	movs	r2, #4
 800acfe:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800ad02:	1c9a      	adds	r2, r3, #2
 800ad04:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ad08:	22ff      	movs	r2, #255	; 0xff
 800ad0a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800ad0e:	782a      	ldrb	r2, [r5, #0]
 800ad10:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800ad14:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800ad18:	4a3e      	ldr	r2, [pc, #248]	; (800ae14 <PrepareFrame+0x17c>)
 800ad1a:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 800ad1e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800ad22:	7832      	ldrb	r2, [r6, #0]
 800ad24:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800ad28:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800ad2c:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800ad30:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ad34:	a801      	add	r0, sp, #4
 800ad36:	f001 fdc9 	bl	800c8cc <LoRaMacCryptoGetFCntUp>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d15b      	bne.n	800adf6 <PrepareFrame+0x15e>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800ad3e:	9a01      	ldr	r2, [sp, #4]
 800ad40:	4b33      	ldr	r3, [pc, #204]	; (800ae10 <PrepareFrame+0x178>)
 800ad42:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 800ad46:	2100      	movs	r1, #0
 800ad48:	f883 143d 	strb.w	r1, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 800ad4c:	f883 143c 	strb.w	r1, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800ad50:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ad54:	4668      	mov	r0, sp
 800ad56:	f001 fa53 	bl	800c200 <LoRaMacCommandsGetSizeSerializedCmds>
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	d14d      	bne.n	800adfa <PrepareFrame+0x162>
            if( macCmdsSize > 0 )
 800ad5e:	9b00      	ldr	r3, [sp, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d0c1      	beq.n	800ace8 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800ad64:	4b2b      	ldr	r3, [pc, #172]	; (800ae14 <PrepareFrame+0x17c>)
 800ad66:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800ad6a:	f7fe f919 	bl	8008fa0 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800ad6e:	4b28      	ldr	r3, [pc, #160]	; (800ae10 <PrepareFrame+0x178>)
 800ad70:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800ad74:	b113      	cbz	r3, 800ad7c <PrepareFrame+0xe4>
 800ad76:	9a00      	ldr	r2, [sp, #0]
 800ad78:	2a0f      	cmp	r2, #15
 800ad7a:	d915      	bls.n	800ada8 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800ad7c:	b113      	cbz	r3, 800ad84 <PrepareFrame+0xec>
 800ad7e:	9b00      	ldr	r3, [sp, #0]
 800ad80:	2b0f      	cmp	r3, #15
 800ad82:	d820      	bhi.n	800adc6 <PrepareFrame+0x12e>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800ad84:	4a24      	ldr	r2, [pc, #144]	; (800ae18 <PrepareFrame+0x180>)
 800ad86:	4669      	mov	r1, sp
 800ad88:	f001 fa46 	bl	800c218 <LoRaMacCommandsSerializeCmds>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d13a      	bne.n	800ae06 <PrepareFrame+0x16e>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800ad90:	4b1f      	ldr	r3, [pc, #124]	; (800ae10 <PrepareFrame+0x178>)
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800ad98:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 800ad9c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800ada0:	9a00      	ldr	r2, [sp, #0]
 800ada2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800ada6:	e79f      	b.n	800ace8 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800ada8:	4a1c      	ldr	r2, [pc, #112]	; (800ae1c <PrepareFrame+0x184>)
 800adaa:	4669      	mov	r1, sp
 800adac:	200f      	movs	r0, #15
 800adae:	f001 fa33 	bl	800c218 <LoRaMacCommandsSerializeCmds>
 800adb2:	bb20      	cbnz	r0, 800adfe <PrepareFrame+0x166>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800adb4:	7833      	ldrb	r3, [r6, #0]
 800adb6:	9a00      	ldr	r2, [sp, #0]
 800adb8:	f362 0303 	bfi	r3, r2, #0, #4
 800adbc:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800adbe:	4a14      	ldr	r2, [pc, #80]	; (800ae10 <PrepareFrame+0x178>)
 800adc0:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
 800adc4:	e790      	b.n	800ace8 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800adc6:	4a14      	ldr	r2, [pc, #80]	; (800ae18 <PrepareFrame+0x180>)
 800adc8:	4669      	mov	r1, sp
 800adca:	f001 fa25 	bl	800c218 <LoRaMacCommandsSerializeCmds>
 800adce:	b1c0      	cbz	r0, 800ae02 <PrepareFrame+0x16a>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800add0:	2013      	movs	r0, #19
 800add2:	e789      	b.n	800ace8 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800add4:	f1b8 0f00 	cmp.w	r8, #0
 800add8:	d017      	beq.n	800ae0a <PrepareFrame+0x172>
 800adda:	2800      	cmp	r0, #0
 800addc:	d084      	beq.n	800ace8 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800adde:	4c0c      	ldr	r4, [pc, #48]	; (800ae10 <PrepareFrame+0x178>)
 800ade0:	b282      	uxth	r2, r0
 800ade2:	4641      	mov	r1, r8
 800ade4:	1ce0      	adds	r0, r4, #3
 800ade6:	f005 fee2 	bl	8010bae <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800adea:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800adee:	3301      	adds	r3, #1
 800adf0:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800adf2:	2000      	movs	r0, #0
 800adf4:	e778      	b.n	800ace8 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800adf6:	2012      	movs	r0, #18
 800adf8:	e776      	b.n	800ace8 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800adfa:	2013      	movs	r0, #19
 800adfc:	e774      	b.n	800ace8 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800adfe:	2013      	movs	r0, #19
 800ae00:	e772      	b.n	800ace8 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800ae02:	200a      	movs	r0, #10
 800ae04:	e770      	b.n	800ace8 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ae06:	2013      	movs	r0, #19
 800ae08:	e76e      	b.n	800ace8 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	e76c      	b.n	800ace8 <PrepareFrame+0x50>
 800ae0e:	bf00      	nop
 800ae10:	200003f4 	.word	0x200003f4
 800ae14:	200008fc 	.word	0x200008fc
 800ae18:	2000087c 	.word	0x2000087c
 800ae1c:	2000050c 	.word	0x2000050c

0800ae20 <Send>:
{
 800ae20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae24:	b08a      	sub	sp, #40	; 0x28
 800ae26:	4617      	mov	r7, r2
 800ae28:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ae2a:	4c47      	ldr	r4, [pc, #284]	; (800af48 <Send+0x128>)
 800ae2c:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800ae30:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ae34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ae36:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ae38:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f000 8081 	beq.w	800af44 <Send+0x124>
 800ae42:	4605      	mov	r5, r0
 800ae44:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800ae46:	f894 30ff 	ldrb.w	r3, [r4, #255]	; 0xff
 800ae4a:	b90b      	cbnz	r3, 800ae50 <Send+0x30>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800ae50:	2100      	movs	r1, #0
    fCtrl.Bits.FOptsLen      = 0;
 800ae52:	460b      	mov	r3, r1
 800ae54:	f361 0303 	bfi	r3, r1, #0, #4
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800ae58:	483b      	ldr	r0, [pc, #236]	; (800af48 <Send+0x128>)
 800ae5a:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
 800ae5e:	f361 13c7 	bfi	r3, r1, #7, #1
 800ae62:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ae66:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d057      	beq.n	800af1e <Send+0xfe>
        fCtrl.Bits.FPending      = 0;
 800ae6e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800ae72:	f36f 1304 	bfc	r3, #4, #1
 800ae76:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800ae7a:	4b33      	ldr	r3, [pc, #204]	; (800af48 <Send+0x128>)
 800ae7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ae80:	b12b      	cbz	r3, 800ae8e <Send+0x6e>
        fCtrl.Bits.Ack = 1;
 800ae82:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800ae86:	f043 0320 	orr.w	r3, r3, #32
 800ae8a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.Version = Nvm.MacGroup2.Version;
 800ae8e:	4c2e      	ldr	r4, [pc, #184]	; (800af48 <Send+0x128>)
 800ae90:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800ae94:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = true;
 800ae96:	2301      	movs	r3, #1
 800ae98:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800ae9c:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800aea0:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800aea2:	4b2a      	ldr	r3, [pc, #168]	; (800af4c <Send+0x12c>)
 800aea4:	f8b3 23f4 	ldrh.w	r2, [r3, #1012]	; 0x3f4
 800aea8:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800aeac:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800aeb0:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800aeb4:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800aeb8:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800aebc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800aec0:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800aec4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800aec8:	f88d 301f 	strb.w	r3, [sp, #31]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800aecc:	ab08      	add	r3, sp, #32
 800aece:	f104 0238 	add.w	r2, r4, #56	; 0x38
 800aed2:	f104 0139 	add.w	r1, r4, #57	; 0x39
 800aed6:	a803      	add	r0, sp, #12
 800aed8:	f001 f85f 	bl	800bf9a <LoRaMacAdrCalcNext>
 800aedc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800aee0:	f360 1386 	bfi	r3, r0, #6, #1
 800aee4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800aee8:	f8cd 8000 	str.w	r8, [sp]
 800aeec:	463b      	mov	r3, r7
 800aeee:	4632      	mov	r2, r6
 800aef0:	a909      	add	r1, sp, #36	; 0x24
 800aef2:	4628      	mov	r0, r5
 800aef4:	f7ff fed0 	bl	800ac98 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800aef8:	4604      	mov	r4, r0
 800aefa:	b108      	cbz	r0, 800af00 <Send+0xe0>
 800aefc:	280a      	cmp	r0, #10
 800aefe:	d104      	bne.n	800af0a <Send+0xea>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800af00:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800af04:	f7ff f9da 	bl	800a2bc <ScheduleTx>
 800af08:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800af0a:	b17c      	cbz	r4, 800af2c <Send+0x10c>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800af0c:	4b0e      	ldr	r3, [pc, #56]	; (800af48 <Send+0x128>)
 800af0e:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800af12:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800af16:	4620      	mov	r0, r4
 800af18:	b00a      	add	sp, #40	; 0x28
 800af1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800af1e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800af22:	f043 0310 	orr.w	r3, r3, #16
 800af26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800af2a:	e7a6      	b.n	800ae7a <Send+0x5a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800af2c:	4b06      	ldr	r3, [pc, #24]	; (800af48 <Send+0x128>)
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800af34:	9a08      	ldr	r2, [sp, #32]
 800af36:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800af38:	f001 f936 	bl	800c1a8 <LoRaMacCommandsRemoveNoneStickyCmds>
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d0ea      	beq.n	800af16 <Send+0xf6>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800af40:	2413      	movs	r4, #19
 800af42:	e7e8      	b.n	800af16 <Send+0xf6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800af44:	2407      	movs	r4, #7
 800af46:	e7e6      	b.n	800af16 <Send+0xf6>
 800af48:	200008fc 	.word	0x200008fc
 800af4c:	200003f4 	.word	0x200003f4

0800af50 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800af50:	4b07      	ldr	r3, [pc, #28]	; (800af70 <LoRaMacIsBusy+0x20>)
 800af52:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800af56:	b933      	cbnz	r3, 800af66 <LoRaMacIsBusy+0x16>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800af58:	4b05      	ldr	r3, [pc, #20]	; (800af70 <LoRaMacIsBusy+0x20>)
 800af5a:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d003      	beq.n	800af6a <LoRaMacIsBusy+0x1a>
    return true;
 800af62:	2001      	movs	r0, #1
 800af64:	4770      	bx	lr
 800af66:	2001      	movs	r0, #1
 800af68:	4770      	bx	lr
        return false;
 800af6a:	2000      	movs	r0, #0
}
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	200003f4 	.word	0x200003f4

0800af74 <LoRaMacProcess>:
{
 800af74:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800af76:	f7fe ffd7 	bl	8009f28 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800af7a:	f001 f83c 	bl	800bff6 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800af7e:	4b15      	ldr	r3, [pc, #84]	; (800afd4 <LoRaMacProcess+0x60>)
 800af80:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800af84:	f013 0f20 	tst.w	r3, #32
 800af88:	d107      	bne.n	800af9a <LoRaMacProcess+0x26>
    LoRaMacHandleIndicationEvents( );
 800af8a:	f7fd fea9 	bl	8008ce0 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800af8e:	4b11      	ldr	r3, [pc, #68]	; (800afd4 <LoRaMacProcess+0x60>)
 800af90:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800af94:	2b02      	cmp	r3, #2
 800af96:	d01a      	beq.n	800afce <LoRaMacProcess+0x5a>
}
 800af98:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800af9a:	2000      	movs	r0, #0
 800af9c:	f7fd fe9a 	bl	8008cd4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800afa0:	f7fd fee8 	bl	8008d74 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800afa4:	f7fd ffc4 	bl	8008f30 <IsRequestPending>
 800afa8:	b110      	cbz	r0, 800afb0 <LoRaMacProcess+0x3c>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800afaa:	f7fe f8e9 	bl	8009180 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800afae:	b918      	cbnz	r0, 800afb8 <LoRaMacProcess+0x44>
            LoRaMacHandleMlmeRequest( );
 800afb0:	f7fe ffe8 	bl	8009f84 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800afb4:	f7ff fa2e 	bl	800a414 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800afb8:	f7ff fa78 	bl	800a4ac <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800afbc:	f7ff fac0 	bl	800a540 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800afc0:	4805      	ldr	r0, [pc, #20]	; (800afd8 <LoRaMacProcess+0x64>)
 800afc2:	f7ff fad5 	bl	800a570 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800afc6:	2001      	movs	r0, #1
 800afc8:	f7fd fe84 	bl	8008cd4 <LoRaMacEnableRequests>
 800afcc:	e7dd      	b.n	800af8a <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800afce:	f7ff fbbf 	bl	800a750 <OpenContinuousRxCWindow>
}
 800afd2:	e7e1      	b.n	800af98 <LoRaMacProcess+0x24>
 800afd4:	200003f4 	.word	0x200003f4
 800afd8:	200008fc 	.word	0x200008fc

0800afdc <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800afdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe0:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800afe2:	2800      	cmp	r0, #0
 800afe4:	f000 8190 	beq.w	800b308 <LoRaMacInitialization+0x32c>
 800afe8:	460e      	mov	r6, r1
 800afea:	4691      	mov	r9, r2
 800afec:	4680      	mov	r8, r0
 800afee:	2900      	cmp	r1, #0
 800aff0:	f000 818c 	beq.w	800b30c <LoRaMacInitialization+0x330>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800aff4:	6803      	ldr	r3, [r0, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f000 818a 	beq.w	800b310 <LoRaMacInitialization+0x334>
        ( primitives->MacMcpsIndication == NULL ) ||
 800affc:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800affe:	2b00      	cmp	r3, #0
 800b000:	f000 8188 	beq.w	800b314 <LoRaMacInitialization+0x338>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800b004:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800b006:	2b00      	cmp	r3, #0
 800b008:	f000 8186 	beq.w	800b318 <LoRaMacInitialization+0x33c>
        ( primitives->MacMlmeIndication == NULL ) )
 800b00c:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f000 8184 	beq.w	800b31c <LoRaMacInitialization+0x340>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800b014:	4610      	mov	r0, r2
 800b016:	f001 ffa6 	bl	800cf66 <RegionIsActive>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	f000 8180 	beq.w	800b320 <LoRaMacInitialization+0x344>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800b020:	4640      	mov	r0, r8
 800b022:	f001 f9a3 	bl	800c36c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800b026:	4cc5      	ldr	r4, [pc, #788]	; (800b33c <LoRaMacInitialization+0x360>)
 800b028:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 800b02c:	2100      	movs	r1, #0
 800b02e:	4620      	mov	r0, r4
 800b030:	f005 fdd3 	bl	8010bda <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800b034:	4dc2      	ldr	r5, [pc, #776]	; (800b340 <LoRaMacInitialization+0x364>)
 800b036:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 800b03a:	2100      	movs	r1, #0
 800b03c:	4628      	mov	r0, r5
 800b03e:	f005 fdcc 	bl	8010bda <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800b042:	f04f 0a01 	mov.w	sl, #1
 800b046:	f885 a412 	strb.w	sl, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 800b04a:	f885 a411 	strb.w	sl, [r5, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 800b04e:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800b052:	2700      	movs	r7, #0
 800b054:	f884 70fc 	strb.w	r7, [r4, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800b058:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800b05c:	4bb9      	ldr	r3, [pc, #740]	; (800b344 <LoRaMacInitialization+0x368>)
 800b05e:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800b062:	230f      	movs	r3, #15
 800b064:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b068:	a908      	add	r1, sp, #32
 800b06a:	4648      	mov	r0, r9
 800b06c:	f001 ff89 	bl	800cf82 <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800b070:	1bc0      	subs	r0, r0, r7
 800b072:	bf18      	it	ne
 800b074:	2001      	movne	r0, #1
 800b076:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800b07a:	f04f 0b0a 	mov.w	fp, #10
 800b07e:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b082:	a908      	add	r1, sp, #32
 800b084:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b088:	f001 ff7b 	bl	800cf82 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800b08c:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 800b090:	f04f 0906 	mov.w	r9, #6
 800b094:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b098:	a908      	add	r1, sp, #32
 800b09a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b09e:	f001 ff70 	bl	800cf82 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800b0a2:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800b0a6:	2310      	movs	r3, #16
 800b0a8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b0ac:	a908      	add	r1, sp, #32
 800b0ae:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b0b2:	f001 ff66 	bl	800cf82 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800b0b6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800b0ba:	2311      	movs	r3, #17
 800b0bc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b0c0:	a908      	add	r1, sp, #32
 800b0c2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b0c6:	f001 ff5c 	bl	800cf82 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800b0ca:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800b0ce:	2312      	movs	r3, #18
 800b0d0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b0d4:	a908      	add	r1, sp, #32
 800b0d6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b0da:	f001 ff52 	bl	800cf82 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800b0de:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800b0e2:	2313      	movs	r3, #19
 800b0e4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b0e8:	a908      	add	r1, sp, #32
 800b0ea:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b0ee:	f001 ff48 	bl	800cf82 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800b0f2:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800b0f6:	2314      	movs	r3, #20
 800b0f8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b0fc:	a908      	add	r1, sp, #32
 800b0fe:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b102:	f001 ff3e 	bl	800cf82 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800b106:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800b10a:	2317      	movs	r3, #23
 800b10c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b110:	a908      	add	r1, sp, #32
 800b112:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b116:	f001 ff34 	bl	800cf82 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800b11a:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800b11e:	2318      	movs	r3, #24
 800b120:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b124:	a908      	add	r1, sp, #32
 800b126:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b12a:	f001 ff2a 	bl	800cf82 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800b12e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800b132:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800b136:	2319      	movs	r3, #25
 800b138:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b13c:	a908      	add	r1, sp, #32
 800b13e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b142:	f001 ff1e 	bl	800cf82 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800b146:	b2c0      	uxtb	r0, r0
 800b148:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800b14c:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800b150:	231e      	movs	r3, #30
 800b152:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b156:	a908      	add	r1, sp, #32
 800b158:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b15c:	f001 ff11 	bl	800cf82 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800b160:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800b164:	231f      	movs	r3, #31
 800b166:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b16a:	a908      	add	r1, sp, #32
 800b16c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b170:	f001 ff07 	bl	800cf82 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800b174:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800b178:	2320      	movs	r3, #32
 800b17a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b17e:	eb0d 0103 	add.w	r1, sp, r3
 800b182:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b186:	f001 fefc 	bl	800cf82 <RegionGetPhyParam>
 800b18a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800b18c:	9b07      	ldr	r3, [sp, #28]
 800b18e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800b192:	2321      	movs	r3, #33	; 0x21
 800b194:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b198:	a908      	add	r1, sp, #32
 800b19a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b19e:	f001 fef0 	bl	800cf82 <RegionGetPhyParam>
 800b1a2:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800b1a4:	9b07      	ldr	r3, [sp, #28]
 800b1a6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800b1aa:	230b      	movs	r3, #11
 800b1ac:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b1b0:	a908      	add	r1, sp, #32
 800b1b2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b1b6:	f001 fee4 	bl	800cf82 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 800b1ba:	f8a5 03f4 	strh.w	r0, [r5, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800b1be:	230c      	movs	r3, #12
 800b1c0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b1c4:	a908      	add	r1, sp, #32
 800b1c6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b1ca:	f001 feda 	bl	800cf82 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 800b1ce:	f8a5 03f6 	strh.w	r0, [r5, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800b1d2:	f884 a0a0 	strb.w	sl, [r4, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800b1d6:	f8c4 b084 	str.w	fp, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800b1da:	f884 9088 	strb.w	r9, [r4, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800b1de:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800b1e2:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800b1e6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b1ea:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800b1ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b1f0:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800b1f2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b1f6:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800b1f8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800b1fc:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800b1fe:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b202:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800b204:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800b208:	f88d 7018 	strb.w	r7, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800b20c:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 800b210:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800b212:	f504 731f 	add.w	r3, r4, #636	; 0x27c
 800b216:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b218:	a904      	add	r1, sp, #16
 800b21a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b21e:	f001 fee1 	bl	800cfe4 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 800b222:	f8c5 6348 	str.w	r6, [r5, #840]	; 0x348
    ResetMacParameters( );
 800b226:	f7ff fbbb 	bl	800a9a0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800b22a:	f884 a0fd 	strb.w	sl, [r4, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 800b22e:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800b232:	f885 7481 	strb.w	r7, [r5, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 800b236:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800b23a:	62e7      	str	r7, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800b23c:	6327      	str	r7, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800b23e:	9700      	str	r7, [sp, #0]
 800b240:	4b41      	ldr	r3, [pc, #260]	; (800b348 <LoRaMacInitialization+0x36c>)
 800b242:	463a      	mov	r2, r7
 800b244:	f04f 31ff 	mov.w	r1, #4294967295
 800b248:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800b24c:	f008 f914 	bl	8013478 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800b250:	9700      	str	r7, [sp, #0]
 800b252:	4b3e      	ldr	r3, [pc, #248]	; (800b34c <LoRaMacInitialization+0x370>)
 800b254:	463a      	mov	r2, r7
 800b256:	f04f 31ff 	mov.w	r1, #4294967295
 800b25a:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800b25e:	f008 f90b 	bl	8013478 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800b262:	9700      	str	r7, [sp, #0]
 800b264:	4b3a      	ldr	r3, [pc, #232]	; (800b350 <LoRaMacInitialization+0x374>)
 800b266:	463a      	mov	r2, r7
 800b268:	f04f 31ff 	mov.w	r1, #4294967295
 800b26c:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800b270:	f008 f902 	bl	8013478 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800b274:	9700      	str	r7, [sp, #0]
 800b276:	4b37      	ldr	r3, [pc, #220]	; (800b354 <LoRaMacInitialization+0x378>)
 800b278:	463a      	mov	r2, r7
 800b27a:	f04f 31ff 	mov.w	r1, #4294967295
 800b27e:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 800b282:	f008 f8f9 	bl	8013478 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800b286:	af02      	add	r7, sp, #8
 800b288:	4638      	mov	r0, r7
 800b28a:	f008 f889 	bl	80133a0 <SysTimeGetMcuTime>
 800b28e:	f504 7382 	add.w	r3, r4, #260	; 0x104
 800b292:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b296:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800b29a:	4b2f      	ldr	r3, [pc, #188]	; (800b358 <LoRaMacInitialization+0x37c>)
 800b29c:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800b2a0:	4b2e      	ldr	r3, [pc, #184]	; (800b35c <LoRaMacInitialization+0x380>)
 800b2a2:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800b2a6:	4b2e      	ldr	r3, [pc, #184]	; (800b360 <LoRaMacInitialization+0x384>)
 800b2a8:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800b2ac:	4b2d      	ldr	r3, [pc, #180]	; (800b364 <LoRaMacInitialization+0x388>)
 800b2ae:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800b2b2:	4b2d      	ldr	r3, [pc, #180]	; (800b368 <LoRaMacInitialization+0x38c>)
 800b2b4:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800b2b8:	4b2c      	ldr	r3, [pc, #176]	; (800b36c <LoRaMacInitialization+0x390>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800b2c0:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800b2c2:	68b1      	ldr	r1, [r6, #8]
 800b2c4:	f504 708c 	add.w	r0, r4, #280	; 0x118
 800b2c8:	f005 fa9e 	bl	8010808 <SecureElementInit>
 800b2cc:	bb68      	cbnz	r0, 800b32a <LoRaMacInitialization+0x34e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f001 fadc 	bl	800c88c <LoRaMacCryptoInit>
 800b2d4:	bb58      	cbnz	r0, 800b32e <LoRaMacInitialization+0x352>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800b2d6:	f000 ff11 	bl	800c0fc <LoRaMacCommandsInit>
 800b2da:	bb50      	cbnz	r0, 800b332 <LoRaMacInitialization+0x356>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800b2dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b2e0:	f001 fb3c 	bl	800c95c <LoRaMacCryptoSetMulticastReference>
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	bb30      	cbnz	r0, 800b336 <LoRaMacInitialization+0x35a>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800b2e8:	4d20      	ldr	r5, [pc, #128]	; (800b36c <LoRaMacInitialization+0x390>)
 800b2ea:	696b      	ldr	r3, [r5, #20]
 800b2ec:	4798      	blx	r3
 800b2ee:	f005 fc4b 	bl	8010b88 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800b2f2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800b2f4:	4a11      	ldr	r2, [pc, #68]	; (800b33c <LoRaMacInitialization+0x360>)
 800b2f6:	f892 00fd 	ldrb.w	r0, [r2, #253]	; 0xfd
 800b2fa:	4798      	blx	r3
    Radio.Sleep( );
 800b2fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b2fe:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b300:	4650      	mov	r0, sl
 800b302:	f7fd fce7 	bl	8008cd4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800b306:	e00c      	b.n	800b322 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b308:	2403      	movs	r4, #3
 800b30a:	e00a      	b.n	800b322 <LoRaMacInitialization+0x346>
 800b30c:	2403      	movs	r4, #3
 800b30e:	e008      	b.n	800b322 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b310:	2403      	movs	r4, #3
 800b312:	e006      	b.n	800b322 <LoRaMacInitialization+0x346>
 800b314:	2403      	movs	r4, #3
 800b316:	e004      	b.n	800b322 <LoRaMacInitialization+0x346>
 800b318:	2403      	movs	r4, #3
 800b31a:	e002      	b.n	800b322 <LoRaMacInitialization+0x346>
 800b31c:	2403      	movs	r4, #3
 800b31e:	e000      	b.n	800b322 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800b320:	2409      	movs	r4, #9
}
 800b322:	4620      	mov	r0, r4
 800b324:	b00b      	add	sp, #44	; 0x2c
 800b326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b32a:	2411      	movs	r4, #17
 800b32c:	e7f9      	b.n	800b322 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b32e:	2411      	movs	r4, #17
 800b330:	e7f7      	b.n	800b322 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b332:	2413      	movs	r4, #19
 800b334:	e7f5      	b.n	800b322 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b336:	2411      	movs	r4, #17
 800b338:	e7f3      	b.n	800b322 <LoRaMacInitialization+0x346>
 800b33a:	bf00      	nop
 800b33c:	200008fc 	.word	0x200008fc
 800b340:	200003f4 	.word	0x200003f4
 800b344:	01000300 	.word	0x01000300
 800b348:	0800a3c5 	.word	0x0800a3c5
 800b34c:	0800a841 	.word	0x0800a841
 800b350:	0800a7f1 	.word	0x0800a7f1
 800b354:	080090fd 	.word	0x080090fd
 800b358:	0800a949 	.word	0x0800a949
 800b35c:	0800a8f1 	.word	0x0800a8f1
 800b360:	08008c89 	.word	0x08008c89
 800b364:	0800a8bd 	.word	0x0800a8bd
 800b368:	0800a889 	.word	0x0800a889
 800b36c:	08014674 	.word	0x08014674

0800b370 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800b370:	2000      	movs	r0, #0
 800b372:	4b02      	ldr	r3, [pc, #8]	; (800b37c <LoRaMacStart+0xc>)
 800b374:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	200003f4 	.word	0x200003f4

0800b380 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800b380:	b530      	push	{r4, r5, lr}
 800b382:	b089      	sub	sp, #36	; 0x24
 800b384:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b386:	4b2f      	ldr	r3, [pc, #188]	; (800b444 <LoRaMacQueryTxPossible+0xc4>)
 800b388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b38a:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b38c:	f993 00c5 	ldrsb.w	r0, [r3, #197]	; 0xc5
 800b390:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b394:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 800b398:	f88d 3006 	strb.w	r3, [sp, #6]
    size_t macCmdsSize = 0;
 800b39c:	2300      	movs	r3, #0
 800b39e:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800b3a0:	2900      	cmp	r1, #0
 800b3a2:	d048      	beq.n	800b436 <LoRaMacQueryTxPossible+0xb6>
 800b3a4:	460d      	mov	r5, r1
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 800b3a6:	4b27      	ldr	r3, [pc, #156]	; (800b444 <LoRaMacQueryTxPossible+0xc4>)
 800b3a8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800b3ac:	9103      	str	r1, [sp, #12]
    adrNext.UpdateChanMask = false;
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800b3b4:	f893 10fe 	ldrb.w	r1, [r3, #254]	; 0xfe
 800b3b8:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b3bc:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b3be:	4a22      	ldr	r2, [pc, #136]	; (800b448 <LoRaMacQueryTxPossible+0xc8>)
 800b3c0:	f8b2 13f4 	ldrh.w	r1, [r2, #1012]	; 0x3f4
 800b3c4:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800b3c8:	f8b2 23f6 	ldrh.w	r2, [r2, #1014]	; 0x3f6
 800b3cc:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b3d0:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800b3d4:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b3d8:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800b3dc:	f88d 201d 	strb.w	r2, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b3e0:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800b3e4:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800b3e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3ec:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800b3f0:	ab02      	add	r3, sp, #8
 800b3f2:	f10d 0206 	add.w	r2, sp, #6
 800b3f6:	f10d 0107 	add.w	r1, sp, #7
 800b3fa:	a803      	add	r0, sp, #12
 800b3fc:	f000 fdcd 	bl	800bf9a <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800b400:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800b404:	f7fd fdcc 	bl	8008fa0 <GetMaxAppPayloadWithoutFOptsLength>
 800b408:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b40a:	4668      	mov	r0, sp
 800b40c:	f000 fef8 	bl	800c200 <LoRaMacCommandsGetSizeSerializedCmds>
 800b410:	b998      	cbnz	r0, 800b43a <LoRaMacQueryTxPossible+0xba>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800b412:	9b00      	ldr	r3, [sp, #0]
 800b414:	2b0f      	cmp	r3, #15
 800b416:	d80a      	bhi.n	800b42e <LoRaMacQueryTxPossible+0xae>
 800b418:	786a      	ldrb	r2, [r5, #1]
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d807      	bhi.n	800b42e <LoRaMacQueryTxPossible+0xae>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800b41e:	1ad3      	subs	r3, r2, r3
 800b420:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800b422:	9b00      	ldr	r3, [sp, #0]
 800b424:	441c      	add	r4, r3
 800b426:	42a2      	cmp	r2, r4
 800b428:	d309      	bcc.n	800b43e <LoRaMacQueryTxPossible+0xbe>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800b42a:	b009      	add	sp, #36	; 0x24
 800b42c:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800b42e:	2300      	movs	r3, #0
 800b430:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800b432:	2008      	movs	r0, #8
 800b434:	e7f9      	b.n	800b42a <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b436:	2003      	movs	r0, #3
 800b438:	e7f7      	b.n	800b42a <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b43a:	2013      	movs	r0, #19
 800b43c:	e7f5      	b.n	800b42a <LoRaMacQueryTxPossible+0xaa>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800b43e:	2008      	movs	r0, #8
 800b440:	e7f3      	b.n	800b42a <LoRaMacQueryTxPossible+0xaa>
 800b442:	bf00      	nop
 800b444:	200008fc 	.word	0x200008fc
 800b448:	200003f4 	.word	0x200003f4

0800b44c <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800b44c:	2800      	cmp	r0, #0
 800b44e:	f000 8109 	beq.w	800b664 <LoRaMacMibGetRequestConfirm+0x218>
{
 800b452:	b510      	push	{r4, lr}
 800b454:	b084      	sub	sp, #16
 800b456:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800b458:	7800      	ldrb	r0, [r0, #0]
 800b45a:	2828      	cmp	r0, #40	; 0x28
 800b45c:	f200 80fe 	bhi.w	800b65c <LoRaMacMibGetRequestConfirm+0x210>
 800b460:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b464:	002f0029 	.word	0x002f0029
 800b468:	003a0035 	.word	0x003a0035
 800b46c:	0045003f 	.word	0x0045003f
 800b470:	00fc004b 	.word	0x00fc004b
 800b474:	00fc00fc 	.word	0x00fc00fc
 800b478:	00fc00fc 	.word	0x00fc00fc
 800b47c:	00fc00fc 	.word	0x00fc00fc
 800b480:	005100fc 	.word	0x005100fc
 800b484:	005d0057 	.word	0x005d0057
 800b488:	00710069 	.word	0x00710069
 800b48c:	00810079 	.word	0x00810079
 800b490:	00890095 	.word	0x00890095
 800b494:	00a700a1 	.word	0x00a700a1
 800b498:	00b100ac 	.word	0x00b100ac
 800b49c:	00bb00b6 	.word	0x00bb00b6
 800b4a0:	00c600c0 	.word	0x00c600c0
 800b4a4:	00cc00d2 	.word	0x00cc00d2
 800b4a8:	00dd00d8 	.word	0x00dd00d8
 800b4ac:	00ed00e3 	.word	0x00ed00e3
 800b4b0:	00fc00e8 	.word	0x00fc00e8
 800b4b4:	00f3      	.short	0x00f3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800b4b6:	4b6c      	ldr	r3, [pc, #432]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b4b8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800b4bc:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800b4be:	b004      	add	sp, #16
 800b4c0:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b4c2:	4b69      	ldr	r3, [pc, #420]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b4c4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800b4c8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b4ca:	2000      	movs	r0, #0
            break;
 800b4cc:	e7f7      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800b4ce:	f005 fb27 	bl	8010b20 <SecureElementGetDevEui>
 800b4d2:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b4d4:	2000      	movs	r0, #0
            break;
 800b4d6:	e7f2      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800b4d8:	f005 fb38 	bl	8010b4c <SecureElementGetJoinEui>
 800b4dc:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b4de:	2000      	movs	r0, #0
            break;
 800b4e0:	e7ed      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800b4e2:	4b61      	ldr	r3, [pc, #388]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b4e4:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800b4e8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b4ea:	2000      	movs	r0, #0
            break;
 800b4ec:	e7e7      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800b4ee:	4b5e      	ldr	r3, [pc, #376]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b4f0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b4f4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b4f6:	2000      	movs	r0, #0
            break;
 800b4f8:	e7e1      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800b4fa:	4b5b      	ldr	r3, [pc, #364]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b4fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800b500:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b502:	2000      	movs	r0, #0
            break;
 800b504:	e7db      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800b506:	4b58      	ldr	r3, [pc, #352]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b508:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 800b50c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b50e:	2000      	movs	r0, #0
            break;
 800b510:	e7d5      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b512:	4b55      	ldr	r3, [pc, #340]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b514:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b518:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b51a:	2000      	movs	r0, #0
            break;
 800b51c:	e7cf      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS;
 800b51e:	231d      	movs	r3, #29
 800b520:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b524:	a902      	add	r1, sp, #8
 800b526:	4b50      	ldr	r3, [pc, #320]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b528:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b52c:	f001 fd29 	bl	800cf82 <RegionGetPhyParam>
            mibGet->Param.ChannelList = phyParam.Channels;
 800b530:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b532:	2000      	movs	r0, #0
            break;
 800b534:	e7c3      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800b536:	3404      	adds	r4, #4
 800b538:	4b4c      	ldr	r3, [pc, #304]	; (800b66c <LoRaMacMibGetRequestConfirm+0x220>)
 800b53a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b53e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b542:	2000      	movs	r0, #0
            break;
 800b544:	e7bb      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800b546:	3404      	adds	r4, #4
 800b548:	4b49      	ldr	r3, [pc, #292]	; (800b670 <LoRaMacMibGetRequestConfirm+0x224>)
 800b54a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b54e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b552:	2000      	movs	r0, #0
            break;
 800b554:	e7b3      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800b556:	3404      	adds	r4, #4
 800b558:	4b46      	ldr	r3, [pc, #280]	; (800b674 <LoRaMacMibGetRequestConfirm+0x228>)
 800b55a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b55e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b562:	2000      	movs	r0, #0
            break;
 800b564:	e7ab      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800b566:	3404      	adds	r4, #4
 800b568:	4b43      	ldr	r3, [pc, #268]	; (800b678 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b56a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b56e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b572:	2000      	movs	r0, #0
            break;
 800b574:	e7a3      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800b576:	231b      	movs	r3, #27
 800b578:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b57c:	a902      	add	r1, sp, #8
 800b57e:	4b3a      	ldr	r3, [pc, #232]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b580:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b584:	f001 fcfd 	bl	800cf82 <RegionGetPhyParam>
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800b588:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b58a:	2000      	movs	r0, #0
            break;
 800b58c:	e797      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800b58e:	231a      	movs	r3, #26
 800b590:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b594:	a902      	add	r1, sp, #8
 800b596:	4b34      	ldr	r3, [pc, #208]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b598:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b59c:	f001 fcf1 	bl	800cf82 <RegionGetPhyParam>
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800b5a0:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5a2:	2000      	movs	r0, #0
            break;
 800b5a4:	e78b      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800b5a6:	4b30      	ldr	r3, [pc, #192]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b5a8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b5ac:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5ae:	2000      	movs	r0, #0
            break;
 800b5b0:	e785      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800b5b2:	4b2d      	ldr	r3, [pc, #180]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b5b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5b6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5b8:	2000      	movs	r0, #0
            break;
 800b5ba:	e780      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800b5bc:	4b2a      	ldr	r3, [pc, #168]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b5be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5c2:	2000      	movs	r0, #0
            break;
 800b5c4:	e77b      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800b5c6:	4b28      	ldr	r3, [pc, #160]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ca:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5cc:	2000      	movs	r0, #0
            break;
 800b5ce:	e776      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800b5d0:	4b25      	ldr	r3, [pc, #148]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b5d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5d4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5d6:	2000      	movs	r0, #0
            break;
 800b5d8:	e771      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800b5da:	4b23      	ldr	r3, [pc, #140]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b5dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5de:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5e0:	2000      	movs	r0, #0
            break;
 800b5e2:	e76c      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b5e4:	4b20      	ldr	r3, [pc, #128]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b5e6:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 800b5ea:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5ec:	2000      	movs	r0, #0
            break;
 800b5ee:	e766      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800b5f0:	4b1d      	ldr	r3, [pc, #116]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b5f2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800b5f6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5f8:	2000      	movs	r0, #0
            break;
 800b5fa:	e760      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b5fc:	4b1a      	ldr	r3, [pc, #104]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b5fe:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 800b602:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b604:	2000      	movs	r0, #0
            break;
 800b606:	e75a      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b608:	4b17      	ldr	r3, [pc, #92]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b60a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800b60e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b610:	2000      	movs	r0, #0
            break;
 800b612:	e754      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800b614:	4b14      	ldr	r3, [pc, #80]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b618:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b61a:	2000      	movs	r0, #0
            break;
 800b61c:	e74f      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800b61e:	4b12      	ldr	r3, [pc, #72]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b620:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b624:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b626:	2000      	movs	r0, #0
            break;
 800b628:	e749      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800b62a:	4b0f      	ldr	r3, [pc, #60]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b62c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b62e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b630:	2000      	movs	r0, #0
            break;
 800b632:	e744      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Contexts = GetNvmData( );
 800b634:	f7fd fbde 	bl	8008df4 <GetNvmData>
 800b638:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b63a:	2000      	movs	r0, #0
            break;
 800b63c:	e73f      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800b63e:	4b0a      	ldr	r3, [pc, #40]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b640:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b644:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b646:	2000      	movs	r0, #0
            break;
 800b648:	e739      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800b64a:	4b07      	ldr	r3, [pc, #28]	; (800b668 <LoRaMacMibGetRequestConfirm+0x21c>)
 800b64c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b650:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800b652:	f001 fe21 	bl	800d298 <RegionGetVersion>
 800b656:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b658:	2000      	movs	r0, #0
            break;
 800b65a:	e730      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800b65c:	4620      	mov	r0, r4
 800b65e:	f000 fcbc 	bl	800bfda <LoRaMacClassBMibGetRequestConfirm>
            break;
 800b662:	e72c      	b.n	800b4be <LoRaMacMibGetRequestConfirm+0x72>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b664:	2003      	movs	r0, #3
}
 800b666:	4770      	bx	lr
 800b668:	200008fc 	.word	0x200008fc
 800b66c:	20000960 	.word	0x20000960
 800b670:	200009a0 	.word	0x200009a0
 800b674:	20000968 	.word	0x20000968
 800b678:	200009a8 	.word	0x200009a8

0800b67c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800b67c:	b530      	push	{r4, r5, lr}
 800b67e:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800b680:	2800      	cmp	r0, #0
 800b682:	f000 8240 	beq.w	800bb06 <LoRaMacMibSetRequestConfirm+0x48a>
 800b686:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800b688:	4bb1      	ldr	r3, [pc, #708]	; (800b950 <LoRaMacMibSetRequestConfirm+0x2d4>)
 800b68a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b68e:	f013 0f02 	tst.w	r3, #2
 800b692:	f040 823a 	bne.w	800bb0a <LoRaMacMibSetRequestConfirm+0x48e>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800b696:	7804      	ldrb	r4, [r0, #0]
 800b698:	2c27      	cmp	r4, #39	; 0x27
 800b69a:	f200 8230 	bhi.w	800bafe <LoRaMacMibSetRequestConfirm+0x482>
 800b69e:	e8df f014 	tbh	[pc, r4, lsl #1]
 800b6a2:	0028      	.short	0x0028
 800b6a4:	0036002d 	.word	0x0036002d
 800b6a8:	0047003f 	.word	0x0047003f
 800b6ac:	0053004d 	.word	0x0053004d
 800b6b0:	00660059 	.word	0x00660059
 800b6b4:	00800073 	.word	0x00800073
 800b6b8:	009a008d 	.word	0x009a008d
 800b6bc:	00b400a7 	.word	0x00b400a7
 800b6c0:	00cc00c1 	.word	0x00cc00c1
 800b6c4:	00d2022e 	.word	0x00d2022e
 800b6c8:	011000f7 	.word	0x011000f7
 800b6cc:	0173013d 	.word	0x0173013d
 800b6d0:	01830163 	.word	0x01830163
 800b6d4:	0193018e 	.word	0x0193018e
 800b6d8:	019d0198 	.word	0x019d0198
 800b6dc:	01a701a2 	.word	0x01a701a2
 800b6e0:	01e901bc 	.word	0x01e901bc
 800b6e4:	01fd01d5 	.word	0x01fd01d5
 800b6e8:	020c0204 	.word	0x020c0204
 800b6ec:	02170211 	.word	0x02170211
 800b6f0:	021e      	.short	0x021e
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800b6f2:	7900      	ldrb	r0, [r0, #4]
 800b6f4:	f7ff f9f6 	bl	800aae4 <SwitchClass>
 800b6f8:	4604      	mov	r4, r0
            break;
 800b6fa:	e207      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800b6fc:	7903      	ldrb	r3, [r0, #4]
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	f000 8207 	beq.w	800bb12 <LoRaMacMibSetRequestConfirm+0x496>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800b704:	4a93      	ldr	r2, [pc, #588]	; (800b954 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800b706:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b70a:	2400      	movs	r4, #0
 800b70c:	e1fe      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800b70e:	6840      	ldr	r0, [r0, #4]
 800b710:	f005 f9f8 	bl	8010b04 <SecureElementSetDevEui>
 800b714:	4604      	mov	r4, r0
 800b716:	2800      	cmp	r0, #0
 800b718:	f000 81f8 	beq.w	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b71c:	2403      	movs	r4, #3
 800b71e:	e1f5      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800b720:	6840      	ldr	r0, [r0, #4]
 800b722:	f005 fa03 	bl	8010b2c <SecureElementSetJoinEui>
 800b726:	2800      	cmp	r0, #0
 800b728:	f040 81f0 	bne.w	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b72c:	4604      	mov	r4, r0
 800b72e:	e1ed      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800b730:	7902      	ldrb	r2, [r0, #4]
 800b732:	4b88      	ldr	r3, [pc, #544]	; (800b954 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800b734:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b738:	2400      	movs	r4, #0
            break;
 800b73a:	e1e7      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800b73c:	6842      	ldr	r2, [r0, #4]
 800b73e:	4b85      	ldr	r3, [pc, #532]	; (800b954 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800b740:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b744:	2400      	movs	r4, #0
            break;
 800b746:	e1e1      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800b748:	6842      	ldr	r2, [r0, #4]
 800b74a:	4b82      	ldr	r3, [pc, #520]	; (800b954 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800b74c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b750:	2400      	movs	r4, #0
            break;
 800b752:	e1db      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800b754:	6841      	ldr	r1, [r0, #4]
 800b756:	2900      	cmp	r1, #0
 800b758:	f000 81dd 	beq.w	800bb16 <LoRaMacMibSetRequestConfirm+0x49a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800b75c:	2000      	movs	r0, #0
 800b75e:	f001 fa19 	bl	800cb94 <LoRaMacCryptoSetKey>
 800b762:	4604      	mov	r4, r0
 800b764:	2800      	cmp	r0, #0
 800b766:	f000 81d1 	beq.w	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b76a:	2411      	movs	r4, #17
 800b76c:	e1ce      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800b76e:	6841      	ldr	r1, [r0, #4]
 800b770:	2900      	cmp	r1, #0
 800b772:	f000 81d2 	beq.w	800bb1a <LoRaMacMibSetRequestConfirm+0x49e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800b776:	2001      	movs	r0, #1
 800b778:	f001 fa0c 	bl	800cb94 <LoRaMacCryptoSetKey>
 800b77c:	4604      	mov	r4, r0
 800b77e:	2800      	cmp	r0, #0
 800b780:	f000 81c4 	beq.w	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b784:	2411      	movs	r4, #17
 800b786:	e1c1      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800b788:	6841      	ldr	r1, [r0, #4]
 800b78a:	2900      	cmp	r1, #0
 800b78c:	f000 81c7 	beq.w	800bb1e <LoRaMacMibSetRequestConfirm+0x4a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800b790:	2002      	movs	r0, #2
 800b792:	f001 f9ff 	bl	800cb94 <LoRaMacCryptoSetKey>
 800b796:	4604      	mov	r4, r0
 800b798:	2800      	cmp	r0, #0
 800b79a:	f000 81b7 	beq.w	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b79e:	2411      	movs	r4, #17
 800b7a0:	e1b4      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800b7a2:	6841      	ldr	r1, [r0, #4]
 800b7a4:	2900      	cmp	r1, #0
 800b7a6:	f000 81bc 	beq.w	800bb22 <LoRaMacMibSetRequestConfirm+0x4a6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800b7aa:	2003      	movs	r0, #3
 800b7ac:	f001 f9f2 	bl	800cb94 <LoRaMacCryptoSetKey>
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	f000 81aa 	beq.w	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b7b8:	2411      	movs	r4, #17
 800b7ba:	e1a7      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800b7bc:	6841      	ldr	r1, [r0, #4]
 800b7be:	2900      	cmp	r1, #0
 800b7c0:	f000 81b1 	beq.w	800bb26 <LoRaMacMibSetRequestConfirm+0x4aa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800b7c4:	207f      	movs	r0, #127	; 0x7f
 800b7c6:	f001 f9e5 	bl	800cb94 <LoRaMacCryptoSetKey>
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	f000 819d 	beq.w	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b7d2:	2411      	movs	r4, #17
 800b7d4:	e19a      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800b7d6:	6841      	ldr	r1, [r0, #4]
 800b7d8:	2900      	cmp	r1, #0
 800b7da:	f000 81a6 	beq.w	800bb2a <LoRaMacMibSetRequestConfirm+0x4ae>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800b7de:	2080      	movs	r0, #128	; 0x80
 800b7e0:	f001 f9d8 	bl	800cb94 <LoRaMacCryptoSetKey>
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	f000 8190 	beq.w	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b7ec:	2411      	movs	r4, #17
 800b7ee:	e18d      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800b7f0:	6841      	ldr	r1, [r0, #4]
 800b7f2:	2900      	cmp	r1, #0
 800b7f4:	f000 819b 	beq.w	800bb2e <LoRaMacMibSetRequestConfirm+0x4b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800b7f8:	2081      	movs	r0, #129	; 0x81
 800b7fa:	f001 f9cb 	bl	800cb94 <LoRaMacCryptoSetKey>
 800b7fe:	4604      	mov	r4, r0
 800b800:	2800      	cmp	r0, #0
 800b802:	f000 8183 	beq.w	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b806:	2411      	movs	r4, #17
 800b808:	e180      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800b80a:	6841      	ldr	r1, [r0, #4]
 800b80c:	2900      	cmp	r1, #0
 800b80e:	f000 8190 	beq.w	800bb32 <LoRaMacMibSetRequestConfirm+0x4b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800b812:	2082      	movs	r0, #130	; 0x82
 800b814:	f001 f9be 	bl	800cb94 <LoRaMacCryptoSetKey>
 800b818:	4604      	mov	r4, r0
 800b81a:	2800      	cmp	r0, #0
 800b81c:	f000 8176 	beq.w	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b820:	2411      	movs	r4, #17
 800b822:	e173      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800b824:	7900      	ldrb	r0, [r0, #4]
 800b826:	4b4b      	ldr	r3, [pc, #300]	; (800b954 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800b828:	f883 00fd 	strb.w	r0, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800b82c:	4c4a      	ldr	r4, [pc, #296]	; (800b958 <LoRaMacMibSetRequestConfirm+0x2dc>)
 800b82e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b830:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 800b832:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b834:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b836:	2400      	movs	r4, #0
            /* ST_WORKAROUND_END */
            break;
 800b838:	e168      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800b83a:	7902      	ldrb	r2, [r0, #4]
 800b83c:	4b45      	ldr	r3, [pc, #276]	; (800b954 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800b83e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b842:	2400      	movs	r4, #0
            break;
 800b844:	e162      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b846:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b84a:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b84e:	4b41      	ldr	r3, [pc, #260]	; (800b954 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800b850:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800b854:	f88d 2005 	strb.w	r2, [sp, #5]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800b858:	2207      	movs	r2, #7
 800b85a:	a901      	add	r1, sp, #4
 800b85c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b860:	f001 fbd3 	bl	800d00a <RegionVerify>
 800b864:	b908      	cbnz	r0, 800b86a <LoRaMacMibSetRequestConfirm+0x1ee>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b866:	2403      	movs	r4, #3
 800b868:	e150      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800b86a:	686b      	ldr	r3, [r5, #4]
 800b86c:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800b86e:	2200      	movs	r2, #0
 800b870:	a901      	add	r1, sp, #4
 800b872:	4b38      	ldr	r3, [pc, #224]	; (800b954 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800b874:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b878:	f001 fbc7 	bl	800d00a <RegionVerify>
 800b87c:	2800      	cmp	r0, #0
 800b87e:	f000 815a 	beq.w	800bb36 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800b882:	4b36      	ldr	r3, [pc, #216]	; (800b95c <LoRaMacMibSetRequestConfirm+0x2e0>)
 800b884:	68a9      	ldr	r1, [r5, #8]
 800b886:	6868      	ldr	r0, [r5, #4]
 800b888:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b88c:	2400      	movs	r4, #0
 800b88e:	e13d      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            /* ST_WORKAROUND_END */
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b890:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b894:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b898:	4b2e      	ldr	r3, [pc, #184]	; (800b954 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800b89a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800b89e:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800b8a2:	2207      	movs	r2, #7
 800b8a4:	a901      	add	r1, sp, #4
 800b8a6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b8aa:	f001 fbae 	bl	800d00a <RegionVerify>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	f000 8143 	beq.w	800bb3a <LoRaMacMibSetRequestConfirm+0x4be>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800b8b4:	4b2a      	ldr	r3, [pc, #168]	; (800b960 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800b8b6:	68a9      	ldr	r1, [r5, #8]
 800b8b8:	6868      	ldr	r0, [r5, #4]
 800b8ba:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b8be:	2400      	movs	r4, #0
 800b8c0:	e124      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b8c2:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b8c6:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b8ca:	4b22      	ldr	r3, [pc, #136]	; (800b954 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800b8cc:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800b8d0:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800b8d4:	2207      	movs	r2, #7
 800b8d6:	a901      	add	r1, sp, #4
 800b8d8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b8dc:	f001 fb95 	bl	800d00a <RegionVerify>
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	f000 812c 	beq.w	800bb3e <LoRaMacMibSetRequestConfirm+0x4c2>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800b8e6:	4b1b      	ldr	r3, [pc, #108]	; (800b954 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800b8e8:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800b8ec:	68a9      	ldr	r1, [r5, #8]
 800b8ee:	6868      	ldr	r0, [r5, #4]
 800b8f0:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800b8f4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d001      	beq.n	800b900 <LoRaMacMibSetRequestConfirm+0x284>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b8fc:	2400      	movs	r4, #0
 800b8fe:	e105      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800b900:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800b904:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 800b908:	2c00      	cmp	r4, #0
 800b90a:	f000 80ff 	beq.w	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800b90e:	4b12      	ldr	r3, [pc, #72]	; (800b958 <LoRaMacMibSetRequestConfirm+0x2dc>)
 800b910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b912:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800b914:	f7fe ff1c 	bl	800a750 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b918:	2400      	movs	r4, #0
 800b91a:	e0f7      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b91c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b920:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b924:	4b0b      	ldr	r3, [pc, #44]	; (800b954 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800b926:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800b92a:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800b92e:	2207      	movs	r2, #7
 800b930:	a901      	add	r1, sp, #4
 800b932:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b936:	f001 fb68 	bl	800d00a <RegionVerify>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	f000 8101 	beq.w	800bb42 <LoRaMacMibSetRequestConfirm+0x4c6>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800b940:	4b08      	ldr	r3, [pc, #32]	; (800b964 <LoRaMacMibSetRequestConfirm+0x2e8>)
 800b942:	68a9      	ldr	r1, [r5, #8]
 800b944:	6868      	ldr	r0, [r5, #4]
 800b946:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b94a:	2400      	movs	r4, #0
 800b94c:	e0de      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
 800b94e:	bf00      	nop
 800b950:	200003f4 	.word	0x200003f4
 800b954:	200008fc 	.word	0x200008fc
 800b958:	08014674 	.word	0x08014674
 800b95c:	20000960 	.word	0x20000960
 800b960:	200009a0 	.word	0x200009a0
 800b964:	200009a8 	.word	0x200009a8
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800b968:	6843      	ldr	r3, [r0, #4]
 800b96a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800b96c:	2301      	movs	r3, #1
 800b96e:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800b972:	a902      	add	r1, sp, #8
 800b974:	4b7c      	ldr	r3, [pc, #496]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800b976:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b97a:	f001 fb6e 	bl	800d05a <RegionChanMaskSet>
 800b97e:	2800      	cmp	r0, #0
 800b980:	f000 80e1 	beq.w	800bb46 <LoRaMacMibSetRequestConfirm+0x4ca>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b984:	2400      	movs	r4, #0
 800b986:	e0c1      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800b988:	6843      	ldr	r3, [r0, #4]
 800b98a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800b992:	a902      	add	r1, sp, #8
 800b994:	4b74      	ldr	r3, [pc, #464]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800b996:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b99a:	f001 fb5e 	bl	800d05a <RegionChanMaskSet>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	f000 80d3 	beq.w	800bb4a <LoRaMacMibSetRequestConfirm+0x4ce>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b9a4:	2400      	movs	r4, #0
 800b9a6:	e0b1      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800b9a8:	7902      	ldrb	r2, [r0, #4]
 800b9aa:	1e53      	subs	r3, r2, #1
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b0e      	cmp	r3, #14
 800b9b0:	f200 80cd 	bhi.w	800bb4e <LoRaMacMibSetRequestConfirm+0x4d2>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800b9b4:	4b6c      	ldr	r3, [pc, #432]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800b9b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b9ba:	2400      	movs	r4, #0
 800b9bc:	e0a6      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800b9be:	6842      	ldr	r2, [r0, #4]
 800b9c0:	4b69      	ldr	r3, [pc, #420]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800b9c2:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b9c4:	2400      	movs	r4, #0
            break;
 800b9c6:	e0a1      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800b9c8:	6842      	ldr	r2, [r0, #4]
 800b9ca:	4b67      	ldr	r3, [pc, #412]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800b9cc:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b9ce:	2400      	movs	r4, #0
            break;
 800b9d0:	e09c      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800b9d2:	6842      	ldr	r2, [r0, #4]
 800b9d4:	4b64      	ldr	r3, [pc, #400]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800b9d6:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b9d8:	2400      	movs	r4, #0
            break;
 800b9da:	e097      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800b9dc:	6842      	ldr	r2, [r0, #4]
 800b9de:	4b62      	ldr	r3, [pc, #392]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800b9e0:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b9e2:	2400      	movs	r4, #0
            break;
 800b9e4:	e092      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800b9e6:	6842      	ldr	r2, [r0, #4]
 800b9e8:	4b5f      	ldr	r3, [pc, #380]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800b9ea:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b9ec:	2400      	movs	r4, #0
            break;
 800b9ee:	e08d      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800b9f0:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b9f4:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800b9f8:	2206      	movs	r2, #6
 800b9fa:	a901      	add	r1, sp, #4
 800b9fc:	4b5a      	ldr	r3, [pc, #360]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800b9fe:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ba02:	f001 fb02 	bl	800d00a <RegionVerify>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	f000 80a3 	beq.w	800bb52 <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800ba0c:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ba10:	4b55      	ldr	r3, [pc, #340]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800ba12:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba16:	2400      	movs	r4, #0
 800ba18:	e078      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800ba1a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ba1e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ba22:	4b51      	ldr	r3, [pc, #324]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800ba24:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800ba28:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ba2c:	2205      	movs	r2, #5
 800ba2e:	a901      	add	r1, sp, #4
 800ba30:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ba34:	f001 fae9 	bl	800d00a <RegionVerify>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	f000 808c 	beq.w	800bb56 <LoRaMacMibSetRequestConfirm+0x4da>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ba3e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ba42:	4b49      	ldr	r3, [pc, #292]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800ba44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba48:	2400      	movs	r4, #0
 800ba4a:	e05f      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800ba4c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ba50:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800ba54:	220a      	movs	r2, #10
 800ba56:	a901      	add	r1, sp, #4
 800ba58:	4b43      	ldr	r3, [pc, #268]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800ba5a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ba5e:	f001 fad4 	bl	800d00a <RegionVerify>
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d079      	beq.n	800bb5a <LoRaMacMibSetRequestConfirm+0x4de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800ba66:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ba6a:	4b3f      	ldr	r3, [pc, #252]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800ba6c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba70:	2400      	movs	r4, #0
 800ba72:	e04b      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800ba74:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ba78:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800ba7c:	2209      	movs	r2, #9
 800ba7e:	a901      	add	r1, sp, #4
 800ba80:	4b39      	ldr	r3, [pc, #228]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800ba82:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ba86:	f001 fac0 	bl	800d00a <RegionVerify>
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	d067      	beq.n	800bb5e <LoRaMacMibSetRequestConfirm+0x4e2>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800ba8e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ba92:	4b35      	ldr	r3, [pc, #212]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800ba94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba98:	2400      	movs	r4, #0
 800ba9a:	e037      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800ba9c:	6842      	ldr	r2, [r0, #4]
 800ba9e:	4b32      	ldr	r3, [pc, #200]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800baa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800baa4:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800baa6:	2400      	movs	r4, #0
            break;
 800baa8:	e030      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800baaa:	7902      	ldrb	r2, [r0, #4]
 800baac:	4b2e      	ldr	r3, [pc, #184]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800baae:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800bab2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bab6:	2400      	movs	r4, #0
            break;
 800bab8:	e028      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800baba:	6842      	ldr	r2, [r0, #4]
 800babc:	4b2a      	ldr	r3, [pc, #168]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800babe:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bac0:	2400      	movs	r4, #0
            break;
 800bac2:	e023      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800bac4:	6842      	ldr	r2, [r0, #4]
 800bac6:	4b28      	ldr	r3, [pc, #160]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800bac8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bacc:	2400      	movs	r4, #0
            break;
 800bace:	e01d      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 800bad0:	6840      	ldr	r0, [r0, #4]
 800bad2:	2800      	cmp	r0, #0
 800bad4:	d045      	beq.n	800bb62 <LoRaMacMibSetRequestConfirm+0x4e6>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 800bad6:	f7fe fdaf 	bl	800a638 <RestoreNvmData>
 800bada:	4604      	mov	r4, r0
 800badc:	e016      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800bade:	7983      	ldrb	r3, [r0, #6]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d901      	bls.n	800bae8 <LoRaMacMibSetRequestConfirm+0x46c>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bae4:	2403      	movs	r4, #3
 800bae6:	e011      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800bae8:	6842      	ldr	r2, [r0, #4]
 800baea:	4b1f      	ldr	r3, [pc, #124]	; (800bb68 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800baec:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800baf0:	6840      	ldr	r0, [r0, #4]
 800baf2:	f000 fee3 	bl	800c8bc <LoRaMacCryptoSetLrWanVersion>
 800baf6:	4604      	mov	r4, r0
 800baf8:	b140      	cbz	r0, 800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800bafa:	2411      	movs	r4, #17
 800bafc:	e006      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800bafe:	f000 fa6e 	bl	800bfde <LoRaMacMibClassBSetRequestConfirm>
 800bb02:	4604      	mov	r4, r0
            break;
 800bb04:	e002      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bb06:	2403      	movs	r4, #3
 800bb08:	e000      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
        return LORAMAC_STATUS_BUSY;
 800bb0a:	2401      	movs	r4, #1
        }
    }
    return status;
}
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	b005      	add	sp, #20
 800bb10:	bd30      	pop	{r4, r5, pc}
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb12:	2403      	movs	r4, #3
 800bb14:	e7fa      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb16:	2403      	movs	r4, #3
 800bb18:	e7f8      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb1a:	2403      	movs	r4, #3
 800bb1c:	e7f6      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb1e:	2403      	movs	r4, #3
 800bb20:	e7f4      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb22:	2403      	movs	r4, #3
 800bb24:	e7f2      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb26:	2403      	movs	r4, #3
 800bb28:	e7f0      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb2a:	2403      	movs	r4, #3
 800bb2c:	e7ee      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb2e:	2403      	movs	r4, #3
 800bb30:	e7ec      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb32:	2403      	movs	r4, #3
 800bb34:	e7ea      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb36:	2403      	movs	r4, #3
 800bb38:	e7e8      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb3a:	2403      	movs	r4, #3
 800bb3c:	e7e6      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb3e:	2403      	movs	r4, #3
 800bb40:	e7e4      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb42:	2403      	movs	r4, #3
 800bb44:	e7e2      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb46:	2403      	movs	r4, #3
 800bb48:	e7e0      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb4a:	2403      	movs	r4, #3
 800bb4c:	e7de      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb4e:	2403      	movs	r4, #3
 800bb50:	e7dc      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb52:	2403      	movs	r4, #3
 800bb54:	e7da      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb56:	2403      	movs	r4, #3
 800bb58:	e7d8      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb5a:	2403      	movs	r4, #3
 800bb5c:	e7d6      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb5e:	2403      	movs	r4, #3
 800bb60:	e7d4      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb62:	2403      	movs	r4, #3
 800bb64:	e7d2      	b.n	800bb0c <LoRaMacMibSetRequestConfirm+0x490>
 800bb66:	bf00      	nop
 800bb68:	200008fc 	.word	0x200008fc

0800bb6c <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800bb6c:	b570      	push	{r4, r5, r6, lr}
 800bb6e:	b082      	sub	sp, #8
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800bb70:	2300      	movs	r3, #0
 800bb72:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 800bb76:	2800      	cmp	r0, #0
 800bb78:	f000 80c5 	beq.w	800bd06 <LoRaMacMlmeRequest+0x19a>
 800bb7c:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 800bb7e:	f7ff f9e7 	bl	800af50 <LoRaMacIsBusy>
 800bb82:	b118      	cbz	r0, 800bb8c <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 800bb84:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800bb86:	4620      	mov	r0, r4
 800bb88:	b002      	add	sp, #8
 800bb8a:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800bb8c:	f000 fccc 	bl	800c528 <LoRaMacConfirmQueueIsFull>
 800bb90:	b108      	cbz	r0, 800bb96 <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 800bb92:	2401      	movs	r4, #1
 800bb94:	e7f7      	b.n	800bb86 <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800bb96:	f000 fcc1 	bl	800c51c <LoRaMacConfirmQueueGetCnt>
 800bb9a:	b1f8      	cbz	r0, 800bbdc <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bb9c:	4b5b      	ldr	r3, [pc, #364]	; (800bd0c <LoRaMacMlmeRequest+0x1a0>)
 800bb9e:	2101      	movs	r1, #1
 800bba0:	f883 144d 	strb.w	r1, [r3, #1101]	; 0x44d
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800bba4:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800bba8:	f042 0204 	orr.w	r2, r2, #4
 800bbac:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 800bbb0:	782b      	ldrb	r3, [r5, #0]
 800bbb2:	f88d 3004 	strb.w	r3, [sp, #4]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bbb6:	f88d 1005 	strb.w	r1, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f88d 2007 	strb.w	r2, [sp, #7]
    switch( mlmeRequest->Type )
 800bbc0:	461c      	mov	r4, r3
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	2b0d      	cmp	r3, #13
 800bbc6:	f200 8084 	bhi.w	800bcd2 <LoRaMacMlmeRequest+0x166>
 800bbca:	e8df f003 	tbb	[pc, r3]
 800bbce:	820d      	.short	0x820d
 800bbd0:	423d3382 	.word	0x423d3382
 800bbd4:	4b828282 	.word	0x4b828282
 800bbd8:	6a547382 	.word	0x6a547382
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800bbdc:	2214      	movs	r2, #20
 800bbde:	2100      	movs	r1, #0
 800bbe0:	484b      	ldr	r0, [pc, #300]	; (800bd10 <LoRaMacMlmeRequest+0x1a4>)
 800bbe2:	f004 fffa 	bl	8010bda <memset1>
 800bbe6:	e7d9      	b.n	800bb9c <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800bbe8:	4b48      	ldr	r3, [pc, #288]	; (800bd0c <LoRaMacMlmeRequest+0x1a0>)
 800bbea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800bbee:	f013 0f20 	tst.w	r3, #32
 800bbf2:	d1c8      	bne.n	800bb86 <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800bbf4:	f7fe fed4 	bl	800a9a0 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800bbf8:	4c46      	ldr	r4, [pc, #280]	; (800bd14 <LoRaMacMlmeRequest+0x1a8>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f995 1004 	ldrsb.w	r1, [r5, #4]
 800bc00:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bc04:	f001 faf1 	bl	800d1ea <RegionAlternateDr>
 800bc08:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800bc0c:	2307      	movs	r3, #7
 800bc0e:	f88d 3005 	strb.w	r3, [sp, #5]
            status = SendReJoinReq( JOIN_REQ );
 800bc12:	20ff      	movs	r0, #255	; 0xff
 800bc14:	f7fe ffea 	bl	800abec <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 800bc18:	4604      	mov	r4, r0
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	d05a      	beq.n	800bcd4 <LoRaMacMlmeRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800bc1e:	4e3d      	ldr	r6, [pc, #244]	; (800bd14 <LoRaMacMlmeRequest+0x1a8>)
 800bc20:	2201      	movs	r2, #1
 800bc22:	f995 1004 	ldrsb.w	r1, [r5, #4]
 800bc26:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800bc2a:	f001 fade 	bl	800d1ea <RegionAlternateDr>
 800bc2e:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800bc32:	e04f      	b.n	800bcd4 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800bc34:	2200      	movs	r2, #0
 800bc36:	4669      	mov	r1, sp
 800bc38:	2002      	movs	r0, #2
 800bc3a:	f000 fa6d 	bl	800c118 <LoRaMacCommandsAddCmd>
 800bc3e:	4604      	mov	r4, r0
 800bc40:	2800      	cmp	r0, #0
 800bc42:	d047      	beq.n	800bcd4 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bc44:	2413      	movs	r4, #19
 800bc46:	e045      	b.n	800bcd4 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800bc48:	88a8      	ldrh	r0, [r5, #4]
 800bc4a:	f7fe fffd 	bl	800ac48 <SetTxContinuousWave>
 800bc4e:	4604      	mov	r4, r0
            break;
 800bc50:	e040      	b.n	800bcd4 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800bc52:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800bc56:	b2d2      	uxtb	r2, r2
 800bc58:	68a9      	ldr	r1, [r5, #8]
 800bc5a:	88a8      	ldrh	r0, [r5, #4]
 800bc5c:	f7fd f8b4 	bl	8008dc8 <SetTxContinuousWave1>
 800bc60:	4604      	mov	r4, r0
            break;
 800bc62:	e037      	b.n	800bcd4 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800bc64:	2200      	movs	r2, #0
 800bc66:	4669      	mov	r1, sp
 800bc68:	200d      	movs	r0, #13
 800bc6a:	f000 fa55 	bl	800c118 <LoRaMacCommandsAddCmd>
 800bc6e:	4604      	mov	r4, r0
 800bc70:	b380      	cbz	r0, 800bcd4 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bc72:	2413      	movs	r4, #19
 800bc74:	e02e      	b.n	800bcd4 <LoRaMacMlmeRequest+0x168>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800bc76:	4b27      	ldr	r3, [pc, #156]	; (800bd14 <LoRaMacMlmeRequest+0x1a8>)
 800bc78:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800bc7c:	b10b      	cbz	r3, 800bc82 <LoRaMacMlmeRequest+0x116>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800bc7e:	2402      	movs	r4, #2
 800bc80:	e028      	b.n	800bcd4 <LoRaMacMlmeRequest+0x168>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800bc82:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800bc84:	f004 0007 	and.w	r0, r4, #7
 800bc88:	f000 f9a2 	bl	800bfd0 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800bc8c:	f88d 4000 	strb.w	r4, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800bc90:	2201      	movs	r2, #1
 800bc92:	4669      	mov	r1, sp
 800bc94:	2010      	movs	r0, #16
 800bc96:	f000 fa3f 	bl	800c118 <LoRaMacCommandsAddCmd>
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	b1d0      	cbz	r0, 800bcd4 <LoRaMacMlmeRequest+0x168>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bc9e:	2413      	movs	r4, #19
 800bca0:	e018      	b.n	800bcd4 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800bca2:	2200      	movs	r2, #0
 800bca4:	4669      	mov	r1, sp
 800bca6:	2012      	movs	r0, #18
 800bca8:	f000 fa36 	bl	800c118 <LoRaMacCommandsAddCmd>
 800bcac:	4604      	mov	r4, r0
 800bcae:	b188      	cbz	r0, 800bcd4 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bcb0:	2413      	movs	r4, #19
 800bcb2:	e00f      	b.n	800bcd4 <LoRaMacMlmeRequest+0x168>
            queueElement.RestrictCommonReadyToHandle = true;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800bcba:	f000 f97a 	bl	800bfb2 <LoRaMacClassBIsAcquisitionInProgress>
 800bcbe:	b108      	cbz	r0, 800bcc4 <LoRaMacMlmeRequest+0x158>
                status = LORAMAC_STATUS_BUSY;
 800bcc0:	2401      	movs	r4, #1
 800bcc2:	e007      	b.n	800bcd4 <LoRaMacMlmeRequest+0x168>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800bcc4:	f000 f972 	bl	800bfac <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800bcc8:	2000      	movs	r0, #0
 800bcca:	f000 f974 	bl	800bfb6 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800bcce:	2400      	movs	r4, #0
 800bcd0:	e000      	b.n	800bcd4 <LoRaMacMlmeRequest+0x168>
    switch( mlmeRequest->Type )
 800bcd2:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800bcd4:	4b0d      	ldr	r3, [pc, #52]	; (800bd0c <LoRaMacMlmeRequest+0x1a0>)
 800bcd6:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800bcda:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800bcdc:	b17c      	cbz	r4, 800bcfe <LoRaMacMlmeRequest+0x192>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800bcde:	f000 fc1d 	bl	800c51c <LoRaMacConfirmQueueGetCnt>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	f47f af4f 	bne.w	800bb86 <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 800bce8:	4b08      	ldr	r3, [pc, #32]	; (800bd0c <LoRaMacMlmeRequest+0x1a0>)
 800bcea:	2100      	movs	r1, #0
 800bcec:	f883 1414 	strb.w	r1, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800bcf0:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800bcf4:	f361 0282 	bfi	r2, r1, #2, #1
 800bcf8:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800bcfc:	e743      	b.n	800bb86 <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 800bcfe:	a801      	add	r0, sp, #4
 800bd00:	f000 fb48 	bl	800c394 <LoRaMacConfirmQueueAdd>
 800bd04:	e73f      	b.n	800bb86 <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bd06:	2403      	movs	r4, #3
 800bd08:	e73d      	b.n	800bb86 <LoRaMacMlmeRequest+0x1a>
 800bd0a:	bf00      	nop
 800bd0c:	200003f4 	.word	0x200003f4
 800bd10:	20000840 	.word	0x20000840
 800bd14:	200008fc 	.word	0x200008fc

0800bd18 <LoRaMacMcpsRequest>:
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	f000 80af 	beq.w	800be7c <LoRaMacMcpsRequest+0x164>
{
 800bd1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd22:	b088      	sub	sp, #32
 800bd24:	460d      	mov	r5, r1
 800bd26:	f04f 0800 	mov.w	r8, #0
 800bd2a:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 800bd2c:	f7ff f910 	bl	800af50 <LoRaMacIsBusy>
 800bd30:	4606      	mov	r6, r0
 800bd32:	b118      	cbz	r0, 800bd3c <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800bd34:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800bd36:	b008      	add	sp, #32
 800bd38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 800bd3c:	4641      	mov	r1, r8
 800bd3e:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800bd42:	4f50      	ldr	r7, [pc, #320]	; (800be84 <LoRaMacMcpsRequest+0x16c>)
 800bd44:	2214      	movs	r2, #20
 800bd46:	f507 6087 	add.w	r0, r7, #1080	; 0x438
 800bd4a:	f004 ff46 	bl	8010bda <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
    MacCtx.AckTimeoutRetriesCounter = 1;
 800bd54:	f887 3412 	strb.w	r3, [r7, #1042]	; 0x412
    switch( mcpsRequest->Type )
 800bd58:	7823      	ldrb	r3, [r4, #0]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d058      	beq.n	800be10 <LoRaMacMcpsRequest+0xf8>
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	d06e      	beq.n	800be40 <LoRaMacMcpsRequest+0x128>
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d041      	beq.n	800bdea <LoRaMacMcpsRequest+0xd2>
 800bd66:	2700      	movs	r7, #0
 800bd68:	46ba      	mov	sl, r7
 800bd6a:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bd72:	4b45      	ldr	r3, [pc, #276]	; (800be88 <LoRaMacMcpsRequest+0x170>)
 800bd74:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800bd78:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bd7c:	a906      	add	r1, sp, #24
 800bd7e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800bd82:	f001 f8fe 	bl	800cf82 <RegionGetPhyParam>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800bd86:	b240      	sxtb	r0, r0
 800bd88:	42b8      	cmp	r0, r7
 800bd8a:	bfb8      	it	lt
 800bd8c:	4638      	movlt	r0, r7
    if( readyToSend == true )
 800bd8e:	2e00      	cmp	r6, #0
 800bd90:	d06e      	beq.n	800be70 <LoRaMacMcpsRequest+0x158>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800bd92:	4b3d      	ldr	r3, [pc, #244]	; (800be88 <LoRaMacMcpsRequest+0x170>)
 800bd94:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800bd98:	b99b      	cbnz	r3, 800bdc2 <LoRaMacMcpsRequest+0xaa>
            verify.DatarateParams.Datarate = datarate;
 800bd9a:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bd9e:	4b3a      	ldr	r3, [pc, #232]	; (800be88 <LoRaMacMcpsRequest+0x170>)
 800bda0:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800bda4:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800bda8:	2205      	movs	r2, #5
 800bdaa:	a903      	add	r1, sp, #12
 800bdac:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800bdb0:	f001 f92b 	bl	800d00a <RegionVerify>
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d063      	beq.n	800be80 <LoRaMacMcpsRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800bdb8:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 800bdbc:	4b32      	ldr	r3, [pc, #200]	; (800be88 <LoRaMacMcpsRequest+0x170>)
 800bdbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800bdc2:	9500      	str	r5, [sp, #0]
 800bdc4:	4643      	mov	r3, r8
 800bdc6:	4652      	mov	r2, sl
 800bdc8:	4649      	mov	r1, r9
 800bdca:	a804      	add	r0, sp, #16
 800bdcc:	f7ff f828 	bl	800ae20 <Send>
        if( status == LORAMAC_STATUS_OK )
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d148      	bne.n	800be66 <LoRaMacMcpsRequest+0x14e>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800bdd4:	7822      	ldrb	r2, [r4, #0]
 800bdd6:	4b2b      	ldr	r3, [pc, #172]	; (800be84 <LoRaMacMcpsRequest+0x16c>)
 800bdd8:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800bddc:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800bde0:	f042 0201 	orr.w	r2, r2, #1
 800bde4:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800bde8:	e043      	b.n	800be72 <LoRaMacMcpsRequest+0x15a>
            MacCtx.AckTimeoutRetries = 1;
 800bdea:	2601      	movs	r6, #1
 800bdec:	f887 6411 	strb.w	r6, [r7, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800bdf0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800bdf4:	2202      	movs	r2, #2
 800bdf6:	f362 1347 	bfi	r3, r2, #5, #3
 800bdfa:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800bdfe:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800be02:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800be06:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800be0a:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 800be0e:	e7ad      	b.n	800bd6c <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800be10:	7be3      	ldrb	r3, [r4, #15]
 800be12:	2b08      	cmp	r3, #8
 800be14:	bf28      	it	cs
 800be16:	2308      	movcs	r3, #8
 800be18:	4a1a      	ldr	r2, [pc, #104]	; (800be84 <LoRaMacMcpsRequest+0x16c>)
 800be1a:	f882 3411 	strb.w	r3, [r2, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800be1e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800be22:	2204      	movs	r2, #4
 800be24:	f362 1347 	bfi	r3, r2, #5, #3
 800be28:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800be2c:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800be30:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800be34:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800be38:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 800be3c:	2601      	movs	r6, #1
            break;
 800be3e:	e795      	b.n	800bd6c <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 800be40:	2601      	movs	r6, #1
 800be42:	4b10      	ldr	r3, [pc, #64]	; (800be84 <LoRaMacMcpsRequest+0x16c>)
 800be44:	f883 6411 	strb.w	r6, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800be48:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800be4c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800be50:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800be54:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800be58:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800be5c:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 800be60:	f04f 0900 	mov.w	r9, #0
            break;
 800be64:	e782      	b.n	800bd6c <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 800be66:	4b07      	ldr	r3, [pc, #28]	; (800be84 <LoRaMacMcpsRequest+0x16c>)
 800be68:	2200      	movs	r2, #0
 800be6a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800be6e:	e000      	b.n	800be72 <LoRaMacMcpsRequest+0x15a>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800be70:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800be72:	4b04      	ldr	r3, [pc, #16]	; (800be84 <LoRaMacMcpsRequest+0x16c>)
 800be74:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800be78:	6123      	str	r3, [r4, #16]
    return status;
 800be7a:	e75c      	b.n	800bd36 <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800be7c:	2003      	movs	r0, #3
}
 800be7e:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800be80:	2003      	movs	r0, #3
 800be82:	e758      	b.n	800bd36 <LoRaMacMcpsRequest+0x1e>
 800be84:	200003f4 	.word	0x200003f4
 800be88:	200008fc 	.word	0x200008fc

0800be8c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800be8c:	b510      	push	{r4, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800be92:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800be96:	220f      	movs	r2, #15
 800be98:	a901      	add	r1, sp, #4
 800be9a:	4b05      	ldr	r3, [pc, #20]	; (800beb0 <LoRaMacTestSetDutyCycleOn+0x24>)
 800be9c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800bea0:	f001 f8b3 	bl	800d00a <RegionVerify>
 800bea4:	b110      	cbz	r0, 800beac <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800bea6:	4b02      	ldr	r3, [pc, #8]	; (800beb0 <LoRaMacTestSetDutyCycleOn+0x24>)
 800bea8:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
    }
}
 800beac:	b002      	add	sp, #8
 800beae:	bd10      	pop	{r4, pc}
 800beb0:	200008fc 	.word	0x200008fc

0800beb4 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800beb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb8:	b089      	sub	sp, #36	; 0x24
 800beba:	460f      	mov	r7, r1
 800bebc:	4616      	mov	r6, r2
 800bebe:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800bec0:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800bec4:	f990 a011 	ldrsb.w	sl, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800bec8:	6883      	ldr	r3, [r0, #8]
 800beca:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 800becc:	f890 8005 	ldrb.w	r8, [r0, #5]
 800bed0:	f1b8 0f00 	cmp.w	r8, #0
 800bed4:	d107      	bne.n	800bee6 <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 800bed6:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800beda:	f886 a000 	strb.w	sl, [r6]
    return adrAckReq;
}
 800bede:	4640      	mov	r0, r8
 800bee0:	b009      	add	sp, #36	; 0x24
 800bee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee6:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800bee8:	2302      	movs	r3, #2
 800beea:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800beee:	7c83      	ldrb	r3, [r0, #18]
 800bef0:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800bef4:	a906      	add	r1, sp, #24
 800bef6:	7cc0      	ldrb	r0, [r0, #19]
 800bef8:	f001 f843 	bl	800cf82 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800befc:	fa4f fb80 	sxtb.w	fp, r0
        datarate = MAX( datarate, minTxDatarate );
 800bf00:	464a      	mov	r2, r9
 800bf02:	45d9      	cmp	r9, fp
 800bf04:	bfb8      	it	lt
 800bf06:	465a      	movlt	r2, fp
 800bf08:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800bf0a:	45d9      	cmp	r9, fp
 800bf0c:	dc04      	bgt.n	800bf18 <CalcNextV10X+0x64>
            *adrAckCounter = 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800bf12:	4691      	mov	r9, r2
            adrAckReq = false;
 800bf14:	4698      	mov	r8, r3
 800bf16:	e7de      	b.n	800bed6 <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800bf18:	68a2      	ldr	r2, [r4, #8]
 800bf1a:	89a3      	ldrh	r3, [r4, #12]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d201      	bcs.n	800bf24 <CalcNextV10X+0x70>
                adrAckReq = false;
 800bf20:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800bf24:	89e1      	ldrh	r1, [r4, #14]
 800bf26:	440b      	add	r3, r1
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d202      	bcs.n	800bf32 <CalcNextV10X+0x7e>
        datarate = MAX( datarate, minTxDatarate );
 800bf2c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bf30:	e7d1      	b.n	800bed6 <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800bf32:	2308      	movs	r3, #8
 800bf34:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800bf38:	a906      	add	r1, sp, #24
 800bf3a:	7ce0      	ldrb	r0, [r4, #19]
 800bf3c:	f001 f821 	bl	800cf82 <RegionGetPhyParam>
                txPower = phyParam.Value;
 800bf40:	fa4f fa80 	sxtb.w	sl, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800bf44:	68a1      	ldr	r1, [r4, #8]
 800bf46:	89e2      	ldrh	r2, [r4, #14]
 800bf48:	fbb1 f3f2 	udiv	r3, r1, r2
 800bf4c:	fb02 1313 	mls	r3, r2, r3, r1
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d002      	beq.n	800bf5a <CalcNextV10X+0xa6>
        datarate = MAX( datarate, minTxDatarate );
 800bf54:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bf58:	e7bd      	b.n	800bed6 <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800bf5a:	2322      	movs	r3, #34	; 0x22
 800bf5c:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 800bf60:	9b01      	ldr	r3, [sp, #4]
 800bf62:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800bf66:	7ca3      	ldrb	r3, [r4, #18]
 800bf68:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800bf6c:	a906      	add	r1, sp, #24
 800bf6e:	7ce0      	ldrb	r0, [r4, #19]
 800bf70:	f001 f807 	bl	800cf82 <RegionGetPhyParam>
                    datarate = phyParam.Value;
 800bf74:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800bf78:	45cb      	cmp	fp, r9
 800bf7a:	d1ac      	bne.n	800bed6 <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 800bf7c:	f894 8004 	ldrb.w	r8, [r4, #4]
 800bf80:	f1b8 0f00 	cmp.w	r8, #0
 800bf84:	d0a7      	beq.n	800bed6 <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800bf86:	2302      	movs	r3, #2
 800bf88:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 800bf8c:	a902      	add	r1, sp, #8
 800bf8e:	7ce0      	ldrb	r0, [r4, #19]
 800bf90:	f001 f828 	bl	800cfe4 <RegionInitDefaults>
                        adrAckReq = false;
 800bf94:	f04f 0800 	mov.w	r8, #0
 800bf98:	e79d      	b.n	800bed6 <CalcNextV10X+0x22>

0800bf9a <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800bf9a:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800bf9c:	7884      	ldrb	r4, [r0, #2]
 800bf9e:	b10c      	cbz	r4, 800bfa4 <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800bfa0:	2000      	movs	r0, #0
}
 800bfa2:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800bfa4:	f7ff ff86 	bl	800beb4 <CalcNextV10X>
 800bfa8:	e7fb      	b.n	800bfa2 <LoRaMacAdrCalcNext+0x8>

0800bfaa <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfaa:	4770      	bx	lr

0800bfac <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfac:	4770      	bx	lr

0800bfae <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfae:	4770      	bx	lr

0800bfb0 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfb0:	4770      	bx	lr

0800bfb2 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	4770      	bx	lr

0800bfb6 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfb6:	4770      	bx	lr

0800bfb8 <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfb8:	4770      	bx	lr

0800bfba <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfba:	4770      	bx	lr

0800bfbc <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	4770      	bx	lr

0800bfc0 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	4770      	bx	lr

0800bfc4 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	4770      	bx	lr

0800bfc8 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfc8:	2000      	movs	r0, #0
 800bfca:	4770      	bx	lr

0800bfcc <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfcc:	2000      	movs	r0, #0
 800bfce:	4770      	bx	lr

0800bfd0 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfd0:	4770      	bx	lr

0800bfd2 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfd2:	4770      	bx	lr

0800bfd4 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfd4:	4770      	bx	lr

0800bfd6 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfd6:	2002      	movs	r0, #2
 800bfd8:	4770      	bx	lr

0800bfda <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfda:	2002      	movs	r0, #2
 800bfdc:	4770      	bx	lr

0800bfde <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfde:	2002      	movs	r0, #2
 800bfe0:	4770      	bx	lr

0800bfe2 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfe2:	4770      	bx	lr

0800bfe4 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfe4:	2000      	movs	r0, #0
 800bfe6:	4770      	bx	lr

0800bfe8 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfe8:	4770      	bx	lr

0800bfea <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfea:	4770      	bx	lr

0800bfec <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bfec:	2000      	movs	r0, #0
 800bfee:	4770      	bx	lr

0800bff0 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bff0:	2000      	movs	r0, #0
 800bff2:	4770      	bx	lr

0800bff4 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bff4:	4770      	bx	lr

0800bff6 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bff6:	4770      	bx	lr

0800bff8 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800bff8:	2300      	movs	r3, #0
 800bffa:	2b0f      	cmp	r3, #15
 800bffc:	d804      	bhi.n	800c008 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800bffe:	5cc2      	ldrb	r2, [r0, r3]
 800c000:	b922      	cbnz	r2, 800c00c <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800c002:	3301      	adds	r3, #1
 800c004:	b29b      	uxth	r3, r3
 800c006:	e7f8      	b.n	800bffa <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800c008:	2001      	movs	r0, #1
 800c00a:	4770      	bx	lr
            return false;
 800c00c:	2000      	movs	r0, #0
}
 800c00e:	4770      	bx	lr

0800c010 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800c010:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800c012:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800c014:	0125      	lsls	r5, r4, #4
 800c016:	f105 0308 	add.w	r3, r5, #8
 800c01a:	4d06      	ldr	r5, [pc, #24]	; (800c034 <MallocNewMacCommandSlot+0x24>)
 800c01c:	441d      	add	r5, r3
 800c01e:	4628      	mov	r0, r5
 800c020:	f7ff ffea 	bl	800bff8 <IsSlotFree>
 800c024:	b920      	cbnz	r0, 800c030 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800c026:	3401      	adds	r4, #1
 800c028:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800c02a:	2c0f      	cmp	r4, #15
 800c02c:	d1f2      	bne.n	800c014 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800c02e:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800c030:	4628      	mov	r0, r5
 800c032:	bd38      	pop	{r3, r4, r5, pc}
 800c034:	20000f0c 	.word	0x20000f0c

0800c038 <LinkedListInit>:
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800c038:	b120      	cbz	r0, 800c044 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800c03a:	2200      	movs	r2, #0
 800c03c:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800c03e:	6042      	str	r2, [r0, #4]

    return true;
 800c040:	2001      	movs	r0, #1
 800c042:	4770      	bx	lr
        return false;
 800c044:	2000      	movs	r0, #0
}
 800c046:	4770      	bx	lr

0800c048 <LinkedListAdd>:
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c048:	4603      	mov	r3, r0
 800c04a:	b160      	cbz	r0, 800c066 <LinkedListAdd+0x1e>
 800c04c:	b169      	cbz	r1, 800c06a <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800c04e:	6802      	ldr	r2, [r0, #0]
 800c050:	b13a      	cbz	r2, 800c062 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800c052:	685a      	ldr	r2, [r3, #4]
 800c054:	b102      	cbz	r2, 800c058 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800c056:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800c058:	2200      	movs	r2, #0
 800c05a:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800c05c:	6059      	str	r1, [r3, #4]

    return true;
 800c05e:	2001      	movs	r0, #1
 800c060:	4770      	bx	lr
        list->First = element;
 800c062:	6001      	str	r1, [r0, #0]
 800c064:	e7f5      	b.n	800c052 <LinkedListAdd+0xa>
        return false;
 800c066:	2000      	movs	r0, #0
 800c068:	4770      	bx	lr
 800c06a:	2000      	movs	r0, #0
}
 800c06c:	4770      	bx	lr

0800c06e <LinkedListGetPrevious>:
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c06e:	b160      	cbz	r0, 800c08a <LinkedListGetPrevious+0x1c>
 800c070:	b161      	cbz	r1, 800c08c <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800c072:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800c074:	4281      	cmp	r1, r0
 800c076:	d102      	bne.n	800c07e <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800c078:	2000      	movs	r0, #0
    }

    return curElement;
}
 800c07a:	4770      	bx	lr
            curElement = curElement->Next;
 800c07c:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800c07e:	2800      	cmp	r0, #0
 800c080:	d0fb      	beq.n	800c07a <LinkedListGetPrevious+0xc>
 800c082:	6803      	ldr	r3, [r0, #0]
 800c084:	428b      	cmp	r3, r1
 800c086:	d1f9      	bne.n	800c07c <LinkedListGetPrevious+0xe>
 800c088:	4770      	bx	lr
 800c08a:	4770      	bx	lr
        return NULL;
 800c08c:	4608      	mov	r0, r1
 800c08e:	4770      	bx	lr

0800c090 <LinkedListRemove>:
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c090:	b1b8      	cbz	r0, 800c0c2 <LinkedListRemove+0x32>
{
 800c092:	b538      	push	{r3, r4, r5, lr}
 800c094:	460c      	mov	r4, r1
 800c096:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800c098:	b1a9      	cbz	r1, 800c0c6 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800c09a:	f7ff ffe8 	bl	800c06e <LinkedListGetPrevious>

    if( list->First == element )
 800c09e:	682b      	ldr	r3, [r5, #0]
 800c0a0:	42a3      	cmp	r3, r4
 800c0a2:	d009      	beq.n	800c0b8 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800c0a4:	686b      	ldr	r3, [r5, #4]
 800c0a6:	42a3      	cmp	r3, r4
 800c0a8:	d009      	beq.n	800c0be <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800c0aa:	b108      	cbz	r0, 800c0b0 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800c0ac:	6823      	ldr	r3, [r4, #0]
 800c0ae:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	6023      	str	r3, [r4, #0]

    return true;
 800c0b4:	2001      	movs	r0, #1
}
 800c0b6:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800c0b8:	6823      	ldr	r3, [r4, #0]
 800c0ba:	602b      	str	r3, [r5, #0]
 800c0bc:	e7f2      	b.n	800c0a4 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800c0be:	6068      	str	r0, [r5, #4]
 800c0c0:	e7f3      	b.n	800c0aa <LinkedListRemove+0x1a>
        return false;
 800c0c2:	2000      	movs	r0, #0
}
 800c0c4:	4770      	bx	lr
        return false;
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	e7f5      	b.n	800c0b6 <LinkedListRemove+0x26>

0800c0ca <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800c0ca:	2805      	cmp	r0, #5
 800c0cc:	d006      	beq.n	800c0dc <IsSticky+0x12>
 800c0ce:	d307      	bcc.n	800c0e0 <IsSticky+0x16>
 800c0d0:	3808      	subs	r0, #8
 800c0d2:	b2c0      	uxtb	r0, r0
 800c0d4:	2802      	cmp	r0, #2
 800c0d6:	d905      	bls.n	800c0e4 <IsSticky+0x1a>
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
        default:
            return false;
 800c0d8:	2000      	movs	r0, #0
 800c0da:	4770      	bx	lr
    switch( cid )
 800c0dc:	2001      	movs	r0, #1
 800c0de:	4770      	bx	lr
            return false;
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	4770      	bx	lr
    switch( cid )
 800c0e4:	2001      	movs	r0, #1
    }
}
 800c0e6:	4770      	bx	lr

0800c0e8 <FreeMacCommandSlot>:
    if( slot == NULL )
 800c0e8:	b130      	cbz	r0, 800c0f8 <FreeMacCommandSlot+0x10>
{
 800c0ea:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800c0ec:	2210      	movs	r2, #16
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	f004 fd73 	bl	8010bda <memset1>
    return true;
 800c0f4:	2001      	movs	r0, #1
}
 800c0f6:	bd08      	pop	{r3, pc}
        return false;
 800c0f8:	2000      	movs	r0, #0
}
 800c0fa:	4770      	bx	lr

0800c0fc <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800c0fc:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800c0fe:	4c05      	ldr	r4, [pc, #20]	; (800c114 <LoRaMacCommandsInit+0x18>)
 800c100:	22fc      	movs	r2, #252	; 0xfc
 800c102:	2100      	movs	r1, #0
 800c104:	4620      	mov	r0, r4
 800c106:	f004 fd68 	bl	8010bda <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800c10a:	4620      	mov	r0, r4
 800c10c:	f7ff ff94 	bl	800c038 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c110:	2000      	movs	r0, #0
 800c112:	bd10      	pop	{r4, pc}
 800c114:	20000f0c 	.word	0x20000f0c

0800c118 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800c118:	b301      	cbz	r1, 800c15c <LoRaMacCommandsAddCmd+0x44>
{
 800c11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11c:	4605      	mov	r5, r0
 800c11e:	4614      	mov	r4, r2
 800c120:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800c122:	f7ff ff75 	bl	800c010 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800c126:	4606      	mov	r6, r0
 800c128:	b1d0      	cbz	r0, 800c160 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800c12a:	4601      	mov	r1, r0
 800c12c:	480e      	ldr	r0, [pc, #56]	; (800c168 <LoRaMacCommandsAddCmd+0x50>)
 800c12e:	f7ff ff8b 	bl	800c048 <LinkedListAdd>
 800c132:	b1b8      	cbz	r0, 800c164 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800c134:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800c136:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800c138:	b2a2      	uxth	r2, r4
 800c13a:	4639      	mov	r1, r7
 800c13c:	1d70      	adds	r0, r6, #5
 800c13e:	f004 fd36 	bl	8010bae <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800c142:	4628      	mov	r0, r5
 800c144:	f7ff ffc1 	bl	800c0ca <IsSticky>
 800c148:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800c14a:	4b07      	ldr	r3, [pc, #28]	; (800c168 <LoRaMacCommandsAddCmd+0x50>)
 800c14c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800c150:	4414      	add	r4, r2
 800c152:	3401      	adds	r4, #1
 800c154:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800c158:	2000      	movs	r0, #0
}
 800c15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c15c:	2001      	movs	r0, #1
}
 800c15e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800c160:	2002      	movs	r0, #2
 800c162:	e7fa      	b.n	800c15a <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800c164:	2005      	movs	r0, #5
 800c166:	e7f8      	b.n	800c15a <LoRaMacCommandsAddCmd+0x42>
 800c168:	20000f0c 	.word	0x20000f0c

0800c16c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800c16c:	b1a0      	cbz	r0, 800c198 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800c16e:	b510      	push	{r4, lr}
 800c170:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800c172:	4601      	mov	r1, r0
 800c174:	480b      	ldr	r0, [pc, #44]	; (800c1a4 <LoRaMacCommandsRemoveCmd+0x38>)
 800c176:	f7ff ff8b 	bl	800c090 <LinkedListRemove>
 800c17a:	b178      	cbz	r0, 800c19c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800c17c:	68a1      	ldr	r1, [r4, #8]
 800c17e:	4a09      	ldr	r2, [pc, #36]	; (800c1a4 <LoRaMacCommandsRemoveCmd+0x38>)
 800c180:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800c184:	1a5b      	subs	r3, r3, r1
 800c186:	3b01      	subs	r3, #1
 800c188:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800c18c:	4620      	mov	r0, r4
 800c18e:	f7ff ffab 	bl	800c0e8 <FreeMacCommandSlot>
 800c192:	b128      	cbz	r0, 800c1a0 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800c194:	2000      	movs	r0, #0
}
 800c196:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c198:	2001      	movs	r0, #1
}
 800c19a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800c19c:	2003      	movs	r0, #3
 800c19e:	e7fa      	b.n	800c196 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800c1a0:	2005      	movs	r0, #5
 800c1a2:	e7f8      	b.n	800c196 <LoRaMacCommandsRemoveCmd+0x2a>
 800c1a4:	20000f0c 	.word	0x20000f0c

0800c1a8 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800c1a8:	4b0a      	ldr	r3, [pc, #40]	; (800c1d4 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800c1aa:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800c1ac:	b120      	cbz	r0, 800c1b8 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800c1ae:	7b03      	ldrb	r3, [r0, #12]
 800c1b0:	b11b      	cbz	r3, 800c1ba <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800c1b2:	6800      	ldr	r0, [r0, #0]
 800c1b4:	e7fa      	b.n	800c1ac <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c1b6:	bd10      	pop	{r4, pc}
 800c1b8:	4770      	bx	lr
{
 800c1ba:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800c1bc:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800c1be:	f7ff ffd5 	bl	800c16c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800c1c2:	4620      	mov	r0, r4
    while( curElement != NULL )
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	d0f6      	beq.n	800c1b6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800c1c8:	7b03      	ldrb	r3, [r0, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d0f6      	beq.n	800c1bc <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800c1ce:	6800      	ldr	r0, [r0, #0]
 800c1d0:	e7f8      	b.n	800c1c4 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800c1d2:	bf00      	nop
 800c1d4:	20000f0c 	.word	0x20000f0c

0800c1d8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800c1d8:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800c1da:	4b08      	ldr	r3, [pc, #32]	; (800c1fc <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800c1dc:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800c1de:	e003      	b.n	800c1e8 <LoRaMacCommandsRemoveStickyAnsCmds+0x10>
    {
        nexElement = curElement->Next;
        if( IsSticky( curElement->CID ) == true )
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	f7ff ffc3 	bl	800c16c <LoRaMacCommandsRemoveCmd>
{
 800c1e6:	462c      	mov	r4, r5
    while( curElement != NULL )
 800c1e8:	b134      	cbz	r4, 800c1f8 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
        nexElement = curElement->Next;
 800c1ea:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800c1ec:	7920      	ldrb	r0, [r4, #4]
 800c1ee:	f7ff ff6c 	bl	800c0ca <IsSticky>
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	d0f7      	beq.n	800c1e6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
 800c1f6:	e7f3      	b.n	800c1e0 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c1f8:	2000      	movs	r0, #0
 800c1fa:	bd38      	pop	{r3, r4, r5, pc}
 800c1fc:	20000f0c 	.word	0x20000f0c

0800c200 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800c200:	b128      	cbz	r0, 800c20e <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800c202:	4a04      	ldr	r2, [pc, #16]	; (800c214 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800c204:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800c208:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800c20a:	2000      	movs	r0, #0
 800c20c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c20e:	2001      	movs	r0, #1
}
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	20000f0c 	.word	0x20000f0c

0800c218 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800c218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800c21c:	4b16      	ldr	r3, [pc, #88]	; (800c278 <LoRaMacCommandsSerializeCmds+0x60>)
 800c21e:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800c220:	b32a      	cbz	r2, 800c26e <LoRaMacCommandsSerializeCmds+0x56>
 800c222:	4607      	mov	r7, r0
 800c224:	4688      	mov	r8, r1
 800c226:	4616      	mov	r6, r2
 800c228:	b319      	cbz	r1, 800c272 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800c22a:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800c22c:	b194      	cbz	r4, 800c254 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800c22e:	1a7a      	subs	r2, r7, r1
 800c230:	68a3      	ldr	r3, [r4, #8]
 800c232:	3301      	adds	r3, #1
 800c234:	429a      	cmp	r2, r3
 800c236:	d30d      	bcc.n	800c254 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800c238:	1c4d      	adds	r5, r1, #1
 800c23a:	b2ed      	uxtb	r5, r5
 800c23c:	7923      	ldrb	r3, [r4, #4]
 800c23e:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800c240:	8922      	ldrh	r2, [r4, #8]
 800c242:	1d61      	adds	r1, r4, #5
 800c244:	1970      	adds	r0, r6, r5
 800c246:	f004 fcb2 	bl	8010bae <memcpy1>
            itr += curElement->PayloadSize;
 800c24a:	68a3      	ldr	r3, [r4, #8]
 800c24c:	441d      	add	r5, r3
 800c24e:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800c250:	6824      	ldr	r4, [r4, #0]
 800c252:	e7eb      	b.n	800c22c <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800c254:	b12c      	cbz	r4, 800c262 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800c256:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800c258:	4620      	mov	r0, r4
 800c25a:	f7ff ff87 	bl	800c16c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800c25e:	462c      	mov	r4, r5
 800c260:	e7f8      	b.n	800c254 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800c262:	4640      	mov	r0, r8
 800c264:	f7ff ffcc 	bl	800c200 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800c268:	2000      	movs	r0, #0
}
 800c26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c26e:	2001      	movs	r0, #1
 800c270:	e7fb      	b.n	800c26a <LoRaMacCommandsSerializeCmds+0x52>
 800c272:	2001      	movs	r0, #1
 800c274:	e7f9      	b.n	800c26a <LoRaMacCommandsSerializeCmds+0x52>
 800c276:	bf00      	nop
 800c278:	20000f0c 	.word	0x20000f0c

0800c27c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800c27c:	4601      	mov	r1, r0
 800c27e:	b170      	cbz	r0, 800c29e <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800c280:	4b08      	ldr	r3, [pc, #32]	; (800c2a4 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800c282:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800c284:	2200      	movs	r2, #0
 800c286:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800c288:	b13b      	cbz	r3, 800c29a <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800c28a:	7b1a      	ldrb	r2, [r3, #12]
 800c28c:	b90a      	cbnz	r2, 800c292 <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	e7fa      	b.n	800c288 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800c292:	2301      	movs	r3, #1
 800c294:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800c296:	2000      	movs	r0, #0
 800c298:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800c29a:	2000      	movs	r0, #0
 800c29c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c29e:	2001      	movs	r0, #1
}
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	20000f0c 	.word	0x20000f0c

0800c2a8 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800c2a8:	1e83      	subs	r3, r0, #2
 800c2aa:	2b11      	cmp	r3, #17
 800c2ac:	d80a      	bhi.n	800c2c4 <LoRaMacCommandsGetCmdSize+0x1c>
 800c2ae:	e8df f003 	tbb	[pc, r3]
 800c2b2:	0b23      	.short	0x0b23
 800c2b4:	110f240d 	.word	0x110f240d
 800c2b8:	09171513 	.word	0x09171513
 800c2bc:	09091909 	.word	0x09091909
 800c2c0:	211f1d1b 	.word	0x211f1d1b
            break;
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	4770      	bx	lr
            cidSize = 5;
 800c2c8:	2005      	movs	r0, #5
            break;
 800c2ca:	4770      	bx	lr
            cidSize = 2;
 800c2cc:	2002      	movs	r0, #2
            break;
 800c2ce:	4770      	bx	lr
            cidSize = 1;
 800c2d0:	2001      	movs	r0, #1
            break;
 800c2d2:	4770      	bx	lr
            cidSize = 6;
 800c2d4:	2006      	movs	r0, #6
            break;
 800c2d6:	4770      	bx	lr
            cidSize = 2;
 800c2d8:	2002      	movs	r0, #2
            break;
 800c2da:	4770      	bx	lr
            cidSize = 2;
 800c2dc:	2002      	movs	r0, #2
            break;
 800c2de:	4770      	bx	lr
            cidSize = 5;
 800c2e0:	2005      	movs	r0, #5
            break;
 800c2e2:	4770      	bx	lr
            cidSize = 6;
 800c2e4:	2006      	movs	r0, #6
            break;
 800c2e6:	4770      	bx	lr
            cidSize = 1;
 800c2e8:	2001      	movs	r0, #1
            break;
 800c2ea:	4770      	bx	lr
            cidSize = 5;
 800c2ec:	2005      	movs	r0, #5
            break;
 800c2ee:	4770      	bx	lr
            cidSize = 4;
 800c2f0:	2004      	movs	r0, #4
            break;
 800c2f2:	4770      	bx	lr
            cidSize = 4;
 800c2f4:	2004      	movs	r0, #4
            break;
 800c2f6:	4770      	bx	lr
            cidSize = 3;
 800c2f8:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800c2fa:	4770      	bx	lr

0800c2fc <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c2fc:	4b03      	ldr	r3, [pc, #12]	; (800c30c <IncreaseBufferPointer+0x10>)
 800c2fe:	4298      	cmp	r0, r3
 800c300:	d001      	beq.n	800c306 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800c302:	3004      	adds	r0, #4
 800c304:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800c306:	4802      	ldr	r0, [pc, #8]	; (800c310 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	20001024 	.word	0x20001024
 800c310:	20001014 	.word	0x20001014

0800c314 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800c314:	b108      	cbz	r0, 800c31a <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800c316:	2000      	movs	r0, #0
 800c318:	4770      	bx	lr
        return true;
 800c31a:	2001      	movs	r0, #1
}
 800c31c:	4770      	bx	lr

0800c31e <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800c31e:	2804      	cmp	r0, #4
 800c320:	d801      	bhi.n	800c326 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800c322:	2000      	movs	r0, #0
 800c324:	4770      	bx	lr
        return true;
 800c326:	2001      	movs	r0, #1
}
 800c328:	4770      	bx	lr
	...

0800c32c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32e:	4606      	mov	r6, r0
 800c330:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c332:	4b0d      	ldr	r3, [pc, #52]	; (800c368 <GetElement+0x3c>)
 800c334:	f893 7020 	ldrb.w	r7, [r3, #32]
 800c338:	4638      	mov	r0, r7
 800c33a:	f7ff ffeb 	bl	800c314 <IsListEmpty>
 800c33e:	b970      	cbnz	r0, 800c35e <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800c340:	2500      	movs	r5, #0
 800c342:	42af      	cmp	r7, r5
 800c344:	d909      	bls.n	800c35a <GetElement+0x2e>
    {
        if( element->Request == request )
 800c346:	7823      	ldrb	r3, [r4, #0]
 800c348:	42b3      	cmp	r3, r6
 800c34a:	d00a      	beq.n	800c362 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800c34c:	4620      	mov	r0, r4
 800c34e:	f7ff ffd5 	bl	800c2fc <IncreaseBufferPointer>
 800c352:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800c354:	3501      	adds	r5, #1
 800c356:	b2ed      	uxtb	r5, r5
 800c358:	e7f3      	b.n	800c342 <GetElement+0x16>
    }

    return NULL;
 800c35a:	2000      	movs	r0, #0
}
 800c35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800c35e:	2000      	movs	r0, #0
 800c360:	e7fc      	b.n	800c35c <GetElement+0x30>
            return element;
 800c362:	4620      	mov	r0, r4
 800c364:	e7fa      	b.n	800c35c <GetElement+0x30>
 800c366:	bf00      	nop
 800c368:	20001008 	.word	0x20001008

0800c36c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800c36c:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800c36e:	4c08      	ldr	r4, [pc, #32]	; (800c390 <LoRaMacConfirmQueueInit+0x24>)
 800c370:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800c372:	2300      	movs	r3, #0
 800c374:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800c378:	f104 000c 	add.w	r0, r4, #12
 800c37c:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800c37e:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800c380:	2214      	movs	r2, #20
 800c382:	21ff      	movs	r1, #255	; 0xff
 800c384:	f004 fc29 	bl	8010bda <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c388:	2301      	movs	r3, #1
 800c38a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800c38e:	bd10      	pop	{r4, pc}
 800c390:	20001008 	.word	0x20001008

0800c394 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800c394:	b538      	push	{r3, r4, r5, lr}
 800c396:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c398:	4b0f      	ldr	r3, [pc, #60]	; (800c3d8 <LoRaMacConfirmQueueAdd+0x44>)
 800c39a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c39e:	f7ff ffbe 	bl	800c31e <IsListFull>
 800c3a2:	b9b8      	cbnz	r0, 800c3d4 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800c3a4:	4c0c      	ldr	r4, [pc, #48]	; (800c3d8 <LoRaMacConfirmQueueAdd+0x44>)
 800c3a6:	68a3      	ldr	r3, [r4, #8]
 800c3a8:	782a      	ldrb	r2, [r5, #0]
 800c3aa:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800c3ac:	68a3      	ldr	r3, [r4, #8]
 800c3ae:	786a      	ldrb	r2, [r5, #1]
 800c3b0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800c3b2:	68a3      	ldr	r3, [r4, #8]
 800c3b4:	78ea      	ldrb	r2, [r5, #3]
 800c3b6:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800c3b8:	68a3      	ldr	r3, [r4, #8]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800c3be:	f894 3020 	ldrb.w	r3, [r4, #32]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800c3c8:	68a0      	ldr	r0, [r4, #8]
 800c3ca:	f7ff ff97 	bl	800c2fc <IncreaseBufferPointer>
 800c3ce:	60a0      	str	r0, [r4, #8]

    return true;
 800c3d0:	2001      	movs	r0, #1
}
 800c3d2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	e7fc      	b.n	800c3d2 <LoRaMacConfirmQueueAdd+0x3e>
 800c3d8:	20001008 	.word	0x20001008

0800c3dc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800c3dc:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c3de:	4b09      	ldr	r3, [pc, #36]	; (800c404 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800c3e0:	f893 4020 	ldrb.w	r4, [r3, #32]
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f7ff ff95 	bl	800c314 <IsListEmpty>
 800c3ea:	b948      	cbnz	r0, 800c400 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800c3ec:	4d05      	ldr	r5, [pc, #20]	; (800c404 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800c3ee:	3c01      	subs	r4, #1
 800c3f0:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800c3f4:	6868      	ldr	r0, [r5, #4]
 800c3f6:	f7ff ff81 	bl	800c2fc <IncreaseBufferPointer>
 800c3fa:	6068      	str	r0, [r5, #4]

    return true;
 800c3fc:	2001      	movs	r0, #1
}
 800c3fe:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800c400:	2000      	movs	r0, #0
 800c402:	e7fc      	b.n	800c3fe <LoRaMacConfirmQueueRemoveFirst+0x22>
 800c404:	20001008 	.word	0x20001008

0800c408 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4605      	mov	r5, r0
 800c40c:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800c40e:	4b08      	ldr	r3, [pc, #32]	; (800c430 <LoRaMacConfirmQueueSetStatus+0x28>)
 800c410:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c414:	f7ff ff7e 	bl	800c314 <IsListEmpty>
 800c418:	b948      	cbnz	r0, 800c42e <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c41a:	4b05      	ldr	r3, [pc, #20]	; (800c430 <LoRaMacConfirmQueueSetStatus+0x28>)
 800c41c:	689a      	ldr	r2, [r3, #8]
 800c41e:	6859      	ldr	r1, [r3, #4]
 800c420:	4620      	mov	r0, r4
 800c422:	f7ff ff83 	bl	800c32c <GetElement>
        if( element != NULL )
 800c426:	b110      	cbz	r0, 800c42e <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800c428:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800c42a:	2201      	movs	r2, #1
 800c42c:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800c42e:	bd38      	pop	{r3, r4, r5, pc}
 800c430:	20001008 	.word	0x20001008

0800c434 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800c434:	b510      	push	{r4, lr}
 800c436:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800c438:	4b09      	ldr	r3, [pc, #36]	; (800c460 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800c43a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c43e:	f7ff ff69 	bl	800c314 <IsListEmpty>
 800c442:	b940      	cbnz	r0, 800c456 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c444:	4b06      	ldr	r3, [pc, #24]	; (800c460 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800c446:	689a      	ldr	r2, [r3, #8]
 800c448:	6859      	ldr	r1, [r3, #4]
 800c44a:	4620      	mov	r0, r4
 800c44c:	f7ff ff6e 	bl	800c32c <GetElement>
        if( element != NULL )
 800c450:	b118      	cbz	r0, 800c45a <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800c452:	7840      	ldrb	r0, [r0, #1]
 800c454:	e000      	b.n	800c458 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c456:	2001      	movs	r0, #1
}
 800c458:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c45a:	2001      	movs	r0, #1
 800c45c:	e7fc      	b.n	800c458 <LoRaMacConfirmQueueGetStatus+0x24>
 800c45e:	bf00      	nop
 800c460:	20001008 	.word	0x20001008

0800c464 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800c468:	4b0c      	ldr	r3, [pc, #48]	; (800c49c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800c46a:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800c46c:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800c470:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c474:	f7ff ff4e 	bl	800c314 <IsListEmpty>
 800c478:	b150      	cbz	r0, 800c490 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800c47a:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800c47c:	2301      	movs	r3, #1
 800c47e:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800c480:	4620      	mov	r0, r4
 800c482:	f7ff ff3b 	bl	800c2fc <IncreaseBufferPointer>
 800c486:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800c488:	4b04      	ldr	r3, [pc, #16]	; (800c49c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	4283      	cmp	r3, r0
 800c48e:	d0f4      	beq.n	800c47a <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800c490:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800c492:	78e3      	ldrb	r3, [r4, #3]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1f3      	bne.n	800c480 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800c498:	e7f0      	b.n	800c47c <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800c49a:	bf00      	nop
 800c49c:	20001008 	.word	0x20001008

0800c4a0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800c4a0:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800c4a2:	4b04      	ldr	r3, [pc, #16]	; (800c4b4 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800c4a4:	689a      	ldr	r2, [r3, #8]
 800c4a6:	6859      	ldr	r1, [r3, #4]
 800c4a8:	f7ff ff40 	bl	800c32c <GetElement>
 800c4ac:	b100      	cbz	r0, 800c4b0 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800c4ae:	2001      	movs	r0, #1
    }
    return false;
}
 800c4b0:	bd08      	pop	{r3, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20001008 	.word	0x20001008

0800c4b8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800c4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800c4be:	4b16      	ldr	r3, [pc, #88]	; (800c518 <LoRaMacConfirmQueueHandleCb+0x60>)
 800c4c0:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800c4c4:	2400      	movs	r4, #0
 800c4c6:	e00d      	b.n	800c4e4 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800c4c8:	781a      	ldrb	r2, [r3, #0]
 800c4ca:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800c4ce:	785a      	ldrb	r2, [r3, #1]
 800c4d0:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800c4d4:	78db      	ldrb	r3, [r3, #3]
 800c4d6:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800c4da:	f7ff ff7f 	bl	800c3dc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800c4de:	b1a5      	cbz	r5, 800c50a <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800c4e0:	3401      	adds	r4, #1
 800c4e2:	b2e4      	uxtb	r4, r4
 800c4e4:	42bc      	cmp	r4, r7
 800c4e6:	d214      	bcs.n	800c512 <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800c4e8:	4b0b      	ldr	r3, [pc, #44]	; (800c518 <LoRaMacConfirmQueueHandleCb+0x60>)
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	7812      	ldrb	r2, [r2, #0]
 800c4ee:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800c4f0:	685a      	ldr	r2, [r3, #4]
 800c4f2:	7852      	ldrb	r2, [r2, #1]
 800c4f4:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800c4fa:	2d00      	cmp	r5, #0
 800c4fc:	d0e4      	beq.n	800c4c8 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800c4fe:	4b06      	ldr	r3, [pc, #24]	; (800c518 <LoRaMacConfirmQueueHandleCb+0x60>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	4630      	mov	r0, r6
 800c506:	4798      	blx	r3
 800c508:	e7e7      	b.n	800c4da <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800c50a:	a801      	add	r0, sp, #4
 800c50c:	f7ff ff42 	bl	800c394 <LoRaMacConfirmQueueAdd>
 800c510:	e7e6      	b.n	800c4e0 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800c512:	b003      	add	sp, #12
 800c514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c516:	bf00      	nop
 800c518:	20001008 	.word	0x20001008

0800c51c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800c51c:	4b01      	ldr	r3, [pc, #4]	; (800c524 <LoRaMacConfirmQueueGetCnt+0x8>)
 800c51e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c522:	4770      	bx	lr
 800c524:	20001008 	.word	0x20001008

0800c528 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800c528:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c52a:	4b03      	ldr	r3, [pc, #12]	; (800c538 <LoRaMacConfirmQueueIsFull+0x10>)
 800c52c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c530:	f7ff fef5 	bl	800c31e <IsListFull>
    }
    else
    {
        return false;
    }
}
 800c534:	bd08      	pop	{r3, pc}
 800c536:	bf00      	nop
 800c538:	20001008 	.word	0x20001008

0800c53c <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800c53c:	b430      	push	{r4, r5}
 800c53e:	9c02      	ldr	r4, [sp, #8]
 800c540:	9903      	ldr	r1, [sp, #12]
 800c542:	9a04      	ldr	r2, [sp, #16]
    if( b0 == 0 )
 800c544:	b1d2      	cbz	r2, 800c57c <PrepareB0+0x40>
 800c546:	4605      	mov	r5, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800c548:	2049      	movs	r0, #73	; 0x49
 800c54a:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800c54c:	2000      	movs	r0, #0
 800c54e:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800c550:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800c552:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800c554:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800c556:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800c558:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800c55a:	0a23      	lsrs	r3, r4, #8
 800c55c:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800c55e:	0c23      	lsrs	r3, r4, #16
 800c560:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800c562:	0e24      	lsrs	r4, r4, #24
 800c564:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800c566:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800c568:	0a0b      	lsrs	r3, r1, #8
 800c56a:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800c56c:	0c0b      	lsrs	r3, r1, #16
 800c56e:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800c570:	0e09      	lsrs	r1, r1, #24
 800c572:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800c574:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800c576:	73d5      	strb	r5, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c578:	bc30      	pop	{r4, r5}
 800c57a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c57c:	200a      	movs	r0, #10
 800c57e:	e7fb      	b.n	800c578 <PrepareB0+0x3c>

0800c580 <GetKeyAddrItem>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800c580:	2300      	movs	r3, #0
 800c582:	2b01      	cmp	r3, #1
 800c584:	d813      	bhi.n	800c5ae <GetKeyAddrItem+0x2e>
{
 800c586:	b410      	push	{r4}
    {
        if( KeyAddrList[i].AddrID == addrID )
 800c588:	461c      	mov	r4, r3
 800c58a:	4a0a      	ldr	r2, [pc, #40]	; (800c5b4 <GetKeyAddrItem+0x34>)
 800c58c:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800c590:	4282      	cmp	r2, r0
 800c592:	d006      	beq.n	800c5a2 <GetKeyAddrItem+0x22>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800c594:	3301      	adds	r3, #1
 800c596:	b2db      	uxtb	r3, r3
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d9f5      	bls.n	800c588 <GetKeyAddrItem+0x8>
        {
            *item = &( KeyAddrList[i] );
            return LORAMAC_CRYPTO_SUCCESS;
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800c59c:	200c      	movs	r0, #12
}
 800c59e:	bc10      	pop	{r4}
 800c5a0:	4770      	bx	lr
            *item = &( KeyAddrList[i] );
 800c5a2:	4b04      	ldr	r3, [pc, #16]	; (800c5b4 <GetKeyAddrItem+0x34>)
 800c5a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c5a8:	600c      	str	r4, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	e7f7      	b.n	800c59e <GetKeyAddrItem+0x1e>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800c5ae:	200c      	movs	r0, #12
}
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	200000c0 	.word	0x200000c0

0800c5b8 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	2900      	cmp	r1, #0
 800c5bc:	d024      	beq.n	800c608 <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800c5be:	3801      	subs	r0, #1
 800c5c0:	2803      	cmp	r0, #3
 800c5c2:	d823      	bhi.n	800c60c <GetLastFcntDown+0x54>
 800c5c4:	e8df f000 	tbb	[pc, r0]
 800c5c8:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800c5cc:	4a10      	ldr	r2, [pc, #64]	; (800c610 <GetLastFcntDown+0x58>)
 800c5ce:	6812      	ldr	r2, [r2, #0]
 800c5d0:	6911      	ldr	r1, [r2, #16]
 800c5d2:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800c5d4:	6913      	ldr	r3, [r2, #16]
 800c5d6:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800c5d8:	2000      	movs	r0, #0
            break;
 800c5da:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800c5dc:	4a0c      	ldr	r2, [pc, #48]	; (800c610 <GetLastFcntDown+0x58>)
 800c5de:	6812      	ldr	r2, [r2, #0]
 800c5e0:	6951      	ldr	r1, [r2, #20]
 800c5e2:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800c5e4:	6953      	ldr	r3, [r2, #20]
 800c5e6:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800c5e8:	2000      	movs	r0, #0
            break;
 800c5ea:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800c5ec:	4a08      	ldr	r2, [pc, #32]	; (800c610 <GetLastFcntDown+0x58>)
 800c5ee:	6812      	ldr	r2, [r2, #0]
 800c5f0:	6991      	ldr	r1, [r2, #24]
 800c5f2:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800c5f4:	6993      	ldr	r3, [r2, #24]
 800c5f6:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800c5f8:	2000      	movs	r0, #0
            break;
 800c5fa:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800c5fc:	4a04      	ldr	r2, [pc, #16]	; (800c610 <GetLastFcntDown+0x58>)
 800c5fe:	6812      	ldr	r2, [r2, #0]
 800c600:	69d2      	ldr	r2, [r2, #28]
 800c602:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800c604:	2000      	movs	r0, #0
            break;
 800c606:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c608:	200a      	movs	r0, #10
 800c60a:	4770      	bx	lr
    if( lastDown == NULL )
 800c60c:	2005      	movs	r0, #5
}
 800c60e:	4770      	bx	lr
 800c610:	2000102c 	.word	0x2000102c

0800c614 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800c614:	b510      	push	{r4, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800c61a:	2300      	movs	r3, #0
 800c61c:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800c61e:	a901      	add	r1, sp, #4
 800c620:	f7ff ffca 	bl	800c5b8 <GetLastFcntDown>
 800c624:	b948      	cbnz	r0, 800c63a <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800c626:	9b01      	ldr	r3, [sp, #4]
 800c628:	42a3      	cmp	r3, r4
 800c62a:	d309      	bcc.n	800c640 <CheckFCntDown+0x2c>
 800c62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c630:	d001      	beq.n	800c636 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800c632:	2000      	movs	r0, #0
 800c634:	e002      	b.n	800c63c <CheckFCntDown+0x28>
        return true;
 800c636:	2001      	movs	r0, #1
 800c638:	e000      	b.n	800c63c <CheckFCntDown+0x28>
        return false;
 800c63a:	2000      	movs	r0, #0
    }
}
 800c63c:	b002      	add	sp, #8
 800c63e:	bd10      	pop	{r4, pc}
        return true;
 800c640:	2001      	movs	r0, #1
 800c642:	e7fb      	b.n	800c63c <CheckFCntDown+0x28>

0800c644 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800c644:	3801      	subs	r0, #1
 800c646:	2803      	cmp	r0, #3
 800c648:	d812      	bhi.n	800c670 <UpdateFCntDown+0x2c>
 800c64a:	e8df f000 	tbb	[pc, r0]
 800c64e:	0602      	.short	0x0602
 800c650:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800c652:	4b08      	ldr	r3, [pc, #32]	; (800c674 <UpdateFCntDown+0x30>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	6119      	str	r1, [r3, #16]
            break;
 800c658:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800c65a:	4b06      	ldr	r3, [pc, #24]	; (800c674 <UpdateFCntDown+0x30>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	6159      	str	r1, [r3, #20]
            break;
 800c660:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800c662:	4b04      	ldr	r3, [pc, #16]	; (800c674 <UpdateFCntDown+0x30>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	6199      	str	r1, [r3, #24]
            break;
 800c668:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800c66a:	4b02      	ldr	r3, [pc, #8]	; (800c674 <UpdateFCntDown+0x30>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	2000102c 	.word	0x2000102c

0800c678 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800c678:	4b0a      	ldr	r3, [pc, #40]	; (800c6a4 <ResetFCnts+0x2c>)
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	2300      	movs	r3, #0
 800c67e:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c680:	f04f 31ff 	mov.w	r1, #4294967295
 800c684:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c686:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800c688:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800c68a:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	dd00      	ble.n	800c692 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800c690:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800c692:	1d99      	adds	r1, r3, #6
 800c694:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800c698:	f04f 30ff 	mov.w	r0, #4294967295
 800c69c:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c69e:	3301      	adds	r3, #1
 800c6a0:	e7f4      	b.n	800c68c <ResetFCnts+0x14>
 800c6a2:	bf00      	nop
 800c6a4:	2000102c 	.word	0x2000102c

0800c6a8 <ComputeCmacB0>:
{
 800c6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ac:	b088      	sub	sp, #32
 800c6ae:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800c6b0:	b1f0      	cbz	r0, 800c6f0 <ComputeCmacB0+0x48>
 800c6b2:	460c      	mov	r4, r1
 800c6b4:	4615      	mov	r5, r2
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	4680      	mov	r8, r0
 800c6ba:	b1de      	cbz	r6, 800c6f4 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c6bc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c6c0:	d81a      	bhi.n	800c6f8 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800c6c2:	af04      	add	r7, sp, #16
 800c6c4:	9702      	str	r7, [sp, #8]
 800c6c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6c8:	9301      	str	r3, [sp, #4]
 800c6ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800c6d2:	4629      	mov	r1, r5
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f7ff ff31 	bl	800c53c <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800c6da:	9600      	str	r6, [sp, #0]
 800c6dc:	462b      	mov	r3, r5
 800c6de:	4622      	mov	r2, r4
 800c6e0:	4641      	mov	r1, r8
 800c6e2:	4638      	mov	r0, r7
 800c6e4:	f004 f900 	bl	80108e8 <SecureElementComputeAesCmac>
 800c6e8:	b940      	cbnz	r0, 800c6fc <ComputeCmacB0+0x54>
}
 800c6ea:	b008      	add	sp, #32
 800c6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c6f0:	200a      	movs	r0, #10
 800c6f2:	e7fa      	b.n	800c6ea <ComputeCmacB0+0x42>
 800c6f4:	200a      	movs	r0, #10
 800c6f6:	e7f8      	b.n	800c6ea <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c6f8:	200e      	movs	r0, #14
 800c6fa:	e7f6      	b.n	800c6ea <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c6fc:	200f      	movs	r0, #15
 800c6fe:	e7f4      	b.n	800c6ea <ComputeCmacB0+0x42>

0800c700 <DeriveSessionKey10x>:
{
 800c700:	b510      	push	{r4, lr}
 800c702:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800c704:	2400      	movs	r4, #0
 800c706:	9402      	str	r4, [sp, #8]
 800c708:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800c70a:	2802      	cmp	r0, #2
 800c70c:	d003      	beq.n	800c716 <DeriveSessionKey10x+0x16>
 800c70e:	2803      	cmp	r0, #3
 800c710:	d025      	beq.n	800c75e <DeriveSessionKey10x+0x5e>
 800c712:	200b      	movs	r0, #11
 800c714:	e021      	b.n	800c75a <DeriveSessionKey10x+0x5a>
            compBase[0] = 0x01;
 800c716:	2401      	movs	r4, #1
 800c718:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800c71c:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800c720:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800c724:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800c728:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800c72c:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800c730:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800c734:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c738:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800c73c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800c740:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800c744:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800c748:	0a1b      	lsrs	r3, r3, #8
 800c74a:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800c74e:	4602      	mov	r2, r0
 800c750:	2101      	movs	r1, #1
 800c752:	4668      	mov	r0, sp
 800c754:	f004 f964 	bl	8010a20 <SecureElementDeriveAndStoreKey>
 800c758:	b928      	cbnz	r0, 800c766 <DeriveSessionKey10x+0x66>
}
 800c75a:	b004      	add	sp, #16
 800c75c:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800c75e:	2402      	movs	r4, #2
 800c760:	f88d 4000 	strb.w	r4, [sp]
            break;
 800c764:	e7da      	b.n	800c71c <DeriveSessionKey10x+0x1c>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c766:	200f      	movs	r0, #15
 800c768:	e7f7      	b.n	800c75a <DeriveSessionKey10x+0x5a>

0800c76a <PayloadEncrypt>:
{
 800c76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c76e:	b088      	sub	sp, #32
 800c770:	4690      	mov	r8, r2
 800c772:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800c774:	2800      	cmp	r0, #0
 800c776:	d050      	beq.n	800c81a <PayloadEncrypt+0xb0>
 800c778:	460d      	mov	r5, r1
 800c77a:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800c77c:	2600      	movs	r6, #0
 800c77e:	9604      	str	r6, [sp, #16]
 800c780:	9605      	str	r6, [sp, #20]
 800c782:	9606      	str	r6, [sp, #24]
 800c784:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800c786:	9600      	str	r6, [sp, #0]
 800c788:	9601      	str	r6, [sp, #4]
 800c78a:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800c78c:	2701      	movs	r7, #1
 800c78e:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800c792:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800c796:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800c79a:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800c79e:	0a19      	lsrs	r1, r3, #8
 800c7a0:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800c7a4:	0c19      	lsrs	r1, r3, #16
 800c7a6:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c7aa:	0e1b      	lsrs	r3, r3, #24
 800c7ac:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800c7b0:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800c7b4:	0a13      	lsrs	r3, r2, #8
 800c7b6:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800c7ba:	0c13      	lsrs	r3, r2, #16
 800c7bc:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c7c0:	0e12      	lsrs	r2, r2, #24
 800c7c2:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800c7c6:	e013      	b.n	800c7f0 <PayloadEncrypt+0x86>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c7c8:	18f2      	adds	r2, r6, r3
 800c7ca:	5ca0      	ldrb	r0, [r4, r2]
 800c7cc:	a908      	add	r1, sp, #32
 800c7ce:	4419      	add	r1, r3
 800c7d0:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800c7d4:	4048      	eors	r0, r1
 800c7d6:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800c7d8:	3301      	adds	r3, #1
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	462a      	mov	r2, r5
 800c7de:	2d10      	cmp	r5, #16
 800c7e0:	bfa8      	it	ge
 800c7e2:	2210      	movge	r2, #16
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	dbef      	blt.n	800c7c8 <PayloadEncrypt+0x5e>
        size -= 16;
 800c7e8:	3d10      	subs	r5, #16
 800c7ea:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800c7ec:	3610      	adds	r6, #16
 800c7ee:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800c7f0:	2d00      	cmp	r5, #0
 800c7f2:	dd0e      	ble.n	800c812 <PayloadEncrypt+0xa8>
        aBlock[15] = ctr & 0xFF;
 800c7f4:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800c7f8:	3701      	adds	r7, #1
 800c7fa:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c7fc:	ab04      	add	r3, sp, #16
 800c7fe:	4642      	mov	r2, r8
 800c800:	2110      	movs	r1, #16
 800c802:	4668      	mov	r0, sp
 800c804:	f004 f892 	bl	801092c <SecureElementAesEncrypt>
 800c808:	4603      	mov	r3, r0
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d0e6      	beq.n	800c7dc <PayloadEncrypt+0x72>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c80e:	200f      	movs	r0, #15
 800c810:	e000      	b.n	800c814 <PayloadEncrypt+0xaa>
    return LORAMAC_CRYPTO_SUCCESS;
 800c812:	2000      	movs	r0, #0
}
 800c814:	b008      	add	sp, #32
 800c816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c81a:	200a      	movs	r0, #10
 800c81c:	e7fa      	b.n	800c814 <PayloadEncrypt+0xaa>

0800c81e <VerifyCmacB0>:
    if( msg == 0 )
 800c81e:	b370      	cbz	r0, 800c87e <VerifyCmacB0+0x60>
{
 800c820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c824:	b0c8      	sub	sp, #288	; 0x120
 800c826:	460c      	mov	r4, r1
 800c828:	4615      	mov	r5, r2
 800c82a:	461e      	mov	r6, r3
 800c82c:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c82e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c832:	d826      	bhi.n	800c882 <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800c834:	af04      	add	r7, sp, #16
 800c836:	f44f 7288 	mov.w	r2, #272	; 0x110
 800c83a:	2100      	movs	r1, #0
 800c83c:	4638      	mov	r0, r7
 800c83e:	f004 f9cc 	bl	8010bda <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800c842:	9702      	str	r7, [sp, #8]
 800c844:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800c846:	9301      	str	r3, [sp, #4]
 800c848:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800c850:	4632      	mov	r2, r6
 800c852:	4629      	mov	r1, r5
 800c854:	4620      	mov	r0, r4
 800c856:	f7ff fe71 	bl	800c53c <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800c85a:	4622      	mov	r2, r4
 800c85c:	4641      	mov	r1, r8
 800c85e:	a808      	add	r0, sp, #32
 800c860:	f004 f9a5 	bl	8010bae <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800c864:	f104 0110 	add.w	r1, r4, #16
 800c868:	462b      	mov	r3, r5
 800c86a:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800c86c:	b289      	uxth	r1, r1
 800c86e:	4638      	mov	r0, r7
 800c870:	f004 f846 	bl	8010900 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800c874:	b130      	cbz	r0, 800c884 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800c876:	2801      	cmp	r0, #1
 800c878:	d004      	beq.n	800c884 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c87a:	200f      	movs	r0, #15
 800c87c:	e002      	b.n	800c884 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c87e:	200a      	movs	r0, #10
}
 800c880:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c882:	200e      	movs	r0, #14
}
 800c884:	b048      	add	sp, #288	; 0x120
 800c886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800c88c <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800c88c:	b188      	cbz	r0, 800c8b2 <LoRaMacCryptoInit+0x26>
{
 800c88e:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800c890:	4c09      	ldr	r4, [pc, #36]	; (800c8b8 <LoRaMacCryptoInit+0x2c>)
 800c892:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800c894:	2228      	movs	r2, #40	; 0x28
 800c896:	2100      	movs	r1, #0
 800c898:	f004 f99f 	bl	8010bda <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800c89c:	6823      	ldr	r3, [r4, #0]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800c8a2:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800c8a4:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800c8a6:	2400      	movs	r4, #0
 800c8a8:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800c8aa:	f7ff fee5 	bl	800c678 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800c8ae:	4620      	mov	r0, r4
}
 800c8b0:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800c8b2:	2009      	movs	r0, #9
}
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop
 800c8b8:	2000102c 	.word	0x2000102c

0800c8bc <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800c8bc:	4b02      	ldr	r3, [pc, #8]	; (800c8c8 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop
 800c8c8:	2000102c 	.word	0x2000102c

0800c8cc <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800c8cc:	b130      	cbz	r0, 800c8dc <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800c8ce:	4b04      	ldr	r3, [pc, #16]	; (800c8e0 <LoRaMacCryptoGetFCntUp+0x14>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800c8d8:	2000      	movs	r0, #0
 800c8da:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c8dc:	200a      	movs	r0, #10
}
 800c8de:	4770      	bx	lr
 800c8e0:	2000102c 	.word	0x2000102c

0800c8e4 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800c8e4:	b570      	push	{r4, r5, r6, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	4615      	mov	r5, r2
    uint32_t lastDown = 0;
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800c8ee:	b373      	cbz	r3, 800c94e <LoRaMacCryptoGetFCntDown+0x6a>
 800c8f0:	460c      	mov	r4, r1
 800c8f2:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800c8f4:	a901      	add	r1, sp, #4
 800c8f6:	f7ff fe5f 	bl	800c5b8 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c8fa:	b9c8      	cbnz	r0, 800c930 <LoRaMacCryptoGetFCntDown+0x4c>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800c8fc:	9b01      	ldr	r3, [sp, #4]
 800c8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c902:	d017      	beq.n	800c934 <LoRaMacCryptoGetFCntDown+0x50>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800c904:	b29a      	uxth	r2, r3
 800c906:	1aaa      	subs	r2, r5, r2

        if( fCntDiff > 0 )
 800c908:	2a00      	cmp	r2, #0
 800c90a:	dd15      	ble.n	800c938 <LoRaMacCryptoGetFCntDown+0x54>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800c90c:	4413      	add	r3, r2
 800c90e:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800c910:	4b11      	ldr	r3, [pc, #68]	; (800c958 <LoRaMacCryptoGetFCntDown+0x74>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	789b      	ldrb	r3, [r3, #2]
 800c916:	b95b      	cbnz	r3, 800c930 <LoRaMacCryptoGetFCntDown+0x4c>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800c918:	6830      	ldr	r0, [r6, #0]
 800c91a:	9a01      	ldr	r2, [sp, #4]
 800c91c:	1a80      	subs	r0, r0, r2
 800c91e:	eb60 0100 	sbc.w	r1, r0, r0
 800c922:	b2a4      	uxth	r4, r4
 800c924:	2500      	movs	r5, #0
 800c926:	42a0      	cmp	r0, r4
 800c928:	eb71 0205 	sbcs.w	r2, r1, r5
 800c92c:	da11      	bge.n	800c952 <LoRaMacCryptoGetFCntDown+0x6e>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800c92e:	4618      	mov	r0, r3
}
 800c930:	b002      	add	sp, #8
 800c932:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800c934:	6035      	str	r5, [r6, #0]
 800c936:	e7eb      	b.n	800c910 <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800c938:	b132      	cbz	r2, 800c948 <LoRaMacCryptoGetFCntDown+0x64>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800c93a:	0c1b      	lsrs	r3, r3, #16
 800c93c:	041b      	lsls	r3, r3, #16
 800c93e:	442b      	add	r3, r5
 800c940:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c944:	6033      	str	r3, [r6, #0]
 800c946:	e7e3      	b.n	800c910 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800c948:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800c94a:	2007      	movs	r0, #7
 800c94c:	e7f0      	b.n	800c930 <LoRaMacCryptoGetFCntDown+0x4c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c94e:	200a      	movs	r0, #10
 800c950:	e7ee      	b.n	800c930 <LoRaMacCryptoGetFCntDown+0x4c>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800c952:	2008      	movs	r0, #8
 800c954:	e7ec      	b.n	800c930 <LoRaMacCryptoGetFCntDown+0x4c>
 800c956:	bf00      	nop
 800c958:	2000102c 	.word	0x2000102c

0800c95c <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800c95c:	b908      	cbnz	r0, 800c962 <LoRaMacCryptoSetMulticastReference+0x6>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c95e:	200a      	movs	r0, #10
 800c960:	4770      	bx	lr
 800c962:	4601      	mov	r1, r0
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c964:	2300      	movs	r3, #0
 800c966:	2b00      	cmp	r3, #0
 800c968:	dd01      	ble.n	800c96e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800c96a:	2000      	movs	r0, #0
}
 800c96c:	4770      	bx	lr
{
 800c96e:	b410      	push	{r4}
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800c970:	4a07      	ldr	r2, [pc, #28]	; (800c990 <LoRaMacCryptoSetMulticastReference+0x34>)
 800c972:	6812      	ldr	r2, [r2, #0]
 800c974:	202c      	movs	r0, #44	; 0x2c
 800c976:	fb00 1003 	mla	r0, r0, r3, r1
 800c97a:	1d9c      	adds	r4, r3, #6
 800c97c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c980:	3204      	adds	r2, #4
 800c982:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c984:	3301      	adds	r3, #1
 800c986:	2b00      	cmp	r3, #0
 800c988:	ddf2      	ble.n	800c970 <LoRaMacCryptoSetMulticastReference+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800c98a:	2000      	movs	r0, #0
}
 800c98c:	bc10      	pop	{r4}
 800c98e:	4770      	bx	lr
 800c990:	2000102c 	.word	0x2000102c

0800c994 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800c994:	b300      	cbz	r0, 800c9d8 <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 800c996:	b510      	push	{r4, lr}
 800c998:	b084      	sub	sp, #16
 800c99a:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800c99c:	2300      	movs	r3, #0
 800c99e:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800c9a0:	a803      	add	r0, sp, #12
 800c9a2:	f004 f8a1 	bl	8010ae8 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800c9a6:	4b10      	ldr	r3, [pc, #64]	; (800c9e8 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c9ae:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800c9b0:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	f000 fa2d 	bl	800ce12 <LoRaMacSerializerJoinRequest>
 800c9b8:	b980      	cbnz	r0, 800c9dc <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800c9ba:	4623      	mov	r3, r4
 800c9bc:	f853 1b18 	ldr.w	r1, [r3], #24
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	2213      	movs	r2, #19
 800c9c6:	f003 ff8f 	bl	80108e8 <SecureElementComputeAesCmac>
 800c9ca:	b950      	cbnz	r0, 800c9e2 <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f000 fa20 	bl	800ce12 <LoRaMacSerializerJoinRequest>
 800c9d2:	b120      	cbz	r0, 800c9de <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c9d4:	2011      	movs	r0, #17
 800c9d6:	e002      	b.n	800c9de <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c9d8:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c9da:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c9dc:	2011      	movs	r0, #17
}
 800c9de:	b004      	add	sp, #16
 800c9e0:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c9e2:	200f      	movs	r0, #15
 800c9e4:	e7fb      	b.n	800c9de <LoRaMacCryptoPrepareJoinRequest+0x4a>
 800c9e6:	bf00      	nop
 800c9e8:	2000102c 	.word	0x2000102c

0800c9ec <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d036      	beq.n	800ca5e <LoRaMacCryptoSecureMessage+0x72>
{
 800c9f0:	b530      	push	{r4, r5, lr}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	4604      	mov	r4, r0
 800c9f6:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800c9f8:	4b1d      	ldr	r3, [pc, #116]	; (800ca70 <LoRaMacCryptoSecureMessage+0x84>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	68db      	ldr	r3, [r3, #12]
 800c9fe:	4283      	cmp	r3, r0
 800ca00:	d82f      	bhi.n	800ca62 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800ca02:	f895 2020 	ldrb.w	r2, [r5, #32]
 800ca06:	b342      	cbz	r2, 800ca5a <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800ca08:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800ca0a:	42a3      	cmp	r3, r4
 800ca0c:	d209      	bcs.n	800ca22 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800ca0e:	9401      	str	r4, [sp, #4]
 800ca10:	2300      	movs	r3, #0
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	68ab      	ldr	r3, [r5, #8]
 800ca16:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800ca1a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ca1c:	f7ff fea5 	bl	800c76a <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ca20:	bb10      	cbnz	r0, 800ca68 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ca22:	4628      	mov	r0, r5
 800ca24:	f000 fa2b 	bl	800ce7e <LoRaMacSerializerData>
 800ca28:	b9e8      	cbnz	r0, 800ca66 <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ca2a:	7929      	ldrb	r1, [r5, #4]
 800ca2c:	3904      	subs	r1, #4
 800ca2e:	462b      	mov	r3, r5
 800ca30:	f853 0b2c 	ldr.w	r0, [r3], #44
 800ca34:	9303      	str	r3, [sp, #12]
 800ca36:	9402      	str	r4, [sp, #8]
 800ca38:	68ab      	ldr	r3, [r5, #8]
 800ca3a:	9301      	str	r3, [sp, #4]
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	9300      	str	r3, [sp, #0]
 800ca40:	2202      	movs	r2, #2
 800ca42:	b289      	uxth	r1, r1
 800ca44:	f7ff fe30 	bl	800c6a8 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ca48:	b970      	cbnz	r0, 800ca68 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	f000 fa17 	bl	800ce7e <LoRaMacSerializerData>
 800ca50:	b960      	cbnz	r0, 800ca6c <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800ca52:	4b07      	ldr	r3, [pc, #28]	; (800ca70 <LoRaMacCryptoSecureMessage+0x84>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800ca58:	e006      	b.n	800ca68 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	e7d5      	b.n	800ca0a <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ca5e:	200a      	movs	r0, #10
}
 800ca60:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800ca62:	2006      	movs	r0, #6
 800ca64:	e000      	b.n	800ca68 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ca66:	2011      	movs	r0, #17
}
 800ca68:	b005      	add	sp, #20
 800ca6a:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ca6c:	2011      	movs	r0, #17
 800ca6e:	e7fb      	b.n	800ca68 <LoRaMacCryptoSecureMessage+0x7c>
 800ca70:	2000102c 	.word	0x2000102c

0800ca74 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800ca74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca78:	b087      	sub	sp, #28
 800ca7a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800ca7c:	2e00      	cmp	r6, #0
 800ca7e:	d049      	beq.n	800cb14 <LoRaMacCryptoUnsecureMessage+0xa0>
 800ca80:	4605      	mov	r5, r0
 800ca82:	4688      	mov	r8, r1
 800ca84:	4617      	mov	r7, r2
 800ca86:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800ca88:	4619      	mov	r1, r3
 800ca8a:	4610      	mov	r0, r2
 800ca8c:	f7ff fdc2 	bl	800c614 <CheckFCntDown>
 800ca90:	2800      	cmp	r0, #0
 800ca92:	d041      	beq.n	800cb18 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ca94:	4630      	mov	r0, r6
 800ca96:	f000 f95d 	bl	800cd54 <LoRaMacParserData>
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d141      	bne.n	800cb22 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800ca9e:	a905      	add	r1, sp, #20
 800caa0:	4628      	mov	r0, r5
 800caa2:	f7ff fd6d 	bl	800c580 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800caa6:	4605      	mov	r5, r0
 800caa8:	2800      	cmp	r0, #0
 800caaa:	d136      	bne.n	800cb1a <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800caac:	9b05      	ldr	r3, [sp, #20]
 800caae:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800cab2:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800cab4:	68b3      	ldr	r3, [r6, #8]
 800cab6:	4543      	cmp	r3, r8
 800cab8:	d135      	bne.n	800cb26 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800caba:	7b33      	ldrb	r3, [r6, #12]
 800cabc:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800cac0:	491a      	ldr	r1, [pc, #104]	; (800cb2c <LoRaMacCryptoUnsecureMessage+0xb8>)
 800cac2:	6809      	ldr	r1, [r1, #0]
 800cac4:	7889      	ldrb	r1, [r1, #2]
 800cac6:	b901      	cbnz	r1, 800caca <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800cac8:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800caca:	7931      	ldrb	r1, [r6, #4]
 800cacc:	3904      	subs	r1, #4
 800cace:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800cad0:	9003      	str	r0, [sp, #12]
 800cad2:	9402      	str	r4, [sp, #8]
 800cad4:	f8cd 8004 	str.w	r8, [sp, #4]
 800cad8:	2001      	movs	r0, #1
 800cada:	9000      	str	r0, [sp, #0]
 800cadc:	b289      	uxth	r1, r1
 800cade:	6830      	ldr	r0, [r6, #0]
 800cae0:	f7ff fe9d 	bl	800c81e <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cae4:	4605      	mov	r5, r0
 800cae6:	b9c0      	cbnz	r0, 800cb1a <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800cae8:	f896 3020 	ldrb.w	r3, [r6, #32]
 800caec:	b90b      	cbnz	r3, 800caf2 <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800caee:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800caf2:	9401      	str	r4, [sp, #4]
 800caf4:	2301      	movs	r3, #1
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	4643      	mov	r3, r8
 800cafa:	464a      	mov	r2, r9
 800cafc:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800cb00:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800cb02:	f7ff fe32 	bl	800c76a <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cb06:	4605      	mov	r5, r0
 800cb08:	b938      	cbnz	r0, 800cb1a <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800cb0a:	4621      	mov	r1, r4
 800cb0c:	4638      	mov	r0, r7
 800cb0e:	f7ff fd99 	bl	800c644 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800cb12:	e002      	b.n	800cb1a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cb14:	250a      	movs	r5, #10
 800cb16:	e000      	b.n	800cb1a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800cb18:	2506      	movs	r5, #6
}
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	b007      	add	sp, #28
 800cb1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800cb22:	2510      	movs	r5, #16
 800cb24:	e7f9      	b.n	800cb1a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800cb26:	2502      	movs	r5, #2
 800cb28:	e7f7      	b.n	800cb1a <LoRaMacCryptoUnsecureMessage+0xa6>
 800cb2a:	bf00      	nop
 800cb2c:	2000102c 	.word	0x2000102c

0800cb30 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800cb30:	b9a9      	cbnz	r1, 800cb5e <LoRaMacCryptoDeriveMcRootKey+0x2e>
{
 800cb32:	b510      	push	{r4, lr}
 800cb34:	b084      	sub	sp, #16
 800cb36:	460c      	mov	r4, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800cb38:	2300      	movs	r3, #0
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	9301      	str	r3, [sp, #4]
 800cb3e:	9302      	str	r3, [sp, #8]
 800cb40:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800cb42:	2801      	cmp	r0, #1
 800cb44:	d007      	beq.n	800cb56 <LoRaMacCryptoDeriveMcRootKey+0x26>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800cb46:	2204      	movs	r2, #4
 800cb48:	4621      	mov	r1, r4
 800cb4a:	4668      	mov	r0, sp
 800cb4c:	f003 ff68 	bl	8010a20 <SecureElementDeriveAndStoreKey>
 800cb50:	b938      	cbnz	r0, 800cb62 <LoRaMacCryptoDeriveMcRootKey+0x32>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800cb52:	b004      	add	sp, #16
 800cb54:	bd10      	pop	{r4, pc}
        compBase[0] = 0x20;
 800cb56:	2320      	movs	r3, #32
 800cb58:	f88d 3000 	strb.w	r3, [sp]
 800cb5c:	e7f3      	b.n	800cb46 <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800cb5e:	200b      	movs	r0, #11
}
 800cb60:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cb62:	200f      	movs	r0, #15
 800cb64:	e7f5      	b.n	800cb52 <LoRaMacCryptoDeriveMcRootKey+0x22>

0800cb66 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800cb66:	2804      	cmp	r0, #4
 800cb68:	d001      	beq.n	800cb6e <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800cb6a:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800cb6c:	4770      	bx	lr
{
 800cb6e:	b500      	push	{lr}
 800cb70:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800cb72:	2300      	movs	r3, #0
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	9301      	str	r3, [sp, #4]
 800cb78:	9302      	str	r3, [sp, #8]
 800cb7a:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800cb7c:	227f      	movs	r2, #127	; 0x7f
 800cb7e:	4601      	mov	r1, r0
 800cb80:	4668      	mov	r0, sp
 800cb82:	f003 ff4d 	bl	8010a20 <SecureElementDeriveAndStoreKey>
 800cb86:	b910      	cbnz	r0, 800cb8e <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800cb88:	b005      	add	sp, #20
 800cb8a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cb8e:	200f      	movs	r0, #15
 800cb90:	e7fa      	b.n	800cb88 <LoRaMacCryptoDeriveMcKEKey+0x22>
	...

0800cb94 <LoRaMacCryptoSetKey>:
{
 800cb94:	b510      	push	{r4, lr}
 800cb96:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800cb98:	f003 ff00 	bl	801099c <SecureElementSetKey>
 800cb9c:	b978      	cbnz	r0, 800cbbe <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800cb9e:	b104      	cbz	r4, 800cba2 <LoRaMacCryptoSetKey+0xe>
}
 800cba0:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800cba2:	4b09      	ldr	r3, [pc, #36]	; (800cbc8 <LoRaMacCryptoSetKey+0x34>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4621      	mov	r1, r4
 800cba8:	7898      	ldrb	r0, [r3, #2]
 800cbaa:	f7ff ffc1 	bl	800cb30 <LoRaMacCryptoDeriveMcRootKey>
 800cbae:	b940      	cbnz	r0, 800cbc2 <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800cbb0:	2004      	movs	r0, #4
 800cbb2:	f7ff ffd8 	bl	800cb66 <LoRaMacCryptoDeriveMcKEKey>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d0f2      	beq.n	800cba0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cbba:	200f      	movs	r0, #15
 800cbbc:	e7f0      	b.n	800cba0 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cbbe:	200f      	movs	r0, #15
 800cbc0:	e7ee      	b.n	800cba0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cbc2:	200f      	movs	r0, #15
 800cbc4:	e7ec      	b.n	800cba0 <LoRaMacCryptoSetKey+0xc>
 800cbc6:	bf00      	nop
 800cbc8:	2000102c 	.word	0x2000102c

0800cbcc <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800cbcc:	2a00      	cmp	r2, #0
 800cbce:	d064      	beq.n	800cc9a <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800cbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbd2:	b08f      	sub	sp, #60	; 0x3c
 800cbd4:	4607      	mov	r7, r0
 800cbd6:	460d      	mov	r5, r1
 800cbd8:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800cbda:	2900      	cmp	r1, #0
 800cbdc:	d05f      	beq.n	800cc9e <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800cbde:	2600      	movs	r6, #0
 800cbe0:	9605      	str	r6, [sp, #20]
 800cbe2:	221d      	movs	r2, #29
 800cbe4:	4631      	mov	r1, r6
 800cbe6:	a806      	add	r0, sp, #24
 800cbe8:	f006 ff2e 	bl	8013a48 <memset>
    uint8_t versionMinor         = 0;
 800cbec:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800cbf0:	4b2f      	ldr	r3, [pc, #188]	; (800ccb0 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800cbf6:	f10d 0313 	add.w	r3, sp, #19
 800cbfa:	9302      	str	r3, [sp, #8]
 800cbfc:	ab05      	add	r3, sp, #20
 800cbfe:	9301      	str	r3, [sp, #4]
 800cc00:	7923      	ldrb	r3, [r4, #4]
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	6823      	ldr	r3, [r4, #0]
 800cc06:	4632      	mov	r2, r6
 800cc08:	4629      	mov	r1, r5
 800cc0a:	4638      	mov	r0, r7
 800cc0c:	f003 ff28 	bl	8010a60 <SecureElementProcessJoinAccept>
 800cc10:	2800      	cmp	r0, #0
 800cc12:	d146      	bne.n	800cca2 <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800cc14:	7922      	ldrb	r2, [r4, #4]
 800cc16:	a905      	add	r1, sp, #20
 800cc18:	6820      	ldr	r0, [r4, #0]
 800cc1a:	f003 ffc8 	bl	8010bae <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f000 f848 	bl	800ccb4 <LoRaMacParserJoinAccept>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	d13f      	bne.n	800cca8 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800cc28:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800cc2a:	79e3      	ldrb	r3, [r4, #7]
 800cc2c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800cc30:	7a23      	ldrb	r3, [r4, #8]
 800cc32:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800cc36:	4b1e      	ldr	r3, [pc, #120]	; (800ccb0 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	689a      	ldr	r2, [r3, #8]
 800cc3c:	42aa      	cmp	r2, r5
 800cc3e:	d035      	beq.n	800ccac <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800cc40:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800cc42:	2100      	movs	r1, #0
 800cc44:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800cc48:	f7ff ff72 	bl	800cb30 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cc4c:	bb50      	cbnz	r0, 800cca4 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800cc4e:	2004      	movs	r0, #4
 800cc50:	f7ff ff89 	bl	800cb66 <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cc54:	bb30      	cbnz	r0, 800cca4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800cc56:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800cc58:	7aa2      	ldrb	r2, [r4, #10]
 800cc5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800cc5e:	7ae4      	ldrb	r4, [r4, #11]
 800cc60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800cc64:	4633      	mov	r3, r6
 800cc66:	4622      	mov	r2, r4
 800cc68:	4629      	mov	r1, r5
 800cc6a:	2003      	movs	r0, #3
 800cc6c:	f7ff fd48 	bl	800c700 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cc70:	b9c0      	cbnz	r0, 800cca4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800cc72:	4633      	mov	r3, r6
 800cc74:	4622      	mov	r2, r4
 800cc76:	4629      	mov	r1, r5
 800cc78:	2002      	movs	r0, #2
 800cc7a:	f7ff fd41 	bl	800c700 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cc7e:	b988      	cbnz	r0, 800cca4 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800cc80:	4b0b      	ldr	r3, [pc, #44]	; (800ccb0 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800cc88:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800cc8e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc92:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800cc94:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800cc96:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800cc98:	e004      	b.n	800cca4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cc9a:	200a      	movs	r0, #10
}
 800cc9c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cc9e:	200a      	movs	r0, #10
 800cca0:	e000      	b.n	800cca4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cca2:	200f      	movs	r0, #15
}
 800cca4:	b00f      	add	sp, #60	; 0x3c
 800cca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800cca8:	2010      	movs	r0, #16
 800ccaa:	e7fb      	b.n	800cca4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800ccac:	2003      	movs	r0, #3
 800ccae:	e7f9      	b.n	800cca4 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800ccb0:	2000102c 	.word	0x2000102c

0800ccb4 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d047      	beq.n	800cd48 <LoRaMacParserJoinAccept+0x94>
{
 800ccb8:	b538      	push	{r3, r4, r5, lr}
 800ccba:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ccbc:	6801      	ldr	r1, [r0, #0]
 800ccbe:	2900      	cmp	r1, #0
 800ccc0:	d044      	beq.n	800cd4c <LoRaMacParserJoinAccept+0x98>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ccc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccc6:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800ccc8:	2203      	movs	r2, #3
 800ccca:	3006      	adds	r0, #6
 800cccc:	f003 ff6f 	bl	8010bae <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f850 1b09 	ldr.w	r1, [r0], #9
 800ccd6:	2203      	movs	r2, #3
 800ccd8:	3104      	adds	r1, #4
 800ccda:	f003 ff68 	bl	8010bae <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ccde:	6821      	ldr	r1, [r4, #0]
 800cce0:	79cb      	ldrb	r3, [r1, #7]
 800cce2:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800cce4:	7a0a      	ldrb	r2, [r1, #8]
 800cce6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ccea:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ccec:	7a4a      	ldrb	r2, [r1, #9]
 800ccee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccf2:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ccf4:	7a8a      	ldrb	r2, [r1, #10]
 800ccf6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ccfa:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800ccfc:	7acb      	ldrb	r3, [r1, #11]
 800ccfe:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800cd00:	7b0b      	ldrb	r3, [r1, #12]
 800cd02:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800cd04:	7923      	ldrb	r3, [r4, #4]
 800cd06:	2b21      	cmp	r3, #33	; 0x21
 800cd08:	d016      	beq.n	800cd38 <LoRaMacParserJoinAccept+0x84>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800cd0a:	2b11      	cmp	r3, #17
 800cd0c:	dc20      	bgt.n	800cd50 <LoRaMacParserJoinAccept+0x9c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800cd0e:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800cd10:	6821      	ldr	r1, [r4, #0]
 800cd12:	1c55      	adds	r5, r2, #1
 800cd14:	5c8b      	ldrb	r3, [r1, r2]
 800cd16:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800cd18:	1c90      	adds	r0, r2, #2
 800cd1a:	5d4d      	ldrb	r5, [r1, r5]
 800cd1c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800cd20:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800cd22:	3203      	adds	r2, #3
 800cd24:	5c08      	ldrb	r0, [r1, r0]
 800cd26:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cd2a:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800cd2c:	5c8a      	ldrb	r2, [r1, r2]
 800cd2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cd32:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800cd34:	2000      	movs	r0, #0
}
 800cd36:	bd38      	pop	{r3, r4, r5, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800cd38:	2210      	movs	r2, #16
 800cd3a:	310d      	adds	r1, #13
 800cd3c:	f104 0012 	add.w	r0, r4, #18
 800cd40:	f003 ff35 	bl	8010bae <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800cd44:	221d      	movs	r2, #29
 800cd46:	e7e3      	b.n	800cd10 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800cd48:	2002      	movs	r0, #2
}
 800cd4a:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800cd4c:	2002      	movs	r0, #2
 800cd4e:	e7f2      	b.n	800cd36 <LoRaMacParserJoinAccept+0x82>
        return LORAMAC_PARSER_FAIL;
 800cd50:	2001      	movs	r0, #1
 800cd52:	e7f0      	b.n	800cd36 <LoRaMacParserJoinAccept+0x82>

0800cd54 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d058      	beq.n	800ce0a <LoRaMacParserData+0xb6>
{
 800cd58:	b510      	push	{r4, lr}
 800cd5a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cd5c:	6801      	ldr	r1, [r0, #0]
 800cd5e:	2900      	cmp	r1, #0
 800cd60:	d055      	beq.n	800ce0e <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800cd62:	780b      	ldrb	r3, [r1, #0]
 800cd64:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800cd66:	784b      	ldrb	r3, [r1, #1]
 800cd68:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800cd6a:	788a      	ldrb	r2, [r1, #2]
 800cd6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cd70:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800cd72:	78ca      	ldrb	r2, [r1, #3]
 800cd74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd78:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800cd7a:	790a      	ldrb	r2, [r1, #4]
 800cd7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cd80:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800cd82:	794b      	ldrb	r3, [r1, #5]
 800cd84:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800cd86:	798b      	ldrb	r3, [r1, #6]
 800cd88:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800cd8a:	79ca      	ldrb	r2, [r1, #7]
 800cd8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cd90:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800cd92:	7b02      	ldrb	r2, [r0, #12]
 800cd94:	f002 020f 	and.w	r2, r2, #15
 800cd98:	3108      	adds	r1, #8
 800cd9a:	3010      	adds	r0, #16
 800cd9c:	f003 ff07 	bl	8010bae <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800cda0:	7b23      	ldrb	r3, [r4, #12]
 800cda2:	f003 030f 	and.w	r3, r3, #15
 800cda6:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800cdb0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800cdb4:	7922      	ldrb	r2, [r4, #4]
 800cdb6:	1a11      	subs	r1, r2, r0
 800cdb8:	2904      	cmp	r1, #4
 800cdba:	dc16      	bgt.n	800cdea <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800cdbc:	6822      	ldr	r2, [r4, #0]
 800cdbe:	7923      	ldrb	r3, [r4, #4]
 800cdc0:	441a      	add	r2, r3
 800cdc2:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800cdc6:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800cdc8:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800cdcc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cdd0:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800cdd2:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800cdd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cdda:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800cddc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800cde0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cde4:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800cde6:	2000      	movs	r0, #0
}
 800cde8:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800cdea:	6821      	ldr	r1, [r4, #0]
 800cdec:	3309      	adds	r3, #9
 800cdee:	5c08      	ldrb	r0, [r1, r0]
 800cdf0:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800cdf4:	1ad2      	subs	r2, r2, r3
 800cdf6:	b2d2      	uxtb	r2, r2
 800cdf8:	3a04      	subs	r2, #4
 800cdfa:	b2d2      	uxtb	r2, r2
 800cdfc:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800ce00:	4419      	add	r1, r3
 800ce02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ce04:	f003 fed3 	bl	8010bae <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800ce08:	e7d8      	b.n	800cdbc <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800ce0a:	2002      	movs	r0, #2
}
 800ce0c:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800ce0e:	2002      	movs	r0, #2
 800ce10:	e7ea      	b.n	800cde8 <LoRaMacParserData+0x94>

0800ce12 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ce12:	b370      	cbz	r0, 800ce72 <LoRaMacSerializerJoinRequest+0x60>
{
 800ce14:	b510      	push	{r4, lr}
 800ce16:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ce18:	6803      	ldr	r3, [r0, #0]
 800ce1a:	b363      	cbz	r3, 800ce76 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800ce1c:	7902      	ldrb	r2, [r0, #4]
 800ce1e:	2a16      	cmp	r2, #22
 800ce20:	d92b      	bls.n	800ce7a <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800ce22:	7942      	ldrb	r2, [r0, #5]
 800ce24:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800ce26:	4601      	mov	r1, r0
 800ce28:	f851 0b06 	ldr.w	r0, [r1], #6
 800ce2c:	2208      	movs	r2, #8
 800ce2e:	3001      	adds	r0, #1
 800ce30:	f003 fec7 	bl	8010bc2 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800ce34:	4621      	mov	r1, r4
 800ce36:	f851 0b0e 	ldr.w	r0, [r1], #14
 800ce3a:	2208      	movs	r2, #8
 800ce3c:	3009      	adds	r0, #9
 800ce3e:	f003 fec0 	bl	8010bc2 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800ce42:	8ae2      	ldrh	r2, [r4, #22]
 800ce44:	6823      	ldr	r3, [r4, #0]
 800ce46:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800ce48:	8ae3      	ldrh	r3, [r4, #22]
 800ce4a:	6822      	ldr	r2, [r4, #0]
 800ce4c:	0a1b      	lsrs	r3, r3, #8
 800ce4e:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800ce50:	69a2      	ldr	r2, [r4, #24]
 800ce52:	6823      	ldr	r3, [r4, #0]
 800ce54:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800ce56:	69a3      	ldr	r3, [r4, #24]
 800ce58:	0a1b      	lsrs	r3, r3, #8
 800ce5a:	6822      	ldr	r2, [r4, #0]
 800ce5c:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800ce5e:	8b62      	ldrh	r2, [r4, #26]
 800ce60:	6823      	ldr	r3, [r4, #0]
 800ce62:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800ce64:	7ee2      	ldrb	r2, [r4, #27]
 800ce66:	6823      	ldr	r3, [r4, #0]
 800ce68:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800ce6a:	2317      	movs	r3, #23
 800ce6c:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800ce6e:	2000      	movs	r0, #0
}
 800ce70:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800ce72:	2001      	movs	r0, #1
}
 800ce74:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800ce76:	2001      	movs	r0, #1
 800ce78:	e7fa      	b.n	800ce70 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800ce7a:	2002      	movs	r0, #2
 800ce7c:	e7f8      	b.n	800ce70 <LoRaMacSerializerJoinRequest+0x5e>

0800ce7e <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d066      	beq.n	800cf50 <LoRaMacSerializerData+0xd2>
{
 800ce82:	b538      	push	{r3, r4, r5, lr}
 800ce84:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ce86:	6801      	ldr	r1, [r0, #0]
 800ce88:	2900      	cmp	r1, #0
 800ce8a:	d063      	beq.n	800cf54 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ce8c:	7b02      	ldrb	r2, [r0, #12]
 800ce8e:	f002 020f 	and.w	r2, r2, #15
 800ce92:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800ce96:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ce9a:	b10b      	cbz	r3, 800cea0 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800ce9c:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800cea0:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800cea2:	3304      	adds	r3, #4
 800cea4:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800cea6:	7922      	ldrb	r2, [r4, #4]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d355      	bcc.n	800cf58 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800ceac:	7963      	ldrb	r3, [r4, #5]
 800ceae:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800ceb0:	68a2      	ldr	r2, [r4, #8]
 800ceb2:	6823      	ldr	r3, [r4, #0]
 800ceb4:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800ceb6:	68a3      	ldr	r3, [r4, #8]
 800ceb8:	0a1b      	lsrs	r3, r3, #8
 800ceba:	6822      	ldr	r2, [r4, #0]
 800cebc:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800cebe:	8962      	ldrh	r2, [r4, #10]
 800cec0:	6823      	ldr	r3, [r4, #0]
 800cec2:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800cec4:	7ae2      	ldrb	r2, [r4, #11]
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	7b22      	ldrb	r2, [r4, #12]
 800cece:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800ced0:	89e2      	ldrh	r2, [r4, #14]
 800ced2:	6823      	ldr	r3, [r4, #0]
 800ced4:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800ced6:	89e3      	ldrh	r3, [r4, #14]
 800ced8:	6822      	ldr	r2, [r4, #0]
 800ceda:	0a1b      	lsrs	r3, r3, #8
 800cedc:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800cede:	4621      	mov	r1, r4
 800cee0:	f851 0b10 	ldr.w	r0, [r1], #16
 800cee4:	7b22      	ldrb	r2, [r4, #12]
 800cee6:	f002 020f 	and.w	r2, r2, #15
 800ceea:	3008      	adds	r0, #8
 800ceec:	f003 fe5f 	bl	8010bae <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800cef0:	7b23      	ldrb	r3, [r4, #12]
 800cef2:	f003 030f 	and.w	r3, r3, #15
 800cef6:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800cefa:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800cefe:	b12a      	cbz	r2, 800cf0c <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800cf00:	6822      	ldr	r2, [r4, #0]
 800cf02:	f894 1020 	ldrb.w	r1, [r4, #32]
 800cf06:	5551      	strb	r1, [r2, r5]
 800cf08:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800cf0c:	6820      	ldr	r0, [r4, #0]
 800cf0e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800cf12:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cf14:	4428      	add	r0, r5
 800cf16:	f003 fe4a 	bl	8010bae <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800cf1a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cf1e:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800cf20:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800cf22:	6821      	ldr	r1, [r4, #0]
 800cf24:	1c5a      	adds	r2, r3, #1
 800cf26:	b292      	uxth	r2, r2
 800cf28:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800cf2a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cf2c:	0a08      	lsrs	r0, r1, #8
 800cf2e:	6825      	ldr	r5, [r4, #0]
 800cf30:	1c99      	adds	r1, r3, #2
 800cf32:	b289      	uxth	r1, r1
 800cf34:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800cf36:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800cf38:	6820      	ldr	r0, [r4, #0]
 800cf3a:	1cda      	adds	r2, r3, #3
 800cf3c:	b292      	uxth	r2, r2
 800cf3e:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800cf40:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800cf44:	6821      	ldr	r1, [r4, #0]
 800cf46:	3304      	adds	r3, #4
 800cf48:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800cf4a:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800cf4c:	2000      	movs	r0, #0
}
 800cf4e:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800cf50:	2001      	movs	r0, #1
}
 800cf52:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800cf54:	2001      	movs	r0, #1
 800cf56:	e7fa      	b.n	800cf4e <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800cf58:	2002      	movs	r0, #2
 800cf5a:	e7f8      	b.n	800cf4e <LoRaMacSerializerData+0xd0>

0800cf5c <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800cf5c:	4770      	bx	lr

0800cf5e <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 800cf5e:	2000      	movs	r0, #0
 800cf60:	4770      	bx	lr

0800cf62 <NvmDataMgmtRestore>:
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
}
 800cf62:	2000      	movs	r0, #0
 800cf64:	4770      	bx	lr

0800cf66 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800cf66:	2806      	cmp	r0, #6
 800cf68:	d805      	bhi.n	800cf76 <RegionIsActive+0x10>
 800cf6a:	2805      	cmp	r0, #5
 800cf6c:	d201      	bcs.n	800cf72 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800cf6e:	2000      	movs	r0, #0
 800cf70:	4770      	bx	lr
    switch( region )
 800cf72:	2001      	movs	r0, #1
 800cf74:	4770      	bx	lr
 800cf76:	2808      	cmp	r0, #8
 800cf78:	d101      	bne.n	800cf7e <RegionIsActive+0x18>
 800cf7a:	2001      	movs	r0, #1
 800cf7c:	4770      	bx	lr
            return false;
 800cf7e:	2000      	movs	r0, #0
        }
    }
}
 800cf80:	4770      	bx	lr

0800cf82 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800cf82:	b500      	push	{lr}
 800cf84:	b083      	sub	sp, #12
 800cf86:	4603      	mov	r3, r0
 800cf88:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	9200      	str	r2, [sp, #0]
    switch( region )
 800cf8e:	2b06      	cmp	r3, #6
 800cf90:	d00d      	beq.n	800cfae <RegionGetPhyParam+0x2c>
 800cf92:	2b08      	cmp	r3, #8
 800cf94:	d00f      	beq.n	800cfb6 <RegionGetPhyParam+0x34>
 800cf96:	2b05      	cmp	r3, #5
 800cf98:	d002      	beq.n	800cfa0 <RegionGetPhyParam+0x1e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800cf9a:	9b00      	ldr	r3, [sp, #0]
 800cf9c:	9301      	str	r3, [sp, #4]
 800cf9e:	e002      	b.n	800cfa6 <RegionGetPhyParam+0x24>
        EU868_GET_PHY_PARAM( );
 800cfa0:	f000 fe42 	bl	800dc28 <RegionEU868GetPhyParam>
 800cfa4:	9001      	str	r0, [sp, #4]
        }
    }
}
 800cfa6:	9801      	ldr	r0, [sp, #4]
 800cfa8:	b003      	add	sp, #12
 800cfaa:	f85d fb04 	ldr.w	pc, [sp], #4
        KR920_GET_PHY_PARAM( );
 800cfae:	f001 fc3d 	bl	800e82c <RegionKR920GetPhyParam>
 800cfb2:	9001      	str	r0, [sp, #4]
 800cfb4:	e7f7      	b.n	800cfa6 <RegionGetPhyParam+0x24>
        US915_GET_PHY_PARAM( );
 800cfb6:	f002 fa21 	bl	800f3fc <RegionUS915GetPhyParam>
 800cfba:	9001      	str	r0, [sp, #4]
 800cfbc:	e7f3      	b.n	800cfa6 <RegionGetPhyParam+0x24>

0800cfbe <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800cfbe:	b508      	push	{r3, lr}
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	4608      	mov	r0, r1
    switch( region )
 800cfc4:	2b06      	cmp	r3, #6
 800cfc6:	d007      	beq.n	800cfd8 <RegionSetBandTxDone+0x1a>
 800cfc8:	2b08      	cmp	r3, #8
 800cfca:	d008      	beq.n	800cfde <RegionSetBandTxDone+0x20>
 800cfcc:	2b05      	cmp	r3, #5
 800cfce:	d000      	beq.n	800cfd2 <RegionSetBandTxDone+0x14>
        default:
        {
            return;
        }
    }
}
 800cfd0:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800cfd2:	f000 feed 	bl	800ddb0 <RegionEU868SetBandTxDone>
 800cfd6:	e7fb      	b.n	800cfd0 <RegionSetBandTxDone+0x12>
        KR920_SET_BAND_TX_DONE( );
 800cfd8:	f001 fcec 	bl	800e9b4 <RegionKR920SetBandTxDone>
 800cfdc:	e7f8      	b.n	800cfd0 <RegionSetBandTxDone+0x12>
        US915_SET_BAND_TX_DONE( );
 800cfde:	f002 fae7 	bl	800f5b0 <RegionUS915SetBandTxDone>
 800cfe2:	e7f5      	b.n	800cfd0 <RegionSetBandTxDone+0x12>

0800cfe4 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800cfe4:	b508      	push	{r3, lr}
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	4608      	mov	r0, r1
    switch( region )
 800cfea:	2b06      	cmp	r3, #6
 800cfec:	d007      	beq.n	800cffe <RegionInitDefaults+0x1a>
 800cfee:	2b08      	cmp	r3, #8
 800cff0:	d008      	beq.n	800d004 <RegionInitDefaults+0x20>
 800cff2:	2b05      	cmp	r3, #5
 800cff4:	d000      	beq.n	800cff8 <RegionInitDefaults+0x14>
        default:
        {
            break;
        }
    }
}
 800cff6:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800cff8:	f000 fef8 	bl	800ddec <RegionEU868InitDefaults>
 800cffc:	e7fb      	b.n	800cff6 <RegionInitDefaults+0x12>
        KR920_INIT_DEFAULTS( );
 800cffe:	f001 fcf7 	bl	800e9f0 <RegionKR920InitDefaults>
 800d002:	e7f8      	b.n	800cff6 <RegionInitDefaults+0x12>
        US915_INIT_DEFAULTS( );
 800d004:	f002 faf2 	bl	800f5ec <RegionUS915InitDefaults>
}
 800d008:	e7f5      	b.n	800cff6 <RegionInitDefaults+0x12>

0800d00a <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d00a:	b508      	push	{r3, lr}
 800d00c:	4603      	mov	r3, r0
 800d00e:	4608      	mov	r0, r1
 800d010:	4611      	mov	r1, r2
    switch( region )
 800d012:	2b06      	cmp	r3, #6
 800d014:	d008      	beq.n	800d028 <RegionVerify+0x1e>
 800d016:	2b08      	cmp	r3, #8
 800d018:	d009      	beq.n	800d02e <RegionVerify+0x24>
 800d01a:	2b05      	cmp	r3, #5
 800d01c:	d001      	beq.n	800d022 <RegionVerify+0x18>
 800d01e:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d020:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800d022:	f000 ff4f 	bl	800dec4 <RegionEU868Verify>
 800d026:	e7fb      	b.n	800d020 <RegionVerify+0x16>
        KR920_VERIFY( );
 800d028:	f001 fd44 	bl	800eab4 <RegionKR920Verify>
 800d02c:	e7f8      	b.n	800d020 <RegionVerify+0x16>
        US915_VERIFY( );
 800d02e:	f002 fb83 	bl	800f738 <RegionUS915Verify>
 800d032:	e7f5      	b.n	800d020 <RegionVerify+0x16>

0800d034 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800d034:	b508      	push	{r3, lr}
 800d036:	4603      	mov	r3, r0
 800d038:	4608      	mov	r0, r1
    switch( region )
 800d03a:	2b06      	cmp	r3, #6
 800d03c:	d007      	beq.n	800d04e <RegionApplyCFList+0x1a>
 800d03e:	2b08      	cmp	r3, #8
 800d040:	d008      	beq.n	800d054 <RegionApplyCFList+0x20>
 800d042:	2b05      	cmp	r3, #5
 800d044:	d000      	beq.n	800d048 <RegionApplyCFList+0x14>
        default:
        {
            break;
        }
    }
}
 800d046:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800d048:	f001 fb04 	bl	800e654 <RegionEU868ApplyCFList>
 800d04c:	e7fb      	b.n	800d046 <RegionApplyCFList+0x12>
        KR920_APPLY_CF_LIST( );
 800d04e:	f002 f8b9 	bl	800f1c4 <RegionKR920ApplyCFList>
 800d052:	e7f8      	b.n	800d046 <RegionApplyCFList+0x12>
        US915_APPLY_CF_LIST( );
 800d054:	f002 fba0 	bl	800f798 <RegionUS915ApplyCFList>
}
 800d058:	e7f5      	b.n	800d046 <RegionApplyCFList+0x12>

0800d05a <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800d05a:	b508      	push	{r3, lr}
 800d05c:	4603      	mov	r3, r0
 800d05e:	4608      	mov	r0, r1
    switch( region )
 800d060:	2b06      	cmp	r3, #6
 800d062:	d008      	beq.n	800d076 <RegionChanMaskSet+0x1c>
 800d064:	2b08      	cmp	r3, #8
 800d066:	d009      	beq.n	800d07c <RegionChanMaskSet+0x22>
 800d068:	2b05      	cmp	r3, #5
 800d06a:	d001      	beq.n	800d070 <RegionChanMaskSet+0x16>
 800d06c:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d06e:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800d070:	f000 ff6e 	bl	800df50 <RegionEU868ChanMaskSet>
 800d074:	e7fb      	b.n	800d06e <RegionChanMaskSet+0x14>
        KR920_CHAN_MASK_SET( );
 800d076:	f001 fd57 	bl	800eb28 <RegionKR920ChanMaskSet>
 800d07a:	e7f8      	b.n	800d06e <RegionChanMaskSet+0x14>
        US915_CHAN_MASK_SET( );
 800d07c:	f002 fbca 	bl	800f814 <RegionUS915ChanMaskSet>
 800d080:	e7f5      	b.n	800d06e <RegionChanMaskSet+0x14>

0800d082 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d082:	b510      	push	{r4, lr}
 800d084:	4604      	mov	r4, r0
 800d086:	4608      	mov	r0, r1
 800d088:	4611      	mov	r1, r2
 800d08a:	461a      	mov	r2, r3
    switch( region )
 800d08c:	2c06      	cmp	r4, #6
 800d08e:	d008      	beq.n	800d0a2 <RegionComputeRxWindowParameters+0x20>
 800d090:	2c08      	cmp	r4, #8
 800d092:	d00a      	beq.n	800d0aa <RegionComputeRxWindowParameters+0x28>
 800d094:	2c05      	cmp	r4, #5
 800d096:	d000      	beq.n	800d09a <RegionComputeRxWindowParameters+0x18>
        default:
        {
            break;
        }
    }
}
 800d098:	bd10      	pop	{r4, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800d09a:	9b02      	ldr	r3, [sp, #8]
 800d09c:	f000 ff76 	bl	800df8c <RegionEU868ComputeRxWindowParameters>
 800d0a0:	e7fa      	b.n	800d098 <RegionComputeRxWindowParameters+0x16>
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
 800d0a2:	9b02      	ldr	r3, [sp, #8]
 800d0a4:	f001 fd5e 	bl	800eb64 <RegionKR920ComputeRxWindowParameters>
 800d0a8:	e7f6      	b.n	800d098 <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800d0aa:	9b02      	ldr	r3, [sp, #8]
 800d0ac:	f002 fbf6 	bl	800f89c <RegionUS915ComputeRxWindowParameters>
}
 800d0b0:	e7f2      	b.n	800d098 <RegionComputeRxWindowParameters+0x16>

0800d0b2 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d0b2:	b508      	push	{r3, lr}
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	4608      	mov	r0, r1
 800d0b8:	4611      	mov	r1, r2
    switch( region )
 800d0ba:	2b06      	cmp	r3, #6
 800d0bc:	d008      	beq.n	800d0d0 <RegionRxConfig+0x1e>
 800d0be:	2b08      	cmp	r3, #8
 800d0c0:	d009      	beq.n	800d0d6 <RegionRxConfig+0x24>
 800d0c2:	2b05      	cmp	r3, #5
 800d0c4:	d001      	beq.n	800d0ca <RegionRxConfig+0x18>
 800d0c6:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d0c8:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800d0ca:	f000 ff95 	bl	800dff8 <RegionEU868RxConfig>
 800d0ce:	e7fb      	b.n	800d0c8 <RegionRxConfig+0x16>
        KR920_RX_CONFIG( );
 800d0d0:	f001 fd76 	bl	800ebc0 <RegionKR920RxConfig>
 800d0d4:	e7f8      	b.n	800d0c8 <RegionRxConfig+0x16>
        US915_RX_CONFIG( );
 800d0d6:	f002 fc0f 	bl	800f8f8 <RegionUS915RxConfig>
 800d0da:	e7f5      	b.n	800d0c8 <RegionRxConfig+0x16>

0800d0dc <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d0dc:	b510      	push	{r4, lr}
 800d0de:	4604      	mov	r4, r0
 800d0e0:	4608      	mov	r0, r1
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	461a      	mov	r2, r3
    switch( region )
 800d0e6:	2c06      	cmp	r4, #6
 800d0e8:	d008      	beq.n	800d0fc <RegionTxConfig+0x20>
 800d0ea:	2c08      	cmp	r4, #8
 800d0ec:	d009      	beq.n	800d102 <RegionTxConfig+0x26>
 800d0ee:	2c05      	cmp	r4, #5
 800d0f0:	d001      	beq.n	800d0f6 <RegionTxConfig+0x1a>
 800d0f2:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d0f4:	bd10      	pop	{r4, pc}
        EU868_TX_CONFIG( );
 800d0f6:	f001 f803 	bl	800e100 <RegionEU868TxConfig>
 800d0fa:	e7fb      	b.n	800d0f4 <RegionTxConfig+0x18>
        KR920_TX_CONFIG( );
 800d0fc:	f001 fdbe 	bl	800ec7c <RegionKR920TxConfig>
 800d100:	e7f8      	b.n	800d0f4 <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800d102:	f002 fc53 	bl	800f9ac <RegionUS915TxConfig>
 800d106:	e7f5      	b.n	800d0f4 <RegionTxConfig+0x18>

0800d108 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d108:	b510      	push	{r4, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	4604      	mov	r4, r0
 800d10e:	4608      	mov	r0, r1
 800d110:	4611      	mov	r1, r2
 800d112:	461a      	mov	r2, r3
    switch( region )
 800d114:	2c06      	cmp	r4, #6
 800d116:	d00c      	beq.n	800d132 <RegionLinkAdrReq+0x2a>
 800d118:	2c08      	cmp	r4, #8
 800d11a:	d010      	beq.n	800d13e <RegionLinkAdrReq+0x36>
 800d11c:	2c05      	cmp	r4, #5
 800d11e:	d002      	beq.n	800d126 <RegionLinkAdrReq+0x1e>
 800d120:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d122:	b002      	add	sp, #8
 800d124:	bd10      	pop	{r4, pc}
        EU868_LINK_ADR_REQ( );
 800d126:	9b05      	ldr	r3, [sp, #20]
 800d128:	9300      	str	r3, [sp, #0]
 800d12a:	9b04      	ldr	r3, [sp, #16]
 800d12c:	f001 f880 	bl	800e230 <RegionEU868LinkAdrReq>
 800d130:	e7f7      	b.n	800d122 <RegionLinkAdrReq+0x1a>
        KR920_LINK_ADR_REQ( );
 800d132:	9b05      	ldr	r3, [sp, #20]
 800d134:	9300      	str	r3, [sp, #0]
 800d136:	9b04      	ldr	r3, [sp, #16]
 800d138:	f001 fe26 	bl	800ed88 <RegionKR920LinkAdrReq>
 800d13c:	e7f1      	b.n	800d122 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800d13e:	9b05      	ldr	r3, [sp, #20]
 800d140:	9300      	str	r3, [sp, #0]
 800d142:	9b04      	ldr	r3, [sp, #16]
 800d144:	f002 fcac 	bl	800faa0 <RegionUS915LinkAdrReq>
 800d148:	e7eb      	b.n	800d122 <RegionLinkAdrReq+0x1a>

0800d14a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d14a:	b508      	push	{r3, lr}
 800d14c:	4603      	mov	r3, r0
 800d14e:	4608      	mov	r0, r1
    switch( region )
 800d150:	2b06      	cmp	r3, #6
 800d152:	d008      	beq.n	800d166 <RegionRxParamSetupReq+0x1c>
 800d154:	2b08      	cmp	r3, #8
 800d156:	d009      	beq.n	800d16c <RegionRxParamSetupReq+0x22>
 800d158:	2b05      	cmp	r3, #5
 800d15a:	d001      	beq.n	800d160 <RegionRxParamSetupReq+0x16>
 800d15c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d15e:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800d160:	f001 f92a 	bl	800e3b8 <RegionEU868RxParamSetupReq>
 800d164:	e7fb      	b.n	800d15e <RegionRxParamSetupReq+0x14>
        KR920_RX_PARAM_SETUP_REQ( );
 800d166:	f001 fed3 	bl	800ef10 <RegionKR920RxParamSetupReq>
 800d16a:	e7f8      	b.n	800d15e <RegionRxParamSetupReq+0x14>
        US915_RX_PARAM_SETUP_REQ( );
 800d16c:	f002 fdd6 	bl	800fd1c <RegionUS915RxParamSetupReq>
 800d170:	e7f5      	b.n	800d15e <RegionRxParamSetupReq+0x14>

0800d172 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800d172:	b508      	push	{r3, lr}
 800d174:	4603      	mov	r3, r0
 800d176:	4608      	mov	r0, r1
    switch( region )
 800d178:	2b06      	cmp	r3, #6
 800d17a:	d008      	beq.n	800d18e <RegionNewChannelReq+0x1c>
 800d17c:	2b08      	cmp	r3, #8
 800d17e:	d009      	beq.n	800d194 <RegionNewChannelReq+0x22>
 800d180:	2b05      	cmp	r3, #5
 800d182:	d001      	beq.n	800d188 <RegionNewChannelReq+0x16>
 800d184:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d186:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800d188:	f001 faa4 	bl	800e6d4 <RegionEU868NewChannelReq>
 800d18c:	e7fb      	b.n	800d186 <RegionNewChannelReq+0x14>
        KR920_NEW_CHANNEL_REQ( );
 800d18e:	f002 f859 	bl	800f244 <RegionKR920NewChannelReq>
 800d192:	e7f8      	b.n	800d186 <RegionNewChannelReq+0x14>
        US915_NEW_CHANNEL_REQ( );
 800d194:	f002 fded 	bl	800fd72 <RegionUS915NewChannelReq>
 800d198:	e7f5      	b.n	800d186 <RegionNewChannelReq+0x14>

0800d19a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800d19a:	b508      	push	{r3, lr}
 800d19c:	4603      	mov	r3, r0
 800d19e:	4608      	mov	r0, r1
    switch( region )
 800d1a0:	2b06      	cmp	r3, #6
 800d1a2:	d008      	beq.n	800d1b6 <RegionTxParamSetupReq+0x1c>
 800d1a4:	2b08      	cmp	r3, #8
 800d1a6:	d009      	beq.n	800d1bc <RegionTxParamSetupReq+0x22>
 800d1a8:	2b05      	cmp	r3, #5
 800d1aa:	d001      	beq.n	800d1b0 <RegionTxParamSetupReq+0x16>
 800d1ac:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d1ae:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800d1b0:	f001 f926 	bl	800e400 <RegionEU868TxParamSetupReq>
 800d1b4:	e7fb      	b.n	800d1ae <RegionTxParamSetupReq+0x14>
        KR920_TX_PARAM_SETUP_REQ( );
 800d1b6:	f001 fec8 	bl	800ef4a <RegionKR920TxParamSetupReq>
 800d1ba:	e7f8      	b.n	800d1ae <RegionTxParamSetupReq+0x14>
        US915_TX_PARAM_SETUP_REQ( );
 800d1bc:	f002 fddc 	bl	800fd78 <RegionUS915TxParamSetupReq>
 800d1c0:	e7f5      	b.n	800d1ae <RegionTxParamSetupReq+0x14>

0800d1c2 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800d1c2:	b508      	push	{r3, lr}
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	4608      	mov	r0, r1
    switch( region )
 800d1c8:	2b06      	cmp	r3, #6
 800d1ca:	d008      	beq.n	800d1de <RegionDlChannelReq+0x1c>
 800d1cc:	2b08      	cmp	r3, #8
 800d1ce:	d009      	beq.n	800d1e4 <RegionDlChannelReq+0x22>
 800d1d0:	2b05      	cmp	r3, #5
 800d1d2:	d001      	beq.n	800d1d8 <RegionDlChannelReq+0x16>
 800d1d4:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d1d6:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800d1d8:	f001 f916 	bl	800e408 <RegionEU868DlChannelReq>
 800d1dc:	e7fb      	b.n	800d1d6 <RegionDlChannelReq+0x14>
        KR920_DL_CHANNEL_REQ( );
 800d1de:	f001 feb7 	bl	800ef50 <RegionKR920DlChannelReq>
 800d1e2:	e7f8      	b.n	800d1d6 <RegionDlChannelReq+0x14>
        US915_DL_CHANNEL_REQ( );
 800d1e4:	f002 fdcb 	bl	800fd7e <RegionUS915DlChannelReq>
 800d1e8:	e7f5      	b.n	800d1d6 <RegionDlChannelReq+0x14>

0800d1ea <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800d1ea:	b508      	push	{r3, lr}
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	4608      	mov	r0, r1
 800d1f0:	4611      	mov	r1, r2
    switch( region )
 800d1f2:	2b06      	cmp	r3, #6
 800d1f4:	d008      	beq.n	800d208 <RegionAlternateDr+0x1e>
 800d1f6:	2b08      	cmp	r3, #8
 800d1f8:	d009      	beq.n	800d20e <RegionAlternateDr+0x24>
 800d1fa:	2b05      	cmp	r3, #5
 800d1fc:	d001      	beq.n	800d202 <RegionAlternateDr+0x18>
 800d1fe:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d200:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800d202:	f001 f929 	bl	800e458 <RegionEU868AlternateDr>
 800d206:	e7fb      	b.n	800d200 <RegionAlternateDr+0x16>
        KR920_ALTERNATE_DR( );
 800d208:	f001 fec2 	bl	800ef90 <RegionKR920AlternateDr>
 800d20c:	e7f8      	b.n	800d200 <RegionAlternateDr+0x16>
        US915_ALTERNATE_DR( );
 800d20e:	f002 fdb9 	bl	800fd84 <RegionUS915AlternateDr>
 800d212:	e7f5      	b.n	800d200 <RegionAlternateDr+0x16>

0800d214 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d214:	b510      	push	{r4, lr}
 800d216:	4604      	mov	r4, r0
 800d218:	4608      	mov	r0, r1
 800d21a:	4611      	mov	r1, r2
 800d21c:	461a      	mov	r2, r3
    switch( region )
 800d21e:	2c06      	cmp	r4, #6
 800d220:	d009      	beq.n	800d236 <RegionNextChannel+0x22>
 800d222:	2c08      	cmp	r4, #8
 800d224:	d00b      	beq.n	800d23e <RegionNextChannel+0x2a>
 800d226:	2c05      	cmp	r4, #5
 800d228:	d001      	beq.n	800d22e <RegionNextChannel+0x1a>
 800d22a:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800d22c:	bd10      	pop	{r4, pc}
        EU868_NEXT_CHANNEL( );
 800d22e:	9b02      	ldr	r3, [sp, #8]
 800d230:	f001 f914 	bl	800e45c <RegionEU868NextChannel>
 800d234:	e7fa      	b.n	800d22c <RegionNextChannel+0x18>
        KR920_NEXT_CHANNEL( );
 800d236:	9b02      	ldr	r3, [sp, #8]
 800d238:	f001 feac 	bl	800ef94 <RegionKR920NextChannel>
 800d23c:	e7f6      	b.n	800d22c <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800d23e:	9b02      	ldr	r3, [sp, #8]
 800d240:	f002 fdc6 	bl	800fdd0 <RegionUS915NextChannel>
 800d244:	e7f2      	b.n	800d22c <RegionNextChannel+0x18>

0800d246 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800d246:	b508      	push	{r3, lr}
 800d248:	4603      	mov	r3, r0
 800d24a:	4608      	mov	r0, r1
    switch( region )
 800d24c:	2b06      	cmp	r3, #6
 800d24e:	d007      	beq.n	800d260 <RegionSetContinuousWave+0x1a>
 800d250:	2b08      	cmp	r3, #8
 800d252:	d008      	beq.n	800d266 <RegionSetContinuousWave+0x20>
 800d254:	2b05      	cmp	r3, #5
 800d256:	d000      	beq.n	800d25a <RegionSetContinuousWave+0x14>
        default:
        {
            break;
        }
    }
}
 800d258:	bd08      	pop	{r3, pc}
        EU868_SET_CONTINUOUS_WAVE( );
 800d25a:	f001 fa67 	bl	800e72c <RegionEU868SetContinuousWave>
 800d25e:	e7fb      	b.n	800d258 <RegionSetContinuousWave+0x12>
        KR920_SET_CONTINUOUS_WAVE( );
 800d260:	f002 f81c 	bl	800f29c <RegionKR920SetContinuousWave>
 800d264:	e7f8      	b.n	800d258 <RegionSetContinuousWave+0x12>
        US915_SET_CONTINUOUS_WAVE( );
 800d266:	f002 fe63 	bl	800ff30 <RegionUS915SetContinuousWave>
}
 800d26a:	e7f5      	b.n	800d258 <RegionSetContinuousWave+0x12>

0800d26c <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800d26c:	b510      	push	{r4, lr}
 800d26e:	4604      	mov	r4, r0
 800d270:	4608      	mov	r0, r1
 800d272:	4611      	mov	r1, r2
 800d274:	461a      	mov	r2, r3
    switch( region )
 800d276:	2c06      	cmp	r4, #6
 800d278:	d008      	beq.n	800d28c <RegionApplyDrOffset+0x20>
 800d27a:	2c08      	cmp	r4, #8
 800d27c:	d009      	beq.n	800d292 <RegionApplyDrOffset+0x26>
 800d27e:	2c05      	cmp	r4, #5
 800d280:	d001      	beq.n	800d286 <RegionApplyDrOffset+0x1a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800d282:	b2c8      	uxtb	r0, r1
 800d284:	e001      	b.n	800d28a <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800d286:	f001 fa7f 	bl	800e788 <RegionEU868ApplyDrOffset>
        }
    }
}
 800d28a:	bd10      	pop	{r4, pc}
        KR920_APPLY_DR_OFFSET( );
 800d28c:	f002 f844 	bl	800f318 <RegionKR920ApplyDrOffset>
 800d290:	e7fb      	b.n	800d28a <RegionApplyDrOffset+0x1e>
        US915_APPLY_DR_OFFSET( );
 800d292:	f002 fe81 	bl	800ff98 <RegionUS915ApplyDrOffset>
 800d296:	e7f8      	b.n	800d28a <RegionApplyDrOffset+0x1e>

0800d298 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800d298:	4800      	ldr	r0, [pc, #0]	; (800d29c <RegionGetVersion+0x4>)
 800d29a:	4770      	bx	lr
 800d29c:	01000300 	.word	0x01000300

0800d2a0 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800d2a0:	b1b9      	cbz	r1, 800d2d2 <FindAvailable125kHzChannels+0x32>
{
 800d2a2:	b410      	push	{r4}
 800d2a4:	460c      	mov	r4, r1
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800d2a6:	b1b2      	cbz	r2, 800d2d6 <FindAvailable125kHzChannels+0x36>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800d2ac:	e001      	b.n	800d2b2 <FindAvailable125kHzChannels+0x12>
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	2b07      	cmp	r3, #7
 800d2b4:	d80a      	bhi.n	800d2cc <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800d2b6:	fa40 f103 	asr.w	r1, r0, r3
 800d2ba:	f011 0f01 	tst.w	r1, #1
 800d2be:	d0f6      	beq.n	800d2ae <FindAvailable125kHzChannels+0xe>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800d2c0:	7811      	ldrb	r1, [r2, #0]
 800d2c2:	5463      	strb	r3, [r4, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800d2c4:	7811      	ldrb	r1, [r2, #0]
 800d2c6:	3101      	adds	r1, #1
 800d2c8:	7011      	strb	r1, [r2, #0]
 800d2ca:	e7f0      	b.n	800d2ae <FindAvailable125kHzChannels+0xe>
        }
    }

    return LORAMAC_STATUS_OK;
 800d2cc:	2000      	movs	r0, #0
}
 800d2ce:	bc10      	pop	{r4}
 800d2d0:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d2d2:	2003      	movs	r0, #3
}
 800d2d4:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d2d6:	2003      	movs	r0, #3
 800d2d8:	e7f9      	b.n	800d2ce <FindAvailable125kHzChannels+0x2e>

0800d2da <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800d2da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2dc:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800d2de:	2300      	movs	r3, #0
 800d2e0:	9302      	str	r3, [sp, #8]
 800d2e2:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800d2e4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d03c      	beq.n	800d366 <RegionBaseUSComputeNext125kHzJoinChannel+0x8c>
 800d2ec:	460d      	mov	r5, r1
 800d2ee:	4617      	mov	r7, r2
 800d2f0:	4606      	mov	r6, r0
 800d2f2:	2900      	cmp	r1, #0
 800d2f4:	d039      	beq.n	800d36a <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800d2f6:	2a00      	cmp	r2, #0
 800d2f8:	d039      	beq.n	800d36e <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800d2fa:	780c      	ldrb	r4, [r1, #0]
 800d2fc:	e015      	b.n	800d32a <RegionBaseUSComputeNext125kHzJoinChannel+0x50>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800d2fe:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800d302:	0a00      	lsrs	r0, r0, #8
 800d304:	e017      	b.n	800d336 <RegionBaseUSComputeNext125kHzJoinChannel+0x5c>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800d306:	3901      	subs	r1, #1
 800d308:	2000      	movs	r0, #0
 800d30a:	f003 fc43 	bl	8010b94 <randr>
 800d30e:	ab04      	add	r3, sp, #16
 800d310:	4418      	add	r0, r3
 800d312:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800d316:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d31a:	703b      	strb	r3, [r7, #0]
 800d31c:	e016      	b.n	800d34c <RegionBaseUSComputeNext125kHzJoinChannel+0x72>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800d31e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d322:	b9cb      	cbnz	r3, 800d358 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
 800d324:	782a      	ldrb	r2, [r5, #0]
 800d326:	42a2      	cmp	r2, r4
 800d328:	d016      	beq.n	800d358 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800d32a:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800d32c:	f014 0f01 	tst.w	r4, #1
 800d330:	d1e5      	bne.n	800d2fe <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800d332:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800d336:	f10d 0207 	add.w	r2, sp, #7
 800d33a:	a902      	add	r1, sp, #8
 800d33c:	f7ff ffb0 	bl	800d2a0 <FindAvailable125kHzChannels>
 800d340:	2803      	cmp	r0, #3
 800d342:	d00b      	beq.n	800d35c <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        if ( availableChannels > 0 )
 800d344:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d348:	2900      	cmp	r1, #0
 800d34a:	d1dc      	bne.n	800d306 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800d34c:	3401      	adds	r4, #1
 800d34e:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800d350:	2c07      	cmp	r4, #7
 800d352:	d9e4      	bls.n	800d31e <RegionBaseUSComputeNext125kHzJoinChannel+0x44>
            startIndex = 0;
 800d354:	2400      	movs	r4, #0
 800d356:	e7e2      	b.n	800d31e <RegionBaseUSComputeNext125kHzJoinChannel+0x44>

    if ( availableChannels > 0 )
 800d358:	b913      	cbnz	r3, 800d360 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800d35a:	2003      	movs	r0, #3
}
 800d35c:	b005      	add	sp, #20
 800d35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800d360:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800d362:	2000      	movs	r0, #0
 800d364:	e7fa      	b.n	800d35c <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d366:	2003      	movs	r0, #3
 800d368:	e7f8      	b.n	800d35c <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800d36a:	2003      	movs	r0, #3
 800d36c:	e7f6      	b.n	800d35c <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800d36e:	2003      	movs	r0, #3
 800d370:	e7f4      	b.n	800d35c <RegionBaseUSComputeNext125kHzJoinChannel+0x82>

0800d372 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800d372:	fb02 1000 	mla	r0, r2, r0, r1
 800d376:	4770      	bx	lr

0800d378 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800d378:	b082      	sub	sp, #8
 800d37a:	f10d 0c08 	add.w	ip, sp, #8
 800d37e:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800d382:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800d384:	b971      	cbnz	r1, 800d3a4 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800d386:	9b00      	ldr	r3, [sp, #0]
 800d388:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800d38c:	d306      	bcc.n	800d39c <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800d38e:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800d392:	4293      	cmp	r3, r2
 800d394:	d80a      	bhi.n	800d3ac <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800d396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d39a:	e000      	b.n	800d39e <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800d39c:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800d39e:	4298      	cmp	r0, r3
 800d3a0:	bf38      	it	cc
 800d3a2:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800d3a4:	b900      	cbnz	r0, 800d3a8 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800d3a6:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800d3a8:	b002      	add	sp, #8
 800d3aa:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800d3ac:	f242 7310 	movw	r3, #10000	; 0x2710
 800d3b0:	e7f5      	b.n	800d39e <GetDutyCycle+0x26>

0800d3b2 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800d3b2:	b410      	push	{r4}
 800d3b4:	4604      	mov	r4, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800d3b6:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800d3b8:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800d3ba:	e001      	b.n	800d3c0 <CountChannels+0xe>
 800d3bc:	3301      	adds	r3, #1
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	428b      	cmp	r3, r1
 800d3c2:	d206      	bcs.n	800d3d2 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	409a      	lsls	r2, r3
 800d3c8:	43a2      	bics	r2, r4
 800d3ca:	d1f7      	bne.n	800d3bc <CountChannels+0xa>
        {
            nbActiveBits++;
 800d3cc:	3001      	adds	r0, #1
 800d3ce:	b2c0      	uxtb	r0, r0
 800d3d0:	e7f4      	b.n	800d3bc <CountChannels+0xa>
        }
    }
    return nbActiveBits;
}
 800d3d2:	bc10      	pop	{r4}
 800d3d4:	4770      	bx	lr
	...

0800d3d8 <SetMaxTimeCredits>:
{
 800d3d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3dc:	b089      	sub	sp, #36	; 0x24
 800d3de:	4604      	mov	r4, r0
 800d3e0:	460e      	mov	r6, r1
 800d3e2:	ad02      	add	r5, sp, #8
 800d3e4:	e885 000c 	stmia.w	r5, {r2, r3}
 800d3e8:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 800d3ec:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800d3f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d3f4:	f005 ffea 	bl	80133cc <SysTimeToMs>
 800d3f8:	4681      	mov	r9, r0
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800d3fa:	e895 000c 	ldmia.w	r5, {r2, r3}
 800d3fe:	4631      	mov	r1, r6
 800d400:	4620      	mov	r0, r4
 800d402:	f7ff ffb9 	bl	800d378 <GetDutyCycle>
 800d406:	4605      	mov	r5, r0
    if( joined == false )
 800d408:	2e00      	cmp	r6, #0
 800d40a:	d149      	bne.n	800d4a0 <SetMaxTimeCredits+0xc8>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800d40c:	2864      	cmp	r0, #100	; 0x64
 800d40e:	d023      	beq.n	800d458 <SetMaxTimeCredits+0x80>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800d410:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d414:	d024      	beq.n	800d460 <SetMaxTimeCredits+0x88>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800d416:	4e25      	ldr	r6, [pc, #148]	; (800d4ac <SetMaxTimeCredits+0xd4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800d418:	68a1      	ldr	r1, [r4, #8]
 800d41a:	a806      	add	r0, sp, #24
 800d41c:	f005 fff6 	bl	801340c <SysTimeFromMs>
 800d420:	9b07      	ldr	r3, [sp, #28]
 800d422:	9300      	str	r3, [sp, #0]
 800d424:	9b06      	ldr	r3, [sp, #24]
 800d426:	9a03      	ldr	r2, [sp, #12]
 800d428:	9902      	ldr	r1, [sp, #8]
 800d42a:	a804      	add	r0, sp, #16
 800d42c:	f005 ff59 	bl	80132e2 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800d430:	b917      	cbnz	r7, 800d438 <SetMaxTimeCredits+0x60>
 800d432:	f1b8 0f00 	cmp.w	r8, #0
 800d436:	d002      	beq.n	800d43e <SetMaxTimeCredits+0x66>
            ( band->MaxTimeCredits != maxCredits ) ||
 800d438:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800d43a:	42b3      	cmp	r3, r6
 800d43c:	d014      	beq.n	800d468 <SetMaxTimeCredits+0x90>
            band->TimeCredits = maxCredits;
 800d43e:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800d440:	9b02      	ldr	r3, [sp, #8]
 800d442:	4a1b      	ldr	r2, [pc, #108]	; (800d4b0 <SetMaxTimeCredits+0xd8>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d814      	bhi.n	800d472 <SetMaxTimeCredits+0x9a>
    if( band->LastBandUpdateTime == 0 )
 800d448:	6863      	ldr	r3, [r4, #4]
 800d44a:	b903      	cbnz	r3, 800d44e <SetMaxTimeCredits+0x76>
        band->TimeCredits = maxCredits;
 800d44c:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800d44e:	6126      	str	r6, [r4, #16]
}
 800d450:	4628      	mov	r0, r5
 800d452:	b009      	add	sp, #36	; 0x24
 800d454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800d458:	f8c4 9008 	str.w	r9, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800d45c:	4e15      	ldr	r6, [pc, #84]	; (800d4b4 <SetMaxTimeCredits+0xdc>)
 800d45e:	e7db      	b.n	800d418 <SetMaxTimeCredits+0x40>
            band->LastMaxCreditAssignTime = elapsedTime;
 800d460:	f8c4 9008 	str.w	r9, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800d464:	4e14      	ldr	r6, [pc, #80]	; (800d4b8 <SetMaxTimeCredits+0xe0>)
 800d466:	e7d7      	b.n	800d418 <SetMaxTimeCredits+0x40>
            ( band->MaxTimeCredits != maxCredits ) ||
 800d468:	9a04      	ldr	r2, [sp, #16]
 800d46a:	4b14      	ldr	r3, [pc, #80]	; (800d4bc <SetMaxTimeCredits+0xe4>)
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d9eb      	bls.n	800d448 <SetMaxTimeCredits+0x70>
 800d470:	e7e5      	b.n	800d43e <SetMaxTimeCredits+0x66>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800d472:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800d476:	3b30      	subs	r3, #48	; 0x30
 800d478:	4a11      	ldr	r2, [pc, #68]	; (800d4c0 <SetMaxTimeCredits+0xe8>)
 800d47a:	fba2 2303 	umull	r2, r3, r2, r3
 800d47e:	0c1b      	lsrs	r3, r3, #16
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800d480:	4a10      	ldr	r2, [pc, #64]	; (800d4c4 <SetMaxTimeCredits+0xec>)
 800d482:	fb02 f303 	mul.w	r3, r2, r3
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800d486:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800d48a:	3330      	adds	r3, #48	; 0x30
 800d48c:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800d48e:	2300      	movs	r3, #0
 800d490:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800d494:	9905      	ldr	r1, [sp, #20]
 800d496:	9804      	ldr	r0, [sp, #16]
 800d498:	f005 ff98 	bl	80133cc <SysTimeToMs>
 800d49c:	60a0      	str	r0, [r4, #8]
 800d49e:	e7d3      	b.n	800d448 <SetMaxTimeCredits+0x70>
        if( dutyCycleEnabled == false )
 800d4a0:	b917      	cbnz	r7, 800d4a8 <SetMaxTimeCredits+0xd0>
            band->TimeCredits = maxCredits;
 800d4a2:	4e04      	ldr	r6, [pc, #16]	; (800d4b4 <SetMaxTimeCredits+0xdc>)
 800d4a4:	60e6      	str	r6, [r4, #12]
 800d4a6:	e7cf      	b.n	800d448 <SetMaxTimeCredits+0x70>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800d4a8:	4e02      	ldr	r6, [pc, #8]	; (800d4b4 <SetMaxTimeCredits+0xdc>)
 800d4aa:	e7cd      	b.n	800d448 <SetMaxTimeCredits+0x70>
 800d4ac:	02932e00 	.word	0x02932e00
 800d4b0:	0001ec2f 	.word	0x0001ec2f
 800d4b4:	001b7740 	.word	0x001b7740
 800d4b8:	0112a880 	.word	0x0112a880
 800d4bc:	0001517f 	.word	0x0001517f
 800d4c0:	c22e4507 	.word	0xc22e4507
 800d4c4:	00015180 	.word	0x00015180

0800d4c8 <UpdateTimeCredits>:
{
 800d4c8:	b570      	push	{r4, r5, r6, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	4604      	mov	r4, r0
 800d4ce:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800d4d0:	9301      	str	r3, [sp, #4]
 800d4d2:	9200      	str	r2, [sp, #0]
 800d4d4:	ab06      	add	r3, sp, #24
 800d4d6:	cb0c      	ldmia	r3, {r2, r3}
 800d4d8:	f7ff ff7e 	bl	800d3d8 <SetMaxTimeCredits>
 800d4dc:	4605      	mov	r5, r0
    if( joined == true )
 800d4de:	b94e      	cbnz	r6, 800d4f4 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800d4e0:	68e2      	ldr	r2, [r4, #12]
 800d4e2:	6923      	ldr	r3, [r4, #16]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d900      	bls.n	800d4ea <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800d4e8:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800d4ea:	9b08      	ldr	r3, [sp, #32]
 800d4ec:	6063      	str	r3, [r4, #4]
}
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	b002      	add	sp, #8
 800d4f2:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800d4f4:	6860      	ldr	r0, [r4, #4]
 800d4f6:	f005 ffe7 	bl	80134c8 <UTIL_TIMER_GetElapsedTime>
 800d4fa:	68e3      	ldr	r3, [r4, #12]
 800d4fc:	4403      	add	r3, r0
 800d4fe:	60e3      	str	r3, [r4, #12]
 800d500:	e7ee      	b.n	800d4e0 <UpdateTimeCredits+0x18>

0800d502 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800d502:	4288      	cmp	r0, r1
 800d504:	db03      	blt.n	800d50e <RegionCommonValueInRange+0xc>
 800d506:	4290      	cmp	r0, r2
 800d508:	dd03      	ble.n	800d512 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800d50a:	2000      	movs	r0, #0
 800d50c:	4770      	bx	lr
 800d50e:	2000      	movs	r0, #0
 800d510:	4770      	bx	lr
        return 1;
 800d512:	2001      	movs	r0, #1
}
 800d514:	4770      	bx	lr

0800d516 <RegionCommonChanVerifyDr>:
{
 800d516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d51a:	4682      	mov	sl, r0
 800d51c:	460e      	mov	r6, r1
 800d51e:	4690      	mov	r8, r2
 800d520:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800d524:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800d528:	4619      	mov	r1, r3
 800d52a:	4640      	mov	r0, r8
 800d52c:	f7ff ffe9 	bl	800d502 <RegionCommonValueInRange>
 800d530:	b338      	cbz	r0, 800d582 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800d532:	2500      	movs	r5, #0
 800d534:	462f      	mov	r7, r5
 800d536:	e01e      	b.n	800d576 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800d538:	3401      	adds	r4, #1
 800d53a:	b2e4      	uxtb	r4, r4
 800d53c:	2c0f      	cmp	r4, #15
 800d53e:	d816      	bhi.n	800d56e <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800d540:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800d544:	4123      	asrs	r3, r4
 800d546:	f013 0f01 	tst.w	r3, #1
 800d54a:	d0f5      	beq.n	800d538 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800d54c:	193b      	adds	r3, r7, r4
 800d54e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d552:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800d556:	7a19      	ldrb	r1, [r3, #8]
 800d558:	090a      	lsrs	r2, r1, #4
 800d55a:	f001 010f 	and.w	r1, r1, #15
 800d55e:	4640      	mov	r0, r8
 800d560:	f7ff ffcf 	bl	800d502 <RegionCommonValueInRange>
 800d564:	2801      	cmp	r0, #1
 800d566:	d1e7      	bne.n	800d538 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800d568:	2001      	movs	r0, #1
}
 800d56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800d56e:	3710      	adds	r7, #16
 800d570:	b2ff      	uxtb	r7, r7
 800d572:	3501      	adds	r5, #1
 800d574:	b2ed      	uxtb	r5, r5
 800d576:	4557      	cmp	r7, sl
 800d578:	d201      	bcs.n	800d57e <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800d57a:	2400      	movs	r4, #0
 800d57c:	e7de      	b.n	800d53c <RegionCommonChanVerifyDr+0x26>
    return false;
 800d57e:	2000      	movs	r0, #0
 800d580:	e7f3      	b.n	800d56a <RegionCommonChanVerifyDr+0x54>
        return false;
 800d582:	2000      	movs	r0, #0
 800d584:	e7f1      	b.n	800d56a <RegionCommonChanVerifyDr+0x54>

0800d586 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800d586:	0913      	lsrs	r3, r2, #4
 800d588:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800d58c:	d311      	bcc.n	800d5b2 <RegionCommonChanDisable+0x2c>
{
 800d58e:	b410      	push	{r4}
 800d590:	090c      	lsrs	r4, r1, #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800d592:	4291      	cmp	r1, r2
 800d594:	d20f      	bcs.n	800d5b6 <RegionCommonChanDisable+0x30>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800d596:	f001 010f 	and.w	r1, r1, #15
 800d59a:	2301      	movs	r3, #1
 800d59c:	fa03 f101 	lsl.w	r1, r3, r1
 800d5a0:	f830 2014 	ldrh.w	r2, [r0, r4, lsl #1]
 800d5a4:	ea22 0101 	bic.w	r1, r2, r1
 800d5a8:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]

    return true;
 800d5ac:	4618      	mov	r0, r3
}
 800d5ae:	bc10      	pop	{r4}
 800d5b0:	4770      	bx	lr
        return false;
 800d5b2:	2000      	movs	r0, #0
}
 800d5b4:	4770      	bx	lr
        return false;
 800d5b6:	2000      	movs	r0, #0
 800d5b8:	e7f9      	b.n	800d5ae <RegionCommonChanDisable+0x28>

0800d5ba <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800d5ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800d5bc:	b188      	cbz	r0, 800d5e2 <RegionCommonCountChannels+0x28>
 800d5be:	460c      	mov	r4, r1
 800d5c0:	4616      	mov	r6, r2
 800d5c2:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800d5c4:	2500      	movs	r5, #0
 800d5c6:	e008      	b.n	800d5da <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800d5c8:	2110      	movs	r1, #16
 800d5ca:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800d5ce:	f7ff fef0 	bl	800d3b2 <CountChannels>
 800d5d2:	4405      	add	r5, r0
 800d5d4:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800d5d6:	3401      	adds	r4, #1
 800d5d8:	b2e4      	uxtb	r4, r4
 800d5da:	42b4      	cmp	r4, r6
 800d5dc:	d3f4      	bcc.n	800d5c8 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800d5de:	4628      	mov	r0, r5
 800d5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800d5e2:	2500      	movs	r5, #0
 800d5e4:	e7fb      	b.n	800d5de <RegionCommonCountChannels+0x24>

0800d5e6 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800d5e6:	b170      	cbz	r0, 800d606 <RegionCommonChanMaskCopy+0x20>
{
 800d5e8:	b410      	push	{r4}
 800d5ea:	4604      	mov	r4, r0
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800d5ec:	b149      	cbz	r1, 800d602 <RegionCommonChanMaskCopy+0x1c>
    {
        for( uint8_t i = 0; i < len; i++ )
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d206      	bcs.n	800d602 <RegionCommonChanMaskCopy+0x1c>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800d5f4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800d5f8:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	e7f6      	b.n	800d5f0 <RegionCommonChanMaskCopy+0xa>
        }
    }
}
 800d602:	bc10      	pop	{r4}
 800d604:	4770      	bx	lr
 800d606:	4770      	bx	lr

0800d608 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800d608:	b082      	sub	sp, #8
 800d60a:	b538      	push	{r3, r4, r5, lr}
 800d60c:	4605      	mov	r5, r0
 800d60e:	460c      	mov	r4, r1
 800d610:	4611      	mov	r1, r2
 800d612:	aa04      	add	r2, sp, #16
 800d614:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800d618:	ca0c      	ldmia	r2, {r2, r3}
 800d61a:	f7ff fead 	bl	800d378 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800d61e:	68eb      	ldr	r3, [r5, #12]
 800d620:	fb04 f100 	mul.w	r1, r4, r0
 800d624:	428b      	cmp	r3, r1
 800d626:	d905      	bls.n	800d634 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800d628:	1a59      	subs	r1, r3, r1
 800d62a:	60e9      	str	r1, [r5, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800d62c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d630:	b002      	add	sp, #8
 800d632:	4770      	bx	lr
        band->TimeCredits = 0;
 800d634:	2300      	movs	r3, #0
 800d636:	60eb      	str	r3, [r5, #12]
}
 800d638:	e7f8      	b.n	800d62c <RegionCommonSetBandTxDone+0x24>
	...

0800d63c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800d63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d640:	b089      	sub	sp, #36	; 0x24
 800d642:	4607      	mov	r7, r0
 800d644:	468b      	mov	fp, r1
 800d646:	4691      	mov	r9, r2
 800d648:	4698      	mov	r8, r3
 800d64a:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800d64e:	f005 ff31 	bl	80134b4 <UTIL_TIMER_GetCurrentTime>
 800d652:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800d654:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800d656:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d658:	f04f 33ff 	mov.w	r3, #4294967295
 800d65c:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800d65e:	e005      	b.n	800d66c <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800d660:	2301      	movs	r3, #1
 800d662:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800d664:	441e      	add	r6, r3
 800d666:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800d668:	3401      	adds	r4, #1
 800d66a:	b2e4      	uxtb	r4, r4
 800d66c:	454c      	cmp	r4, r9
 800d66e:	d25b      	bcs.n	800d728 <RegionCommonUpdateBandTimeOff+0xec>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800d670:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800d674:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800d678:	9b04      	ldr	r3, [sp, #16]
 800d67a:	9302      	str	r3, [sp, #8]
 800d67c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d67e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d680:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d684:	4653      	mov	r3, sl
 800d686:	4642      	mov	r2, r8
 800d688:	4639      	mov	r1, r7
 800d68a:	4628      	mov	r0, r5
 800d68c:	f7ff ff1c 	bl	800d4c8 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800d690:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d692:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800d696:	68ea      	ldr	r2, [r5, #12]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d8e1      	bhi.n	800d660 <RegionCommonUpdateBandTimeOff+0x24>
 800d69c:	f1b8 0f00 	cmp.w	r8, #0
 800d6a0:	d101      	bne.n	800d6a6 <RegionCommonUpdateBandTimeOff+0x6a>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800d6a2:	2f00      	cmp	r7, #0
 800d6a4:	d1dc      	bne.n	800d660 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800d6aa:	6929      	ldr	r1, [r5, #16]
 800d6ac:	4299      	cmp	r1, r3
 800d6ae:	d907      	bls.n	800d6c0 <RegionCommonUpdateBandTimeOff+0x84>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800d6b0:	1a9b      	subs	r3, r3, r2
 800d6b2:	9a05      	ldr	r2, [sp, #20]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	bf28      	it	cs
 800d6b8:	461a      	movcs	r2, r3
 800d6ba:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800d6bc:	3601      	adds	r6, #1
 800d6be:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800d6c0:	2f00      	cmp	r7, #0
 800d6c2:	d1d1      	bne.n	800d668 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800d6ca:	2864      	cmp	r0, #100	; 0x64
 800d6cc:	d024      	beq.n	800d718 <RegionCommonUpdateBandTimeOff+0xdc>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800d6ce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d6d2:	d025      	beq.n	800d720 <RegionCommonUpdateBandTimeOff+0xe4>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800d6d4:	4b19      	ldr	r3, [pc, #100]	; (800d73c <RegionCommonUpdateBandTimeOff+0x100>)
 800d6d6:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800d6d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d6da:	4a18      	ldr	r2, [pc, #96]	; (800d73c <RegionCommonUpdateBandTimeOff+0x100>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d90c      	bls.n	800d6fa <RegionCommonUpdateBandTimeOff+0xbe>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800d6e0:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800d6e4:	3b30      	subs	r3, #48	; 0x30
 800d6e6:	4a16      	ldr	r2, [pc, #88]	; (800d740 <RegionCommonUpdateBandTimeOff+0x104>)
 800d6e8:	fba2 2303 	umull	r2, r3, r2, r3
 800d6ec:	0c1b      	lsrs	r3, r3, #16
 800d6ee:	4a15      	ldr	r2, [pc, #84]	; (800d744 <RegionCommonUpdateBandTimeOff+0x108>)
 800d6f0:	fb03 2202 	mla	r2, r3, r2, r2
 800d6f4:	9b06      	ldr	r3, [sp, #24]
 800d6f6:	441a      	add	r2, r3
 800d6f8:	9206      	str	r2, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800d6fa:	ad06      	add	r5, sp, #24
 800d6fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d702:	e895 0006 	ldmia.w	r5, {r1, r2}
 800d706:	4628      	mov	r0, r5
 800d708:	f005 fdeb 	bl	80132e2 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800d70c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d710:	f005 fe5c 	bl	80133cc <SysTimeToMs>
 800d714:	9005      	str	r0, [sp, #20]
 800d716:	e7a7      	b.n	800d668 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800d718:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800d71c:	9306      	str	r3, [sp, #24]
 800d71e:	e7db      	b.n	800d6d8 <RegionCommonUpdateBandTimeOff+0x9c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800d720:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800d724:	9306      	str	r3, [sp, #24]
 800d726:	e7d7      	b.n	800d6d8 <RegionCommonUpdateBandTimeOff+0x9c>
            }
        }
    }


    if( validBands == 0 )
 800d728:	b11e      	cbz	r6, 800d732 <RegionCommonUpdateBandTimeOff+0xf6>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800d72a:	9805      	ldr	r0, [sp, #20]
 800d72c:	b009      	add	sp, #36	; 0x24
 800d72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800d732:	f04f 33ff 	mov.w	r3, #4294967295
 800d736:	9305      	str	r3, [sp, #20]
 800d738:	e7f7      	b.n	800d72a <RegionCommonUpdateBandTimeOff+0xee>
 800d73a:	bf00      	nop
 800d73c:	0001ec30 	.word	0x0001ec30
 800d740:	c22e4507 	.word	0xc22e4507
 800d744:	00015180 	.word	0x00015180

0800d748 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800d748:	7803      	ldrb	r3, [r0, #0]
 800d74a:	2b03      	cmp	r3, #3
 800d74c:	d001      	beq.n	800d752 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800d74e:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800d750:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800d752:	7843      	ldrb	r3, [r0, #1]
 800d754:	f990 2001 	ldrsb.w	r2, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800d758:	f002 020f 	and.w	r2, r2, #15
 800d75c:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800d75e:	091b      	lsrs	r3, r3, #4
 800d760:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800d762:	7883      	ldrb	r3, [r0, #2]
 800d764:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800d766:	78c2      	ldrb	r2, [r0, #3]
 800d768:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d76c:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800d76e:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800d770:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800d774:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800d776:	f003 030f 	and.w	r3, r3, #15
 800d77a:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800d77c:	2005      	movs	r0, #5
 800d77e:	4770      	bx	lr

0800d780 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800d780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d784:	b085      	sub	sp, #20
 800d786:	4604      	mov	r4, r0
 800d788:	4688      	mov	r8, r1
 800d78a:	4617      	mov	r7, r2
 800d78c:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800d78e:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800d790:	f990 b006 	ldrsb.w	fp, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800d794:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800d798:	f990 a008 	ldrsb.w	sl, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800d79c:	7943      	ldrb	r3, [r0, #5]
 800d79e:	b92b      	cbnz	r3, 800d7ac <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800d7a0:	f990 a00b 	ldrsb.w	sl, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800d7a4:	f990 b009 	ldrsb.w	fp, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800d7a8:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800d7ac:	b95d      	cbnz	r5, 800d7c6 <RegionCommonLinkAdrReqVerifyParams+0x46>
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800d7ae:	2d07      	cmp	r5, #7
 800d7b0:	d02c      	beq.n	800d80c <RegionCommonLinkAdrReqVerifyParams+0x8c>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800d7b2:	f888 b000 	strb.w	fp, [r8]
    *txPow = txPower;
 800d7b6:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800d7ba:	f886 a000 	strb.w	sl, [r6]

    return status;
}
 800d7be:	4628      	mov	r0, r5
 800d7c0:	b005      	add	sp, #20
 800d7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800d7c6:	69a3      	ldr	r3, [r4, #24]
 800d7c8:	9301      	str	r3, [sp, #4]
 800d7ca:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800d7ce:	9300      	str	r3, [sp, #0]
 800d7d0:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d7d4:	465a      	mov	r2, fp
 800d7d6:	6921      	ldr	r1, [r4, #16]
 800d7d8:	7b20      	ldrb	r0, [r4, #12]
 800d7da:	f7ff fe9c 	bl	800d516 <RegionCommonChanVerifyDr>
 800d7de:	b908      	cbnz	r0, 800d7e4 <RegionCommonLinkAdrReqVerifyParams+0x64>
            status &= 0xFD; // Datarate KO
 800d7e0:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800d7e4:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800d7e8:	9303      	str	r3, [sp, #12]
 800d7ea:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800d7ee:	461c      	mov	r4, r3
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	4648      	mov	r0, r9
 800d7f4:	f7ff fe85 	bl	800d502 <RegionCommonValueInRange>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d1d8      	bne.n	800d7ae <RegionCommonLinkAdrReqVerifyParams+0x2e>
            if( verifyParams->MaxTxPower > txPower )
 800d7fc:	454c      	cmp	r4, r9
 800d7fe:	dc02      	bgt.n	800d806 <RegionCommonLinkAdrReqVerifyParams+0x86>
                status &= 0xFB; // TxPower KO
 800d800:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800d804:	e7d3      	b.n	800d7ae <RegionCommonLinkAdrReqVerifyParams+0x2e>
                txPower = verifyParams->MaxTxPower;
 800d806:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d80a:	e7d0      	b.n	800d7ae <RegionCommonLinkAdrReqVerifyParams+0x2e>
        if( nbRepetitions == 0 )
 800d80c:	f1ba 0f00 	cmp.w	sl, #0
 800d810:	d1cf      	bne.n	800d7b2 <RegionCommonLinkAdrReqVerifyParams+0x32>
            nbRepetitions = 1;
 800d812:	f04f 0a01 	mov.w	sl, #1
 800d816:	e7cc      	b.n	800d7b2 <RegionCommonLinkAdrReqVerifyParams+0x32>

0800d818 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800d818:	4b02      	ldr	r3, [pc, #8]	; (800d824 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800d81a:	fa03 f000 	lsl.w	r0, r3, r0
}
 800d81e:	fbb0 f0f1 	udiv	r0, r0, r1
 800d822:	4770      	bx	lr
 800d824:	000f4240 	.word	0x000f4240

0800d828 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800d828:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800d82c:	fbb3 f0f0 	udiv	r0, r3, r0
 800d830:	4770      	bx	lr
	...

0800d834 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800d834:	b430      	push	{r4, r5}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800d836:	1f0c      	subs	r4, r1, #4
 800d838:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800d83c:	fb05 f202 	mul.w	r2, r5, r2
 800d840:	fb00 2204 	mla	r2, r0, r4, r2
 800d844:	0052      	lsls	r2, r2, #1
 800d846:	d021      	beq.n	800d88c <RegionCommonComputeRxWindowParameters+0x58>
 800d848:	4402      	add	r2, r0
 800d84a:	3a01      	subs	r2, #1
 800d84c:	fbb2 f2f0 	udiv	r2, r2, r0
 800d850:	428a      	cmp	r2, r1
 800d852:	bf38      	it	cc
 800d854:	460a      	movcc	r2, r1
 800d856:	9902      	ldr	r1, [sp, #8]
 800d858:	600a      	str	r2, [r1, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800d85a:	0081      	lsls	r1, r0, #2
 800d85c:	fb00 f002 	mul.w	r0, r0, r2
 800d860:	b1b8      	cbz	r0, 800d892 <RegionCommonComputeRxWindowParameters+0x5e>
 800d862:	3001      	adds	r0, #1
 800d864:	0840      	lsrs	r0, r0, #1
 800d866:	1a08      	subs	r0, r1, r0
 800d868:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d86c:	fb02 0313 	mls	r3, r2, r3, r0
 800d870:	2b00      	cmp	r3, #0
 800d872:	dd10      	ble.n	800d896 <RegionCommonComputeRxWindowParameters+0x62>
 800d874:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800d878:	480a      	ldr	r0, [pc, #40]	; (800d8a4 <RegionCommonComputeRxWindowParameters+0x70>)
 800d87a:	fb80 2003 	smull	r2, r0, r0, r3
 800d87e:	17db      	asrs	r3, r3, #31
 800d880:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 800d884:	9a03      	ldr	r2, [sp, #12]
 800d886:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800d888:	bc30      	pop	{r4, r5}
 800d88a:	4770      	bx	lr
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800d88c:	fbb2 f2f0 	udiv	r2, r2, r0
 800d890:	e7de      	b.n	800d850 <RegionCommonComputeRxWindowParameters+0x1c>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800d892:	0840      	lsrs	r0, r0, #1
 800d894:	e7e7      	b.n	800d866 <RegionCommonComputeRxWindowParameters+0x32>
 800d896:	4803      	ldr	r0, [pc, #12]	; (800d8a4 <RegionCommonComputeRxWindowParameters+0x70>)
 800d898:	fb80 2003 	smull	r2, r0, r0, r3
 800d89c:	17db      	asrs	r3, r3, #31
 800d89e:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 800d8a2:	e7ef      	b.n	800d884 <RegionCommonComputeRxWindowParameters+0x50>
 800d8a4:	10624dd3 	.word	0x10624dd3

0800d8a8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800d8a8:	b538      	push	{r3, r4, r5, lr}
 800d8aa:	460d      	mov	r5, r1
 800d8ac:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800d8ae:	0040      	lsls	r0, r0, #1
 800d8b0:	f7f4 ff8c 	bl	80027cc <__aeabi_ui2f>
 800d8b4:	4601      	mov	r1, r0
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	f7f4 fed6 	bl	8002668 <__aeabi_fsub>
 800d8bc:	4621      	mov	r1, r4
 800d8be:	f7f4 fed3 	bl	8002668 <__aeabi_fsub>
 800d8c2:	f7f4 fdc5 	bl	8002450 <__aeabi_f2d>
 800d8c6:	f006 f8c7 	bl	8013a58 <floor>
 800d8ca:	f7f4 fea1 	bl	8002610 <__aeabi_d2iz>

    return phyTxPower;
}
 800d8ce:	b240      	sxtb	r0, r0
 800d8d0:	bd38      	pop	{r3, r4, r5, pc}

0800d8d2 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800d8d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	4605      	mov	r5, r0
 800d8da:	468b      	mov	fp, r1
 800d8dc:	9200      	str	r2, [sp, #0]
 800d8de:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d8e0:	2600      	movs	r6, #0
 800d8e2:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800d8e4:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800d8e6:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d8e8:	e04a      	b.n	800d980 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800d8ea:	7a3a      	ldrb	r2, [r7, #8]
 800d8ec:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800d8f0:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800d8f4:	b252      	sxtb	r2, r2
 800d8f6:	b249      	sxtb	r1, r1
 800d8f8:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800d8fc:	f7ff fe01 	bl	800d502 <RegionCommonValueInRange>
 800d900:	b178      	cbz	r0, 800d922 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800d902:	68ea      	ldr	r2, [r5, #12]
 800d904:	7a7b      	ldrb	r3, [r7, #9]
 800d906:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d90a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d90e:	7d1b      	ldrb	r3, [r3, #20]
 800d910:	b35b      	cbz	r3, 800d96a <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800d912:	f109 0301 	add.w	r3, r9, #1
 800d916:	eb08 0204 	add.w	r2, r8, r4
 800d91a:	f80b 2009 	strb.w	r2, [fp, r9]
 800d91e:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800d922:	3401      	adds	r4, #1
 800d924:	b2e4      	uxtb	r4, r4
 800d926:	2c0f      	cmp	r4, #15
 800d928:	d824      	bhi.n	800d974 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800d92a:	686b      	ldr	r3, [r5, #4]
 800d92c:	0072      	lsls	r2, r6, #1
 800d92e:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800d932:	4123      	asrs	r3, r4
 800d934:	f013 0f01 	tst.w	r3, #1
 800d938:	d0f3      	beq.n	800d922 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800d93a:	68a8      	ldr	r0, [r5, #8]
 800d93c:	eb08 0304 	add.w	r3, r8, r4
 800d940:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d944:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800d948:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d0e8      	beq.n	800d922 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d950:	782b      	ldrb	r3, [r5, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d1c9      	bne.n	800d8ea <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800d956:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d0c6      	beq.n	800d8ea <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800d95c:	5a9b      	ldrh	r3, [r3, r2]
 800d95e:	fa43 f104 	asr.w	r1, r3, r4
 800d962:	f011 0f01 	tst.w	r1, #1
 800d966:	d1c0      	bne.n	800d8ea <RegionCommonCountNbOfEnabledChannels+0x18>
 800d968:	e7db      	b.n	800d922 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800d96a:	f10a 0a01 	add.w	sl, sl, #1
 800d96e:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800d972:	e7d6      	b.n	800d922 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d974:	f108 0810 	add.w	r8, r8, #16
 800d978:	fa5f f888 	uxtb.w	r8, r8
 800d97c:	3601      	adds	r6, #1
 800d97e:	b2f6      	uxtb	r6, r6
 800d980:	fa1f f388 	uxth.w	r3, r8
 800d984:	8a2a      	ldrh	r2, [r5, #16]
 800d986:	4293      	cmp	r3, r2
 800d988:	d201      	bcs.n	800d98e <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800d98a:	2400      	movs	r4, #0
 800d98c:	e7cb      	b.n	800d926 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800d98e:	9b00      	ldr	r3, [sp, #0]
 800d990:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800d994:	9b01      	ldr	r3, [sp, #4]
 800d996:	f883 a000 	strb.w	sl, [r3]
}
 800d99a:	b003      	add	sp, #12
 800d99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d9a0 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800d9a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9a4:	b085      	sub	sp, #20
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	460f      	mov	r7, r1
 800d9aa:	4616      	mov	r6, r2
 800d9ac:	461d      	mov	r5, r3
 800d9ae:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800d9b2:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800d9b6:	6840      	ldr	r0, [r0, #4]
 800d9b8:	f005 fd86 	bl	80134c8 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800d9bc:	6823      	ldr	r3, [r4, #0]
 800d9be:	1a1b      	subs	r3, r3, r0
 800d9c0:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d9ce:	6863      	ldr	r3, [r4, #4]
 800d9d0:	b113      	cbz	r3, 800d9d8 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800d9d2:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d9d4:	4283      	cmp	r3, r0
 800d9d6:	d81c      	bhi.n	800da12 <RegionCommonIdentifyChannels+0x72>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d9dc:	69e3      	ldr	r3, [r4, #28]
 800d9de:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800d9e2:	781f      	ldrb	r7, [r3, #0]
 800d9e4:	69a3      	ldr	r3, [r4, #24]
 800d9e6:	9303      	str	r3, [sp, #12]
 800d9e8:	ab01      	add	r3, sp, #4
 800d9ea:	6921      	ldr	r1, [r4, #16]
 800d9ec:	68e0      	ldr	r0, [r4, #12]
 800d9ee:	e883 0003 	stmia.w	r3, {r0, r1}
 800d9f2:	7d23      	ldrb	r3, [r4, #20]
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	7a23      	ldrb	r3, [r4, #8]
 800d9f8:	7a62      	ldrb	r2, [r4, #9]
 800d9fa:	4661      	mov	r1, ip
 800d9fc:	4638      	mov	r0, r7
 800d9fe:	f7ff fe1d 	bl	800d63c <RegionCommonUpdateBandTimeOff>
 800da02:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800da06:	4643      	mov	r3, r8
 800da08:	462a      	mov	r2, r5
 800da0a:	4631      	mov	r1, r6
 800da0c:	69e0      	ldr	r0, [r4, #28]
 800da0e:	f7ff ff60 	bl	800d8d2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800da12:	782b      	ldrb	r3, [r5, #0]
 800da14:	b923      	cbnz	r3, 800da20 <RegionCommonIdentifyChannels+0x80>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800da16:	f898 3000 	ldrb.w	r3, [r8]
 800da1a:	b13b      	cbz	r3, 800da2c <RegionCommonIdentifyChannels+0x8c>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800da1c:	200b      	movs	r0, #11
 800da1e:	e002      	b.n	800da26 <RegionCommonIdentifyChannels+0x86>
        *nextTxDelay = 0;
 800da20:	2000      	movs	r0, #0
 800da22:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800da26:	b005      	add	sp, #20
 800da28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800da2c:	200c      	movs	r0, #12
 800da2e:	e7fa      	b.n	800da26 <RegionCommonIdentifyChannels+0x86>

0800da30 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800da30:	b570      	push	{r4, r5, r6, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800da36:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800da3a:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800da3e:	42a6      	cmp	r6, r4
 800da40:	d011      	beq.n	800da66 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800da42:	3c01      	subs	r4, #1
 800da44:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800da46:	42a6      	cmp	r6, r4
 800da48:	d00e      	beq.n	800da68 <RegionCommonGetNextLowerTxDr+0x38>
 800da4a:	68ab      	ldr	r3, [r5, #8]
 800da4c:	9301      	str	r3, [sp, #4]
 800da4e:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	4633      	mov	r3, r6
 800da56:	4622      	mov	r2, r4
 800da58:	6869      	ldr	r1, [r5, #4]
 800da5a:	78e8      	ldrb	r0, [r5, #3]
 800da5c:	f7ff fd5b 	bl	800d516 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800da60:	2800      	cmp	r0, #0
 800da62:	d0ee      	beq.n	800da42 <RegionCommonGetNextLowerTxDr+0x12>
 800da64:	e000      	b.n	800da68 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800da66:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800da68:	4620      	mov	r0, r4
 800da6a:	b002      	add	sp, #8
 800da6c:	bd70      	pop	{r4, r5, r6, pc}

0800da6e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800da6e:	4288      	cmp	r0, r1
 800da70:	bfb8      	it	lt
 800da72:	4608      	movlt	r0, r1
 800da74:	4770      	bx	lr
	...

0800da78 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800da78:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800da7c:	4a05      	ldr	r2, [pc, #20]	; (800da94 <RegionCommonGetBandwidth+0x1c>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d004      	beq.n	800da8c <RegionCommonGetBandwidth+0x14>
 800da82:	4a05      	ldr	r2, [pc, #20]	; (800da98 <RegionCommonGetBandwidth+0x20>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d103      	bne.n	800da90 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800da88:	2002      	movs	r0, #2
 800da8a:	4770      	bx	lr
            return 1;
 800da8c:	2001      	movs	r0, #1
 800da8e:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800da90:	2000      	movs	r0, #0
    }
}
 800da92:	4770      	bx	lr
 800da94:	0003d090 	.word	0x0003d090
 800da98:	0007a120 	.word	0x0007a120

0800da9c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800da9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da9e:	b08b      	sub	sp, #44	; 0x2c
 800daa0:	4606      	mov	r6, r0
 800daa2:	460f      	mov	r7, r1
 800daa4:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800daa6:	ac04      	add	r4, sp, #16
 800daa8:	4d11      	ldr	r5, [pc, #68]	; (800daf0 <RegionCommonRxConfigPrint+0x54>)
 800daaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800daac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800daae:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dab2:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 800dab6:	2e05      	cmp	r6, #5
 800dab8:	d810      	bhi.n	800dadc <RegionCommonRxConfigPrint+0x40>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800daba:	f8cd c008 	str.w	ip, [sp, #8]
 800dabe:	9701      	str	r7, [sp, #4]
 800dac0:	ab0a      	add	r3, sp, #40	; 0x28
 800dac2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800dac6:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	4b09      	ldr	r3, [pc, #36]	; (800daf4 <RegionCommonRxConfigPrint+0x58>)
 800dace:	2201      	movs	r2, #1
 800dad0:	2100      	movs	r1, #0
 800dad2:	2002      	movs	r0, #2
 800dad4:	f005 f9f4 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800dad8:	b00b      	add	sp, #44	; 0x2c
 800dada:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800dadc:	f8cd c004 	str.w	ip, [sp, #4]
 800dae0:	9700      	str	r7, [sp, #0]
 800dae2:	4b05      	ldr	r3, [pc, #20]	; (800daf8 <RegionCommonRxConfigPrint+0x5c>)
 800dae4:	2201      	movs	r2, #1
 800dae6:	2100      	movs	r1, #0
 800dae8:	2002      	movs	r0, #2
 800daea:	f005 f9e9 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
}
 800daee:	e7f3      	b.n	800dad8 <RegionCommonRxConfigPrint+0x3c>
 800daf0:	08013b8c 	.word	0x08013b8c
 800daf4:	080141a0 	.word	0x080141a0
 800daf8:	080141c0 	.word	0x080141c0

0800dafc <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800dafc:	b500      	push	{lr}
 800dafe:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800db00:	9101      	str	r1, [sp, #4]
 800db02:	9000      	str	r0, [sp, #0]
 800db04:	4b04      	ldr	r3, [pc, #16]	; (800db18 <RegionCommonTxConfigPrint+0x1c>)
 800db06:	2201      	movs	r2, #1
 800db08:	2100      	movs	r1, #0
 800db0a:	2002      	movs	r0, #2
 800db0c:	f005 f9d8 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
}
 800db10:	b003      	add	sp, #12
 800db12:	f85d fb04 	ldr.w	pc, [sp], #4
 800db16:	bf00      	nop
 800db18:	080141dc 	.word	0x080141dc

0800db1c <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800db1c:	b538      	push	{r3, r4, r5, lr}
 800db1e:	4604      	mov	r4, r0
 800db20:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800db22:	4b1b      	ldr	r3, [pc, #108]	; (800db90 <VerifyRfFreq+0x74>)
 800db24:	6a1b      	ldr	r3, [r3, #32]
 800db26:	4798      	blx	r3
 800db28:	b130      	cbz	r0, 800db38 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800db2a:	4b1a      	ldr	r3, [pc, #104]	; (800db94 <VerifyRfFreq+0x78>)
 800db2c:	4423      	add	r3, r4
 800db2e:	4a1a      	ldr	r2, [pc, #104]	; (800db98 <VerifyRfFreq+0x7c>)
 800db30:	4293      	cmp	r3, r2
 800db32:	d802      	bhi.n	800db3a <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800db34:	2302      	movs	r3, #2
 800db36:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800db38:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800db3a:	4b18      	ldr	r3, [pc, #96]	; (800db9c <VerifyRfFreq+0x80>)
 800db3c:	4423      	add	r3, r4
 800db3e:	4a18      	ldr	r2, [pc, #96]	; (800dba0 <VerifyRfFreq+0x84>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d802      	bhi.n	800db4a <VerifyRfFreq+0x2e>
        *band = 0;
 800db44:	2300      	movs	r3, #0
 800db46:	702b      	strb	r3, [r5, #0]
 800db48:	e7f6      	b.n	800db38 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800db4a:	4b16      	ldr	r3, [pc, #88]	; (800dba4 <VerifyRfFreq+0x88>)
 800db4c:	4423      	add	r3, r4
 800db4e:	4a16      	ldr	r2, [pc, #88]	; (800dba8 <VerifyRfFreq+0x8c>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d802      	bhi.n	800db5a <VerifyRfFreq+0x3e>
        *band = 1;
 800db54:	2301      	movs	r3, #1
 800db56:	702b      	strb	r3, [r5, #0]
 800db58:	e7ee      	b.n	800db38 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800db5a:	4b14      	ldr	r3, [pc, #80]	; (800dbac <VerifyRfFreq+0x90>)
 800db5c:	4423      	add	r3, r4
 800db5e:	4a14      	ldr	r2, [pc, #80]	; (800dbb0 <VerifyRfFreq+0x94>)
 800db60:	4293      	cmp	r3, r2
 800db62:	d802      	bhi.n	800db6a <VerifyRfFreq+0x4e>
        *band = 5;
 800db64:	2305      	movs	r3, #5
 800db66:	702b      	strb	r3, [r5, #0]
 800db68:	e7e6      	b.n	800db38 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800db6a:	4b12      	ldr	r3, [pc, #72]	; (800dbb4 <VerifyRfFreq+0x98>)
 800db6c:	4423      	add	r3, r4
 800db6e:	4a12      	ldr	r2, [pc, #72]	; (800dbb8 <VerifyRfFreq+0x9c>)
 800db70:	4293      	cmp	r3, r2
 800db72:	d802      	bhi.n	800db7a <VerifyRfFreq+0x5e>
        *band = 3;
 800db74:	2303      	movs	r3, #3
 800db76:	702b      	strb	r3, [r5, #0]
 800db78:	e7de      	b.n	800db38 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800db7a:	4b10      	ldr	r3, [pc, #64]	; (800dbbc <VerifyRfFreq+0xa0>)
 800db7c:	4423      	add	r3, r4
 800db7e:	4a10      	ldr	r2, [pc, #64]	; (800dbc0 <VerifyRfFreq+0xa4>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d802      	bhi.n	800db8a <VerifyRfFreq+0x6e>
        *band = 4;
 800db84:	2304      	movs	r3, #4
 800db86:	702b      	strb	r3, [r5, #0]
 800db88:	e7d6      	b.n	800db38 <VerifyRfFreq+0x1c>
        return false;
 800db8a:	2000      	movs	r0, #0
 800db8c:	e7d4      	b.n	800db38 <VerifyRfFreq+0x1c>
 800db8e:	bf00      	nop
 800db90:	08014674 	.word	0x08014674
 800db94:	cc8faa40 	.word	0xcc8faa40
 800db98:	001e847f 	.word	0x001e847f
 800db9c:	cc7125c0 	.word	0xcc7125c0
 800dba0:	002dc6c0 	.word	0x002dc6c0
 800dba4:	cc435eff 	.word	0xcc435eff
 800dba8:	000927bf 	.word	0x000927bf
 800dbac:	cc38b0a0 	.word	0xcc38b0a0
 800dbb0:	0007a120 	.word	0x0007a120
 800dbb4:	cc2e0240 	.word	0xcc2e0240
 800dbb8:	0003d090 	.word	0x0003d090
 800dbbc:	cc296e60 	.word	0xcc296e60
 800dbc0:	000493e0 	.word	0x000493e0

0800dbc4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800dbc4:	b570      	push	{r4, r5, r6, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	4605      	mov	r5, r0
 800dbca:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800dbcc:	4b13      	ldr	r3, [pc, #76]	; (800dc1c <GetTimeOnAir+0x58>)
 800dbce:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800dbd0:	4913      	ldr	r1, [pc, #76]	; (800dc20 <GetTimeOnAir+0x5c>)
 800dbd2:	f7ff ff51 	bl	800da78 <RegionCommonGetBandwidth>
 800dbd6:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800dbd8:	2d07      	cmp	r5, #7
 800dbda:	d00e      	beq.n	800dbfa <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800dbdc:	4b11      	ldr	r3, [pc, #68]	; (800dc24 <GetTimeOnAir+0x60>)
 800dbde:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800dbe0:	2001      	movs	r0, #1
 800dbe2:	9003      	str	r0, [sp, #12]
 800dbe4:	b2e4      	uxtb	r4, r4
 800dbe6:	9402      	str	r4, [sp, #8]
 800dbe8:	2300      	movs	r3, #0
 800dbea:	9301      	str	r3, [sp, #4]
 800dbec:	2308      	movs	r3, #8
 800dbee:	9300      	str	r3, [sp, #0]
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	4632      	mov	r2, r6
 800dbf4:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800dbf6:	b004      	add	sp, #16
 800dbf8:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800dbfa:	4b0a      	ldr	r3, [pc, #40]	; (800dc24 <GetTimeOnAir+0x60>)
 800dbfc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800dbfe:	2301      	movs	r3, #1
 800dc00:	9303      	str	r3, [sp, #12]
 800dc02:	b2e4      	uxtb	r4, r4
 800dc04:	9402      	str	r4, [sp, #8]
 800dc06:	2000      	movs	r0, #0
 800dc08:	9001      	str	r0, [sp, #4]
 800dc0a:	2305      	movs	r3, #5
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	4603      	mov	r3, r0
 800dc10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dc14:	fb02 f206 	mul.w	r2, r2, r6
 800dc18:	47a8      	blx	r5
 800dc1a:	e7ec      	b.n	800dbf6 <GetTimeOnAir+0x32>
 800dc1c:	08014218 	.word	0x08014218
 800dc20:	080141f8 	.word	0x080141f8
 800dc24:	08014674 	.word	0x08014674

0800dc28 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800dc28:	b500      	push	{lr}
 800dc2a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800dc30:	7803      	ldrb	r3, [r0, #0]
 800dc32:	3b0b      	subs	r3, #11
 800dc34:	2b2e      	cmp	r3, #46	; 0x2e
 800dc36:	d830      	bhi.n	800dc9a <RegionEU868GetPhyParam+0x72>
 800dc38:	e8df f003 	tbb	[pc, r3]
 800dc3c:	3f393633 	.word	0x3f393633
 800dc40:	504c4845 	.word	0x504c4845
 800dc44:	605c5854 	.word	0x605c5854
 800dc48:	6c2f692f 	.word	0x6c2f692f
 800dc4c:	2f7b7872 	.word	0x2f7b7872
 800dc50:	18837f2f 	.word	0x18837f2f
 800dc54:	2f2f2f2f 	.word	0x2f2f2f2f
 800dc58:	2f2f2f2f 	.word	0x2f2f2f2f
 800dc5c:	2f2f2f2f 	.word	0x2f2f2f2f
 800dc60:	9389862f 	.word	0x9389862f
 800dc64:	99962f2f 	.word	0x99962f2f
 800dc68:	9c2f      	.short	0x9c2f
 800dc6a:	a2          	.byte	0xa2
 800dc6b:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800dc6c:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800dc70:	f88d 3004 	strb.w	r3, [sp, #4]
 800dc74:	2307      	movs	r3, #7
 800dc76:	f88d 3005 	strb.w	r3, [sp, #5]
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	f88d 3006 	strb.w	r3, [sp, #6]
 800dc80:	2310      	movs	r3, #16
 800dc82:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800dc86:	4b42      	ldr	r3, [pc, #264]	; (800dd90 <RegionEU868GetPhyParam+0x168>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800dc8e:	9202      	str	r2, [sp, #8]
 800dc90:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800dc92:	a801      	add	r0, sp, #4
 800dc94:	f7ff fecc 	bl	800da30 <RegionCommonGetNextLowerTxDr>
 800dc98:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
}
 800dc9a:	9804      	ldr	r0, [sp, #16]
 800dc9c:	b007      	add	sp, #28
 800dc9e:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800dca2:	2340      	movs	r3, #64	; 0x40
 800dca4:	9304      	str	r3, [sp, #16]
            break;
 800dca6:	e7f8      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800dca8:	2320      	movs	r3, #32
 800dcaa:	9304      	str	r3, [sp, #16]
            break;
 800dcac:	e7f5      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800dcae:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dcb2:	4a38      	ldr	r2, [pc, #224]	; (800dd94 <RegionEU868GetPhyParam+0x16c>)
 800dcb4:	5cd3      	ldrb	r3, [r2, r3]
 800dcb6:	9304      	str	r3, [sp, #16]
            break;
 800dcb8:	e7ef      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800dcba:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dcbe:	4a36      	ldr	r2, [pc, #216]	; (800dd98 <RegionEU868GetPhyParam+0x170>)
 800dcc0:	5cd3      	ldrb	r3, [r2, r3]
 800dcc2:	9304      	str	r3, [sp, #16]
            break;
 800dcc4:	e7e9      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	9304      	str	r3, [sp, #16]
            break;
 800dcca:	e7e6      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800dccc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800dcd0:	9304      	str	r3, [sp, #16]
            break;
 800dcd2:	e7e2      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800dcd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dcd8:	9304      	str	r3, [sp, #16]
            break;
 800dcda:	e7de      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800dcdc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dce0:	9304      	str	r3, [sp, #16]
            break;
 800dce2:	e7da      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800dce4:	f241 3388 	movw	r3, #5000	; 0x1388
 800dce8:	9304      	str	r3, [sp, #16]
            break;
 800dcea:	e7d6      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800dcec:	f241 7370 	movw	r3, #6000	; 0x1770
 800dcf0:	9304      	str	r3, [sp, #16]
            break;
 800dcf2:	e7d2      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800dcf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dcf8:	9304      	str	r3, [sp, #16]
            break;
 800dcfa:	e7ce      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800dcfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dd00:	4826      	ldr	r0, [pc, #152]	; (800dd9c <RegionEU868GetPhyParam+0x174>)
 800dd02:	f002 ff47 	bl	8010b94 <randr>
 800dd06:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800dd0a:	9004      	str	r0, [sp, #16]
            break;
 800dd0c:	e7c5      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800dd0e:	4b24      	ldr	r3, [pc, #144]	; (800dda0 <RegionEU868GetPhyParam+0x178>)
 800dd10:	9304      	str	r3, [sp, #16]
            break;
 800dd12:	e7c2      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800dd14:	4b1e      	ldr	r3, [pc, #120]	; (800dd90 <RegionEU868GetPhyParam+0x168>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800dd1c:	9304      	str	r3, [sp, #16]
            break;
 800dd1e:	e7bc      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800dd20:	4b1b      	ldr	r3, [pc, #108]	; (800dd90 <RegionEU868GetPhyParam+0x168>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800dd28:	9304      	str	r3, [sp, #16]
            break;
 800dd2a:	e7b6      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800dd2c:	2310      	movs	r3, #16
 800dd2e:	9304      	str	r3, [sp, #16]
            break;
 800dd30:	e7b3      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800dd32:	4b17      	ldr	r3, [pc, #92]	; (800dd90 <RegionEU868GetPhyParam+0x168>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	9304      	str	r3, [sp, #16]
            break;
 800dd38:	e7af      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800dd3a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800dd3e:	9304      	str	r3, [sp, #16]
            break;
 800dd40:	e7ab      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800dd42:	4b18      	ldr	r3, [pc, #96]	; (800dda4 <RegionEU868GetPhyParam+0x17c>)
 800dd44:	9304      	str	r3, [sp, #16]
            break;
 800dd46:	e7a8      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800dd48:	4b15      	ldr	r3, [pc, #84]	; (800dda0 <RegionEU868GetPhyParam+0x178>)
 800dd4a:	9304      	str	r3, [sp, #16]
            break;
 800dd4c:	e7a5      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800dd4e:	2311      	movs	r3, #17
 800dd50:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800dd54:	2302      	movs	r3, #2
 800dd56:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800dd60:	e79b      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800dd62:	2303      	movs	r3, #3
 800dd64:	9304      	str	r3, [sp, #16]
            break;
 800dd66:	e798      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800dd68:	4b0d      	ldr	r3, [pc, #52]	; (800dda0 <RegionEU868GetPhyParam+0x178>)
 800dd6a:	9304      	str	r3, [sp, #16]
            break;
 800dd6c:	e795      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800dd6e:	2303      	movs	r3, #3
 800dd70:	9304      	str	r3, [sp, #16]
            break;
 800dd72:	e792      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800dd74:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dd78:	4a0b      	ldr	r2, [pc, #44]	; (800dda8 <RegionEU868GetPhyParam+0x180>)
 800dd7a:	5cd3      	ldrb	r3, [r2, r3]
 800dd7c:	9304      	str	r3, [sp, #16]
            break;
 800dd7e:	e78c      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800dd80:	490a      	ldr	r1, [pc, #40]	; (800ddac <RegionEU868GetPhyParam+0x184>)
 800dd82:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800dd86:	f7ff fe77 	bl	800da78 <RegionCommonGetBandwidth>
 800dd8a:	9004      	str	r0, [sp, #16]
            break;
 800dd8c:	e785      	b.n	800dc9a <RegionEU868GetPhyParam+0x72>
 800dd8e:	bf00      	nop
 800dd90:	20001034 	.word	0x20001034
 800dd94:	08014220 	.word	0x08014220
 800dd98:	08014228 	.word	0x08014228
 800dd9c:	fffffc18 	.word	0xfffffc18
 800dda0:	33d3e608 	.word	0x33d3e608
 800dda4:	4009999a 	.word	0x4009999a
 800dda8:	08014218 	.word	0x08014218
 800ddac:	080141f8 	.word	0x080141f8

0800ddb0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800ddb0:	b530      	push	{r4, r5, lr}
 800ddb2:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800ddb4:	4b0b      	ldr	r3, [pc, #44]	; (800dde4 <RegionEU868SetBandTxDone+0x34>)
 800ddb6:	681d      	ldr	r5, [r3, #0]
 800ddb8:	4b0b      	ldr	r3, [pc, #44]	; (800dde8 <RegionEU868SetBandTxDone+0x38>)
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	7803      	ldrb	r3, [r0, #0]
 800ddbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ddc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ddc6:	7a5b      	ldrb	r3, [r3, #9]
 800ddc8:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800ddcc:	6903      	ldr	r3, [r0, #16]
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	68c3      	ldr	r3, [r0, #12]
 800ddd2:	7842      	ldrb	r2, [r0, #1]
 800ddd4:	6881      	ldr	r1, [r0, #8]
 800ddd6:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800ddda:	f7ff fc15 	bl	800d608 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 800ddde:	b003      	add	sp, #12
 800dde0:	bd30      	pop	{r4, r5, pc}
 800dde2:	bf00      	nop
 800dde4:	20001030 	.word	0x20001030
 800dde8:	20001034 	.word	0x20001034

0800ddec <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800ddec:	b530      	push	{r4, r5, lr}
 800ddee:	b0a5      	sub	sp, #148	; 0x94
 800ddf0:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800ddf2:	2290      	movs	r2, #144	; 0x90
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	4668      	mov	r0, sp
 800ddf8:	f005 fe26 	bl	8013a48 <memset>
 800ddfc:	2364      	movs	r3, #100	; 0x64
 800ddfe:	f8ad 3000 	strh.w	r3, [sp]
 800de02:	f8ad 3018 	strh.w	r3, [sp, #24]
 800de06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800de0a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800de0e:	210a      	movs	r1, #10
 800de10:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800de14:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800de18:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800de1c:	7a23      	ldrb	r3, [r4, #8]
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d031      	beq.n	800de86 <RegionEU868InitDefaults+0x9a>
 800de22:	2b02      	cmp	r3, #2
 800de24:	d03d      	beq.n	800dea2 <RegionEU868InitDefaults+0xb6>
 800de26:	b10b      	cbz	r3, 800de2c <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800de28:	b025      	add	sp, #148	; 0x94
 800de2a:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800de2c:	6820      	ldr	r0, [r4, #0]
 800de2e:	2800      	cmp	r0, #0
 800de30:	d0fa      	beq.n	800de28 <RegionEU868InitDefaults+0x3c>
 800de32:	6863      	ldr	r3, [r4, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d0f7      	beq.n	800de28 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800de38:	4a1f      	ldr	r2, [pc, #124]	; (800deb8 <RegionEU868InitDefaults+0xcc>)
 800de3a:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800de3c:	4c1f      	ldr	r4, [pc, #124]	; (800debc <RegionEU868InitDefaults+0xd0>)
 800de3e:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800de40:	2290      	movs	r2, #144	; 0x90
 800de42:	4669      	mov	r1, sp
 800de44:	f002 feb3 	bl	8010bae <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800de48:	6824      	ldr	r4, [r4, #0]
 800de4a:	4b1d      	ldr	r3, [pc, #116]	; (800dec0 <RegionEU868InitDefaults+0xd4>)
 800de4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800de50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800de54:	f104 050c 	add.w	r5, r4, #12
 800de58:	f103 020c 	add.w	r2, r3, #12
 800de5c:	ca07      	ldmia	r2, {r0, r1, r2}
 800de5e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800de62:	f104 0518 	add.w	r5, r4, #24
 800de66:	3318      	adds	r3, #24
 800de68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800de6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800de70:	2307      	movs	r3, #7
 800de72:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800de76:	2201      	movs	r2, #1
 800de78:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800de7c:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800de80:	f7ff fbb1 	bl	800d5e6 <RegionCommonChanMaskCopy>
            break;
 800de84:	e7d0      	b.n	800de28 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800de86:	4b0d      	ldr	r3, [pc, #52]	; (800debc <RegionEU868InitDefaults+0xd0>)
 800de88:	6818      	ldr	r0, [r3, #0]
 800de8a:	2300      	movs	r3, #0
 800de8c:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800de8e:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800de90:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800de92:	2201      	movs	r2, #1
 800de94:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800de98:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800de9c:	f7ff fba3 	bl	800d5e6 <RegionCommonChanMaskCopy>
            break;
 800dea0:	e7c2      	b.n	800de28 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800dea2:	4b06      	ldr	r3, [pc, #24]	; (800debc <RegionEU868InitDefaults+0xd0>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800deaa:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800deae:	430a      	orrs	r2, r1
 800deb0:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800deb4:	e7b8      	b.n	800de28 <RegionEU868InitDefaults+0x3c>
 800deb6:	bf00      	nop
 800deb8:	20001030 	.word	0x20001030
 800debc:	20001034 	.word	0x20001034
 800dec0:	08013ba4 	.word	0x08013ba4

0800dec4 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800dec4:	b500      	push	{lr}
 800dec6:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800dec8:	290f      	cmp	r1, #15
 800deca:	d83c      	bhi.n	800df46 <RegionEU868Verify+0x82>
 800decc:	e8df f001 	tbb	[pc, r1]
 800ded0:	3b3b3b0a 	.word	0x3b3b3b0a
 800ded4:	271d133b 	.word	0x271d133b
 800ded8:	3b31313b 	.word	0x3b31313b
 800dedc:	083b3b3b 	.word	0x083b3b3b
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800dee0:	2001      	movs	r0, #1
 800dee2:	e031      	b.n	800df48 <RegionEU868Verify+0x84>
            uint8_t band = 0;
 800dee4:	2300      	movs	r3, #0
 800dee6:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800deea:	f10d 0107 	add.w	r1, sp, #7
 800deee:	6800      	ldr	r0, [r0, #0]
 800def0:	f7ff fe14 	bl	800db1c <VerifyRfFreq>
 800def4:	e028      	b.n	800df48 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800def6:	2207      	movs	r2, #7
 800def8:	2100      	movs	r1, #0
 800defa:	f990 0000 	ldrsb.w	r0, [r0]
 800defe:	f7ff fb00 	bl	800d502 <RegionCommonValueInRange>
 800df02:	3800      	subs	r0, #0
 800df04:	bf18      	it	ne
 800df06:	2001      	movne	r0, #1
 800df08:	e01e      	b.n	800df48 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800df0a:	2205      	movs	r2, #5
 800df0c:	2100      	movs	r1, #0
 800df0e:	f990 0000 	ldrsb.w	r0, [r0]
 800df12:	f7ff faf6 	bl	800d502 <RegionCommonValueInRange>
 800df16:	3800      	subs	r0, #0
 800df18:	bf18      	it	ne
 800df1a:	2001      	movne	r0, #1
 800df1c:	e014      	b.n	800df48 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800df1e:	2207      	movs	r2, #7
 800df20:	2100      	movs	r1, #0
 800df22:	f990 0000 	ldrsb.w	r0, [r0]
 800df26:	f7ff faec 	bl	800d502 <RegionCommonValueInRange>
 800df2a:	3800      	subs	r0, #0
 800df2c:	bf18      	it	ne
 800df2e:	2001      	movne	r0, #1
 800df30:	e00a      	b.n	800df48 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800df32:	2207      	movs	r2, #7
 800df34:	2100      	movs	r1, #0
 800df36:	f990 0000 	ldrsb.w	r0, [r0]
 800df3a:	f7ff fae2 	bl	800d502 <RegionCommonValueInRange>
 800df3e:	3800      	subs	r0, #0
 800df40:	bf18      	it	ne
 800df42:	2001      	movne	r0, #1
 800df44:	e000      	b.n	800df48 <RegionEU868Verify+0x84>
            return false;
 800df46:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800df48:	b003      	add	sp, #12
 800df4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800df50 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800df50:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800df52:	7903      	ldrb	r3, [r0, #4]
 800df54:	b11b      	cbz	r3, 800df5e <RegionEU868ChanMaskSet+0xe>
 800df56:	2b01      	cmp	r3, #1
 800df58:	d00b      	beq.n	800df72 <RegionEU868ChanMaskSet+0x22>
 800df5a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800df5c:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800df5e:	4b0a      	ldr	r3, [pc, #40]	; (800df88 <RegionEU868ChanMaskSet+0x38>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2201      	movs	r2, #1
 800df64:	6801      	ldr	r1, [r0, #0]
 800df66:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800df6a:	f7ff fb3c 	bl	800d5e6 <RegionCommonChanMaskCopy>
    return true;
 800df6e:	2001      	movs	r0, #1
            break;
 800df70:	e7f4      	b.n	800df5c <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800df72:	4b05      	ldr	r3, [pc, #20]	; (800df88 <RegionEU868ChanMaskSet+0x38>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2201      	movs	r2, #1
 800df78:	6801      	ldr	r1, [r0, #0]
 800df7a:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800df7e:	f7ff fb32 	bl	800d5e6 <RegionCommonChanMaskCopy>
    return true;
 800df82:	2001      	movs	r0, #1
            break;
 800df84:	e7ea      	b.n	800df5c <RegionEU868ChanMaskSet+0xc>
 800df86:	bf00      	nop
 800df88:	20001034 	.word	0x20001034

0800df8c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800df8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df8e:	b083      	sub	sp, #12
 800df90:	460e      	mov	r6, r1
 800df92:	4617      	mov	r7, r2
 800df94:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800df96:	2807      	cmp	r0, #7
 800df98:	bfa8      	it	ge
 800df9a:	2007      	movge	r0, #7
 800df9c:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800df9e:	4913      	ldr	r1, [pc, #76]	; (800dfec <RegionEU868ComputeRxWindowParameters+0x60>)
 800dfa0:	f7ff fd6a 	bl	800da78 <RegionCommonGetBandwidth>
 800dfa4:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800dfa6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800dfaa:	2b07      	cmp	r3, #7
 800dfac:	d017      	beq.n	800dfde <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800dfae:	4a0f      	ldr	r2, [pc, #60]	; (800dfec <RegionEU868ComputeRxWindowParameters+0x60>)
 800dfb0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800dfb4:	4a0e      	ldr	r2, [pc, #56]	; (800dff0 <RegionEU868ComputeRxWindowParameters+0x64>)
 800dfb6:	5cd0      	ldrb	r0, [r2, r3]
 800dfb8:	f7ff fc2e 	bl	800d818 <RegionCommonComputeSymbolTimeLoRa>
 800dfbc:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800dfbe:	4b0d      	ldr	r3, [pc, #52]	; (800dff4 <RegionEU868ComputeRxWindowParameters+0x68>)
 800dfc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfc2:	4798      	blx	r3
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	f104 020c 	add.w	r2, r4, #12
 800dfca:	9201      	str	r2, [sp, #4]
 800dfcc:	3408      	adds	r4, #8
 800dfce:	9400      	str	r4, [sp, #0]
 800dfd0:	463a      	mov	r2, r7
 800dfd2:	4631      	mov	r1, r6
 800dfd4:	4628      	mov	r0, r5
 800dfd6:	f7ff fc2d 	bl	800d834 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800dfda:	b003      	add	sp, #12
 800dfdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800dfde:	4a04      	ldr	r2, [pc, #16]	; (800dff0 <RegionEU868ComputeRxWindowParameters+0x64>)
 800dfe0:	5cd0      	ldrb	r0, [r2, r3]
 800dfe2:	f7ff fc21 	bl	800d828 <RegionCommonComputeSymbolTimeFsk>
 800dfe6:	4605      	mov	r5, r0
 800dfe8:	e7e9      	b.n	800dfbe <RegionEU868ComputeRxWindowParameters+0x32>
 800dfea:	bf00      	nop
 800dfec:	080141f8 	.word	0x080141f8
 800dff0:	08014218 	.word	0x08014218
 800dff4:	08014674 	.word	0x08014674

0800dff8 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800dff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dffc:	b08a      	sub	sp, #40	; 0x28
 800dffe:	4604      	mov	r4, r0
 800e000:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800e002:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800e006:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800e00a:	4b37      	ldr	r3, [pc, #220]	; (800e0e8 <RegionEU868RxConfig+0xf0>)
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	4798      	blx	r3
 800e010:	2800      	cmp	r0, #0
 800e012:	d167      	bne.n	800e0e4 <RegionEU868RxConfig+0xec>
 800e014:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800e016:	7ce3      	ldrb	r3, [r4, #19]
 800e018:	b983      	cbnz	r3, 800e03c <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800e01a:	4b34      	ldr	r3, [pc, #208]	; (800e0ec <RegionEU868RxConfig+0xf4>)
 800e01c:	681a      	ldr	r2, [r3, #0]
 800e01e:	7823      	ldrb	r3, [r4, #0]
 800e020:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e024:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800e028:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e02c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e030:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800e034:	f1b8 0f00 	cmp.w	r8, #0
 800e038:	d100      	bne.n	800e03c <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800e03a:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800e03c:	4b2c      	ldr	r3, [pc, #176]	; (800e0f0 <RegionEU868RxConfig+0xf8>)
 800e03e:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800e042:	4b29      	ldr	r3, [pc, #164]	; (800e0e8 <RegionEU868RxConfig+0xf0>)
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	4640      	mov	r0, r8
 800e048:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800e04a:	2d07      	cmp	r5, #7
 800e04c:	d02b      	beq.n	800e0a6 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800e04e:	4b26      	ldr	r3, [pc, #152]	; (800e0e8 <RegionEU868RxConfig+0xf0>)
 800e050:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800e054:	7ca3      	ldrb	r3, [r4, #18]
 800e056:	9309      	str	r3, [sp, #36]	; 0x24
 800e058:	2601      	movs	r6, #1
 800e05a:	9608      	str	r6, [sp, #32]
 800e05c:	2300      	movs	r3, #0
 800e05e:	9307      	str	r3, [sp, #28]
 800e060:	9306      	str	r3, [sp, #24]
 800e062:	9305      	str	r3, [sp, #20]
 800e064:	9304      	str	r3, [sp, #16]
 800e066:	9303      	str	r3, [sp, #12]
 800e068:	8922      	ldrh	r2, [r4, #8]
 800e06a:	9202      	str	r2, [sp, #8]
 800e06c:	2208      	movs	r2, #8
 800e06e:	9201      	str	r2, [sp, #4]
 800e070:	9300      	str	r3, [sp, #0]
 800e072:	4633      	mov	r3, r6
 800e074:	464a      	mov	r2, r9
 800e076:	78a1      	ldrb	r1, [r4, #2]
 800e078:	4630      	mov	r0, r6
 800e07a:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800e07c:	7c63      	ldrb	r3, [r4, #17]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d02d      	beq.n	800e0de <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800e082:	4b1c      	ldr	r3, [pc, #112]	; (800e0f4 <RegionEU868RxConfig+0xfc>)
 800e084:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800e086:	4b18      	ldr	r3, [pc, #96]	; (800e0e8 <RegionEU868RxConfig+0xf0>)
 800e088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e08a:	310d      	adds	r1, #13
 800e08c:	b2c9      	uxtb	r1, r1
 800e08e:	4630      	mov	r0, r6
 800e090:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800e092:	462a      	mov	r2, r5
 800e094:	4641      	mov	r1, r8
 800e096:	7ce0      	ldrb	r0, [r4, #19]
 800e098:	f7ff fd00 	bl	800da9c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800e09c:	703d      	strb	r5, [r7, #0]
    return true;
 800e09e:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800e0a0:	b00a      	add	sp, #40	; 0x28
 800e0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800e0a6:	4b10      	ldr	r3, [pc, #64]	; (800e0e8 <RegionEU868RxConfig+0xf0>)
 800e0a8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800e0ac:	7ca3      	ldrb	r3, [r4, #18]
 800e0ae:	9309      	str	r3, [sp, #36]	; 0x24
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	9008      	str	r0, [sp, #32]
 800e0b4:	9007      	str	r0, [sp, #28]
 800e0b6:	9006      	str	r0, [sp, #24]
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	9305      	str	r3, [sp, #20]
 800e0bc:	9004      	str	r0, [sp, #16]
 800e0be:	9003      	str	r0, [sp, #12]
 800e0c0:	8923      	ldrh	r3, [r4, #8]
 800e0c2:	9302      	str	r3, [sp, #8]
 800e0c4:	2305      	movs	r3, #5
 800e0c6:	9301      	str	r3, [sp, #4]
 800e0c8:	4b0b      	ldr	r3, [pc, #44]	; (800e0f8 <RegionEU868RxConfig+0x100>)
 800e0ca:	9300      	str	r3, [sp, #0]
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e0d2:	fb02 f209 	mul.w	r2, r2, r9
 800e0d6:	f24c 3150 	movw	r1, #50000	; 0xc350
 800e0da:	47d0      	blx	sl
 800e0dc:	e7ce      	b.n	800e07c <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800e0de:	4b07      	ldr	r3, [pc, #28]	; (800e0fc <RegionEU868RxConfig+0x104>)
 800e0e0:	5d59      	ldrb	r1, [r3, r5]
 800e0e2:	e7d0      	b.n	800e086 <RegionEU868RxConfig+0x8e>
        return false;
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	e7db      	b.n	800e0a0 <RegionEU868RxConfig+0xa8>
 800e0e8:	08014674 	.word	0x08014674
 800e0ec:	20001034 	.word	0x20001034
 800e0f0:	08014218 	.word	0x08014218
 800e0f4:	08014228 	.word	0x08014228
 800e0f8:	00014585 	.word	0x00014585
 800e0fc:	08014220 	.word	0x08014220

0800e100 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e104:	b08d      	sub	sp, #52	; 0x34
 800e106:	4604      	mov	r4, r0
 800e108:	460f      	mov	r7, r1
 800e10a:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800e10c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e110:	4a42      	ldr	r2, [pc, #264]	; (800e21c <RegionEU868TxConfig+0x11c>)
 800e112:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800e116:	4b42      	ldr	r3, [pc, #264]	; (800e220 <RegionEU868TxConfig+0x120>)
 800e118:	6819      	ldr	r1, [r3, #0]
 800e11a:	4d42      	ldr	r5, [pc, #264]	; (800e224 <RegionEU868TxConfig+0x124>)
 800e11c:	682b      	ldr	r3, [r5, #0]
 800e11e:	7802      	ldrb	r2, [r0, #0]
 800e120:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e124:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e128:	7a53      	ldrb	r3, [r2, #9]
 800e12a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e12e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800e132:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800e136:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e13a:	f7ff fc98 	bl	800da6e <RegionCommonLimitTxPower>
 800e13e:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800e140:	4939      	ldr	r1, [pc, #228]	; (800e228 <RegionEU868TxConfig+0x128>)
 800e142:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e146:	f7ff fc97 	bl	800da78 <RegionCommonGetBandwidth>
 800e14a:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800e14c:	68a2      	ldr	r2, [r4, #8]
 800e14e:	6861      	ldr	r1, [r4, #4]
 800e150:	4630      	mov	r0, r6
 800e152:	f7ff fba9 	bl	800d8a8 <RegionCommonComputeTxPower>
 800e156:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800e158:	4b34      	ldr	r3, [pc, #208]	; (800e22c <RegionEU868TxConfig+0x12c>)
 800e15a:	68da      	ldr	r2, [r3, #12]
 800e15c:	6829      	ldr	r1, [r5, #0]
 800e15e:	7823      	ldrb	r3, [r4, #0]
 800e160:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e164:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800e168:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800e16a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e16e:	2b07      	cmp	r3, #7
 800e170:	d031      	beq.n	800e1d6 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800e172:	4b2e      	ldr	r3, [pc, #184]	; (800e22c <RegionEU868TxConfig+0x12c>)
 800e174:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800e178:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800e17c:	9308      	str	r3, [sp, #32]
 800e17e:	2200      	movs	r2, #0
 800e180:	9207      	str	r2, [sp, #28]
 800e182:	9206      	str	r2, [sp, #24]
 800e184:	9205      	str	r2, [sp, #20]
 800e186:	2501      	movs	r5, #1
 800e188:	9504      	str	r5, [sp, #16]
 800e18a:	9203      	str	r2, [sp, #12]
 800e18c:	2308      	movs	r3, #8
 800e18e:	9302      	str	r3, [sp, #8]
 800e190:	9501      	str	r5, [sp, #4]
 800e192:	f8cd a000 	str.w	sl, [sp]
 800e196:	464b      	mov	r3, r9
 800e198:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e19a:	4628      	mov	r0, r5
 800e19c:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800e19e:	4b21      	ldr	r3, [pc, #132]	; (800e224 <RegionEU868TxConfig+0x124>)
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	7823      	ldrb	r3, [r4, #0]
 800e1a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e1a8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800e1ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e1b0:	f7ff fca4 	bl	800dafc <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800e1b4:	89a1      	ldrh	r1, [r4, #12]
 800e1b6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e1ba:	f7ff fd03 	bl	800dbc4 <GetTimeOnAir>
 800e1be:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800e1c2:	4b1a      	ldr	r3, [pc, #104]	; (800e22c <RegionEU868TxConfig+0x12c>)
 800e1c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1c6:	7b21      	ldrb	r1, [r4, #12]
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	4798      	blx	r3

    *txPower = txPowerLimited;
 800e1cc:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800e1ce:	2001      	movs	r0, #1
 800e1d0:	b00d      	add	sp, #52	; 0x34
 800e1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800e1d6:	4b15      	ldr	r3, [pc, #84]	; (800e22c <RegionEU868TxConfig+0x12c>)
 800e1d8:	69dd      	ldr	r5, [r3, #28]
 800e1da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e1de:	fb03 f30a 	mul.w	r3, r3, sl
 800e1e2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800e1e6:	9208      	str	r2, [sp, #32]
 800e1e8:	f04f 0b00 	mov.w	fp, #0
 800e1ec:	f8cd b01c 	str.w	fp, [sp, #28]
 800e1f0:	f8cd b018 	str.w	fp, [sp, #24]
 800e1f4:	f8cd b014 	str.w	fp, [sp, #20]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	9204      	str	r2, [sp, #16]
 800e1fc:	f8cd b00c 	str.w	fp, [sp, #12]
 800e200:	2205      	movs	r2, #5
 800e202:	9202      	str	r2, [sp, #8]
 800e204:	f8cd b004 	str.w	fp, [sp, #4]
 800e208:	9300      	str	r3, [sp, #0]
 800e20a:	464b      	mov	r3, r9
 800e20c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800e210:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e212:	4658      	mov	r0, fp
 800e214:	47a8      	blx	r5
        modem = MODEM_FSK;
 800e216:	465d      	mov	r5, fp
 800e218:	e7c1      	b.n	800e19e <RegionEU868TxConfig+0x9e>
 800e21a:	bf00      	nop
 800e21c:	08014218 	.word	0x08014218
 800e220:	20001030 	.word	0x20001030
 800e224:	20001034 	.word	0x20001034
 800e228:	080141f8 	.word	0x080141f8
 800e22c:	08014674 	.word	0x08014674

0800e230 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e234:	b08f      	sub	sp, #60	; 0x3c
 800e236:	4607      	mov	r7, r0
 800e238:	468b      	mov	fp, r1
 800e23a:	4692      	mov	sl, r2
 800e23c:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800e23e:	2500      	movs	r5, #0
 800e240:	950c      	str	r5, [sp, #48]	; 0x30
 800e242:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800e246:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800e24a:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e24e:	e02d      	b.n	800e2ac <RegionEU868LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800e250:	2400      	movs	r4, #0
        status = 0x07;
 800e252:	f04f 0807 	mov.w	r8, #7
 800e256:	e00f      	b.n	800e278 <RegionEU868LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800e258:	4a56      	ldr	r2, [pc, #344]	; (800e3b4 <RegionEU868LinkAdrReq+0x184>)
 800e25a:	6812      	ldr	r2, [r2, #0]
 800e25c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800e260:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e264:	b132      	cbz	r2, 800e274 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800e266:	2201      	movs	r2, #1
 800e268:	40a2      	lsls	r2, r4
 800e26a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800e26e:	430a      	orrs	r2, r1
 800e270:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800e274:	3401      	adds	r4, #1
 800e276:	b2e4      	uxtb	r4, r4
 800e278:	2c0f      	cmp	r4, #15
 800e27a:	d817      	bhi.n	800e2ac <RegionEU868LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800e27c:	2b06      	cmp	r3, #6
 800e27e:	d0eb      	beq.n	800e258 <RegionEU868LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800e280:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 800e284:	4126      	asrs	r6, r4
 800e286:	f016 0f01 	tst.w	r6, #1
 800e28a:	d0f3      	beq.n	800e274 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800e28c:	4a49      	ldr	r2, [pc, #292]	; (800e3b4 <RegionEU868LinkAdrReq+0x184>)
 800e28e:	6812      	ldr	r2, [r2, #0]
 800e290:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800e294:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800e298:	2a00      	cmp	r2, #0
 800e29a:	d1eb      	bne.n	800e274 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800e29c:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 800e2a0:	e7e8      	b.n	800e274 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800e2a2:	f04f 0806 	mov.w	r8, #6
 800e2a6:	e001      	b.n	800e2ac <RegionEU868LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 800e2a8:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e2ac:	7a3b      	ldrb	r3, [r7, #8]
 800e2ae:	42ab      	cmp	r3, r5
 800e2b0:	d919      	bls.n	800e2e6 <RegionEU868LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	a90c      	add	r1, sp, #48	; 0x30
 800e2b6:	4428      	add	r0, r5
 800e2b8:	f7ff fa46 	bl	800d748 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800e2bc:	b198      	cbz	r0, 800e2e6 <RegionEU868LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 800e2be:	4405      	add	r5, r0
 800e2c0:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 800e2c2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e2c6:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800e2ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e2ce:	b90b      	cbnz	r3, 800e2d4 <RegionEU868LinkAdrReq+0xa4>
 800e2d0:	2a00      	cmp	r2, #0
 800e2d2:	d0e6      	beq.n	800e2a2 <RegionEU868LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800e2d4:	1e5a      	subs	r2, r3, #1
 800e2d6:	b2d2      	uxtb	r2, r2
 800e2d8:	2a04      	cmp	r2, #4
 800e2da:	d9e5      	bls.n	800e2a8 <RegionEU868LinkAdrReq+0x78>
 800e2dc:	2b06      	cmp	r3, #6
 800e2de:	d9b7      	bls.n	800e250 <RegionEU868LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 800e2e0:	f04f 0806 	mov.w	r8, #6
 800e2e4:	e7e2      	b.n	800e2ac <RegionEU868LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800e2e6:	2302      	movs	r3, #2
 800e2e8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800e2ec:	7a7b      	ldrb	r3, [r7, #9]
 800e2ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800e2f2:	a80a      	add	r0, sp, #40	; 0x28
 800e2f4:	f7ff fc98 	bl	800dc28 <RegionEU868GetPhyParam>

    linkAdrVerifyParams.Status = status;
 800e2f8:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800e2fc:	7abb      	ldrb	r3, [r7, #10]
 800e2fe:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800e302:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800e306:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800e30a:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800e30e:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800e312:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e316:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800e31a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e31e:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800e322:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e326:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800e32a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e32e:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800e332:	2310      	movs	r3, #16
 800e334:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800e338:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800e33c:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800e33e:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800e342:	2307      	movs	r3, #7
 800e344:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800e348:	4a1a      	ldr	r2, [pc, #104]	; (800e3b4 <RegionEU868LinkAdrReq+0x184>)
 800e34a:	6812      	ldr	r2, [r2, #0]
 800e34c:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800e34e:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800e352:	2300      	movs	r3, #0
 800e354:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e35c:	ab0c      	add	r3, sp, #48	; 0x30
 800e35e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800e362:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800e366:	a801      	add	r0, sp, #4
 800e368:	f7ff fa0a 	bl	800d780 <RegionCommonLinkAdrReqVerifyParams>
 800e36c:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800e36e:	2807      	cmp	r0, #7
 800e370:	d011      	beq.n	800e396 <RegionEU868LinkAdrReq+0x166>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800e372:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800e376:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 800e37a:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800e37e:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 800e382:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e386:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 800e38a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e38c:	701d      	strb	r5, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800e38e:	4620      	mov	r0, r4
 800e390:	b00f      	add	sp, #60	; 0x3c
 800e392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800e396:	4e07      	ldr	r6, [pc, #28]	; (800e3b4 <RegionEU868LinkAdrReq+0x184>)
 800e398:	6830      	ldr	r0, [r6, #0]
 800e39a:	220c      	movs	r2, #12
 800e39c:	2100      	movs	r1, #0
 800e39e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e3a2:	f002 fc1a 	bl	8010bda <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800e3a6:	6833      	ldr	r3, [r6, #0]
 800e3a8:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800e3ac:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800e3b0:	e7df      	b.n	800e372 <RegionEU868LinkAdrReq+0x142>
 800e3b2:	bf00      	nop
 800e3b4:	20001034 	.word	0x20001034

0800e3b8 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800e3b8:	b530      	push	{r4, r5, lr}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800e3c4:	f10d 0107 	add.w	r1, sp, #7
 800e3c8:	6840      	ldr	r0, [r0, #4]
 800e3ca:	f7ff fba7 	bl	800db1c <VerifyRfFreq>
 800e3ce:	b1a8      	cbz	r0, 800e3fc <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800e3d0:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800e3d2:	2207      	movs	r2, #7
 800e3d4:	2100      	movs	r1, #0
 800e3d6:	f994 0000 	ldrsb.w	r0, [r4]
 800e3da:	f7ff f892 	bl	800d502 <RegionCommonValueInRange>
 800e3de:	b908      	cbnz	r0, 800e3e4 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800e3e0:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800e3e4:	2205      	movs	r2, #5
 800e3e6:	2100      	movs	r1, #0
 800e3e8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e3ec:	f7ff f889 	bl	800d502 <RegionCommonValueInRange>
 800e3f0:	b908      	cbnz	r0, 800e3f6 <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800e3f2:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	b003      	add	sp, #12
 800e3fa:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800e3fc:	2506      	movs	r5, #6
 800e3fe:	e7e8      	b.n	800e3d2 <RegionEU868RxParamSetupReq+0x1a>

0800e400 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800e400:	f04f 30ff 	mov.w	r0, #4294967295
 800e404:	4770      	bx	lr
	...

0800e408 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800e408:	b510      	push	{r4, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800e40e:	2300      	movs	r3, #0
 800e410:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800e414:	f10d 0107 	add.w	r1, sp, #7
 800e418:	6840      	ldr	r0, [r0, #4]
 800e41a:	f7ff fb7f 	bl	800db1c <VerifyRfFreq>
 800e41e:	b178      	cbz	r0, 800e440 <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 800e420:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800e422:	4b0c      	ldr	r3, [pc, #48]	; (800e454 <RegionEU868DlChannelReq+0x4c>)
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	7823      	ldrb	r3, [r4, #0]
 800e428:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e42c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800e430:	b909      	cbnz	r1, 800e436 <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 800e432:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800e436:	2803      	cmp	r0, #3
 800e438:	d004      	beq.n	800e444 <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800e43a:	b240      	sxtb	r0, r0
 800e43c:	b002      	add	sp, #8
 800e43e:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800e440:	2002      	movs	r0, #2
 800e442:	e7ee      	b.n	800e422 <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800e444:	6861      	ldr	r1, [r4, #4]
 800e446:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e44a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e44e:	6059      	str	r1, [r3, #4]
 800e450:	e7f3      	b.n	800e43a <RegionEU868DlChannelReq+0x32>
 800e452:	bf00      	nop
 800e454:	20001034 	.word	0x20001034

0800e458 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800e458:	4770      	bx	lr
	...

0800e45c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800e45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e45e:	b097      	sub	sp, #92	; 0x5c
 800e460:	4604      	mov	r4, r0
 800e462:	460f      	mov	r7, r1
 800e464:	4616      	mov	r6, r2
 800e466:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800e468:	2100      	movs	r1, #0
 800e46a:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800e46e:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800e472:	9111      	str	r1, [sp, #68]	; 0x44
 800e474:	9112      	str	r1, [sp, #72]	; 0x48
 800e476:	9113      	str	r1, [sp, #76]	; 0x4c
 800e478:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800e47a:	2307      	movs	r3, #7
 800e47c:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800e480:	4b32      	ldr	r3, [pc, #200]	; (800e54c <RegionEU868NextChannel+0xf0>)
 800e482:	6818      	ldr	r0, [r3, #0]
 800e484:	2201      	movs	r2, #1
 800e486:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e48a:	f7ff f896 	bl	800d5ba <RegionCommonCountChannels>
 800e48e:	b938      	cbnz	r0, 800e4a0 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800e490:	4b2e      	ldr	r3, [pc, #184]	; (800e54c <RegionEU868NextChannel+0xf0>)
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800e498:	f043 0307 	orr.w	r3, r3, #7
 800e49c:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800e4a0:	7a63      	ldrb	r3, [r4, #9]
 800e4a2:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800e4a6:	7a23      	ldrb	r3, [r4, #8]
 800e4a8:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e4ac:	4b27      	ldr	r3, [pc, #156]	; (800e54c <RegionEU868NextChannel+0xf0>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800e4b4:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800e4b6:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800e4b8:	4b25      	ldr	r3, [pc, #148]	; (800e550 <RegionEU868NextChannel+0xf4>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800e4be:	2310      	movs	r3, #16
 800e4c0:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800e4c4:	f10d 030a 	add.w	r3, sp, #10
 800e4c8:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800e4ca:	6823      	ldr	r3, [r4, #0]
 800e4cc:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800e4ce:	6863      	ldr	r3, [r4, #4]
 800e4d0:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800e4d2:	7aa3      	ldrb	r3, [r4, #10]
 800e4d4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800e4d8:	2306      	movs	r3, #6
 800e4da:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800e4de:	ab0c      	add	r3, sp, #48	; 0x30
 800e4e0:	6921      	ldr	r1, [r4, #16]
 800e4e2:	68e0      	ldr	r0, [r4, #12]
 800e4e4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800e4e8:	7d23      	ldrb	r3, [r4, #20]
 800e4ea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800e4ee:	8ae1      	ldrh	r1, [r4, #22]
 800e4f0:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800e4f4:	f7ff fb66 	bl	800dbc4 <GetTimeOnAir>
 800e4f8:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800e4fa:	ab03      	add	r3, sp, #12
 800e4fc:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800e4fe:	9601      	str	r6, [sp, #4]
 800e500:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800e504:	9300      	str	r3, [sp, #0]
 800e506:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800e50a:	aa11      	add	r2, sp, #68	; 0x44
 800e50c:	4629      	mov	r1, r5
 800e50e:	a809      	add	r0, sp, #36	; 0x24
 800e510:	f7ff fa46 	bl	800d9a0 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800e514:	4604      	mov	r4, r0
 800e516:	b120      	cbz	r0, 800e522 <RegionEU868NextChannel+0xc6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800e518:	280c      	cmp	r0, #12
 800e51a:	d00d      	beq.n	800e538 <RegionEU868NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800e51c:	4620      	mov	r0, r4
 800e51e:	b017      	add	sp, #92	; 0x5c
 800e520:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800e522:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800e526:	3901      	subs	r1, #1
 800e528:	f002 fb34 	bl	8010b94 <randr>
 800e52c:	ab16      	add	r3, sp, #88	; 0x58
 800e52e:	4418      	add	r0, r3
 800e530:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800e534:	703b      	strb	r3, [r7, #0]
 800e536:	e7f1      	b.n	800e51c <RegionEU868NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800e538:	4b04      	ldr	r3, [pc, #16]	; (800e54c <RegionEU868NextChannel+0xf0>)
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800e540:	f043 0307 	orr.w	r3, r3, #7
 800e544:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800e548:	e7e8      	b.n	800e51c <RegionEU868NextChannel+0xc0>
 800e54a:	bf00      	nop
 800e54c:	20001034 	.word	0x20001034
 800e550:	20001030 	.word	0x20001030

0800e554 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800e554:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e556:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800e558:	2300      	movs	r3, #0
 800e55a:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800e55e:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800e560:	2d02      	cmp	r5, #2
 800e562:	d94f      	bls.n	800e604 <RegionEU868ChannelAdd+0xb0>
 800e564:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800e566:	2d0f      	cmp	r5, #15
 800e568:	d84e      	bhi.n	800e608 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800e56a:	6803      	ldr	r3, [r0, #0]
 800e56c:	7a18      	ldrb	r0, [r3, #8]
 800e56e:	f340 0003 	sbfx	r0, r0, #0, #4
 800e572:	2207      	movs	r2, #7
 800e574:	2100      	movs	r1, #0
 800e576:	b240      	sxtb	r0, r0
 800e578:	f7fe ffc3 	bl	800d502 <RegionCommonValueInRange>
 800e57c:	2800      	cmp	r0, #0
 800e57e:	d03d      	beq.n	800e5fc <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 800e580:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800e582:	6823      	ldr	r3, [r4, #0]
 800e584:	7a18      	ldrb	r0, [r3, #8]
 800e586:	f340 1003 	sbfx	r0, r0, #4, #4
 800e58a:	2207      	movs	r2, #7
 800e58c:	2100      	movs	r1, #0
 800e58e:	b240      	sxtb	r0, r0
 800e590:	f7fe ffb7 	bl	800d502 <RegionCommonValueInRange>
 800e594:	b900      	cbnz	r0, 800e598 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800e596:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800e598:	6820      	ldr	r0, [r4, #0]
 800e59a:	7a03      	ldrb	r3, [r0, #8]
 800e59c:	f343 0203 	sbfx	r2, r3, #0, #4
 800e5a0:	b252      	sxtb	r2, r2
 800e5a2:	f343 1303 	sbfx	r3, r3, #4, #4
 800e5a6:	b25b      	sxtb	r3, r3
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	dd00      	ble.n	800e5ae <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800e5ac:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800e5ae:	f10d 0107 	add.w	r1, sp, #7
 800e5b2:	6800      	ldr	r0, [r0, #0]
 800e5b4:	f7ff fab2 	bl	800db1c <VerifyRfFreq>
 800e5b8:	b310      	cbz	r0, 800e600 <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 800e5ba:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800e5bc:	b106      	cbz	r6, 800e5c0 <RegionEU868ChannelAdd+0x6c>
 800e5be:	bb33      	cbnz	r3, 800e60e <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800e5c0:	bb3e      	cbnz	r6, 800e612 <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800e5c2:	bb43      	cbnz	r3, 800e616 <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800e5c4:	4f15      	ldr	r7, [pc, #84]	; (800e61c <RegionEU868ChannelAdd+0xc8>)
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	006e      	lsls	r6, r5, #1
 800e5ca:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800e5ce:	220c      	movs	r2, #12
 800e5d0:	6821      	ldr	r1, [r4, #0]
 800e5d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e5d6:	f002 faea 	bl	8010bae <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800e5da:	683a      	ldr	r2, [r7, #0]
 800e5dc:	442e      	add	r6, r5
 800e5de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e5e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e5e6:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	fa03 f505 	lsl.w	r5, r3, r5
 800e5ee:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800e5f2:	431d      	orrs	r5, r3
 800e5f4:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800e5f8:	2000      	movs	r0, #0
 800e5fa:	e006      	b.n	800e60a <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 800e5fc:	2601      	movs	r6, #1
 800e5fe:	e7c0      	b.n	800e582 <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800e600:	2301      	movs	r3, #1
 800e602:	e7db      	b.n	800e5bc <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800e604:	2006      	movs	r0, #6
 800e606:	e000      	b.n	800e60a <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e608:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800e60a:	b003      	add	sp, #12
 800e60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800e60e:	2006      	movs	r0, #6
 800e610:	e7fb      	b.n	800e60a <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800e612:	2005      	movs	r0, #5
 800e614:	e7f9      	b.n	800e60a <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800e616:	2004      	movs	r0, #4
 800e618:	e7f7      	b.n	800e60a <RegionEU868ChannelAdd+0xb6>
 800e61a:	bf00      	nop
 800e61c:	20001034 	.word	0x20001034

0800e620 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800e620:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800e622:	2902      	cmp	r1, #2
 800e624:	d801      	bhi.n	800e62a <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800e626:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800e628:	4770      	bx	lr
{
 800e62a:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800e62c:	4b08      	ldr	r3, [pc, #32]	; (800e650 <RegionEU868ChannelsRemove+0x30>)
 800e62e:	6818      	ldr	r0, [r3, #0]
 800e630:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800e634:	009c      	lsls	r4, r3, #2
 800e636:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e63a:	2200      	movs	r2, #0
 800e63c:	5102      	str	r2, [r0, r4]
 800e63e:	605a      	str	r2, [r3, #4]
 800e640:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800e642:	2210      	movs	r2, #16
 800e644:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e648:	f7fe ff9d 	bl	800d586 <RegionCommonChanDisable>
}
 800e64c:	bd10      	pop	{r4, pc}
 800e64e:	bf00      	nop
 800e650:	20001034 	.word	0x20001034

0800e654 <RegionEU868ApplyCFList>:
{
 800e654:	b570      	push	{r4, r5, r6, lr}
 800e656:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800e658:	2350      	movs	r3, #80	; 0x50
 800e65a:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800e65e:	7903      	ldrb	r3, [r0, #4]
 800e660:	2b10      	cmp	r3, #16
 800e662:	d135      	bne.n	800e6d0 <RegionEU868ApplyCFList+0x7c>
 800e664:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800e666:	6803      	ldr	r3, [r0, #0]
 800e668:	7bdd      	ldrb	r5, [r3, #15]
 800e66a:	2d00      	cmp	r5, #0
 800e66c:	d130      	bne.n	800e6d0 <RegionEU868ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800e66e:	2403      	movs	r4, #3
 800e670:	e01a      	b.n	800e6a8 <RegionEU868ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800e672:	6832      	ldr	r2, [r6, #0]
 800e674:	5d53      	ldrb	r3, [r2, r5]
 800e676:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800e678:	442a      	add	r2, r5
 800e67a:	7851      	ldrb	r1, [r2, #1]
 800e67c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e680:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800e682:	7892      	ldrb	r2, [r2, #2]
 800e684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 800e688:	2264      	movs	r2, #100	; 0x64
 800e68a:	fb02 f303 	mul.w	r3, r2, r3
 800e68e:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800e690:	2300      	movs	r3, #0
 800e692:	9304      	str	r3, [sp, #16]
 800e694:	e011      	b.n	800e6ba <RegionEU868ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 800e696:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800e69a:	4668      	mov	r0, sp
 800e69c:	f7ff ffc0 	bl	800e620 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800e6a0:	3503      	adds	r5, #3
 800e6a2:	b2ed      	uxtb	r5, r5
 800e6a4:	3401      	adds	r4, #1
 800e6a6:	b2e4      	uxtb	r4, r4
 800e6a8:	2c0f      	cmp	r4, #15
 800e6aa:	d811      	bhi.n	800e6d0 <RegionEU868ApplyCFList+0x7c>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800e6ac:	2c07      	cmp	r4, #7
 800e6ae:	d9e0      	bls.n	800e672 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800e6b4:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800e6b8:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800e6ba:	9b03      	ldr	r3, [sp, #12]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d0ea      	beq.n	800e696 <RegionEU868ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 800e6c0:	ab03      	add	r3, sp, #12
 800e6c2:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800e6c4:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800e6c8:	a801      	add	r0, sp, #4
 800e6ca:	f7ff ff43 	bl	800e554 <RegionEU868ChannelAdd>
 800e6ce:	e7e7      	b.n	800e6a0 <RegionEU868ApplyCFList+0x4c>
}
 800e6d0:	b006      	add	sp, #24
 800e6d2:	bd70      	pop	{r4, r5, r6, pc}

0800e6d4 <RegionEU868NewChannelReq>:
{
 800e6d4:	b500      	push	{lr}
 800e6d6:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800e6d8:	6803      	ldr	r3, [r0, #0]
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	b952      	cbnz	r2, 800e6f4 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800e6de:	7903      	ldrb	r3, [r0, #4]
 800e6e0:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800e6e4:	a801      	add	r0, sp, #4
 800e6e6:	f7ff ff9b 	bl	800e620 <RegionEU868ChannelsRemove>
 800e6ea:	b1d0      	cbz	r0, 800e722 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800e6ec:	2003      	movs	r0, #3
}
 800e6ee:	b005      	add	sp, #20
 800e6f0:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800e6f4:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800e6f6:	7903      	ldrb	r3, [r0, #4]
 800e6f8:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800e6fc:	a802      	add	r0, sp, #8
 800e6fe:	f7ff ff29 	bl	800e554 <RegionEU868ChannelAdd>
 800e702:	2806      	cmp	r0, #6
 800e704:	d80b      	bhi.n	800e71e <RegionEU868NewChannelReq+0x4a>
 800e706:	e8df f000 	tbb	[pc, r0]
 800e70a:	0a04      	.short	0x0a04
 800e70c:	060e0a0a 	.word	0x060e0a0a
 800e710:	08          	.byte	0x08
 800e711:	00          	.byte	0x00
 800e712:	2003      	movs	r0, #3
 800e714:	e7eb      	b.n	800e6ee <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800e716:	2001      	movs	r0, #1
                break;
 800e718:	e7e9      	b.n	800e6ee <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800e71a:	2000      	movs	r0, #0
                break;
 800e71c:	e7e7      	b.n	800e6ee <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800e71e:	2000      	movs	r0, #0
                break;
 800e720:	e7e5      	b.n	800e6ee <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800e722:	2000      	movs	r0, #0
 800e724:	e7e3      	b.n	800e6ee <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800e726:	2002      	movs	r0, #2
 800e728:	e7e1      	b.n	800e6ee <RegionEU868NewChannelReq+0x1a>
	...

0800e72c <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800e72c:	b538      	push	{r3, r4, r5, lr}
 800e72e:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800e730:	4b12      	ldr	r3, [pc, #72]	; (800e77c <RegionEU868SetContinuousWave+0x50>)
 800e732:	6819      	ldr	r1, [r3, #0]
 800e734:	4d12      	ldr	r5, [pc, #72]	; (800e780 <RegionEU868SetContinuousWave+0x54>)
 800e736:	682b      	ldr	r3, [r5, #0]
 800e738:	7802      	ldrb	r2, [r0, #0]
 800e73a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e73e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e742:	7a53      	ldrb	r3, [r2, #9]
 800e744:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e748:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800e74c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800e750:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e754:	f7ff f98b 	bl	800da6e <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800e758:	682a      	ldr	r2, [r5, #0]
 800e75a:	7823      	ldrb	r3, [r4, #0]
 800e75c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e760:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800e764:	68a2      	ldr	r2, [r4, #8]
 800e766:	6861      	ldr	r1, [r4, #4]
 800e768:	f7ff f89e 	bl	800d8a8 <RegionCommonComputeTxPower>
 800e76c:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800e76e:	4b05      	ldr	r3, [pc, #20]	; (800e784 <RegionEU868SetContinuousWave+0x58>)
 800e770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e772:	89a2      	ldrh	r2, [r4, #12]
 800e774:	4628      	mov	r0, r5
 800e776:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800e778:	bd38      	pop	{r3, r4, r5, pc}
 800e77a:	bf00      	nop
 800e77c:	20001030 	.word	0x20001030
 800e780:	20001034 	.word	0x20001034
 800e784:	08014674 	.word	0x08014674

0800e788 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800e788:	1a88      	subs	r0, r1, r2
 800e78a:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800e78c:	2800      	cmp	r0, #0
 800e78e:	db01      	blt.n	800e794 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800e790:	b2c0      	uxtb	r0, r0
 800e792:	4770      	bx	lr
        datarate = DR_0;
 800e794:	2000      	movs	r0, #0
 800e796:	e7fb      	b.n	800e790 <RegionEU868ApplyDrOffset+0x8>

0800e798 <GetMaxEIRP>:
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static int8_t GetMaxEIRP( uint32_t freq )
{
    if( freq >= 922100000 )
 800e798:	4b03      	ldr	r3, [pc, #12]	; (800e7a8 <GetMaxEIRP+0x10>)
 800e79a:	4298      	cmp	r0, r3
 800e79c:	d801      	bhi.n	800e7a2 <GetMaxEIRP+0xa>
    {// Limit to 14dBm
        return KR920_DEFAULT_MAX_EIRP_HIGH;
    }
    // Limit to 10dBm
    return KR920_DEFAULT_MAX_EIRP_LOW;
 800e79e:	200a      	movs	r0, #10
 800e7a0:	4770      	bx	lr
        return KR920_DEFAULT_MAX_EIRP_HIGH;
 800e7a2:	200e      	movs	r0, #14
}
 800e7a4:	4770      	bx	lr
 800e7a6:	bf00      	nop
 800e7a8:	36f6211f 	.word	0x36f6211f

0800e7ac <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 800e7ac:	b510      	push	{r4, lr}
 800e7ae:	4604      	mov	r4, r0
    uint32_t tmpFreq = freq;

    // Check radio driver support
    if( Radio.CheckRfFrequency( tmpFreq ) == false )
 800e7b0:	4b0a      	ldr	r3, [pc, #40]	; (800e7dc <VerifyRfFreq+0x30>)
 800e7b2:	6a1b      	ldr	r3, [r3, #32]
 800e7b4:	4798      	blx	r3
 800e7b6:	b180      	cbz	r0, 800e7da <VerifyRfFreq+0x2e>
        return false;
    }

    // Verify if the frequency is valid. The frequency must be in a specified
    // range and can be set to specific values.
    if( ( tmpFreq >= 920900000 ) && ( tmpFreq <=923300000 ) )
 800e7b8:	4b09      	ldr	r3, [pc, #36]	; (800e7e0 <VerifyRfFreq+0x34>)
 800e7ba:	4423      	add	r3, r4
 800e7bc:	4a09      	ldr	r2, [pc, #36]	; (800e7e4 <VerifyRfFreq+0x38>)
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	d80a      	bhi.n	800e7d8 <VerifyRfFreq+0x2c>
    {
        // Range ok, check for specific value
        tmpFreq -= 920900000;
        if( ( tmpFreq % 200000 ) == 0 )
 800e7c2:	099a      	lsrs	r2, r3, #6
 800e7c4:	4908      	ldr	r1, [pc, #32]	; (800e7e8 <VerifyRfFreq+0x3c>)
 800e7c6:	fba1 1202 	umull	r1, r2, r1, r2
 800e7ca:	0992      	lsrs	r2, r2, #6
 800e7cc:	4907      	ldr	r1, [pc, #28]	; (800e7ec <VerifyRfFreq+0x40>)
 800e7ce:	fb01 3212 	mls	r2, r1, r2, r3
 800e7d2:	b112      	cbz	r2, 800e7da <VerifyRfFreq+0x2e>
        {
            return true;
        }
    }
    return false;
 800e7d4:	2000      	movs	r0, #0
 800e7d6:	e000      	b.n	800e7da <VerifyRfFreq+0x2e>
 800e7d8:	2000      	movs	r0, #0
}
 800e7da:	bd10      	pop	{r4, pc}
 800e7dc:	08014674 	.word	0x08014674
 800e7e0:	c91c2e60 	.word	0xc91c2e60
 800e7e4:	00249f00 	.word	0x00249f00
 800e7e8:	053e2d63 	.word	0x053e2d63
 800e7ec:	00030d40 	.word	0x00030d40

0800e7f0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800e7f0:	b570      	push	{r4, r5, r6, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	460c      	mov	r4, r1
    int8_t phyDr = DataratesKR920[datarate];
 800e7f6:	4b0a      	ldr	r3, [pc, #40]	; (800e820 <GetTimeOnAir+0x30>)
 800e7f8:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsKR920 );
 800e7fa:	490a      	ldr	r1, [pc, #40]	; (800e824 <GetTimeOnAir+0x34>)
 800e7fc:	f7ff f93c 	bl	800da78 <RegionCommonGetBandwidth>
 800e800:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800e802:	4b09      	ldr	r3, [pc, #36]	; (800e828 <GetTimeOnAir+0x38>)
 800e804:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e806:	2001      	movs	r0, #1
 800e808:	9003      	str	r0, [sp, #12]
 800e80a:	b2e4      	uxtb	r4, r4
 800e80c:	9402      	str	r4, [sp, #8]
 800e80e:	2200      	movs	r2, #0
 800e810:	9201      	str	r2, [sp, #4]
 800e812:	2208      	movs	r2, #8
 800e814:	9200      	str	r2, [sp, #0]
 800e816:	4603      	mov	r3, r0
 800e818:	4632      	mov	r2, r6
 800e81a:	47a8      	blx	r5
}
 800e81c:	b004      	add	sp, #16
 800e81e:	bd70      	pop	{r4, r5, r6, pc}
 800e820:	08014248 	.word	0x08014248
 800e824:	08014230 	.word	0x08014230
 800e828:	08014674 	.word	0x08014674

0800e82c <RegionKR920GetPhyParam>:
#endif /* REGION_KR920 */

PhyParam_t RegionKR920GetPhyParam( GetPhyParams_t* getPhy )
{
 800e82c:	b500      	push	{lr}
 800e82e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800e830:	2300      	movs	r3, #0
 800e832:	9304      	str	r3, [sp, #16]

#if defined( REGION_KR920 )
    switch( getPhy->Attribute )
 800e834:	7803      	ldrb	r3, [r0, #0]
 800e836:	3b0b      	subs	r3, #11
 800e838:	2b2e      	cmp	r3, #46	; 0x2e
 800e83a:	d830      	bhi.n	800e89e <RegionKR920GetPhyParam+0x72>
 800e83c:	e8df f003 	tbb	[pc, r3]
 800e840:	3f393633 	.word	0x3f393633
 800e844:	4d49452f 	.word	0x4d49452f
 800e848:	5d595551 	.word	0x5d595551
 800e84c:	692f662f 	.word	0x692f662f
 800e850:	2f78756f 	.word	0x2f78756f
 800e854:	187f7c2f 	.word	0x187f7c2f
 800e858:	2f2f2f2f 	.word	0x2f2f2f2f
 800e85c:	2f2f2f2f 	.word	0x2f2f2f2f
 800e860:	2f2f2f2f 	.word	0x2f2f2f2f
 800e864:	8f85822f 	.word	0x8f85822f
 800e868:	95922f2f 	.word	0x95922f2f
 800e86c:	982f      	.short	0x982f
 800e86e:	9e          	.byte	0x9e
 800e86f:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800e870:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e874:	f88d 3004 	strb.w	r3, [sp, #4]
 800e878:	2305      	movs	r3, #5
 800e87a:	f88d 3005 	strb.w	r3, [sp, #5]
 800e87e:	2300      	movs	r3, #0
 800e880:	f88d 3006 	strb.w	r3, [sp, #6]
 800e884:	2310      	movs	r3, #16
 800e886:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )KR920_TX_MAX_DATARATE,
                .MinDr = ( int8_t )KR920_TX_MIN_DATARATE,
                .NbChannels = KR920_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800e88a:	4b40      	ldr	r3, [pc, #256]	; (800e98c <RegionKR920GetPhyParam+0x160>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e892:	9202      	str	r2, [sp, #8]
 800e894:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800e896:	a801      	add	r0, sp, #4
 800e898:	f7ff f8ca 	bl	800da30 <RegionCommonGetNextLowerTxDr>
 800e89c:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_KR920 */
    return phyParam;
}
 800e89e:	9804      	ldr	r0, [sp, #16]
 800e8a0:	b007      	add	sp, #28
 800e8a2:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800e8a6:	2340      	movs	r3, #64	; 0x40
 800e8a8:	9304      	str	r3, [sp, #16]
            break;
 800e8aa:	e7f8      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800e8ac:	2320      	movs	r3, #32
 800e8ae:	9304      	str	r3, [sp, #16]
            break;
 800e8b0:	e7f5      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateKR920[getPhy->Datarate];
 800e8b2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e8b6:	4a36      	ldr	r2, [pc, #216]	; (800e990 <RegionKR920GetPhyParam+0x164>)
 800e8b8:	5cd3      	ldrb	r3, [r2, r3]
 800e8ba:	9304      	str	r3, [sp, #16]
            break;
 800e8bc:	e7ef      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterKR920[getPhy->Datarate];
 800e8be:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e8c2:	4a34      	ldr	r2, [pc, #208]	; (800e994 <RegionKR920GetPhyParam+0x168>)
 800e8c4:	5cd3      	ldrb	r3, [r2, r3]
 800e8c6:	9304      	str	r3, [sp, #16]
            break;
 800e8c8:	e7e9      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = KR920_MAX_RX_WINDOW;
 800e8ca:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800e8ce:	9304      	str	r3, [sp, #16]
            break;
 800e8d0:	e7e5      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800e8d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e8d6:	9304      	str	r3, [sp, #16]
            break;
 800e8d8:	e7e1      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800e8da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e8de:	9304      	str	r3, [sp, #16]
            break;
 800e8e0:	e7dd      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800e8e2:	f241 3388 	movw	r3, #5000	; 0x1388
 800e8e6:	9304      	str	r3, [sp, #16]
            break;
 800e8e8:	e7d9      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800e8ea:	f241 7370 	movw	r3, #6000	; 0x1770
 800e8ee:	9304      	str	r3, [sp, #16]
            break;
 800e8f0:	e7d5      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800e8f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e8f6:	9304      	str	r3, [sp, #16]
            break;
 800e8f8:	e7d1      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800e8fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e8fe:	4826      	ldr	r0, [pc, #152]	; (800e998 <RegionKR920GetPhyParam+0x16c>)
 800e900:	f002 f948 	bl	8010b94 <randr>
 800e904:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800e908:	9004      	str	r0, [sp, #16]
            break;
 800e90a:	e7c8      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = KR920_RX_WND_2_FREQ;
 800e90c:	4b23      	ldr	r3, [pc, #140]	; (800e99c <RegionKR920GetPhyParam+0x170>)
 800e90e:	9304      	str	r3, [sp, #16]
            break;
 800e910:	e7c5      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e912:	4b1e      	ldr	r3, [pc, #120]	; (800e98c <RegionKR920GetPhyParam+0x160>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e91a:	9304      	str	r3, [sp, #16]
            break;
 800e91c:	e7bf      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800e91e:	4b1b      	ldr	r3, [pc, #108]	; (800e98c <RegionKR920GetPhyParam+0x160>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800e926:	9304      	str	r3, [sp, #16]
            break;
 800e928:	e7b9      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = KR920_MAX_NB_CHANNELS;
 800e92a:	2310      	movs	r3, #16
 800e92c:	9304      	str	r3, [sp, #16]
            break;
 800e92e:	e7b6      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800e930:	4b16      	ldr	r3, [pc, #88]	; (800e98c <RegionKR920GetPhyParam+0x160>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	9304      	str	r3, [sp, #16]
            break;
 800e936:	e7b2      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.fValue = KR920_DEFAULT_MAX_EIRP_HIGH;
 800e938:	4b19      	ldr	r3, [pc, #100]	; (800e9a0 <RegionKR920GetPhyParam+0x174>)
 800e93a:	9304      	str	r3, [sp, #16]
            break;
 800e93c:	e7af      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.fValue = KR920_DEFAULT_ANTENNA_GAIN;
 800e93e:	4b19      	ldr	r3, [pc, #100]	; (800e9a4 <RegionKR920GetPhyParam+0x178>)
 800e940:	9304      	str	r3, [sp, #16]
            break;
 800e942:	e7ac      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = KR920_BEACON_CHANNEL_FREQ;
 800e944:	4b18      	ldr	r3, [pc, #96]	; (800e9a8 <RegionKR920GetPhyParam+0x17c>)
 800e946:	9304      	str	r3, [sp, #16]
            break;
 800e948:	e7a9      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = KR920_BEACON_SIZE;
 800e94a:	2311      	movs	r3, #17
 800e94c:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = KR920_RFU1_SIZE;
 800e950:	2302      	movs	r3, #2
 800e952:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = KR920_RFU2_SIZE;
 800e956:	2300      	movs	r3, #0
 800e958:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800e95c:	e79f      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = KR920_BEACON_CHANNEL_DR;
 800e95e:	2303      	movs	r3, #3
 800e960:	9304      	str	r3, [sp, #16]
            break;
 800e962:	e79c      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = KR920_PING_SLOT_CHANNEL_FREQ;
 800e964:	4b10      	ldr	r3, [pc, #64]	; (800e9a8 <RegionKR920GetPhyParam+0x17c>)
 800e966:	9304      	str	r3, [sp, #16]
            break;
 800e968:	e799      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = KR920_PING_SLOT_CHANNEL_DR;
 800e96a:	2303      	movs	r3, #3
 800e96c:	9304      	str	r3, [sp, #16]
            break;
 800e96e:	e796      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = DataratesKR920[getPhy->Datarate];
 800e970:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e974:	4a0d      	ldr	r2, [pc, #52]	; (800e9ac <RegionKR920GetPhyParam+0x180>)
 800e976:	5cd3      	ldrb	r3, [r2, r3]
 800e978:	9304      	str	r3, [sp, #16]
            break;
 800e97a:	e790      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsKR920 );
 800e97c:	490c      	ldr	r1, [pc, #48]	; (800e9b0 <RegionKR920GetPhyParam+0x184>)
 800e97e:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800e982:	f7ff f879 	bl	800da78 <RegionCommonGetBandwidth>
 800e986:	9004      	str	r0, [sp, #16]
            break;
 800e988:	e789      	b.n	800e89e <RegionKR920GetPhyParam+0x72>
 800e98a:	bf00      	nop
 800e98c:	2000103c 	.word	0x2000103c
 800e990:	08014250 	.word	0x08014250
 800e994:	08014258 	.word	0x08014258
 800e998:	fffffc18 	.word	0xfffffc18
 800e99c:	36f313e0 	.word	0x36f313e0
 800e9a0:	41600000 	.word	0x41600000
 800e9a4:	4009999a 	.word	0x4009999a
 800e9a8:	37056360 	.word	0x37056360
 800e9ac:	08014248 	.word	0x08014248
 800e9b0:	08014230 	.word	0x08014230

0800e9b4 <RegionKR920SetBandTxDone>:

void RegionKR920SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800e9b4:	b530      	push	{r4, r5, lr}
 800e9b6:	b083      	sub	sp, #12
#if defined( REGION_KR920 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800e9b8:	4b0b      	ldr	r3, [pc, #44]	; (800e9e8 <RegionKR920SetBandTxDone+0x34>)
 800e9ba:	681d      	ldr	r5, [r3, #0]
 800e9bc:	4b0b      	ldr	r3, [pc, #44]	; (800e9ec <RegionKR920SetBandTxDone+0x38>)
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	7803      	ldrb	r3, [r0, #0]
 800e9c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e9c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e9ca:	7a5b      	ldrb	r3, [r3, #9]
 800e9cc:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800e9d0:	6903      	ldr	r3, [r0, #16]
 800e9d2:	9300      	str	r3, [sp, #0]
 800e9d4:	68c3      	ldr	r3, [r0, #12]
 800e9d6:	7842      	ldrb	r2, [r0, #1]
 800e9d8:	6881      	ldr	r1, [r0, #8]
 800e9da:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800e9de:	f7fe fe13 	bl	800d608 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_KR920 */
}
 800e9e2:	b003      	add	sp, #12
 800e9e4:	bd30      	pop	{r4, r5, pc}
 800e9e6:	bf00      	nop
 800e9e8:	20001038 	.word	0x20001038
 800e9ec:	2000103c 	.word	0x2000103c

0800e9f0 <RegionKR920InitDefaults>:

void RegionKR920InitDefaults( InitDefaultsParams_t* params )
{
 800e9f0:	b530      	push	{r4, r5, lr}
 800e9f2:	b087      	sub	sp, #28
#if defined( REGION_KR920 )
    Band_t bands[KR920_MAX_NB_BANDS] =
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	f8ad 3000 	strh.w	r3, [sp]
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	f88d 3002 	strb.w	r3, [sp, #2]
 800ea00:	9301      	str	r3, [sp, #4]
 800ea02:	9302      	str	r3, [sp, #8]
 800ea04:	9303      	str	r3, [sp, #12]
 800ea06:	9304      	str	r3, [sp, #16]
 800ea08:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        KR920_BAND0
    };

    switch( params->Type )
 800ea0c:	7a03      	ldrb	r3, [r0, #8]
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d032      	beq.n	800ea78 <RegionKR920InitDefaults+0x88>
 800ea12:	2b02      	cmp	r3, #2
 800ea14:	d03e      	beq.n	800ea94 <RegionKR920InitDefaults+0xa4>
 800ea16:	b10b      	cbz	r3, 800ea1c <RegionKR920InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_KR920 */
}
 800ea18:	b007      	add	sp, #28
 800ea1a:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800ea1c:	6803      	ldr	r3, [r0, #0]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d0fa      	beq.n	800ea18 <RegionKR920InitDefaults+0x28>
 800ea22:	6842      	ldr	r2, [r0, #4]
 800ea24:	2a00      	cmp	r2, #0
 800ea26:	d0f7      	beq.n	800ea18 <RegionKR920InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800ea28:	491f      	ldr	r1, [pc, #124]	; (800eaa8 <RegionKR920InitDefaults+0xb8>)
 800ea2a:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800ea2c:	4c1f      	ldr	r4, [pc, #124]	; (800eaac <RegionKR920InitDefaults+0xbc>)
 800ea2e:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * KR920_MAX_NB_BANDS );
 800ea30:	2218      	movs	r2, #24
 800ea32:	4669      	mov	r1, sp
 800ea34:	4618      	mov	r0, r3
 800ea36:	f002 f8ba 	bl	8010bae <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) KR920_LC1;
 800ea3a:	6824      	ldr	r4, [r4, #0]
 800ea3c:	4b1c      	ldr	r3, [pc, #112]	; (800eab0 <RegionKR920InitDefaults+0xc0>)
 800ea3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) KR920_LC2;
 800ea46:	f104 050c 	add.w	r5, r4, #12
 800ea4a:	f103 020c 	add.w	r2, r3, #12
 800ea4e:	ca07      	ldmia	r2, {r0, r1, r2}
 800ea50:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) KR920_LC3;
 800ea54:	f104 0518 	add.w	r5, r4, #24
 800ea58:	3318      	adds	r3, #24
 800ea5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea5e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800ea62:	2307      	movs	r3, #7
 800ea64:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ea68:	2201      	movs	r2, #1
 800ea6a:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800ea6e:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800ea72:	f7fe fdb8 	bl	800d5e6 <RegionCommonChanMaskCopy>
            break;
 800ea76:	e7cf      	b.n	800ea18 <RegionKR920InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800ea78:	4b0c      	ldr	r3, [pc, #48]	; (800eaac <RegionKR920InitDefaults+0xbc>)
 800ea7a:	6818      	ldr	r0, [r3, #0]
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800ea80:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800ea82:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ea84:	2201      	movs	r2, #1
 800ea86:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800ea8a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800ea8e:	f7fe fdaa 	bl	800d5e6 <RegionCommonChanMaskCopy>
            break;
 800ea92:	e7c1      	b.n	800ea18 <RegionKR920InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800ea94:	4b05      	ldr	r3, [pc, #20]	; (800eaac <RegionKR920InitDefaults+0xbc>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800ea9c:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800eaa0:	430a      	orrs	r2, r1
 800eaa2:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800eaa6:	e7b7      	b.n	800ea18 <RegionKR920InitDefaults+0x28>
 800eaa8:	20001038 	.word	0x20001038
 800eaac:	2000103c 	.word	0x2000103c
 800eab0:	08013bc8 	.word	0x08013bc8

0800eab4 <RegionKR920Verify>:

bool RegionKR920Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800eab4:	b508      	push	{r3, lr}
#if defined( REGION_KR920 )
    switch( phyAttribute )
 800eab6:	290a      	cmp	r1, #10
 800eab8:	d833      	bhi.n	800eb22 <RegionKR920Verify+0x6e>
 800eaba:	e8df f001 	tbb	[pc, r1]
 800eabe:	3206      	.short	0x3206
 800eac0:	0a323232 	.word	0x0a323232
 800eac4:	28321e14 	.word	0x28321e14
 800eac8:	28          	.byte	0x28
 800eac9:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800eaca:	6800      	ldr	r0, [r0, #0]
 800eacc:	f7ff fe6e 	bl	800e7ac <VerifyRfFreq>
 800ead0:	e028      	b.n	800eb24 <RegionKR920Verify+0x70>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE );
 800ead2:	2205      	movs	r2, #5
 800ead4:	2100      	movs	r1, #0
 800ead6:	f990 0000 	ldrsb.w	r0, [r0]
 800eada:	f7fe fd12 	bl	800d502 <RegionCommonValueInRange>
 800eade:	3800      	subs	r0, #0
 800eae0:	bf18      	it	ne
 800eae2:	2001      	movne	r0, #1
 800eae4:	e01e      	b.n	800eb24 <RegionKR920Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800eae6:	2205      	movs	r2, #5
 800eae8:	2100      	movs	r1, #0
 800eaea:	f990 0000 	ldrsb.w	r0, [r0]
 800eaee:	f7fe fd08 	bl	800d502 <RegionCommonValueInRange>
 800eaf2:	3800      	subs	r0, #0
 800eaf4:	bf18      	it	ne
 800eaf6:	2001      	movne	r0, #1
 800eaf8:	e014      	b.n	800eb24 <RegionKR920Verify+0x70>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, KR920_RX_MIN_DATARATE, KR920_RX_MAX_DATARATE );
 800eafa:	2205      	movs	r2, #5
 800eafc:	2100      	movs	r1, #0
 800eafe:	f990 0000 	ldrsb.w	r0, [r0]
 800eb02:	f7fe fcfe 	bl	800d502 <RegionCommonValueInRange>
 800eb06:	3800      	subs	r0, #0
 800eb08:	bf18      	it	ne
 800eb0a:	2001      	movne	r0, #1
 800eb0c:	e00a      	b.n	800eb24 <RegionKR920Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, KR920_MAX_TX_POWER, KR920_MIN_TX_POWER );
 800eb0e:	2207      	movs	r2, #7
 800eb10:	2100      	movs	r1, #0
 800eb12:	f990 0000 	ldrsb.w	r0, [r0]
 800eb16:	f7fe fcf4 	bl	800d502 <RegionCommonValueInRange>
 800eb1a:	3800      	subs	r0, #0
 800eb1c:	bf18      	it	ne
 800eb1e:	2001      	movne	r0, #1
 800eb20:	e000      	b.n	800eb24 <RegionKR920Verify+0x70>
{
 800eb22:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_KR920 */
}
 800eb24:	bd08      	pop	{r3, pc}
	...

0800eb28 <RegionKR920ChanMaskSet>:
    }
#endif /* REGION_KR920 */
}

bool RegionKR920ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800eb28:	b508      	push	{r3, lr}
#if defined( REGION_KR920 )
    switch( chanMaskSet->ChannelsMaskType )
 800eb2a:	7903      	ldrb	r3, [r0, #4]
 800eb2c:	b11b      	cbz	r3, 800eb36 <RegionKR920ChanMaskSet+0xe>
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d00b      	beq.n	800eb4a <RegionKR920ChanMaskSet+0x22>
 800eb32:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_KR920 */
}
 800eb34:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800eb36:	4b0a      	ldr	r3, [pc, #40]	; (800eb60 <RegionKR920ChanMaskSet+0x38>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	6801      	ldr	r1, [r0, #0]
 800eb3e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800eb42:	f7fe fd50 	bl	800d5e6 <RegionCommonChanMaskCopy>
    return true;
 800eb46:	2001      	movs	r0, #1
            break;
 800eb48:	e7f4      	b.n	800eb34 <RegionKR920ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800eb4a:	4b05      	ldr	r3, [pc, #20]	; (800eb60 <RegionKR920ChanMaskSet+0x38>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	2201      	movs	r2, #1
 800eb50:	6801      	ldr	r1, [r0, #0]
 800eb52:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800eb56:	f7fe fd46 	bl	800d5e6 <RegionCommonChanMaskCopy>
    return true;
 800eb5a:	2001      	movs	r0, #1
            break;
 800eb5c:	e7ea      	b.n	800eb34 <RegionKR920ChanMaskSet+0xc>
 800eb5e:	bf00      	nop
 800eb60:	2000103c 	.word	0x2000103c

0800eb64 <RegionKR920ComputeRxWindowParameters>:

void RegionKR920ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800eb64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb66:	b083      	sub	sp, #12
 800eb68:	460e      	mov	r6, r1
 800eb6a:	4617      	mov	r7, r2
 800eb6c:	461c      	mov	r4, r3
#if defined( REGION_KR920 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, KR920_RX_MAX_DATARATE );
 800eb6e:	2805      	cmp	r0, #5
 800eb70:	bfa8      	it	ge
 800eb72:	2005      	movge	r0, #5
 800eb74:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsKR920 );
 800eb76:	4d0f      	ldr	r5, [pc, #60]	; (800ebb4 <RegionKR920ComputeRxWindowParameters+0x50>)
 800eb78:	4629      	mov	r1, r5
 800eb7a:	f7fe ff7d 	bl	800da78 <RegionCommonGetBandwidth>
 800eb7e:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesKR920[rxConfigParams->Datarate], BandwidthsKR920[rxConfigParams->Datarate] );
 800eb80:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800eb84:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800eb88:	4a0b      	ldr	r2, [pc, #44]	; (800ebb8 <RegionKR920ComputeRxWindowParameters+0x54>)
 800eb8a:	5cd0      	ldrb	r0, [r2, r3]
 800eb8c:	f7fe fe44 	bl	800d818 <RegionCommonComputeSymbolTimeLoRa>
 800eb90:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800eb92:	4b0a      	ldr	r3, [pc, #40]	; (800ebbc <RegionKR920ComputeRxWindowParameters+0x58>)
 800eb94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb96:	4798      	blx	r3
 800eb98:	4603      	mov	r3, r0
 800eb9a:	f104 020c 	add.w	r2, r4, #12
 800eb9e:	9201      	str	r2, [sp, #4]
 800eba0:	3408      	adds	r4, #8
 800eba2:	9400      	str	r4, [sp, #0]
 800eba4:	463a      	mov	r2, r7
 800eba6:	4631      	mov	r1, r6
 800eba8:	4628      	mov	r0, r5
 800ebaa:	f7fe fe43 	bl	800d834 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_KR920 */
}
 800ebae:	b003      	add	sp, #12
 800ebb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	08014230 	.word	0x08014230
 800ebb8:	08014248 	.word	0x08014248
 800ebbc:	08014674 	.word	0x08014674

0800ebc0 <RegionKR920RxConfig>:

bool RegionKR920RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ebc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebc4:	b08b      	sub	sp, #44	; 0x2c
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	460d      	mov	r5, r1
#if defined( REGION_KR920 )
    int8_t dr = rxConfig->Datarate;
 800ebca:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800ebce:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800ebd0:	4b25      	ldr	r3, [pc, #148]	; (800ec68 <RegionKR920RxConfig+0xa8>)
 800ebd2:	685b      	ldr	r3, [r3, #4]
 800ebd4:	4798      	blx	r3
 800ebd6:	2800      	cmp	r0, #0
 800ebd8:	d144      	bne.n	800ec64 <RegionKR920RxConfig+0xa4>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800ebda:	7ce3      	ldrb	r3, [r4, #19]
 800ebdc:	b96b      	cbnz	r3, 800ebfa <RegionKR920RxConfig+0x3a>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ebde:	4b23      	ldr	r3, [pc, #140]	; (800ec6c <RegionKR920RxConfig+0xac>)
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	7823      	ldrb	r3, [r4, #0]
 800ebe4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800ebe8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800ebec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ebf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ebf4:	685f      	ldr	r7, [r3, #4]
 800ebf6:	b907      	cbnz	r7, 800ebfa <RegionKR920RxConfig+0x3a>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ebf8:	460f      	mov	r7, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesKR920[dr];
 800ebfa:	4b1d      	ldr	r3, [pc, #116]	; (800ec70 <RegionKR920RxConfig+0xb0>)
 800ebfc:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800ec00:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800ec68 <RegionKR920RxConfig+0xa8>
 800ec04:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec08:	4638      	mov	r0, r7
 800ec0a:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800ec0c:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800ec10:	7ca3      	ldrb	r3, [r4, #18]
 800ec12:	9309      	str	r3, [sp, #36]	; 0x24
 800ec14:	2001      	movs	r0, #1
 800ec16:	9008      	str	r0, [sp, #32]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	9207      	str	r2, [sp, #28]
 800ec1c:	9206      	str	r2, [sp, #24]
 800ec1e:	9205      	str	r2, [sp, #20]
 800ec20:	9204      	str	r2, [sp, #16]
 800ec22:	9203      	str	r2, [sp, #12]
 800ec24:	8923      	ldrh	r3, [r4, #8]
 800ec26:	9302      	str	r3, [sp, #8]
 800ec28:	2308      	movs	r3, #8
 800ec2a:	9301      	str	r3, [sp, #4]
 800ec2c:	9200      	str	r2, [sp, #0]
 800ec2e:	4603      	mov	r3, r0
 800ec30:	464a      	mov	r2, r9
 800ec32:	78a1      	ldrb	r1, [r4, #2]
 800ec34:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800ec36:	7c63      	ldrb	r3, [r4, #17]
 800ec38:	b18b      	cbz	r3, 800ec5e <RegionKR920RxConfig+0x9e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterKR920[dr];
 800ec3a:	4b0e      	ldr	r3, [pc, #56]	; (800ec74 <RegionKR920RxConfig+0xb4>)
 800ec3c:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateKR920[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800ec3e:	4b0a      	ldr	r3, [pc, #40]	; (800ec68 <RegionKR920RxConfig+0xa8>)
 800ec40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec42:	310d      	adds	r1, #13
 800ec44:	b2c9      	uxtb	r1, r1
 800ec46:	2001      	movs	r0, #1
 800ec48:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800ec4a:	4632      	mov	r2, r6
 800ec4c:	4639      	mov	r1, r7
 800ec4e:	7ce0      	ldrb	r0, [r4, #19]
 800ec50:	f7fe ff24 	bl	800da9c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800ec54:	702e      	strb	r6, [r5, #0]
    return true;
 800ec56:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_KR920 */
}
 800ec58:	b00b      	add	sp, #44	; 0x2c
 800ec5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateKR920[dr];
 800ec5e:	4b06      	ldr	r3, [pc, #24]	; (800ec78 <RegionKR920RxConfig+0xb8>)
 800ec60:	5d99      	ldrb	r1, [r3, r6]
 800ec62:	e7ec      	b.n	800ec3e <RegionKR920RxConfig+0x7e>
        return false;
 800ec64:	2000      	movs	r0, #0
 800ec66:	e7f7      	b.n	800ec58 <RegionKR920RxConfig+0x98>
 800ec68:	08014674 	.word	0x08014674
 800ec6c:	2000103c 	.word	0x2000103c
 800ec70:	08014248 	.word	0x08014248
 800ec74:	08014258 	.word	0x08014258
 800ec78:	08014250 	.word	0x08014250

0800ec7c <RegionKR920TxConfig>:

bool RegionKR920TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ec7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec80:	b08d      	sub	sp, #52	; 0x34
 800ec82:	4604      	mov	r4, r0
 800ec84:	910b      	str	r1, [sp, #44]	; 0x2c
 800ec86:	4690      	mov	r8, r2
#if defined( REGION_KR920 )
    int8_t phyDr = DataratesKR920[txConfig->Datarate];
 800ec88:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ec8c:	4a39      	ldr	r2, [pc, #228]	; (800ed74 <RegionKR920TxConfig+0xf8>)
 800ec8e:	f912 b003 	ldrsb.w	fp, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800ec92:	4b39      	ldr	r3, [pc, #228]	; (800ed78 <RegionKR920TxConfig+0xfc>)
 800ec94:	6819      	ldr	r1, [r3, #0]
 800ec96:	4d39      	ldr	r5, [pc, #228]	; (800ed7c <RegionKR920TxConfig+0x100>)
 800ec98:	682b      	ldr	r3, [r5, #0]
 800ec9a:	7802      	ldrb	r2, [r0, #0]
 800ec9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800eca0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800eca4:	7a53      	ldrb	r3, [r2, #9]
 800eca6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ecaa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ecae:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800ecb2:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800ecb6:	f7fe feda 	bl	800da6e <RegionCommonLimitTxPower>
 800ecba:	900a      	str	r0, [sp, #40]	; 0x28
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsKR920 );
 800ecbc:	4930      	ldr	r1, [pc, #192]	; (800ed80 <RegionKR920TxConfig+0x104>)
 800ecbe:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ecc2:	f7fe fed9 	bl	800da78 <RegionCommonGetBandwidth>
 800ecc6:	4606      	mov	r6, r0
    float maxEIRP = GetMaxEIRP( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800ecc8:	682a      	ldr	r2, [r5, #0]
 800ecca:	7823      	ldrb	r3, [r4, #0]
 800eccc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ecd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ecd4:	f7ff fd60 	bl	800e798 <GetMaxEIRP>
 800ecd8:	f7f3 fd7c 	bl	80027d4 <__aeabi_i2f>
 800ecdc:	4605      	mov	r5, r0
    int8_t phyTxPower = 0;

    // Take the minimum between the maxEIRP and txConfig->MaxEirp.
    // The value of txConfig->MaxEirp could have changed during runtime, e.g. due to a MAC command.
    maxEIRP = MIN( txConfig->MaxEirp, maxEIRP );
 800ecde:	6867      	ldr	r7, [r4, #4]
 800ece0:	4601      	mov	r1, r0
 800ece2:	4638      	mov	r0, r7
 800ece4:	f7f3 ff68 	bl	8002bb8 <__aeabi_fcmplt>
 800ece8:	b900      	cbnz	r0, 800ecec <RegionKR920TxConfig+0x70>
 800ecea:	462f      	mov	r7, r5

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, maxEIRP, txConfig->AntennaGain );
 800ecec:	68a2      	ldr	r2, [r4, #8]
 800ecee:	4639      	mov	r1, r7
 800ecf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ecf2:	f7fe fdd9 	bl	800d8a8 <RegionCommonComputeTxPower>
 800ecf6:	4681      	mov	r9, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800ecf8:	4f22      	ldr	r7, [pc, #136]	; (800ed84 <RegionKR920TxConfig+0x108>)
 800ecfa:	68fa      	ldr	r2, [r7, #12]
 800ecfc:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800ed7c <RegionKR920TxConfig+0x100>
 800ed00:	f8da 1000 	ldr.w	r1, [sl]
 800ed04:	7823      	ldrb	r3, [r4, #0]
 800ed06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ed0a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800ed0e:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800ed10:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ed14:	9308      	str	r3, [sp, #32]
 800ed16:	2200      	movs	r2, #0
 800ed18:	9207      	str	r2, [sp, #28]
 800ed1a:	9206      	str	r2, [sp, #24]
 800ed1c:	9205      	str	r2, [sp, #20]
 800ed1e:	2501      	movs	r5, #1
 800ed20:	9504      	str	r5, [sp, #16]
 800ed22:	9203      	str	r2, [sp, #12]
 800ed24:	2308      	movs	r3, #8
 800ed26:	9302      	str	r3, [sp, #8]
 800ed28:	9501      	str	r5, [sp, #4]
 800ed2a:	f8cd b000 	str.w	fp, [sp]
 800ed2e:	4633      	mov	r3, r6
 800ed30:	4649      	mov	r1, r9
 800ed32:	4628      	mov	r0, r5
 800ed34:	69fe      	ldr	r6, [r7, #28]
 800ed36:	47b0      	blx	r6
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800ed38:	f8da 2000 	ldr.w	r2, [sl]
 800ed3c:	7823      	ldrb	r3, [r4, #0]
 800ed3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ed42:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800ed46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ed4a:	f7fe fed7 	bl	800dafc <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800ed4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed50:	7b21      	ldrb	r1, [r4, #12]
 800ed52:	4628      	mov	r0, r5
 800ed54:	4798      	blx	r3
    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800ed56:	89a1      	ldrh	r1, [r4, #12]
 800ed58:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ed5c:	f7ff fd48 	bl	800e7f0 <GetTimeOnAir>
 800ed60:	f8c8 0000 	str.w	r0, [r8]

    *txPower = txPowerLimited;
 800ed64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed68:	701a      	strb	r2, [r3, #0]
    return true;
#else
    return false;
#endif /* REGION_KR920 */
}
 800ed6a:	4628      	mov	r0, r5
 800ed6c:	b00d      	add	sp, #52	; 0x34
 800ed6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed72:	bf00      	nop
 800ed74:	08014248 	.word	0x08014248
 800ed78:	20001038 	.word	0x20001038
 800ed7c:	2000103c 	.word	0x2000103c
 800ed80:	08014230 	.word	0x08014230
 800ed84:	08014674 	.word	0x08014674

0800ed88 <RegionKR920LinkAdrReq>:

uint8_t RegionKR920LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800ed88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed8c:	b08f      	sub	sp, #60	; 0x3c
 800ed8e:	4607      	mov	r7, r0
 800ed90:	468b      	mov	fp, r1
 800ed92:	4692      	mov	sl, r2
 800ed94:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_KR920 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800ed96:	2500      	movs	r5, #0
 800ed98:	950c      	str	r5, [sp, #48]	; 0x30
 800ed9a:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800ed9e:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800eda2:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800eda6:	e02d      	b.n	800ee04 <RegionKR920LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < KR920_MAX_NB_CHANNELS; i++ )
 800eda8:	2400      	movs	r4, #0
        status = 0x07;
 800edaa:	f04f 0807 	mov.w	r8, #7
 800edae:	e00f      	b.n	800edd0 <RegionKR920LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800edb0:	4a56      	ldr	r2, [pc, #344]	; (800ef0c <RegionKR920LinkAdrReq+0x184>)
 800edb2:	6812      	ldr	r2, [r2, #0]
 800edb4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800edb8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800edbc:	b132      	cbz	r2, 800edcc <RegionKR920LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800edbe:	2201      	movs	r2, #1
 800edc0:	40a2      	lsls	r2, r4
 800edc2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800edc6:	430a      	orrs	r2, r1
 800edc8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < KR920_MAX_NB_CHANNELS; i++ )
 800edcc:	3401      	adds	r4, #1
 800edce:	b2e4      	uxtb	r4, r4
 800edd0:	2c0f      	cmp	r4, #15
 800edd2:	d817      	bhi.n	800ee04 <RegionKR920LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800edd4:	2b06      	cmp	r3, #6
 800edd6:	d0eb      	beq.n	800edb0 <RegionKR920LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800edd8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 800eddc:	4126      	asrs	r6, r4
 800edde:	f016 0f01 	tst.w	r6, #1
 800ede2:	d0f3      	beq.n	800edcc <RegionKR920LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800ede4:	4a49      	ldr	r2, [pc, #292]	; (800ef0c <RegionKR920LinkAdrReq+0x184>)
 800ede6:	6812      	ldr	r2, [r2, #0]
 800ede8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800edec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800edf0:	2a00      	cmp	r2, #0
 800edf2:	d1eb      	bne.n	800edcc <RegionKR920LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800edf4:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 800edf8:	e7e8      	b.n	800edcc <RegionKR920LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800edfa:	f04f 0806 	mov.w	r8, #6
 800edfe:	e001      	b.n	800ee04 <RegionKR920LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 800ee00:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ee04:	7a3b      	ldrb	r3, [r7, #8]
 800ee06:	42ab      	cmp	r3, r5
 800ee08:	d919      	bls.n	800ee3e <RegionKR920LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	a90c      	add	r1, sp, #48	; 0x30
 800ee0e:	4428      	add	r0, r5
 800ee10:	f7fe fc9a 	bl	800d748 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800ee14:	b198      	cbz	r0, 800ee3e <RegionKR920LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 800ee16:	4405      	add	r5, r0
 800ee18:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 800ee1a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800ee1e:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800ee22:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ee26:	b90b      	cbnz	r3, 800ee2c <RegionKR920LinkAdrReq+0xa4>
 800ee28:	2a00      	cmp	r2, #0
 800ee2a:	d0e6      	beq.n	800edfa <RegionKR920LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800ee2c:	1e5a      	subs	r2, r3, #1
 800ee2e:	b2d2      	uxtb	r2, r2
 800ee30:	2a04      	cmp	r2, #4
 800ee32:	d9e5      	bls.n	800ee00 <RegionKR920LinkAdrReq+0x78>
 800ee34:	2b06      	cmp	r3, #6
 800ee36:	d9b7      	bls.n	800eda8 <RegionKR920LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 800ee38:	f04f 0806 	mov.w	r8, #6
 800ee3c:	e7e2      	b.n	800ee04 <RegionKR920LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ee3e:	2302      	movs	r3, #2
 800ee40:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800ee44:	7a7b      	ldrb	r3, [r7, #9]
 800ee46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionKR920GetPhyParam( &getPhy );
 800ee4a:	a80a      	add	r0, sp, #40	; 0x28
 800ee4c:	f7ff fcee 	bl	800e82c <RegionKR920GetPhyParam>

    linkAdrVerifyParams.Status = status;
 800ee50:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800ee54:	7abb      	ldrb	r3, [r7, #10]
 800ee56:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800ee5a:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800ee5e:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800ee62:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800ee66:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800ee6a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ee6e:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800ee72:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ee76:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800ee7a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ee7e:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800ee82:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ee86:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = KR920_MAX_NB_CHANNELS;
 800ee8a:	2310      	movs	r3, #16
 800ee8c:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800ee90:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800ee94:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800ee96:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = KR920_TX_MAX_DATARATE;
 800ee9a:	2305      	movs	r3, #5
 800ee9c:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800eea0:	4b1a      	ldr	r3, [pc, #104]	; (800ef0c <RegionKR920LinkAdrReq+0x184>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	9307      	str	r3, [sp, #28]
    linkAdrVerifyParams.MinTxPower = KR920_MIN_TX_POWER;
 800eea6:	2307      	movs	r3, #7
 800eea8:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = KR920_MAX_TX_POWER;
 800eeac:	2300      	movs	r3, #0
 800eeae:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800eeb6:	ab0c      	add	r3, sp, #48	; 0x30
 800eeb8:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800eebc:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800eec0:	a801      	add	r0, sp, #4
 800eec2:	f7fe fc5d 	bl	800d780 <RegionCommonLinkAdrReqVerifyParams>
 800eec6:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800eec8:	2807      	cmp	r0, #7
 800eeca:	d011      	beq.n	800eef0 <RegionKR920LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800eecc:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800eed0:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 800eed4:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800eed8:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 800eedc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800eee0:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 800eee4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eee6:	701d      	strb	r5, [r3, #0]

#endif /* REGION_KR920 */
    return status;
}
 800eee8:	4620      	mov	r0, r4
 800eeea:	b00f      	add	sp, #60	; 0x3c
 800eeec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800eef0:	4e06      	ldr	r6, [pc, #24]	; (800ef0c <RegionKR920LinkAdrReq+0x184>)
 800eef2:	6830      	ldr	r0, [r6, #0]
 800eef4:	220c      	movs	r2, #12
 800eef6:	2100      	movs	r1, #0
 800eef8:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800eefc:	f001 fe6d 	bl	8010bda <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800ef00:	6833      	ldr	r3, [r6, #0]
 800ef02:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800ef06:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800ef0a:	e7df      	b.n	800eecc <RegionKR920LinkAdrReq+0x144>
 800ef0c:	2000103c 	.word	0x2000103c

0800ef10 <RegionKR920RxParamSetupReq>:

uint8_t RegionKR920RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800ef10:	b538      	push	{r3, r4, r5, lr}
 800ef12:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_KR920 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800ef14:	6840      	ldr	r0, [r0, #4]
 800ef16:	f7ff fc49 	bl	800e7ac <VerifyRfFreq>
 800ef1a:	b1a0      	cbz	r0, 800ef46 <RegionKR920RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 800ef1c:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, KR920_RX_MIN_DATARATE, KR920_RX_MAX_DATARATE ) == false )
 800ef1e:	2205      	movs	r2, #5
 800ef20:	2100      	movs	r1, #0
 800ef22:	f994 0000 	ldrsb.w	r0, [r4]
 800ef26:	f7fe faec 	bl	800d502 <RegionCommonValueInRange>
 800ef2a:	b908      	cbnz	r0, 800ef30 <RegionKR920RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800ef2c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, KR920_MIN_RX1_DR_OFFSET, KR920_MAX_RX1_DR_OFFSET ) == false )
 800ef30:	2205      	movs	r2, #5
 800ef32:	2100      	movs	r1, #0
 800ef34:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ef38:	f7fe fae3 	bl	800d502 <RegionCommonValueInRange>
 800ef3c:	b908      	cbnz	r0, 800ef42 <RegionKR920RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800ef3e:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_KR920 */
    return status;
}
 800ef42:	4628      	mov	r0, r5
 800ef44:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800ef46:	2506      	movs	r5, #6
 800ef48:	e7e9      	b.n	800ef1e <RegionKR920RxParamSetupReq+0xe>

0800ef4a <RegionKR920TxParamSetupReq>:

int8_t RegionKR920TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800ef4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef4e:	4770      	bx	lr

0800ef50 <RegionKR920DlChannelReq>:

int8_t RegionKR920DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800ef50:	b510      	push	{r4, lr}
 800ef52:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_KR920 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800ef54:	6840      	ldr	r0, [r0, #4]
 800ef56:	f7ff fc29 	bl	800e7ac <VerifyRfFreq>
 800ef5a:	b170      	cbz	r0, 800ef7a <RegionKR920DlChannelReq+0x2a>
    uint8_t status = 0x03;
 800ef5c:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800ef5e:	4b0b      	ldr	r3, [pc, #44]	; (800ef8c <RegionKR920DlChannelReq+0x3c>)
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	7823      	ldrb	r3, [r4, #0]
 800ef64:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800ef68:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800ef6c:	b909      	cbnz	r1, 800ef72 <RegionKR920DlChannelReq+0x22>
    {
        status &= 0xFD;
 800ef6e:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800ef72:	2803      	cmp	r0, #3
 800ef74:	d003      	beq.n	800ef7e <RegionKR920DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_KR920 */
    return status;
}
 800ef76:	b240      	sxtb	r0, r0
 800ef78:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800ef7a:	2002      	movs	r0, #2
 800ef7c:	e7ef      	b.n	800ef5e <RegionKR920DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800ef7e:	6861      	ldr	r1, [r4, #4]
 800ef80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ef84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ef88:	6059      	str	r1, [r3, #4]
 800ef8a:	e7f4      	b.n	800ef76 <RegionKR920DlChannelReq+0x26>
 800ef8c:	2000103c 	.word	0x2000103c

0800ef90 <RegionKR920AlternateDr>:
#if defined( REGION_KR920 )
    return currentDr;
#else
    return -1;
#endif /* REGION_KR920 */
}
 800ef90:	4770      	bx	lr
	...

0800ef94 <RegionKR920NextChannel>:

LoRaMacStatus_t RegionKR920NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800ef94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef98:	b097      	sub	sp, #92	; 0x5c
 800ef9a:	4604      	mov	r4, r0
 800ef9c:	4689      	mov	r9, r1
 800ef9e:	4616      	mov	r6, r2
 800efa0:	461d      	mov	r5, r3
#if defined( REGION_KR920 )
    uint8_t channelNext = 0;
    uint8_t nbEnabledChannels = 0;
 800efa2:	2100      	movs	r1, #0
 800efa4:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800efa8:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[KR920_MAX_NB_CHANNELS] = { 0 };
 800efac:	9111      	str	r1, [sp, #68]	; 0x44
 800efae:	9112      	str	r1, [sp, #72]	; 0x48
 800efb0:	9113      	str	r1, [sp, #76]	; 0x4c
 800efb2:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = KR920_JOIN_CHANNELS;
 800efb4:	2307      	movs	r3, #7
 800efb6:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800efba:	4b43      	ldr	r3, [pc, #268]	; (800f0c8 <RegionKR920NextChannel+0x134>)
 800efbc:	6818      	ldr	r0, [r3, #0]
 800efbe:	2201      	movs	r2, #1
 800efc0:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800efc4:	f7fe faf9 	bl	800d5ba <RegionCommonCountChannels>
 800efc8:	b938      	cbnz	r0, 800efda <RegionKR920NextChannel+0x46>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800efca:	4b3f      	ldr	r3, [pc, #252]	; (800f0c8 <RegionKR920NextChannel+0x134>)
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800efd2:	f043 0307 	orr.w	r3, r3, #7
 800efd6:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800efda:	7a63      	ldrb	r3, [r4, #9]
 800efdc:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800efe0:	7a23      	ldrb	r3, [r4, #8]
 800efe2:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800efe6:	4b38      	ldr	r3, [pc, #224]	; (800f0c8 <RegionKR920NextChannel+0x134>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800efee:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800eff0:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800eff2:	4b36      	ldr	r3, [pc, #216]	; (800f0cc <RegionKR920NextChannel+0x138>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = KR920_MAX_NB_CHANNELS;
 800eff8:	2310      	movs	r3, #16
 800effa:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800effe:	f10d 030a 	add.w	r3, sp, #10
 800f002:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800f004:	6823      	ldr	r3, [r4, #0]
 800f006:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800f008:	6863      	ldr	r3, [r4, #4]
 800f00a:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800f00c:	7aa3      	ldrb	r3, [r4, #10]
 800f00e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = KR920_MAX_NB_BANDS;
 800f012:	2301      	movs	r3, #1
 800f014:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800f018:	ab0c      	add	r3, sp, #48	; 0x30
 800f01a:	6921      	ldr	r1, [r4, #16]
 800f01c:	68e0      	ldr	r0, [r4, #12]
 800f01e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800f022:	7d23      	ldrb	r3, [r4, #20]
 800f024:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800f028:	8ae1      	ldrh	r1, [r4, #22]
 800f02a:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800f02e:	f7ff fbdf 	bl	800e7f0 <GetTimeOnAir>
 800f032:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800f034:	ab03      	add	r3, sp, #12
 800f036:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800f038:	9601      	str	r6, [sp, #4]
 800f03a:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800f03e:	9300      	str	r3, [sp, #0]
 800f040:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800f044:	aa11      	add	r2, sp, #68	; 0x44
 800f046:	4629      	mov	r1, r5
 800f048:	a809      	add	r0, sp, #36	; 0x24
 800f04a:	f7fe fca9 	bl	800d9a0 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800f04e:	4680      	mov	r8, r0
 800f050:	b128      	cbz	r0, 800f05e <RegionKR920NextChannel+0xca>
        }
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800f052:	280c      	cmp	r0, #12
 800f054:	d02f      	beq.n	800f0b6 <RegionKR920NextChannel+0x122>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_KR920 */
}
 800f056:	4640      	mov	r0, r8
 800f058:	b017      	add	sp, #92	; 0x5c
 800f05a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < KR920_MAX_NB_CHANNELS; i++ )
 800f05e:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800f062:	3901      	subs	r1, #1
 800f064:	f001 fd96 	bl	8010b94 <randr>
 800f068:	b2c4      	uxtb	r4, r0
 800f06a:	4645      	mov	r5, r8
 800f06c:	2d0f      	cmp	r5, #15
 800f06e:	d81f      	bhi.n	800f0b0 <RegionKR920NextChannel+0x11c>
            channelNext = enabledChannels[j];
 800f070:	ab16      	add	r3, sp, #88	; 0x58
 800f072:	4423      	add	r3, r4
 800f074:	f813 6c14 	ldrb.w	r6, [r3, #-20]
            j = ( j + 1 ) % nbEnabledChannels;
 800f078:	1c60      	adds	r0, r4, #1
 800f07a:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
 800f07e:	fb90 f4f3 	sdiv	r4, r0, r3
 800f082:	fb03 0414 	mls	r4, r3, r4, r0
 800f086:	b2e4      	uxtb	r4, r4
            if( Radio.IsChannelFree( RegionNvmGroup2->Channels[channelNext].Frequency, KR920_LBT_RX_BANDWIDTH, KR920_RSSI_FREE_TH, KR920_CARRIER_SENSE_TIME ) == true )
 800f088:	4b11      	ldr	r3, [pc, #68]	; (800f0d0 <RegionKR920NextChannel+0x13c>)
 800f08a:	691f      	ldr	r7, [r3, #16]
 800f08c:	4b0e      	ldr	r3, [pc, #56]	; (800f0c8 <RegionKR920NextChannel+0x134>)
 800f08e:	6818      	ldr	r0, [r3, #0]
 800f090:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 800f094:	2306      	movs	r3, #6
 800f096:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f09a:	490e      	ldr	r1, [pc, #56]	; (800f0d4 <RegionKR920NextChannel+0x140>)
 800f09c:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 800f0a0:	47b8      	blx	r7
 800f0a2:	b910      	cbnz	r0, 800f0aa <RegionKR920NextChannel+0x116>
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < KR920_MAX_NB_CHANNELS; i++ )
 800f0a4:	3501      	adds	r5, #1
 800f0a6:	b2ed      	uxtb	r5, r5
 800f0a8:	e7e0      	b.n	800f06c <RegionKR920NextChannel+0xd8>
                *channel = channelNext;
 800f0aa:	f889 6000 	strb.w	r6, [r9]
                return LORAMAC_STATUS_OK;
 800f0ae:	e7d2      	b.n	800f056 <RegionKR920NextChannel+0xc2>
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
 800f0b0:	f04f 080d 	mov.w	r8, #13
 800f0b4:	e7cf      	b.n	800f056 <RegionKR920NextChannel+0xc2>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f0b6:	4b04      	ldr	r3, [pc, #16]	; (800f0c8 <RegionKR920NextChannel+0x134>)
 800f0b8:	681a      	ldr	r2, [r3, #0]
 800f0ba:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f0be:	f043 0307 	orr.w	r3, r3, #7
 800f0c2:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800f0c6:	e7c6      	b.n	800f056 <RegionKR920NextChannel+0xc2>
 800f0c8:	2000103c 	.word	0x2000103c
 800f0cc:	20001038 	.word	0x20001038
 800f0d0:	08014674 	.word	0x08014674
 800f0d4:	00030d40 	.word	0x00030d40

0800f0d8 <RegionKR920ChannelAdd>:

LoRaMacStatus_t RegionKR920ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800f0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_KR920 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800f0da:	7905      	ldrb	r5, [r0, #4]

    if( id < KR920_NUMB_DEFAULT_CHANNELS )
 800f0dc:	2d02      	cmp	r5, #2
 800f0de:	d94b      	bls.n	800f178 <RegionKR920ChannelAdd+0xa0>
 800f0e0:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= KR920_MAX_NB_CHANNELS )
 800f0e2:	2d0f      	cmp	r5, #15
 800f0e4:	d84a      	bhi.n	800f17c <RegionKR920ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE ) == false )
 800f0e6:	6803      	ldr	r3, [r0, #0]
 800f0e8:	7a18      	ldrb	r0, [r3, #8]
 800f0ea:	f340 0003 	sbfx	r0, r0, #0, #4
 800f0ee:	2205      	movs	r2, #5
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	b240      	sxtb	r0, r0
 800f0f4:	f7fe fa05 	bl	800d502 <RegionCommonValueInRange>
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	d039      	beq.n	800f170 <RegionKR920ChannelAdd+0x98>
    bool drInvalid = false;
 800f0fc:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE ) == false )
 800f0fe:	6823      	ldr	r3, [r4, #0]
 800f100:	7a18      	ldrb	r0, [r3, #8]
 800f102:	f340 1003 	sbfx	r0, r0, #4, #4
 800f106:	2205      	movs	r2, #5
 800f108:	2100      	movs	r1, #0
 800f10a:	b240      	sxtb	r0, r0
 800f10c:	f7fe f9f9 	bl	800d502 <RegionCommonValueInRange>
 800f110:	b900      	cbnz	r0, 800f114 <RegionKR920ChannelAdd+0x3c>
    {
        drInvalid = true;
 800f112:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800f114:	6821      	ldr	r1, [r4, #0]
 800f116:	7a0b      	ldrb	r3, [r1, #8]
 800f118:	f343 0203 	sbfx	r2, r3, #0, #4
 800f11c:	b252      	sxtb	r2, r2
 800f11e:	f343 1303 	sbfx	r3, r3, #4, #4
 800f122:	b25b      	sxtb	r3, r3
 800f124:	429a      	cmp	r2, r3
 800f126:	dd00      	ble.n	800f12a <RegionKR920ChannelAdd+0x52>
    {
        drInvalid = true;
 800f128:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800f12a:	6808      	ldr	r0, [r1, #0]
 800f12c:	f7ff fb3e 	bl	800e7ac <VerifyRfFreq>
 800f130:	b300      	cbz	r0, 800f174 <RegionKR920ChannelAdd+0x9c>
    bool freqInvalid = false;
 800f132:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800f134:	b106      	cbz	r6, 800f138 <RegionKR920ChannelAdd+0x60>
 800f136:	bb1b      	cbnz	r3, 800f180 <RegionKR920ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800f138:	bb26      	cbnz	r6, 800f184 <RegionKR920ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800f13a:	bb2b      	cbnz	r3, 800f188 <RegionKR920ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800f13c:	4f13      	ldr	r7, [pc, #76]	; (800f18c <RegionKR920ChannelAdd+0xb4>)
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	006e      	lsls	r6, r5, #1
 800f142:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800f146:	220c      	movs	r2, #12
 800f148:	6821      	ldr	r1, [r4, #0]
 800f14a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f14e:	f001 fd2e 	bl	8010bae <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 800f152:	683a      	ldr	r2, [r7, #0]
 800f154:	442e      	add	r6, r5
 800f156:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f15a:	2000      	movs	r0, #0
 800f15c:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800f15e:	2301      	movs	r3, #1
 800f160:	fa03 f505 	lsl.w	r5, r3, r5
 800f164:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f168:	431d      	orrs	r5, r3
 800f16a:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800f16e:	e006      	b.n	800f17e <RegionKR920ChannelAdd+0xa6>
        drInvalid = true;
 800f170:	2601      	movs	r6, #1
 800f172:	e7c4      	b.n	800f0fe <RegionKR920ChannelAdd+0x26>
            freqInvalid = true;
 800f174:	2301      	movs	r3, #1
 800f176:	e7dd      	b.n	800f134 <RegionKR920ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f178:	2006      	movs	r0, #6
 800f17a:	e000      	b.n	800f17e <RegionKR920ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f17c:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_KR920 */
}
 800f17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f180:	2006      	movs	r0, #6
 800f182:	e7fc      	b.n	800f17e <RegionKR920ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800f184:	2005      	movs	r0, #5
 800f186:	e7fa      	b.n	800f17e <RegionKR920ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800f188:	2004      	movs	r0, #4
 800f18a:	e7f8      	b.n	800f17e <RegionKR920ChannelAdd+0xa6>
 800f18c:	2000103c 	.word	0x2000103c

0800f190 <RegionKR920ChannelsRemove>:

bool RegionKR920ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_KR920 )
    uint8_t id = channelRemove->ChannelId;
 800f190:	7801      	ldrb	r1, [r0, #0]

    if( id < KR920_NUMB_DEFAULT_CHANNELS )
 800f192:	2902      	cmp	r1, #2
 800f194:	d801      	bhi.n	800f19a <RegionKR920ChannelsRemove+0xa>
    {
        return false;
 800f196:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, KR920_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_KR920 */
}
 800f198:	4770      	bx	lr
{
 800f19a:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800f19c:	4b08      	ldr	r3, [pc, #32]	; (800f1c0 <RegionKR920ChannelsRemove+0x30>)
 800f19e:	6818      	ldr	r0, [r3, #0]
 800f1a0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800f1a4:	009c      	lsls	r4, r3, #2
 800f1a6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	5102      	str	r2, [r0, r4]
 800f1ae:	605a      	str	r2, [r3, #4]
 800f1b0:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, KR920_MAX_NB_CHANNELS );
 800f1b2:	2210      	movs	r2, #16
 800f1b4:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f1b8:	f7fe f9e5 	bl	800d586 <RegionCommonChanDisable>
}
 800f1bc:	bd10      	pop	{r4, pc}
 800f1be:	bf00      	nop
 800f1c0:	2000103c 	.word	0x2000103c

0800f1c4 <RegionKR920ApplyCFList>:
{
 800f1c4:	b570      	push	{r4, r5, r6, lr}
 800f1c6:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800f1c8:	2350      	movs	r3, #80	; 0x50
 800f1ca:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800f1ce:	7903      	ldrb	r3, [r0, #4]
 800f1d0:	2b10      	cmp	r3, #16
 800f1d2:	d135      	bne.n	800f240 <RegionKR920ApplyCFList+0x7c>
 800f1d4:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800f1d6:	6803      	ldr	r3, [r0, #0]
 800f1d8:	7bdd      	ldrb	r5, [r3, #15]
 800f1da:	2d00      	cmp	r5, #0
 800f1dc:	d130      	bne.n	800f240 <RegionKR920ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = KR920_NUMB_DEFAULT_CHANNELS; chanIdx < KR920_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f1de:	2403      	movs	r4, #3
 800f1e0:	e01a      	b.n	800f218 <RegionKR920ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800f1e2:	6832      	ldr	r2, [r6, #0]
 800f1e4:	5d53      	ldrb	r3, [r2, r5]
 800f1e6:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800f1e8:	442a      	add	r2, r5
 800f1ea:	7851      	ldrb	r1, [r2, #1]
 800f1ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f1f0:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800f1f2:	7892      	ldrb	r2, [r2, #2]
 800f1f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 800f1f8:	2264      	movs	r2, #100	; 0x64
 800f1fa:	fb02 f303 	mul.w	r3, r2, r3
 800f1fe:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800f200:	2300      	movs	r3, #0
 800f202:	9304      	str	r3, [sp, #16]
 800f204:	e011      	b.n	800f22a <RegionKR920ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 800f206:	f88d 4000 	strb.w	r4, [sp]
            RegionKR920ChannelsRemove( &channelRemove );
 800f20a:	4668      	mov	r0, sp
 800f20c:	f7ff ffc0 	bl	800f190 <RegionKR920ChannelsRemove>
    for( uint8_t i = 0, chanIdx = KR920_NUMB_DEFAULT_CHANNELS; chanIdx < KR920_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f210:	3503      	adds	r5, #3
 800f212:	b2ed      	uxtb	r5, r5
 800f214:	3401      	adds	r4, #1
 800f216:	b2e4      	uxtb	r4, r4
 800f218:	2c0f      	cmp	r4, #15
 800f21a:	d811      	bhi.n	800f240 <RegionKR920ApplyCFList+0x7c>
        if( chanIdx < ( KR920_NUMB_CHANNELS_CF_LIST + KR920_NUMB_DEFAULT_CHANNELS ) )
 800f21c:	2c07      	cmp	r4, #7
 800f21e:	d9e0      	bls.n	800f1e2 <RegionKR920ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800f220:	2300      	movs	r3, #0
 800f222:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800f224:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800f228:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800f22a:	9b03      	ldr	r3, [sp, #12]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d0ea      	beq.n	800f206 <RegionKR920ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 800f230:	ab03      	add	r3, sp, #12
 800f232:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800f234:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionKR920ChannelAdd( &channelAdd );
 800f238:	a801      	add	r0, sp, #4
 800f23a:	f7ff ff4d 	bl	800f0d8 <RegionKR920ChannelAdd>
 800f23e:	e7e7      	b.n	800f210 <RegionKR920ApplyCFList+0x4c>
}
 800f240:	b006      	add	sp, #24
 800f242:	bd70      	pop	{r4, r5, r6, pc}

0800f244 <RegionKR920NewChannelReq>:
{
 800f244:	b500      	push	{lr}
 800f246:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800f248:	6803      	ldr	r3, [r0, #0]
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	b952      	cbnz	r2, 800f264 <RegionKR920NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800f24e:	7903      	ldrb	r3, [r0, #4]
 800f250:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionKR920ChannelsRemove( &channelRemove ) == false )
 800f254:	a801      	add	r0, sp, #4
 800f256:	f7ff ff9b 	bl	800f190 <RegionKR920ChannelsRemove>
 800f25a:	b1d0      	cbz	r0, 800f292 <RegionKR920NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800f25c:	2003      	movs	r0, #3
}
 800f25e:	b005      	add	sp, #20
 800f260:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800f264:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800f266:	7903      	ldrb	r3, [r0, #4]
 800f268:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionKR920ChannelAdd( &channelAdd ) )
 800f26c:	a802      	add	r0, sp, #8
 800f26e:	f7ff ff33 	bl	800f0d8 <RegionKR920ChannelAdd>
 800f272:	2806      	cmp	r0, #6
 800f274:	d80b      	bhi.n	800f28e <RegionKR920NewChannelReq+0x4a>
 800f276:	e8df f000 	tbb	[pc, r0]
 800f27a:	0a04      	.short	0x0a04
 800f27c:	060e0a0a 	.word	0x060e0a0a
 800f280:	08          	.byte	0x08
 800f281:	00          	.byte	0x00
 800f282:	2003      	movs	r0, #3
 800f284:	e7eb      	b.n	800f25e <RegionKR920NewChannelReq+0x1a>
                status &= 0xFD;
 800f286:	2001      	movs	r0, #1
                break;
 800f288:	e7e9      	b.n	800f25e <RegionKR920NewChannelReq+0x1a>
                status &= 0xFC;
 800f28a:	2000      	movs	r0, #0
                break;
 800f28c:	e7e7      	b.n	800f25e <RegionKR920NewChannelReq+0x1a>
                status &= 0xFC;
 800f28e:	2000      	movs	r0, #0
                break;
 800f290:	e7e5      	b.n	800f25e <RegionKR920NewChannelReq+0x1a>
            status &= 0xFC;
 800f292:	2000      	movs	r0, #0
 800f294:	e7e3      	b.n	800f25e <RegionKR920NewChannelReq+0x1a>
                status &= 0xFE;
 800f296:	2002      	movs	r0, #2
 800f298:	e7e1      	b.n	800f25e <RegionKR920NewChannelReq+0x1a>
	...

0800f29c <RegionKR920SetContinuousWave>:

void RegionKR920SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800f29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a0:	4604      	mov	r4, r0
#if defined( REGION_KR920 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800f2a2:	4b1a      	ldr	r3, [pc, #104]	; (800f30c <RegionKR920SetContinuousWave+0x70>)
 800f2a4:	6819      	ldr	r1, [r3, #0]
 800f2a6:	4d1a      	ldr	r5, [pc, #104]	; (800f310 <RegionKR920SetContinuousWave+0x74>)
 800f2a8:	682b      	ldr	r3, [r5, #0]
 800f2aa:	7802      	ldrb	r2, [r0, #0]
 800f2ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f2b0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f2b4:	7a53      	ldrb	r3, [r2, #9]
 800f2b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f2ba:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800f2be:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800f2c2:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800f2c6:	f7fe fbd2 	bl	800da6e <RegionCommonLimitTxPower>
 800f2ca:	4606      	mov	r6, r0
    float maxEIRP = GetMaxEIRP( RegionNvmGroup2->Channels[continuousWave->Channel].Frequency );
 800f2cc:	682a      	ldr	r2, [r5, #0]
 800f2ce:	7823      	ldrb	r3, [r4, #0]
 800f2d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f2d4:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 800f2d8:	4640      	mov	r0, r8
 800f2da:	f7ff fa5d 	bl	800e798 <GetMaxEIRP>
 800f2de:	f7f3 fa79 	bl	80027d4 <__aeabi_i2f>
 800f2e2:	4605      	mov	r5, r0
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;

    // Take the minimum between the maxEIRP and continuousWave->MaxEirp.
    // The value of continuousWave->MaxEirp could have changed during runtime, e.g. due to a MAC command.
    maxEIRP = MIN( continuousWave->MaxEirp, maxEIRP );
 800f2e4:	6867      	ldr	r7, [r4, #4]
 800f2e6:	4601      	mov	r1, r0
 800f2e8:	4638      	mov	r0, r7
 800f2ea:	f7f3 fc65 	bl	8002bb8 <__aeabi_fcmplt>
 800f2ee:	b900      	cbnz	r0, 800f2f2 <RegionKR920SetContinuousWave+0x56>
 800f2f0:	462f      	mov	r7, r5

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, maxEIRP, continuousWave->AntennaGain );
 800f2f2:	68a2      	ldr	r2, [r4, #8]
 800f2f4:	4639      	mov	r1, r7
 800f2f6:	4630      	mov	r0, r6
 800f2f8:	f7fe fad6 	bl	800d8a8 <RegionCommonComputeTxPower>
 800f2fc:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800f2fe:	4b05      	ldr	r3, [pc, #20]	; (800f314 <RegionKR920SetContinuousWave+0x78>)
 800f300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f302:	89a2      	ldrh	r2, [r4, #12]
 800f304:	4640      	mov	r0, r8
 800f306:	4798      	blx	r3
#endif /* REGION_KR920 */
}
 800f308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f30c:	20001038 	.word	0x20001038
 800f310:	2000103c 	.word	0x2000103c
 800f314:	08014674 	.word	0x08014674

0800f318 <RegionKR920ApplyDrOffset>:

uint8_t RegionKR920ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_KR920 )
    int8_t datarate = dr - drOffset;
 800f318:	1a88      	subs	r0, r1, r2
 800f31a:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800f31c:	2800      	cmp	r0, #0
 800f31e:	db01      	blt.n	800f324 <RegionKR920ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_KR920 */
}
 800f320:	b2c0      	uxtb	r0, r0
 800f322:	4770      	bx	lr
        datarate = DR_0;
 800f324:	2000      	movs	r0, #0
 800f326:	e7fb      	b.n	800f320 <RegionKR920ApplyDrOffset+0x8>

0800f328 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800f328:	b510      	push	{r4, lr}
 800f32a:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800f32c:	4b10      	ldr	r3, [pc, #64]	; (800f370 <VerifyRfFreq+0x48>)
 800f32e:	6a1b      	ldr	r3, [r3, #32]
 800f330:	4798      	blx	r3
 800f332:	b1c8      	cbz	r0, 800f368 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800f334:	4b0f      	ldr	r3, [pc, #60]	; (800f374 <VerifyRfFreq+0x4c>)
 800f336:	4423      	add	r3, r4
 800f338:	4a0f      	ldr	r2, [pc, #60]	; (800f378 <VerifyRfFreq+0x50>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d813      	bhi.n	800f366 <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800f33e:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800f342:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800f346:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800f34a:	fba2 1203 	umull	r1, r2, r2, r3
 800f34e:	0c92      	lsrs	r2, r2, #18
 800f350:	490a      	ldr	r1, [pc, #40]	; (800f37c <VerifyRfFreq+0x54>)
 800f352:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800f356:	b942      	cbnz	r2, 800f36a <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800f358:	4b09      	ldr	r3, [pc, #36]	; (800f380 <VerifyRfFreq+0x58>)
 800f35a:	4423      	add	r3, r4
 800f35c:	4a09      	ldr	r2, [pc, #36]	; (800f384 <VerifyRfFreq+0x5c>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d902      	bls.n	800f368 <VerifyRfFreq+0x40>
    {
        return false;
 800f362:	2000      	movs	r0, #0
 800f364:	e000      	b.n	800f368 <VerifyRfFreq+0x40>
        return false;
 800f366:	2000      	movs	r0, #0
    }
    return true;
}
 800f368:	bd10      	pop	{r4, pc}
        return false;
 800f36a:	2000      	movs	r0, #0
 800f36c:	e7fc      	b.n	800f368 <VerifyRfFreq+0x40>
 800f36e:	bf00      	nop
 800f370:	08014674 	.word	0x08014674
 800f374:	c8f78f60 	.word	0xc8f78f60
 800f378:	00401640 	.word	0x00401640
 800f37c:	000927c0 	.word	0x000927c0
 800f380:	ca37fea0 	.word	0xca37fea0
 800f384:	01808580 	.word	0x01808580

0800f388 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800f388:	b570      	push	{r4, r5, r6, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800f38e:	4b0a      	ldr	r3, [pc, #40]	; (800f3b8 <GetTimeOnAir+0x30>)
 800f390:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800f392:	490a      	ldr	r1, [pc, #40]	; (800f3bc <GetTimeOnAir+0x34>)
 800f394:	f7fe fb70 	bl	800da78 <RegionCommonGetBandwidth>
 800f398:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800f39a:	4b09      	ldr	r3, [pc, #36]	; (800f3c0 <GetTimeOnAir+0x38>)
 800f39c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800f39e:	2001      	movs	r0, #1
 800f3a0:	9003      	str	r0, [sp, #12]
 800f3a2:	b2e4      	uxtb	r4, r4
 800f3a4:	9402      	str	r4, [sp, #8]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	9201      	str	r2, [sp, #4]
 800f3aa:	2208      	movs	r2, #8
 800f3ac:	9200      	str	r2, [sp, #0]
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	4632      	mov	r2, r6
 800f3b2:	47a8      	blx	r5
}
 800f3b4:	b004      	add	sp, #16
 800f3b6:	bd70      	pop	{r4, r5, r6, pc}
 800f3b8:	080142b4 	.word	0x080142b4
 800f3bc:	08014260 	.word	0x08014260
 800f3c0:	08014674 	.word	0x08014674

0800f3c4 <LimitTxPower>:
{
 800f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c6:	4606      	mov	r6, r0
 800f3c8:	4615      	mov	r5, r2
 800f3ca:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800f3cc:	f7fe fb4f 	bl	800da6e <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800f3d0:	2d04      	cmp	r5, #4
 800f3d2:	d105      	bne.n	800f3e0 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800f3d4:	4634      	mov	r4, r6
 800f3d6:	2e02      	cmp	r6, #2
 800f3d8:	bfb8      	it	lt
 800f3da:	2402      	movlt	r4, #2
}
 800f3dc:	4620      	mov	r0, r4
 800f3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3e0:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800f3e2:	2204      	movs	r2, #4
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	4638      	mov	r0, r7
 800f3e8:	f7fe f8e7 	bl	800d5ba <RegionCommonCountChannels>
 800f3ec:	2831      	cmp	r0, #49	; 0x31
 800f3ee:	d8f5      	bhi.n	800f3dc <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800f3f0:	4634      	mov	r4, r6
 800f3f2:	2e05      	cmp	r6, #5
 800f3f4:	bfb8      	it	lt
 800f3f6:	2405      	movlt	r4, #5
 800f3f8:	e7f0      	b.n	800f3dc <LimitTxPower+0x18>
	...

0800f3fc <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800f3fc:	b500      	push	{lr}
 800f3fe:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800f400:	2300      	movs	r3, #0
 800f402:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800f404:	7803      	ldrb	r3, [r0, #0]
 800f406:	3b01      	subs	r3, #1
 800f408:	2b38      	cmp	r3, #56	; 0x38
 800f40a:	d820      	bhi.n	800f44e <RegionUS915GetPhyParam+0x52>
 800f40c:	e8df f003 	tbb	[pc, r3]
 800f410:	1f1f1f1d 	.word	0x1f1f1f1d
 800f414:	1f1f1f1f 	.word	0x1f1f1f1f
 800f418:	3e3b1f1f 	.word	0x3e3b1f1f
 800f41c:	4d1f4741 	.word	0x4d1f4741
 800f420:	5d595551 	.word	0x5d595551
 800f424:	6e1f6561 	.word	0x6e1f6561
 800f428:	807a7471 	.word	0x807a7471
 800f42c:	871f1f83 	.word	0x871f1f83
 800f430:	1f1f238a 	.word	0x1f1f238a
 800f434:	1f1f1f1f 	.word	0x1f1f1f1f
 800f438:	1f1f1f1f 	.word	0x1f1f1f1f
 800f43c:	8d1f1f1f 	.word	0x8d1f1f1f
 800f440:	1fa19e94 	.word	0x1fa19e94
 800f444:	b1aeaba4 	.word	0xb1aeaba4
 800f448:	b7          	.byte	0xb7
 800f449:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800f44a:	2308      	movs	r3, #8
 800f44c:	9304      	str	r3, [sp, #16]
        }
    }

#endif /* REGION_US915 */
    return phyParam;
}
 800f44e:	9804      	ldr	r0, [sp, #16]
 800f450:	b007      	add	sp, #28
 800f452:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800f456:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f45a:	f88d 3004 	strb.w	r3, [sp, #4]
 800f45e:	2304      	movs	r3, #4
 800f460:	f88d 3005 	strb.w	r3, [sp, #5]
 800f464:	2300      	movs	r3, #0
 800f466:	f88d 3006 	strb.w	r3, [sp, #6]
 800f46a:	2348      	movs	r3, #72	; 0x48
 800f46c:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800f470:	4b46      	ldr	r3, [pc, #280]	; (800f58c <RegionUS915GetPhyParam+0x190>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f478:	9202      	str	r2, [sp, #8]
 800f47a:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800f47c:	a801      	add	r0, sp, #4
 800f47e:	f7fe fad7 	bl	800da30 <RegionCommonGetNextLowerTxDr>
 800f482:	9004      	str	r0, [sp, #16]
            break;
 800f484:	e7e3      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800f486:	2340      	movs	r3, #64	; 0x40
 800f488:	9304      	str	r3, [sp, #16]
            break;
 800f48a:	e7e0      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800f48c:	2320      	movs	r3, #32
 800f48e:	9304      	str	r3, [sp, #16]
            break;
 800f490:	e7dd      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800f492:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f496:	4a3e      	ldr	r2, [pc, #248]	; (800f590 <RegionUS915GetPhyParam+0x194>)
 800f498:	5cd3      	ldrb	r3, [r2, r3]
 800f49a:	9304      	str	r3, [sp, #16]
            break;
 800f49c:	e7d7      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800f49e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f4a2:	4a3c      	ldr	r2, [pc, #240]	; (800f594 <RegionUS915GetPhyParam+0x198>)
 800f4a4:	5cd3      	ldrb	r3, [r2, r3]
 800f4a6:	9304      	str	r3, [sp, #16]
            break;
 800f4a8:	e7d1      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800f4aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800f4ae:	9304      	str	r3, [sp, #16]
            break;
 800f4b0:	e7cd      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800f4b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f4b6:	9304      	str	r3, [sp, #16]
            break;
 800f4b8:	e7c9      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800f4ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f4be:	9304      	str	r3, [sp, #16]
            break;
 800f4c0:	e7c5      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800f4c2:	f241 3388 	movw	r3, #5000	; 0x1388
 800f4c6:	9304      	str	r3, [sp, #16]
            break;
 800f4c8:	e7c1      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800f4ca:	f241 7370 	movw	r3, #6000	; 0x1770
 800f4ce:	9304      	str	r3, [sp, #16]
            break;
 800f4d0:	e7bd      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800f4d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f4d6:	9304      	str	r3, [sp, #16]
            break;
 800f4d8:	e7b9      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800f4da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f4de:	482e      	ldr	r0, [pc, #184]	; (800f598 <RegionUS915GetPhyParam+0x19c>)
 800f4e0:	f001 fb58 	bl	8010b94 <randr>
 800f4e4:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800f4e8:	9004      	str	r0, [sp, #16]
            break;
 800f4ea:	e7b0      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800f4ec:	4b2b      	ldr	r3, [pc, #172]	; (800f59c <RegionUS915GetPhyParam+0x1a0>)
 800f4ee:	9304      	str	r3, [sp, #16]
            break;
 800f4f0:	e7ad      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_DR;
 800f4f2:	2308      	movs	r3, #8
 800f4f4:	9304      	str	r3, [sp, #16]
            break;
 800f4f6:	e7aa      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f4f8:	4b24      	ldr	r3, [pc, #144]	; (800f58c <RegionUS915GetPhyParam+0x190>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f500:	9304      	str	r3, [sp, #16]
            break;
 800f502:	e7a4      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800f504:	4b21      	ldr	r3, [pc, #132]	; (800f58c <RegionUS915GetPhyParam+0x190>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800f50c:	9304      	str	r3, [sp, #16]
            break;
 800f50e:	e79e      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800f510:	2348      	movs	r3, #72	; 0x48
 800f512:	9304      	str	r3, [sp, #16]
            break;
 800f514:	e79b      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800f516:	4b1d      	ldr	r3, [pc, #116]	; (800f58c <RegionUS915GetPhyParam+0x190>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	9304      	str	r3, [sp, #16]
            break;
 800f51c:	e797      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800f51e:	4b20      	ldr	r3, [pc, #128]	; (800f5a0 <RegionUS915GetPhyParam+0x1a4>)
 800f520:	9304      	str	r3, [sp, #16]
            break;
 800f522:	e794      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = 0;
 800f524:	2300      	movs	r3, #0
 800f526:	9304      	str	r3, [sp, #16]
            break;
 800f528:	e791      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800f52a:	4a1e      	ldr	r2, [pc, #120]	; (800f5a4 <RegionUS915GetPhyParam+0x1a8>)
 800f52c:	491b      	ldr	r1, [pc, #108]	; (800f59c <RegionUS915GetPhyParam+0x1a0>)
 800f52e:	7900      	ldrb	r0, [r0, #4]
 800f530:	f7fd ff1f 	bl	800d372 <RegionBaseUSCalcDownlinkFrequency>
 800f534:	9004      	str	r0, [sp, #16]
            break;
 800f536:	e78a      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800f538:	2317      	movs	r3, #23
 800f53a:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800f53e:	2305      	movs	r3, #5
 800f540:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800f544:	2303      	movs	r3, #3
 800f546:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800f54a:	e780      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800f54c:	2308      	movs	r3, #8
 800f54e:	9304      	str	r3, [sp, #16]
            break;
 800f550:	e77d      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800f552:	2308      	movs	r3, #8
 800f554:	9304      	str	r3, [sp, #16]
            break;
 800f556:	e77a      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800f558:	4a12      	ldr	r2, [pc, #72]	; (800f5a4 <RegionUS915GetPhyParam+0x1a8>)
 800f55a:	4910      	ldr	r1, [pc, #64]	; (800f59c <RegionUS915GetPhyParam+0x1a0>)
 800f55c:	7900      	ldrb	r0, [r0, #4]
 800f55e:	f7fd ff08 	bl	800d372 <RegionBaseUSCalcDownlinkFrequency>
 800f562:	9004      	str	r0, [sp, #16]
            break;
 800f564:	e773      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800f566:	2308      	movs	r3, #8
 800f568:	9304      	str	r3, [sp, #16]
            break;
 800f56a:	e770      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800f56c:	2308      	movs	r3, #8
 800f56e:	9304      	str	r3, [sp, #16]
            break;
 800f570:	e76d      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800f572:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f576:	4a0c      	ldr	r2, [pc, #48]	; (800f5a8 <RegionUS915GetPhyParam+0x1ac>)
 800f578:	5cd3      	ldrb	r3, [r2, r3]
 800f57a:	9304      	str	r3, [sp, #16]
            break;
 800f57c:	e767      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800f57e:	490b      	ldr	r1, [pc, #44]	; (800f5ac <RegionUS915GetPhyParam+0x1b0>)
 800f580:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800f584:	f7fe fa78 	bl	800da78 <RegionCommonGetBandwidth>
 800f588:	9004      	str	r0, [sp, #16]
            break;
 800f58a:	e760      	b.n	800f44e <RegionUS915GetPhyParam+0x52>
 800f58c:	20001044 	.word	0x20001044
 800f590:	080142d4 	.word	0x080142d4
 800f594:	080142c4 	.word	0x080142c4
 800f598:	fffffc18 	.word	0xfffffc18
 800f59c:	370870a0 	.word	0x370870a0
 800f5a0:	4200999a 	.word	0x4200999a
 800f5a4:	000927c0 	.word	0x000927c0
 800f5a8:	080142b4 	.word	0x080142b4
 800f5ac:	08014260 	.word	0x08014260

0800f5b0 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800f5b0:	b530      	push	{r4, r5, lr}
 800f5b2:	b083      	sub	sp, #12
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800f5b4:	4b0b      	ldr	r3, [pc, #44]	; (800f5e4 <RegionUS915SetBandTxDone+0x34>)
 800f5b6:	681d      	ldr	r5, [r3, #0]
 800f5b8:	4b0b      	ldr	r3, [pc, #44]	; (800f5e8 <RegionUS915SetBandTxDone+0x38>)
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	7803      	ldrb	r3, [r0, #0]
 800f5be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f5c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f5c6:	7a5b      	ldrb	r3, [r3, #9]
 800f5c8:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800f5cc:	6903      	ldr	r3, [r0, #16]
 800f5ce:	9300      	str	r3, [sp, #0]
 800f5d0:	68c3      	ldr	r3, [r0, #12]
 800f5d2:	7842      	ldrb	r2, [r0, #1]
 800f5d4:	6881      	ldr	r1, [r0, #8]
 800f5d6:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800f5da:	f7fe f815 	bl	800d608 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 800f5de:	b003      	add	sp, #12
 800f5e0:	bd30      	pop	{r4, r5, pc}
 800f5e2:	bf00      	nop
 800f5e4:	20001040 	.word	0x20001040
 800f5e8:	20001044 	.word	0x20001044

0800f5ec <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800f5ec:	b510      	push	{r4, lr}
 800f5ee:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	f8ad 3000 	strh.w	r3, [sp]
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	f88d 3002 	strb.w	r3, [sp, #2]
 800f5fc:	9301      	str	r3, [sp, #4]
 800f5fe:	9302      	str	r3, [sp, #8]
 800f600:	9303      	str	r3, [sp, #12]
 800f602:	9304      	str	r3, [sp, #16]
 800f604:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800f608:	7a04      	ldrb	r4, [r0, #8]
 800f60a:	b17c      	cbz	r4, 800f62c <RegionUS915InitDefaults+0x40>
 800f60c:	3c01      	subs	r4, #1
 800f60e:	b2e4      	uxtb	r4, r4
 800f610:	2c01      	cmp	r4, #1
 800f612:	f200 8082 	bhi.w	800f71a <RegionUS915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f616:	4b42      	ldr	r3, [pc, #264]	; (800f720 <RegionUS915InitDefaults+0x134>)
 800f618:	6818      	ldr	r0, [r3, #0]
 800f61a:	2206      	movs	r2, #6
 800f61c:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800f620:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f624:	f7fd ffdf 	bl	800d5e6 <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800f628:	2300      	movs	r3, #0
 800f62a:	e074      	b.n	800f716 <RegionUS915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800f62c:	6803      	ldr	r3, [r0, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d073      	beq.n	800f71a <RegionUS915InitDefaults+0x12e>
 800f632:	6842      	ldr	r2, [r0, #4]
 800f634:	2a00      	cmp	r2, #0
 800f636:	d070      	beq.n	800f71a <RegionUS915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800f638:	493a      	ldr	r1, [pc, #232]	; (800f724 <RegionUS915InitDefaults+0x138>)
 800f63a:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800f63c:	4938      	ldr	r1, [pc, #224]	; (800f720 <RegionUS915InitDefaults+0x134>)
 800f63e:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800f640:	2200      	movs	r2, #0
 800f642:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800f646:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800f64a:	2218      	movs	r2, #24
 800f64c:	4669      	mov	r1, sp
 800f64e:	4618      	mov	r0, r3
 800f650:	f001 faad 	bl	8010bae <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800f654:	e011      	b.n	800f67a <RegionUS915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800f656:	4b32      	ldr	r3, [pc, #200]	; (800f720 <RegionUS915InitDefaults+0x134>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	4a33      	ldr	r2, [pc, #204]	; (800f728 <RegionUS915InitDefaults+0x13c>)
 800f65c:	4933      	ldr	r1, [pc, #204]	; (800f72c <RegionUS915InitDefaults+0x140>)
 800f65e:	fb02 1204 	mla	r2, r2, r4, r1
 800f662:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800f666:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800f66a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800f66e:	2230      	movs	r2, #48	; 0x30
 800f670:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800f672:	2200      	movs	r2, #0
 800f674:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800f676:	3401      	adds	r4, #1
 800f678:	b2e4      	uxtb	r4, r4
 800f67a:	2c3f      	cmp	r4, #63	; 0x3f
 800f67c:	d9eb      	bls.n	800f656 <RegionUS915InitDefaults+0x6a>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800f67e:	2340      	movs	r3, #64	; 0x40
 800f680:	e013      	b.n	800f6aa <RegionUS915InitDefaults+0xbe>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800f682:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 800f686:	4a26      	ldr	r2, [pc, #152]	; (800f720 <RegionUS915InitDefaults+0x134>)
 800f688:	6812      	ldr	r2, [r2, #0]
 800f68a:	4c29      	ldr	r4, [pc, #164]	; (800f730 <RegionUS915InitDefaults+0x144>)
 800f68c:	4829      	ldr	r0, [pc, #164]	; (800f734 <RegionUS915InitDefaults+0x148>)
 800f68e:	fb04 0101 	mla	r1, r4, r1, r0
 800f692:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800f696:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800f69a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800f69e:	2144      	movs	r1, #68	; 0x44
 800f6a0:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	2b47      	cmp	r3, #71	; 0x47
 800f6ac:	d9e9      	bls.n	800f682 <RegionUS915InitDefaults+0x96>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800f6ae:	4c1c      	ldr	r4, [pc, #112]	; (800f720 <RegionUS915InitDefaults+0x134>)
 800f6b0:	6820      	ldr	r0, [r4, #0]
 800f6b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6b6:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800f6ba:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800f6be:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800f6c2:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800f6c6:	23ff      	movs	r3, #255	; 0xff
 800f6c8:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f6d2:	2206      	movs	r2, #6
 800f6d4:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800f6d8:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f6dc:	f7fd ff83 	bl	800d5e6 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800f6e0:	4b10      	ldr	r3, [pc, #64]	; (800f724 <RegionUS915InitDefaults+0x138>)
 800f6e2:	6818      	ldr	r0, [r3, #0]
 800f6e4:	6821      	ldr	r1, [r4, #0]
 800f6e6:	2206      	movs	r2, #6
 800f6e8:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800f6ec:	3090      	adds	r0, #144	; 0x90
 800f6ee:	f7fd ff7a 	bl	800d5e6 <RegionCommonChanMaskCopy>
            break;
 800f6f2:	e012      	b.n	800f71a <RegionUS915InitDefaults+0x12e>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800f6f4:	4a0b      	ldr	r2, [pc, #44]	; (800f724 <RegionUS915InitDefaults+0x138>)
 800f6f6:	6811      	ldr	r1, [r2, #0]
 800f6f8:	4a09      	ldr	r2, [pc, #36]	; (800f720 <RegionUS915InitDefaults+0x134>)
 800f6fa:	6812      	ldr	r2, [r2, #0]
 800f6fc:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800f700:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800f704:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800f708:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 800f70c:	4022      	ands	r2, r4
 800f70e:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800f712:	3301      	adds	r3, #1
 800f714:	b2db      	uxtb	r3, r3
 800f716:	2b05      	cmp	r3, #5
 800f718:	d9ec      	bls.n	800f6f4 <RegionUS915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800f71a:	b006      	add	sp, #24
 800f71c:	bd10      	pop	{r4, pc}
 800f71e:	bf00      	nop
 800f720:	20001044 	.word	0x20001044
 800f724:	20001040 	.word	0x20001040
 800f728:	00030d40 	.word	0x00030d40
 800f72c:	35c80160 	.word	0x35c80160
 800f730:	00186a00 	.word	0x00186a00
 800f734:	35d2afc0 	.word	0x35d2afc0

0800f738 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800f738:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800f73a:	290a      	cmp	r1, #10
 800f73c:	d829      	bhi.n	800f792 <RegionUS915Verify+0x5a>
 800f73e:	e8df f001 	tbb	[pc, r1]
 800f742:	2806      	.short	0x2806
 800f744:	0a282828 	.word	0x0a282828
 800f748:	1e28140a 	.word	0x1e28140a
 800f74c:	1e          	.byte	0x1e
 800f74d:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800f74e:	6800      	ldr	r0, [r0, #0]
 800f750:	f7ff fdea 	bl	800f328 <VerifyRfFreq>
 800f754:	e01e      	b.n	800f794 <RegionUS915Verify+0x5c>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800f756:	2204      	movs	r2, #4
 800f758:	2100      	movs	r1, #0
 800f75a:	f990 0000 	ldrsb.w	r0, [r0]
 800f75e:	f7fd fed0 	bl	800d502 <RegionCommonValueInRange>
 800f762:	3800      	subs	r0, #0
 800f764:	bf18      	it	ne
 800f766:	2001      	movne	r0, #1
 800f768:	e014      	b.n	800f794 <RegionUS915Verify+0x5c>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800f76a:	220d      	movs	r2, #13
 800f76c:	2108      	movs	r1, #8
 800f76e:	f990 0000 	ldrsb.w	r0, [r0]
 800f772:	f7fd fec6 	bl	800d502 <RegionCommonValueInRange>
 800f776:	3800      	subs	r0, #0
 800f778:	bf18      	it	ne
 800f77a:	2001      	movne	r0, #1
 800f77c:	e00a      	b.n	800f794 <RegionUS915Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800f77e:	220e      	movs	r2, #14
 800f780:	2100      	movs	r1, #0
 800f782:	f990 0000 	ldrsb.w	r0, [r0]
 800f786:	f7fd febc 	bl	800d502 <RegionCommonValueInRange>
 800f78a:	3800      	subs	r0, #0
 800f78c:	bf18      	it	ne
 800f78e:	2001      	movne	r0, #1
 800f790:	e000      	b.n	800f794 <RegionUS915Verify+0x5c>
{
 800f792:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800f794:	bd08      	pop	{r3, pc}
	...

0800f798 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800f798:	7903      	ldrb	r3, [r0, #4]
 800f79a:	2b10      	cmp	r3, #16
 800f79c:	d134      	bne.n	800f808 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800f79e:	6803      	ldr	r3, [r0, #0]
 800f7a0:	7bdb      	ldrb	r3, [r3, #15]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d130      	bne.n	800f808 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	4613      	mov	r3, r2
 800f7aa:	2a04      	cmp	r2, #4
 800f7ac:	d82b      	bhi.n	800f806 <RegionUS915ApplyCFList+0x6e>
{
 800f7ae:	b4f0      	push	{r4, r5, r6, r7}
 800f7b0:	e014      	b.n	800f7dc <RegionUS915ApplyCFList+0x44>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800f7b2:	b2e4      	uxtb	r4, r4
 800f7b4:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800f7b8:	4c14      	ldr	r4, [pc, #80]	; (800f80c <RegionUS915ApplyCFList+0x74>)
 800f7ba:	6826      	ldr	r6, [r4, #0]
 800f7bc:	f501 74d8 	add.w	r4, r1, #432	; 0x1b0
 800f7c0:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 800f7c4:	3148      	adds	r1, #72	; 0x48
 800f7c6:	f836 5011 	ldrh.w	r5, [r6, r1, lsl #1]
 800f7ca:	402c      	ands	r4, r5
 800f7cc:	f826 4011 	strh.w	r4, [r6, r1, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	b2db      	uxtb	r3, r3
 800f7d4:	3202      	adds	r2, #2
 800f7d6:	b2d2      	uxtb	r2, r2
 800f7d8:	2b04      	cmp	r3, #4
 800f7da:	d812      	bhi.n	800f802 <RegionUS915ApplyCFList+0x6a>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800f7dc:	6804      	ldr	r4, [r0, #0]
 800f7de:	490c      	ldr	r1, [pc, #48]	; (800f810 <RegionUS915ApplyCFList+0x78>)
 800f7e0:	680d      	ldr	r5, [r1, #0]
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	5ca4      	ldrb	r4, [r4, r2]
 800f7e6:	f503 77d8 	add.w	r7, r3, #432	; 0x1b0
 800f7ea:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800f7ee:	6806      	ldr	r6, [r0, #0]
 800f7f0:	4416      	add	r6, r2
 800f7f2:	7876      	ldrb	r6, [r6, #1]
 800f7f4:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800f7f8:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        if( chMaskItr == 4 )
 800f7fc:	2b04      	cmp	r3, #4
 800f7fe:	d1db      	bne.n	800f7b8 <RegionUS915ApplyCFList+0x20>
 800f800:	e7d7      	b.n	800f7b2 <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800f802:	bcf0      	pop	{r4, r5, r6, r7}
 800f804:	4770      	bx	lr
 800f806:	4770      	bx	lr
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	20001040 	.word	0x20001040
 800f810:	20001044 	.word	0x20001044

0800f814 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800f814:	b570      	push	{r4, r5, r6, lr}
 800f816:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800f818:	2204      	movs	r2, #4
 800f81a:	2100      	movs	r1, #0
 800f81c:	6800      	ldr	r0, [r0, #0]
 800f81e:	f7fd fecc 	bl	800d5ba <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800f822:	2801      	cmp	r0, #1
 800f824:	d033      	beq.n	800f88e <RegionUS915ChanMaskSet+0x7a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800f826:	792c      	ldrb	r4, [r5, #4]
 800f828:	b11c      	cbz	r4, 800f832 <RegionUS915ChanMaskSet+0x1e>
 800f82a:	2c01      	cmp	r4, #1
 800f82c:	d025      	beq.n	800f87a <RegionUS915ChanMaskSet+0x66>
 800f82e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800f830:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f832:	4e18      	ldr	r6, [pc, #96]	; (800f894 <RegionUS915ChanMaskSet+0x80>)
 800f834:	6830      	ldr	r0, [r6, #0]
 800f836:	2206      	movs	r2, #6
 800f838:	6829      	ldr	r1, [r5, #0]
 800f83a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f83e:	f7fd fed2 	bl	800d5e6 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800f842:	6835      	ldr	r5, [r6, #0]
 800f844:	f895 3374 	ldrb.w	r3, [r5, #884]	; 0x374
 800f848:	f8a5 3374 	strh.w	r3, [r5, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800f84c:	2300      	movs	r3, #0
 800f84e:	f8a5 3376 	strh.w	r3, [r5, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800f852:	2c05      	cmp	r4, #5
 800f854:	d80f      	bhi.n	800f876 <RegionUS915ChanMaskSet+0x62>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800f856:	4b10      	ldr	r3, [pc, #64]	; (800f898 <RegionUS915ChanMaskSet+0x84>)
 800f858:	681a      	ldr	r2, [r3, #0]
 800f85a:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 800f85e:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800f862:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800f866:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800f86a:	4003      	ands	r3, r0
 800f86c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800f870:	3401      	adds	r4, #1
 800f872:	b2e4      	uxtb	r4, r4
 800f874:	e7ed      	b.n	800f852 <RegionUS915ChanMaskSet+0x3e>
    return true;
 800f876:	2001      	movs	r0, #1
 800f878:	e7da      	b.n	800f830 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f87a:	4b06      	ldr	r3, [pc, #24]	; (800f894 <RegionUS915ChanMaskSet+0x80>)
 800f87c:	6818      	ldr	r0, [r3, #0]
 800f87e:	2206      	movs	r2, #6
 800f880:	6829      	ldr	r1, [r5, #0]
 800f882:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 800f886:	f7fd feae 	bl	800d5e6 <RegionCommonChanMaskCopy>
    return true;
 800f88a:	2001      	movs	r0, #1
            break;
 800f88c:	e7d0      	b.n	800f830 <RegionUS915ChanMaskSet+0x1c>
        return false;
 800f88e:	2000      	movs	r0, #0
 800f890:	e7ce      	b.n	800f830 <RegionUS915ChanMaskSet+0x1c>
 800f892:	bf00      	nop
 800f894:	20001044 	.word	0x20001044
 800f898:	20001040 	.word	0x20001040

0800f89c <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800f89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f89e:	b083      	sub	sp, #12
 800f8a0:	460e      	mov	r6, r1
 800f8a2:	4617      	mov	r7, r2
 800f8a4:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800f8a6:	280d      	cmp	r0, #13
 800f8a8:	bfa8      	it	ge
 800f8aa:	200d      	movge	r0, #13
 800f8ac:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800f8ae:	4d0f      	ldr	r5, [pc, #60]	; (800f8ec <RegionUS915ComputeRxWindowParameters+0x50>)
 800f8b0:	4629      	mov	r1, r5
 800f8b2:	f7fe f8e1 	bl	800da78 <RegionCommonGetBandwidth>
 800f8b6:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800f8b8:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800f8bc:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800f8c0:	4a0b      	ldr	r2, [pc, #44]	; (800f8f0 <RegionUS915ComputeRxWindowParameters+0x54>)
 800f8c2:	5cd0      	ldrb	r0, [r2, r3]
 800f8c4:	f7fd ffa8 	bl	800d818 <RegionCommonComputeSymbolTimeLoRa>
 800f8c8:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800f8ca:	4b0a      	ldr	r3, [pc, #40]	; (800f8f4 <RegionUS915ComputeRxWindowParameters+0x58>)
 800f8cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8ce:	4798      	blx	r3
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	f104 020c 	add.w	r2, r4, #12
 800f8d6:	9201      	str	r2, [sp, #4]
 800f8d8:	3408      	adds	r4, #8
 800f8da:	9400      	str	r4, [sp, #0]
 800f8dc:	463a      	mov	r2, r7
 800f8de:	4631      	mov	r1, r6
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	f7fd ffa7 	bl	800d834 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800f8e6:	b003      	add	sp, #12
 800f8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8ea:	bf00      	nop
 800f8ec:	08014260 	.word	0x08014260
 800f8f0:	080142b4 	.word	0x080142b4
 800f8f4:	08014674 	.word	0x08014674

0800f8f8 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800f8f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8fc:	b08b      	sub	sp, #44	; 0x2c
 800f8fe:	4604      	mov	r4, r0
 800f900:	460e      	mov	r6, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800f902:	f990 7001 	ldrsb.w	r7, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800f906:	6845      	ldr	r5, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800f908:	4b22      	ldr	r3, [pc, #136]	; (800f994 <RegionUS915RxConfig+0x9c>)
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	4798      	blx	r3
 800f90e:	2800      	cmp	r0, #0
 800f910:	d13d      	bne.n	800f98e <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800f912:	7ce3      	ldrb	r3, [r4, #19]
 800f914:	b933      	cbnz	r3, 800f924 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800f916:	7825      	ldrb	r5, [r4, #0]
 800f918:	f005 0507 	and.w	r5, r5, #7
 800f91c:	4a1e      	ldr	r2, [pc, #120]	; (800f998 <RegionUS915RxConfig+0xa0>)
 800f91e:	4b1f      	ldr	r3, [pc, #124]	; (800f99c <RegionUS915RxConfig+0xa4>)
 800f920:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800f924:	4b1e      	ldr	r3, [pc, #120]	; (800f9a0 <RegionUS915RxConfig+0xa8>)
 800f926:	f913 9007 	ldrsb.w	r9, [r3, r7]

    Radio.SetChannel( frequency );
 800f92a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800f994 <RegionUS915RxConfig+0x9c>
 800f92e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f932:	4628      	mov	r0, r5
 800f934:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800f936:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800f93a:	7ca3      	ldrb	r3, [r4, #18]
 800f93c:	9309      	str	r3, [sp, #36]	; 0x24
 800f93e:	2001      	movs	r0, #1
 800f940:	9008      	str	r0, [sp, #32]
 800f942:	2200      	movs	r2, #0
 800f944:	9207      	str	r2, [sp, #28]
 800f946:	9206      	str	r2, [sp, #24]
 800f948:	9205      	str	r2, [sp, #20]
 800f94a:	9204      	str	r2, [sp, #16]
 800f94c:	9203      	str	r2, [sp, #12]
 800f94e:	8923      	ldrh	r3, [r4, #8]
 800f950:	9302      	str	r3, [sp, #8]
 800f952:	2308      	movs	r3, #8
 800f954:	9301      	str	r3, [sp, #4]
 800f956:	9200      	str	r2, [sp, #0]
 800f958:	4603      	mov	r3, r0
 800f95a:	464a      	mov	r2, r9
 800f95c:	78a1      	ldrb	r1, [r4, #2]
 800f95e:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800f960:	7c63      	ldrb	r3, [r4, #17]
 800f962:	b18b      	cbz	r3, 800f988 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800f964:	4b0f      	ldr	r3, [pc, #60]	; (800f9a4 <RegionUS915RxConfig+0xac>)
 800f966:	5dd9      	ldrb	r1, [r3, r7]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800f968:	4b0a      	ldr	r3, [pc, #40]	; (800f994 <RegionUS915RxConfig+0x9c>)
 800f96a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f96c:	310d      	adds	r1, #13
 800f96e:	b2c9      	uxtb	r1, r1
 800f970:	2001      	movs	r0, #1
 800f972:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800f974:	463a      	mov	r2, r7
 800f976:	4629      	mov	r1, r5
 800f978:	7ce0      	ldrb	r0, [r4, #19]
 800f97a:	f7fe f88f 	bl	800da9c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800f97e:	7037      	strb	r7, [r6, #0]
    return true;
 800f980:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800f982:	b00b      	add	sp, #44	; 0x2c
 800f984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800f988:	4b07      	ldr	r3, [pc, #28]	; (800f9a8 <RegionUS915RxConfig+0xb0>)
 800f98a:	5dd9      	ldrb	r1, [r3, r7]
 800f98c:	e7ec      	b.n	800f968 <RegionUS915RxConfig+0x70>
        return false;
 800f98e:	2000      	movs	r0, #0
 800f990:	e7f7      	b.n	800f982 <RegionUS915RxConfig+0x8a>
 800f992:	bf00      	nop
 800f994:	08014674 	.word	0x08014674
 800f998:	000927c0 	.word	0x000927c0
 800f99c:	370870a0 	.word	0x370870a0
 800f9a0:	080142b4 	.word	0x080142b4
 800f9a4:	080142c4 	.word	0x080142c4
 800f9a8:	080142d4 	.word	0x080142d4

0800f9ac <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800f9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b0:	b08d      	sub	sp, #52	; 0x34
 800f9b2:	4604      	mov	r4, r0
 800f9b4:	910b      	str	r1, [sp, #44]	; 0x2c
 800f9b6:	4690      	mov	r8, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800f9b8:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800f9bc:	4b32      	ldr	r3, [pc, #200]	; (800fa88 <RegionUS915TxConfig+0xdc>)
 800f9be:	f913 b002 	ldrsb.w	fp, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800f9c2:	4b32      	ldr	r3, [pc, #200]	; (800fa8c <RegionUS915TxConfig+0xe0>)
 800f9c4:	6818      	ldr	r0, [r3, #0]
 800f9c6:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800fa98 <RegionUS915TxConfig+0xec>
 800f9ca:	f8da 3000 	ldr.w	r3, [sl]
 800f9ce:	7821      	ldrb	r1, [r4, #0]
 800f9d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f9d4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f9d8:	7a49      	ldrb	r1, [r1, #9]
 800f9da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f9de:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f9e2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f9e6:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800f9ea:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800f9ee:	f7ff fce9 	bl	800f3c4 <LimitTxPower>
 800f9f2:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800f9f4:	4926      	ldr	r1, [pc, #152]	; (800fa90 <RegionUS915TxConfig+0xe4>)
 800f9f6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f9fa:	f7fe f83d 	bl	800da78 <RegionCommonGetBandwidth>
 800f9fe:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800fa00:	2200      	movs	r2, #0
 800fa02:	4924      	ldr	r1, [pc, #144]	; (800fa94 <RegionUS915TxConfig+0xe8>)
 800fa04:	4630      	mov	r0, r6
 800fa06:	f7fd ff4f 	bl	800d8a8 <RegionCommonComputeTxPower>
 800fa0a:	4607      	mov	r7, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800fa0c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800fa9c <RegionUS915TxConfig+0xf0>
 800fa10:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800fa14:	f8da 1000 	ldr.w	r1, [sl]
 800fa18:	7823      	ldrb	r3, [r4, #0]
 800fa1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fa1e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800fa22:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800fa24:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800fa28:	9308      	str	r3, [sp, #32]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	9207      	str	r2, [sp, #28]
 800fa2e:	9206      	str	r2, [sp, #24]
 800fa30:	9205      	str	r2, [sp, #20]
 800fa32:	2501      	movs	r5, #1
 800fa34:	9504      	str	r5, [sp, #16]
 800fa36:	9203      	str	r2, [sp, #12]
 800fa38:	2308      	movs	r3, #8
 800fa3a:	9302      	str	r3, [sp, #8]
 800fa3c:	9501      	str	r5, [sp, #4]
 800fa3e:	f8cd b000 	str.w	fp, [sp]
 800fa42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa44:	4639      	mov	r1, r7
 800fa46:	4628      	mov	r0, r5
 800fa48:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800fa4c:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800fa4e:	f8da 2000 	ldr.w	r2, [sl]
 800fa52:	7823      	ldrb	r3, [r4, #0]
 800fa54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fa58:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800fa5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fa60:	f7fe f84c 	bl	800dafc <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800fa64:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800fa68:	7b21      	ldrb	r1, [r4, #12]
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800fa6e:	89a1      	ldrh	r1, [r4, #12]
 800fa70:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800fa74:	f7ff fc88 	bl	800f388 <GetTimeOnAir>
 800fa78:	f8c8 0000 	str.w	r0, [r8]

    *txPower = txPowerLimited;
 800fa7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa7e:	701e      	strb	r6, [r3, #0]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800fa80:	4628      	mov	r0, r5
 800fa82:	b00d      	add	sp, #52	; 0x34
 800fa84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa88:	080142b4 	.word	0x080142b4
 800fa8c:	20001040 	.word	0x20001040
 800fa90:	08014260 	.word	0x08014260
 800fa94:	41f00000 	.word	0x41f00000
 800fa98:	20001044 	.word	0x20001044
 800fa9c:	08014674 	.word	0x08014674

0800faa0 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800faa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800faa4:	b091      	sub	sp, #68	; 0x44
 800faa6:	4606      	mov	r6, r0
 800faa8:	4689      	mov	r9, r1
 800faaa:	4690      	mov	r8, r2
 800faac:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800faae:	2400      	movs	r4, #0
 800fab0:	940e      	str	r4, [sp, #56]	; 0x38
 800fab2:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 800fab6:	940b      	str	r4, [sp, #44]	; 0x2c
 800fab8:	940c      	str	r4, [sp, #48]	; 0x30
 800faba:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800fabc:	4b95      	ldr	r3, [pc, #596]	; (800fd14 <RegionUS915LinkAdrReq+0x274>)
 800fabe:	6819      	ldr	r1, [r3, #0]
 800fac0:	2206      	movs	r2, #6
 800fac2:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800fac6:	a80b      	add	r0, sp, #44	; 0x2c
 800fac8:	f7fd fd8d 	bl	800d5e6 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800facc:	e00d      	b.n	800faea <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800face:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fad2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800fad6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800fada:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800fade:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800fae2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800fae6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800faea:	7a33      	ldrb	r3, [r6, #8]
 800faec:	42a3      	cmp	r3, r4
 800faee:	d978      	bls.n	800fbe2 <RegionUS915LinkAdrReq+0x142>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800faf0:	6870      	ldr	r0, [r6, #4]
 800faf2:	a90e      	add	r1, sp, #56	; 0x38
 800faf4:	4420      	add	r0, r4
 800faf6:	f7fd fe27 	bl	800d748 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800fafa:	2800      	cmp	r0, #0
 800fafc:	d071      	beq.n	800fbe2 <RegionUS915LinkAdrReq+0x142>
        bytesProcessed += nextIndex;
 800fafe:	4404      	add	r4, r0
 800fb00:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800fb02:	f89d 503b 	ldrb.w	r5, [sp, #59]	; 0x3b
 800fb06:	2d06      	cmp	r5, #6
 800fb08:	d0e1      	beq.n	800face <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800fb0a:	2d07      	cmp	r5, #7
 800fb0c:	d009      	beq.n	800fb22 <RegionUS915LinkAdrReq+0x82>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800fb0e:	2d05      	cmp	r5, #5
 800fb10:	d064      	beq.n	800fbdc <RegionUS915LinkAdrReq+0x13c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800fb12:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800fb16:	aa10      	add	r2, sp, #64	; 0x40
 800fb18:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 800fb1c:	f825 3c14 	strh.w	r3, [r5, #-20]
 800fb20:	e7e3      	b.n	800faea <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800fb22:	2300      	movs	r3, #0
 800fb24:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800fb28:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800fb2c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800fb30:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800fb34:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800fb38:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800fb3c:	e7d5      	b.n	800faea <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800fb3e:	aa10      	add	r2, sp, #64	; 0x40
 800fb40:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800fb44:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fb48:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800fb4c:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800fb50:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fb54:	4313      	orrs	r3, r2
 800fb56:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800fb5a:	3101      	adds	r1, #1
 800fb5c:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800fb5e:	3501      	adds	r5, #1
 800fb60:	b2ed      	uxtb	r5, r5
 800fb62:	2d07      	cmp	r5, #7
 800fb64:	d8c1      	bhi.n	800faea <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800fb66:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	40ab      	lsls	r3, r5
 800fb6e:	421a      	tst	r2, r3
 800fb70:	d011      	beq.n	800fb96 <RegionUS915LinkAdrReq+0xf6>
                    if( ( i % 2 ) == 0 )
 800fb72:	f015 0f01 	tst.w	r5, #1
 800fb76:	d1e2      	bne.n	800fb3e <RegionUS915LinkAdrReq+0x9e>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800fb78:	aa10      	add	r2, sp, #64	; 0x40
 800fb7a:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800fb7e:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fb82:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800fb86:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800fb8a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fb8e:	4313      	orrs	r3, r2
 800fb90:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800fb94:	e7e3      	b.n	800fb5e <RegionUS915LinkAdrReq+0xbe>
                    if( ( i % 2 ) == 0 )
 800fb96:	f015 0f01 	tst.w	r5, #1
 800fb9a:	d10f      	bne.n	800fbbc <RegionUS915LinkAdrReq+0x11c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800fb9c:	aa10      	add	r2, sp, #64	; 0x40
 800fb9e:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800fba2:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fba6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800fbaa:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800fbae:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fbb2:	ea22 0303 	bic.w	r3, r2, r3
 800fbb6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800fbba:	e7d0      	b.n	800fb5e <RegionUS915LinkAdrReq+0xbe>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800fbbc:	aa10      	add	r2, sp, #64	; 0x40
 800fbbe:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800fbc2:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800fbc6:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800fbca:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fbce:	ea22 0303 	bic.w	r3, r2, r3
 800fbd2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800fbd6:	3101      	adds	r1, #1
 800fbd8:	b2c9      	uxtb	r1, r1
 800fbda:	e7c0      	b.n	800fb5e <RegionUS915LinkAdrReq+0xbe>
            for( uint8_t i = 0; i <= 7; i++ )
 800fbdc:	2500      	movs	r5, #0
            uint8_t cntChannelMask = 0;
 800fbde:	4629      	mov	r1, r5
 800fbe0:	e7bf      	b.n	800fb62 <RegionUS915LinkAdrReq+0xc2>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800fbe2:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800fbe6:	2b03      	cmp	r3, #3
 800fbe8:	dd58      	ble.n	800fc9c <RegionUS915LinkAdrReq+0x1fc>
 800fbea:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800fbec:	2302      	movs	r3, #2
 800fbee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800fbf2:	7a73      	ldrb	r3, [r6, #9]
 800fbf4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800fbf8:	a809      	add	r0, sp, #36	; 0x24
 800fbfa:	f7ff fbff 	bl	800f3fc <RegionUS915GetPhyParam>
 800fbfe:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800fc00:	f88d 5004 	strb.w	r5, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800fc04:	7ab3      	ldrb	r3, [r6, #10]
 800fc06:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800fc0a:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800fc0e:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800fc12:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800fc16:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800fc1a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800fc1e:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800fc22:	f996 300b 	ldrsb.w	r3, [r6, #11]
 800fc26:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800fc2a:	f996 300c 	ldrsb.w	r3, [r6, #12]
 800fc2e:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800fc32:	f996 300d 	ldrsb.w	r3, [r6, #13]
 800fc36:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800fc3a:	2348      	movs	r3, #72	; 0x48
 800fc3c:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800fc40:	ab0b      	add	r3, sp, #44	; 0x2c
 800fc42:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800fc44:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800fc48:	2304      	movs	r3, #4
 800fc4a:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800fc4e:	4b31      	ldr	r3, [pc, #196]	; (800fd14 <RegionUS915LinkAdrReq+0x274>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800fc54:	230e      	movs	r3, #14
 800fc56:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800fc60:	6833      	ldr	r3, [r6, #0]
 800fc62:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800fc64:	ab0e      	add	r3, sp, #56	; 0x38
 800fc66:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800fc6a:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800fc6e:	4668      	mov	r0, sp
 800fc70:	f7fd fd86 	bl	800d780 <RegionCommonLinkAdrReqVerifyParams>
 800fc74:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800fc76:	2807      	cmp	r0, #7
 800fc78:	d01b      	beq.n	800fcb2 <RegionUS915LinkAdrReq+0x212>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800fc7a:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800fc7e:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800fc82:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800fc86:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800fc8a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800fc8e:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800fc90:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fc92:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800fc94:	4628      	mov	r0, r5
 800fc96:	b011      	add	sp, #68	; 0x44
 800fc98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800fc9c:	2204      	movs	r2, #4
 800fc9e:	2100      	movs	r1, #0
 800fca0:	a80b      	add	r0, sp, #44	; 0x2c
 800fca2:	f7fd fc8a 	bl	800d5ba <RegionCommonCountChannels>
 800fca6:	2801      	cmp	r0, #1
 800fca8:	d901      	bls.n	800fcae <RegionUS915LinkAdrReq+0x20e>
 800fcaa:	2507      	movs	r5, #7
 800fcac:	e79e      	b.n	800fbec <RegionUS915LinkAdrReq+0x14c>
        status &= 0xFE; // Channel mask KO
 800fcae:	2506      	movs	r5, #6
 800fcb0:	e79c      	b.n	800fbec <RegionUS915LinkAdrReq+0x14c>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800fcb2:	4e18      	ldr	r6, [pc, #96]	; (800fd14 <RegionUS915LinkAdrReq+0x274>)
 800fcb4:	6830      	ldr	r0, [r6, #0]
 800fcb6:	2206      	movs	r2, #6
 800fcb8:	a90b      	add	r1, sp, #44	; 0x2c
 800fcba:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800fcbe:	f7fd fc92 	bl	800d5e6 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800fcc2:	4b15      	ldr	r3, [pc, #84]	; (800fd18 <RegionUS915LinkAdrReq+0x278>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	6832      	ldr	r2, [r6, #0]
 800fcc8:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 800fccc:	f8b3 0090 	ldrh.w	r0, [r3, #144]	; 0x90
 800fcd0:	4001      	ands	r1, r0
 800fcd2:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800fcd6:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 800fcda:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
 800fcde:	4001      	ands	r1, r0
 800fce0:	f8a3 1092 	strh.w	r1, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800fce4:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 800fce8:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
 800fcec:	4001      	ands	r1, r0
 800fcee:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800fcf2:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 800fcf6:	f8b3 0096 	ldrh.w	r0, [r3, #150]	; 0x96
 800fcfa:	4001      	ands	r1, r0
 800fcfc:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800fd00:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 800fd04:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800fd08:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 800fd0c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800fd10:	e7b3      	b.n	800fc7a <RegionUS915LinkAdrReq+0x1da>
 800fd12:	bf00      	nop
 800fd14:	20001044 	.word	0x20001044
 800fd18:	20001040 	.word	0x20001040

0800fd1c <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800fd1c:	b538      	push	{r3, r4, r5, lr}
 800fd1e:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800fd20:	6840      	ldr	r0, [r0, #4]
 800fd22:	f7ff fb01 	bl	800f328 <VerifyRfFreq>
 800fd26:	b310      	cbz	r0, 800fd6e <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800fd28:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800fd2a:	220d      	movs	r2, #13
 800fd2c:	2108      	movs	r1, #8
 800fd2e:	f994 0000 	ldrsb.w	r0, [r4]
 800fd32:	f7fd fbe6 	bl	800d502 <RegionCommonValueInRange>
 800fd36:	b908      	cbnz	r0, 800fd3c <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800fd38:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800fd3c:	2207      	movs	r2, #7
 800fd3e:	2105      	movs	r1, #5
 800fd40:	f994 0000 	ldrsb.w	r0, [r4]
 800fd44:	f7fd fbdd 	bl	800d502 <RegionCommonValueInRange>
 800fd48:	2801      	cmp	r0, #1
 800fd4a:	d003      	beq.n	800fd54 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800fd4c:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800fd50:	2b0d      	cmp	r3, #13
 800fd52:	dd01      	ble.n	800fd58 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800fd54:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800fd58:	2203      	movs	r2, #3
 800fd5a:	2100      	movs	r1, #0
 800fd5c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800fd60:	f7fd fbcf 	bl	800d502 <RegionCommonValueInRange>
 800fd64:	b908      	cbnz	r0, 800fd6a <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800fd66:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800fd6e:	2506      	movs	r5, #6
 800fd70:	e7db      	b.n	800fd2a <RegionUS915RxParamSetupReq+0xe>

0800fd72 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800fd72:	f04f 30ff 	mov.w	r0, #4294967295
 800fd76:	4770      	bx	lr

0800fd78 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800fd78:	f04f 30ff 	mov.w	r0, #4294967295
 800fd7c:	4770      	bx	lr

0800fd7e <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800fd7e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd82:	4770      	bx	lr

0800fd84 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800fd84:	b9b1      	cbnz	r1, 800fdb4 <RegionUS915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800fd86:	4b10      	ldr	r3, [pc, #64]	; (800fdc8 <RegionUS915AlternateDr+0x44>)
 800fd88:	681a      	ldr	r2, [r3, #0]
 800fd8a:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800fd8e:	3301      	adds	r3, #1
 800fd90:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800fd94:	4b0c      	ldr	r3, [pc, #48]	; (800fdc8 <RegionUS915AlternateDr+0x44>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 800fd9c:	4b0b      	ldr	r3, [pc, #44]	; (800fdcc <RegionUS915AlternateDr+0x48>)
 800fd9e:	fba3 1302 	umull	r1, r3, r3, r2
 800fda2:	085b      	lsrs	r3, r3, #1
 800fda4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800fda8:	1ad3      	subs	r3, r2, r3
 800fdaa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fdae:	d009      	beq.n	800fdc4 <RegionUS915AlternateDr+0x40>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800fdb0:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800fdb2:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800fdb4:	4b04      	ldr	r3, [pc, #16]	; (800fdc8 <RegionUS915AlternateDr+0x44>)
 800fdb6:	681a      	ldr	r2, [r3, #0]
 800fdb8:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800fdbc:	3b01      	subs	r3, #1
 800fdbe:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 800fdc2:	e7e7      	b.n	800fd94 <RegionUS915AlternateDr+0x10>
        currentDr = DR_4;
 800fdc4:	2004      	movs	r0, #4
 800fdc6:	4770      	bx	lr
 800fdc8:	20001040 	.word	0x20001040
 800fdcc:	38e38e39 	.word	0x38e38e39

0800fdd0 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800fdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdd4:	b0a4      	sub	sp, #144	; 0x90
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	460e      	mov	r6, r1
 800fdda:	4690      	mov	r8, r2
 800fddc:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800fdde:	2500      	movs	r5, #0
 800fde0:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800fde4:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800fde8:	9511      	str	r5, [sp, #68]	; 0x44
 800fdea:	2244      	movs	r2, #68	; 0x44
 800fdec:	4629      	mov	r1, r5
 800fdee:	a812      	add	r0, sp, #72	; 0x48
 800fdf0:	f003 fe2a 	bl	8013a48 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800fdf4:	4b4c      	ldr	r3, [pc, #304]	; (800ff28 <RegionUS915NextChannel+0x158>)
 800fdf6:	6818      	ldr	r0, [r3, #0]
 800fdf8:	2204      	movs	r2, #4
 800fdfa:	4629      	mov	r1, r5
 800fdfc:	3090      	adds	r0, #144	; 0x90
 800fdfe:	f7fd fbdc 	bl	800d5ba <RegionCommonCountChannels>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	d05c      	beq.n	800fec0 <RegionUS915NextChannel+0xf0>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800fe06:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800fe0a:	2b03      	cmp	r3, #3
 800fe0c:	dd0a      	ble.n	800fe24 <RegionUS915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800fe0e:	4b46      	ldr	r3, [pc, #280]	; (800ff28 <RegionUS915NextChannel+0x158>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 800fe16:	b92a      	cbnz	r2, 800fe24 <RegionUS915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800fe18:	4a44      	ldr	r2, [pc, #272]	; (800ff2c <RegionUS915NextChannel+0x15c>)
 800fe1a:	6812      	ldr	r2, [r2, #0]
 800fe1c:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 800fe20:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800fe24:	7a63      	ldrb	r3, [r4, #9]
 800fe26:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800fe2a:	7a23      	ldrb	r3, [r4, #8]
 800fe2c:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800fe30:	4b3d      	ldr	r3, [pc, #244]	; (800ff28 <RegionUS915NextChannel+0x158>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800fe38:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800fe3a:	4a3c      	ldr	r2, [pc, #240]	; (800ff2c <RegionUS915NextChannel+0x15c>)
 800fe3c:	6812      	ldr	r2, [r2, #0]
 800fe3e:	9205      	str	r2, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800fe40:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800fe42:	2348      	movs	r3, #72	; 0x48
 800fe44:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800fe4c:	6823      	ldr	r3, [r4, #0]
 800fe4e:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800fe50:	6863      	ldr	r3, [r4, #4]
 800fe52:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800fe54:	7aa3      	ldrb	r3, [r4, #10]
 800fe56:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800fe60:	ab0c      	add	r3, sp, #48	; 0x30
 800fe62:	6921      	ldr	r1, [r4, #16]
 800fe64:	68e0      	ldr	r0, [r4, #12]
 800fe66:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800fe6a:	7d23      	ldrb	r3, [r4, #20]
 800fe6c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800fe70:	8ae1      	ldrh	r1, [r4, #22]
 800fe72:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800fe76:	f7ff fa87 	bl	800f388 <GetTimeOnAir>
 800fe7a:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800fe7c:	ab03      	add	r3, sp, #12
 800fe7e:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800fe80:	f8cd 8004 	str.w	r8, [sp, #4]
 800fe84:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800fe88:	9300      	str	r3, [sp, #0]
 800fe8a:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800fe8e:	aa11      	add	r2, sp, #68	; 0x44
 800fe90:	4639      	mov	r1, r7
 800fe92:	a809      	add	r0, sp, #36	; 0x24
 800fe94:	f7fd fd84 	bl	800d9a0 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800fe98:	4605      	mov	r5, r0
 800fe9a:	2800      	cmp	r0, #0
 800fe9c:	d13f      	bne.n	800ff1e <RegionUS915NextChannel+0x14e>
    {
        if( nextChanParams->Joined == true )
 800fe9e:	7a63      	ldrb	r3, [r4, #9]
 800fea0:	b9eb      	cbnz	r3, 800fede <RegionUS915NextChannel+0x10e>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800fea2:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800fea6:	b32b      	cbz	r3, 800fef4 <RegionUS915NextChannel+0x124>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800fea8:	4603      	mov	r3, r0
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800feaa:	4a1f      	ldr	r2, [pc, #124]	; (800ff28 <RegionUS915NextChannel+0x158>)
 800feac:	6812      	ldr	r2, [r2, #0]
 800feae:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
 800feb2:	411a      	asrs	r2, r3
 800feb4:	f012 0f01 	tst.w	r2, #1
 800feb8:	d128      	bne.n	800ff0c <RegionUS915NextChannel+0x13c>
                {
                    i++;
 800feba:	3301      	adds	r3, #1
 800febc:	b2db      	uxtb	r3, r3
 800febe:	e7f4      	b.n	800feaa <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800fec0:	4d19      	ldr	r5, [pc, #100]	; (800ff28 <RegionUS915NextChannel+0x158>)
 800fec2:	6828      	ldr	r0, [r5, #0]
 800fec4:	4b19      	ldr	r3, [pc, #100]	; (800ff2c <RegionUS915NextChannel+0x15c>)
 800fec6:	6819      	ldr	r1, [r3, #0]
 800fec8:	2204      	movs	r2, #4
 800feca:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800fece:	3090      	adds	r0, #144	; 0x90
 800fed0:	f7fd fb89 	bl	800d5e6 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800fed4:	682b      	ldr	r3, [r5, #0]
 800fed6:	2200      	movs	r2, #0
 800fed8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800fedc:	e793      	b.n	800fe06 <RegionUS915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800fede:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800fee2:	3901      	subs	r1, #1
 800fee4:	f000 fe56 	bl	8010b94 <randr>
 800fee8:	ab24      	add	r3, sp, #144	; 0x90
 800feea:	4418      	add	r0, r3
 800feec:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800fef0:	7033      	strb	r3, [r6, #0]
 800fef2:	e00d      	b.n	800ff10 <RegionUS915NextChannel+0x140>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800fef4:	4b0c      	ldr	r3, [pc, #48]	; (800ff28 <RegionUS915NextChannel+0x158>)
 800fef6:	6818      	ldr	r0, [r3, #0]
 800fef8:	4632      	mov	r2, r6
 800fefa:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 800fefe:	3090      	adds	r0, #144	; 0x90
 800ff00:	f7fd f9eb 	bl	800d2da <RegionBaseUSComputeNext125kHzJoinChannel>
 800ff04:	2803      	cmp	r0, #3
 800ff06:	d103      	bne.n	800ff10 <RegionUS915NextChannel+0x140>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800ff08:	4605      	mov	r5, r0
 800ff0a:	e008      	b.n	800ff1e <RegionUS915NextChannel+0x14e>
                }
                *channel = 64 + i;
 800ff0c:	3340      	adds	r3, #64	; 0x40
 800ff0e:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800ff10:	4b05      	ldr	r3, [pc, #20]	; (800ff28 <RegionUS915NextChannel+0x158>)
 800ff12:	6818      	ldr	r0, [r3, #0]
 800ff14:	2248      	movs	r2, #72	; 0x48
 800ff16:	7831      	ldrb	r1, [r6, #0]
 800ff18:	3090      	adds	r0, #144	; 0x90
 800ff1a:	f7fd fb34 	bl	800d586 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800ff1e:	4628      	mov	r0, r5
 800ff20:	b024      	add	sp, #144	; 0x90
 800ff22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff26:	bf00      	nop
 800ff28:	20001040 	.word	0x20001040
 800ff2c:	20001044 	.word	0x20001044

0800ff30 <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800ff30:	b538      	push	{r3, r4, r5, lr}
 800ff32:	4604      	mov	r4, r0
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 800ff34:	4b14      	ldr	r3, [pc, #80]	; (800ff88 <RegionUS915SetContinuousWave+0x58>)
 800ff36:	6819      	ldr	r1, [r3, #0]
 800ff38:	4d14      	ldr	r5, [pc, #80]	; (800ff8c <RegionUS915SetContinuousWave+0x5c>)
 800ff3a:	682b      	ldr	r3, [r5, #0]
 800ff3c:	7802      	ldrb	r2, [r0, #0]
 800ff3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ff42:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ff46:	7a52      	ldrb	r2, [r2, #9]
 800ff48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ff4c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ff50:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ff54:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800ff58:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800ff5c:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800ff60:	f7ff fa30 	bl	800f3c4 <LimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800ff64:	682a      	ldr	r2, [r5, #0]
 800ff66:	7823      	ldrb	r3, [r4, #0]
 800ff68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ff6c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800ff70:	2200      	movs	r2, #0
 800ff72:	4907      	ldr	r1, [pc, #28]	; (800ff90 <RegionUS915SetContinuousWave+0x60>)
 800ff74:	f7fd fc98 	bl	800d8a8 <RegionCommonComputeTxPower>
 800ff78:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800ff7a:	4b06      	ldr	r3, [pc, #24]	; (800ff94 <RegionUS915SetContinuousWave+0x64>)
 800ff7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff7e:	89a2      	ldrh	r2, [r4, #12]
 800ff80:	4628      	mov	r0, r5
 800ff82:	4798      	blx	r3
#endif /* REGION_US915 */
}
 800ff84:	bd38      	pop	{r3, r4, r5, pc}
 800ff86:	bf00      	nop
 800ff88:	20001040 	.word	0x20001040
 800ff8c:	20001044 	.word	0x20001044
 800ff90:	41f00000 	.word	0x41f00000
 800ff94:	08014674 	.word	0x08014674

0800ff98 <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800ff98:	4b04      	ldr	r3, [pc, #16]	; (800ffac <RegionUS915ApplyDrOffset+0x14>)
 800ff9a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800ff9e:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	db01      	blt.n	800ffa8 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800ffa4:	b2c0      	uxtb	r0, r0
 800ffa6:	4770      	bx	lr
        datarate = DR_0;
 800ffa8:	2000      	movs	r0, #0
 800ffaa:	e7fb      	b.n	800ffa4 <RegionUS915ApplyDrOffset+0xc>
 800ffac:	080142a0 	.word	0x080142a0

0800ffb0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ffb0:	b510      	push	{r4, lr}
 800ffb2:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800ffb4:	2210      	movs	r2, #16
 800ffb6:	2100      	movs	r1, #0
 800ffb8:	30f1      	adds	r0, #241	; 0xf1
 800ffba:	f000 fe0e 	bl	8010bda <memset1>
    ctx->M_n = 0;
 800ffbe:	2100      	movs	r1, #0
 800ffc0:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ffc4:	22f0      	movs	r2, #240	; 0xf0
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	f000 fe07 	bl	8010bda <memset1>
}
 800ffcc:	bd10      	pop	{r4, pc}

0800ffce <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ffce:	b508      	push	{r3, lr}
 800ffd0:	4602      	mov	r2, r0
 800ffd2:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ffd4:	2110      	movs	r1, #16
 800ffd6:	f000 fb05 	bl	80105e4 <lorawan_aes_set_key>
}
 800ffda:	bd08      	pop	{r3, pc}

0800ffdc <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ffdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffe0:	b085      	sub	sp, #20
 800ffe2:	4607      	mov	r7, r0
 800ffe4:	4688      	mov	r8, r1
 800ffe6:	4691      	mov	r9, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ffe8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d04b      	beq.n	8010088 <AES_CMAC_Update+0xac>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800fff0:	f1c3 0510 	rsb	r5, r3, #16
 800fff4:	462c      	mov	r4, r5
 800fff6:	4295      	cmp	r5, r2
 800fff8:	bf28      	it	cs
 800fffa:	4614      	movcs	r4, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800fffc:	f200 1001 	addw	r0, r0, #257	; 0x101
 8010000:	b2a2      	uxth	r2, r4
 8010002:	4418      	add	r0, r3
 8010004:	f000 fdd3 	bl	8010bae <memcpy1>
        ctx->M_n += mlen;
 8010008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801000c:	4423      	add	r3, r4
 801000e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8010012:	2b0f      	cmp	r3, #15
 8010014:	d951      	bls.n	80100ba <AES_CMAC_Update+0xde>
 8010016:	454d      	cmp	r5, r9
 8010018:	d24f      	bcs.n	80100ba <AES_CMAC_Update+0xde>
            return;
        XOR( ctx->M_last, ctx->X );
 801001a:	2300      	movs	r3, #0
 801001c:	e008      	b.n	8010030 <AES_CMAC_Update+0x54>
 801001e:	18fa      	adds	r2, r7, r3
 8010020:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 8010024:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 8010028:	4041      	eors	r1, r0
 801002a:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 801002e:	3301      	adds	r3, #1
 8010030:	2b0f      	cmp	r3, #15
 8010032:	ddf4      	ble.n	801001e <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8010034:	f107 05f1 	add.w	r5, r7, #241	; 0xf1
 8010038:	2210      	movs	r2, #16
 801003a:	4629      	mov	r1, r5
 801003c:	4668      	mov	r0, sp
 801003e:	f000 fdb6 	bl	8010bae <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8010042:	463a      	mov	r2, r7
 8010044:	4669      	mov	r1, sp
 8010046:	4668      	mov	r0, sp
 8010048:	f000 fb56 	bl	80106f8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801004c:	2210      	movs	r2, #16
 801004e:	4669      	mov	r1, sp
 8010050:	4628      	mov	r0, r5
 8010052:	f000 fdac 	bl	8010bae <memcpy1>

        data += mlen;
 8010056:	44a0      	add	r8, r4
        len -= mlen;
 8010058:	eba9 0904 	sub.w	r9, r9, r4
 801005c:	e014      	b.n	8010088 <AES_CMAC_Update+0xac>
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801005e:	f107 04f1 	add.w	r4, r7, #241	; 0xf1
 8010062:	2210      	movs	r2, #16
 8010064:	4621      	mov	r1, r4
 8010066:	4668      	mov	r0, sp
 8010068:	f000 fda1 	bl	8010bae <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801006c:	463a      	mov	r2, r7
 801006e:	4669      	mov	r1, sp
 8010070:	4668      	mov	r0, sp
 8010072:	f000 fb41 	bl	80106f8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8010076:	2210      	movs	r2, #16
 8010078:	4669      	mov	r1, sp
 801007a:	4620      	mov	r0, r4
 801007c:	f000 fd97 	bl	8010bae <memcpy1>

        data += 16;
 8010080:	f108 0810 	add.w	r8, r8, #16
        len -= 16;
 8010084:	f1a9 0910 	sub.w	r9, r9, #16
    while( len > 16 )
 8010088:	f1b9 0f10 	cmp.w	r9, #16
 801008c:	d90c      	bls.n	80100a8 <AES_CMAC_Update+0xcc>
        XOR( data, ctx->X );
 801008e:	2300      	movs	r3, #0
 8010090:	2b0f      	cmp	r3, #15
 8010092:	dce4      	bgt.n	801005e <AES_CMAC_Update+0x82>
 8010094:	18fd      	adds	r5, r7, r3
 8010096:	f895 40f1 	ldrb.w	r4, [r5, #241]	; 0xf1
 801009a:	f818 6003 	ldrb.w	r6, [r8, r3]
 801009e:	4074      	eors	r4, r6
 80100a0:	f885 40f1 	strb.w	r4, [r5, #241]	; 0xf1
 80100a4:	3301      	adds	r3, #1
 80100a6:	e7f3      	b.n	8010090 <AES_CMAC_Update+0xb4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 80100a8:	fa1f f289 	uxth.w	r2, r9
 80100ac:	4641      	mov	r1, r8
 80100ae:	f207 1001 	addw	r0, r7, #257	; 0x101
 80100b2:	f000 fd7c 	bl	8010bae <memcpy1>
    ctx->M_n = len;
 80100b6:	f8c7 9114 	str.w	r9, [r7, #276]	; 0x114
}
 80100ba:	b005      	add	sp, #20
 80100bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080100c0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 80100c0:	b570      	push	{r4, r5, r6, lr}
 80100c2:	b088      	sub	sp, #32
 80100c4:	4606      	mov	r6, r0
 80100c6:	460d      	mov	r5, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 80100c8:	2210      	movs	r2, #16
 80100ca:	2100      	movs	r1, #0
 80100cc:	eb0d 0002 	add.w	r0, sp, r2
 80100d0:	f000 fd83 	bl	8010bda <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 80100d4:	462a      	mov	r2, r5
 80100d6:	a904      	add	r1, sp, #16
 80100d8:	4608      	mov	r0, r1
 80100da:	f000 fb0d 	bl	80106f8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 80100de:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	db19      	blt.n	801011a <AES_CMAC_Final+0x5a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 80100e6:	2300      	movs	r3, #0
 80100e8:	e026      	b.n	8010138 <AES_CMAC_Final+0x78>
        LSHIFT( K, K );
 80100ea:	aa08      	add	r2, sp, #32
 80100ec:	18d1      	adds	r1, r2, r3
 80100ee:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80100f2:	3301      	adds	r3, #1
 80100f4:	441a      	add	r2, r3
 80100f6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80100fa:	09d2      	lsrs	r2, r2, #7
 80100fc:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8010100:	f801 2c10 	strb.w	r2, [r1, #-16]
 8010104:	2b0e      	cmp	r3, #14
 8010106:	ddf0      	ble.n	80100ea <AES_CMAC_Final+0x2a>
 8010108:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801010c:	005b      	lsls	r3, r3, #1
 801010e:	b2db      	uxtb	r3, r3
        K[15] ^= 0x87;
 8010110:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8010114:	f88d 301f 	strb.w	r3, [sp, #31]
 8010118:	e015      	b.n	8010146 <AES_CMAC_Final+0x86>
        LSHIFT( K, K );
 801011a:	2300      	movs	r3, #0
 801011c:	e7f2      	b.n	8010104 <AES_CMAC_Final+0x44>
        LSHIFT( K, K );
 801011e:	aa08      	add	r2, sp, #32
 8010120:	18d1      	adds	r1, r2, r3
 8010122:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8010126:	3301      	adds	r3, #1
 8010128:	441a      	add	r2, r3
 801012a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801012e:	09d2      	lsrs	r2, r2, #7
 8010130:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8010134:	f801 2c10 	strb.w	r2, [r1, #-16]
 8010138:	2b0e      	cmp	r3, #14
 801013a:	ddf0      	ble.n	801011e <AES_CMAC_Final+0x5e>
 801013c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010140:	005b      	lsls	r3, r3, #1
 8010142:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 8010146:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
 801014a:	2810      	cmp	r0, #16
 801014c:	d014      	beq.n	8010178 <AES_CMAC_Final+0xb8>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 801014e:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8010152:	2b00      	cmp	r3, #0
 8010154:	db1f      	blt.n	8010196 <AES_CMAC_Final+0xd6>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 8010156:	2300      	movs	r3, #0
 8010158:	2b0e      	cmp	r3, #14
 801015a:	dc36      	bgt.n	80101ca <AES_CMAC_Final+0x10a>
 801015c:	aa08      	add	r2, sp, #32
 801015e:	18d1      	adds	r1, r2, r3
 8010160:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8010164:	3301      	adds	r3, #1
 8010166:	441a      	add	r2, r3
 8010168:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801016c:	09d2      	lsrs	r2, r2, #7
 801016e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8010172:	f801 2c10 	strb.w	r2, [r1, #-16]
 8010176:	e7ef      	b.n	8010158 <AES_CMAC_Final+0x98>
        XOR( K, ctx->M_last );
 8010178:	2300      	movs	r3, #0
 801017a:	2b0f      	cmp	r3, #15
 801017c:	dc49      	bgt.n	8010212 <AES_CMAC_Final+0x152>
 801017e:	18e9      	adds	r1, r5, r3
 8010180:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8010184:	a808      	add	r0, sp, #32
 8010186:	4418      	add	r0, r3
 8010188:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 801018c:	4042      	eors	r2, r0
 801018e:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8010192:	3301      	adds	r3, #1
 8010194:	e7f1      	b.n	801017a <AES_CMAC_Final+0xba>
            LSHIFT( K, K );
 8010196:	2300      	movs	r3, #0
 8010198:	2b0e      	cmp	r3, #14
 801019a:	dc0d      	bgt.n	80101b8 <AES_CMAC_Final+0xf8>
 801019c:	aa08      	add	r2, sp, #32
 801019e:	18d1      	adds	r1, r2, r3
 80101a0:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 80101a4:	3301      	adds	r3, #1
 80101a6:	441a      	add	r2, r3
 80101a8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80101ac:	09d2      	lsrs	r2, r2, #7
 80101ae:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 80101b2:	f801 2c10 	strb.w	r2, [r1, #-16]
 80101b6:	e7ef      	b.n	8010198 <AES_CMAC_Final+0xd8>
 80101b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80101bc:	005b      	lsls	r3, r3, #1
 80101be:	b2db      	uxtb	r3, r3
            K[15] ^= 0x87;
 80101c0:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 80101c4:	f88d 301f 	strb.w	r3, [sp, #31]
 80101c8:	e004      	b.n	80101d4 <AES_CMAC_Final+0x114>
            LSHIFT( K, K );
 80101ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80101ce:	005b      	lsls	r3, r3, #1
 80101d0:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 80101d4:	4428      	add	r0, r5
 80101d6:	2380      	movs	r3, #128	; 0x80
 80101d8:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80101dc:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 80101e0:	3301      	adds	r3, #1
 80101e2:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
 80101e6:	2b0f      	cmp	r3, #15
 80101e8:	d804      	bhi.n	80101f4 <AES_CMAC_Final+0x134>
            ctx->M_last[ctx->M_n] = 0;
 80101ea:	442b      	add	r3, r5
 80101ec:	2200      	movs	r2, #0
 80101ee:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 80101f2:	e7f3      	b.n	80101dc <AES_CMAC_Final+0x11c>

        XOR( K, ctx->M_last );
 80101f4:	2300      	movs	r3, #0
 80101f6:	2b0f      	cmp	r3, #15
 80101f8:	dc0b      	bgt.n	8010212 <AES_CMAC_Final+0x152>
 80101fa:	18e9      	adds	r1, r5, r3
 80101fc:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8010200:	a808      	add	r0, sp, #32
 8010202:	4418      	add	r0, r3
 8010204:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8010208:	4042      	eors	r2, r0
 801020a:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 801020e:	3301      	adds	r3, #1
 8010210:	e7f1      	b.n	80101f6 <AES_CMAC_Final+0x136>
 8010212:	2300      	movs	r3, #0
    }
    XOR( ctx->M_last, ctx->X );
 8010214:	2b0f      	cmp	r3, #15
 8010216:	dc09      	bgt.n	801022c <AES_CMAC_Final+0x16c>
 8010218:	18ea      	adds	r2, r5, r3
 801021a:	f892 40f1 	ldrb.w	r4, [r2, #241]	; 0xf1
 801021e:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 8010222:	404c      	eors	r4, r1
 8010224:	f882 40f1 	strb.w	r4, [r2, #241]	; 0xf1
 8010228:	3301      	adds	r3, #1
 801022a:	e7f3      	b.n	8010214 <AES_CMAC_Final+0x154>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801022c:	2210      	movs	r2, #16
 801022e:	f105 01f1 	add.w	r1, r5, #241	; 0xf1
 8010232:	4668      	mov	r0, sp
 8010234:	f000 fcbb 	bl	8010bae <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8010238:	462a      	mov	r2, r5
 801023a:	4631      	mov	r1, r6
 801023c:	4668      	mov	r0, sp
 801023e:	f000 fa5b 	bl	80106f8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8010242:	2210      	movs	r2, #16
 8010244:	2100      	movs	r1, #0
 8010246:	eb0d 0002 	add.w	r0, sp, r2
 801024a:	f000 fcc6 	bl	8010bda <memset1>
}
 801024e:	b008      	add	sp, #32
 8010250:	bd70      	pop	{r4, r5, r6, pc}

08010252 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8010252:	780b      	ldrb	r3, [r1, #0]
 8010254:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8010256:	784b      	ldrb	r3, [r1, #1]
 8010258:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 801025a:	788b      	ldrb	r3, [r1, #2]
 801025c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 801025e:	78cb      	ldrb	r3, [r1, #3]
 8010260:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8010262:	790b      	ldrb	r3, [r1, #4]
 8010264:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8010266:	794b      	ldrb	r3, [r1, #5]
 8010268:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 801026a:	798b      	ldrb	r3, [r1, #6]
 801026c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 801026e:	79cb      	ldrb	r3, [r1, #7]
 8010270:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8010272:	7a0b      	ldrb	r3, [r1, #8]
 8010274:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8010276:	7a4b      	ldrb	r3, [r1, #9]
 8010278:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 801027a:	7a8b      	ldrb	r3, [r1, #10]
 801027c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 801027e:	7acb      	ldrb	r3, [r1, #11]
 8010280:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8010282:	7b0b      	ldrb	r3, [r1, #12]
 8010284:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8010286:	7b4b      	ldrb	r3, [r1, #13]
 8010288:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 801028a:	7b8b      	ldrb	r3, [r1, #14]
 801028c:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 801028e:	7bcb      	ldrb	r3, [r1, #15]
 8010290:	73c3      	strb	r3, [r0, #15]
#endif
}
 8010292:	4770      	bx	lr

08010294 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 8010294:	1e53      	subs	r3, r2, #1
 8010296:	b2db      	uxtb	r3, r3
 8010298:	b12a      	cbz	r2, 80102a6 <copy_block_nn+0x12>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 801029a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801029e:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 80102a2:	461a      	mov	r2, r3
 80102a4:	e7f6      	b.n	8010294 <copy_block_nn>
}
 80102a6:	4770      	bx	lr

080102a8 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80102a8:	780b      	ldrb	r3, [r1, #0]
 80102aa:	7802      	ldrb	r2, [r0, #0]
 80102ac:	4053      	eors	r3, r2
 80102ae:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80102b0:	784b      	ldrb	r3, [r1, #1]
 80102b2:	7842      	ldrb	r2, [r0, #1]
 80102b4:	4053      	eors	r3, r2
 80102b6:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80102b8:	788b      	ldrb	r3, [r1, #2]
 80102ba:	7882      	ldrb	r2, [r0, #2]
 80102bc:	4053      	eors	r3, r2
 80102be:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80102c0:	78cb      	ldrb	r3, [r1, #3]
 80102c2:	78c2      	ldrb	r2, [r0, #3]
 80102c4:	4053      	eors	r3, r2
 80102c6:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80102c8:	790b      	ldrb	r3, [r1, #4]
 80102ca:	7902      	ldrb	r2, [r0, #4]
 80102cc:	4053      	eors	r3, r2
 80102ce:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80102d0:	794b      	ldrb	r3, [r1, #5]
 80102d2:	7942      	ldrb	r2, [r0, #5]
 80102d4:	4053      	eors	r3, r2
 80102d6:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80102d8:	798b      	ldrb	r3, [r1, #6]
 80102da:	7982      	ldrb	r2, [r0, #6]
 80102dc:	4053      	eors	r3, r2
 80102de:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80102e0:	79cb      	ldrb	r3, [r1, #7]
 80102e2:	79c2      	ldrb	r2, [r0, #7]
 80102e4:	4053      	eors	r3, r2
 80102e6:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80102e8:	7a0b      	ldrb	r3, [r1, #8]
 80102ea:	7a02      	ldrb	r2, [r0, #8]
 80102ec:	4053      	eors	r3, r2
 80102ee:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 80102f0:	7a4b      	ldrb	r3, [r1, #9]
 80102f2:	7a42      	ldrb	r2, [r0, #9]
 80102f4:	4053      	eors	r3, r2
 80102f6:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 80102f8:	7a8b      	ldrb	r3, [r1, #10]
 80102fa:	7a82      	ldrb	r2, [r0, #10]
 80102fc:	4053      	eors	r3, r2
 80102fe:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8010300:	7acb      	ldrb	r3, [r1, #11]
 8010302:	7ac2      	ldrb	r2, [r0, #11]
 8010304:	4053      	eors	r3, r2
 8010306:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8010308:	7b0b      	ldrb	r3, [r1, #12]
 801030a:	7b02      	ldrb	r2, [r0, #12]
 801030c:	4053      	eors	r3, r2
 801030e:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8010310:	7b4b      	ldrb	r3, [r1, #13]
 8010312:	7b42      	ldrb	r2, [r0, #13]
 8010314:	4053      	eors	r3, r2
 8010316:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8010318:	7b8b      	ldrb	r3, [r1, #14]
 801031a:	7b82      	ldrb	r2, [r0, #14]
 801031c:	4053      	eors	r3, r2
 801031e:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8010320:	7bcb      	ldrb	r3, [r1, #15]
 8010322:	7bc2      	ldrb	r2, [r0, #15]
 8010324:	4053      	eors	r3, r2
 8010326:	73c3      	strb	r3, [r0, #15]
#endif
}
 8010328:	4770      	bx	lr

0801032a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 801032a:	b410      	push	{r4}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 801032c:	780b      	ldrb	r3, [r1, #0]
 801032e:	7814      	ldrb	r4, [r2, #0]
 8010330:	4063      	eors	r3, r4
 8010332:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8010334:	784b      	ldrb	r3, [r1, #1]
 8010336:	7854      	ldrb	r4, [r2, #1]
 8010338:	4063      	eors	r3, r4
 801033a:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 801033c:	788b      	ldrb	r3, [r1, #2]
 801033e:	7894      	ldrb	r4, [r2, #2]
 8010340:	4063      	eors	r3, r4
 8010342:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8010344:	78cb      	ldrb	r3, [r1, #3]
 8010346:	78d4      	ldrb	r4, [r2, #3]
 8010348:	4063      	eors	r3, r4
 801034a:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 801034c:	790b      	ldrb	r3, [r1, #4]
 801034e:	7914      	ldrb	r4, [r2, #4]
 8010350:	4063      	eors	r3, r4
 8010352:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8010354:	794b      	ldrb	r3, [r1, #5]
 8010356:	7954      	ldrb	r4, [r2, #5]
 8010358:	4063      	eors	r3, r4
 801035a:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 801035c:	798b      	ldrb	r3, [r1, #6]
 801035e:	7994      	ldrb	r4, [r2, #6]
 8010360:	4063      	eors	r3, r4
 8010362:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8010364:	79cb      	ldrb	r3, [r1, #7]
 8010366:	79d4      	ldrb	r4, [r2, #7]
 8010368:	4063      	eors	r3, r4
 801036a:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 801036c:	7a0b      	ldrb	r3, [r1, #8]
 801036e:	7a14      	ldrb	r4, [r2, #8]
 8010370:	4063      	eors	r3, r4
 8010372:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8010374:	7a4b      	ldrb	r3, [r1, #9]
 8010376:	7a54      	ldrb	r4, [r2, #9]
 8010378:	4063      	eors	r3, r4
 801037a:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 801037c:	7a8b      	ldrb	r3, [r1, #10]
 801037e:	7a94      	ldrb	r4, [r2, #10]
 8010380:	4063      	eors	r3, r4
 8010382:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8010384:	7acb      	ldrb	r3, [r1, #11]
 8010386:	7ad4      	ldrb	r4, [r2, #11]
 8010388:	4063      	eors	r3, r4
 801038a:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 801038c:	7b0b      	ldrb	r3, [r1, #12]
 801038e:	7b14      	ldrb	r4, [r2, #12]
 8010390:	4063      	eors	r3, r4
 8010392:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8010394:	7b4b      	ldrb	r3, [r1, #13]
 8010396:	7b54      	ldrb	r4, [r2, #13]
 8010398:	4063      	eors	r3, r4
 801039a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 801039c:	7b8b      	ldrb	r3, [r1, #14]
 801039e:	7b94      	ldrb	r4, [r2, #14]
 80103a0:	4063      	eors	r3, r4
 80103a2:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80103a4:	7bcb      	ldrb	r3, [r1, #15]
 80103a6:	7bd2      	ldrb	r2, [r2, #15]
 80103a8:	4053      	eors	r3, r2
 80103aa:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80103ac:	bc10      	pop	{r4}
 80103ae:	4770      	bx	lr

080103b0 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 80103b0:	b508      	push	{r3, lr}
    xor_block(d, k);
 80103b2:	f7ff ff79 	bl	80102a8 <xor_block>
}
 80103b6:	bd08      	pop	{r3, pc}

080103b8 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80103b8:	7802      	ldrb	r2, [r0, #0]
 80103ba:	4b18      	ldr	r3, [pc, #96]	; (801041c <shift_sub_rows+0x64>)
 80103bc:	5c9a      	ldrb	r2, [r3, r2]
 80103be:	7002      	strb	r2, [r0, #0]
 80103c0:	7902      	ldrb	r2, [r0, #4]
 80103c2:	5c9a      	ldrb	r2, [r3, r2]
 80103c4:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80103c6:	7a02      	ldrb	r2, [r0, #8]
 80103c8:	5c9a      	ldrb	r2, [r3, r2]
 80103ca:	7202      	strb	r2, [r0, #8]
 80103cc:	7b02      	ldrb	r2, [r0, #12]
 80103ce:	5c9a      	ldrb	r2, [r3, r2]
 80103d0:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80103d2:	7842      	ldrb	r2, [r0, #1]
 80103d4:	7941      	ldrb	r1, [r0, #5]
 80103d6:	5c59      	ldrb	r1, [r3, r1]
 80103d8:	7041      	strb	r1, [r0, #1]
 80103da:	7a41      	ldrb	r1, [r0, #9]
 80103dc:	5c59      	ldrb	r1, [r3, r1]
 80103de:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80103e0:	7b41      	ldrb	r1, [r0, #13]
 80103e2:	5c59      	ldrb	r1, [r3, r1]
 80103e4:	7241      	strb	r1, [r0, #9]
 80103e6:	5c9a      	ldrb	r2, [r3, r2]
 80103e8:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80103ea:	7882      	ldrb	r2, [r0, #2]
 80103ec:	7a81      	ldrb	r1, [r0, #10]
 80103ee:	5c59      	ldrb	r1, [r3, r1]
 80103f0:	7081      	strb	r1, [r0, #2]
 80103f2:	5c9a      	ldrb	r2, [r3, r2]
 80103f4:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80103f6:	7982      	ldrb	r2, [r0, #6]
 80103f8:	7b81      	ldrb	r1, [r0, #14]
 80103fa:	5c59      	ldrb	r1, [r3, r1]
 80103fc:	7181      	strb	r1, [r0, #6]
 80103fe:	5c9a      	ldrb	r2, [r3, r2]
 8010400:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8010402:	7bc2      	ldrb	r2, [r0, #15]
 8010404:	7ac1      	ldrb	r1, [r0, #11]
 8010406:	5c59      	ldrb	r1, [r3, r1]
 8010408:	73c1      	strb	r1, [r0, #15]
 801040a:	79c1      	ldrb	r1, [r0, #7]
 801040c:	5c59      	ldrb	r1, [r3, r1]
 801040e:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8010410:	78c1      	ldrb	r1, [r0, #3]
 8010412:	5c59      	ldrb	r1, [r3, r1]
 8010414:	71c1      	strb	r1, [r0, #7]
 8010416:	5c9b      	ldrb	r3, [r3, r2]
 8010418:	70c3      	strb	r3, [r0, #3]
}
 801041a:	4770      	bx	lr
 801041c:	080144e4 	.word	0x080144e4

08010420 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8010420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010424:	b084      	sub	sp, #16
 8010426:	4604      	mov	r4, r0
    block_copy(st, dt);
 8010428:	4601      	mov	r1, r0
 801042a:	4668      	mov	r0, sp
 801042c:	f7ff ff11 	bl	8010252 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8010430:	f89d c000 	ldrb.w	ip, [sp]
 8010434:	4b68      	ldr	r3, [pc, #416]	; (80105d8 <mix_sub_columns+0x1b8>)
 8010436:	f813 000c 	ldrb.w	r0, [r3, ip]
 801043a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801043e:	4a67      	ldr	r2, [pc, #412]	; (80105dc <mix_sub_columns+0x1bc>)
 8010440:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010444:	f89d e00a 	ldrb.w	lr, [sp, #10]
 8010448:	4965      	ldr	r1, [pc, #404]	; (80105e0 <mix_sub_columns+0x1c0>)
 801044a:	f811 500e 	ldrb.w	r5, [r1, lr]
 801044e:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8010452:	5dce      	ldrb	r6, [r1, r7]
 8010454:	ea80 0009 	eor.w	r0, r0, r9
 8010458:	4068      	eors	r0, r5
 801045a:	4070      	eors	r0, r6
 801045c:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 801045e:	f811 000c 	ldrb.w	r0, [r1, ip]
 8010462:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010466:	f812 900e 	ldrb.w	r9, [r2, lr]
 801046a:	ea80 0a0a 	eor.w	sl, r0, sl
 801046e:	ea89 090a 	eor.w	r9, r9, sl
 8010472:	ea86 0609 	eor.w	r6, r6, r9
 8010476:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8010478:	f811 8008 	ldrb.w	r8, [r1, r8]
 801047c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010480:	5dd6      	ldrb	r6, [r2, r7]
 8010482:	ea80 0008 	eor.w	r0, r0, r8
 8010486:	ea8e 0000 	eor.w	r0, lr, r0
 801048a:	4070      	eors	r0, r6
 801048c:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 801048e:	f812 600c 	ldrb.w	r6, [r2, ip]
 8010492:	5dd8      	ldrb	r0, [r3, r7]
 8010494:	ea86 0608 	eor.w	r6, r6, r8
 8010498:	4075      	eors	r5, r6
 801049a:	4045      	eors	r5, r0
 801049c:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 801049e:	f89d c004 	ldrb.w	ip, [sp, #4]
 80104a2:	f813 000c 	ldrb.w	r0, [r3, ip]
 80104a6:	f89d 8009 	ldrb.w	r8, [sp, #9]
 80104aa:	f812 9008 	ldrb.w	r9, [r2, r8]
 80104ae:	f89d e00e 	ldrb.w	lr, [sp, #14]
 80104b2:	f811 500e 	ldrb.w	r5, [r1, lr]
 80104b6:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80104ba:	5dce      	ldrb	r6, [r1, r7]
 80104bc:	ea80 0009 	eor.w	r0, r0, r9
 80104c0:	4068      	eors	r0, r5
 80104c2:	4070      	eors	r0, r6
 80104c4:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80104c6:	f811 000c 	ldrb.w	r0, [r1, ip]
 80104ca:	f813 a008 	ldrb.w	sl, [r3, r8]
 80104ce:	f812 900e 	ldrb.w	r9, [r2, lr]
 80104d2:	ea80 0a0a 	eor.w	sl, r0, sl
 80104d6:	ea89 090a 	eor.w	r9, r9, sl
 80104da:	ea86 0609 	eor.w	r6, r6, r9
 80104de:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80104e0:	f811 8008 	ldrb.w	r8, [r1, r8]
 80104e4:	f813 e00e 	ldrb.w	lr, [r3, lr]
 80104e8:	5dd6      	ldrb	r6, [r2, r7]
 80104ea:	ea80 0008 	eor.w	r0, r0, r8
 80104ee:	ea8e 0000 	eor.w	r0, lr, r0
 80104f2:	4070      	eors	r0, r6
 80104f4:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80104f6:	f812 600c 	ldrb.w	r6, [r2, ip]
 80104fa:	5dd8      	ldrb	r0, [r3, r7]
 80104fc:	ea86 0608 	eor.w	r6, r6, r8
 8010500:	4075      	eors	r5, r6
 8010502:	4045      	eors	r5, r0
 8010504:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8010506:	f89d c008 	ldrb.w	ip, [sp, #8]
 801050a:	f813 000c 	ldrb.w	r0, [r3, ip]
 801050e:	f89d 800d 	ldrb.w	r8, [sp, #13]
 8010512:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010516:	f89d e002 	ldrb.w	lr, [sp, #2]
 801051a:	f811 500e 	ldrb.w	r5, [r1, lr]
 801051e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8010522:	5dce      	ldrb	r6, [r1, r7]
 8010524:	ea80 0009 	eor.w	r0, r0, r9
 8010528:	4068      	eors	r0, r5
 801052a:	4070      	eors	r0, r6
 801052c:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 801052e:	f811 000c 	ldrb.w	r0, [r1, ip]
 8010532:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010536:	f812 900e 	ldrb.w	r9, [r2, lr]
 801053a:	ea80 0a0a 	eor.w	sl, r0, sl
 801053e:	ea89 090a 	eor.w	r9, r9, sl
 8010542:	ea86 0609 	eor.w	r6, r6, r9
 8010546:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8010548:	f811 8008 	ldrb.w	r8, [r1, r8]
 801054c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010550:	5dd6      	ldrb	r6, [r2, r7]
 8010552:	ea80 0008 	eor.w	r0, r0, r8
 8010556:	ea8e 0000 	eor.w	r0, lr, r0
 801055a:	4070      	eors	r0, r6
 801055c:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 801055e:	f812 600c 	ldrb.w	r6, [r2, ip]
 8010562:	5dd8      	ldrb	r0, [r3, r7]
 8010564:	ea86 0608 	eor.w	r6, r6, r8
 8010568:	4075      	eors	r5, r6
 801056a:	4045      	eors	r5, r0
 801056c:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 801056e:	f89d c00c 	ldrb.w	ip, [sp, #12]
 8010572:	f813 000c 	ldrb.w	r0, [r3, ip]
 8010576:	f89d 8001 	ldrb.w	r8, [sp, #1]
 801057a:	f812 9008 	ldrb.w	r9, [r2, r8]
 801057e:	f89d e006 	ldrb.w	lr, [sp, #6]
 8010582:	f811 500e 	ldrb.w	r5, [r1, lr]
 8010586:	f89d 700b 	ldrb.w	r7, [sp, #11]
 801058a:	5dce      	ldrb	r6, [r1, r7]
 801058c:	ea80 0009 	eor.w	r0, r0, r9
 8010590:	4068      	eors	r0, r5
 8010592:	4070      	eors	r0, r6
 8010594:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8010596:	f811 000c 	ldrb.w	r0, [r1, ip]
 801059a:	f813 a008 	ldrb.w	sl, [r3, r8]
 801059e:	f812 900e 	ldrb.w	r9, [r2, lr]
 80105a2:	ea80 0a0a 	eor.w	sl, r0, sl
 80105a6:	ea89 090a 	eor.w	r9, r9, sl
 80105aa:	ea86 0609 	eor.w	r6, r6, r9
 80105ae:	7366      	strb	r6, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80105b0:	f811 1008 	ldrb.w	r1, [r1, r8]
 80105b4:	f813 e00e 	ldrb.w	lr, [r3, lr]
 80105b8:	5dd6      	ldrb	r6, [r2, r7]
 80105ba:	4048      	eors	r0, r1
 80105bc:	ea8e 0000 	eor.w	r0, lr, r0
 80105c0:	4070      	eors	r0, r6
 80105c2:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80105c4:	f812 200c 	ldrb.w	r2, [r2, ip]
 80105c8:	5ddb      	ldrb	r3, [r3, r7]
 80105ca:	4051      	eors	r1, r2
 80105cc:	404d      	eors	r5, r1
 80105ce:	405d      	eors	r5, r3
 80105d0:	73e5      	strb	r5, [r4, #15]
  }
 80105d2:	b004      	add	sp, #16
 80105d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105d8:	080142e4 	.word	0x080142e4
 80105dc:	080143e4 	.word	0x080143e4
 80105e0:	080144e4 	.word	0x080144e4

080105e4 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 80105e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105e8:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 80105ea:	f1a1 0310 	sub.w	r3, r1, #16
 80105ee:	b2da      	uxtb	r2, r3
 80105f0:	2a10      	cmp	r2, #16
 80105f2:	d807      	bhi.n	8010604 <lorawan_aes_set_key+0x20>
 80105f4:	460d      	mov	r5, r1
 80105f6:	2301      	movs	r3, #1
 80105f8:	4093      	lsls	r3, r2
 80105fa:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80105fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010602:	b92b      	cbnz	r3, 8010610 <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8010604:	2300      	movs	r3, #0
 8010606:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 801060a:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 801060c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 8010610:	460a      	mov	r2, r1
 8010612:	4601      	mov	r1, r0
 8010614:	4620      	mov	r0, r4
 8010616:	f7ff fe3d 	bl	8010294 <copy_block_nn>
    hi = (keylen + 28) << 2;
 801061a:	f105 031c 	add.w	r3, r5, #28
 801061e:	b2db      	uxtb	r3, r3
 8010620:	009b      	lsls	r3, r3, #2
 8010622:	b2df      	uxtb	r7, r3
    ctx->rnd = (hi >> 4) - 1;
 8010624:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8010628:	3b01      	subs	r3, #1
 801062a:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 801062e:	462b      	mov	r3, r5
 8010630:	2601      	movs	r6, #1
 8010632:	e028      	b.n	8010686 <lorawan_aes_set_key+0xa2>
        else if( keylen > 24 && cc % keylen == 16 )
 8010634:	2d18      	cmp	r5, #24
 8010636:	d901      	bls.n	801063c <lorawan_aes_set_key+0x58>
 8010638:	2a10      	cmp	r2, #16
 801063a:	d04f      	beq.n	80106dc <lorawan_aes_set_key+0xf8>
        tt = cc - keylen;
 801063c:	1b5a      	subs	r2, r3, r5
 801063e:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8010640:	f814 9002 	ldrb.w	r9, [r4, r2]
 8010644:	ea89 0808 	eor.w	r8, r9, r8
 8010648:	f804 8001 	strb.w	r8, [r4, r1]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 801064c:	f102 0801 	add.w	r8, r2, #1
 8010650:	f814 8008 	ldrb.w	r8, [r4, r8]
 8010654:	f101 0901 	add.w	r9, r1, #1
 8010658:	ea88 0e0e 	eor.w	lr, r8, lr
 801065c:	f804 e009 	strb.w	lr, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8010660:	f102 0e02 	add.w	lr, r2, #2
 8010664:	f814 e00e 	ldrb.w	lr, [r4, lr]
 8010668:	f101 0802 	add.w	r8, r1, #2
 801066c:	ea8e 0c0c 	eor.w	ip, lr, ip
 8010670:	f804 c008 	strb.w	ip, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8010674:	3203      	adds	r2, #3
 8010676:	f814 c002 	ldrb.w	ip, [r4, r2]
 801067a:	1cca      	adds	r2, r1, #3
 801067c:	ea8c 0000 	eor.w	r0, ip, r0
 8010680:	54a0      	strb	r0, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8010682:	3304      	adds	r3, #4
 8010684:	b2db      	uxtb	r3, r3
 8010686:	42bb      	cmp	r3, r7
 8010688:	d231      	bcs.n	80106ee <lorawan_aes_set_key+0x10a>
        t0 = ctx->ksch[cc - 4];
 801068a:	4619      	mov	r1, r3
 801068c:	1f1a      	subs	r2, r3, #4
 801068e:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8010692:	1eda      	subs	r2, r3, #3
 8010694:	f814 e002 	ldrb.w	lr, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 8010698:	1e9a      	subs	r2, r3, #2
 801069a:	f814 c002 	ldrb.w	ip, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 801069e:	1e5a      	subs	r2, r3, #1
 80106a0:	5ca0      	ldrb	r0, [r4, r2]
        if( cc % keylen == 0 )
 80106a2:	fbb3 f2f5 	udiv	r2, r3, r5
 80106a6:	fb05 3212 	mls	r2, r5, r2, r3
 80106aa:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80106ae:	d1c1      	bne.n	8010634 <lorawan_aes_set_key+0x50>
            t0 = s_box(t1) ^ rc;
 80106b0:	4a10      	ldr	r2, [pc, #64]	; (80106f4 <lorawan_aes_set_key+0x110>)
 80106b2:	f812 900e 	ldrb.w	r9, [r2, lr]
 80106b6:	ea89 0906 	eor.w	r9, r9, r6
            t1 = s_box(t2);
 80106ba:	f812 e00c 	ldrb.w	lr, [r2, ip]
            t2 = s_box(t3);
 80106be:	f812 c000 	ldrb.w	ip, [r2, r0]
            t3 = s_box(tt);
 80106c2:	f812 0008 	ldrb.w	r0, [r2, r8]
            rc = f2(rc);
 80106c6:	09f2      	lsrs	r2, r6, #7
 80106c8:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80106cc:	4442      	add	r2, r8
 80106ce:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80106d2:	ea82 0646 	eor.w	r6, r2, r6, lsl #1
 80106d6:	b2f6      	uxtb	r6, r6
            t0 = s_box(t1) ^ rc;
 80106d8:	46c8      	mov	r8, r9
 80106da:	e7af      	b.n	801063c <lorawan_aes_set_key+0x58>
            t0 = s_box(t0);
 80106dc:	4a05      	ldr	r2, [pc, #20]	; (80106f4 <lorawan_aes_set_key+0x110>)
 80106de:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 80106e2:	f812 e00e 	ldrb.w	lr, [r2, lr]
            t2 = s_box(t2);
 80106e6:	f812 c00c 	ldrb.w	ip, [r2, ip]
            t3 = s_box(t3);
 80106ea:	5c10      	ldrb	r0, [r2, r0]
 80106ec:	e7a6      	b.n	801063c <lorawan_aes_set_key+0x58>
    return 0;
 80106ee:	2000      	movs	r0, #0
 80106f0:	e78c      	b.n	801060c <lorawan_aes_set_key+0x28>
 80106f2:	bf00      	nop
 80106f4:	080144e4 	.word	0x080144e4

080106f8 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 80106f8:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 80106fc:	b323      	cbz	r3, 8010748 <lorawan_aes_encrypt+0x50>
{
 80106fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010700:	b085      	sub	sp, #20
 8010702:	460f      	mov	r7, r1
 8010704:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8010706:	4616      	mov	r6, r2
 8010708:	4601      	mov	r1, r0
 801070a:	4668      	mov	r0, sp
 801070c:	f7ff fe0d 	bl	801032a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8010710:	2401      	movs	r4, #1
 8010712:	e009      	b.n	8010728 <lorawan_aes_encrypt+0x30>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8010714:	4668      	mov	r0, sp
 8010716:	f7ff fe83 	bl	8010420 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 801071a:	eb06 1104 	add.w	r1, r6, r4, lsl #4
 801071e:	4668      	mov	r0, sp
 8010720:	f7ff fe46 	bl	80103b0 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8010724:	3401      	adds	r4, #1
 8010726:	b2e4      	uxtb	r4, r4
 8010728:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 801072c:	42a3      	cmp	r3, r4
 801072e:	d8f1      	bhi.n	8010714 <lorawan_aes_encrypt+0x1c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8010730:	4668      	mov	r0, sp
 8010732:	f7ff fe41 	bl	80103b8 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8010736:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 801073a:	4669      	mov	r1, sp
 801073c:	4638      	mov	r0, r7
 801073e:	f7ff fdf4 	bl	801032a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8010742:	2000      	movs	r0, #0
}
 8010744:	b005      	add	sp, #20
 8010746:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ( uint8_t )-1;
 8010748:	20ff      	movs	r0, #255	; 0xff
}
 801074a:	4770      	bx	lr

0801074c <GetKeyByID>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801074c:	2300      	movs	r3, #0
 801074e:	2b09      	cmp	r3, #9
 8010750:	d816      	bhi.n	8010780 <GetKeyByID+0x34>
{
 8010752:	b430      	push	{r4, r5}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010754:	4a0b      	ldr	r2, [pc, #44]	; (8010784 <GetKeyByID+0x38>)
 8010756:	6814      	ldr	r4, [r2, #0]
 8010758:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 801075c:	4422      	add	r2, r4
 801075e:	7c12      	ldrb	r2, [r2, #16]
 8010760:	4282      	cmp	r2, r0
 8010762:	d006      	beq.n	8010772 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010764:	3301      	adds	r3, #1
 8010766:	b2db      	uxtb	r3, r3
 8010768:	2b09      	cmp	r3, #9
 801076a:	d9f3      	bls.n	8010754 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801076c:	2003      	movs	r0, #3
}
 801076e:	bc30      	pop	{r4, r5}
 8010770:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8010772:	eb03 1503 	add.w	r5, r3, r3, lsl #4
 8010776:	3510      	adds	r5, #16
 8010778:	442c      	add	r4, r5
 801077a:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 801077c:	2000      	movs	r0, #0
 801077e:	e7f6      	b.n	801076e <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010780:	2003      	movs	r0, #3
}
 8010782:	4770      	bx	lr
 8010784:	20001048 	.word	0x20001048

08010788 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 8010788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801078c:	b0cc      	sub	sp, #304	; 0x130
 801078e:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8010790:	b3a9      	cbz	r1, 80107fe <ComputeCmac+0x76>
 8010792:	4605      	mov	r5, r0
 8010794:	4617      	mov	r7, r2
 8010796:	461c      	mov	r4, r3
 8010798:	4688      	mov	r8, r1
 801079a:	b396      	cbz	r6, 8010802 <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 801079c:	a802      	add	r0, sp, #8
 801079e:	f7ff fc07 	bl	800ffb0 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 80107a2:	a901      	add	r1, sp, #4
 80107a4:	4620      	mov	r0, r4
 80107a6:	f7ff ffd1 	bl	801074c <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 80107aa:	4604      	mov	r4, r0
 80107ac:	b118      	cbz	r0, 80107b6 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 80107ae:	4620      	mov	r0, r4
 80107b0:	b04c      	add	sp, #304	; 0x130
 80107b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 80107b6:	9901      	ldr	r1, [sp, #4]
 80107b8:	3101      	adds	r1, #1
 80107ba:	a802      	add	r0, sp, #8
 80107bc:	f7ff fc07 	bl	800ffce <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 80107c0:	b125      	cbz	r5, 80107cc <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 80107c2:	2210      	movs	r2, #16
 80107c4:	4629      	mov	r1, r5
 80107c6:	a802      	add	r0, sp, #8
 80107c8:	f7ff fc08 	bl	800ffdc <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 80107cc:	463a      	mov	r2, r7
 80107ce:	4641      	mov	r1, r8
 80107d0:	a802      	add	r0, sp, #8
 80107d2:	f7ff fc03 	bl	800ffdc <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 80107d6:	a902      	add	r1, sp, #8
 80107d8:	a848      	add	r0, sp, #288	; 0x120
 80107da:	f7ff fc71 	bl	80100c0 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 80107de:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 80107e2:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 80107e6:	041b      	lsls	r3, r3, #16
 80107e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80107ec:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 80107f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 80107f4:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 80107f8:	4313      	orrs	r3, r2
 80107fa:	6033      	str	r3, [r6, #0]
 80107fc:	e7d7      	b.n	80107ae <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 80107fe:	2402      	movs	r4, #2
 8010800:	e7d5      	b.n	80107ae <ComputeCmac+0x26>
 8010802:	2402      	movs	r4, #2
 8010804:	e7d3      	b.n	80107ae <ComputeCmac+0x26>
	...

08010808 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 8010808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801080a:	b0b1      	sub	sp, #196	; 0xc4
 801080c:	4606      	mov	r6, r0
 801080e:	460f      	mov	r7, r1
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 8010810:	22b0      	movs	r2, #176	; 0xb0
 8010812:	2100      	movs	r1, #0
 8010814:	a804      	add	r0, sp, #16
 8010816:	f003 f917 	bl	8013a48 <memset>
 801081a:	4a2f      	ldr	r2, [pc, #188]	; (80108d8 <SecureElementInit+0xd0>)
 801081c:	466b      	mov	r3, sp
 801081e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010822:	e883 0003 	stmia.w	r3, {r0, r1}
 8010826:	4a2d      	ldr	r2, [pc, #180]	; (80108dc <SecureElementInit+0xd4>)
 8010828:	ab02      	add	r3, sp, #8
 801082a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801082e:	e883 0003 	stmia.w	r3, {r0, r1}
 8010832:	4c2b      	ldr	r4, [pc, #172]	; (80108e0 <SecureElementInit+0xd8>)
 8010834:	4625      	mov	r5, r4
 8010836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010838:	f8cd 0011 	str.w	r0, [sp, #17]
 801083c:	f8cd 1015 	str.w	r1, [sp, #21]
 8010840:	f8cd 2019 	str.w	r2, [sp, #25]
 8010844:	f8cd 301d 	str.w	r3, [sp, #29]
 8010848:	2301      	movs	r3, #1
 801084a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801084e:	4625      	mov	r5, r4
 8010850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010852:	f8cd 0022 	str.w	r0, [sp, #34]	; 0x22
 8010856:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 801085a:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 801085e:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
 8010862:	2302      	movs	r3, #2
 8010864:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8010868:	4625      	mov	r5, r4
 801086a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801086c:	f8cd 0033 	str.w	r0, [sp, #51]	; 0x33
 8010870:	f8cd 1037 	str.w	r1, [sp, #55]	; 0x37
 8010874:	f8cd 203b 	str.w	r2, [sp, #59]	; 0x3b
 8010878:	f8cd 303f 	str.w	r3, [sp, #63]	; 0x3f
 801087c:	2303      	movs	r3, #3
 801087e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 8010882:	ad11      	add	r5, sp, #68	; 0x44
 8010884:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010888:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801088c:	2304      	movs	r3, #4
 801088e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8010892:	237f      	movs	r3, #127	; 0x7f
 8010894:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
 8010898:	2380      	movs	r3, #128	; 0x80
 801089a:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
 801089e:	2381      	movs	r3, #129	; 0x81
 80108a0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 80108a4:	2382      	movs	r3, #130	; 0x82
 80108a6:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 80108aa:	2383      	movs	r3, #131	; 0x83
 80108ac:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 80108b0:	b16e      	cbz	r6, 80108ce <SecureElementInit+0xc6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 80108b2:	4b0c      	ldr	r3, [pc, #48]	; (80108e4 <SecureElementInit+0xdc>)
 80108b4:	601e      	str	r6, [r3, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 80108b6:	22c0      	movs	r2, #192	; 0xc0
 80108b8:	4669      	mov	r1, sp
 80108ba:	4630      	mov	r0, r6
 80108bc:	f000 f977 	bl	8010bae <memcpy1>
    PrintKey(NWK_S_KEY);
#endif /* KEY_EXTRACTABLE */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 80108c0:	b13f      	cbz	r7, 80108d2 <SecureElementInit+0xca>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 80108c2:	4b08      	ldr	r3, [pc, #32]	; (80108e4 <SecureElementInit+0xdc>)
 80108c4:	6818      	ldr	r0, [r3, #0]
 80108c6:	47b8      	blx	r7
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 80108c8:	2000      	movs	r0, #0
}
 80108ca:	b031      	add	sp, #196	; 0xc4
 80108cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80108ce:	2002      	movs	r0, #2
 80108d0:	e7fb      	b.n	80108ca <SecureElementInit+0xc2>
    return SECURE_ELEMENT_SUCCESS;
 80108d2:	2000      	movs	r0, #0
 80108d4:	e7f9      	b.n	80108ca <SecureElementInit+0xc2>
 80108d6:	bf00      	nop
 80108d8:	08013bec 	.word	0x08013bec
 80108dc:	080145e4 	.word	0x080145e4
 80108e0:	080145f0 	.word	0x080145f0
 80108e4:	20001048 	.word	0x20001048

080108e8 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 80108e8:	2b7e      	cmp	r3, #126	; 0x7e
 80108ea:	d807      	bhi.n	80108fc <SecureElementComputeAesCmac+0x14>
{
 80108ec:	b510      	push	{r4, lr}
 80108ee:	b082      	sub	sp, #8
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80108f0:	9c04      	ldr	r4, [sp, #16]
 80108f2:	9400      	str	r4, [sp, #0]
 80108f4:	f7ff ff48 	bl	8010788 <ComputeCmac>
}
 80108f8:	b002      	add	sp, #8
 80108fa:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80108fc:	2003      	movs	r0, #3
}
 80108fe:	4770      	bx	lr

08010900 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 8010900:	b190      	cbz	r0, 8010928 <SecureElementVerifyAesCmac+0x28>
{
 8010902:	b530      	push	{r4, r5, lr}
 8010904:	b085      	sub	sp, #20
 8010906:	460c      	mov	r4, r1
 8010908:	4615      	mov	r5, r2
 801090a:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 801090c:	2000      	movs	r0, #0
 801090e:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8010910:	aa03      	add	r2, sp, #12
 8010912:	9200      	str	r2, [sp, #0]
 8010914:	4622      	mov	r2, r4
 8010916:	f7ff ff37 	bl	8010788 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 801091a:	b918      	cbnz	r0, 8010924 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 801091c:	9b03      	ldr	r3, [sp, #12]
 801091e:	42ab      	cmp	r3, r5
 8010920:	d000      	beq.n	8010924 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8010922:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8010924:	b005      	add	sp, #20
 8010926:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010928:	2002      	movs	r0, #2
}
 801092a:	4770      	bx	lr

0801092c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 801092c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010930:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 8010932:	b350      	cbz	r0, 801098a <SecureElementAesEncrypt+0x5e>
 8010934:	460c      	mov	r4, r1
 8010936:	4615      	mov	r5, r2
 8010938:	461e      	mov	r6, r3
 801093a:	4607      	mov	r7, r0
 801093c:	b343      	cbz	r3, 8010990 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 801093e:	f011 0f0f 	tst.w	r1, #15
 8010942:	d128      	bne.n	8010996 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8010944:	22f0      	movs	r2, #240	; 0xf0
 8010946:	2100      	movs	r1, #0
 8010948:	a801      	add	r0, sp, #4
 801094a:	f000 f946 	bl	8010bda <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 801094e:	4669      	mov	r1, sp
 8010950:	4628      	mov	r0, r5
 8010952:	f7ff fefb 	bl	801074c <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010956:	4680      	mov	r8, r0
 8010958:	b118      	cbz	r0, 8010962 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 801095a:	4640      	mov	r0, r8
 801095c:	b03e      	add	sp, #248	; 0xf8
 801095e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 8010962:	aa01      	add	r2, sp, #4
 8010964:	2110      	movs	r1, #16
 8010966:	9800      	ldr	r0, [sp, #0]
 8010968:	3001      	adds	r0, #1
 801096a:	f7ff fe3b 	bl	80105e4 <lorawan_aes_set_key>
        uint8_t block = 0;
 801096e:	4645      	mov	r5, r8
        while( size != 0 )
 8010970:	e008      	b.n	8010984 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8010972:	aa01      	add	r2, sp, #4
 8010974:	1971      	adds	r1, r6, r5
 8010976:	1978      	adds	r0, r7, r5
 8010978:	f7ff febe 	bl	80106f8 <lorawan_aes_encrypt>
            block = block + 16;
 801097c:	3510      	adds	r5, #16
 801097e:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 8010980:	3c10      	subs	r4, #16
 8010982:	b2a4      	uxth	r4, r4
        while( size != 0 )
 8010984:	2c00      	cmp	r4, #0
 8010986:	d1f4      	bne.n	8010972 <SecureElementAesEncrypt+0x46>
 8010988:	e7e7      	b.n	801095a <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 801098a:	f04f 0802 	mov.w	r8, #2
 801098e:	e7e4      	b.n	801095a <SecureElementAesEncrypt+0x2e>
 8010990:	f04f 0802 	mov.w	r8, #2
 8010994:	e7e1      	b.n	801095a <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010996:	f04f 0805 	mov.w	r8, #5
 801099a:	e7de      	b.n	801095a <SecureElementAesEncrypt+0x2e>

0801099c <SecureElementSetKey>:
{
 801099c:	b530      	push	{r4, r5, lr}
 801099e:	b085      	sub	sp, #20
    if( key == NULL )
 80109a0:	2900      	cmp	r1, #0
 80109a2:	d038      	beq.n	8010a16 <SecureElementSetKey+0x7a>
 80109a4:	460d      	mov	r5, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80109a6:	2300      	movs	r3, #0
 80109a8:	2b09      	cmp	r3, #9
 80109aa:	d830      	bhi.n	8010a0e <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 80109ac:	4a1b      	ldr	r2, [pc, #108]	; (8010a1c <SecureElementSetKey+0x80>)
 80109ae:	6811      	ldr	r1, [r2, #0]
 80109b0:	461c      	mov	r4, r3
 80109b2:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80109b6:	440a      	add	r2, r1
 80109b8:	7c12      	ldrb	r2, [r2, #16]
 80109ba:	4282      	cmp	r2, r0
 80109bc:	d002      	beq.n	80109c4 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80109be:	3301      	adds	r3, #1
 80109c0:	b2db      	uxtb	r3, r3
 80109c2:	e7f1      	b.n	80109a8 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 80109c4:	2880      	cmp	r0, #128	; 0x80
 80109c6:	d00a      	beq.n	80109de <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 80109c8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80109cc:	3310      	adds	r3, #16
 80109ce:	440b      	add	r3, r1
 80109d0:	2210      	movs	r2, #16
 80109d2:	4629      	mov	r1, r5
 80109d4:	1c58      	adds	r0, r3, #1
 80109d6:	f000 f8ea 	bl	8010bae <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 80109da:	2500      	movs	r5, #0
 80109dc:	e018      	b.n	8010a10 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 80109de:	2300      	movs	r3, #0
 80109e0:	9300      	str	r3, [sp, #0]
 80109e2:	9301      	str	r3, [sp, #4]
 80109e4:	9302      	str	r3, [sp, #8]
 80109e6:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 80109e8:	466b      	mov	r3, sp
 80109ea:	227f      	movs	r2, #127	; 0x7f
 80109ec:	2110      	movs	r1, #16
 80109ee:	4628      	mov	r0, r5
 80109f0:	f7ff ff9c 	bl	801092c <SecureElementAesEncrypt>
 80109f4:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 80109f6:	4b09      	ldr	r3, [pc, #36]	; (8010a1c <SecureElementSetKey+0x80>)
 80109f8:	6818      	ldr	r0, [r3, #0]
 80109fa:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80109fe:	3410      	adds	r4, #16
 8010a00:	4420      	add	r0, r4
 8010a02:	2210      	movs	r2, #16
 8010a04:	4669      	mov	r1, sp
 8010a06:	3001      	adds	r0, #1
 8010a08:	f000 f8d1 	bl	8010bae <memcpy1>
                return retval;
 8010a0c:	e000      	b.n	8010a10 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010a0e:	2503      	movs	r5, #3
}
 8010a10:	4628      	mov	r0, r5
 8010a12:	b005      	add	sp, #20
 8010a14:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010a16:	2502      	movs	r5, #2
 8010a18:	e7fa      	b.n	8010a10 <SecureElementSetKey+0x74>
 8010a1a:	bf00      	nop
 8010a1c:	20001048 	.word	0x20001048

08010a20 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8010a20:	b1d0      	cbz	r0, 8010a58 <SecureElementDeriveAndStoreKey+0x38>
{
 8010a22:	b530      	push	{r4, r5, lr}
 8010a24:	b085      	sub	sp, #20
 8010a26:	4614      	mov	r4, r2
 8010a28:	4605      	mov	r5, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8010a2a:	2a7f      	cmp	r2, #127	; 0x7f
 8010a2c:	d101      	bne.n	8010a32 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8010a2e:	2904      	cmp	r1, #4
 8010a30:	d114      	bne.n	8010a5c <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 8010a32:	2300      	movs	r3, #0
 8010a34:	9300      	str	r3, [sp, #0]
 8010a36:	9301      	str	r3, [sp, #4]
 8010a38:	9302      	str	r3, [sp, #8]
 8010a3a:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8010a3c:	466b      	mov	r3, sp
 8010a3e:	460a      	mov	r2, r1
 8010a40:	2110      	movs	r1, #16
 8010a42:	4628      	mov	r0, r5
 8010a44:	f7ff ff72 	bl	801092c <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010a48:	b108      	cbz	r0, 8010a4e <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8010a4a:	b005      	add	sp, #20
 8010a4c:	bd30      	pop	{r4, r5, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8010a4e:	4669      	mov	r1, sp
 8010a50:	4620      	mov	r0, r4
 8010a52:	f7ff ffa3 	bl	801099c <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010a56:	e7f8      	b.n	8010a4a <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8010a58:	2002      	movs	r0, #2
}
 8010a5a:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010a5c:	2003      	movs	r0, #3
 8010a5e:	e7f4      	b.n	8010a4a <SecureElementDeriveAndStoreKey+0x2a>

08010a60 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 8010a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a64:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8010a68:	9d07      	ldr	r5, [sp, #28]
 8010a6a:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8010a6c:	b37b      	cbz	r3, 8010ace <SecureElementProcessJoinAccept+0x6e>
 8010a6e:	4698      	mov	r8, r3
 8010a70:	b37d      	cbz	r5, 8010ad2 <SecureElementProcessJoinAccept+0x72>
 8010a72:	b386      	cbz	r6, 8010ad6 <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8010a74:	2c21      	cmp	r4, #33	; 0x21
 8010a76:	d830      	bhi.n	8010ada <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8010a78:	b2a7      	uxth	r7, r4
 8010a7a:	463a      	mov	r2, r7
 8010a7c:	4619      	mov	r1, r3
 8010a7e:	4628      	mov	r0, r5
 8010a80:	f000 f895 	bl	8010bae <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8010a84:	1e79      	subs	r1, r7, #1
 8010a86:	1c6b      	adds	r3, r5, #1
 8010a88:	2201      	movs	r2, #1
 8010a8a:	b289      	uxth	r1, r1
 8010a8c:	eb08 0002 	add.w	r0, r8, r2
 8010a90:	f7ff ff4c 	bl	801092c <SecureElementAesEncrypt>
 8010a94:	bb20      	cbnz	r0, 8010ae0 <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8010a96:	7aeb      	ldrb	r3, [r5, #11]
 8010a98:	09db      	lsrs	r3, r3, #7
 8010a9a:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 8010a9c:	442c      	add	r4, r5
 8010a9e:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8010aa2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8010aa6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8010aaa:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8010aae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8010ab2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8010ab6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 8010aba:	b99b      	cbnz	r3, 8010ae4 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8010abc:	1f39      	subs	r1, r7, #4
 8010abe:	2301      	movs	r3, #1
 8010ac0:	b289      	uxth	r1, r1
 8010ac2:	4628      	mov	r0, r5
 8010ac4:	f7ff ff1c 	bl	8010900 <SecureElementVerifyAesCmac>
 8010ac8:	b140      	cbz	r0, 8010adc <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 8010aca:	2001      	movs	r0, #1
 8010acc:	e006      	b.n	8010adc <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 8010ace:	2002      	movs	r0, #2
 8010ad0:	e004      	b.n	8010adc <SecureElementProcessJoinAccept+0x7c>
 8010ad2:	2002      	movs	r0, #2
 8010ad4:	e002      	b.n	8010adc <SecureElementProcessJoinAccept+0x7c>
 8010ad6:	2002      	movs	r0, #2
 8010ad8:	e000      	b.n	8010adc <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010ada:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8010adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8010ae0:	2007      	movs	r0, #7
 8010ae2:	e7fb      	b.n	8010adc <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8010ae4:	2004      	movs	r0, #4
 8010ae6:	e7f9      	b.n	8010adc <SecureElementProcessJoinAccept+0x7c>

08010ae8 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
    if( randomNum == NULL )
 8010ae8:	b138      	cbz	r0, 8010afa <SecureElementRandomNumber+0x12>
{
 8010aea:	b510      	push	{r4, lr}
 8010aec:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 8010aee:	4b04      	ldr	r3, [pc, #16]	; (8010b00 <SecureElementRandomNumber+0x18>)
 8010af0:	695b      	ldr	r3, [r3, #20]
 8010af2:	4798      	blx	r3
 8010af4:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8010af6:	2000      	movs	r0, #0
}
 8010af8:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010afa:	2002      	movs	r0, #2
}
 8010afc:	4770      	bx	lr
 8010afe:	bf00      	nop
 8010b00:	08014674 	.word	0x08014674

08010b04 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 8010b04:	b140      	cbz	r0, 8010b18 <SecureElementSetDevEui+0x14>
{
 8010b06:	b508      	push	{r3, lr}
 8010b08:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8010b0a:	2208      	movs	r2, #8
 8010b0c:	4b03      	ldr	r3, [pc, #12]	; (8010b1c <SecureElementSetDevEui+0x18>)
 8010b0e:	6818      	ldr	r0, [r3, #0]
 8010b10:	f000 f84d 	bl	8010bae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010b14:	2000      	movs	r0, #0
}
 8010b16:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010b18:	2002      	movs	r0, #2
}
 8010b1a:	4770      	bx	lr
 8010b1c:	20001048 	.word	0x20001048

08010b20 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 8010b20:	4b01      	ldr	r3, [pc, #4]	; (8010b28 <SecureElementGetDevEui+0x8>)
 8010b22:	6818      	ldr	r0, [r3, #0]
 8010b24:	4770      	bx	lr
 8010b26:	bf00      	nop
 8010b28:	20001048 	.word	0x20001048

08010b2c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 8010b2c:	b148      	cbz	r0, 8010b42 <SecureElementSetJoinEui+0x16>
{
 8010b2e:	b508      	push	{r3, lr}
 8010b30:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 8010b32:	4b05      	ldr	r3, [pc, #20]	; (8010b48 <SecureElementSetJoinEui+0x1c>)
 8010b34:	6818      	ldr	r0, [r3, #0]
 8010b36:	2208      	movs	r2, #8
 8010b38:	4410      	add	r0, r2
 8010b3a:	f000 f838 	bl	8010bae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010b3e:	2000      	movs	r0, #0
}
 8010b40:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010b42:	2002      	movs	r0, #2
}
 8010b44:	4770      	bx	lr
 8010b46:	bf00      	nop
 8010b48:	20001048 	.word	0x20001048

08010b4c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8010b4c:	4b01      	ldr	r3, [pc, #4]	; (8010b54 <SecureElementGetJoinEui+0x8>)
 8010b4e:	6818      	ldr	r0, [r3, #0]
}
 8010b50:	3008      	adds	r0, #8
 8010b52:	4770      	bx	lr
 8010b54:	20001048 	.word	0x20001048

08010b58 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8010b58:	4b09      	ldr	r3, [pc, #36]	; (8010b80 <rand1+0x28>)
 8010b5a:	6818      	ldr	r0, [r3, #0]
 8010b5c:	4909      	ldr	r1, [pc, #36]	; (8010b84 <rand1+0x2c>)
 8010b5e:	f243 0239 	movw	r2, #12345	; 0x3039
 8010b62:	fb01 2000 	mla	r0, r1, r0, r2
 8010b66:	6018      	str	r0, [r3, #0]
 8010b68:	2303      	movs	r3, #3
 8010b6a:	fba3 2300 	umull	r2, r3, r3, r0
 8010b6e:	1ac2      	subs	r2, r0, r3
 8010b70:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8010b74:	0f9b      	lsrs	r3, r3, #30
 8010b76:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 8010b7a:	1ac0      	subs	r0, r0, r3
 8010b7c:	4770      	bx	lr
 8010b7e:	bf00      	nop
 8010b80:	200000c8 	.word	0x200000c8
 8010b84:	41c64e6d 	.word	0x41c64e6d

08010b88 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8010b88:	4b01      	ldr	r3, [pc, #4]	; (8010b90 <srand1+0x8>)
 8010b8a:	6018      	str	r0, [r3, #0]
}
 8010b8c:	4770      	bx	lr
 8010b8e:	bf00      	nop
 8010b90:	200000c8 	.word	0x200000c8

08010b94 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8010b94:	b538      	push	{r3, r4, r5, lr}
 8010b96:	4605      	mov	r5, r0
 8010b98:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8010b9a:	f7ff ffdd 	bl	8010b58 <rand1>
 8010b9e:	1b61      	subs	r1, r4, r5
 8010ba0:	3101      	adds	r1, #1
 8010ba2:	fb90 f3f1 	sdiv	r3, r0, r1
 8010ba6:	fb01 0013 	mls	r0, r1, r3, r0
}
 8010baa:	4428      	add	r0, r5
 8010bac:	bd38      	pop	{r3, r4, r5, pc}

08010bae <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8010bae:	1e53      	subs	r3, r2, #1
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	b12a      	cbz	r2, 8010bc0 <memcpy1+0x12>
    {
        *dst++ = *src++;
 8010bb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bb8:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8010bbc:	461a      	mov	r2, r3
 8010bbe:	e7f6      	b.n	8010bae <memcpy1>
    }
}
 8010bc0:	4770      	bx	lr

08010bc2 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8010bc2:	1e53      	subs	r3, r2, #1
 8010bc4:	4418      	add	r0, r3
    while( size-- )
 8010bc6:	1e53      	subs	r3, r2, #1
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	b12a      	cbz	r2, 8010bd8 <memcpyr+0x16>
    {
        *dst-- = *src++;
 8010bcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bd0:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	e7f6      	b.n	8010bc6 <memcpyr+0x4>
    }
}
 8010bd8:	4770      	bx	lr

08010bda <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8010bda:	1e53      	subs	r3, r2, #1
 8010bdc:	b29b      	uxth	r3, r3
 8010bde:	b11a      	cbz	r2, 8010be8 <memset1+0xe>
    {
        *dst++ = value;
 8010be0:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8010be4:	461a      	mov	r2, r3
 8010be6:	e7f8      	b.n	8010bda <memset1>
    }
}
 8010be8:	4770      	bx	lr
	...

08010bec <Crc32>:
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8010bec:	b1d0      	cbz	r0, 8010c24 <Crc32+0x38>
{
 8010bee:	b470      	push	{r4, r5, r6}
 8010bf0:	4606      	mov	r6, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 8010bf2:	2500      	movs	r5, #0
    uint32_t crc = 0xFFFFFFFF;
 8010bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8010bf8:	e00b      	b.n	8010c12 <Crc32+0x26>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8010bfa:	f340 0400 	sbfx	r4, r0, #0, #1
 8010bfe:	4a0a      	ldr	r2, [pc, #40]	; (8010c28 <Crc32+0x3c>)
 8010c00:	4022      	ands	r2, r4
 8010c02:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8010c06:	3301      	adds	r3, #1
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	2b07      	cmp	r3, #7
 8010c0c:	d9f5      	bls.n	8010bfa <Crc32+0xe>
    for( uint16_t i = 0; i < length; ++i )
 8010c0e:	3501      	adds	r5, #1
 8010c10:	b2ad      	uxth	r5, r5
 8010c12:	428d      	cmp	r5, r1
 8010c14:	d203      	bcs.n	8010c1e <Crc32+0x32>
        crc ^= ( uint32_t )buffer[i];
 8010c16:	5d73      	ldrb	r3, [r6, r5]
 8010c18:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	e7f5      	b.n	8010c0a <Crc32+0x1e>
        }
    }

    return ~crc;
 8010c1e:	43c0      	mvns	r0, r0
}
 8010c20:	bc70      	pop	{r4, r5, r6}
 8010c22:	4770      	bx	lr
        return 0;
 8010c24:	2000      	movs	r0, #0
}
 8010c26:	4770      	bx	lr
 8010c28:	edb88320 	.word	0xedb88320

08010c2c <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8010c2c:	2001      	movs	r0, #1
 8010c2e:	4770      	bx	lr

08010c30 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8010c30:	280a      	cmp	r0, #10
 8010c32:	d807      	bhi.n	8010c44 <RadioGetLoRaBandwidthInHz+0x14>
 8010c34:	e8df f000 	tbb	[pc, r0]
 8010c38:	17110b20 	.word	0x17110b20
 8010c3c:	061e1c1a 	.word	0x061e1c1a
 8010c40:	0e08      	.short	0x0e08
 8010c42:	14          	.byte	0x14
 8010c43:	00          	.byte	0x00
        break;
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
        break;
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8010c44:	2000      	movs	r0, #0
 8010c46:	4770      	bx	lr
        bandwidthInHz = 10417UL;
 8010c48:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8010c4c:	4770      	bx	lr
        bandwidthInHz = 15625UL;
 8010c4e:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 8010c52:	4770      	bx	lr
        bandwidthInHz = 20833UL;
 8010c54:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8010c58:	4770      	bx	lr
        bandwidthInHz = 31250UL;
 8010c5a:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 8010c5e:	4770      	bx	lr
        bandwidthInHz = 41667UL;
 8010c60:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8010c64:	4770      	bx	lr
        bandwidthInHz = 62500UL;
 8010c66:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8010c6a:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 8010c6c:	4804      	ldr	r0, [pc, #16]	; (8010c80 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8010c6e:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 8010c70:	4804      	ldr	r0, [pc, #16]	; (8010c84 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8010c72:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8010c74:	4804      	ldr	r0, [pc, #16]	; (8010c88 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8010c76:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8010c78:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8010c7c:	4770      	bx	lr
 8010c7e:	bf00      	nop
 8010c80:	0001e848 	.word	0x0001e848
 8010c84:	0003d090 	.word	0x0003d090
 8010c88:	0007a120 	.word	0x0007a120

08010c8c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8010c8c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8010c90:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010c92:	b953      	cbnz	r3, 8010caa <RadioGetGfskTimeOnAirNumerator+0x1e>
 8010c94:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 8010c96:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010c98:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8010c9a:	b141      	cbz	r1, 8010cae <RadioGetGfskTimeOnAirNumerator+0x22>
 8010c9c:	2302      	movs	r3, #2
 8010c9e:	f89d 0000 	ldrb.w	r0, [sp]
 8010ca2:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 8010ca4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8010ca8:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010caa:	2000      	movs	r0, #0
 8010cac:	e7f3      	b.n	8010c96 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8010cae:	2300      	movs	r3, #0
 8010cb0:	e7f5      	b.n	8010c9e <RadioGetGfskTimeOnAirNumerator+0x12>

08010cb2 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8010cb2:	b4f0      	push	{r4, r5, r6, r7}
 8010cb4:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8010cb8:	f89d 4018 	ldrb.w	r4, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8010cbc:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8010cbe:	1f4d      	subs	r5, r1, #5
 8010cc0:	2d01      	cmp	r5, #1
 8010cc2:	d92d      	bls.n	8010d20 <RadioGetLoRaTimeOnAirNumerator+0x6e>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010cc4:	b918      	cbnz	r0, 8010cce <RadioGetLoRaTimeOnAirNumerator+0x1c>
 8010cc6:	f1a1 050b 	sub.w	r5, r1, #11
 8010cca:	2d01      	cmp	r5, #1
 8010ccc:	d930      	bls.n	8010d30 <RadioGetLoRaTimeOnAirNumerator+0x7e>
 8010cce:	2801      	cmp	r0, #1
 8010cd0:	d02a      	beq.n	8010d28 <RadioGetLoRaTimeOnAirNumerator+0x76>
    bool    lowDatareOptimize = false;
 8010cd2:	2700      	movs	r7, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010cd4:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8010cd8:	00ed      	lsls	r5, r5, #3
                            ( crcOn ? 16 : 0 ) -
 8010cda:	b36c      	cbz	r4, 8010d38 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8010cdc:	2410      	movs	r4, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010cde:	4425      	add	r5, r4
                            ( 4 * datarate ) +
 8010ce0:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8010ce2:	eba5 0581 	sub.w	r5, r5, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8010ce6:	b34e      	cbz	r6, 8010d3c <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8010ce8:	2400      	movs	r4, #0
                            ( 4 * datarate ) +
 8010cea:	442c      	add	r4, r5

    if( datarate <= 6 )
 8010cec:	2906      	cmp	r1, #6
 8010cee:	d903      	bls.n	8010cf8 <RadioGetLoRaTimeOnAirNumerator+0x46>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8010cf0:	3408      	adds	r4, #8

        if( lowDatareOptimize == true )
 8010cf2:	b10f      	cbz	r7, 8010cf8 <RadioGetLoRaTimeOnAirNumerator+0x46>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8010cf4:	1e88      	subs	r0, r1, #2
 8010cf6:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8010cf8:	2c00      	cmp	r4, #0
 8010cfa:	db21      	blt.n	8010d40 <RadioGetLoRaTimeOnAirNumerator+0x8e>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8010cfc:	4404      	add	r4, r0
 8010cfe:	3c01      	subs	r4, #1
 8010d00:	fb94 f4f0 	sdiv	r4, r4, r0
 8010d04:	fb02 3304 	mla	r3, r2, r4, r3
    int32_t intermediate =
 8010d08:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8010d0c:	2906      	cmp	r1, #6
 8010d0e:	d801      	bhi.n	8010d14 <RadioGetLoRaTimeOnAirNumerator+0x62>
    {
        intermediate += 2;
 8010d10:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8010d14:	0080      	lsls	r0, r0, #2
 8010d16:	3001      	adds	r0, #1
 8010d18:	3902      	subs	r1, #2
}
 8010d1a:	4088      	lsls	r0, r1
 8010d1c:	bcf0      	pop	{r4, r5, r6, r7}
 8010d1e:	4770      	bx	lr
        if( preambleLen < 12 )
 8010d20:	2b0b      	cmp	r3, #11
 8010d22:	d8cf      	bhi.n	8010cc4 <RadioGetLoRaTimeOnAirNumerator+0x12>
            preambleLen = 12;
 8010d24:	230c      	movs	r3, #12
 8010d26:	e7cd      	b.n	8010cc4 <RadioGetLoRaTimeOnAirNumerator+0x12>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010d28:	290c      	cmp	r1, #12
 8010d2a:	d003      	beq.n	8010d34 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8010d2c:	2700      	movs	r7, #0
 8010d2e:	e7d1      	b.n	8010cd4 <RadioGetLoRaTimeOnAirNumerator+0x22>
        lowDatareOptimize = true;
 8010d30:	2701      	movs	r7, #1
 8010d32:	e7cf      	b.n	8010cd4 <RadioGetLoRaTimeOnAirNumerator+0x22>
 8010d34:	2701      	movs	r7, #1
 8010d36:	e7cd      	b.n	8010cd4 <RadioGetLoRaTimeOnAirNumerator+0x22>
                            ( crcOn ? 16 : 0 ) -
 8010d38:	2400      	movs	r4, #0
 8010d3a:	e7d0      	b.n	8010cde <RadioGetLoRaTimeOnAirNumerator+0x2c>
                            ( fixLen ? 0 : 20 );
 8010d3c:	2414      	movs	r4, #20
 8010d3e:	e7d4      	b.n	8010cea <RadioGetLoRaTimeOnAirNumerator+0x38>
        ceilNumerator = 0;
 8010d40:	2400      	movs	r4, #0
 8010d42:	e7db      	b.n	8010cfc <RadioGetLoRaTimeOnAirNumerator+0x4a>

08010d44 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8010d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d46:	b085      	sub	sp, #20
 8010d48:	460e      	mov	r6, r1
 8010d4a:	4615      	mov	r5, r2
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8010d52:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8010d56:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8010d5a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8010d5e:	b148      	cbz	r0, 8010d74 <RadioTimeOnAir+0x30>
 8010d60:	2801      	cmp	r0, #1
 8010d62:	d012      	beq.n	8010d8a <RadioTimeOnAir+0x46>
 8010d64:	2501      	movs	r5, #1
 8010d66:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8010d68:	1960      	adds	r0, r4, r5
 8010d6a:	3801      	subs	r0, #1
}
 8010d6c:	fbb0 f0f5 	udiv	r0, r0, r5
 8010d70:	b005      	add	sp, #20
 8010d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8010d74:	f8cd c004 	str.w	ip, [sp, #4]
 8010d78:	9700      	str	r7, [sp, #0]
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	f7ff ff86 	bl	8010c8c <RadioGetGfskTimeOnAirNumerator>
 8010d80:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010d84:	fb04 f400 	mul.w	r4, r4, r0
        break;
 8010d88:	e7ee      	b.n	8010d68 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8010d8a:	f8cd c008 	str.w	ip, [sp, #8]
 8010d8e:	9701      	str	r7, [sp, #4]
 8010d90:	9300      	str	r3, [sp, #0]
 8010d92:	4613      	mov	r3, r2
 8010d94:	460a      	mov	r2, r1
 8010d96:	4629      	mov	r1, r5
 8010d98:	4630      	mov	r0, r6
 8010d9a:	f7ff ff8a 	bl	8010cb2 <RadioGetLoRaTimeOnAirNumerator>
 8010d9e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010da2:	fb04 f400 	mul.w	r4, r4, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8010da6:	4b03      	ldr	r3, [pc, #12]	; (8010db4 <RadioTimeOnAir+0x70>)
 8010da8:	5d98      	ldrb	r0, [r3, r6]
 8010daa:	f7ff ff41 	bl	8010c30 <RadioGetLoRaBandwidthInHz>
 8010dae:	4605      	mov	r5, r0
        break;
 8010db0:	e7da      	b.n	8010d68 <RadioTimeOnAir+0x24>
 8010db2:	bf00      	nop
 8010db4:	08014670 	.word	0x08014670

08010db8 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8010db8:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8010dba:	4b03      	ldr	r3, [pc, #12]	; (8010dc8 <RadioOnTxTimeoutProcess+0x10>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	b113      	cbz	r3, 8010dc6 <RadioOnTxTimeoutProcess+0xe>
 8010dc0:	685b      	ldr	r3, [r3, #4]
 8010dc2:	b103      	cbz	r3, 8010dc6 <RadioOnTxTimeoutProcess+0xe>
    {
        RadioEvents->TxTimeout( );
 8010dc4:	4798      	blx	r3
    }
}
 8010dc6:	bd08      	pop	{r3, pc}
 8010dc8:	2000114c 	.word	0x2000114c

08010dcc <RadioOnTxTimeoutIrq>:
{
 8010dcc:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8010dce:	f7ff fff3 	bl	8010db8 <RadioOnTxTimeoutProcess>
}
 8010dd2:	bd08      	pop	{r3, pc}

08010dd4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8010dd4:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8010dd6:	4b03      	ldr	r3, [pc, #12]	; (8010de4 <RadioOnRxTimeoutProcess+0x10>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	b113      	cbz	r3, 8010de2 <RadioOnRxTimeoutProcess+0xe>
 8010ddc:	68db      	ldr	r3, [r3, #12]
 8010dde:	b103      	cbz	r3, 8010de2 <RadioOnRxTimeoutProcess+0xe>
    {
        RadioEvents->RxTimeout( );
 8010de0:	4798      	blx	r3
    }
}
 8010de2:	bd08      	pop	{r3, pc}
 8010de4:	2000114c 	.word	0x2000114c

08010de8 <RadioOnRxTimeoutIrq>:
{
 8010de8:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8010dea:	f7ff fff3 	bl	8010dd4 <RadioOnRxTimeoutProcess>
}
 8010dee:	bd08      	pop	{r3, pc}

08010df0 <payload_integration>:
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
    SUBGRF_SetTxContinuousWave( );
}

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8010df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;

    for (i = 0; i < size; i++)
 8010df2:	2300      	movs	r3, #0
 8010df4:	4616      	mov	r6, r2
 8010df6:	429a      	cmp	r2, r3
 8010df8:	dd06      	ble.n	8010e08 <payload_integration+0x18>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8010dfa:	5ccc      	ldrb	r4, [r1, r3]
 8010dfc:	43e4      	mvns	r4, r4
 8010dfe:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 8010e00:	2400      	movs	r4, #0
 8010e02:	54c4      	strb	r4, [r0, r3]
    for (i = 0; i < size; i++)
 8010e04:	3301      	adds	r3, #1
 8010e06:	e7f5      	b.n	8010df4 <payload_integration+0x4>
    }

    for (i = 0; i < (size * 8); i++)
 8010e08:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 8010e0a:	461f      	mov	r7, r3
 8010e0c:	e013      	b.n	8010e36 <payload_integration+0x46>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 8010e0e:	f103 0c07 	add.w	ip, r3, #7
 8010e12:	e021      	b.n	8010e58 <payload_integration+0x68>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8010e14:	fa5f fc8c 	uxtb.w	ip, ip
 8010e18:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8010e1c:	fa4c f505 	asr.w	r5, ip, r5
 8010e20:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 8010e24:	406f      	eors	r7, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8010e26:	f3ce 05c7 	ubfx	r5, lr, #3, #8
 8010e2a:	fa07 fc04 	lsl.w	ip, r7, r4
 8010e2e:	5d44      	ldrb	r4, [r0, r5]
 8010e30:	ea44 040c 	orr.w	r4, r4, ip
 8010e34:	5544      	strb	r4, [r0, r5]
    for (i = 0; i < (size * 8); i++)
 8010e36:	ebb3 0fc6 	cmp.w	r3, r6, lsl #3
 8010e3a:	da23      	bge.n	8010e84 <payload_integration+0x94>
        index_bit = 7 - ( i % 8 );
 8010e3c:	425d      	negs	r5, r3
 8010e3e:	f003 0407 	and.w	r4, r3, #7
 8010e42:	f005 0507 	and.w	r5, r5, #7
 8010e46:	bf58      	it	pl
 8010e48:	426c      	negpl	r4, r5
 8010e4a:	b2e5      	uxtb	r5, r4
 8010e4c:	f1c5 0507 	rsb	r5, r5, #7
 8010e50:	b2ed      	uxtb	r5, r5
        index_byte = i / 8;
 8010e52:	469c      	mov	ip, r3
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	dbda      	blt.n	8010e0e <payload_integration+0x1e>
 8010e58:	ea4f 0cec 	mov.w	ip, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	f1d3 0e00 	rsbs	lr, r3, #0
 8010e62:	f003 0407 	and.w	r4, r3, #7
 8010e66:	f00e 0e07 	and.w	lr, lr, #7
 8010e6a:	bf58      	it	pl
 8010e6c:	f1ce 0400 	rsbpl	r4, lr, #0
 8010e70:	b2e4      	uxtb	r4, r4
 8010e72:	f1c4 0407 	rsb	r4, r4, #7
 8010e76:	b2e4      	uxtb	r4, r4
        index_byte_out = ( i + 1 ) / 8;
 8010e78:	469e      	mov	lr, r3
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	daca      	bge.n	8010e14 <payload_integration+0x24>
 8010e7e:	f103 0e07 	add.w	lr, r3, #7
 8010e82:	e7c7      	b.n	8010e14 <payload_integration+0x24>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8010e84:	01bb      	lsls	r3, r7, #6
 8010e86:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 8010e8a:	b25b      	sxtb	r3, r3
 8010e8c:	b91f      	cbnz	r7, 8010e96 <payload_integration+0xa6>
 8010e8e:	2120      	movs	r1, #32
 8010e90:	430b      	orrs	r3, r1
 8010e92:	5483      	strb	r3, [r0, r2]
}
 8010e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8010e96:	2100      	movs	r1, #0
 8010e98:	e7fa      	b.n	8010e90 <payload_integration+0xa0>
	...

08010e9c <RadioSetMaxPayloadLength>:
{
 8010e9c:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8010e9e:	2801      	cmp	r0, #1
 8010ea0:	d004      	beq.n	8010eac <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8010ea2:	4b0a      	ldr	r3, [pc, #40]	; (8010ecc <RadioSetMaxPayloadLength+0x30>)
 8010ea4:	7d5b      	ldrb	r3, [r3, #21]
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	d008      	beq.n	8010ebc <RadioSetMaxPayloadLength+0x20>
}
 8010eaa:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8010eac:	4b08      	ldr	r3, [pc, #32]	; (8010ed0 <RadioSetMaxPayloadLength+0x34>)
 8010eae:	7019      	strb	r1, [r3, #0]
 8010eb0:	4806      	ldr	r0, [pc, #24]	; (8010ecc <RadioSetMaxPayloadLength+0x30>)
 8010eb2:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010eb4:	300e      	adds	r0, #14
 8010eb6:	f001 fd37 	bl	8012928 <SUBGRF_SetPacketParams>
 8010eba:	e7f6      	b.n	8010eaa <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8010ebc:	4b04      	ldr	r3, [pc, #16]	; (8010ed0 <RadioSetMaxPayloadLength+0x34>)
 8010ebe:	7019      	strb	r1, [r3, #0]
 8010ec0:	4802      	ldr	r0, [pc, #8]	; (8010ecc <RadioSetMaxPayloadLength+0x30>)
 8010ec2:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010ec4:	300e      	adds	r0, #14
 8010ec6:	f001 fd2f 	bl	8012928 <SUBGRF_SetPacketParams>
}
 8010eca:	e7ee      	b.n	8010eaa <RadioSetMaxPayloadLength+0xe>
 8010ecc:	200019d0 	.word	0x200019d0
 8010ed0:	200000cc 	.word	0x200000cc

08010ed4 <RadioRead>:
{
 8010ed4:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister(addr);
 8010ed6:	f001 fbdf 	bl	8012698 <SUBGRF_ReadRegister>
}
 8010eda:	bd08      	pop	{r3, pc}

08010edc <RadioWrite>:
{
 8010edc:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister(addr, data );
 8010ede:	f001 faeb 	bl	80124b8 <SUBGRF_WriteRegister>
}
 8010ee2:	bd08      	pop	{r3, pc}

08010ee4 <RadioTxCw>:
{
 8010ee4:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8010ee6:	f001 fe35 	bl	8012b54 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8010eea:	2101      	movs	r1, #1
 8010eec:	f001 fe1e 	bl	8012b2c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8010ef0:	f001 f970 	bl	80121d4 <SUBGRF_SetTxContinuousWave>
}
 8010ef4:	bd08      	pop	{r3, pc}
	...

08010ef8 <RadioTxPrbs>:
{
 8010ef8:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8010efa:	2101      	movs	r1, #1
 8010efc:	4b07      	ldr	r3, [pc, #28]	; (8010f1c <RadioTxPrbs+0x24>)
 8010efe:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8010f02:	f001 fe13 	bl	8012b2c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8010f06:	212d      	movs	r1, #45	; 0x2d
 8010f08:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8010f0c:	f7ff ffe6 	bl	8010edc <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8010f10:	f001 f967 	bl	80121e2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8010f14:	4802      	ldr	r0, [pc, #8]	; (8010f20 <RadioTxPrbs+0x28>)
 8010f16:	f001 f8f9 	bl	801210c <SUBGRF_SetTx>
}
 8010f1a:	bd08      	pop	{r3, pc}
 8010f1c:	200019d0 	.word	0x200019d0
 8010f20:	000fffff 	.word	0x000fffff

08010f24 <RadioSetRxDutyCycle>:
{
 8010f24:	b538      	push	{r3, r4, r5, lr}
 8010f26:	4604      	mov	r4, r0
 8010f28:	460d      	mov	r5, r1
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8010f2a:	2100      	movs	r1, #0
 8010f2c:	4b04      	ldr	r3, [pc, #16]	; (8010f40 <RadioSetRxDutyCycle+0x1c>)
 8010f2e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8010f32:	f001 fdfb 	bl	8012b2c <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8010f36:	4629      	mov	r1, r5
 8010f38:	4620      	mov	r0, r4
 8010f3a:	f001 f91b 	bl	8012174 <SUBGRF_SetRxDutyCycle>
}
 8010f3e:	bd38      	pop	{r3, r4, r5, pc}
 8010f40:	200019d0 	.word	0x200019d0

08010f44 <RadioRxBoosted>:
{
 8010f44:	b538      	push	{r3, r4, r5, lr}
 8010f46:	4604      	mov	r4, r0
    if (1UL==RFW_Is_Init())
 8010f48:	f001 feda 	bl	8012d00 <RFW_Is_Init>
 8010f4c:	2801      	cmp	r0, #1
 8010f4e:	d014      	beq.n	8010f7a <RadioRxBoosted+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8010f50:	2300      	movs	r3, #0
 8010f52:	461a      	mov	r2, r3
 8010f54:	f240 2162 	movw	r1, #610	; 0x262
 8010f58:	4608      	mov	r0, r1
 8010f5a:	f001 f9ec 	bl	8012336 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8010f5e:	b97c      	cbnz	r4, 8010f80 <RadioRxBoosted+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8010f60:	4c0f      	ldr	r4, [pc, #60]	; (8010fa0 <RadioRxBoosted+0x5c>)
 8010f62:	2100      	movs	r1, #0
 8010f64:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8010f68:	f001 fde0 	bl	8012b2c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8010f6c:	7863      	ldrb	r3, [r4, #1]
 8010f6e:	b183      	cbz	r3, 8010f92 <RadioRxBoosted+0x4e>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8010f70:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010f74:	f001 fab0 	bl	80124d8 <SUBGRF_SetRxBoosted>
}
 8010f78:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit();
 8010f7a:	f001 fec9 	bl	8012d10 <RFW_ReceiveInit>
 8010f7e:	e7ee      	b.n	8010f5e <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8010f80:	4d08      	ldr	r5, [pc, #32]	; (8010fa4 <RadioRxBoosted+0x60>)
 8010f82:	4621      	mov	r1, r4
 8010f84:	4628      	mov	r0, r5
 8010f86:	f002 fb7d 	bl	8013684 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8010f8a:	4628      	mov	r0, r5
 8010f8c:	f002 fb34 	bl	80135f8 <UTIL_TIMER_Start>
 8010f90:	e7e6      	b.n	8010f60 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8010f92:	4b03      	ldr	r3, [pc, #12]	; (8010fa0 <RadioRxBoosted+0x5c>)
 8010f94:	6898      	ldr	r0, [r3, #8]
 8010f96:	0180      	lsls	r0, r0, #6
 8010f98:	f001 fa9e 	bl	80124d8 <SUBGRF_SetRxBoosted>
}
 8010f9c:	e7ec      	b.n	8010f78 <RadioRxBoosted+0x34>
 8010f9e:	bf00      	nop
 8010fa0:	200019d0 	.word	0x200019d0
 8010fa4:	20001a40 	.word	0x20001a40

08010fa8 <RadioStandby>:
{
 8010fa8:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8010faa:	2000      	movs	r0, #0
 8010fac:	f001 f894 	bl	80120d8 <SUBGRF_SetStandby>
}
 8010fb0:	bd08      	pop	{r3, pc}

08010fb2 <RadioGetStatus>:
{
 8010fb2:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8010fb4:	f001 f88a 	bl	80120cc <SUBGRF_GetOperatingMode>
 8010fb8:	2805      	cmp	r0, #5
 8010fba:	d007      	beq.n	8010fcc <RadioGetStatus+0x1a>
 8010fbc:	2807      	cmp	r0, #7
 8010fbe:	d007      	beq.n	8010fd0 <RadioGetStatus+0x1e>
 8010fc0:	2804      	cmp	r0, #4
 8010fc2:	d001      	beq.n	8010fc8 <RadioGetStatus+0x16>
            return RF_IDLE;
 8010fc4:	2000      	movs	r0, #0
}
 8010fc6:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8010fc8:	2002      	movs	r0, #2
 8010fca:	e7fc      	b.n	8010fc6 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8010fcc:	2001      	movs	r0, #1
 8010fce:	e7fa      	b.n	8010fc6 <RadioGetStatus+0x14>
            return RF_CAD;
 8010fd0:	2003      	movs	r0, #3
 8010fd2:	e7f8      	b.n	8010fc6 <RadioGetStatus+0x14>

08010fd4 <RadioIrqProcess>:
{
 8010fd4:	b530      	push	{r4, r5, lr}
 8010fd6:	b083      	sub	sp, #12
    uint8_t size = 0;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8010fde:	9300      	str	r3, [sp, #0]
    switch ( SubgRf.RadioIrq )
 8010fe0:	4b9c      	ldr	r3, [pc, #624]	; (8011254 <RadioIrqProcess+0x280>)
 8010fe2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8010fe6:	2b20      	cmp	r3, #32
 8010fe8:	d829      	bhi.n	801103e <RadioIrqProcess+0x6a>
 8010fea:	b21a      	sxth	r2, r3
 8010fec:	2a00      	cmp	r2, #0
 8010fee:	f000 80eb 	beq.w	80111c8 <RadioIrqProcess+0x1f4>
 8010ff2:	3b01      	subs	r3, #1
 8010ff4:	2b1f      	cmp	r3, #31
 8010ff6:	f200 80e7 	bhi.w	80111c8 <RadioIrqProcess+0x1f4>
 8010ffa:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010ffe:	005f      	.short	0x005f
 8011000:	00e50075 	.word	0x00e50075
 8011004:	00e500df 	.word	0x00e500df
 8011008:	00e500e5 	.word	0x00e500e5
 801100c:	00e500e7 	.word	0x00e500e7
 8011010:	00e500e5 	.word	0x00e500e5
 8011014:	00e500e5 	.word	0x00e500e5
 8011018:	00e500e5 	.word	0x00e500e5
 801101c:	00e500f4 	.word	0x00e500f4
 8011020:	00e500e5 	.word	0x00e500e5
 8011024:	00e500e5 	.word	0x00e500e5
 8011028:	00e500e5 	.word	0x00e500e5
 801102c:	00e500e5 	.word	0x00e500e5
 8011030:	00e500e5 	.word	0x00e500e5
 8011034:	00e500e5 	.word	0x00e500e5
 8011038:	00e500e5 	.word	0x00e500e5
 801103c:	00fb      	.short	0x00fb
 801103e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011042:	f000 80a3 	beq.w	801118c <RadioIrqProcess+0x1b8>
 8011046:	d924      	bls.n	8011092 <RadioIrqProcess+0xbe>
 8011048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801104c:	f040 80bc 	bne.w	80111c8 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8011050:	4b81      	ldr	r3, [pc, #516]	; (8011258 <RadioIrqProcess+0x284>)
 8011052:	2201      	movs	r2, #1
 8011054:	2100      	movs	r1, #0
 8011056:	2002      	movs	r0, #2
 8011058:	f001 ff32 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801105c:	f001 f836 	bl	80120cc <SUBGRF_GetOperatingMode>
 8011060:	2804      	cmp	r0, #4
 8011062:	f000 809e 	beq.w	80111a2 <RadioIrqProcess+0x1ce>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8011066:	f001 f831 	bl	80120cc <SUBGRF_GetOperatingMode>
 801106a:	2805      	cmp	r0, #5
 801106c:	f040 80ac 	bne.w	80111c8 <RadioIrqProcess+0x1f4>
            TimerStop( &RxTimeoutTimer );
 8011070:	487a      	ldr	r0, [pc, #488]	; (801125c <RadioIrqProcess+0x288>)
 8011072:	f002 fa5f 	bl	8013534 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8011076:	2000      	movs	r0, #0
 8011078:	f001 f82e 	bl	80120d8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801107c:	4b78      	ldr	r3, [pc, #480]	; (8011260 <RadioIrqProcess+0x28c>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	2b00      	cmp	r3, #0
 8011082:	f000 80a1 	beq.w	80111c8 <RadioIrqProcess+0x1f4>
 8011086:	68db      	ldr	r3, [r3, #12]
 8011088:	2b00      	cmp	r3, #0
 801108a:	f000 809d 	beq.w	80111c8 <RadioIrqProcess+0x1f4>
                RadioEvents->RxTimeout( );
 801108e:	4798      	blx	r3
 8011090:	e09a      	b.n	80111c8 <RadioIrqProcess+0x1f4>
    switch ( SubgRf.RadioIrq )
 8011092:	2b40      	cmp	r3, #64	; 0x40
 8011094:	f000 80c7 	beq.w	8011226 <RadioIrqProcess+0x252>
 8011098:	2b80      	cmp	r3, #128	; 0x80
 801109a:	f040 8095 	bne.w	80111c8 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 801109e:	2000      	movs	r0, #0
 80110a0:	f001 f81a 	bl	80120d8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80110a4:	4b6e      	ldr	r3, [pc, #440]	; (8011260 <RadioIrqProcess+0x28c>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	f000 808d 	beq.w	80111c8 <RadioIrqProcess+0x1f4>
 80110ae:	699b      	ldr	r3, [r3, #24]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	f000 8089 	beq.w	80111c8 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( false );
 80110b6:	2000      	movs	r0, #0
 80110b8:	4798      	blx	r3
 80110ba:	e085      	b.n	80111c8 <RadioIrqProcess+0x1f4>
        TimerStop( &TxTimeoutTimer );
 80110bc:	4869      	ldr	r0, [pc, #420]	; (8011264 <RadioIrqProcess+0x290>)
 80110be:	f002 fa39 	bl	8013534 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80110c2:	2000      	movs	r0, #0
 80110c4:	f001 f808 	bl	80120d8 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 80110c8:	f001 fe1c 	bl	8012d04 <RFW_Is_LongPacketModeEnabled>
 80110cc:	2801      	cmp	r0, #1
 80110ce:	d008      	beq.n	80110e2 <RadioIrqProcess+0x10e>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80110d0:	4b63      	ldr	r3, [pc, #396]	; (8011260 <RadioIrqProcess+0x28c>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d077      	beq.n	80111c8 <RadioIrqProcess+0x1f4>
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d074      	beq.n	80111c8 <RadioIrqProcess+0x1f4>
            RadioEvents->TxDone( );
 80110de:	4798      	blx	r3
 80110e0:	e072      	b.n	80111c8 <RadioIrqProcess+0x1f4>
            RFW_DeInit_TxLongPacket( );
 80110e2:	f001 fe18 	bl	8012d16 <RFW_DeInit_TxLongPacket>
 80110e6:	e7f3      	b.n	80110d0 <RadioIrqProcess+0xfc>
        TimerStop( &RxTimeoutTimer );
 80110e8:	485c      	ldr	r0, [pc, #368]	; (801125c <RadioIrqProcess+0x288>)
 80110ea:	f002 fa23 	bl	8013534 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80110ee:	4b59      	ldr	r3, [pc, #356]	; (8011254 <RadioIrqProcess+0x280>)
 80110f0:	785b      	ldrb	r3, [r3, #1]
 80110f2:	b1f3      	cbz	r3, 8011132 <RadioIrqProcess+0x15e>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 80110f4:	22ff      	movs	r2, #255	; 0xff
 80110f6:	f10d 0107 	add.w	r1, sp, #7
 80110fa:	485b      	ldr	r0, [pc, #364]	; (8011268 <RadioIrqProcess+0x294>)
 80110fc:	f001 fcfc 	bl	8012af8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8011100:	485a      	ldr	r0, [pc, #360]	; (801126c <RadioIrqProcess+0x298>)
 8011102:	f001 f99d 	bl	8012440 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8011106:	4b56      	ldr	r3, [pc, #344]	; (8011260 <RadioIrqProcess+0x28c>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d05c      	beq.n	80111c8 <RadioIrqProcess+0x1f4>
 801110e:	689c      	ldr	r4, [r3, #8]
 8011110:	2c00      	cmp	r4, #0
 8011112:	d059      	beq.n	80111c8 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 8011114:	4b4f      	ldr	r3, [pc, #316]	; (8011254 <RadioIrqProcess+0x280>)
 8011116:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801111a:	2b01      	cmp	r3, #1
 801111c:	d11d      	bne.n	801115a <RadioIrqProcess+0x186>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801111e:	4a4d      	ldr	r2, [pc, #308]	; (8011254 <RadioIrqProcess+0x280>)
 8011120:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8011124:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8011128:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801112c:	484e      	ldr	r0, [pc, #312]	; (8011268 <RadioIrqProcess+0x294>)
 801112e:	47a0      	blx	r4
                break;
 8011130:	e04a      	b.n	80111c8 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 8011132:	2000      	movs	r0, #0
 8011134:	f000 ffd0 	bl	80120d8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8011138:	2100      	movs	r1, #0
 801113a:	f640 1002 	movw	r0, #2306	; 0x902
 801113e:	f001 f9bb 	bl	80124b8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8011142:	f640 1044 	movw	r0, #2372	; 0x944
 8011146:	f001 faa7 	bl	8012698 <SUBGRF_ReadRegister>
 801114a:	f040 0102 	orr.w	r1, r0, #2
 801114e:	b2c9      	uxtb	r1, r1
 8011150:	f640 1044 	movw	r0, #2372	; 0x944
 8011154:	f001 f9b0 	bl	80124b8 <SUBGRF_WriteRegister>
 8011158:	e7cc      	b.n	80110f4 <RadioIrqProcess+0x120>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801115a:	4c3e      	ldr	r4, [pc, #248]	; (8011254 <RadioIrqProcess+0x280>)
 801115c:	4669      	mov	r1, sp
 801115e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011160:	f001 fd80 	bl	8012c64 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8011164:	4b3e      	ldr	r3, [pc, #248]	; (8011260 <RadioIrqProcess+0x28c>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	689d      	ldr	r5, [r3, #8]
 801116a:	9b00      	ldr	r3, [sp, #0]
 801116c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011170:	4a3f      	ldr	r2, [pc, #252]	; (8011270 <RadioIrqProcess+0x29c>)
 8011172:	fb82 1203 	smull	r1, r2, r2, r3
 8011176:	17db      	asrs	r3, r3, #31
 8011178:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801117c:	b25b      	sxtb	r3, r3
 801117e:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8011182:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011186:	4838      	ldr	r0, [pc, #224]	; (8011268 <RadioIrqProcess+0x294>)
 8011188:	47a8      	blx	r5
                break;
 801118a:	e01d      	b.n	80111c8 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 801118c:	2000      	movs	r0, #0
 801118e:	f000 ffa3 	bl	80120d8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8011192:	4b33      	ldr	r3, [pc, #204]	; (8011260 <RadioIrqProcess+0x28c>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	b1bb      	cbz	r3, 80111c8 <RadioIrqProcess+0x1f4>
 8011198:	699b      	ldr	r3, [r3, #24]
 801119a:	b1ab      	cbz	r3, 80111c8 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( true );
 801119c:	2001      	movs	r0, #1
 801119e:	4798      	blx	r3
 80111a0:	e012      	b.n	80111c8 <RadioIrqProcess+0x1f4>
            TimerStop( &TxTimeoutTimer );
 80111a2:	4830      	ldr	r0, [pc, #192]	; (8011264 <RadioIrqProcess+0x290>)
 80111a4:	f002 f9c6 	bl	8013534 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80111a8:	2000      	movs	r0, #0
 80111aa:	f000 ff95 	bl	80120d8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80111ae:	4b2c      	ldr	r3, [pc, #176]	; (8011260 <RadioIrqProcess+0x28c>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	b14b      	cbz	r3, 80111c8 <RadioIrqProcess+0x1f4>
 80111b4:	685b      	ldr	r3, [r3, #4]
 80111b6:	b13b      	cbz	r3, 80111c8 <RadioIrqProcess+0x1f4>
                RadioEvents->TxTimeout( );
 80111b8:	4798      	blx	r3
 80111ba:	e005      	b.n	80111c8 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80111bc:	4b2d      	ldr	r3, [pc, #180]	; (8011274 <RadioIrqProcess+0x2a0>)
 80111be:	2201      	movs	r2, #1
 80111c0:	2100      	movs	r1, #0
 80111c2:	2002      	movs	r0, #2
 80111c4:	f001 fe7c 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
}
 80111c8:	b003      	add	sp, #12
 80111ca:	bd30      	pop	{r4, r5, pc}
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80111cc:	4b2a      	ldr	r3, [pc, #168]	; (8011278 <RadioIrqProcess+0x2a4>)
 80111ce:	2201      	movs	r2, #1
 80111d0:	2100      	movs	r1, #0
 80111d2:	2002      	movs	r0, #2
 80111d4:	f001 fe74 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 80111d8:	f001 fd92 	bl	8012d00 <RFW_Is_Init>
 80111dc:	2801      	cmp	r0, #1
 80111de:	d1f3      	bne.n	80111c8 <RadioIrqProcess+0x1f4>
            RFW_ReceivePayload( );
 80111e0:	f001 fd9a 	bl	8012d18 <RFW_ReceivePayload>
 80111e4:	e7f0      	b.n	80111c8 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80111e6:	4b25      	ldr	r3, [pc, #148]	; (801127c <RadioIrqProcess+0x2a8>)
 80111e8:	2201      	movs	r2, #1
 80111ea:	2100      	movs	r1, #0
 80111ec:	2002      	movs	r0, #2
 80111ee:	f001 fe67 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80111f2:	e7e9      	b.n	80111c8 <RadioIrqProcess+0x1f4>
        TimerStop( &RxTimeoutTimer );
 80111f4:	4819      	ldr	r0, [pc, #100]	; (801125c <RadioIrqProcess+0x288>)
 80111f6:	f002 f99d 	bl	8013534 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80111fa:	4b16      	ldr	r3, [pc, #88]	; (8011254 <RadioIrqProcess+0x280>)
 80111fc:	785b      	ldrb	r3, [r3, #1]
 80111fe:	b173      	cbz	r3, 801121e <RadioIrqProcess+0x24a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8011200:	4b17      	ldr	r3, [pc, #92]	; (8011260 <RadioIrqProcess+0x28c>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d0df      	beq.n	80111c8 <RadioIrqProcess+0x1f4>
 8011208:	68db      	ldr	r3, [r3, #12]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d0dc      	beq.n	80111c8 <RadioIrqProcess+0x1f4>
            RadioEvents->RxTimeout( );
 801120e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8011210:	4b1b      	ldr	r3, [pc, #108]	; (8011280 <RadioIrqProcess+0x2ac>)
 8011212:	2201      	movs	r2, #1
 8011214:	2100      	movs	r1, #0
 8011216:	2002      	movs	r0, #2
 8011218:	f001 fe52 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
 801121c:	e7d4      	b.n	80111c8 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 801121e:	2000      	movs	r0, #0
 8011220:	f000 ff5a 	bl	80120d8 <SUBGRF_SetStandby>
 8011224:	e7ec      	b.n	8011200 <RadioIrqProcess+0x22c>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8011226:	4b17      	ldr	r3, [pc, #92]	; (8011284 <RadioIrqProcess+0x2b0>)
 8011228:	2201      	movs	r2, #1
 801122a:	2100      	movs	r1, #0
 801122c:	2002      	movs	r0, #2
 801122e:	f001 fe47 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8011232:	4b08      	ldr	r3, [pc, #32]	; (8011254 <RadioIrqProcess+0x280>)
 8011234:	785b      	ldrb	r3, [r3, #1]
 8011236:	b143      	cbz	r3, 801124a <RadioIrqProcess+0x276>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8011238:	4b09      	ldr	r3, [pc, #36]	; (8011260 <RadioIrqProcess+0x28c>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d0c3      	beq.n	80111c8 <RadioIrqProcess+0x1f4>
 8011240:	691b      	ldr	r3, [r3, #16]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d0c0      	beq.n	80111c8 <RadioIrqProcess+0x1f4>
            RadioEvents->RxError( );
 8011246:	4798      	blx	r3
}
 8011248:	e7be      	b.n	80111c8 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 801124a:	2000      	movs	r0, #0
 801124c:	f000 ff44 	bl	80120d8 <SUBGRF_SetStandby>
 8011250:	e7f2      	b.n	8011238 <RadioIrqProcess+0x264>
 8011252:	bf00      	nop
 8011254:	200019d0 	.word	0x200019d0
 8011258:	08014604 	.word	0x08014604
 801125c:	20001a40 	.word	0x20001a40
 8011260:	2000114c 	.word	0x2000114c
 8011264:	20001a28 	.word	0x20001a28
 8011268:	2000104c 	.word	0x2000104c
 801126c:	200019f4 	.word	0x200019f4
 8011270:	10624dd3 	.word	0x10624dd3
 8011274:	08014618 	.word	0x08014618
 8011278:	08014624 	.word	0x08014624
 801127c:	08014630 	.word	0x08014630
 8011280:	0801463c 	.word	0x0801463c
 8011284:	08014648 	.word	0x08014648

08011288 <RadioOnDioIrq>:
{
 8011288:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 801128a:	4b03      	ldr	r3, [pc, #12]	; (8011298 <RadioOnDioIrq+0x10>)
 801128c:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8011290:	f7ff fea0 	bl	8010fd4 <RadioIrqProcess>
}
 8011294:	bd08      	pop	{r3, pc}
 8011296:	bf00      	nop
 8011298:	200019d0 	.word	0x200019d0

0801129c <RadioGetWakeupTime>:
{
 801129c:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801129e:	f001 fc70 	bl	8012b82 <SUBGRF_GetRadioWakeUpTime>
}
 80112a2:	3003      	adds	r0, #3
 80112a4:	bd08      	pop	{r3, pc}

080112a6 <RadioReadRegisters>:
{
 80112a6:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 80112a8:	f001 fbb0 	bl	8012a0c <SUBGRF_ReadRegisters>
}
 80112ac:	bd08      	pop	{r3, pc}

080112ae <RadioWriteRegisters>:
{
 80112ae:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 80112b0:	f001 faf8 	bl	80128a4 <SUBGRF_WriteRegisters>
}
 80112b4:	bd08      	pop	{r3, pc}

080112b6 <RadioRssi>:
{
 80112b6:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 80112b8:	f001 f8b4 	bl	8012424 <SUBGRF_GetRssiInst>
}
 80112bc:	b200      	sxth	r0, r0
 80112be:	bd08      	pop	{r3, pc}

080112c0 <RadioSetTxContinuousWave>:
{
 80112c0:	b538      	push	{r3, r4, r5, lr}
 80112c2:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80112c4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80112c8:	fb04 f402 	mul.w	r4, r4, r2
    SUBGRF_SetRfFrequency( freq );
 80112cc:	f001 f86a 	bl	80123a4 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 80112d0:	4628      	mov	r0, r5
 80112d2:	f001 fc3f 	bl	8012b54 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 80112d6:	2101      	movs	r1, #1
 80112d8:	f001 fc28 	bl	8012b2c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80112dc:	f000 ff7a 	bl	80121d4 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80112e0:	4d04      	ldr	r5, [pc, #16]	; (80112f4 <RadioSetTxContinuousWave+0x34>)
 80112e2:	4621      	mov	r1, r4
 80112e4:	4628      	mov	r0, r5
 80112e6:	f002 f9cd 	bl	8013684 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80112ea:	4628      	mov	r0, r5
 80112ec:	f002 f984 	bl	80135f8 <UTIL_TIMER_Start>
}
 80112f0:	bd38      	pop	{r3, r4, r5, pc}
 80112f2:	bf00      	nop
 80112f4:	20001a28 	.word	0x20001a28

080112f8 <RadioSetChannel>:
{
 80112f8:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 80112fa:	f001 f853 	bl	80123a4 <SUBGRF_SetRfFrequency>
}
 80112fe:	bd08      	pop	{r3, pc}

08011300 <RadioStartCad>:
{
 8011300:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8011302:	2100      	movs	r1, #0
 8011304:	4b07      	ldr	r3, [pc, #28]	; (8011324 <RadioStartCad+0x24>)
 8011306:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 801130a:	f001 fc0f 	bl	8012b2c <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801130e:	2300      	movs	r3, #0
 8011310:	461a      	mov	r2, r3
 8011312:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8011316:	4608      	mov	r0, r1
 8011318:	f001 f80d 	bl	8012336 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 801131c:	f000 ff4e 	bl	80121bc <SUBGRF_SetCad>
}
 8011320:	bd08      	pop	{r3, pc}
 8011322:	bf00      	nop
 8011324:	200019d0 	.word	0x200019d0

08011328 <RadioRx>:
{
 8011328:	b538      	push	{r3, r4, r5, lr}
 801132a:	4604      	mov	r4, r0
    if ( 1UL == RFW_Is_Init( ) )
 801132c:	f001 fce8 	bl	8012d00 <RFW_Is_Init>
 8011330:	2801      	cmp	r0, #1
 8011332:	d014      	beq.n	801135e <RadioRx+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8011334:	2300      	movs	r3, #0
 8011336:	461a      	mov	r2, r3
 8011338:	f240 2162 	movw	r1, #610	; 0x262
 801133c:	4608      	mov	r0, r1
 801133e:	f000 fffa 	bl	8012336 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8011342:	b97c      	cbnz	r4, 8011364 <RadioRx+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8011344:	4c0f      	ldr	r4, [pc, #60]	; (8011384 <RadioRx+0x5c>)
 8011346:	2100      	movs	r1, #0
 8011348:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 801134c:	f001 fbee 	bl	8012b2c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8011350:	7863      	ldrb	r3, [r4, #1]
 8011352:	b183      	cbz	r3, 8011376 <RadioRx+0x4e>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8011354:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011358:	f000 fef2 	bl	8012140 <SUBGRF_SetRx>
}
 801135c:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit( );
 801135e:	f001 fcd7 	bl	8012d10 <RFW_ReceiveInit>
 8011362:	e7ee      	b.n	8011342 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8011364:	4d08      	ldr	r5, [pc, #32]	; (8011388 <RadioRx+0x60>)
 8011366:	4621      	mov	r1, r4
 8011368:	4628      	mov	r0, r5
 801136a:	f002 f98b 	bl	8013684 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801136e:	4628      	mov	r0, r5
 8011370:	f002 f942 	bl	80135f8 <UTIL_TIMER_Start>
 8011374:	e7e6      	b.n	8011344 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8011376:	4b03      	ldr	r3, [pc, #12]	; (8011384 <RadioRx+0x5c>)
 8011378:	6898      	ldr	r0, [r3, #8]
 801137a:	0180      	lsls	r0, r0, #6
 801137c:	f000 fee0 	bl	8012140 <SUBGRF_SetRx>
}
 8011380:	e7ec      	b.n	801135c <RadioRx+0x34>
 8011382:	bf00      	nop
 8011384:	200019d0 	.word	0x200019d0
 8011388:	20001a40 	.word	0x20001a40

0801138c <RadioSleep>:
{
 801138c:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 801138e:	f04f 0004 	mov.w	r0, #4
 8011392:	f001 f9db 	bl	801274c <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8011396:	2002      	movs	r0, #2
 8011398:	f7f2 f926 	bl	80035e8 <HAL_Delay>
}
 801139c:	bd08      	pop	{r3, pc}
	...

080113a0 <RadioSend>:
{
 80113a0:	b570      	push	{r4, r5, r6, lr}
 80113a2:	b082      	sub	sp, #8
 80113a4:	4605      	mov	r5, r0
 80113a6:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80113a8:	2300      	movs	r3, #0
 80113aa:	461a      	mov	r2, r3
 80113ac:	f240 2101 	movw	r1, #513	; 0x201
 80113b0:	4608      	mov	r0, r1
 80113b2:	f000 ffc0 	bl	8012336 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 80113b6:	4e5a      	ldr	r6, [pc, #360]	; (8011520 <RadioSend+0x180>)
 80113b8:	2101      	movs	r1, #1
 80113ba:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 80113be:	f001 fbb5 	bl	8012b2c <SUBGRF_SetSwitch>
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 80113c2:	7833      	ldrb	r3, [r6, #0]
 80113c4:	2b01      	cmp	r3, #1
 80113c6:	d103      	bne.n	80113d0 <RadioSend+0x30>
 80113c8:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 80113cc:	2b06      	cmp	r3, #6
 80113ce:	d012      	beq.n	80113f6 <RadioSend+0x56>
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80113d0:	f640 0089 	movw	r0, #2185	; 0x889
 80113d4:	f001 f960 	bl	8012698 <SUBGRF_ReadRegister>
 80113d8:	f040 0104 	orr.w	r1, r0, #4
 80113dc:	b2c9      	uxtb	r1, r1
 80113de:	f640 0089 	movw	r0, #2185	; 0x889
 80113e2:	f001 f869 	bl	80124b8 <SUBGRF_WriteRegister>
    switch(SubgRf.Modem)
 80113e6:	4b4e      	ldr	r3, [pc, #312]	; (8011520 <RadioSend+0x180>)
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	2b03      	cmp	r3, #3
 80113ec:	d818      	bhi.n	8011420 <RadioSend+0x80>
 80113ee:	e8df f003 	tbb	[pc, r3]
 80113f2:	0d22      	.short	0x0d22
 80113f4:	5a4d      	.short	0x5a4d
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 80113f6:	f640 0089 	movw	r0, #2185	; 0x889
 80113fa:	f001 f94d 	bl	8012698 <SUBGRF_ReadRegister>
 80113fe:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8011402:	f640 0089 	movw	r0, #2185	; 0x889
 8011406:	f001 f857 	bl	80124b8 <SUBGRF_WriteRegister>
 801140a:	e7ec      	b.n	80113e6 <RadioSend+0x46>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801140c:	4844      	ldr	r0, [pc, #272]	; (8011520 <RadioSend+0x180>)
 801140e:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011410:	300e      	adds	r0, #14
 8011412:	f001 fa89 	bl	8012928 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8011416:	2200      	movs	r2, #0
 8011418:	4621      	mov	r1, r4
 801141a:	4628      	mov	r0, r5
 801141c:	f001 fb53 	bl	8012ac6 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8011420:	4c40      	ldr	r4, [pc, #256]	; (8011524 <RadioSend+0x184>)
 8011422:	4b3f      	ldr	r3, [pc, #252]	; (8011520 <RadioSend+0x180>)
 8011424:	6859      	ldr	r1, [r3, #4]
 8011426:	4620      	mov	r0, r4
 8011428:	f002 f92c 	bl	8013684 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801142c:	4620      	mov	r0, r4
 801142e:	f002 f8e3 	bl	80135f8 <UTIL_TIMER_Start>
}
 8011432:	b002      	add	sp, #8
 8011434:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8011436:	f001 fc63 	bl	8012d00 <RFW_Is_Init>
 801143a:	2801      	cmp	r0, #1
 801143c:	d00a      	beq.n	8011454 <RadioSend+0xb4>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801143e:	4838      	ldr	r0, [pc, #224]	; (8011520 <RadioSend+0x180>)
 8011440:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011442:	300e      	adds	r0, #14
 8011444:	f001 fa70 	bl	8012928 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8011448:	2200      	movs	r2, #0
 801144a:	4621      	mov	r1, r4
 801144c:	4628      	mov	r0, r5
 801144e:	f001 fb3a 	bl	8012ac6 <SUBGRF_SendPayload>
 8011452:	e7e5      	b.n	8011420 <RadioSend+0x80>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8011454:	f10d 0207 	add.w	r2, sp, #7
 8011458:	4621      	mov	r1, r4
 801145a:	4628      	mov	r0, r5
 801145c:	f001 fc55 	bl	8012d0a <RFW_TransmitInit>
 8011460:	b968      	cbnz	r0, 801147e <RadioSend+0xde>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8011462:	482f      	ldr	r0, [pc, #188]	; (8011520 <RadioSend+0x180>)
 8011464:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011468:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801146a:	300e      	adds	r0, #14
 801146c:	f001 fa5c 	bl	8012928 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8011470:	2200      	movs	r2, #0
 8011472:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011476:	4628      	mov	r0, r5
 8011478:	f001 fb25 	bl	8012ac6 <SUBGRF_SendPayload>
 801147c:	e7d0      	b.n	8011420 <RadioSend+0x80>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801147e:	4b2a      	ldr	r3, [pc, #168]	; (8011528 <RadioSend+0x188>)
 8011480:	2201      	movs	r2, #1
 8011482:	2100      	movs	r1, #0
 8011484:	2002      	movs	r0, #2
 8011486:	f001 fd1b 	bl	8012ec0 <UTIL_ADV_TRACE_COND_FSend>
                return;
 801148a:	e7d2      	b.n	8011432 <RadioSend+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801148c:	4824      	ldr	r0, [pc, #144]	; (8011520 <RadioSend+0x180>)
 801148e:	2302      	movs	r3, #2
 8011490:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8011492:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011494:	300e      	adds	r0, #14
 8011496:	f001 fa47 	bl	8012928 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801149a:	2200      	movs	r2, #0
 801149c:	4621      	mov	r1, r4
 801149e:	4628      	mov	r0, r5
 80114a0:	f001 fb11 	bl	8012ac6 <SUBGRF_SendPayload>
            break;
 80114a4:	e7bc      	b.n	8011420 <RadioSend+0x80>
            payload_integration( RadioBuffer, buffer, size );
 80114a6:	4622      	mov	r2, r4
 80114a8:	4629      	mov	r1, r5
 80114aa:	4820      	ldr	r0, [pc, #128]	; (801152c <RadioSend+0x18c>)
 80114ac:	f7ff fca0 	bl	8010df0 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80114b0:	4e1b      	ldr	r6, [pc, #108]	; (8011520 <RadioSend+0x180>)
 80114b2:	2302      	movs	r3, #2
 80114b4:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80114b6:	1c65      	adds	r5, r4, #1
 80114b8:	b2ed      	uxtb	r5, r5
 80114ba:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80114bc:	f106 000e 	add.w	r0, r6, #14
 80114c0:	f001 fa32 	bl	8012928 <SUBGRF_SetPacketParams>
            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 80114c4:	2100      	movs	r1, #0
 80114c6:	20f1      	movs	r0, #241	; 0xf1
 80114c8:	f7ff fd08 	bl	8010edc <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 80114cc:	2100      	movs	r1, #0
 80114ce:	20f0      	movs	r0, #240	; 0xf0
 80114d0:	f7ff fd04 	bl	8010edc <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80114d4:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80114d6:	2b64      	cmp	r3, #100	; 0x64
 80114d8:	d019      	beq.n	801150e <RadioSend+0x16e>
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 80114da:	21e1      	movs	r1, #225	; 0xe1
 80114dc:	20f3      	movs	r0, #243	; 0xf3
 80114de:	f7ff fcfd 	bl	8010edc <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 80114e2:	2104      	movs	r1, #4
 80114e4:	20f2      	movs	r0, #242	; 0xf2
 80114e6:	f7ff fcf9 	bl	8010edc <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 80114ea:	00e1      	lsls	r1, r4, #3
 80114ec:	1c8c      	adds	r4, r1, #2
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80114ee:	0a09      	lsrs	r1, r1, #8
 80114f0:	20f4      	movs	r0, #244	; 0xf4
 80114f2:	f7ff fcf3 	bl	8010edc <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 80114f6:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 80114fa:	20f5      	movs	r0, #245	; 0xf5
 80114fc:	f7ff fcee 	bl	8010edc <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8011500:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8011504:	4629      	mov	r1, r5
 8011506:	4809      	ldr	r0, [pc, #36]	; (801152c <RadioSend+0x18c>)
 8011508:	f001 fadd 	bl	8012ac6 <SUBGRF_SendPayload>
            break;
 801150c:	e788      	b.n	8011420 <RadioSend+0x80>
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 801150e:	2170      	movs	r1, #112	; 0x70
 8011510:	20f3      	movs	r0, #243	; 0xf3
 8011512:	f7ff fce3 	bl	8010edc <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8011516:	211d      	movs	r1, #29
 8011518:	20f2      	movs	r0, #242	; 0xf2
 801151a:	f7ff fcdf 	bl	8010edc <RadioWrite>
 801151e:	e7e4      	b.n	80114ea <RadioSend+0x14a>
 8011520:	200019d0 	.word	0x200019d0
 8011524:	20001a28 	.word	0x20001a28
 8011528:	08014658 	.word	0x08014658
 801152c:	2000104c 	.word	0x2000104c

08011530 <RadioSetModem>:
{
 8011530:	b510      	push	{r4, lr}
 8011532:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8011534:	4b19      	ldr	r3, [pc, #100]	; (801159c <RadioSetModem+0x6c>)
 8011536:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem(modem);
 8011538:	f001 fbef 	bl	8012d1a <RFW_SetRadioModem>
    switch( modem )
 801153c:	3c01      	subs	r4, #1
 801153e:	2c03      	cmp	r4, #3
 8011540:	d803      	bhi.n	801154a <RadioSetModem+0x1a>
 8011542:	e8df f004 	tbb	[pc, r4]
 8011546:	1509      	.short	0x1509
 8011548:	231c      	.short	0x231c
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801154a:	2000      	movs	r0, #0
 801154c:	f001 f804 	bl	8012558 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011550:	4b12      	ldr	r3, [pc, #72]	; (801159c <RadioSetModem+0x6c>)
 8011552:	2200      	movs	r2, #0
 8011554:	735a      	strb	r2, [r3, #13]
        break;
 8011556:	e011      	b.n	801157c <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8011558:	2001      	movs	r0, #1
 801155a:	f000 fffd 	bl	8012558 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801155e:	4b0f      	ldr	r3, [pc, #60]	; (801159c <RadioSetModem+0x6c>)
 8011560:	7b5a      	ldrb	r2, [r3, #13]
 8011562:	7b18      	ldrb	r0, [r3, #12]
 8011564:	4282      	cmp	r2, r0
 8011566:	d009      	beq.n	801157c <RadioSetModem+0x4c>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8011568:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801156a:	f000 fa83 	bl	8011a74 <RadioSetPublicNetwork>
 801156e:	e005      	b.n	801157c <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8011570:	2002      	movs	r0, #2
 8011572:	f000 fff1 	bl	8012558 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011576:	4b09      	ldr	r3, [pc, #36]	; (801159c <RadioSetModem+0x6c>)
 8011578:	2200      	movs	r2, #0
 801157a:	735a      	strb	r2, [r3, #13]
}
 801157c:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801157e:	2002      	movs	r0, #2
 8011580:	f000 ffea 	bl	8012558 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011584:	4b05      	ldr	r3, [pc, #20]	; (801159c <RadioSetModem+0x6c>)
 8011586:	2200      	movs	r2, #0
 8011588:	735a      	strb	r2, [r3, #13]
        break;
 801158a:	e7f7      	b.n	801157c <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801158c:	2000      	movs	r0, #0
 801158e:	f000 ffe3 	bl	8012558 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011592:	4b02      	ldr	r3, [pc, #8]	; (801159c <RadioSetModem+0x6c>)
 8011594:	2200      	movs	r2, #0
 8011596:	735a      	strb	r2, [r3, #13]
}
 8011598:	e7f0      	b.n	801157c <RadioSetModem+0x4c>
 801159a:	bf00      	nop
 801159c:	200019d0 	.word	0x200019d0

080115a0 <RadioSetTxGenericConfig>:
    }
    return status;
}

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 80115a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115a4:	b086      	sub	sp, #24
 80115a6:	4605      	mov	r5, r0
 80115a8:	460c      	mov	r4, r1
 80115aa:	4617      	mov	r7, r2
 80115ac:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 80115ae:	2300      	movs	r3, #0
 80115b0:	9304      	str	r3, [sp, #16]
 80115b2:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80115b4:	f001 fba3 	bl	8012cfe <RFW_DeInit>
    switch( modem )
 80115b8:	2d01      	cmp	r5, #1
 80115ba:	f000 8085 	beq.w	80116c8 <RadioSetTxGenericConfig+0x128>
 80115be:	2d02      	cmp	r5, #2
 80115c0:	f000 80ed 	beq.w	801179e <RadioSetTxGenericConfig+0x1fe>
 80115c4:	b165      	cbz	r5, 80115e0 <RadioSetTxGenericConfig+0x40>
        break;
    default:
        break;
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80115c6:	4638      	mov	r0, r7
 80115c8:	f001 fac4 	bl	8012b54 <SUBGRF_SetRfTxPower>
 80115cc:	4c84      	ldr	r4, [pc, #528]	; (80117e0 <RadioSetTxGenericConfig+0x240>)
 80115ce:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80115d2:	f001 fb99 	bl	8012d08 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80115d6:	6066      	str	r6, [r4, #4]
    return 0;
 80115d8:	2000      	movs	r0, #0
}
 80115da:	b006      	add	sp, #24
 80115dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80115e0:	68a3      	ldr	r3, [r4, #8]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	f000 80f0 	beq.w	80117c8 <RadioSetTxGenericConfig+0x228>
 80115e8:	6923      	ldr	r3, [r4, #16]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	f000 80ef 	beq.w	80117ce <RadioSetTxGenericConfig+0x22e>
        if( config->fsk.SyncWordLength > 8 )
 80115f0:	7d20      	ldrb	r0, [r4, #20]
 80115f2:	2808      	cmp	r0, #8
 80115f4:	f200 80ee 	bhi.w	80117d4 <RadioSetTxGenericConfig+0x234>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80115f8:	2100      	movs	r1, #0
 80115fa:	e006      	b.n	801160a <RadioSetTxGenericConfig+0x6a>
                syncword[i] = config->fsk.SyncWord[i];
 80115fc:	69a3      	ldr	r3, [r4, #24]
 80115fe:	5c5a      	ldrb	r2, [r3, r1]
 8011600:	ab06      	add	r3, sp, #24
 8011602:	440b      	add	r3, r1
 8011604:	f803 2c08 	strb.w	r2, [r3, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8011608:	3101      	adds	r1, #1
 801160a:	4288      	cmp	r0, r1
 801160c:	dcf6      	bgt.n	80115fc <RadioSetTxGenericConfig+0x5c>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801160e:	4d74      	ldr	r5, [pc, #464]	; (80117e0 <RadioSetTxGenericConfig+0x240>)
 8011610:	f04f 0800 	mov.w	r8, #0
 8011614:	f885 8038 	strb.w	r8, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8011618:	68a3      	ldr	r3, [r4, #8]
 801161a:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801161c:	7823      	ldrb	r3, [r4, #0]
 801161e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8011622:	6860      	ldr	r0, [r4, #4]
 8011624:	f001 fb04 	bl	8012c30 <SUBGRF_GetFskBandwidthRegValue>
 8011628:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801162c:	68e3      	ldr	r3, [r4, #12]
 801162e:	642b      	str	r3, [r5, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011630:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8011634:	6923      	ldr	r3, [r4, #16]
 8011636:	00db      	lsls	r3, r3, #3
 8011638:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801163a:	2304      	movs	r3, #4
 801163c:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801163e:	7d23      	ldrb	r3, [r4, #20]
 8011640:	00db      	lsls	r3, r3, #3
 8011642:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8011644:	f885 8014 	strb.w	r8, [r5, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8011648:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 801164c:	2b02      	cmp	r3, #2
 801164e:	d008      	beq.n	8011662 <RadioSetTxGenericConfig+0xc2>
 8011650:	7fa2      	ldrb	r2, [r4, #30]
 8011652:	2a02      	cmp	r2, #2
 8011654:	d005      	beq.n	8011662 <RadioSetTxGenericConfig+0xc2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8011656:	7fe0      	ldrb	r0, [r4, #31]
 8011658:	4961      	ldr	r1, [pc, #388]	; (80117e0 <RadioSetTxGenericConfig+0x240>)
 801165a:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801165c:	760b      	strb	r3, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801165e:	754a      	strb	r2, [r1, #21]
 8011660:	e018      	b.n	8011694 <RadioSetTxGenericConfig+0xf4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8011662:	7fe2      	ldrb	r2, [r4, #31]
 8011664:	f102 030f 	add.w	r3, r2, #15
 8011668:	b2db      	uxtb	r3, r3
 801166a:	2b01      	cmp	r3, #1
 801166c:	d901      	bls.n	8011672 <RadioSetTxGenericConfig+0xd2>
 801166e:	2a01      	cmp	r2, #1
 8011670:	d127      	bne.n	80116c2 <RadioSetTxGenericConfig+0x122>
            ConfigGeneric.rtx = CONFIG_TX;
 8011672:	2301      	movs	r3, #1
 8011674:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 8011678:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801167a:	4a5a      	ldr	r2, [pc, #360]	; (80117e4 <RadioSetTxGenericConfig+0x244>)
 801167c:	4b5a      	ldr	r3, [pc, #360]	; (80117e8 <RadioSetTxGenericConfig+0x248>)
 801167e:	6819      	ldr	r1, [r3, #0]
 8011680:	a801      	add	r0, sp, #4
 8011682:	f001 fb39 	bl	8012cf8 <RFW_Init>
 8011686:	b9e0      	cbnz	r0, 80116c2 <RadioSetTxGenericConfig+0x122>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8011688:	4b55      	ldr	r3, [pc, #340]	; (80117e0 <RadioSetTxGenericConfig+0x240>)
 801168a:	2200      	movs	r2, #0
 801168c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801168e:	2101      	movs	r1, #1
 8011690:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8011692:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8011694:	f7ff fc88 	bl	8010fa8 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8011698:	2000      	movs	r0, #0
 801169a:	f7ff ff49 	bl	8011530 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801169e:	4d53      	ldr	r5, [pc, #332]	; (80117ec <RadioSetTxGenericConfig+0x24c>)
 80116a0:	4628      	mov	r0, r5
 80116a2:	f000 ff71 	bl	8012588 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80116a6:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 80116aa:	f001 f93d 	bl	8012928 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80116ae:	a804      	add	r0, sp, #16
 80116b0:	f001 f908 	bl	80128c4 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80116b4:	8ba0      	ldrh	r0, [r4, #28]
 80116b6:	f001 f86b 	bl	8012790 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 80116ba:	8c20      	ldrh	r0, [r4, #32]
 80116bc:	f001 f91f 	bl	80128fe <SUBGRF_SetCrcPolynomial>
        break;
 80116c0:	e781      	b.n	80115c6 <RadioSetTxGenericConfig+0x26>
                return -1;
 80116c2:	f04f 30ff 	mov.w	r0, #4294967295
 80116c6:	e788      	b.n	80115da <RadioSetTxGenericConfig+0x3a>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80116c8:	4b45      	ldr	r3, [pc, #276]	; (80117e0 <RadioSetTxGenericConfig+0x240>)
 80116ca:	2201      	movs	r2, #1
 80116cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80116d0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80116d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80116d8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80116dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80116e0:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 80116e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80116e8:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80116ec:	2b01      	cmp	r3, #1
 80116ee:	d036      	beq.n	801175e <RadioSetTxGenericConfig+0x1be>
 80116f0:	2b02      	cmp	r3, #2
 80116f2:	d039      	beq.n	8011768 <RadioSetTxGenericConfig+0x1c8>
 80116f4:	b373      	cbz	r3, 8011754 <RadioSetTxGenericConfig+0x1b4>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80116f6:	4d3a      	ldr	r5, [pc, #232]	; (80117e0 <RadioSetTxGenericConfig+0x240>)
 80116f8:	f04f 0801 	mov.w	r8, #1
 80116fc:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8011700:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8011702:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8011704:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8011708:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801170a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801170e:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8011712:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8011716:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 801171a:	f7ff fc45 	bl	8010fa8 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801171e:	4640      	mov	r0, r8
 8011720:	f7ff ff06 	bl	8011530 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011724:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8011728:	f000 ff2e 	bl	8012588 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801172c:	f105 000e 	add.w	r0, r5, #14
 8011730:	f001 f8fa 	bl	8012928 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8011734:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 8011738:	2b06      	cmp	r3, #6
 801173a:	d025      	beq.n	8011788 <RadioSetTxGenericConfig+0x1e8>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 801173c:	f640 0089 	movw	r0, #2185	; 0x889
 8011740:	f000 ffaa 	bl	8012698 <SUBGRF_ReadRegister>
 8011744:	f040 0104 	orr.w	r1, r0, #4
 8011748:	b2c9      	uxtb	r1, r1
 801174a:	f640 0089 	movw	r0, #2185	; 0x889
 801174e:	f000 feb3 	bl	80124b8 <SUBGRF_WriteRegister>
 8011752:	e738      	b.n	80115c6 <RadioSetTxGenericConfig+0x26>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8011754:	4b22      	ldr	r3, [pc, #136]	; (80117e0 <RadioSetTxGenericConfig+0x240>)
 8011756:	2200      	movs	r2, #0
 8011758:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801175c:	e7cb      	b.n	80116f6 <RadioSetTxGenericConfig+0x156>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801175e:	4b20      	ldr	r3, [pc, #128]	; (80117e0 <RadioSetTxGenericConfig+0x240>)
 8011760:	2201      	movs	r2, #1
 8011762:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8011766:	e7c6      	b.n	80116f6 <RadioSetTxGenericConfig+0x156>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8011768:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801176c:	3b0b      	subs	r3, #11
 801176e:	b2db      	uxtb	r3, r3
 8011770:	2b01      	cmp	r3, #1
 8011772:	d904      	bls.n	801177e <RadioSetTxGenericConfig+0x1de>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8011774:	4b1a      	ldr	r3, [pc, #104]	; (80117e0 <RadioSetTxGenericConfig+0x240>)
 8011776:	2200      	movs	r2, #0
 8011778:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801177c:	e7bb      	b.n	80116f6 <RadioSetTxGenericConfig+0x156>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801177e:	4b18      	ldr	r3, [pc, #96]	; (80117e0 <RadioSetTxGenericConfig+0x240>)
 8011780:	2201      	movs	r2, #1
 8011782:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8011786:	e7b6      	b.n	80116f6 <RadioSetTxGenericConfig+0x156>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8011788:	f640 0089 	movw	r0, #2185	; 0x889
 801178c:	f000 ff84 	bl	8012698 <SUBGRF_ReadRegister>
 8011790:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8011794:	f640 0089 	movw	r0, #2185	; 0x889
 8011798:	f000 fe8e 	bl	80124b8 <SUBGRF_WriteRegister>
 801179c:	e713      	b.n	80115c6 <RadioSetTxGenericConfig+0x26>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801179e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80117a0:	3b01      	subs	r3, #1
 80117a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80117a6:	d218      	bcs.n	80117da <RadioSetTxGenericConfig+0x23a>
        RadioSetModem( MODEM_BPSK );
 80117a8:	2002      	movs	r0, #2
 80117aa:	f7ff fec1 	bl	8011530 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80117ae:	480c      	ldr	r0, [pc, #48]	; (80117e0 <RadioSetTxGenericConfig+0x240>)
 80117b0:	2302      	movs	r3, #2
 80117b2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80117b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80117b8:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80117ba:	2316      	movs	r3, #22
 80117bc:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80117c0:	3038      	adds	r0, #56	; 0x38
 80117c2:	f000 fee1 	bl	8012588 <SUBGRF_SetModulationParams>
        break;
 80117c6:	e6fe      	b.n	80115c6 <RadioSetTxGenericConfig+0x26>
            return -1;
 80117c8:	f04f 30ff 	mov.w	r0, #4294967295
 80117cc:	e705      	b.n	80115da <RadioSetTxGenericConfig+0x3a>
 80117ce:	f04f 30ff 	mov.w	r0, #4294967295
 80117d2:	e702      	b.n	80115da <RadioSetTxGenericConfig+0x3a>
            return -1;
 80117d4:	f04f 30ff 	mov.w	r0, #4294967295
 80117d8:	e6ff      	b.n	80115da <RadioSetTxGenericConfig+0x3a>
            return -1;
 80117da:	f04f 30ff 	mov.w	r0, #4294967295
 80117de:	e6fc      	b.n	80115da <RadioSetTxGenericConfig+0x3a>
 80117e0:	200019d0 	.word	0x200019d0
 80117e4:	20001a28 	.word	0x20001a28
 80117e8:	2000114c 	.word	0x2000114c
 80117ec:	20001a08 	.word	0x20001a08

080117f0 <RadioSetRxGenericConfig>:
{
 80117f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117f2:	b087      	sub	sp, #28
 80117f4:	4607      	mov	r7, r0
 80117f6:	460c      	mov	r4, r1
 80117f8:	4615      	mov	r5, r2
 80117fa:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 80117fc:	2300      	movs	r3, #0
 80117fe:	9304      	str	r3, [sp, #16]
 8011800:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8011802:	f001 fa7c 	bl	8012cfe <RFW_DeInit>
    if( rxContinuous != 0 )
 8011806:	b105      	cbz	r5, 801180a <RadioSetRxGenericConfig+0x1a>
        symbTimeout = 0;
 8011808:	2600      	movs	r6, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801180a:	3d00      	subs	r5, #0
 801180c:	bf18      	it	ne
 801180e:	2501      	movne	r5, #1
 8011810:	4b94      	ldr	r3, [pc, #592]	; (8011a64 <RadioSetRxGenericConfig+0x274>)
 8011812:	705d      	strb	r5, [r3, #1]
    switch( modem )
 8011814:	b12f      	cbz	r7, 8011822 <RadioSetRxGenericConfig+0x32>
 8011816:	2f01      	cmp	r7, #1
 8011818:	f000 8094 	beq.w	8011944 <RadioSetRxGenericConfig+0x154>
 801181c:	2000      	movs	r0, #0
}
 801181e:	b007      	add	sp, #28
 8011820:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8011822:	68e3      	ldr	r3, [r4, #12]
 8011824:	2b00      	cmp	r3, #0
 8011826:	f000 8110 	beq.w	8011a4a <RadioSetRxGenericConfig+0x25a>
 801182a:	6923      	ldr	r3, [r4, #16]
 801182c:	2b00      	cmp	r3, #0
 801182e:	f000 810f 	beq.w	8011a50 <RadioSetRxGenericConfig+0x260>
        if( config->fsk.SyncWordLength > 8 )
 8011832:	7d63      	ldrb	r3, [r4, #21]
 8011834:	2b08      	cmp	r3, #8
 8011836:	f200 810e 	bhi.w	8011a56 <RadioSetRxGenericConfig+0x266>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801183a:	2200      	movs	r2, #0
 801183c:	e006      	b.n	801184c <RadioSetRxGenericConfig+0x5c>
                syncword[i] = config->fsk.SyncWord[i];
 801183e:	69a1      	ldr	r1, [r4, #24]
 8011840:	5c88      	ldrb	r0, [r1, r2]
 8011842:	a906      	add	r1, sp, #24
 8011844:	4411      	add	r1, r2
 8011846:	f801 0c08 	strb.w	r0, [r1, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801184a:	3201      	adds	r2, #1
 801184c:	4293      	cmp	r3, r2
 801184e:	dcf6      	bgt.n	801183e <RadioSetRxGenericConfig+0x4e>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8011850:	6820      	ldr	r0, [r4, #0]
 8011852:	3800      	subs	r0, #0
 8011854:	bf18      	it	ne
 8011856:	2001      	movne	r0, #1
 8011858:	f000 fcca 	bl	80121f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801185c:	4d81      	ldr	r5, [pc, #516]	; (8011a64 <RadioSetRxGenericConfig+0x274>)
 801185e:	2700      	movs	r7, #0
 8011860:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8011864:	68e3      	ldr	r3, [r4, #12]
 8011866:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8011868:	7923      	ldrb	r3, [r4, #4]
 801186a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801186e:	68a0      	ldr	r0, [r4, #8]
 8011870:	f001 f9de 	bl	8012c30 <SUBGRF_GetFskBandwidthRegValue>
 8011874:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011878:	73af      	strb	r7, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801187a:	6923      	ldr	r3, [r4, #16]
 801187c:	00db      	lsls	r3, r3, #3
 801187e:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8011880:	7d23      	ldrb	r3, [r4, #20]
 8011882:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8011884:	7d63      	ldrb	r3, [r4, #21]
 8011886:	00db      	lsls	r3, r3, #3
 8011888:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801188a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801188e:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8011890:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8011894:	b973      	cbnz	r3, 80118b4 <RadioSetRxGenericConfig+0xc4>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8011896:	69e1      	ldr	r1, [r4, #28]
 8011898:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801189a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 801189e:	2a02      	cmp	r2, #2
 80118a0:	d012      	beq.n	80118c8 <RadioSetRxGenericConfig+0xd8>
 80118a2:	2b02      	cmp	r3, #2
 80118a4:	d010      	beq.n	80118c8 <RadioSetRxGenericConfig+0xd8>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80118a6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80118aa:	496e      	ldr	r1, [pc, #440]	; (8011a64 <RadioSetRxGenericConfig+0x274>)
 80118ac:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80118ae:	760a      	strb	r2, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80118b0:	754b      	strb	r3, [r1, #21]
 80118b2:	e023      	b.n	80118fc <RadioSetRxGenericConfig+0x10c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80118b4:	2b02      	cmp	r3, #2
 80118b6:	d003      	beq.n	80118c0 <RadioSetRxGenericConfig+0xd0>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80118b8:	4a6a      	ldr	r2, [pc, #424]	; (8011a64 <RadioSetRxGenericConfig+0x274>)
 80118ba:	21ff      	movs	r1, #255	; 0xff
 80118bc:	7591      	strb	r1, [r2, #22]
 80118be:	e7ec      	b.n	801189a <RadioSetRxGenericConfig+0xaa>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80118c0:	4a68      	ldr	r2, [pc, #416]	; (8011a64 <RadioSetRxGenericConfig+0x274>)
 80118c2:	21ff      	movs	r1, #255	; 0xff
 80118c4:	7591      	strb	r1, [r2, #22]
 80118c6:	e7e8      	b.n	801189a <RadioSetRxGenericConfig+0xaa>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80118c8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80118cc:	f102 030f 	add.w	r3, r2, #15
 80118d0:	b2db      	uxtb	r3, r3
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	d901      	bls.n	80118da <RadioSetRxGenericConfig+0xea>
 80118d6:	2a01      	cmp	r2, #1
 80118d8:	d131      	bne.n	801193e <RadioSetRxGenericConfig+0x14e>
          ConfigGeneric.rtx = CONFIG_RX;
 80118da:	2300      	movs	r3, #0
 80118dc:	f88d 300c 	strb.w	r3, [sp, #12]
          ConfigGeneric.RxConfig = config;
 80118e0:	9402      	str	r4, [sp, #8]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80118e2:	4a61      	ldr	r2, [pc, #388]	; (8011a68 <RadioSetRxGenericConfig+0x278>)
 80118e4:	4b61      	ldr	r3, [pc, #388]	; (8011a6c <RadioSetRxGenericConfig+0x27c>)
 80118e6:	6819      	ldr	r1, [r3, #0]
 80118e8:	a801      	add	r0, sp, #4
 80118ea:	f001 fa05 	bl	8012cf8 <RFW_Init>
 80118ee:	bb30      	cbnz	r0, 801193e <RadioSetRxGenericConfig+0x14e>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80118f0:	4b5c      	ldr	r3, [pc, #368]	; (8011a64 <RadioSetRxGenericConfig+0x274>)
 80118f2:	2200      	movs	r2, #0
 80118f4:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80118f6:	2101      	movs	r1, #1
 80118f8:	75d9      	strb	r1, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80118fa:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80118fc:	f7ff fb54 	bl	8010fa8 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8011900:	2000      	movs	r0, #0
 8011902:	f7ff fe15 	bl	8011530 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011906:	4d5a      	ldr	r5, [pc, #360]	; (8011a70 <RadioSetRxGenericConfig+0x280>)
 8011908:	4628      	mov	r0, r5
 801190a:	f000 fe3d 	bl	8012588 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801190e:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 8011912:	f001 f809 	bl	8012928 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8011916:	a804      	add	r0, sp, #16
 8011918:	f000 ffd4 	bl	80128c4 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801191c:	8c20      	ldrh	r0, [r4, #32]
 801191e:	f000 ff37 	bl	8012790 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8011922:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8011924:	f000 ffeb 	bl	80128fe <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8011928:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 801192c:	fb03 f606 	mul.w	r6, r3, r6
 8011930:	68e3      	ldr	r3, [r4, #12]
 8011932:	fbb6 f6f3 	udiv	r6, r6, r3
 8011936:	f845 6c30 	str.w	r6, [r5, #-48]
    return status;
 801193a:	2000      	movs	r0, #0
        break;
 801193c:	e76f      	b.n	801181e <RadioSetRxGenericConfig+0x2e>
            return -1;
 801193e:	f04f 30ff 	mov.w	r0, #4294967295
 8011942:	e76c      	b.n	801181e <RadioSetRxGenericConfig+0x2e>
        if( config->lora.PreambleLen == 0 )
 8011944:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011946:	2b00      	cmp	r3, #0
 8011948:	f000 8088 	beq.w	8011a5c <RadioSetRxGenericConfig+0x26c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801194c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8011950:	2b01      	cmp	r3, #1
 8011952:	d053      	beq.n	80119fc <RadioSetRxGenericConfig+0x20c>
            MaxPayloadLength = 0xFF;
 8011954:	27ff      	movs	r7, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8011956:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011958:	3800      	subs	r0, #0
 801195a:	bf18      	it	ne
 801195c:	2001      	movne	r0, #1
 801195e:	f000 fc47 	bl	80121f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8011962:	b2f0      	uxtb	r0, r6
 8011964:	f000 fdd6 	bl	8012514 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8011968:	4b3e      	ldr	r3, [pc, #248]	; (8011a64 <RadioSetRxGenericConfig+0x274>)
 801196a:	2201      	movs	r2, #1
 801196c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8011970:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8011974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8011978:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801197c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8011980:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 8011984:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8011988:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 801198c:	2b01      	cmp	r3, #1
 801198e:	d03c      	beq.n	8011a0a <RadioSetRxGenericConfig+0x21a>
 8011990:	2b02      	cmp	r3, #2
 8011992:	d03f      	beq.n	8011a14 <RadioSetRxGenericConfig+0x224>
 8011994:	b3a3      	cbz	r3, 8011a00 <RadioSetRxGenericConfig+0x210>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011996:	4d33      	ldr	r5, [pc, #204]	; (8011a64 <RadioSetRxGenericConfig+0x274>)
 8011998:	2601      	movs	r6, #1
 801199a:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801199c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801199e:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80119a0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80119a4:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80119a6:	77ef      	strb	r7, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80119a8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80119ac:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80119b0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80119b4:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 80119b8:	f7ff faf6 	bl	8010fa8 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80119bc:	4630      	mov	r0, r6
 80119be:	f7ff fdb7 	bl	8011530 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80119c2:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80119c6:	f000 fddf 	bl	8012588 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80119ca:	f105 000e 	add.w	r0, r5, #14
 80119ce:	f000 ffab 	bl	8012928 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80119d2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80119d6:	42b3      	cmp	r3, r6
 80119d8:	d02c      	beq.n	8011a34 <RadioSetRxGenericConfig+0x244>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80119da:	f240 7036 	movw	r0, #1846	; 0x736
 80119de:	f000 fe5b 	bl	8012698 <SUBGRF_ReadRegister>
 80119e2:	f040 0104 	orr.w	r1, r0, #4
 80119e6:	b2c9      	uxtb	r1, r1
 80119e8:	f240 7036 	movw	r0, #1846	; 0x736
 80119ec:	f000 fd64 	bl	80124b8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80119f0:	4b1c      	ldr	r3, [pc, #112]	; (8011a64 <RadioSetRxGenericConfig+0x274>)
 80119f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119f6:	609a      	str	r2, [r3, #8]
    return status;
 80119f8:	2000      	movs	r0, #0
        break;
 80119fa:	e710      	b.n	801181e <RadioSetRxGenericConfig+0x2e>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80119fc:	7f27      	ldrb	r7, [r4, #28]
 80119fe:	e7aa      	b.n	8011956 <RadioSetRxGenericConfig+0x166>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8011a00:	4b18      	ldr	r3, [pc, #96]	; (8011a64 <RadioSetRxGenericConfig+0x274>)
 8011a02:	2200      	movs	r2, #0
 8011a04:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8011a08:	e7c5      	b.n	8011996 <RadioSetRxGenericConfig+0x1a6>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8011a0a:	4b16      	ldr	r3, [pc, #88]	; (8011a64 <RadioSetRxGenericConfig+0x274>)
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8011a12:	e7c0      	b.n	8011996 <RadioSetRxGenericConfig+0x1a6>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8011a14:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8011a18:	3b0b      	subs	r3, #11
 8011a1a:	b2db      	uxtb	r3, r3
 8011a1c:	2b01      	cmp	r3, #1
 8011a1e:	d904      	bls.n	8011a2a <RadioSetRxGenericConfig+0x23a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8011a20:	4b10      	ldr	r3, [pc, #64]	; (8011a64 <RadioSetRxGenericConfig+0x274>)
 8011a22:	2200      	movs	r2, #0
 8011a24:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8011a28:	e7b5      	b.n	8011996 <RadioSetRxGenericConfig+0x1a6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8011a2a:	4b0e      	ldr	r3, [pc, #56]	; (8011a64 <RadioSetRxGenericConfig+0x274>)
 8011a2c:	2201      	movs	r2, #1
 8011a2e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8011a32:	e7b0      	b.n	8011996 <RadioSetRxGenericConfig+0x1a6>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8011a34:	f240 7036 	movw	r0, #1846	; 0x736
 8011a38:	f000 fe2e 	bl	8012698 <SUBGRF_ReadRegister>
 8011a3c:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8011a40:	f240 7036 	movw	r0, #1846	; 0x736
 8011a44:	f000 fd38 	bl	80124b8 <SUBGRF_WriteRegister>
 8011a48:	e7d2      	b.n	80119f0 <RadioSetRxGenericConfig+0x200>
            return -1;
 8011a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a4e:	e6e6      	b.n	801181e <RadioSetRxGenericConfig+0x2e>
 8011a50:	f04f 30ff 	mov.w	r0, #4294967295
 8011a54:	e6e3      	b.n	801181e <RadioSetRxGenericConfig+0x2e>
            return -1;
 8011a56:	f04f 30ff 	mov.w	r0, #4294967295
 8011a5a:	e6e0      	b.n	801181e <RadioSetRxGenericConfig+0x2e>
            return -1;
 8011a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a60:	e6dd      	b.n	801181e <RadioSetRxGenericConfig+0x2e>
 8011a62:	bf00      	nop
 8011a64:	200019d0 	.word	0x200019d0
 8011a68:	20001a40 	.word	0x20001a40
 8011a6c:	2000114c 	.word	0x2000114c
 8011a70:	20001a08 	.word	0x20001a08

08011a74 <RadioSetPublicNetwork>:
{
 8011a74:	b510      	push	{r4, lr}
 8011a76:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8011a78:	4b0e      	ldr	r3, [pc, #56]	; (8011ab4 <RadioSetPublicNetwork+0x40>)
 8011a7a:	7318      	strb	r0, [r3, #12]
 8011a7c:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8011a7e:	2001      	movs	r0, #1
 8011a80:	f7ff fd56 	bl	8011530 <RadioSetModem>
    if( enable == true )
 8011a84:	b154      	cbz	r4, 8011a9c <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8011a86:	2134      	movs	r1, #52	; 0x34
 8011a88:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8011a8c:	f000 fd14 	bl	80124b8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8011a90:	2144      	movs	r1, #68	; 0x44
 8011a92:	f240 7041 	movw	r0, #1857	; 0x741
 8011a96:	f000 fd0f 	bl	80124b8 <SUBGRF_WriteRegister>
}
 8011a9a:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8011a9c:	2114      	movs	r1, #20
 8011a9e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8011aa2:	f000 fd09 	bl	80124b8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8011aa6:	2124      	movs	r1, #36	; 0x24
 8011aa8:	f240 7041 	movw	r0, #1857	; 0x741
 8011aac:	f000 fd04 	bl	80124b8 <SUBGRF_WriteRegister>
}
 8011ab0:	e7f3      	b.n	8011a9a <RadioSetPublicNetwork+0x26>
 8011ab2:	bf00      	nop
 8011ab4:	200019d0 	.word	0x200019d0

08011ab8 <RadioSetTxConfig>:
{
 8011ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011abc:	b083      	sub	sp, #12
 8011abe:	4604      	mov	r4, r0
 8011ac0:	460d      	mov	r5, r1
 8011ac2:	4691      	mov	r9, r2
 8011ac4:	461f      	mov	r7, r3
 8011ac6:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8011aca:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 8011ace:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8011ad2:	f001 f914 	bl	8012cfe <RFW_DeInit>
    switch( modem )
 8011ad6:	2c01      	cmp	r4, #1
 8011ad8:	d05a      	beq.n	8011b90 <RadioSetTxConfig+0xd8>
 8011ada:	2c03      	cmp	r4, #3
 8011adc:	f000 80ab 	beq.w	8011c36 <RadioSetTxConfig+0x17e>
 8011ae0:	b164      	cbz	r4, 8011afc <RadioSetTxConfig+0x44>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	f001 f836 	bl	8012b54 <SUBGRF_SetRfTxPower>
 8011ae8:	4c5b      	ldr	r4, [pc, #364]	; (8011c58 <RadioSetTxConfig+0x1a0>)
 8011aea:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8011aee:	f001 f90b 	bl	8012d08 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8011af2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011af4:	6063      	str	r3, [r4, #4]
}
 8011af6:	b003      	add	sp, #12
 8011af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011afc:	4c56      	ldr	r4, [pc, #344]	; (8011c58 <RadioSetTxConfig+0x1a0>)
 8011afe:	f04f 0b00 	mov.w	fp, #0
 8011b02:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8011b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b08:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8011b0a:	230b      	movs	r3, #11
 8011b0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011b10:	4638      	mov	r0, r7
 8011b12:	f001 f88d 	bl	8012c30 <SUBGRF_GetFskBandwidthRegValue>
 8011b16:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8011b1a:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011b1e:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8011b22:	00f6      	lsls	r6, r6, #3
 8011b24:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8011b26:	2304      	movs	r3, #4
 8011b28:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8011b2a:	2318      	movs	r3, #24
 8011b2c:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8011b2e:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8011b32:	f088 0801 	eor.w	r8, r8, #1
 8011b36:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 8011b3a:	f1ba 0f00 	cmp.w	sl, #0
 8011b3e:	d023      	beq.n	8011b88 <RadioSetTxConfig+0xd0>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8011b40:	22f2      	movs	r2, #242	; 0xf2
 8011b42:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8011b44:	4c44      	ldr	r4, [pc, #272]	; (8011c58 <RadioSetTxConfig+0x1a0>)
 8011b46:	2301      	movs	r3, #1
 8011b48:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8011b4a:	f7ff fa2d 	bl	8010fa8 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8011b4e:	4626      	mov	r6, r4
 8011b50:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 8011b54:	3800      	subs	r0, #0
 8011b56:	bf18      	it	ne
 8011b58:	2001      	movne	r0, #1
 8011b5a:	f7ff fce9 	bl	8011530 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011b5e:	4630      	mov	r0, r6
 8011b60:	f000 fd12 	bl	8012588 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011b64:	f104 000e 	add.w	r0, r4, #14
 8011b68:	f000 fede 	bl	8012928 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8011b6c:	4a3b      	ldr	r2, [pc, #236]	; (8011c5c <RadioSetTxConfig+0x1a4>)
 8011b6e:	466b      	mov	r3, sp
 8011b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b74:	e883 0003 	stmia.w	r3, {r0, r1}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f000 fea3 	bl	80128c4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8011b7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011b82:	f000 fe05 	bl	8012790 <SUBGRF_SetWhiteningSeed>
            break;
 8011b86:	e7ac      	b.n	8011ae2 <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8011b88:	4b33      	ldr	r3, [pc, #204]	; (8011c58 <RadioSetTxConfig+0x1a0>)
 8011b8a:	2201      	movs	r2, #1
 8011b8c:	75da      	strb	r2, [r3, #23]
 8011b8e:	e7d9      	b.n	8011b44 <RadioSetTxConfig+0x8c>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8011b90:	4a31      	ldr	r2, [pc, #196]	; (8011c58 <RadioSetTxConfig+0x1a0>)
 8011b92:	2301      	movs	r3, #1
 8011b94:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8011b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b9a:	b2db      	uxtb	r3, r3
 8011b9c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8011ba0:	492f      	ldr	r1, [pc, #188]	; (8011c60 <RadioSetTxConfig+0x1a8>)
 8011ba2:	5dc9      	ldrb	r1, [r1, r7]
 8011ba4:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8011ba8:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8011bac:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011bb0:	b91f      	cbnz	r7, 8011bba <RadioSetTxConfig+0x102>
 8011bb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bb4:	3a0b      	subs	r2, #11
 8011bb6:	2a01      	cmp	r2, #1
 8011bb8:	d92f      	bls.n	8011c1a <RadioSetTxConfig+0x162>
 8011bba:	2f01      	cmp	r7, #1
 8011bbc:	d02a      	beq.n	8011c14 <RadioSetTxConfig+0x15c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8011bbe:	4a26      	ldr	r2, [pc, #152]	; (8011c58 <RadioSetTxConfig+0x1a0>)
 8011bc0:	2100      	movs	r1, #0
 8011bc2:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011bc6:	4a24      	ldr	r2, [pc, #144]	; (8011c58 <RadioSetTxConfig+0x1a0>)
 8011bc8:	2101      	movs	r1, #1
 8011bca:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8011bcc:	3b05      	subs	r3, #5
 8011bce:	b2db      	uxtb	r3, r3
 8011bd0:	428b      	cmp	r3, r1
 8011bd2:	d927      	bls.n	8011c24 <RadioSetTxConfig+0x16c>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011bd4:	4b20      	ldr	r3, [pc, #128]	; (8011c58 <RadioSetTxConfig+0x1a0>)
 8011bd6:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8011bd8:	4c1f      	ldr	r4, [pc, #124]	; (8011c58 <RadioSetTxConfig+0x1a0>)
 8011bda:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8011bde:	4b21      	ldr	r3, [pc, #132]	; (8011c64 <RadioSetTxConfig+0x1ac>)
 8011be0:	781b      	ldrb	r3, [r3, #0]
 8011be2:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8011be4:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8011be8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8011bec:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8011bf0:	f7ff f9da 	bl	8010fa8 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8011bf4:	4626      	mov	r6, r4
 8011bf6:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 8011bfa:	3800      	subs	r0, #0
 8011bfc:	bf18      	it	ne
 8011bfe:	2001      	movne	r0, #1
 8011c00:	f7ff fc96 	bl	8011530 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011c04:	4630      	mov	r0, r6
 8011c06:	f000 fcbf 	bl	8012588 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011c0a:	f104 000e 	add.w	r0, r4, #14
 8011c0e:	f000 fe8b 	bl	8012928 <SUBGRF_SetPacketParams>
            break;
 8011c12:	e766      	b.n	8011ae2 <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8011c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c16:	2a0c      	cmp	r2, #12
 8011c18:	d1d1      	bne.n	8011bbe <RadioSetTxConfig+0x106>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8011c1a:	4a0f      	ldr	r2, [pc, #60]	; (8011c58 <RadioSetTxConfig+0x1a0>)
 8011c1c:	2101      	movs	r1, #1
 8011c1e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8011c22:	e7d0      	b.n	8011bc6 <RadioSetTxConfig+0x10e>
                if( preambleLen < 12 )
 8011c24:	2e0b      	cmp	r6, #11
 8011c26:	d803      	bhi.n	8011c30 <RadioSetTxConfig+0x178>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8011c28:	4613      	mov	r3, r2
 8011c2a:	220c      	movs	r2, #12
 8011c2c:	839a      	strh	r2, [r3, #28]
 8011c2e:	e7d3      	b.n	8011bd8 <RadioSetTxConfig+0x120>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011c30:	4b09      	ldr	r3, [pc, #36]	; (8011c58 <RadioSetTxConfig+0x1a0>)
 8011c32:	839e      	strh	r6, [r3, #28]
 8011c34:	e7d0      	b.n	8011bd8 <RadioSetTxConfig+0x120>
            RadioSetModem(MODEM_SIGFOX_TX);
 8011c36:	2003      	movs	r0, #3
 8011c38:	f7ff fc7a 	bl	8011530 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8011c3c:	4806      	ldr	r0, [pc, #24]	; (8011c58 <RadioSetTxConfig+0x1a0>)
 8011c3e:	2302      	movs	r3, #2
 8011c40:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8011c44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c46:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8011c48:	2316      	movs	r3, #22
 8011c4a:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011c4e:	3038      	adds	r0, #56	; 0x38
 8011c50:	f000 fc9a 	bl	8012588 <SUBGRF_SetModulationParams>
            break;
 8011c54:	e745      	b.n	8011ae2 <RadioSetTxConfig+0x2a>
 8011c56:	bf00      	nop
 8011c58:	200019d0 	.word	0x200019d0
 8011c5c:	08013bf4 	.word	0x08013bf4
 8011c60:	08014670 	.word	0x08014670
 8011c64:	200000cc 	.word	0x200000cc

08011c68 <RadioSetRxConfig>:
{
 8011c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c6c:	b087      	sub	sp, #28
 8011c6e:	4604      	mov	r4, r0
 8011c70:	460e      	mov	r6, r1
 8011c72:	4615      	mov	r5, r2
 8011c74:	9301      	str	r3, [sp, #4]
 8011c76:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 8011c7a:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 8011c7e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8011c82:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 8011c86:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 8011c8a:	4baf      	ldr	r3, [pc, #700]	; (8011f48 <RadioSetRxConfig+0x2e0>)
 8011c8c:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8011c90:	f001 f835 	bl	8012cfe <RFW_DeInit>
    if( rxContinuous == true )
 8011c94:	f1b8 0f00 	cmp.w	r8, #0
 8011c98:	d001      	beq.n	8011c9e <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8011c9a:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8011c9e:	b16f      	cbz	r7, 8011cbc <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 8011ca0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8011ca4:	4ba9      	ldr	r3, [pc, #676]	; (8011f4c <RadioSetRxConfig+0x2e4>)
 8011ca6:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8011ca8:	2c01      	cmp	r4, #1
 8011caa:	f000 80d6 	beq.w	8011e5a <RadioSetRxConfig+0x1f2>
 8011cae:	2c04      	cmp	r4, #4
 8011cb0:	d008      	beq.n	8011cc4 <RadioSetRxConfig+0x5c>
 8011cb2:	2c00      	cmp	r4, #0
 8011cb4:	d07c      	beq.n	8011db0 <RadioSetRxConfig+0x148>
}
 8011cb6:	b007      	add	sp, #28
 8011cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8011cbc:	4ba3      	ldr	r3, [pc, #652]	; (8011f4c <RadioSetRxConfig+0x2e4>)
 8011cbe:	22ff      	movs	r2, #255	; 0xff
 8011cc0:	701a      	strb	r2, [r3, #0]
 8011cc2:	e7f1      	b.n	8011ca8 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8011cc4:	2001      	movs	r0, #1
 8011cc6:	f000 fa93 	bl	80121f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011cca:	4c9f      	ldr	r4, [pc, #636]	; (8011f48 <RadioSetRxConfig+0x2e0>)
 8011ccc:	2700      	movs	r7, #0
 8011cce:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8011cd2:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8011cd4:	2309      	movs	r3, #9
 8011cd6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8011cda:	f44f 7348 	mov.w	r3, #800	; 0x320
 8011cde:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	f000 ffa5 	bl	8012c30 <SUBGRF_GetFskBandwidthRegValue>
 8011ce6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011cea:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8011cec:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8011cf0:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8011cf4:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8011cf6:	2310      	movs	r3, #16
 8011cf8:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8011cfa:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8011cfc:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8011cfe:	4b93      	ldr	r3, [pc, #588]	; (8011f4c <RadioSetRxConfig+0x2e4>)
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8011d04:	2301      	movs	r3, #1
 8011d06:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8011d08:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8011d0a:	2004      	movs	r0, #4
 8011d0c:	f7ff fc10 	bl	8011530 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011d10:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011d14:	f000 fc38 	bl	8012588 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011d18:	f104 000e 	add.w	r0, r4, #14
 8011d1c:	f000 fe04 	bl	8012928 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8011d20:	ab02      	add	r3, sp, #8
 8011d22:	4a8b      	ldr	r2, [pc, #556]	; (8011f50 <RadioSetRxConfig+0x2e8>)
 8011d24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d28:	e883 0003 	stmia.w	r3, {r0, r1}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f000 fdc9 	bl	80128c4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8011d32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011d36:	f000 fd2b 	bl	8012790 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8011d3a:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8011d3e:	f7ff f8c9 	bl	8010ed4 <RadioRead>
            RadioWrite(0x8b8, modReg);
 8011d42:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 8011d46:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8011d4a:	f7ff f8c7 	bl	8010edc <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8011d4e:	2104      	movs	r1, #4
 8011d50:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8011d54:	f7ff f8c2 	bl	8010edc <RadioWrite>
            modReg= RadioRead(0x89b);
 8011d58:	f640 009b 	movw	r0, #2203	; 0x89b
 8011d5c:	f7ff f8ba 	bl	8010ed4 <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8011d60:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8011d64:	f041 0108 	orr.w	r1, r1, #8
 8011d68:	f640 009b 	movw	r0, #2203	; 0x89b
 8011d6c:	f7ff f8b6 	bl	8010edc <RadioWrite>
            modReg= RadioRead(0x6d1);
 8011d70:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8011d74:	f7ff f8ae 	bl	8010ed4 <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8011d78:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8011d7c:	f041 0118 	orr.w	r1, r1, #24
 8011d80:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8011d84:	f7ff f8aa 	bl	8010edc <RadioWrite>
            modReg= RadioRead(0x6ac);
 8011d88:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8011d8c:	f7ff f8a2 	bl	8010ed4 <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8011d90:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8011d94:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8011d98:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8011d9c:	f7ff f89e 	bl	8010edc <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8011da0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8011da4:	fb03 fa0a 	mul.w	sl, r3, sl
 8011da8:	fbba f5f5 	udiv	r5, sl, r5
 8011dac:	60a5      	str	r5, [r4, #8]
            break;
 8011dae:	e782      	b.n	8011cb6 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8011db0:	2000      	movs	r0, #0
 8011db2:	f000 fa1d 	bl	80121f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011db6:	4c64      	ldr	r4, [pc, #400]	; (8011f48 <RadioSetRxConfig+0x2e0>)
 8011db8:	f04f 0800 	mov.w	r8, #0
 8011dbc:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8011dc0:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8011dc2:	230b      	movs	r3, #11
 8011dc4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011dc8:	4630      	mov	r0, r6
 8011dca:	f000 ff31 	bl	8012c30 <SUBGRF_GetFskBandwidthRegValue>
 8011dce:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011dd2:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8011dd6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8011dda:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8011dde:	2304      	movs	r3, #4
 8011de0:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8011de2:	2318      	movs	r3, #24
 8011de4:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8011de6:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8011dea:	f087 0701 	eor.w	r7, r7, #1
 8011dee:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8011df0:	4b56      	ldr	r3, [pc, #344]	; (8011f4c <RadioSetRxConfig+0x2e4>)
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8011df6:	f1bb 0f00 	cmp.w	fp, #0
 8011dfa:	d02a      	beq.n	8011e52 <RadioSetRxConfig+0x1ea>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8011dfc:	22f2      	movs	r2, #242	; 0xf2
 8011dfe:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8011e00:	4c51      	ldr	r4, [pc, #324]	; (8011f48 <RadioSetRxConfig+0x2e0>)
 8011e02:	2301      	movs	r3, #1
 8011e04:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8011e06:	f7ff f8cf 	bl	8010fa8 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8011e0a:	4626      	mov	r6, r4
 8011e0c:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 8011e10:	3800      	subs	r0, #0
 8011e12:	bf18      	it	ne
 8011e14:	2001      	movne	r0, #1
 8011e16:	f7ff fb8b 	bl	8011530 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011e1a:	4630      	mov	r0, r6
 8011e1c:	f000 fbb4 	bl	8012588 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011e20:	f104 000e 	add.w	r0, r4, #14
 8011e24:	f000 fd80 	bl	8012928 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8011e28:	4a4a      	ldr	r2, [pc, #296]	; (8011f54 <RadioSetRxConfig+0x2ec>)
 8011e2a:	ab04      	add	r3, sp, #16
 8011e2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e30:	e883 0003 	stmia.w	r3, {r0, r1}
 8011e34:	4618      	mov	r0, r3
 8011e36:	f000 fd45 	bl	80128c4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8011e3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011e3e:	f000 fca7 	bl	8012790 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8011e42:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8011e46:	fb03 fa0a 	mul.w	sl, r3, sl
 8011e4a:	fbba f5f5 	udiv	r5, sl, r5
 8011e4e:	60a5      	str	r5, [r4, #8]
            break;
 8011e50:	e731      	b.n	8011cb6 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8011e52:	4b3d      	ldr	r3, [pc, #244]	; (8011f48 <RadioSetRxConfig+0x2e0>)
 8011e54:	2201      	movs	r2, #1
 8011e56:	75da      	strb	r2, [r3, #23]
 8011e58:	e7d2      	b.n	8011e00 <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8011e5a:	2000      	movs	r0, #0
 8011e5c:	f000 f9c8 	bl	80121f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8011e60:	4a39      	ldr	r2, [pc, #228]	; (8011f48 <RadioSetRxConfig+0x2e0>)
 8011e62:	2301      	movs	r3, #1
 8011e64:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8011e68:	b2eb      	uxtb	r3, r5
 8011e6a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8011e6e:	493a      	ldr	r1, [pc, #232]	; (8011f58 <RadioSetRxConfig+0x2f0>)
 8011e70:	5d89      	ldrb	r1, [r1, r6]
 8011e72:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8011e76:	9901      	ldr	r1, [sp, #4]
 8011e78:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011e7c:	b91e      	cbnz	r6, 8011e86 <RadioSetRxConfig+0x21e>
 8011e7e:	f1a5 020b 	sub.w	r2, r5, #11
 8011e82:	2a01      	cmp	r2, #1
 8011e84:	d945      	bls.n	8011f12 <RadioSetRxConfig+0x2aa>
 8011e86:	2e01      	cmp	r6, #1
 8011e88:	d041      	beq.n	8011f0e <RadioSetRxConfig+0x2a6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8011e8a:	4a2f      	ldr	r2, [pc, #188]	; (8011f48 <RadioSetRxConfig+0x2e0>)
 8011e8c:	2100      	movs	r1, #0
 8011e8e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011e92:	4a2d      	ldr	r2, [pc, #180]	; (8011f48 <RadioSetRxConfig+0x2e0>)
 8011e94:	2101      	movs	r1, #1
 8011e96:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8011e98:	3b05      	subs	r3, #5
 8011e9a:	b2db      	uxtb	r3, r3
 8011e9c:	428b      	cmp	r3, r1
 8011e9e:	d93d      	bls.n	8011f1c <RadioSetRxConfig+0x2b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011ea0:	4b29      	ldr	r3, [pc, #164]	; (8011f48 <RadioSetRxConfig+0x2e0>)
 8011ea2:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8011ea6:	4c28      	ldr	r4, [pc, #160]	; (8011f48 <RadioSetRxConfig+0x2e0>)
 8011ea8:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8011eaa:	4b28      	ldr	r3, [pc, #160]	; (8011f4c <RadioSetRxConfig+0x2e4>)
 8011eac:	781b      	ldrb	r3, [r3, #0]
 8011eae:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8011eb0:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8011eb4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8011eb8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8011ebc:	f7ff f874 	bl	8010fa8 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8011ec0:	4625      	mov	r5, r4
 8011ec2:	f815 0f38 	ldrb.w	r0, [r5, #56]!
 8011ec6:	3800      	subs	r0, #0
 8011ec8:	bf18      	it	ne
 8011eca:	2001      	movne	r0, #1
 8011ecc:	f7ff fb30 	bl	8011530 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	f000 fb59 	bl	8012588 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011ed6:	f104 000e 	add.w	r0, r4, #14
 8011eda:	f000 fd25 	bl	8012928 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8011ede:	fa5f f08a 	uxtb.w	r0, sl
 8011ee2:	f000 fb17 	bl	8012514 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8011ee6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8011eea:	2b01      	cmp	r3, #1
 8011eec:	d021      	beq.n	8011f32 <RadioSetRxConfig+0x2ca>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8011eee:	f240 7036 	movw	r0, #1846	; 0x736
 8011ef2:	f000 fbd1 	bl	8012698 <SUBGRF_ReadRegister>
 8011ef6:	f040 0104 	orr.w	r1, r0, #4
 8011efa:	b2c9      	uxtb	r1, r1
 8011efc:	f240 7036 	movw	r0, #1846	; 0x736
 8011f00:	f000 fada 	bl	80124b8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8011f04:	4b10      	ldr	r3, [pc, #64]	; (8011f48 <RadioSetRxConfig+0x2e0>)
 8011f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f0a:	609a      	str	r2, [r3, #8]
}
 8011f0c:	e6d3      	b.n	8011cb6 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8011f0e:	2d0c      	cmp	r5, #12
 8011f10:	d1bb      	bne.n	8011e8a <RadioSetRxConfig+0x222>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8011f12:	4a0d      	ldr	r2, [pc, #52]	; (8011f48 <RadioSetRxConfig+0x2e0>)
 8011f14:	2101      	movs	r1, #1
 8011f16:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8011f1a:	e7ba      	b.n	8011e92 <RadioSetRxConfig+0x22a>
                if( preambleLen < 12 )
 8011f1c:	f1b9 0f0b 	cmp.w	r9, #11
 8011f20:	d803      	bhi.n	8011f2a <RadioSetRxConfig+0x2c2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8011f22:	4613      	mov	r3, r2
 8011f24:	220c      	movs	r2, #12
 8011f26:	839a      	strh	r2, [r3, #28]
 8011f28:	e7bd      	b.n	8011ea6 <RadioSetRxConfig+0x23e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011f2a:	4b07      	ldr	r3, [pc, #28]	; (8011f48 <RadioSetRxConfig+0x2e0>)
 8011f2c:	f8a3 901c 	strh.w	r9, [r3, #28]
 8011f30:	e7b9      	b.n	8011ea6 <RadioSetRxConfig+0x23e>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8011f32:	f240 7036 	movw	r0, #1846	; 0x736
 8011f36:	f000 fbaf 	bl	8012698 <SUBGRF_ReadRegister>
 8011f3a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8011f3e:	f240 7036 	movw	r0, #1846	; 0x736
 8011f42:	f000 fab9 	bl	80124b8 <SUBGRF_WriteRegister>
 8011f46:	e7dd      	b.n	8011f04 <RadioSetRxConfig+0x29c>
 8011f48:	200019d0 	.word	0x200019d0
 8011f4c:	200000cc 	.word	0x200000cc
 8011f50:	08013bfc 	.word	0x08013bfc
 8011f54:	08013bf4 	.word	0x08013bf4
 8011f58:	08014670 	.word	0x08014670

08011f5c <RadioRandom>:
{
 8011f5c:	b508      	push	{r3, lr}
    RadioSetModem( MODEM_LORA );
 8011f5e:	2001      	movs	r0, #1
 8011f60:	f7ff fae6 	bl	8011530 <RadioSetModem>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011f64:	2300      	movs	r3, #0
 8011f66:	461a      	mov	r2, r3
 8011f68:	4619      	mov	r1, r3
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f000 f9e3 	bl	8012336 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8011f70:	f000 fd5c 	bl	8012a2c <SUBGRF_GetRandom>
}
 8011f74:	bd08      	pop	{r3, pc}

08011f76 <RadioIsChannelFree>:
{
 8011f76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f78:	b08b      	sub	sp, #44	; 0x2c
 8011f7a:	4604      	mov	r4, r0
 8011f7c:	460f      	mov	r7, r1
 8011f7e:	4616      	mov	r6, r2
 8011f80:	461d      	mov	r5, r3
    RadioStandby( );
 8011f82:	f7ff f811 	bl	8010fa8 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8011f86:	2000      	movs	r0, #0
 8011f88:	f7ff fad2 	bl	8011530 <RadioSetModem>
    RadioSetChannel( freq );
 8011f8c:	4620      	mov	r0, r4
 8011f8e:	f7ff f9b3 	bl	80112f8 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8011f92:	2301      	movs	r3, #1
 8011f94:	9309      	str	r3, [sp, #36]	; 0x24
 8011f96:	2400      	movs	r4, #0
 8011f98:	9408      	str	r4, [sp, #32]
 8011f9a:	9407      	str	r4, [sp, #28]
 8011f9c:	9406      	str	r4, [sp, #24]
 8011f9e:	9405      	str	r4, [sp, #20]
 8011fa0:	9404      	str	r4, [sp, #16]
 8011fa2:	9403      	str	r4, [sp, #12]
 8011fa4:	9402      	str	r4, [sp, #8]
 8011fa6:	2303      	movs	r3, #3
 8011fa8:	9301      	str	r3, [sp, #4]
 8011faa:	9700      	str	r7, [sp, #0]
 8011fac:	4623      	mov	r3, r4
 8011fae:	f44f 7216 	mov.w	r2, #600	; 0x258
 8011fb2:	4639      	mov	r1, r7
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	f7ff fe57 	bl	8011c68 <RadioSetRxConfig>
    RadioRx( 0 );
 8011fba:	4620      	mov	r0, r4
 8011fbc:	f7ff f9b4 	bl	8011328 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8011fc0:	f7ff f96c 	bl	801129c <RadioGetWakeupTime>
 8011fc4:	f7f1 fb10 	bl	80035e8 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8011fc8:	f001 fa74 	bl	80134b4 <UTIL_TIMER_GetCurrentTime>
 8011fcc:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8011fce:	4620      	mov	r0, r4
 8011fd0:	f001 fa7a 	bl	80134c8 <UTIL_TIMER_GetElapsedTime>
 8011fd4:	42a8      	cmp	r0, r5
 8011fd6:	d206      	bcs.n	8011fe6 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8011fd8:	2000      	movs	r0, #0
 8011fda:	f7ff f96c 	bl	80112b6 <RadioRssi>
        if( rssi > rssiThresh )
 8011fde:	42b0      	cmp	r0, r6
 8011fe0:	ddf5      	ble.n	8011fce <RadioIsChannelFree+0x58>
            status = false;
 8011fe2:	2400      	movs	r4, #0
 8011fe4:	e000      	b.n	8011fe8 <RadioIsChannelFree+0x72>
    bool status = true;
 8011fe6:	2401      	movs	r4, #1
    RadioStandby( );
 8011fe8:	f7fe ffde 	bl	8010fa8 <RadioStandby>
}
 8011fec:	4620      	mov	r0, r4
 8011fee:	b00b      	add	sp, #44	; 0x2c
 8011ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011ff4 <RadioInit>:
{
 8011ff4:	b570      	push	{r4, r5, r6, lr}
 8011ff6:	b082      	sub	sp, #8
    RadioEvents = events;
 8011ff8:	4b1d      	ldr	r3, [pc, #116]	; (8012070 <RadioInit+0x7c>)
 8011ffa:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8011ffc:	4b1d      	ldr	r3, [pc, #116]	; (8012074 <RadioInit+0x80>)
 8011ffe:	2400      	movs	r4, #0
 8012000:	705c      	strb	r4, [r3, #1]
    SubgRf.TxTimeout = 0;
 8012002:	605c      	str	r4, [r3, #4]
    SubgRf.RxTimeout = 0;
 8012004:	609c      	str	r4, [r3, #8]
    SUBGRF_Init( RadioOnDioIrq );
 8012006:	481c      	ldr	r0, [pc, #112]	; (8012078 <RadioInit+0x84>)
 8012008:	f000 fb6a 	bl	80126e0 <SUBGRF_Init>
    RadioSetPublicNetwork( false );
 801200c:	4620      	mov	r0, r4
 801200e:	f7ff fd31 	bl	8011a74 <RadioSetPublicNetwork>
    SUBGRF_SetRegulatorMode(  );
 8012012:	f000 f8fa 	bl	801220a <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8012016:	4621      	mov	r1, r4
 8012018:	4620      	mov	r0, r4
 801201a:	f000 f9f5 	bl	8012408 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 801201e:	2204      	movs	r2, #4
 8012020:	4621      	mov	r1, r4
 8012022:	2001      	movs	r0, #1
 8012024:	f000 fbcd 	bl	80127c2 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8012028:	4623      	mov	r3, r4
 801202a:	4622      	mov	r2, r4
 801202c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012030:	4608      	mov	r0, r1
 8012032:	f000 f980 	bl	8012336 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8012036:	f7ff f9a9 	bl	801138c <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801203a:	4e10      	ldr	r6, [pc, #64]	; (801207c <RadioInit+0x88>)
 801203c:	9400      	str	r4, [sp, #0]
 801203e:	4b10      	ldr	r3, [pc, #64]	; (8012080 <RadioInit+0x8c>)
 8012040:	4622      	mov	r2, r4
 8012042:	f04f 31ff 	mov.w	r1, #4294967295
 8012046:	4630      	mov	r0, r6
 8012048:	f001 fa16 	bl	8013478 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801204c:	4d0d      	ldr	r5, [pc, #52]	; (8012084 <RadioInit+0x90>)
 801204e:	9400      	str	r4, [sp, #0]
 8012050:	4b0d      	ldr	r3, [pc, #52]	; (8012088 <RadioInit+0x94>)
 8012052:	4622      	mov	r2, r4
 8012054:	f04f 31ff 	mov.w	r1, #4294967295
 8012058:	4628      	mov	r0, r5
 801205a:	f001 fa0d 	bl	8013478 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801205e:	4630      	mov	r0, r6
 8012060:	f001 fa68 	bl	8013534 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8012064:	4628      	mov	r0, r5
 8012066:	f001 fa65 	bl	8013534 <UTIL_TIMER_Stop>
}
 801206a:	b002      	add	sp, #8
 801206c:	bd70      	pop	{r4, r5, r6, pc}
 801206e:	bf00      	nop
 8012070:	2000114c 	.word	0x2000114c
 8012074:	200019d0 	.word	0x200019d0
 8012078:	08011289 	.word	0x08011289
 801207c:	20001a28 	.word	0x20001a28
 8012080:	08010dcd 	.word	0x08010dcd
 8012084:	20001a40 	.word	0x20001a40
 8012088:	08010de9 	.word	0x08010de9

0801208c <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801208c:	b510      	push	{r4, lr}
 801208e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012090:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012094:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8012096:	460a      	mov	r2, r1
 8012098:	4601      	mov	r1, r0
 801209a:	4803      	ldr	r0, [pc, #12]	; (80120a8 <SUBGRF_WriteCommand+0x1c>)
 801209c:	f7f4 fcb2 	bl	8006a04 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120a0:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80120a4:	bd10      	pop	{r4, pc}
 80120a6:	bf00      	nop
 80120a8:	200018bc 	.word	0x200018bc

080120ac <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80120ac:	b510      	push	{r4, lr}
 80120ae:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120b0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80120b4:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80120b6:	460a      	mov	r2, r1
 80120b8:	4601      	mov	r1, r0
 80120ba:	4803      	ldr	r0, [pc, #12]	; (80120c8 <SUBGRF_ReadCommand+0x1c>)
 80120bc:	f7f4 fcf8 	bl	8006ab0 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120c0:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80120c4:	bd10      	pop	{r4, pc}
 80120c6:	bf00      	nop
 80120c8:	200018bc 	.word	0x200018bc

080120cc <SUBGRF_GetOperatingMode>:
}
 80120cc:	4b01      	ldr	r3, [pc, #4]	; (80120d4 <SUBGRF_GetOperatingMode+0x8>)
 80120ce:	7818      	ldrb	r0, [r3, #0]
 80120d0:	4770      	bx	lr
 80120d2:	bf00      	nop
 80120d4:	20001156 	.word	0x20001156

080120d8 <SUBGRF_SetStandby>:
{
 80120d8:	b500      	push	{lr}
 80120da:	b083      	sub	sp, #12
 80120dc:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80120e0:	2201      	movs	r2, #1
 80120e2:	f10d 0107 	add.w	r1, sp, #7
 80120e6:	2080      	movs	r0, #128	; 0x80
 80120e8:	f7ff ffd0 	bl	801208c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80120ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80120f0:	b92b      	cbnz	r3, 80120fe <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 80120f2:	4b05      	ldr	r3, [pc, #20]	; (8012108 <SUBGRF_SetStandby+0x30>)
 80120f4:	2201      	movs	r2, #1
 80120f6:	701a      	strb	r2, [r3, #0]
}
 80120f8:	b003      	add	sp, #12
 80120fa:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 80120fe:	4b02      	ldr	r3, [pc, #8]	; (8012108 <SUBGRF_SetStandby+0x30>)
 8012100:	2202      	movs	r2, #2
 8012102:	701a      	strb	r2, [r3, #0]
}
 8012104:	e7f8      	b.n	80120f8 <SUBGRF_SetStandby+0x20>
 8012106:	bf00      	nop
 8012108:	20001156 	.word	0x20001156

0801210c <SUBGRF_SetTx>:
{
 801210c:	b500      	push	{lr}
 801210e:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8012110:	4b0a      	ldr	r3, [pc, #40]	; (801213c <SUBGRF_SetTx+0x30>)
 8012112:	2204      	movs	r2, #4
 8012114:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012116:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801211a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801211e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012122:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012126:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801212a:	2203      	movs	r2, #3
 801212c:	a901      	add	r1, sp, #4
 801212e:	2083      	movs	r0, #131	; 0x83
 8012130:	f7ff ffac 	bl	801208c <SUBGRF_WriteCommand>
}
 8012134:	b003      	add	sp, #12
 8012136:	f85d fb04 	ldr.w	pc, [sp], #4
 801213a:	bf00      	nop
 801213c:	20001156 	.word	0x20001156

08012140 <SUBGRF_SetRx>:
{
 8012140:	b500      	push	{lr}
 8012142:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8012144:	4b0a      	ldr	r3, [pc, #40]	; (8012170 <SUBGRF_SetRx+0x30>)
 8012146:	2205      	movs	r2, #5
 8012148:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801214a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801214e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012152:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012156:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801215a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801215e:	2203      	movs	r2, #3
 8012160:	a901      	add	r1, sp, #4
 8012162:	2082      	movs	r0, #130	; 0x82
 8012164:	f7ff ff92 	bl	801208c <SUBGRF_WriteCommand>
}
 8012168:	b003      	add	sp, #12
 801216a:	f85d fb04 	ldr.w	pc, [sp], #4
 801216e:	bf00      	nop
 8012170:	20001156 	.word	0x20001156

08012174 <SUBGRF_SetRxDutyCycle>:
{
 8012174:	b500      	push	{lr}
 8012176:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8012178:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801217c:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8012180:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012184:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8012188:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801218c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8012190:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8012194:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8012198:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801219c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80121a0:	2206      	movs	r2, #6
 80121a2:	4669      	mov	r1, sp
 80121a4:	2094      	movs	r0, #148	; 0x94
 80121a6:	f7ff ff71 	bl	801208c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80121aa:	4b03      	ldr	r3, [pc, #12]	; (80121b8 <SUBGRF_SetRxDutyCycle+0x44>)
 80121ac:	2206      	movs	r2, #6
 80121ae:	701a      	strb	r2, [r3, #0]
}
 80121b0:	b003      	add	sp, #12
 80121b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80121b6:	bf00      	nop
 80121b8:	20001156 	.word	0x20001156

080121bc <SUBGRF_SetCad>:
{
 80121bc:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80121be:	2200      	movs	r2, #0
 80121c0:	4611      	mov	r1, r2
 80121c2:	20c5      	movs	r0, #197	; 0xc5
 80121c4:	f7ff ff62 	bl	801208c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80121c8:	4b01      	ldr	r3, [pc, #4]	; (80121d0 <SUBGRF_SetCad+0x14>)
 80121ca:	2207      	movs	r2, #7
 80121cc:	701a      	strb	r2, [r3, #0]
}
 80121ce:	bd08      	pop	{r3, pc}
 80121d0:	20001156 	.word	0x20001156

080121d4 <SUBGRF_SetTxContinuousWave>:
{
 80121d4:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80121d6:	2200      	movs	r2, #0
 80121d8:	4611      	mov	r1, r2
 80121da:	20d1      	movs	r0, #209	; 0xd1
 80121dc:	f7ff ff56 	bl	801208c <SUBGRF_WriteCommand>
}
 80121e0:	bd08      	pop	{r3, pc}

080121e2 <SUBGRF_SetTxInfinitePreamble>:
{
 80121e2:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80121e4:	2200      	movs	r2, #0
 80121e6:	4611      	mov	r1, r2
 80121e8:	20d2      	movs	r0, #210	; 0xd2
 80121ea:	f7ff ff4f 	bl	801208c <SUBGRF_WriteCommand>
}
 80121ee:	bd08      	pop	{r3, pc}

080121f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 80121f0:	b500      	push	{lr}
 80121f2:	b083      	sub	sp, #12
 80121f4:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80121f8:	2201      	movs	r2, #1
 80121fa:	f10d 0107 	add.w	r1, sp, #7
 80121fe:	209f      	movs	r0, #159	; 0x9f
 8012200:	f7ff ff44 	bl	801208c <SUBGRF_WriteCommand>
}
 8012204:	b003      	add	sp, #12
 8012206:	f85d fb04 	ldr.w	pc, [sp], #4

0801220a <SUBGRF_SetRegulatorMode>:
{
 801220a:	b500      	push	{lr}
 801220c:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801220e:	f7f1 ff29 	bl	8004064 <RBI_IsDCDC>
 8012212:	2801      	cmp	r0, #1
 8012214:	d00b      	beq.n	801222e <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8012216:	2300      	movs	r3, #0
 8012218:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801221c:	2201      	movs	r2, #1
 801221e:	f10d 0107 	add.w	r1, sp, #7
 8012222:	2096      	movs	r0, #150	; 0x96
 8012224:	f7ff ff32 	bl	801208c <SUBGRF_WriteCommand>
}
 8012228:	b003      	add	sp, #12
 801222a:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 801222e:	2301      	movs	r3, #1
 8012230:	f88d 3007 	strb.w	r3, [sp, #7]
 8012234:	e7f2      	b.n	801221c <SUBGRF_SetRegulatorMode+0x12>

08012236 <SUBGRF_Calibrate>:
{
 8012236:	b500      	push	{lr}
 8012238:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801223a:	f3c0 1280 	ubfx	r2, r0, #6, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801223e:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8012242:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8012244:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8012248:	f3c0 1200 	ubfx	r2, r0, #4, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801224c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8012250:	f3c0 02c0 	ubfx	r2, r0, #3, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8012254:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8012258:	f3c0 0280 	ubfx	r2, r0, #2, #1
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801225c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8012260:	f3c0 0240 	ubfx	r2, r0, #1, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8012264:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8012268:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801226c:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801226e:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8012272:	2201      	movs	r2, #1
 8012274:	f10d 0107 	add.w	r1, sp, #7
 8012278:	2089      	movs	r0, #137	; 0x89
 801227a:	f7ff ff07 	bl	801208c <SUBGRF_WriteCommand>
}
 801227e:	b003      	add	sp, #12
 8012280:	f85d fb04 	ldr.w	pc, [sp], #4

08012284 <SUBGRF_CalibrateImage>:
{
 8012284:	b500      	push	{lr}
 8012286:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8012288:	4b1c      	ldr	r3, [pc, #112]	; (80122fc <SUBGRF_CalibrateImage+0x78>)
 801228a:	4298      	cmp	r0, r3
 801228c:	d90d      	bls.n	80122aa <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 801228e:	23e1      	movs	r3, #225	; 0xe1
 8012290:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8012294:	23e9      	movs	r3, #233	; 0xe9
 8012296:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801229a:	2202      	movs	r2, #2
 801229c:	a901      	add	r1, sp, #4
 801229e:	2098      	movs	r0, #152	; 0x98
 80122a0:	f7ff fef4 	bl	801208c <SUBGRF_WriteCommand>
}
 80122a4:	b003      	add	sp, #12
 80122a6:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 80122aa:	4b15      	ldr	r3, [pc, #84]	; (8012300 <SUBGRF_CalibrateImage+0x7c>)
 80122ac:	4298      	cmp	r0, r3
 80122ae:	d906      	bls.n	80122be <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 80122b0:	23d7      	movs	r3, #215	; 0xd7
 80122b2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 80122b6:	23db      	movs	r3, #219	; 0xdb
 80122b8:	f88d 3005 	strb.w	r3, [sp, #5]
 80122bc:	e7ed      	b.n	801229a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 80122be:	4b11      	ldr	r3, [pc, #68]	; (8012304 <SUBGRF_CalibrateImage+0x80>)
 80122c0:	4298      	cmp	r0, r3
 80122c2:	d906      	bls.n	80122d2 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 80122c4:	23c1      	movs	r3, #193	; 0xc1
 80122c6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 80122ca:	23c5      	movs	r3, #197	; 0xc5
 80122cc:	f88d 3005 	strb.w	r3, [sp, #5]
 80122d0:	e7e3      	b.n	801229a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 80122d2:	4b0d      	ldr	r3, [pc, #52]	; (8012308 <SUBGRF_CalibrateImage+0x84>)
 80122d4:	4298      	cmp	r0, r3
 80122d6:	d906      	bls.n	80122e6 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 80122d8:	2375      	movs	r3, #117	; 0x75
 80122da:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 80122de:	2381      	movs	r3, #129	; 0x81
 80122e0:	f88d 3005 	strb.w	r3, [sp, #5]
 80122e4:	e7d9      	b.n	801229a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 80122e6:	4b09      	ldr	r3, [pc, #36]	; (801230c <SUBGRF_CalibrateImage+0x88>)
 80122e8:	4298      	cmp	r0, r3
 80122ea:	d9d6      	bls.n	801229a <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 80122ec:	236b      	movs	r3, #107	; 0x6b
 80122ee:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 80122f2:	236f      	movs	r3, #111	; 0x6f
 80122f4:	f88d 3005 	strb.w	r3, [sp, #5]
 80122f8:	e7cf      	b.n	801229a <SUBGRF_CalibrateImage+0x16>
 80122fa:	bf00      	nop
 80122fc:	35a4e900 	.word	0x35a4e900
 8012300:	32a9f880 	.word	0x32a9f880
 8012304:	2de54480 	.word	0x2de54480
 8012308:	1b6b0b00 	.word	0x1b6b0b00
 801230c:	1954fc40 	.word	0x1954fc40

08012310 <SUBGRF_SetPaConfig>:
{
 8012310:	b500      	push	{lr}
 8012312:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8012314:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8012318:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 801231c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8012320:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8012324:	2204      	movs	r2, #4
 8012326:	eb0d 0102 	add.w	r1, sp, r2
 801232a:	2095      	movs	r0, #149	; 0x95
 801232c:	f7ff feae 	bl	801208c <SUBGRF_WriteCommand>
}
 8012330:	b003      	add	sp, #12
 8012332:	f85d fb04 	ldr.w	pc, [sp], #4

08012336 <SUBGRF_SetDioIrqParams>:
{
 8012336:	b510      	push	{r4, lr}
 8012338:	b082      	sub	sp, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801233a:	0a04      	lsrs	r4, r0, #8
 801233c:	f88d 4000 	strb.w	r4, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8012340:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8012344:	0a08      	lsrs	r0, r1, #8
 8012346:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801234a:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801234e:	0a11      	lsrs	r1, r2, #8
 8012350:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8012354:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8012358:	0a1a      	lsrs	r2, r3, #8
 801235a:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801235e:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8012362:	2208      	movs	r2, #8
 8012364:	4669      	mov	r1, sp
 8012366:	4610      	mov	r0, r2
 8012368:	f7ff fe90 	bl	801208c <SUBGRF_WriteCommand>
}
 801236c:	b002      	add	sp, #8
 801236e:	bd10      	pop	{r4, pc}

08012370 <SUBGRF_SetTcxoMode>:
{
 8012370:	b500      	push	{lr}
 8012372:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8012374:	f000 0007 	and.w	r0, r0, #7
 8012378:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801237c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8012380:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012384:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8012388:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801238c:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8012390:	2204      	movs	r2, #4
 8012392:	eb0d 0102 	add.w	r1, sp, r2
 8012396:	2097      	movs	r0, #151	; 0x97
 8012398:	f7ff fe78 	bl	801208c <SUBGRF_WriteCommand>
}
 801239c:	b003      	add	sp, #12
 801239e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080123a4 <SUBGRF_SetRfFrequency>:
{
 80123a4:	b510      	push	{r4, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 80123aa:	4b12      	ldr	r3, [pc, #72]	; (80123f4 <SUBGRF_SetRfFrequency+0x50>)
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	b1d3      	cbz	r3, 80123e6 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 80123b0:	4a11      	ldr	r2, [pc, #68]	; (80123f8 <SUBGRF_SetRfFrequency+0x54>)
 80123b2:	2300      	movs	r3, #0
 80123b4:	0660      	lsls	r0, r4, #25
 80123b6:	09e1      	lsrs	r1, r4, #7
 80123b8:	f7f0 fc46 	bl	8002c48 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80123bc:	0e03      	lsrs	r3, r0, #24
 80123be:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80123c2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80123c6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80123ca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80123ce:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80123d2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80123d6:	2204      	movs	r2, #4
 80123d8:	eb0d 0102 	add.w	r1, sp, r2
 80123dc:	2086      	movs	r0, #134	; 0x86
 80123de:	f7ff fe55 	bl	801208c <SUBGRF_WriteCommand>
}
 80123e2:	b002      	add	sp, #8
 80123e4:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 80123e6:	f7ff ff4d 	bl	8012284 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80123ea:	4b02      	ldr	r3, [pc, #8]	; (80123f4 <SUBGRF_SetRfFrequency+0x50>)
 80123ec:	2201      	movs	r2, #1
 80123ee:	701a      	strb	r2, [r3, #0]
 80123f0:	e7de      	b.n	80123b0 <SUBGRF_SetRfFrequency+0xc>
 80123f2:	bf00      	nop
 80123f4:	20001154 	.word	0x20001154
 80123f8:	01e84800 	.word	0x01e84800

080123fc <SUBGRF_GetPacketType>:
}
 80123fc:	4b01      	ldr	r3, [pc, #4]	; (8012404 <SUBGRF_GetPacketType+0x8>)
 80123fe:	7818      	ldrb	r0, [r3, #0]
 8012400:	4770      	bx	lr
 8012402:	bf00      	nop
 8012404:	20001157 	.word	0x20001157

08012408 <SUBGRF_SetBufferBaseAddress>:
{
 8012408:	b500      	push	{lr}
 801240a:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 801240c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8012410:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8012414:	2202      	movs	r2, #2
 8012416:	a901      	add	r1, sp, #4
 8012418:	208f      	movs	r0, #143	; 0x8f
 801241a:	f7ff fe37 	bl	801208c <SUBGRF_WriteCommand>
}
 801241e:	b003      	add	sp, #12
 8012420:	f85d fb04 	ldr.w	pc, [sp], #4

08012424 <SUBGRF_GetRssiInst>:
{
 8012424:	b500      	push	{lr}
 8012426:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8012428:	2201      	movs	r2, #1
 801242a:	a901      	add	r1, sp, #4
 801242c:	2015      	movs	r0, #21
 801242e:	f7ff fe3d 	bl	80120ac <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8012432:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8012436:	4240      	negs	r0, r0
}
 8012438:	1040      	asrs	r0, r0, #1
 801243a:	b003      	add	sp, #12
 801243c:	f85d fb04 	ldr.w	pc, [sp], #4

08012440 <SUBGRF_GetPacketStatus>:
{
 8012440:	b510      	push	{r4, lr}
 8012442:	b082      	sub	sp, #8
 8012444:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8012446:	2203      	movs	r2, #3
 8012448:	a901      	add	r1, sp, #4
 801244a:	2014      	movs	r0, #20
 801244c:	f7ff fe2e 	bl	80120ac <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8012450:	f7ff ffd4 	bl	80123fc <SUBGRF_GetPacketType>
 8012454:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8012456:	b148      	cbz	r0, 801246c <SUBGRF_GetPacketStatus+0x2c>
 8012458:	2801      	cmp	r0, #1
 801245a:	d018      	beq.n	801248e <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801245c:	2214      	movs	r2, #20
 801245e:	2100      	movs	r1, #0
 8012460:	4620      	mov	r0, r4
 8012462:	f000 fe4b 	bl	80130fc <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8012466:	230f      	movs	r3, #15
 8012468:	7023      	strb	r3, [r4, #0]
}
 801246a:	e00e      	b.n	801248a <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801246c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012470:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8012472:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012476:	425b      	negs	r3, r3
 8012478:	105b      	asrs	r3, r3, #1
 801247a:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801247c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012480:	425b      	negs	r3, r3
 8012482:	105b      	asrs	r3, r3, #1
 8012484:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8012486:	2300      	movs	r3, #0
 8012488:	60a3      	str	r3, [r4, #8]
}
 801248a:	b002      	add	sp, #8
 801248c:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801248e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012492:	425b      	negs	r3, r3
 8012494:	105b      	asrs	r3, r3, #1
 8012496:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8012498:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 801249c:	3302      	adds	r3, #2
 801249e:	109b      	asrs	r3, r3, #2
 80124a0:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80124a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80124a6:	425b      	negs	r3, r3
 80124a8:	105b      	asrs	r3, r3, #1
 80124aa:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80124ac:	4b01      	ldr	r3, [pc, #4]	; (80124b4 <SUBGRF_GetPacketStatus+0x74>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	6123      	str	r3, [r4, #16]
            break;
 80124b2:	e7ea      	b.n	801248a <SUBGRF_GetPacketStatus+0x4a>
 80124b4:	20001150 	.word	0x20001150

080124b8 <SUBGRF_WriteRegister>:
{
 80124b8:	b500      	push	{lr}
 80124ba:	b083      	sub	sp, #12
 80124bc:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80124c0:	2301      	movs	r3, #1
 80124c2:	f10d 0207 	add.w	r2, sp, #7
 80124c6:	4601      	mov	r1, r0
 80124c8:	4802      	ldr	r0, [pc, #8]	; (80124d4 <SUBGRF_WriteRegister+0x1c>)
 80124ca:	f7f4 f9f7 	bl	80068bc <HAL_SUBGHZ_WriteRegisters>
}
 80124ce:	b003      	add	sp, #12
 80124d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80124d4:	200018bc 	.word	0x200018bc

080124d8 <SUBGRF_SetRxBoosted>:
{
 80124d8:	b510      	push	{r4, lr}
 80124da:	b082      	sub	sp, #8
 80124dc:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 80124de:	4b0c      	ldr	r3, [pc, #48]	; (8012510 <SUBGRF_SetRxBoosted+0x38>)
 80124e0:	2205      	movs	r2, #5
 80124e2:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80124e4:	2197      	movs	r1, #151	; 0x97
 80124e6:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80124ea:	f7ff ffe5 	bl	80124b8 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80124ee:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80124f2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80124f6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80124fa:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80124fe:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8012502:	2203      	movs	r2, #3
 8012504:	a901      	add	r1, sp, #4
 8012506:	2082      	movs	r0, #130	; 0x82
 8012508:	f7ff fdc0 	bl	801208c <SUBGRF_WriteCommand>
}
 801250c:	b002      	add	sp, #8
 801250e:	bd10      	pop	{r4, pc}
 8012510:	20001156 	.word	0x20001156

08012514 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8012514:	b500      	push	{lr}
 8012516:	b083      	sub	sp, #12
 8012518:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801251c:	2201      	movs	r2, #1
 801251e:	f10d 0107 	add.w	r1, sp, #7
 8012522:	20a0      	movs	r0, #160	; 0xa0
 8012524:	f7ff fdb2 	bl	801208c <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8012528:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801252c:	2b3f      	cmp	r3, #63	; 0x3f
 801252e:	d90f      	bls.n	8012550 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8012530:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8012532:	2200      	movs	r2, #0
        while( mant > 31 )
 8012534:	2b1f      	cmp	r3, #31
 8012536:	d903      	bls.n	8012540 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
            mant >>= 2;
 8012538:	089b      	lsrs	r3, r3, #2
            exp++;
 801253a:	1c51      	adds	r1, r2, #1
 801253c:	b2ca      	uxtb	r2, r1
 801253e:	e7f9      	b.n	8012534 <SUBGRF_SetLoRaSymbNumTimeout+0x20>
        reg = exp + ( mant << 3 );
 8012540:	00d9      	lsls	r1, r3, #3
 8012542:	b2c9      	uxtb	r1, r1
 8012544:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8012546:	b2c9      	uxtb	r1, r1
 8012548:	f240 7006 	movw	r0, #1798	; 0x706
 801254c:	f7ff ffb4 	bl	80124b8 <SUBGRF_WriteRegister>
}
 8012550:	b003      	add	sp, #12
 8012552:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012558 <SUBGRF_SetPacketType>:
{
 8012558:	b500      	push	{lr}
 801255a:	b083      	sub	sp, #12
 801255c:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8012560:	4b08      	ldr	r3, [pc, #32]	; (8012584 <SUBGRF_SetPacketType+0x2c>)
 8012562:	7018      	strb	r0, [r3, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8012564:	b140      	cbz	r0, 8012578 <SUBGRF_SetPacketType+0x20>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8012566:	2201      	movs	r2, #1
 8012568:	f10d 0107 	add.w	r1, sp, #7
 801256c:	208a      	movs	r0, #138	; 0x8a
 801256e:	f7ff fd8d 	bl	801208c <SUBGRF_WriteCommand>
}
 8012572:	b003      	add	sp, #12
 8012574:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8012578:	2100      	movs	r1, #0
 801257a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801257e:	f7ff ff9b 	bl	80124b8 <SUBGRF_WriteRegister>
 8012582:	e7f0      	b.n	8012566 <SUBGRF_SetPacketType+0xe>
 8012584:	20001157 	.word	0x20001157

08012588 <SUBGRF_SetModulationParams>:
{
 8012588:	b510      	push	{r4, lr}
 801258a:	b082      	sub	sp, #8
 801258c:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801258e:	4b3e      	ldr	r3, [pc, #248]	; (8012688 <SUBGRF_SetModulationParams+0x100>)
 8012590:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012594:	ab02      	add	r3, sp, #8
 8012596:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 801259a:	7820      	ldrb	r0, [r4, #0]
 801259c:	4b3b      	ldr	r3, [pc, #236]	; (801268c <SUBGRF_SetModulationParams+0x104>)
 801259e:	781b      	ldrb	r3, [r3, #0]
 80125a0:	4298      	cmp	r0, r3
 80125a2:	d106      	bne.n	80125b2 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 80125a4:	7823      	ldrb	r3, [r4, #0]
 80125a6:	2b03      	cmp	r3, #3
 80125a8:	d82c      	bhi.n	8012604 <SUBGRF_SetModulationParams+0x7c>
 80125aa:	e8df f003 	tbb	[pc, r3]
 80125ae:	4205      	.short	0x4205
 80125b0:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80125b2:	f7ff ffd1 	bl	8012558 <SUBGRF_SetPacketType>
 80125b6:	e7f5      	b.n	80125a4 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80125b8:	6862      	ldr	r2, [r4, #4]
 80125ba:	4b35      	ldr	r3, [pc, #212]	; (8012690 <SUBGRF_SetModulationParams+0x108>)
 80125bc:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80125c0:	0c1a      	lsrs	r2, r3, #16
 80125c2:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80125c6:	0a1a      	lsrs	r2, r3, #8
 80125c8:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80125cc:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80125d0:	7b23      	ldrb	r3, [r4, #12]
 80125d2:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80125d6:	7b63      	ldrb	r3, [r4, #13]
 80125d8:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80125dc:	68a1      	ldr	r1, [r4, #8]
 80125de:	4a2d      	ldr	r2, [pc, #180]	; (8012694 <SUBGRF_SetModulationParams+0x10c>)
 80125e0:	2300      	movs	r3, #0
 80125e2:	0648      	lsls	r0, r1, #25
 80125e4:	09c9      	lsrs	r1, r1, #7
 80125e6:	f7f0 fb2f 	bl	8002c48 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80125ea:	0c03      	lsrs	r3, r0, #16
 80125ec:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80125f0:	0a03      	lsrs	r3, r0, #8
 80125f2:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 80125f6:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80125fa:	2208      	movs	r2, #8
 80125fc:	4669      	mov	r1, sp
 80125fe:	208b      	movs	r0, #139	; 0x8b
 8012600:	f7ff fd44 	bl	801208c <SUBGRF_WriteCommand>
}
 8012604:	b002      	add	sp, #8
 8012606:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8012608:	6922      	ldr	r2, [r4, #16]
 801260a:	4b21      	ldr	r3, [pc, #132]	; (8012690 <SUBGRF_SetModulationParams+0x108>)
 801260c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012610:	0c1a      	lsrs	r2, r3, #16
 8012612:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012616:	0a1a      	lsrs	r2, r3, #8
 8012618:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 801261c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8012620:	7d23      	ldrb	r3, [r4, #20]
 8012622:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012626:	2204      	movs	r2, #4
 8012628:	4669      	mov	r1, sp
 801262a:	208b      	movs	r0, #139	; 0x8b
 801262c:	f7ff fd2e 	bl	801208c <SUBGRF_WriteCommand>
        break;
 8012630:	e7e8      	b.n	8012604 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8012632:	7e23      	ldrb	r3, [r4, #24]
 8012634:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8012638:	7e63      	ldrb	r3, [r4, #25]
 801263a:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801263e:	7ea3      	ldrb	r3, [r4, #26]
 8012640:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8012644:	7ee3      	ldrb	r3, [r4, #27]
 8012646:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801264a:	2204      	movs	r2, #4
 801264c:	4669      	mov	r1, sp
 801264e:	208b      	movs	r0, #139	; 0x8b
 8012650:	f7ff fd1c 	bl	801208c <SUBGRF_WriteCommand>
        break;
 8012654:	e7d6      	b.n	8012604 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8012656:	6862      	ldr	r2, [r4, #4]
 8012658:	4b0d      	ldr	r3, [pc, #52]	; (8012690 <SUBGRF_SetModulationParams+0x108>)
 801265a:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801265e:	0c1a      	lsrs	r2, r3, #16
 8012660:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012664:	0a1a      	lsrs	r2, r3, #8
 8012666:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 801266a:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801266e:	7b23      	ldrb	r3, [r4, #12]
 8012670:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8012674:	7b63      	ldrb	r3, [r4, #13]
 8012676:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801267a:	2205      	movs	r2, #5
 801267c:	4669      	mov	r1, sp
 801267e:	208b      	movs	r0, #139	; 0x8b
 8012680:	f7ff fd04 	bl	801208c <SUBGRF_WriteCommand>
}
 8012684:	e7be      	b.n	8012604 <SUBGRF_SetModulationParams+0x7c>
 8012686:	bf00      	nop
 8012688:	08013c04 	.word	0x08013c04
 801268c:	20001157 	.word	0x20001157
 8012690:	3d090000 	.word	0x3d090000
 8012694:	01e84800 	.word	0x01e84800

08012698 <SUBGRF_ReadRegister>:
{
 8012698:	b500      	push	{lr}
 801269a:	b083      	sub	sp, #12
 801269c:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801269e:	2301      	movs	r3, #1
 80126a0:	f10d 0207 	add.w	r2, sp, #7
 80126a4:	4803      	ldr	r0, [pc, #12]	; (80126b4 <SUBGRF_ReadRegister+0x1c>)
 80126a6:	f7f4 f959 	bl	800695c <HAL_SUBGHZ_ReadRegisters>
}
 80126aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80126ae:	b003      	add	sp, #12
 80126b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80126b4:	200018bc 	.word	0x200018bc

080126b8 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80126b8:	b510      	push	{r4, lr}
 80126ba:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80126bc:	f7f1 fcd2 	bl	8004064 <RBI_IsDCDC>
 80126c0:	2801      	cmp	r0, #1
 80126c2:	d000      	beq.n	80126c6 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80126c4:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80126c6:	f640 1023 	movw	r0, #2339	; 0x923
 80126ca:	f7ff ffe5 	bl	8012698 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 80126ce:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80126d2:	4321      	orrs	r1, r4
 80126d4:	f640 1023 	movw	r0, #2339	; 0x923
 80126d8:	f7ff feee 	bl	80124b8 <SUBGRF_WriteRegister>
}
 80126dc:	e7f2      	b.n	80126c4 <Radio_SMPS_Set+0xc>
	...

080126e0 <SUBGRF_Init>:
{
 80126e0:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80126e2:	b108      	cbz	r0, 80126e8 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80126e4:	4a16      	ldr	r2, [pc, #88]	; (8012740 <SUBGRF_Init+0x60>)
 80126e6:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 80126e8:	f7f0 fe7a 	bl	80033e0 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80126ec:	2002      	movs	r0, #2
 80126ee:	f7ff ffe3 	bl	80126b8 <Radio_SMPS_Set>
    ImageCalibrated = false;
 80126f2:	2000      	movs	r0, #0
 80126f4:	4b13      	ldr	r3, [pc, #76]	; (8012744 <SUBGRF_Init+0x64>)
 80126f6:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 80126f8:	f7ff fcee 	bl	80120d8 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 80126fc:	f7f1 fcb0 	bl	8004060 <RBI_IsTCXO>
 8012700:	2801      	cmp	r0, #1
 8012702:	d00f      	beq.n	8012724 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8012704:	2120      	movs	r1, #32
 8012706:	f640 1011 	movw	r0, #2321	; 0x911
 801270a:	f7ff fed5 	bl	80124b8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801270e:	2120      	movs	r1, #32
 8012710:	f640 1012 	movw	r0, #2322	; 0x912
 8012714:	f7ff fed0 	bl	80124b8 <SUBGRF_WriteRegister>
    RBI_Init();
 8012718:	f7f1 fc2c 	bl	8003f74 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 801271c:	4b0a      	ldr	r3, [pc, #40]	; (8012748 <SUBGRF_Init+0x68>)
 801271e:	2201      	movs	r2, #1
 8012720:	701a      	strb	r2, [r3, #0]
}
 8012722:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8012724:	2140      	movs	r1, #64	; 0x40
 8012726:	f7ff fe23 	bl	8012370 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801272a:	2100      	movs	r1, #0
 801272c:	f640 1011 	movw	r0, #2321	; 0x911
 8012730:	f7ff fec2 	bl	80124b8 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8012734:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8012738:	f7ff fd7d 	bl	8012236 <SUBGRF_Calibrate>
 801273c:	e7ec      	b.n	8012718 <SUBGRF_Init+0x38>
 801273e:	bf00      	nop
 8012740:	20001158 	.word	0x20001158
 8012744:	20001154 	.word	0x20001154
 8012748:	20001156 	.word	0x20001156

0801274c <SUBGRF_SetSleep>:
{
 801274c:	b510      	push	{r4, lr}
 801274e:	b082      	sub	sp, #8
 8012750:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8012752:	2000      	movs	r0, #0
 8012754:	f7f1 fc48 	bl	8003fe8 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8012758:	2002      	movs	r0, #2
 801275a:	f7ff ffad 	bl	80126b8 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801275e:	f3c4 0080 	ubfx	r0, r4, #2, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8012762:	f3c4 0340 	ubfx	r3, r4, #1, #1
 8012766:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8012768:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801276c:	f004 0001 	and.w	r0, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8012770:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8012772:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8012776:	2201      	movs	r2, #1
 8012778:	f10d 0107 	add.w	r1, sp, #7
 801277c:	2084      	movs	r0, #132	; 0x84
 801277e:	f7ff fc85 	bl	801208c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8012782:	4b02      	ldr	r3, [pc, #8]	; (801278c <SUBGRF_SetSleep+0x40>)
 8012784:	2200      	movs	r2, #0
 8012786:	701a      	strb	r2, [r3, #0]
}
 8012788:	b002      	add	sp, #8
 801278a:	bd10      	pop	{r4, pc}
 801278c:	20001156 	.word	0x20001156

08012790 <SUBGRF_SetWhiteningSeed>:
{
 8012790:	b510      	push	{r4, lr}
 8012792:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8012794:	f7ff fe32 	bl	80123fc <SUBGRF_GetPacketType>
 8012798:	b100      	cbz	r0, 801279c <SUBGRF_SetWhiteningSeed+0xc>
}
 801279a:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801279c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80127a0:	f7ff ff7a 	bl	8012698 <SUBGRF_ReadRegister>
 80127a4:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80127a8:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80127ac:	4301      	orrs	r1, r0
 80127ae:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80127b2:	f7ff fe81 	bl	80124b8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80127b6:	b2e1      	uxtb	r1, r4
 80127b8:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80127bc:	f7ff fe7c 	bl	80124b8 <SUBGRF_WriteRegister>
}
 80127c0:	e7eb      	b.n	801279a <SUBGRF_SetWhiteningSeed+0xa>

080127c2 <SUBGRF_SetTxParams>:
{
 80127c2:	b530      	push	{r4, r5, lr}
 80127c4:	b083      	sub	sp, #12
 80127c6:	460c      	mov	r4, r1
 80127c8:	4615      	mov	r5, r2
    if( paSelect == RFO_LP )
 80127ca:	2801      	cmp	r0, #1
 80127cc:	d127      	bne.n	801281e <SUBGRF_SetTxParams+0x5c>
        if( power == 15 )
 80127ce:	290f      	cmp	r1, #15
 80127d0:	d00d      	beq.n	80127ee <SUBGRF_SetTxParams+0x2c>
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80127d2:	2301      	movs	r3, #1
 80127d4:	461a      	mov	r2, r3
 80127d6:	2100      	movs	r1, #0
 80127d8:	2004      	movs	r0, #4
 80127da:	f7ff fd99 	bl	8012310 <SUBGRF_SetPaConfig>
        if( power >= 14 )
 80127de:	2c0d      	cmp	r4, #13
 80127e0:	dc0c      	bgt.n	80127fc <SUBGRF_SetTxParams+0x3a>
        else if( power < -17 )
 80127e2:	f114 0f11 	cmn.w	r4, #17
 80127e6:	da0a      	bge.n	80127fe <SUBGRF_SetTxParams+0x3c>
            power = -17;
 80127e8:	f06f 0410 	mvn.w	r4, #16
 80127ec:	e007      	b.n	80127fe <SUBGRF_SetTxParams+0x3c>
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80127ee:	2301      	movs	r3, #1
 80127f0:	461a      	mov	r2, r3
 80127f2:	2100      	movs	r1, #0
 80127f4:	2006      	movs	r0, #6
 80127f6:	f7ff fd8b 	bl	8012310 <SUBGRF_SetPaConfig>
 80127fa:	e7f0      	b.n	80127de <SUBGRF_SetTxParams+0x1c>
            power = 14;
 80127fc:	240e      	movs	r4, #14
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 80127fe:	2118      	movs	r1, #24
 8012800:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012804:	f7ff fe58 	bl	80124b8 <SUBGRF_WriteRegister>
    buf[0] = power;
 8012808:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 801280c:	f88d 5005 	strb.w	r5, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8012810:	2202      	movs	r2, #2
 8012812:	a901      	add	r1, sp, #4
 8012814:	208e      	movs	r0, #142	; 0x8e
 8012816:	f7ff fc39 	bl	801208c <SUBGRF_WriteCommand>
}
 801281a:	b003      	add	sp, #12
 801281c:	bd30      	pop	{r4, r5, pc}
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 801281e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8012822:	f7ff ff39 	bl	8012698 <SUBGRF_ReadRegister>
 8012826:	f040 011e 	orr.w	r1, r0, #30
 801282a:	b2c9      	uxtb	r1, r1
 801282c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8012830:	f7ff fe42 	bl	80124b8 <SUBGRF_WriteRegister>
        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8012834:	2301      	movs	r3, #1
 8012836:	2200      	movs	r2, #0
 8012838:	2107      	movs	r1, #7
 801283a:	2004      	movs	r0, #4
 801283c:	f7ff fd68 	bl	8012310 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8012840:	2c16      	cmp	r4, #22
 8012842:	dc05      	bgt.n	8012850 <SUBGRF_SetTxParams+0x8e>
        else if( power < -9 )
 8012844:	f114 0f09 	cmn.w	r4, #9
 8012848:	da03      	bge.n	8012852 <SUBGRF_SetTxParams+0x90>
            power = -9;
 801284a:	f06f 0408 	mvn.w	r4, #8
 801284e:	e000      	b.n	8012852 <SUBGRF_SetTxParams+0x90>
            power = 22;
 8012850:	2416      	movs	r4, #22
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8012852:	2138      	movs	r1, #56	; 0x38
 8012854:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012858:	f7ff fe2e 	bl	80124b8 <SUBGRF_WriteRegister>
 801285c:	e7d4      	b.n	8012808 <SUBGRF_SetTxParams+0x46>
	...

08012860 <SUBGRF_GetRxBufferStatus>:
{
 8012860:	b530      	push	{r4, r5, lr}
 8012862:	b083      	sub	sp, #12
 8012864:	4605      	mov	r5, r0
 8012866:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8012868:	2202      	movs	r2, #2
 801286a:	a901      	add	r1, sp, #4
 801286c:	2013      	movs	r0, #19
 801286e:	f7ff fc1d 	bl	80120ac <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8012872:	f7ff fdc3 	bl	80123fc <SUBGRF_GetPacketType>
 8012876:	2801      	cmp	r0, #1
 8012878:	d007      	beq.n	801288a <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 801287a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801287e:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8012880:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012884:	7023      	strb	r3, [r4, #0]
}
 8012886:	b003      	add	sp, #12
 8012888:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801288a:	4b05      	ldr	r3, [pc, #20]	; (80128a0 <SUBGRF_GetRxBufferStatus+0x40>)
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	b2db      	uxtb	r3, r3
 8012890:	2b01      	cmp	r3, #1
 8012892:	d1f2      	bne.n	801287a <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8012894:	f240 7002 	movw	r0, #1794	; 0x702
 8012898:	f7ff fefe 	bl	8012698 <SUBGRF_ReadRegister>
 801289c:	7028      	strb	r0, [r5, #0]
 801289e:	e7ef      	b.n	8012880 <SUBGRF_GetRxBufferStatus+0x20>
 80128a0:	20001155 	.word	0x20001155

080128a4 <SUBGRF_WriteRegisters>:
{
 80128a4:	b510      	push	{r4, lr}
 80128a6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128a8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80128ac:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80128ae:	460a      	mov	r2, r1
 80128b0:	4601      	mov	r1, r0
 80128b2:	4803      	ldr	r0, [pc, #12]	; (80128c0 <SUBGRF_WriteRegisters+0x1c>)
 80128b4:	f7f4 f802 	bl	80068bc <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128b8:	f384 8810 	msr	PRIMASK, r4
}
 80128bc:	bd10      	pop	{r4, pc}
 80128be:	bf00      	nop
 80128c0:	200018bc 	.word	0x200018bc

080128c4 <SUBGRF_SetSyncWord>:
{
 80128c4:	b508      	push	{r3, lr}
 80128c6:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80128c8:	2208      	movs	r2, #8
 80128ca:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80128ce:	f7ff ffe9 	bl	80128a4 <SUBGRF_WriteRegisters>
}
 80128d2:	2000      	movs	r0, #0
 80128d4:	bd08      	pop	{r3, pc}

080128d6 <SUBGRF_SetCrcSeed>:
{
 80128d6:	b500      	push	{lr}
 80128d8:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80128da:	0a03      	lsrs	r3, r0, #8
 80128dc:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80128e0:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80128e4:	f7ff fd8a 	bl	80123fc <SUBGRF_GetPacketType>
 80128e8:	b110      	cbz	r0, 80128f0 <SUBGRF_SetCrcSeed+0x1a>
}
 80128ea:	b003      	add	sp, #12
 80128ec:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80128f0:	2202      	movs	r2, #2
 80128f2:	a901      	add	r1, sp, #4
 80128f4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80128f8:	f7ff ffd4 	bl	80128a4 <SUBGRF_WriteRegisters>
}
 80128fc:	e7f5      	b.n	80128ea <SUBGRF_SetCrcSeed+0x14>

080128fe <SUBGRF_SetCrcPolynomial>:
{
 80128fe:	b500      	push	{lr}
 8012900:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8012902:	0a03      	lsrs	r3, r0, #8
 8012904:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8012908:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 801290c:	f7ff fd76 	bl	80123fc <SUBGRF_GetPacketType>
 8012910:	b110      	cbz	r0, 8012918 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8012912:	b003      	add	sp, #12
 8012914:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8012918:	2202      	movs	r2, #2
 801291a:	a901      	add	r1, sp, #4
 801291c:	f240 60be 	movw	r0, #1726	; 0x6be
 8012920:	f7ff ffc0 	bl	80128a4 <SUBGRF_WriteRegisters>
}
 8012924:	e7f5      	b.n	8012912 <SUBGRF_SetCrcPolynomial+0x14>
	...

08012928 <SUBGRF_SetPacketParams>:
{
 8012928:	b510      	push	{r4, lr}
 801292a:	b084      	sub	sp, #16
 801292c:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801292e:	ab01      	add	r3, sp, #4
 8012930:	4a33      	ldr	r2, [pc, #204]	; (8012a00 <SUBGRF_SetPacketParams+0xd8>)
 8012932:	ca07      	ldmia	r2, {r0, r1, r2}
 8012934:	c303      	stmia	r3!, {r0, r1}
 8012936:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8012938:	7820      	ldrb	r0, [r4, #0]
 801293a:	4b32      	ldr	r3, [pc, #200]	; (8012a04 <SUBGRF_SetPacketParams+0xdc>)
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	4298      	cmp	r0, r3
 8012940:	d106      	bne.n	8012950 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8012942:	7823      	ldrb	r3, [r4, #0]
 8012944:	2b03      	cmp	r3, #3
 8012946:	d82a      	bhi.n	801299e <SUBGRF_SetPacketParams+0x76>
 8012948:	e8df f003 	tbb	[pc, r3]
 801294c:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8012950:	f7ff fe02 	bl	8012558 <SUBGRF_SetPacketType>
 8012954:	e7f5      	b.n	8012942 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8012956:	7a63      	ldrb	r3, [r4, #9]
 8012958:	2bf1      	cmp	r3, #241	; 0xf1
 801295a:	d022      	beq.n	80129a2 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801295c:	2bf2      	cmp	r3, #242	; 0xf2
 801295e:	d02a      	beq.n	80129b6 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8012960:	8862      	ldrh	r2, [r4, #2]
 8012962:	0a11      	lsrs	r1, r2, #8
 8012964:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8012968:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801296c:	7922      	ldrb	r2, [r4, #4]
 801296e:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8012972:	7962      	ldrb	r2, [r4, #5]
 8012974:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8012978:	79a2      	ldrb	r2, [r4, #6]
 801297a:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801297e:	79e2      	ldrb	r2, [r4, #7]
 8012980:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8012984:	7a22      	ldrb	r2, [r4, #8]
 8012986:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 801298a:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801298e:	7aa3      	ldrb	r3, [r4, #10]
 8012990:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8012994:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8012996:	a901      	add	r1, sp, #4
 8012998:	208c      	movs	r0, #140	; 0x8c
 801299a:	f7ff fb77 	bl	801208c <SUBGRF_WriteCommand>
}
 801299e:	b004      	add	sp, #16
 80129a0:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80129a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80129a6:	f7ff ff96 	bl	80128d6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80129aa:	f248 0005 	movw	r0, #32773	; 0x8005
 80129ae:	f7ff ffa6 	bl	80128fe <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80129b2:	2302      	movs	r3, #2
 80129b4:	e7d4      	b.n	8012960 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80129b6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80129ba:	f7ff ff8c 	bl	80128d6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80129be:	f241 0021 	movw	r0, #4129	; 0x1021
 80129c2:	f7ff ff9c 	bl	80128fe <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80129c6:	2306      	movs	r3, #6
 80129c8:	e7ca      	b.n	8012960 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80129ca:	7b23      	ldrb	r3, [r4, #12]
 80129cc:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 80129d0:	2201      	movs	r2, #1
        break;
 80129d2:	e7e0      	b.n	8012996 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80129d4:	89e3      	ldrh	r3, [r4, #14]
 80129d6:	0a1a      	lsrs	r2, r3, #8
 80129d8:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80129dc:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80129e0:	7c23      	ldrb	r3, [r4, #16]
 80129e2:	4a09      	ldr	r2, [pc, #36]	; (8012a08 <SUBGRF_SetPacketParams+0xe0>)
 80129e4:	7013      	strb	r3, [r2, #0]
 80129e6:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80129ea:	7c63      	ldrb	r3, [r4, #17]
 80129ec:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80129f0:	7ca3      	ldrb	r3, [r4, #18]
 80129f2:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80129f6:	7ce3      	ldrb	r3, [r4, #19]
 80129f8:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 80129fc:	2206      	movs	r2, #6
        break;
 80129fe:	e7ca      	b.n	8012996 <SUBGRF_SetPacketParams+0x6e>
 8012a00:	08013c0c 	.word	0x08013c0c
 8012a04:	20001157 	.word	0x20001157
 8012a08:	20001155 	.word	0x20001155

08012a0c <SUBGRF_ReadRegisters>:
{
 8012a0c:	b510      	push	{r4, lr}
 8012a0e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a10:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012a14:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8012a16:	460a      	mov	r2, r1
 8012a18:	4601      	mov	r1, r0
 8012a1a:	4803      	ldr	r0, [pc, #12]	; (8012a28 <SUBGRF_ReadRegisters+0x1c>)
 8012a1c:	f7f3 ff9e 	bl	800695c <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a20:	f384 8810 	msr	PRIMASK, r4
}
 8012a24:	bd10      	pop	{r4, pc}
 8012a26:	bf00      	nop
 8012a28:	200018bc 	.word	0x200018bc

08012a2c <SUBGRF_GetRandom>:
{
 8012a2c:	b570      	push	{r4, r5, r6, lr}
 8012a2e:	b082      	sub	sp, #8
    uint32_t number = 0;
 8012a30:	2600      	movs	r6, #0
 8012a32:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8012a34:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8012a38:	f7ff fe2e 	bl	8012698 <SUBGRF_ReadRegister>
 8012a3c:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8012a3e:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8012a42:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8012a46:	f7ff fd37 	bl	80124b8 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8012a4a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012a4e:	f7ff fe23 	bl	8012698 <SUBGRF_ReadRegister>
 8012a52:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8012a54:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8012a58:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012a5c:	f7ff fd2c 	bl	80124b8 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8012a60:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012a64:	f7ff fb6c 	bl	8012140 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8012a68:	2204      	movs	r2, #4
 8012a6a:	eb0d 0102 	add.w	r1, sp, r2
 8012a6e:	f640 0019 	movw	r0, #2073	; 0x819
 8012a72:	f7ff ffcb 	bl	8012a0c <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8012a76:	4630      	mov	r0, r6
 8012a78:	f7ff fb2e 	bl	80120d8 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8012a7c:	4629      	mov	r1, r5
 8012a7e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8012a82:	f7ff fd19 	bl	80124b8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8012a86:	4621      	mov	r1, r4
 8012a88:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012a8c:	f7ff fd14 	bl	80124b8 <SUBGRF_WriteRegister>
}
 8012a90:	9801      	ldr	r0, [sp, #4]
 8012a92:	b002      	add	sp, #8
 8012a94:	bd70      	pop	{r4, r5, r6, pc}
	...

08012a98 <SUBGRF_WriteBuffer>:
{
 8012a98:	b510      	push	{r4, lr}
 8012a9a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a9c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012aa0:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8012aa2:	460a      	mov	r2, r1
 8012aa4:	4601      	mov	r1, r0
 8012aa6:	4803      	ldr	r0, [pc, #12]	; (8012ab4 <SUBGRF_WriteBuffer+0x1c>)
 8012aa8:	f7f4 f8ae 	bl	8006c08 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012aac:	f384 8810 	msr	PRIMASK, r4
}
 8012ab0:	bd10      	pop	{r4, pc}
 8012ab2:	bf00      	nop
 8012ab4:	200018bc 	.word	0x200018bc

08012ab8 <SUBGRF_SetPayload>:
{
 8012ab8:	b508      	push	{r3, lr}
 8012aba:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8012abc:	4601      	mov	r1, r0
 8012abe:	2000      	movs	r0, #0
 8012ac0:	f7ff ffea 	bl	8012a98 <SUBGRF_WriteBuffer>
}
 8012ac4:	bd08      	pop	{r3, pc}

08012ac6 <SUBGRF_SendPayload>:
{
 8012ac6:	b510      	push	{r4, lr}
 8012ac8:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8012aca:	f7ff fff5 	bl	8012ab8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8012ace:	4620      	mov	r0, r4
 8012ad0:	f7ff fb1c 	bl	801210c <SUBGRF_SetTx>
}
 8012ad4:	bd10      	pop	{r4, pc}
	...

08012ad8 <SUBGRF_ReadBuffer>:
{
 8012ad8:	b510      	push	{r4, lr}
 8012ada:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012adc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012ae0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8012ae2:	460a      	mov	r2, r1
 8012ae4:	4601      	mov	r1, r0
 8012ae6:	4803      	ldr	r0, [pc, #12]	; (8012af4 <SUBGRF_ReadBuffer+0x1c>)
 8012ae8:	f7f4 f8d8 	bl	8006c9c <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012aec:	f384 8810 	msr	PRIMASK, r4
}
 8012af0:	bd10      	pop	{r4, pc}
 8012af2:	bf00      	nop
 8012af4:	200018bc 	.word	0x200018bc

08012af8 <SUBGRF_GetPayload>:
{
 8012af8:	b570      	push	{r4, r5, r6, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	4606      	mov	r6, r0
 8012afe:	460c      	mov	r4, r1
 8012b00:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8012b02:	2300      	movs	r3, #0
 8012b04:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8012b08:	f10d 0107 	add.w	r1, sp, #7
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	f7ff fea7 	bl	8012860 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8012b12:	7822      	ldrb	r2, [r4, #0]
 8012b14:	42aa      	cmp	r2, r5
 8012b16:	d902      	bls.n	8012b1e <SUBGRF_GetPayload+0x26>
        return 1;
 8012b18:	2001      	movs	r0, #1
}
 8012b1a:	b002      	add	sp, #8
 8012b1c:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8012b1e:	4631      	mov	r1, r6
 8012b20:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012b24:	f7ff ffd8 	bl	8012ad8 <SUBGRF_ReadBuffer>
    return 0;
 8012b28:	2000      	movs	r0, #0
 8012b2a:	e7f6      	b.n	8012b1a <SUBGRF_GetPayload+0x22>

08012b2c <SUBGRF_SetSwitch>:
{
 8012b2c:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8012b2e:	2901      	cmp	r1, #1
 8012b30:	d003      	beq.n	8012b3a <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8012b32:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8012b34:	f7f1 fa58 	bl	8003fe8 <RBI_ConfigRFSwitch>
}
 8012b38:	bd10      	pop	{r4, pc}
 8012b3a:	4604      	mov	r4, r0
 8012b3c:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8012b3e:	2c01      	cmp	r4, #1
 8012b40:	d003      	beq.n	8012b4a <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8012b42:	2c02      	cmp	r4, #2
 8012b44:	d1f6      	bne.n	8012b34 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8012b46:	2003      	movs	r0, #3
 8012b48:	e7f4      	b.n	8012b34 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8012b4a:	2004      	movs	r0, #4
 8012b4c:	f7ff fdb4 	bl	80126b8 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8012b50:	2002      	movs	r0, #2
 8012b52:	e7f6      	b.n	8012b42 <SUBGRF_SetSwitch+0x16>

08012b54 <SUBGRF_SetRfTxPower>:
{
 8012b54:	b538      	push	{r3, r4, r5, lr}
 8012b56:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8012b58:	f7f1 fa80 	bl	800405c <RBI_GetTxConfig>
    switch (TxConfig)
 8012b5c:	b148      	cbz	r0, 8012b72 <SUBGRF_SetRfTxPower+0x1e>
 8012b5e:	2802      	cmp	r0, #2
 8012b60:	d10d      	bne.n	8012b7e <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8012b62:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8012b64:	2202      	movs	r2, #2
 8012b66:	4621      	mov	r1, r4
 8012b68:	4628      	mov	r0, r5
 8012b6a:	f7ff fe2a 	bl	80127c2 <SUBGRF_SetTxParams>
}
 8012b6e:	4628      	mov	r0, r5
 8012b70:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8012b72:	2c0f      	cmp	r4, #15
 8012b74:	dc01      	bgt.n	8012b7a <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8012b76:	2501      	movs	r5, #1
 8012b78:	e7f4      	b.n	8012b64 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8012b7a:	2502      	movs	r5, #2
 8012b7c:	e7f2      	b.n	8012b64 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8012b7e:	2501      	movs	r5, #1
 8012b80:	e7f0      	b.n	8012b64 <SUBGRF_SetRfTxPower+0x10>

08012b82 <SUBGRF_GetRadioWakeUpTime>:
}
 8012b82:	2001      	movs	r0, #1
 8012b84:	4770      	bx	lr
	...

08012b88 <HAL_SUBGHZ_TxCpltCallback>:
{
 8012b88:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8012b8a:	4b02      	ldr	r3, [pc, #8]	; (8012b94 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2001      	movs	r0, #1
 8012b90:	4798      	blx	r3
}
 8012b92:	bd08      	pop	{r3, pc}
 8012b94:	20001158 	.word	0x20001158

08012b98 <HAL_SUBGHZ_RxCpltCallback>:
{
 8012b98:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8012b9a:	4b02      	ldr	r3, [pc, #8]	; (8012ba4 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	2002      	movs	r0, #2
 8012ba0:	4798      	blx	r3
}
 8012ba2:	bd08      	pop	{r3, pc}
 8012ba4:	20001158 	.word	0x20001158

08012ba8 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8012ba8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8012baa:	4b02      	ldr	r3, [pc, #8]	; (8012bb4 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	2040      	movs	r0, #64	; 0x40
 8012bb0:	4798      	blx	r3
}
 8012bb2:	bd08      	pop	{r3, pc}
 8012bb4:	20001158 	.word	0x20001158

08012bb8 <HAL_SUBGHZ_CADStatusCallback>:
{
 8012bb8:	b508      	push	{r3, lr}
    switch (cadstatus)
 8012bba:	b111      	cbz	r1, 8012bc2 <HAL_SUBGHZ_CADStatusCallback+0xa>
 8012bbc:	2901      	cmp	r1, #1
 8012bbe:	d005      	beq.n	8012bcc <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8012bc0:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8012bc2:	4b05      	ldr	r3, [pc, #20]	; (8012bd8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	2080      	movs	r0, #128	; 0x80
 8012bc8:	4798      	blx	r3
            break;
 8012bca:	e7f9      	b.n	8012bc0 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8012bcc:	4b02      	ldr	r3, [pc, #8]	; (8012bd8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012bd4:	4798      	blx	r3
}
 8012bd6:	e7f3      	b.n	8012bc0 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8012bd8:	20001158 	.word	0x20001158

08012bdc <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8012bdc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8012bde:	4b03      	ldr	r3, [pc, #12]	; (8012bec <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012be6:	4798      	blx	r3
}
 8012be8:	bd08      	pop	{r3, pc}
 8012bea:	bf00      	nop
 8012bec:	20001158 	.word	0x20001158

08012bf0 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8012bf0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8012bf2:	4b02      	ldr	r3, [pc, #8]	; (8012bfc <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	2020      	movs	r0, #32
 8012bf8:	4798      	blx	r3
}
 8012bfa:	bd08      	pop	{r3, pc}
 8012bfc:	20001158 	.word	0x20001158

08012c00 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8012c00:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8012c02:	4b02      	ldr	r3, [pc, #8]	; (8012c0c <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	2004      	movs	r0, #4
 8012c08:	4798      	blx	r3
}
 8012c0a:	bd08      	pop	{r3, pc}
 8012c0c:	20001158 	.word	0x20001158

08012c10 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8012c10:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8012c12:	4b02      	ldr	r3, [pc, #8]	; (8012c1c <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	2008      	movs	r0, #8
 8012c18:	4798      	blx	r3
}
 8012c1a:	bd08      	pop	{r3, pc}
 8012c1c:	20001158 	.word	0x20001158

08012c20 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8012c20:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8012c22:	4b02      	ldr	r3, [pc, #8]	; (8012c2c <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	2010      	movs	r0, #16
 8012c28:	4798      	blx	r3
}
 8012c2a:	bd08      	pop	{r3, pc}
 8012c2c:	20001158 	.word	0x20001158

08012c30 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8012c30:	b1a0      	cbz	r0, 8012c5c <SUBGRF_GetFskBandwidthRegValue+0x2c>
{
 8012c32:	b410      	push	{r4}
 8012c34:	4604      	mov	r4, r0
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8012c36:	2300      	movs	r3, #0
 8012c38:	2b15      	cmp	r3, #21
 8012c3a:	d80e      	bhi.n	8012c5a <SUBGRF_GetFskBandwidthRegValue+0x2a>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8012c3c:	4619      	mov	r1, r3
 8012c3e:	4a08      	ldr	r2, [pc, #32]	; (8012c60 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 8012c40:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012c44:	42a2      	cmp	r2, r4
 8012c46:	d802      	bhi.n	8012c4e <SUBGRF_GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8012c48:	3301      	adds	r3, #1
 8012c4a:	b2db      	uxtb	r3, r3
 8012c4c:	e7f4      	b.n	8012c38 <SUBGRF_GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
 8012c4e:	4b04      	ldr	r3, [pc, #16]	; (8012c60 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 8012c50:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8012c54:	7918      	ldrb	r0, [r3, #4]
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
}
 8012c56:	bc10      	pop	{r4}
 8012c58:	4770      	bx	lr
    while( 1 );
 8012c5a:	e7fe      	b.n	8012c5a <SUBGRF_GetFskBandwidthRegValue+0x2a>
        return( 0x1F );
 8012c5c:	201f      	movs	r0, #31
}
 8012c5e:	4770      	bx	lr
 8012c60:	080146f8 	.word	0x080146f8

08012c64 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8012c64:	b570      	push	{r4, r5, r6, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	4604      	mov	r4, r0
 8012c6a:	460d      	mov	r5, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8012c6c:	4b1d      	ldr	r3, [pc, #116]	; (8012ce4 <SUBGRF_GetCFO+0x80>)
 8012c6e:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8012c70:	f640 0007 	movw	r0, #2055	; 0x807
 8012c74:	f7ff fd10 	bl	8012698 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8012c78:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8012c7c:	aa02      	add	r2, sp, #8
 8012c7e:	4413      	add	r3, r2
 8012c80:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8012c84:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8012c88:	3b01      	subs	r3, #1
 8012c8a:	fa02 f003 	lsl.w	r0, r2, r3
 8012c8e:	4b16      	ldr	r3, [pc, #88]	; (8012ce8 <SUBGRF_GetCFO+0x84>)
 8012c90:	fbb3 f3f0 	udiv	r3, r3, r0
  uint32_t cf_osr = cf_fs / bitRate;
 8012c94:	fbb3 f0f4 	udiv	r0, r3, r4
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8012c98:	2807      	cmp	r0, #7
 8012c9a:	d921      	bls.n	8012ce0 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8012c9c:	2401      	movs	r4, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8012c9e:	fb00 f004 	mul.w	r0, r0, r4
 8012ca2:	2803      	cmp	r0, #3
 8012ca4:	d800      	bhi.n	8012ca8 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8012ca6:	2404      	movs	r4, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8012ca8:	fb03 f404 	mul.w	r4, r3, r4
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8012cac:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8012cb0:	f7ff fcf2 	bl	8012698 <SUBGRF_ReadRegister>
 8012cb4:	0200      	lsls	r0, r0, #8
 8012cb6:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8012cba:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8012cbe:	f7ff fceb 	bl	8012698 <SUBGRF_ReadRegister>
 8012cc2:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8012cc4:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8012cc8:	d003      	beq.n	8012cd2 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8012cca:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8012cce:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8012cd2:	0963      	lsrs	r3, r4, #5
 8012cd4:	fb03 f300 	mul.w	r3, r3, r0
 8012cd8:	11db      	asrs	r3, r3, #7
 8012cda:	602b      	str	r3, [r5, #0]
}
 8012cdc:	b002      	add	sp, #8
 8012cde:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8012ce0:	2402      	movs	r4, #2
 8012ce2:	e7dc      	b.n	8012c9e <SUBGRF_GetCFO+0x3a>
 8012ce4:	0c0a0804 	.word	0x0c0a0804
 8012ce8:	01e84800 	.word	0x01e84800

08012cec <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8012cec:	f04f 30ff 	mov.w	r0, #4294967295
 8012cf0:	4770      	bx	lr

08012cf2 <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8012cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8012cf6:	4770      	bx	lr

08012cf8 <RFW_Init>:
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
#endif
}
 8012cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8012cfc:	4770      	bx	lr

08012cfe <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8012cfe:	4770      	bx	lr

08012d00 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 8012d00:	2000      	movs	r0, #0
 8012d02:	4770      	bx	lr

08012d04 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 8012d04:	2000      	movs	r0, #0
 8012d06:	4770      	bx	lr

08012d08 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8012d08:	4770      	bx	lr

08012d0a <RFW_TransmitInit>:
    
    status= 0;
  }
#endif
  return status;
}
 8012d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d0e:	4770      	bx	lr

08012d10 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8012d10:	f04f 30ff 	mov.w	r0, #4294967295
 8012d14:	4770      	bx	lr

08012d16 <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8012d16:	4770      	bx	lr

08012d18 <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8012d18:	4770      	bx	lr

08012d1a <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8012d1a:	4770      	bx	lr

08012d1c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8012d1c:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d1e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012d22:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8012d24:	4b1b      	ldr	r3, [pc, #108]	; (8012d94 <TRACE_AllocateBufer+0x78>)
 8012d26:	8a5c      	ldrh	r4, [r3, #18]
 8012d28:	8a1a      	ldrh	r2, [r3, #16]
 8012d2a:	4294      	cmp	r4, r2
 8012d2c:	d010      	beq.n	8012d50 <TRACE_AllocateBufer+0x34>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012d2e:	4294      	cmp	r4, r2
 8012d30:	d91d      	bls.n	8012d6e <TRACE_AllocateBufer+0x52>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8012d32:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 8012d36:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8012d38:	4283      	cmp	r3, r0
 8012d3a:	d81a      	bhi.n	8012d72 <TRACE_AllocateBufer+0x56>
 8012d3c:	4282      	cmp	r2, r0
 8012d3e:	d918      	bls.n	8012d72 <TRACE_AllocateBufer+0x56>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8012d40:	4b14      	ldr	r3, [pc, #80]	; (8012d94 <TRACE_AllocateBufer+0x78>)
 8012d42:	2601      	movs	r6, #1
 8012d44:	709e      	strb	r6, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8012d46:	801c      	strh	r4, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8012d48:	2400      	movs	r4, #0
 8012d4a:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8012d4c:	4613      	mov	r3, r2
 8012d4e:	e010      	b.n	8012d72 <TRACE_AllocateBufer+0x56>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8012d50:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 8012d54:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8012d56:	4298      	cmp	r0, r3
 8012d58:	d30b      	bcc.n	8012d72 <TRACE_AllocateBufer+0x56>
 8012d5a:	4282      	cmp	r2, r0
 8012d5c:	d909      	bls.n	8012d72 <TRACE_AllocateBufer+0x56>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8012d5e:	4b0d      	ldr	r3, [pc, #52]	; (8012d94 <TRACE_AllocateBufer+0x78>)
 8012d60:	2601      	movs	r6, #1
 8012d62:	709e      	strb	r6, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8012d64:	801c      	strh	r4, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8012d66:	2400      	movs	r4, #0
 8012d68:	825c      	strh	r4, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8012d6a:	4613      	mov	r3, r2
 8012d6c:	e001      	b.n	8012d72 <TRACE_AllocateBufer+0x56>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8012d6e:	1b13      	subs	r3, r2, r4
 8012d70:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8012d72:	4283      	cmp	r3, r0
 8012d74:	d90b      	bls.n	8012d8e <TRACE_AllocateBufer+0x72>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8012d76:	4a07      	ldr	r2, [pc, #28]	; (8012d94 <TRACE_AllocateBufer+0x78>)
 8012d78:	8a53      	ldrh	r3, [r2, #18]
 8012d7a:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8012d7c:	4403      	add	r3, r0
 8012d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012d82:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8012d84:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d86:	f385 8810 	msr	PRIMASK, r5
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8012d8a:	bc70      	pop	{r4, r5, r6}
 8012d8c:	4770      	bx	lr
  int16_t ret = -1;
 8012d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d92:	e7f8      	b.n	8012d86 <TRACE_AllocateBufer+0x6a>
 8012d94:	2000155c 	.word	0x2000155c

08012d98 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d98:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012d9c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8012d9e:	4a03      	ldr	r2, [pc, #12]	; (8012dac <TRACE_Lock+0x14>)
 8012da0:	8ad3      	ldrh	r3, [r2, #22]
 8012da2:	3301      	adds	r3, #1
 8012da4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012da6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8012daa:	4770      	bx	lr
 8012dac:	2000155c 	.word	0x2000155c

08012db0 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012db0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012db4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8012db6:	4a03      	ldr	r2, [pc, #12]	; (8012dc4 <TRACE_UnLock+0x14>)
 8012db8:	8ad3      	ldrh	r3, [r2, #22]
 8012dba:	3b01      	subs	r3, #1
 8012dbc:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012dbe:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8012dc2:	4770      	bx	lr
 8012dc4:	2000155c 	.word	0x2000155c

08012dc8 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8012dc8:	4b02      	ldr	r3, [pc, #8]	; (8012dd4 <TRACE_IsLocked+0xc>)
 8012dca:	8ad8      	ldrh	r0, [r3, #22]
}
 8012dcc:	3800      	subs	r0, #0
 8012dce:	bf18      	it	ne
 8012dd0:	2001      	movne	r0, #1
 8012dd2:	4770      	bx	lr
 8012dd4:	2000155c 	.word	0x2000155c

08012dd8 <UTIL_ADV_TRACE_Init>:
{
 8012dd8:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8012dda:	2218      	movs	r2, #24
 8012ddc:	2100      	movs	r1, #0
 8012dde:	4807      	ldr	r0, [pc, #28]	; (8012dfc <UTIL_ADV_TRACE_Init+0x24>)
 8012de0:	f000 f98c 	bl	80130fc <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8012de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012de8:	2100      	movs	r1, #0
 8012dea:	4805      	ldr	r0, [pc, #20]	; (8012e00 <UTIL_ADV_TRACE_Init+0x28>)
 8012dec:	f000 f986 	bl	80130fc <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8012df0:	4b04      	ldr	r3, [pc, #16]	; (8012e04 <UTIL_ADV_TRACE_Init+0x2c>)
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	4804      	ldr	r0, [pc, #16]	; (8012e08 <UTIL_ADV_TRACE_Init+0x30>)
 8012df6:	4798      	blx	r3
}
 8012df8:	bd08      	pop	{r3, pc}
 8012dfa:	bf00      	nop
 8012dfc:	2000155c 	.word	0x2000155c
 8012e00:	2000115c 	.word	0x2000115c
 8012e04:	08013c94 	.word	0x08013c94
 8012e08:	08012f89 	.word	0x08012f89

08012e0c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8012e0c:	4b01      	ldr	r3, [pc, #4]	; (8012e14 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8012e0e:	6058      	str	r0, [r3, #4]
}
 8012e10:	4770      	bx	lr
 8012e12:	bf00      	nop
 8012e14:	2000155c 	.word	0x2000155c

08012e18 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8012e18:	4b01      	ldr	r3, [pc, #4]	; (8012e20 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8012e1a:	7218      	strb	r0, [r3, #8]
}
 8012e1c:	4770      	bx	lr
 8012e1e:	bf00      	nop
 8012e20:	2000155c 	.word	0x2000155c

08012e24 <TRACE_Send>:
{
 8012e24:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e26:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012e2a:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8012e2c:	f7ff ffcc 	bl	8012dc8 <TRACE_IsLocked>
 8012e30:	b118      	cbz	r0, 8012e3a <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e32:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8012e36:	2000      	movs	r0, #0
}
 8012e38:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8012e3a:	f7ff ffad 	bl	8012d98 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8012e3e:	4b1d      	ldr	r3, [pc, #116]	; (8012eb4 <TRACE_Send+0x90>)
 8012e40:	8a1a      	ldrh	r2, [r3, #16]
 8012e42:	8a5b      	ldrh	r3, [r3, #18]
 8012e44:	429a      	cmp	r2, r3
 8012e46:	d02e      	beq.n	8012ea6 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012e48:	491a      	ldr	r1, [pc, #104]	; (8012eb4 <TRACE_Send+0x90>)
 8012e4a:	7889      	ldrb	r1, [r1, #2]
 8012e4c:	2901      	cmp	r1, #1
 8012e4e:	d017      	beq.n	8012e80 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012e50:	4a18      	ldr	r2, [pc, #96]	; (8012eb4 <TRACE_Send+0x90>)
 8012e52:	7892      	ldrb	r2, [r2, #2]
 8012e54:	b932      	cbnz	r2, 8012e64 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012e56:	4a17      	ldr	r2, [pc, #92]	; (8012eb4 <TRACE_Send+0x90>)
 8012e58:	8a12      	ldrh	r2, [r2, #16]
 8012e5a:	4293      	cmp	r3, r2
 8012e5c:	d91e      	bls.n	8012e9c <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8012e5e:	1a9b      	subs	r3, r3, r2
 8012e60:	4a14      	ldr	r2, [pc, #80]	; (8012eb4 <TRACE_Send+0x90>)
 8012e62:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012e64:	4e13      	ldr	r6, [pc, #76]	; (8012eb4 <TRACE_Send+0x90>)
 8012e66:	8a33      	ldrh	r3, [r6, #16]
 8012e68:	4d13      	ldr	r5, [pc, #76]	; (8012eb8 <TRACE_Send+0x94>)
 8012e6a:	441d      	add	r5, r3
 8012e6c:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8012e70:	f7f0 fba8 	bl	80035c4 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8012e74:	4b11      	ldr	r3, [pc, #68]	; (8012ebc <TRACE_Send+0x98>)
 8012e76:	68db      	ldr	r3, [r3, #12]
 8012e78:	8ab1      	ldrh	r1, [r6, #20]
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	4798      	blx	r3
 8012e7e:	e7db      	b.n	8012e38 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8012e80:	480c      	ldr	r0, [pc, #48]	; (8012eb4 <TRACE_Send+0x90>)
 8012e82:	8801      	ldrh	r1, [r0, #0]
 8012e84:	1a8a      	subs	r2, r1, r2
 8012e86:	b292      	uxth	r2, r2
 8012e88:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8012e8a:	2102      	movs	r1, #2
 8012e8c:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012e8e:	2100      	movs	r1, #0
 8012e90:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8012e92:	2a00      	cmp	r2, #0
 8012e94:	d1dc      	bne.n	8012e50 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012e96:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012e98:	8201      	strh	r1, [r0, #16]
 8012e9a:	e7d9      	b.n	8012e50 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8012e9c:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8012ea0:	4a04      	ldr	r2, [pc, #16]	; (8012eb4 <TRACE_Send+0x90>)
 8012ea2:	8293      	strh	r3, [r2, #20]
 8012ea4:	e7de      	b.n	8012e64 <TRACE_Send+0x40>
      TRACE_UnLock();
 8012ea6:	f7ff ff83 	bl	8012db0 <TRACE_UnLock>
 8012eaa:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8012eae:	2000      	movs	r0, #0
}
 8012eb0:	e7c2      	b.n	8012e38 <TRACE_Send+0x14>
 8012eb2:	bf00      	nop
 8012eb4:	2000155c 	.word	0x2000155c
 8012eb8:	2000115c 	.word	0x2000115c
 8012ebc:	08013c94 	.word	0x08013c94

08012ec0 <UTIL_ADV_TRACE_COND_FSend>:
{
 8012ec0:	b408      	push	{r3}
 8012ec2:	b530      	push	{r4, r5, lr}
 8012ec4:	b086      	sub	sp, #24
 8012ec6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8012ece:	4b2b      	ldr	r3, [pc, #172]	; (8012f7c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8012ed0:	7a1b      	ldrb	r3, [r3, #8]
 8012ed2:	4283      	cmp	r3, r0
 8012ed4:	d34c      	bcc.n	8012f70 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8012ed6:	4b29      	ldr	r3, [pc, #164]	; (8012f7c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8012ed8:	68db      	ldr	r3, [r3, #12]
 8012eda:	ea31 0303 	bics.w	r3, r1, r3
 8012ede:	d14a      	bne.n	8012f76 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8012ee0:	4b26      	ldr	r3, [pc, #152]	; (8012f7c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8012ee2:	685b      	ldr	r3, [r3, #4]
 8012ee4:	b123      	cbz	r3, 8012ef0 <UTIL_ADV_TRACE_COND_FSend+0x30>
 8012ee6:	b11a      	cbz	r2, 8012ef0 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8012ee8:	f10d 0102 	add.w	r1, sp, #2
 8012eec:	a801      	add	r0, sp, #4
 8012eee:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8012ef0:	ab0a      	add	r3, sp, #40	; 0x28
 8012ef2:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012ef4:	4622      	mov	r2, r4
 8012ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012efa:	4821      	ldr	r0, [pc, #132]	; (8012f80 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012efc:	f000 fcba 	bl	8013874 <tiny_vsnprintf_like>
 8012f00:	b285      	uxth	r5, r0
  TRACE_Lock();
 8012f02:	f7ff ff49 	bl	8012d98 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8012f06:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8012f0a:	4428      	add	r0, r5
 8012f0c:	4669      	mov	r1, sp
 8012f0e:	b280      	uxth	r0, r0
 8012f10:	f7ff ff04 	bl	8012d1c <TRACE_AllocateBufer>
 8012f14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012f18:	d025      	beq.n	8012f66 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	e00c      	b.n	8012f38 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8012f1e:	f8bd 2000 	ldrh.w	r2, [sp]
 8012f22:	a906      	add	r1, sp, #24
 8012f24:	4419      	add	r1, r3
 8012f26:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8012f2a:	4916      	ldr	r1, [pc, #88]	; (8012f84 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8012f2c:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8012f2e:	3201      	adds	r2, #1
 8012f30:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8012f34:	3301      	adds	r3, #1
 8012f36:	b29b      	uxth	r3, r3
 8012f38:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d8ee      	bhi.n	8012f1e <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012f40:	f8bd 0000 	ldrh.w	r0, [sp]
 8012f44:	9b05      	ldr	r3, [sp, #20]
 8012f46:	4622      	mov	r2, r4
 8012f48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012f4c:	4c0d      	ldr	r4, [pc, #52]	; (8012f84 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8012f4e:	4420      	add	r0, r4
 8012f50:	f000 fc90 	bl	8013874 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8012f54:	f7ff ff2c 	bl	8012db0 <TRACE_UnLock>
    return TRACE_Send();
 8012f58:	f7ff ff64 	bl	8012e24 <TRACE_Send>
}
 8012f5c:	b006      	add	sp, #24
 8012f5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012f62:	b001      	add	sp, #4
 8012f64:	4770      	bx	lr
  TRACE_UnLock();
 8012f66:	f7ff ff23 	bl	8012db0 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8012f6a:	f06f 0002 	mvn.w	r0, #2
 8012f6e:	e7f5      	b.n	8012f5c <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8012f70:	f06f 0004 	mvn.w	r0, #4
 8012f74:	e7f2      	b.n	8012f5c <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8012f76:	f06f 0005 	mvn.w	r0, #5
 8012f7a:	e7ef      	b.n	8012f5c <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8012f7c:	2000155c 	.word	0x2000155c
 8012f80:	20001574 	.word	0x20001574
 8012f84:	2000115c 	.word	0x2000115c

08012f88 <TRACE_TxCpltCallback>:
{
 8012f88:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f8a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012f8e:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8012f90:	4b25      	ldr	r3, [pc, #148]	; (8013028 <TRACE_TxCpltCallback+0xa0>)
 8012f92:	789b      	ldrb	r3, [r3, #2]
 8012f94:	2b02      	cmp	r3, #2
 8012f96:	d016      	beq.n	8012fc6 <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8012f98:	4a23      	ldr	r2, [pc, #140]	; (8013028 <TRACE_TxCpltCallback+0xa0>)
 8012f9a:	8a13      	ldrh	r3, [r2, #16]
 8012f9c:	8a90      	ldrh	r0, [r2, #20]
 8012f9e:	4403      	add	r3, r0
 8012fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012fa4:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8012fa6:	4b20      	ldr	r3, [pc, #128]	; (8013028 <TRACE_TxCpltCallback+0xa0>)
 8012fa8:	8a1a      	ldrh	r2, [r3, #16]
 8012faa:	8a5b      	ldrh	r3, [r3, #18]
 8012fac:	429a      	cmp	r2, r3
 8012fae:	d003      	beq.n	8012fb8 <TRACE_TxCpltCallback+0x30>
 8012fb0:	481d      	ldr	r0, [pc, #116]	; (8013028 <TRACE_TxCpltCallback+0xa0>)
 8012fb2:	8ac0      	ldrh	r0, [r0, #22]
 8012fb4:	2801      	cmp	r0, #1
 8012fb6:	d00b      	beq.n	8012fd0 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012fb8:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8012fbc:	f7f0 fb08 	bl	80035d0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8012fc0:	f7ff fef6 	bl	8012db0 <TRACE_UnLock>
}
 8012fc4:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012fc6:	4b18      	ldr	r3, [pc, #96]	; (8013028 <TRACE_TxCpltCallback+0xa0>)
 8012fc8:	2200      	movs	r2, #0
 8012fca:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012fcc:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8012fce:	e7ea      	b.n	8012fa6 <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012fd0:	4815      	ldr	r0, [pc, #84]	; (8013028 <TRACE_TxCpltCallback+0xa0>)
 8012fd2:	7880      	ldrb	r0, [r0, #2]
 8012fd4:	2801      	cmp	r0, #1
 8012fd6:	d014      	beq.n	8013002 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012fd8:	4a13      	ldr	r2, [pc, #76]	; (8013028 <TRACE_TxCpltCallback+0xa0>)
 8012fda:	7892      	ldrb	r2, [r2, #2]
 8012fdc:	b932      	cbnz	r2, 8012fec <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012fde:	4a12      	ldr	r2, [pc, #72]	; (8013028 <TRACE_TxCpltCallback+0xa0>)
 8012fe0:	8a12      	ldrh	r2, [r2, #16]
 8012fe2:	4293      	cmp	r3, r2
 8012fe4:	d91b      	bls.n	801301e <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8012fe6:	1a9b      	subs	r3, r3, r2
 8012fe8:	4a0f      	ldr	r2, [pc, #60]	; (8013028 <TRACE_TxCpltCallback+0xa0>)
 8012fea:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012fec:	4b0e      	ldr	r3, [pc, #56]	; (8013028 <TRACE_TxCpltCallback+0xa0>)
 8012fee:	8a1a      	ldrh	r2, [r3, #16]
 8012ff0:	480e      	ldr	r0, [pc, #56]	; (801302c <TRACE_TxCpltCallback+0xa4>)
 8012ff2:	4410      	add	r0, r2
 8012ff4:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8012ff8:	4a0d      	ldr	r2, [pc, #52]	; (8013030 <TRACE_TxCpltCallback+0xa8>)
 8012ffa:	68d2      	ldr	r2, [r2, #12]
 8012ffc:	8a99      	ldrh	r1, [r3, #20]
 8012ffe:	4790      	blx	r2
 8013000:	e7e0      	b.n	8012fc4 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8013002:	4c09      	ldr	r4, [pc, #36]	; (8013028 <TRACE_TxCpltCallback+0xa0>)
 8013004:	8820      	ldrh	r0, [r4, #0]
 8013006:	1a82      	subs	r2, r0, r2
 8013008:	b292      	uxth	r2, r2
 801300a:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801300c:	2002      	movs	r0, #2
 801300e:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8013010:	2000      	movs	r0, #0
 8013012:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8013014:	2a00      	cmp	r2, #0
 8013016:	d1df      	bne.n	8012fd8 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8013018:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801301a:	8220      	strh	r0, [r4, #16]
 801301c:	e7dc      	b.n	8012fd8 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801301e:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8013022:	4a01      	ldr	r2, [pc, #4]	; (8013028 <TRACE_TxCpltCallback+0xa0>)
 8013024:	8293      	strh	r3, [r2, #20]
 8013026:	e7e1      	b.n	8012fec <TRACE_TxCpltCallback+0x64>
 8013028:	2000155c 	.word	0x2000155c
 801302c:	2000115c 	.word	0x2000115c
 8013030:	08013c94 	.word	0x08013c94

08013034 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8013034:	2300      	movs	r3, #0
 8013036:	4a02      	ldr	r2, [pc, #8]	; (8013040 <UTIL_LPM_Init+0xc>)
 8013038:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801303a:	4a02      	ldr	r2, [pc, #8]	; (8013044 <UTIL_LPM_Init+0x10>)
 801303c:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801303e:	4770      	bx	lr
 8013040:	20001778 	.word	0x20001778
 8013044:	20001774 	.word	0x20001774

08013048 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013048:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801304c:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 801304e:	b141      	cbz	r1, 8013062 <UTIL_LPM_SetStopMode+0x1a>
 8013050:	2901      	cmp	r1, #1
 8013052:	d103      	bne.n	801305c <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8013054:	4906      	ldr	r1, [pc, #24]	; (8013070 <UTIL_LPM_SetStopMode+0x28>)
 8013056:	680a      	ldr	r2, [r1, #0]
 8013058:	4310      	orrs	r0, r2
 801305a:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801305c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013060:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8013062:	4903      	ldr	r1, [pc, #12]	; (8013070 <UTIL_LPM_SetStopMode+0x28>)
 8013064:	680a      	ldr	r2, [r1, #0]
 8013066:	ea22 0000 	bic.w	r0, r2, r0
 801306a:	6008      	str	r0, [r1, #0]
      break;
 801306c:	e7f6      	b.n	801305c <UTIL_LPM_SetStopMode+0x14>
 801306e:	bf00      	nop
 8013070:	20001778 	.word	0x20001778

08013074 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013074:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013078:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 801307a:	b141      	cbz	r1, 801308e <UTIL_LPM_SetOffMode+0x1a>
 801307c:	2901      	cmp	r1, #1
 801307e:	d103      	bne.n	8013088 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8013080:	4906      	ldr	r1, [pc, #24]	; (801309c <UTIL_LPM_SetOffMode+0x28>)
 8013082:	680a      	ldr	r2, [r1, #0]
 8013084:	4310      	orrs	r0, r2
 8013086:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013088:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801308c:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 801308e:	4903      	ldr	r1, [pc, #12]	; (801309c <UTIL_LPM_SetOffMode+0x28>)
 8013090:	680a      	ldr	r2, [r1, #0]
 8013092:	ea22 0000 	bic.w	r0, r2, r0
 8013096:	6008      	str	r0, [r1, #0]
      break;
 8013098:	e7f6      	b.n	8013088 <UTIL_LPM_SetOffMode+0x14>
 801309a:	bf00      	nop
 801309c:	20001774 	.word	0x20001774

080130a0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80130a0:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80130a2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80130a6:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80130a8:	4b0c      	ldr	r3, [pc, #48]	; (80130dc <UTIL_LPM_EnterLowPower+0x3c>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	b13b      	cbz	r3, 80130be <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80130ae:	4d0c      	ldr	r5, [pc, #48]	; (80130e0 <UTIL_LPM_EnterLowPower+0x40>)
 80130b0:	682b      	ldr	r3, [r5, #0]
 80130b2:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80130b4:	686b      	ldr	r3, [r5, #4]
 80130b6:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80130b8:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80130bc:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80130be:	4b09      	ldr	r3, [pc, #36]	; (80130e4 <UTIL_LPM_EnterLowPower+0x44>)
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	b12b      	cbz	r3, 80130d0 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 80130c4:	4d06      	ldr	r5, [pc, #24]	; (80130e0 <UTIL_LPM_EnterLowPower+0x40>)
 80130c6:	68ab      	ldr	r3, [r5, #8]
 80130c8:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80130ca:	68eb      	ldr	r3, [r5, #12]
 80130cc:	4798      	blx	r3
 80130ce:	e7f3      	b.n	80130b8 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 80130d0:	4d03      	ldr	r5, [pc, #12]	; (80130e0 <UTIL_LPM_EnterLowPower+0x40>)
 80130d2:	692b      	ldr	r3, [r5, #16]
 80130d4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80130d6:	696b      	ldr	r3, [r5, #20]
 80130d8:	4798      	blx	r3
 80130da:	e7ed      	b.n	80130b8 <UTIL_LPM_EnterLowPower+0x18>
 80130dc:	20001778 	.word	0x20001778
 80130e0:	08013c24 	.word	0x08013c24
 80130e4:	20001774 	.word	0x20001774

080130e8 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80130e8:	1e53      	subs	r3, r2, #1
 80130ea:	b29b      	uxth	r3, r3
 80130ec:	b12a      	cbz	r2, 80130fa <UTIL_MEM_cpy_8+0x12>
    {
        *dst8++ = *src8++;
 80130ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80130f2:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 80130f6:	461a      	mov	r2, r3
 80130f8:	e7f6      	b.n	80130e8 <UTIL_MEM_cpy_8>
    }
}
 80130fa:	4770      	bx	lr

080130fc <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80130fc:	1e53      	subs	r3, r2, #1
 80130fe:	b29b      	uxth	r3, r3
 8013100:	b11a      	cbz	r2, 801310a <UTIL_MEM_set_8+0xe>
  {
    *dst8++ = value;
 8013102:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8013106:	461a      	mov	r2, r3
 8013108:	e7f8      	b.n	80130fc <UTIL_MEM_set_8>
  }
}
 801310a:	4770      	bx	lr

0801310c <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801310c:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801310e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013112:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8013114:	4a06      	ldr	r2, [pc, #24]	; (8013130 <UTIL_SEQ_SetTask+0x24>)
 8013116:	6813      	ldr	r3, [r2, #0]
 8013118:	4303      	orrs	r3, r0
 801311a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801311c:	4a05      	ldr	r2, [pc, #20]	; (8013134 <UTIL_SEQ_SetTask+0x28>)
 801311e:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8013122:	4318      	orrs	r0, r3
 8013124:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013128:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 801312c:	bc10      	pop	{r4}
 801312e:	4770      	bx	lr
 8013130:	20001818 	.word	0x20001818
 8013134:	20001808 	.word	0x20001808

08013138 <UTIL_SEQ_PreIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8013138:	4770      	bx	lr

0801313a <UTIL_SEQ_PostIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 801313a:	4770      	bx	lr

0801313c <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801313c:	0c03      	lsrs	r3, r0, #16
 801313e:	041b      	lsls	r3, r3, #16
 8013140:	b9b3      	cbnz	r3, 8013170 <SEQ_BitPosition+0x34>
 8013142:	0400      	lsls	r0, r0, #16
 8013144:	2310      	movs	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8013146:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801314a:	d102      	bne.n	8013152 <SEQ_BitPosition+0x16>
 801314c:	3308      	adds	r3, #8
 801314e:	b2db      	uxtb	r3, r3
 8013150:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8013152:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013156:	d102      	bne.n	801315e <SEQ_BitPosition+0x22>
 8013158:	3304      	adds	r3, #4
 801315a:	b2db      	uxtb	r3, r3
 801315c:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801315e:	0f00      	lsrs	r0, r0, #28
 8013160:	4a04      	ldr	r2, [pc, #16]	; (8013174 <SEQ_BitPosition+0x38>)
 8013162:	5c10      	ldrb	r0, [r2, r0]
 8013164:	4418      	add	r0, r3
 8013166:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8013168:	f1c0 001f 	rsb	r0, r0, #31
}
 801316c:	b2c0      	uxtb	r0, r0
 801316e:	4770      	bx	lr
  uint8_t n = 0U;
 8013170:	2300      	movs	r3, #0
 8013172:	e7e8      	b.n	8013146 <SEQ_BitPosition+0xa>
 8013174:	080147a8 	.word	0x080147a8

08013178 <UTIL_SEQ_Run>:
{
 8013178:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 801317a:	4b3b      	ldr	r3, [pc, #236]	; (8013268 <UTIL_SEQ_Run+0xf0>)
 801317c:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 801317e:	4020      	ands	r0, r4
 8013180:	6018      	str	r0, [r3, #0]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8013182:	e012      	b.n	80131aa <UTIL_SEQ_Run+0x32>
      counter++;
 8013184:	3301      	adds	r3, #1
 8013186:	e01f      	b.n	80131c8 <UTIL_SEQ_Run+0x50>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8013188:	3b01      	subs	r3, #1
 801318a:	4938      	ldr	r1, [pc, #224]	; (801326c <UTIL_SEQ_Run+0xf4>)
 801318c:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8013190:	4002      	ands	r2, r0
 8013192:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013196:	2b00      	cmp	r3, #0
 8013198:	d1f6      	bne.n	8013188 <UTIL_SEQ_Run+0x10>
 801319a:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 801319e:	4b34      	ldr	r3, [pc, #208]	; (8013270 <UTIL_SEQ_Run+0xf8>)
 80131a0:	681a      	ldr	r2, [r3, #0]
 80131a2:	4b34      	ldr	r3, [pc, #208]	; (8013274 <UTIL_SEQ_Run+0xfc>)
 80131a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131a8:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80131aa:	4b33      	ldr	r3, [pc, #204]	; (8013278 <UTIL_SEQ_Run+0x100>)
 80131ac:	6819      	ldr	r1, [r3, #0]
 80131ae:	4b33      	ldr	r3, [pc, #204]	; (801327c <UTIL_SEQ_Run+0x104>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	400b      	ands	r3, r1
 80131b4:	4a2c      	ldr	r2, [pc, #176]	; (8013268 <UTIL_SEQ_Run+0xf0>)
 80131b6:	6812      	ldr	r2, [r2, #0]
 80131b8:	4213      	tst	r3, r2
 80131ba:	d033      	beq.n	8013224 <UTIL_SEQ_Run+0xac>
 80131bc:	4b30      	ldr	r3, [pc, #192]	; (8013280 <UTIL_SEQ_Run+0x108>)
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	4830      	ldr	r0, [pc, #192]	; (8013284 <UTIL_SEQ_Run+0x10c>)
 80131c2:	6800      	ldr	r0, [r0, #0]
 80131c4:	4003      	ands	r3, r0
 80131c6:	d12d      	bne.n	8013224 <UTIL_SEQ_Run+0xac>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80131c8:	4828      	ldr	r0, [pc, #160]	; (801326c <UTIL_SEQ_Run+0xf4>)
 80131ca:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 80131ce:	4008      	ands	r0, r1
 80131d0:	4010      	ands	r0, r2
 80131d2:	d0d7      	beq.n	8013184 <UTIL_SEQ_Run+0xc>
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80131d4:	4a25      	ldr	r2, [pc, #148]	; (801326c <UTIL_SEQ_Run+0xf4>)
 80131d6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80131da:	6852      	ldr	r2, [r2, #4]
 80131dc:	4210      	tst	r0, r2
 80131de:	d105      	bne.n	80131ec <UTIL_SEQ_Run+0x74>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80131e0:	4a22      	ldr	r2, [pc, #136]	; (801326c <UTIL_SEQ_Run+0xf4>)
 80131e2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80131e6:	f04f 31ff 	mov.w	r1, #4294967295
 80131ea:	6051      	str	r1, [r2, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80131ec:	4d1f      	ldr	r5, [pc, #124]	; (801326c <UTIL_SEQ_Run+0xf4>)
 80131ee:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80131f2:	686e      	ldr	r6, [r5, #4]
 80131f4:	4030      	ands	r0, r6
 80131f6:	f7ff ffa1 	bl	801313c <SEQ_BitPosition>
 80131fa:	4a1d      	ldr	r2, [pc, #116]	; (8013270 <UTIL_SEQ_Run+0xf8>)
 80131fc:	6010      	str	r0, [r2, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80131fe:	2301      	movs	r3, #1
 8013200:	fa03 f000 	lsl.w	r0, r3, r0
 8013204:	ea26 0000 	bic.w	r0, r6, r0
 8013208:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801320a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801320e:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8013210:	6812      	ldr	r2, [r2, #0]
 8013212:	4093      	lsls	r3, r2
 8013214:	43d8      	mvns	r0, r3
 8013216:	4919      	ldr	r1, [pc, #100]	; (801327c <UTIL_SEQ_Run+0x104>)
 8013218:	680a      	ldr	r2, [r1, #0]
 801321a:	ea22 0303 	bic.w	r3, r2, r3
 801321e:	600b      	str	r3, [r1, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013220:	2302      	movs	r3, #2
 8013222:	e7b8      	b.n	8013196 <UTIL_SEQ_Run+0x1e>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8013224:	4b12      	ldr	r3, [pc, #72]	; (8013270 <UTIL_SEQ_Run+0xf8>)
 8013226:	f04f 32ff 	mov.w	r2, #4294967295
 801322a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801322c:	f7ff ff84 	bl	8013138 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013230:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013234:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8013236:	4b11      	ldr	r3, [pc, #68]	; (801327c <UTIL_SEQ_Run+0x104>)
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	4a0f      	ldr	r2, [pc, #60]	; (8013278 <UTIL_SEQ_Run+0x100>)
 801323c:	6812      	ldr	r2, [r2, #0]
 801323e:	4013      	ands	r3, r2
 8013240:	4a09      	ldr	r2, [pc, #36]	; (8013268 <UTIL_SEQ_Run+0xf0>)
 8013242:	6812      	ldr	r2, [r2, #0]
 8013244:	4213      	tst	r3, r2
 8013246:	d105      	bne.n	8013254 <UTIL_SEQ_Run+0xdc>
 8013248:	4b0d      	ldr	r3, [pc, #52]	; (8013280 <UTIL_SEQ_Run+0x108>)
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	4b0d      	ldr	r3, [pc, #52]	; (8013284 <UTIL_SEQ_Run+0x10c>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	421a      	tst	r2, r3
 8013252:	d006      	beq.n	8013262 <UTIL_SEQ_Run+0xea>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013254:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8013258:	f7ff ff6f 	bl	801313a <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 801325c:	4b02      	ldr	r3, [pc, #8]	; (8013268 <UTIL_SEQ_Run+0xf0>)
 801325e:	601c      	str	r4, [r3, #0]
}
 8013260:	bd70      	pop	{r4, r5, r6, pc}
	UTIL_SEQ_Idle( );
 8013262:	f7f0 f92f 	bl	80034c4 <UTIL_SEQ_Idle>
 8013266:	e7f5      	b.n	8013254 <UTIL_SEQ_Run+0xdc>
 8013268:	200000d0 	.word	0x200000d0
 801326c:	20001808 	.word	0x20001808
 8013270:	2000177c 	.word	0x2000177c
 8013274:	20001788 	.word	0x20001788
 8013278:	200000d4 	.word	0x200000d4
 801327c:	20001818 	.word	0x20001818
 8013280:	20001780 	.word	0x20001780
 8013284:	20001784 	.word	0x20001784

08013288 <UTIL_SEQ_RegTask>:
{
 8013288:	b538      	push	{r3, r4, r5, lr}
 801328a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801328c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013290:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8013292:	f7ff ff53 	bl	801313c <SEQ_BitPosition>
 8013296:	4b03      	ldr	r3, [pc, #12]	; (80132a4 <UTIL_SEQ_RegTask+0x1c>)
 8013298:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801329c:	f385 8810 	msr	PRIMASK, r5
}
 80132a0:	bd38      	pop	{r3, r4, r5, pc}
 80132a2:	bf00      	nop
 80132a4:	20001788 	.word	0x20001788

080132a8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80132a8:	b082      	sub	sp, #8
 80132aa:	b082      	sub	sp, #8
 80132ac:	f10d 0c08 	add.w	ip, sp, #8
 80132b0:	e90c 0006 	stmdb	ip, {r1, r2}
 80132b4:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 80132b6:	9a00      	ldr	r2, [sp, #0]
 80132b8:	4413      	add	r3, r2
 80132ba:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80132bc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80132c0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80132c4:	440a      	add	r2, r1
 80132c6:	b291      	uxth	r1, r2
 80132c8:	b212      	sxth	r2, r2
 80132ca:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 80132cc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80132d0:	db04      	blt.n	80132dc <SysTimeAdd+0x34>
  {
    c.Seconds++;
 80132d2:	3301      	adds	r3, #1
 80132d4:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 80132d6:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80132da:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 80132dc:	b002      	add	sp, #8
 80132de:	b002      	add	sp, #8
 80132e0:	4770      	bx	lr

080132e2 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80132e2:	b082      	sub	sp, #8
 80132e4:	b082      	sub	sp, #8
 80132e6:	f10d 0c08 	add.w	ip, sp, #8
 80132ea:	e90c 0006 	stmdb	ip, {r1, r2}
 80132ee:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 80132f0:	9a00      	ldr	r2, [sp, #0]
 80132f2:	1ad3      	subs	r3, r2, r3
 80132f4:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80132f6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80132fa:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80132fe:	1a52      	subs	r2, r2, r1
 8013300:	b291      	uxth	r1, r2
 8013302:	b212      	sxth	r2, r2
 8013304:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8013306:	2a00      	cmp	r2, #0
 8013308:	db02      	blt.n	8013310 <SysTimeSub+0x2e>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 801330a:	b002      	add	sp, #8
 801330c:	b002      	add	sp, #8
 801330e:	4770      	bx	lr
    c.Seconds--;
 8013310:	3b01      	subs	r3, #1
 8013312:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8013314:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8013318:	8081      	strh	r1, [r0, #4]
  return c;
 801331a:	e7f6      	b.n	801330a <SysTimeSub+0x28>

0801331c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801331c:	b530      	push	{r4, r5, lr}
 801331e:	b089      	sub	sp, #36	; 0x24
 8013320:	ac02      	add	r4, sp, #8
 8013322:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8013326:	2300      	movs	r3, #0
 8013328:	9304      	str	r3, [sp, #16]
 801332a:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801332e:	4d0b      	ldr	r5, [pc, #44]	; (801335c <SysTimeSet+0x40>)
 8013330:	692b      	ldr	r3, [r5, #16]
 8013332:	a805      	add	r0, sp, #20
 8013334:	4798      	blx	r3
 8013336:	4603      	mov	r3, r0
 8013338:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801333a:	9a05      	ldr	r2, [sp, #20]
 801333c:	9200      	str	r2, [sp, #0]
 801333e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013342:	a806      	add	r0, sp, #24
 8013344:	f7ff ffcd 	bl	80132e2 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8013348:	682b      	ldr	r3, [r5, #0]
 801334a:	9806      	ldr	r0, [sp, #24]
 801334c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801334e:	68ab      	ldr	r3, [r5, #8]
 8013350:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8013354:	4798      	blx	r3
}
 8013356:	b009      	add	sp, #36	; 0x24
 8013358:	bd30      	pop	{r4, r5, pc}
 801335a:	bf00      	nop
 801335c:	08013c54 	.word	0x08013c54

08013360 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8013360:	b530      	push	{r4, r5, lr}
 8013362:	b087      	sub	sp, #28
 8013364:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8013366:	2300      	movs	r3, #0
 8013368:	9304      	str	r3, [sp, #16]
 801336a:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801336e:	4d0b      	ldr	r5, [pc, #44]	; (801339c <SysTimeGet+0x3c>)
 8013370:	692b      	ldr	r3, [r5, #16]
 8013372:	a805      	add	r0, sp, #20
 8013374:	4798      	blx	r3
 8013376:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8013378:	68eb      	ldr	r3, [r5, #12]
 801337a:	4798      	blx	r3
 801337c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8013380:	686b      	ldr	r3, [r5, #4]
 8013382:	4798      	blx	r3
 8013384:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8013386:	9b05      	ldr	r3, [sp, #20]
 8013388:	9300      	str	r3, [sp, #0]
 801338a:	9b04      	ldr	r3, [sp, #16]
 801338c:	9a03      	ldr	r2, [sp, #12]
 801338e:	4601      	mov	r1, r0
 8013390:	4620      	mov	r0, r4
 8013392:	f7ff ff89 	bl	80132a8 <SysTimeAdd>

  return sysTime;
}
 8013396:	4620      	mov	r0, r4
 8013398:	b007      	add	sp, #28
 801339a:	bd30      	pop	{r4, r5, pc}
 801339c:	08013c54 	.word	0x08013c54

080133a0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80133a0:	b530      	push	{r4, r5, lr}
 80133a2:	b083      	sub	sp, #12
 80133a4:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80133a6:	2300      	movs	r3, #0
 80133a8:	9300      	str	r3, [sp, #0]
 80133aa:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80133ae:	4b06      	ldr	r3, [pc, #24]	; (80133c8 <SysTimeGetMcuTime+0x28>)
 80133b0:	691b      	ldr	r3, [r3, #16]
 80133b2:	466d      	mov	r5, sp
 80133b4:	a801      	add	r0, sp, #4
 80133b6:	4798      	blx	r3
 80133b8:	9000      	str	r0, [sp, #0]
  
  return calendarTime;
 80133ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80133be:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80133c2:	4620      	mov	r0, r4
 80133c4:	b003      	add	sp, #12
 80133c6:	bd30      	pop	{r4, r5, pc}
 80133c8:	08013c54 	.word	0x08013c54

080133cc <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 80133cc:	b530      	push	{r4, r5, lr}
 80133ce:	b089      	sub	sp, #36	; 0x24
 80133d0:	ac02      	add	r4, sp, #8
 80133d2:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80133d6:	4d0c      	ldr	r5, [pc, #48]	; (8013408 <SysTimeToMs+0x3c>)
 80133d8:	68eb      	ldr	r3, [r5, #12]
 80133da:	4798      	blx	r3
 80133dc:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80133e0:	686b      	ldr	r3, [r5, #4]
 80133e2:	4798      	blx	r3
 80133e4:	4603      	mov	r3, r0
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 80133e6:	9a07      	ldr	r2, [sp, #28]
 80133e8:	9200      	str	r2, [sp, #0]
 80133ea:	e894 0006 	ldmia.w	r4, {r1, r2}
 80133ee:	a804      	add	r0, sp, #16
 80133f0:	f7ff ff77 	bl	80132e2 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 80133f4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 80133f8:	9a04      	ldr	r2, [sp, #16]
 80133fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80133fe:	fb00 3002 	mla	r0, r0, r2, r3
 8013402:	b009      	add	sp, #36	; 0x24
 8013404:	bd30      	pop	{r4, r5, pc}
 8013406:	bf00      	nop
 8013408:	08013c54 	.word	0x08013c54

0801340c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801340c:	b530      	push	{r4, r5, lr}
 801340e:	b087      	sub	sp, #28
 8013410:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8013412:	4b11      	ldr	r3, [pc, #68]	; (8013458 <SysTimeFromMs+0x4c>)
 8013414:	fba3 2301 	umull	r2, r3, r3, r1
 8013418:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801341a:	9304      	str	r3, [sp, #16]
 801341c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8013420:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013424:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8013428:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 801342c:	2300      	movs	r3, #0
 801342e:	f8ad 300e 	strh.w	r3, [sp, #14]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8013432:	4d0a      	ldr	r5, [pc, #40]	; (801345c <SysTimeFromMs+0x50>)
 8013434:	68eb      	ldr	r3, [r5, #12]
 8013436:	4798      	blx	r3
 8013438:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801343c:	686b      	ldr	r3, [r5, #4]
 801343e:	4798      	blx	r3
 8013440:	4603      	mov	r3, r0
  return SysTimeAdd( sysTime, DeltaTime );
 8013442:	9a03      	ldr	r2, [sp, #12]
 8013444:	9200      	str	r2, [sp, #0]
 8013446:	aa06      	add	r2, sp, #24
 8013448:	e912 0006 	ldmdb	r2, {r1, r2}
 801344c:	4620      	mov	r0, r4
 801344e:	f7ff ff2b 	bl	80132a8 <SysTimeAdd>
}
 8013452:	4620      	mov	r0, r4
 8013454:	b007      	add	sp, #28
 8013456:	bd30      	pop	{r4, r5, pc}
 8013458:	10624dd3 	.word	0x10624dd3
 801345c:	08013c54 	.word	0x08013c54

08013460 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8013460:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8013462:	4b03      	ldr	r3, [pc, #12]	; (8013470 <UTIL_TIMER_Init+0x10>)
 8013464:	2200      	movs	r2, #0
 8013466:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8013468:	4b02      	ldr	r3, [pc, #8]	; (8013474 <UTIL_TIMER_Init+0x14>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	4798      	blx	r3
}
 801346e:	bd08      	pop	{r3, pc}
 8013470:	2000181c 	.word	0x2000181c
 8013474:	08013c68 	.word	0x08013c68

08013478 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8013478:	b1a8      	cbz	r0, 80134a6 <UTIL_TIMER_Create+0x2e>
{
 801347a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801347c:	4617      	mov	r7, r2
 801347e:	461e      	mov	r6, r3
 8013480:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8013482:	b193      	cbz	r3, 80134aa <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8013484:	2500      	movs	r5, #0
 8013486:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8013488:	4b09      	ldr	r3, [pc, #36]	; (80134b0 <UTIL_TIMER_Create+0x38>)
 801348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801348c:	4608      	mov	r0, r1
 801348e:	4798      	blx	r3
 8013490:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8013492:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8013494:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8013496:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8013498:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 801349a:	9b06      	ldr	r3, [sp, #24]
 801349c:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 801349e:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 80134a0:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 80134a2:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 80134a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 80134a6:	2001      	movs	r0, #1
}
 80134a8:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 80134aa:	2001      	movs	r0, #1
 80134ac:	e7fa      	b.n	80134a4 <UTIL_TIMER_Create+0x2c>
 80134ae:	bf00      	nop
 80134b0:	08013c68 	.word	0x08013c68

080134b4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80134b4:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 80134b6:	4c03      	ldr	r4, [pc, #12]	; (80134c4 <UTIL_TIMER_GetCurrentTime+0x10>)
 80134b8:	69e3      	ldr	r3, [r4, #28]
 80134ba:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 80134bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80134be:	4798      	blx	r3
}
 80134c0:	bd10      	pop	{r4, pc}
 80134c2:	bf00      	nop
 80134c4:	08013c68 	.word	0x08013c68

080134c8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80134c8:	b570      	push	{r4, r5, r6, lr}
 80134ca:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80134cc:	4d05      	ldr	r5, [pc, #20]	; (80134e4 <UTIL_TIMER_GetElapsedTime+0x1c>)
 80134ce:	69eb      	ldr	r3, [r5, #28]
 80134d0:	4798      	blx	r3
 80134d2:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80134d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80134d6:	4630      	mov	r0, r6
 80134d8:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80134da:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80134dc:	1a20      	subs	r0, r4, r0
 80134de:	4798      	blx	r3
}
 80134e0:	bd70      	pop	{r4, r5, r6, pc}
 80134e2:	bf00      	nop
 80134e4:	08013c68 	.word	0x08013c68

080134e8 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80134e8:	4b05      	ldr	r3, [pc, #20]	; (8013500 <TimerExists+0x18>)
 80134ea:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80134ec:	b11b      	cbz	r3, 80134f6 <TimerExists+0xe>
  {
    if( cur == TimerObject )
 80134ee:	4283      	cmp	r3, r0
 80134f0:	d003      	beq.n	80134fa <TimerExists+0x12>
    {
      return true;
    }
    cur = cur->Next;
 80134f2:	695b      	ldr	r3, [r3, #20]
 80134f4:	e7fa      	b.n	80134ec <TimerExists+0x4>
  }
  return false;
 80134f6:	2000      	movs	r0, #0
 80134f8:	4770      	bx	lr
      return true;
 80134fa:	2001      	movs	r0, #1
}
 80134fc:	4770      	bx	lr
 80134fe:	bf00      	nop
 8013500:	2000181c 	.word	0x2000181c

08013504 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8013504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013506:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8013508:	4e09      	ldr	r6, [pc, #36]	; (8013530 <TimerSetTimeout+0x2c>)
 801350a:	6a33      	ldr	r3, [r6, #32]
 801350c:	4798      	blx	r3
 801350e:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8013510:	2301      	movs	r3, #1
 8013512:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8013514:	6827      	ldr	r7, [r4, #0]
 8013516:	69b6      	ldr	r6, [r6, #24]
 8013518:	47b0      	blx	r6
 801351a:	4428      	add	r0, r5
 801351c:	4287      	cmp	r7, r0
 801351e:	d202      	bcs.n	8013526 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8013520:	47b0      	blx	r6
 8013522:	4405      	add	r5, r0
 8013524:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8013526:	4b02      	ldr	r3, [pc, #8]	; (8013530 <TimerSetTimeout+0x2c>)
 8013528:	689b      	ldr	r3, [r3, #8]
 801352a:	6820      	ldr	r0, [r4, #0]
 801352c:	4798      	blx	r3
}
 801352e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013530:	08013c68 	.word	0x08013c68

08013534 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8013534:	b368      	cbz	r0, 8013592 <UTIL_TIMER_Stop+0x5e>
{
 8013536:	b510      	push	{r4, lr}
 8013538:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801353a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801353e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8013540:	4b15      	ldr	r3, [pc, #84]	; (8013598 <UTIL_TIMER_Stop+0x64>)
 8013542:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8013544:	2301      	movs	r3, #1
 8013546:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8013548:	b1e1      	cbz	r1, 8013584 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 801354a:	2300      	movs	r3, #0
 801354c:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801354e:	4288      	cmp	r0, r1
 8013550:	d006      	beq.n	8013560 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8013552:	460b      	mov	r3, r1
        while( cur != NULL )
 8013554:	b1b3      	cbz	r3, 8013584 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8013556:	4293      	cmp	r3, r2
 8013558:	d011      	beq.n	801357e <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 801355a:	4619      	mov	r1, r3
            cur = cur->Next;
 801355c:	695b      	ldr	r3, [r3, #20]
 801355e:	e7f9      	b.n	8013554 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8013560:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8013562:	6948      	ldr	r0, [r1, #20]
 8013564:	b120      	cbz	r0, 8013570 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8013566:	4b0c      	ldr	r3, [pc, #48]	; (8013598 <UTIL_TIMER_Stop+0x64>)
 8013568:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801356a:	f7ff ffcb 	bl	8013504 <TimerSetTimeout>
 801356e:	e009      	b.n	8013584 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8013570:	4b0a      	ldr	r3, [pc, #40]	; (801359c <UTIL_TIMER_Stop+0x68>)
 8013572:	68db      	ldr	r3, [r3, #12]
 8013574:	4798      	blx	r3
            TimerListHead = NULL;
 8013576:	4b08      	ldr	r3, [pc, #32]	; (8013598 <UTIL_TIMER_Stop+0x64>)
 8013578:	2200      	movs	r2, #0
 801357a:	601a      	str	r2, [r3, #0]
 801357c:	e002      	b.n	8013584 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 801357e:	695b      	ldr	r3, [r3, #20]
 8013580:	b123      	cbz	r3, 801358c <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8013582:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013584:	f384 8810 	msr	PRIMASK, r4
}
 8013588:	2000      	movs	r0, #0
}
 801358a:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 801358c:	2300      	movs	r3, #0
 801358e:	614b      	str	r3, [r1, #20]
 8013590:	e7f8      	b.n	8013584 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8013592:	2001      	movs	r0, #1
}
 8013594:	4770      	bx	lr
 8013596:	bf00      	nop
 8013598:	2000181c 	.word	0x2000181c
 801359c:	08013c68 	.word	0x08013c68

080135a0 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80135a0:	4b0d      	ldr	r3, [pc, #52]	; (80135d8 <TimerInsertTimer+0x38>)
 80135a2:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80135a4:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 80135a6:	6951      	ldr	r1, [r2, #20]
 80135a8:	b189      	cbz	r1, 80135ce <TimerInsertTimer+0x2e>
{
 80135aa:	b410      	push	{r4}
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 80135ac:	6804      	ldr	r4, [r0, #0]
 80135ae:	6819      	ldr	r1, [r3, #0]
 80135b0:	428c      	cmp	r4, r1
 80135b2:	d908      	bls.n	80135c6 <TimerInsertTimer+0x26>
    {
        cur = next;
 80135b4:	461a      	mov	r2, r3
        next = next->Next;
 80135b6:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 80135b8:	6951      	ldr	r1, [r2, #20]
 80135ba:	2900      	cmp	r1, #0
 80135bc:	d1f6      	bne.n	80135ac <TimerInsertTimer+0xc>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 80135be:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 80135c0:	2300      	movs	r3, #0
 80135c2:	6143      	str	r3, [r0, #20]
 80135c4:	e001      	b.n	80135ca <TimerInsertTimer+0x2a>
        cur->Next = TimerObject;
 80135c6:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 80135c8:	6143      	str	r3, [r0, #20]
}
 80135ca:	bc10      	pop	{r4}
 80135cc:	4770      	bx	lr
  cur->Next = TimerObject;
 80135ce:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 80135d0:	2300      	movs	r3, #0
 80135d2:	6143      	str	r3, [r0, #20]
 80135d4:	4770      	bx	lr
 80135d6:	bf00      	nop
 80135d8:	2000181c 	.word	0x2000181c

080135dc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80135dc:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80135de:	4b05      	ldr	r3, [pc, #20]	; (80135f4 <TimerInsertNewHeadTimer+0x18>)
 80135e0:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 80135e2:	b10b      	cbz	r3, 80135e8 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 80135e4:	2200      	movs	r2, #0
 80135e6:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80135e8:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 80135ea:	4b02      	ldr	r3, [pc, #8]	; (80135f4 <TimerInsertNewHeadTimer+0x18>)
 80135ec:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 80135ee:	f7ff ff89 	bl	8013504 <TimerSetTimeout>
}
 80135f2:	bd08      	pop	{r3, pc}
 80135f4:	2000181c 	.word	0x2000181c

080135f8 <UTIL_TIMER_Start>:
{
 80135f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80135fa:	2800      	cmp	r0, #0
 80135fc:	d036      	beq.n	801366c <UTIL_TIMER_Start+0x74>
 80135fe:	4604      	mov	r4, r0
 8013600:	f7ff ff72 	bl	80134e8 <TimerExists>
 8013604:	2800      	cmp	r0, #0
 8013606:	d134      	bne.n	8013672 <UTIL_TIMER_Start+0x7a>
 8013608:	7a65      	ldrb	r5, [r4, #9]
 801360a:	2d00      	cmp	r5, #0
 801360c:	d133      	bne.n	8013676 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801360e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013612:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8013614:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8013616:	4b19      	ldr	r3, [pc, #100]	; (801367c <UTIL_TIMER_Start+0x84>)
 8013618:	6a1b      	ldr	r3, [r3, #32]
 801361a:	4798      	blx	r3
    if( ticks < minValue )
 801361c:	4287      	cmp	r7, r0
 801361e:	d300      	bcc.n	8013622 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8013620:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8013622:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8013624:	2300      	movs	r3, #0
 8013626:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8013628:	2201      	movs	r2, #1
 801362a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 801362c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 801362e:	4b14      	ldr	r3, [pc, #80]	; (8013680 <UTIL_TIMER_Start+0x88>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	b183      	cbz	r3, 8013656 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8013634:	4b11      	ldr	r3, [pc, #68]	; (801367c <UTIL_TIMER_Start+0x84>)
 8013636:	699b      	ldr	r3, [r3, #24]
 8013638:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 801363a:	6823      	ldr	r3, [r4, #0]
 801363c:	4418      	add	r0, r3
 801363e:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8013640:	4b0f      	ldr	r3, [pc, #60]	; (8013680 <UTIL_TIMER_Start+0x88>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	4298      	cmp	r0, r3
 8013648:	d20c      	bcs.n	8013664 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 801364a:	4620      	mov	r0, r4
 801364c:	f7ff ffc6 	bl	80135dc <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013650:	f386 8810 	msr	PRIMASK, r6
}
 8013654:	e00b      	b.n	801366e <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8013656:	4b09      	ldr	r3, [pc, #36]	; (801367c <UTIL_TIMER_Start+0x84>)
 8013658:	691b      	ldr	r3, [r3, #16]
 801365a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801365c:	4620      	mov	r0, r4
 801365e:	f7ff ffbd 	bl	80135dc <TimerInsertNewHeadTimer>
 8013662:	e7f5      	b.n	8013650 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8013664:	4620      	mov	r0, r4
 8013666:	f7ff ff9b 	bl	80135a0 <TimerInsertTimer>
 801366a:	e7f1      	b.n	8013650 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 801366c:	2501      	movs	r5, #1
}
 801366e:	4628      	mov	r0, r5
 8013670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8013672:	2501      	movs	r5, #1
 8013674:	e7fb      	b.n	801366e <UTIL_TIMER_Start+0x76>
 8013676:	2501      	movs	r5, #1
 8013678:	e7f9      	b.n	801366e <UTIL_TIMER_Start+0x76>
 801367a:	bf00      	nop
 801367c:	08013c68 	.word	0x08013c68
 8013680:	2000181c 	.word	0x2000181c

08013684 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8013684:	b198      	cbz	r0, 80136ae <UTIL_TIMER_SetPeriod+0x2a>
{
 8013686:	b510      	push	{r4, lr}
 8013688:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801368a:	4b0a      	ldr	r3, [pc, #40]	; (80136b4 <UTIL_TIMER_SetPeriod+0x30>)
 801368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801368e:	4608      	mov	r0, r1
 8013690:	4798      	blx	r3
 8013692:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8013694:	4620      	mov	r0, r4
 8013696:	f7ff ff27 	bl	80134e8 <TimerExists>
 801369a:	b908      	cbnz	r0, 80136a0 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801369c:	2000      	movs	r0, #0
}
 801369e:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80136a0:	4620      	mov	r0, r4
 80136a2:	f7ff ff47 	bl	8013534 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80136a6:	4620      	mov	r0, r4
 80136a8:	f7ff ffa6 	bl	80135f8 <UTIL_TIMER_Start>
 80136ac:	e7f7      	b.n	801369e <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 80136ae:	2001      	movs	r0, #1
}
 80136b0:	4770      	bx	lr
 80136b2:	bf00      	nop
 80136b4:	08013c68 	.word	0x08013c68

080136b8 <UTIL_TIMER_IRQ_Handler>:
{
 80136b8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80136ba:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80136be:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 80136c0:	4c1e      	ldr	r4, [pc, #120]	; (801373c <UTIL_TIMER_IRQ_Handler+0x84>)
 80136c2:	6963      	ldr	r3, [r4, #20]
 80136c4:	4798      	blx	r3
 80136c6:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 80136c8:	6923      	ldr	r3, [r4, #16]
 80136ca:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 80136cc:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 80136ce:	4b1c      	ldr	r3, [pc, #112]	; (8013740 <UTIL_TIMER_IRQ_Handler+0x88>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	b923      	cbnz	r3, 80136de <UTIL_TIMER_IRQ_Handler+0x26>
 80136d4:	e018      	b.n	8013708 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 80136d6:	2200      	movs	r2, #0
 80136d8:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 80136da:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 80136dc:	b1a3      	cbz	r3, 8013708 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 80136de:	681a      	ldr	r2, [r3, #0]
 80136e0:	42a2      	cmp	r2, r4
 80136e2:	d9f8      	bls.n	80136d6 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 80136e4:	1a31      	subs	r1, r6, r0
 80136e6:	440a      	add	r2, r1
 80136e8:	601a      	str	r2, [r3, #0]
 80136ea:	e7f6      	b.n	80136da <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 80136ec:	4b14      	ldr	r3, [pc, #80]	; (8013740 <UTIL_TIMER_IRQ_Handler+0x88>)
 80136ee:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 80136f0:	6962      	ldr	r2, [r4, #20]
 80136f2:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 80136f4:	2300      	movs	r3, #0
 80136f6:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 80136f8:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 80136fa:	68e3      	ldr	r3, [r4, #12]
 80136fc:	6920      	ldr	r0, [r4, #16]
 80136fe:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8013700:	8963      	ldrh	r3, [r4, #10]
 8013702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013706:	d012      	beq.n	801372e <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8013708:	4b0d      	ldr	r3, [pc, #52]	; (8013740 <UTIL_TIMER_IRQ_Handler+0x88>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	b13b      	cbz	r3, 801371e <UTIL_TIMER_IRQ_Handler+0x66>
 801370e:	681c      	ldr	r4, [r3, #0]
 8013710:	2c00      	cmp	r4, #0
 8013712:	d0eb      	beq.n	80136ec <UTIL_TIMER_IRQ_Handler+0x34>
 8013714:	4b09      	ldr	r3, [pc, #36]	; (801373c <UTIL_TIMER_IRQ_Handler+0x84>)
 8013716:	699b      	ldr	r3, [r3, #24]
 8013718:	4798      	blx	r3
 801371a:	4284      	cmp	r4, r0
 801371c:	d3e6      	bcc.n	80136ec <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801371e:	4b08      	ldr	r3, [pc, #32]	; (8013740 <UTIL_TIMER_IRQ_Handler+0x88>)
 8013720:	6818      	ldr	r0, [r3, #0]
 8013722:	b108      	cbz	r0, 8013728 <UTIL_TIMER_IRQ_Handler+0x70>
 8013724:	7a03      	ldrb	r3, [r0, #8]
 8013726:	b133      	cbz	r3, 8013736 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013728:	f385 8810 	msr	PRIMASK, r5
}
 801372c:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 801372e:	4620      	mov	r0, r4
 8013730:	f7ff ff62 	bl	80135f8 <UTIL_TIMER_Start>
 8013734:	e7e8      	b.n	8013708 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8013736:	f7ff fee5 	bl	8013504 <TimerSetTimeout>
 801373a:	e7f5      	b.n	8013728 <UTIL_TIMER_IRQ_Handler+0x70>
 801373c:	08013c68 	.word	0x08013c68
 8013740:	2000181c 	.word	0x2000181c

08013744 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8013744:	4601      	mov	r1, r0
  int i = 0;
 8013746:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8013748:	680a      	ldr	r2, [r1, #0]
 801374a:	7813      	ldrb	r3, [r2, #0]
 801374c:	3b30      	subs	r3, #48	; 0x30
 801374e:	b2db      	uxtb	r3, r3
 8013750:	2b09      	cmp	r3, #9
 8013752:	d808      	bhi.n	8013766 <ee_skip_atoi+0x22>
 8013754:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013758:	1c53      	adds	r3, r2, #1
 801375a:	600b      	str	r3, [r1, #0]
 801375c:	7813      	ldrb	r3, [r2, #0]
 801375e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013762:	3830      	subs	r0, #48	; 0x30
 8013764:	e7f0      	b.n	8013748 <ee_skip_atoi+0x4>
  return i;
}
 8013766:	4770      	bx	lr

08013768 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8013768:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 801376c:	b093      	sub	sp, #76	; 0x4c
 801376e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013770:	9d1c      	ldr	r5, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8013772:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013776:	d111      	bne.n	801379c <ee_number+0x34>
  char *dig = lower_digits;
 8013778:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 801386c <ee_number+0x104>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801377c:	469c      	mov	ip, r3
 801377e:	3b02      	subs	r3, #2
 8013780:	2b22      	cmp	r3, #34	; 0x22
 8013782:	d871      	bhi.n	8013868 <ee_number+0x100>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8013784:	f015 0401 	ands.w	r4, r5, #1
 8013788:	d00b      	beq.n	80137a2 <ee_number+0x3a>
 801378a:	2730      	movs	r7, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 801378c:	f015 0f02 	tst.w	r5, #2
 8013790:	d010      	beq.n	80137b4 <ee_number+0x4c>
  {
    if (num < 0)
 8013792:	2a00      	cmp	r2, #0
 8013794:	db07      	blt.n	80137a6 <ee_number+0x3e>
  sign = 0;
 8013796:	f04f 0e00 	mov.w	lr, #0
 801379a:	e00d      	b.n	80137b8 <ee_number+0x50>
  if (type & UPPERCASE)  dig = upper_digits;
 801379c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013870 <ee_number+0x108>
 80137a0:	e7ec      	b.n	801377c <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80137a2:	2720      	movs	r7, #32
 80137a4:	e7f2      	b.n	801378c <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80137a6:	4252      	negs	r2, r2
      size--;
 80137a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80137aa:	3b01      	subs	r3, #1
 80137ac:	931a      	str	r3, [sp, #104]	; 0x68
      sign = '-';
 80137ae:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
 80137b2:	e001      	b.n	80137b8 <ee_number+0x50>
  sign = 0;
 80137b4:	f04f 0e00 	mov.w	lr, #0
  }
#endif
  
  i = 0;

  if (num == 0)
 80137b8:	b9da      	cbnz	r2, 80137f2 <ee_number+0x8a>
    tmp[i++] = '0';
 80137ba:	2330      	movs	r3, #48	; 0x30
 80137bc:	f88d 3004 	strb.w	r3, [sp, #4]
 80137c0:	2501      	movs	r5, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 80137c2:	42b5      	cmp	r5, r6
 80137c4:	dd00      	ble.n	80137c8 <ee_number+0x60>
 80137c6:	462e      	mov	r6, r5
  size -= precision;
 80137c8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80137ca:	1b9b      	subs	r3, r3, r6
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80137cc:	b30c      	cbz	r4, 8013812 <ee_number+0xaa>
  if (sign) ASSIGN_STR(sign);
 80137ce:	f1be 0f00 	cmp.w	lr, #0
 80137d2:	d003      	beq.n	80137dc <ee_number+0x74>
 80137d4:	f800 eb01 	strb.w	lr, [r0], #1
 80137d8:	3901      	subs	r1, #1
 80137da:	d007      	beq.n	80137ec <ee_number+0x84>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 80137dc:	2b00      	cmp	r3, #0
 80137de:	f103 33ff 	add.w	r3, r3, #4294967295
 80137e2:	dd20      	ble.n	8013826 <ee_number+0xbe>
 80137e4:	f800 7b01 	strb.w	r7, [r0], #1
 80137e8:	3901      	subs	r1, #1
 80137ea:	d1f7      	bne.n	80137dc <ee_number+0x74>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 80137ec:	b013      	add	sp, #76	; 0x4c
 80137ee:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
  i = 0;
 80137f2:	2500      	movs	r5, #0
    while (num != 0)
 80137f4:	2a00      	cmp	r2, #0
 80137f6:	d0e4      	beq.n	80137c2 <ee_number+0x5a>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80137f8:	fbb2 f3fc 	udiv	r3, r2, ip
 80137fc:	fb0c 2213 	mls	r2, ip, r3, r2
 8013800:	f818 a002 	ldrb.w	sl, [r8, r2]
 8013804:	aa12      	add	r2, sp, #72	; 0x48
 8013806:	442a      	add	r2, r5
 8013808:	f802 ac44 	strb.w	sl, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 801380c:	461a      	mov	r2, r3
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801380e:	3501      	adds	r5, #1
 8013810:	e7f0      	b.n	80137f4 <ee_number+0x8c>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8013812:	2b00      	cmp	r3, #0
 8013814:	f103 33ff 	add.w	r3, r3, #4294967295
 8013818:	ddd9      	ble.n	80137ce <ee_number+0x66>
 801381a:	2220      	movs	r2, #32
 801381c:	f800 2b01 	strb.w	r2, [r0], #1
 8013820:	3901      	subs	r1, #1
 8013822:	d1f6      	bne.n	8013812 <ee_number+0xaa>
 8013824:	e7e2      	b.n	80137ec <ee_number+0x84>
  while (i < precision--) ASSIGN_STR('0');
 8013826:	42ae      	cmp	r6, r5
 8013828:	f106 36ff 	add.w	r6, r6, #4294967295
 801382c:	dd05      	ble.n	801383a <ee_number+0xd2>
 801382e:	2230      	movs	r2, #48	; 0x30
 8013830:	f800 2b01 	strb.w	r2, [r0], #1
 8013834:	3901      	subs	r1, #1
 8013836:	d1f6      	bne.n	8013826 <ee_number+0xbe>
 8013838:	e7d8      	b.n	80137ec <ee_number+0x84>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801383a:	2d00      	cmp	r5, #0
 801383c:	f105 35ff 	add.w	r5, r5, #4294967295
 8013840:	dd08      	ble.n	8013854 <ee_number+0xec>
 8013842:	aa12      	add	r2, sp, #72	; 0x48
 8013844:	442a      	add	r2, r5
 8013846:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 801384a:	f800 2b01 	strb.w	r2, [r0], #1
 801384e:	3901      	subs	r1, #1
 8013850:	d1f3      	bne.n	801383a <ee_number+0xd2>
 8013852:	e7cb      	b.n	80137ec <ee_number+0x84>
  while (size-- > 0) ASSIGN_STR(' ');
 8013854:	2b00      	cmp	r3, #0
 8013856:	f103 33ff 	add.w	r3, r3, #4294967295
 801385a:	ddc7      	ble.n	80137ec <ee_number+0x84>
 801385c:	2220      	movs	r2, #32
 801385e:	f800 2b01 	strb.w	r2, [r0], #1
 8013862:	3901      	subs	r1, #1
 8013864:	d1f6      	bne.n	8013854 <ee_number+0xec>
 8013866:	e7c1      	b.n	80137ec <ee_number+0x84>
  if (base < 2 || base > 36) return 0;
 8013868:	2000      	movs	r0, #0
 801386a:	e7bf      	b.n	80137ec <ee_number+0x84>
 801386c:	080147e0 	.word	0x080147e0
 8013870:	080147b8 	.word	0x080147b8

08013874 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8013874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013878:	b087      	sub	sp, #28
 801387a:	9205      	str	r2, [sp, #20]
 801387c:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801387e:	1e0f      	subs	r7, r1, #0
 8013880:	f340 80b9 	ble.w	80139f6 <tiny_vsnprintf_like+0x182>
 8013884:	4606      	mov	r6, r0
  {
    return 0;
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8013886:	4604      	mov	r4, r0
 8013888:	e004      	b.n	8013894 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);
    
    if (*fmt != '%')
    {
      *str++ = *fmt;
 801388a:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801388e:	9b05      	ldr	r3, [sp, #20]
 8013890:	3301      	adds	r3, #1
 8013892:	9305      	str	r3, [sp, #20]
 8013894:	9905      	ldr	r1, [sp, #20]
 8013896:	780a      	ldrb	r2, [r1, #0]
 8013898:	b922      	cbnz	r2, 80138a4 <tiny_vsnprintf_like+0x30>
 801389a:	1ba3      	subs	r3, r4, r6
 801389c:	1e78      	subs	r0, r7, #1
 801389e:	4283      	cmp	r3, r0
 80138a0:	f2c0 80a3 	blt.w	80139ea <tiny_vsnprintf_like+0x176>
    CHECK_STR_SIZE(buf, str, size);
 80138a4:	1ba3      	subs	r3, r4, r6
 80138a6:	f107 38ff 	add.w	r8, r7, #4294967295
 80138aa:	4543      	cmp	r3, r8
 80138ac:	f280 809d 	bge.w	80139ea <tiny_vsnprintf_like+0x176>
    if (*fmt != '%')
 80138b0:	2a25      	cmp	r2, #37	; 0x25
 80138b2:	d1ea      	bne.n	801388a <tiny_vsnprintf_like+0x16>
                  
    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 80138b4:	1c4b      	adds	r3, r1, #1
 80138b6:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 80138b8:	784b      	ldrb	r3, [r1, #1]
 80138ba:	2b30      	cmp	r3, #48	; 0x30
 80138bc:	d020      	beq.n	8013900 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 80138be:	f04f 0900 	mov.w	r9, #0
    }
#endif
    
    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 80138c2:	3b30      	subs	r3, #48	; 0x30
 80138c4:	b2db      	uxtb	r3, r3
 80138c6:	2b09      	cmp	r3, #9
 80138c8:	d91d      	bls.n	8013906 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 80138ca:	f04f 35ff 	mov.w	r5, #4294967295
#endif
    
    // Default base
    base = 10;

    switch (*fmt)
 80138ce:	9b05      	ldr	r3, [sp, #20]
 80138d0:	781a      	ldrb	r2, [r3, #0]
 80138d2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 80138d6:	2b20      	cmp	r3, #32
 80138d8:	d868      	bhi.n	80139ac <tiny_vsnprintf_like+0x138>
 80138da:	e8df f003 	tbb	[pc, r3]
 80138de:	674b      	.short	0x674b
 80138e0:	67676767 	.word	0x67676767
 80138e4:	67676767 	.word	0x67676767
 80138e8:	67631b67 	.word	0x67631b67
 80138ec:	63676767 	.word	0x63676767
 80138f0:	67676767 	.word	0x67676767
 80138f4:	67676767 	.word	0x67676767
 80138f8:	19672967 	.word	0x19672967
 80138fc:	6767      	.short	0x6767
 80138fe:	7d          	.byte	0x7d
 80138ff:	00          	.byte	0x00
      flags |= ZEROPAD;
 8013900:	f04f 0901 	mov.w	r9, #1
 8013904:	e7dd      	b.n	80138c2 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8013906:	a805      	add	r0, sp, #20
 8013908:	f7ff ff1c 	bl	8013744 <ee_skip_atoi>
 801390c:	4605      	mov	r5, r0
 801390e:	e7de      	b.n	80138ce <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8013910:	230a      	movs	r3, #10
 8013912:	e032      	b.n	801397a <tiny_vsnprintf_like+0x106>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8013914:	3d01      	subs	r5, #1
 8013916:	2d00      	cmp	r5, #0
 8013918:	dd03      	ble.n	8013922 <tiny_vsnprintf_like+0xae>
 801391a:	2320      	movs	r3, #32
 801391c:	f804 3b01 	strb.w	r3, [r4], #1
 8013920:	e7f8      	b.n	8013914 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8013922:	9b04      	ldr	r3, [sp, #16]
 8013924:	1d1a      	adds	r2, r3, #4
 8013926:	9204      	str	r2, [sp, #16]
 8013928:	781b      	ldrb	r3, [r3, #0]
 801392a:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801392e:	e7ae      	b.n	801388e <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8013930:	9b04      	ldr	r3, [sp, #16]
 8013932:	1d1a      	adds	r2, r3, #4
 8013934:	9204      	str	r2, [sp, #16]
 8013936:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 801393a:	f1b8 0f00 	cmp.w	r8, #0
 801393e:	d00a      	beq.n	8013956 <tiny_vsnprintf_like+0xe2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8013940:	4640      	mov	r0, r8
 8013942:	f7ee fc19 	bl	8002178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8013946:	1e6b      	subs	r3, r5, #1
 8013948:	4285      	cmp	r5, r0
 801394a:	dd07      	ble.n	801395c <tiny_vsnprintf_like+0xe8>
 801394c:	2220      	movs	r2, #32
 801394e:	f804 2b01 	strb.w	r2, [r4], #1
 8013952:	461d      	mov	r5, r3
 8013954:	e7f7      	b.n	8013946 <tiny_vsnprintf_like+0xd2>
        if (!s) s = "<NULL>";
 8013956:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80139fc <tiny_vsnprintf_like+0x188>
 801395a:	e7f1      	b.n	8013940 <tiny_vsnprintf_like+0xcc>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801395c:	2200      	movs	r2, #0
 801395e:	e006      	b.n	801396e <tiny_vsnprintf_like+0xfa>
 8013960:	4643      	mov	r3, r8
 8013962:	f813 1b01 	ldrb.w	r1, [r3], #1
 8013966:	f804 1b01 	strb.w	r1, [r4], #1
 801396a:	3201      	adds	r2, #1
 801396c:	4698      	mov	r8, r3
 801396e:	4282      	cmp	r2, r0
 8013970:	dbf6      	blt.n	8013960 <tiny_vsnprintf_like+0xec>
 8013972:	e78c      	b.n	801388e <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 8013974:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8013978:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 801397a:	f019 0f02 	tst.w	r9, #2
 801397e:	d02f      	beq.n	80139e0 <tiny_vsnprintf_like+0x16c>
      num = va_arg(args, int);
 8013980:	9a04      	ldr	r2, [sp, #16]
 8013982:	1d11      	adds	r1, r2, #4
 8013984:	9104      	str	r1, [sp, #16]
 8013986:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8013988:	1ba1      	subs	r1, r4, r6
 801398a:	f8cd 9008 	str.w	r9, [sp, #8]
 801398e:	f04f 30ff 	mov.w	r0, #4294967295
 8013992:	9001      	str	r0, [sp, #4]
 8013994:	9500      	str	r5, [sp, #0]
 8013996:	eba8 0101 	sub.w	r1, r8, r1
 801399a:	4620      	mov	r0, r4
 801399c:	f7ff fee4 	bl	8013768 <ee_number>
 80139a0:	4604      	mov	r4, r0
 80139a2:	e774      	b.n	801388e <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80139a4:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 80139a8:	230a      	movs	r3, #10
 80139aa:	e7e6      	b.n	801397a <tiny_vsnprintf_like+0x106>
        if (*fmt != '%') *str++ = '%';
 80139ac:	2a25      	cmp	r2, #37	; 0x25
 80139ae:	d002      	beq.n	80139b6 <tiny_vsnprintf_like+0x142>
 80139b0:	2325      	movs	r3, #37	; 0x25
 80139b2:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80139b6:	1ba3      	subs	r3, r4, r6
 80139b8:	4598      	cmp	r8, r3
 80139ba:	dd0f      	ble.n	80139dc <tiny_vsnprintf_like+0x168>
        if (*fmt)
 80139bc:	9b05      	ldr	r3, [sp, #20]
 80139be:	781a      	ldrb	r2, [r3, #0]
 80139c0:	b13a      	cbz	r2, 80139d2 <tiny_vsnprintf_like+0x15e>
          *str++ = *fmt;
 80139c2:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80139c6:	1ba3      	subs	r3, r4, r6
 80139c8:	4598      	cmp	r8, r3
 80139ca:	f73f af60 	bgt.w	801388e <tiny_vsnprintf_like+0x1a>
    base = 10;
 80139ce:	230a      	movs	r3, #10
    if (qualifier == 'l')
 80139d0:	e7d3      	b.n	801397a <tiny_vsnprintf_like+0x106>
          --fmt;
 80139d2:	3b01      	subs	r3, #1
 80139d4:	9305      	str	r3, [sp, #20]
 80139d6:	e7f6      	b.n	80139c6 <tiny_vsnprintf_like+0x152>
        base = 16;
 80139d8:	2310      	movs	r3, #16
 80139da:	e7ce      	b.n	801397a <tiny_vsnprintf_like+0x106>
    base = 10;
 80139dc:	230a      	movs	r3, #10
 80139de:	e7cc      	b.n	801397a <tiny_vsnprintf_like+0x106>
      num = va_arg(args, unsigned int);
 80139e0:	9a04      	ldr	r2, [sp, #16]
 80139e2:	1d11      	adds	r1, r2, #4
 80139e4:	9104      	str	r1, [sp, #16]
 80139e6:	6812      	ldr	r2, [r2, #0]
 80139e8:	e7ce      	b.n	8013988 <tiny_vsnprintf_like+0x114>
  }

  *str = '\0';
 80139ea:	2300      	movs	r3, #0
 80139ec:	7023      	strb	r3, [r4, #0]
  return str - buf;
 80139ee:	1ba0      	subs	r0, r4, r6
}
 80139f0:	b007      	add	sp, #28
 80139f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 80139f6:	2000      	movs	r0, #0
 80139f8:	e7fa      	b.n	80139f0 <tiny_vsnprintf_like+0x17c>
 80139fa:	bf00      	nop
 80139fc:	08014808 	.word	0x08014808

08013a00 <__libc_init_array>:
 8013a00:	b570      	push	{r4, r5, r6, lr}
 8013a02:	4d0d      	ldr	r5, [pc, #52]	; (8013a38 <__libc_init_array+0x38>)
 8013a04:	4c0d      	ldr	r4, [pc, #52]	; (8013a3c <__libc_init_array+0x3c>)
 8013a06:	1b64      	subs	r4, r4, r5
 8013a08:	10a4      	asrs	r4, r4, #2
 8013a0a:	2600      	movs	r6, #0
 8013a0c:	42a6      	cmp	r6, r4
 8013a0e:	d109      	bne.n	8013a24 <__libc_init_array+0x24>
 8013a10:	4d0b      	ldr	r5, [pc, #44]	; (8013a40 <__libc_init_array+0x40>)
 8013a12:	4c0c      	ldr	r4, [pc, #48]	; (8013a44 <__libc_init_array+0x44>)
 8013a14:	f000 f8a0 	bl	8013b58 <_init>
 8013a18:	1b64      	subs	r4, r4, r5
 8013a1a:	10a4      	asrs	r4, r4, #2
 8013a1c:	2600      	movs	r6, #0
 8013a1e:	42a6      	cmp	r6, r4
 8013a20:	d105      	bne.n	8013a2e <__libc_init_array+0x2e>
 8013a22:	bd70      	pop	{r4, r5, r6, pc}
 8013a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a28:	4798      	blx	r3
 8013a2a:	3601      	adds	r6, #1
 8013a2c:	e7ee      	b.n	8013a0c <__libc_init_array+0xc>
 8013a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a32:	4798      	blx	r3
 8013a34:	3601      	adds	r6, #1
 8013a36:	e7f2      	b.n	8013a1e <__libc_init_array+0x1e>
 8013a38:	08014818 	.word	0x08014818
 8013a3c:	08014818 	.word	0x08014818
 8013a40:	08014818 	.word	0x08014818
 8013a44:	0801481c 	.word	0x0801481c

08013a48 <memset>:
 8013a48:	4402      	add	r2, r0
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	4293      	cmp	r3, r2
 8013a4e:	d100      	bne.n	8013a52 <memset+0xa>
 8013a50:	4770      	bx	lr
 8013a52:	f803 1b01 	strb.w	r1, [r3], #1
 8013a56:	e7f9      	b.n	8013a4c <memset+0x4>

08013a58 <floor>:
 8013a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a5c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8013a60:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8013a64:	2e13      	cmp	r6, #19
 8013a66:	4602      	mov	r2, r0
 8013a68:	460b      	mov	r3, r1
 8013a6a:	4607      	mov	r7, r0
 8013a6c:	460c      	mov	r4, r1
 8013a6e:	4605      	mov	r5, r0
 8013a70:	dc34      	bgt.n	8013adc <floor+0x84>
 8013a72:	2e00      	cmp	r6, #0
 8013a74:	da15      	bge.n	8013aa2 <floor+0x4a>
 8013a76:	a334      	add	r3, pc, #208	; (adr r3, 8013b48 <floor+0xf0>)
 8013a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a7c:	f7ee fb8a 	bl	8002194 <__adddf3>
 8013a80:	2200      	movs	r2, #0
 8013a82:	2300      	movs	r3, #0
 8013a84:	f7ee fdba 	bl	80025fc <__aeabi_dcmpgt>
 8013a88:	b140      	cbz	r0, 8013a9c <floor+0x44>
 8013a8a:	2c00      	cmp	r4, #0
 8013a8c:	da59      	bge.n	8013b42 <floor+0xea>
 8013a8e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013a92:	ea57 0503 	orrs.w	r5, r7, r3
 8013a96:	d001      	beq.n	8013a9c <floor+0x44>
 8013a98:	4c2d      	ldr	r4, [pc, #180]	; (8013b50 <floor+0xf8>)
 8013a9a:	2500      	movs	r5, #0
 8013a9c:	4623      	mov	r3, r4
 8013a9e:	462f      	mov	r7, r5
 8013aa0:	e025      	b.n	8013aee <floor+0x96>
 8013aa2:	4a2c      	ldr	r2, [pc, #176]	; (8013b54 <floor+0xfc>)
 8013aa4:	fa42 f806 	asr.w	r8, r2, r6
 8013aa8:	ea01 0208 	and.w	r2, r1, r8
 8013aac:	4302      	orrs	r2, r0
 8013aae:	d01e      	beq.n	8013aee <floor+0x96>
 8013ab0:	a325      	add	r3, pc, #148	; (adr r3, 8013b48 <floor+0xf0>)
 8013ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ab6:	f7ee fb6d 	bl	8002194 <__adddf3>
 8013aba:	2200      	movs	r2, #0
 8013abc:	2300      	movs	r3, #0
 8013abe:	f7ee fd9d 	bl	80025fc <__aeabi_dcmpgt>
 8013ac2:	2800      	cmp	r0, #0
 8013ac4:	d0ea      	beq.n	8013a9c <floor+0x44>
 8013ac6:	2c00      	cmp	r4, #0
 8013ac8:	bfbe      	ittt	lt
 8013aca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013ace:	fa43 f606 	asrlt.w	r6, r3, r6
 8013ad2:	19a4      	addlt	r4, r4, r6
 8013ad4:	ea24 0408 	bic.w	r4, r4, r8
 8013ad8:	2500      	movs	r5, #0
 8013ada:	e7df      	b.n	8013a9c <floor+0x44>
 8013adc:	2e33      	cmp	r6, #51	; 0x33
 8013ade:	dd0a      	ble.n	8013af6 <floor+0x9e>
 8013ae0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013ae4:	d103      	bne.n	8013aee <floor+0x96>
 8013ae6:	f7ee fb55 	bl	8002194 <__adddf3>
 8013aea:	4607      	mov	r7, r0
 8013aec:	460b      	mov	r3, r1
 8013aee:	4638      	mov	r0, r7
 8013af0:	4619      	mov	r1, r3
 8013af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013af6:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8013afa:	f04f 32ff 	mov.w	r2, #4294967295
 8013afe:	fa22 f808 	lsr.w	r8, r2, r8
 8013b02:	ea18 0f00 	tst.w	r8, r0
 8013b06:	d0f2      	beq.n	8013aee <floor+0x96>
 8013b08:	a30f      	add	r3, pc, #60	; (adr r3, 8013b48 <floor+0xf0>)
 8013b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b0e:	f7ee fb41 	bl	8002194 <__adddf3>
 8013b12:	2200      	movs	r2, #0
 8013b14:	2300      	movs	r3, #0
 8013b16:	f7ee fd71 	bl	80025fc <__aeabi_dcmpgt>
 8013b1a:	2800      	cmp	r0, #0
 8013b1c:	d0be      	beq.n	8013a9c <floor+0x44>
 8013b1e:	2c00      	cmp	r4, #0
 8013b20:	da02      	bge.n	8013b28 <floor+0xd0>
 8013b22:	2e14      	cmp	r6, #20
 8013b24:	d103      	bne.n	8013b2e <floor+0xd6>
 8013b26:	3401      	adds	r4, #1
 8013b28:	ea25 0508 	bic.w	r5, r5, r8
 8013b2c:	e7b6      	b.n	8013a9c <floor+0x44>
 8013b2e:	2301      	movs	r3, #1
 8013b30:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013b34:	fa03 f606 	lsl.w	r6, r3, r6
 8013b38:	4435      	add	r5, r6
 8013b3a:	42bd      	cmp	r5, r7
 8013b3c:	bf38      	it	cc
 8013b3e:	18e4      	addcc	r4, r4, r3
 8013b40:	e7f2      	b.n	8013b28 <floor+0xd0>
 8013b42:	2500      	movs	r5, #0
 8013b44:	462c      	mov	r4, r5
 8013b46:	e7a9      	b.n	8013a9c <floor+0x44>
 8013b48:	8800759c 	.word	0x8800759c
 8013b4c:	7e37e43c 	.word	0x7e37e43c
 8013b50:	bff00000 	.word	0xbff00000
 8013b54:	000fffff 	.word	0x000fffff

08013b58 <_init>:
 8013b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b5a:	bf00      	nop
 8013b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b5e:	bc08      	pop	{r3}
 8013b60:	469e      	mov	lr, r3
 8013b62:	4770      	bx	lr

08013b64 <_fini>:
 8013b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b66:	bf00      	nop
 8013b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b6a:	bc08      	pop	{r3}
 8013b6c:	469e      	mov	lr, r3
 8013b6e:	4770      	bx	lr
